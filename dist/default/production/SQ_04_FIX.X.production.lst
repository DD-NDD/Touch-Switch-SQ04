

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Aug 30 10:06:52 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	stringtext23,global,class=STRCODE,delta=2
    31                           	psect	cinit,global,class=CODE,merge=1,delta=2
    32                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    33                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    34                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    37                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    38                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    39                           	psect	inittext,global,class=CODE,delta=2
    40                           	psect	clrtext,global,class=CODE,delta=2
    41                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    42                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    43                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    44                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    45                           	psect	text1,local,class=CODE,merge=1,delta=2
    46                           	psect	text2,local,class=CODE,merge=1,delta=2
    47                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text4,local,class=CODE,merge=1,delta=2
    49                           	psect	text5,local,class=CODE,merge=1,delta=2
    50                           	psect	text6,local,class=CODE,merge=1,delta=2
    51                           	psect	text7,local,class=CODE,merge=1,delta=2
    52                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text11,local,class=CODE,merge=1,delta=2
    56                           	psect	text12,local,class=CODE,merge=1,delta=2
    57                           	psect	text13,local,class=CODE,merge=1,delta=2
    58                           	psect	text14,local,class=CODE,merge=1,delta=2
    59                           	psect	text15,local,class=CODE,merge=1,delta=2
    60                           	psect	text16,local,class=CODE,merge=1,delta=2
    61                           	psect	text17,local,class=CODE,merge=1,delta=2
    62                           	psect	text18,local,class=CODE,merge=1,delta=2
    63                           	psect	text19,local,class=CODE,merge=1,delta=2
    64                           	psect	text20,local,class=CODE,merge=1,delta=2
    65                           	psect	text21,local,class=CODE,merge=1,delta=2
    66                           	psect	text22,local,class=CODE,merge=1,delta=2
    67                           	psect	text23,local,class=CODE,merge=1,delta=2
    68                           	psect	text24,local,class=CODE,merge=1,delta=2
    69                           	psect	text25,local,class=CODE,merge=1,delta=2
    70                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    71                           	psect	text27,local,class=CODE,merge=1,delta=2
    72                           	psect	text28,local,class=CODE,merge=1,delta=2
    73                           	psect	text29,local,class=CODE,merge=1,delta=2
    74                           	psect	text30,local,class=CODE,merge=1,delta=2
    75                           	psect	text31,local,class=CODE,merge=1,delta=2
    76                           	psect	text32,local,class=CODE,merge=1,delta=2
    77                           	psect	text33,local,class=CODE,merge=1,delta=2
    78                           	psect	text34,local,class=CODE,merge=1,delta=2
    79                           	psect	text35,local,class=CODE,merge=1,delta=2
    80                           	psect	text36,local,class=CODE,merge=1,delta=2
    81                           	psect	text37,local,class=CODE,merge=1,delta=2
    82                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text39,local,class=CODE,merge=1,delta=2
    84                           	psect	text40,local,class=CODE,merge=1,delta=2
    85                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text42,local,class=CODE,merge=1,delta=2
    87                           	psect	text43,local,class=CODE,merge=1,delta=2
    88                           	psect	text44,local,class=CODE,merge=1,delta=2
    89                           	psect	text45,local,class=CODE,merge=1,delta=2
    90                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text48,local,class=CODE,merge=1,delta=2
    93                           	psect	text49,local,class=CODE,merge=1,delta=2
    94                           	psect	text50,local,class=CODE,merge=1,delta=2
    95                           	psect	text51,local,class=CODE,merge=1,delta=2
    96                           	psect	text52,local,class=CODE,merge=1,delta=2
    97                           	psect	text53,local,class=CODE,merge=1,delta=2
    98                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text55,local,class=CODE,merge=1,delta=2
   100                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text57,local,class=CODE,merge=1,delta=2
   102                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
   103                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text62,local,class=CODE,merge=1,delta=2
   107                           	psect	text63,local,class=CODE,merge=1,delta=2
   108                           	psect	text64,local,class=CODE,merge=1,delta=2
   109                           	psect	text65,local,class=CODE,merge=1,delta=2
   110                           	psect	text66,local,class=CODE,merge=1,delta=2
   111                           	psect	text67,local,class=CODE,merge=1,delta=2
   112                           	psect	text68,local,class=CODE,merge=1,delta=2
   113                           	psect	text69,local,class=CODE,merge=1,delta=2
   114                           	psect	text70,local,class=CODE,merge=1,delta=2
   115                           	psect	text71,local,class=CODE,merge=1,delta=2
   116                           	psect	text72,local,class=CODE,merge=1,delta=2
   117                           	psect	text73,local,class=CODE,merge=1,delta=2
   118                           	psect	text74,local,class=CODE,merge=1,delta=2
   119                           	psect	text75,local,class=CODE,merge=1,delta=2
   120                           	psect	text76,local,class=CODE,merge=1,delta=2
   121                           	psect	text77,local,class=CODE,merge=1,delta=2
   122                           	psect	text78,local,class=CODE,merge=1,delta=2
   123                           	psect	text79,local,class=CODE,merge=1,delta=2
   124                           	psect	text80,local,class=CODE,merge=1,delta=2
   125                           	psect	text81,local,class=CODE,merge=1,delta=2
   126                           	psect	text82,local,class=CODE,merge=1,delta=2,group=1
   127                           	psect	text83,local,class=CODE,merge=1,delta=2
   128                           	psect	text84,local,class=CODE,merge=1,delta=2
   129                           	psect	text85,local,class=CODE,merge=1,delta=2
   130                           	psect	text86,local,class=CODE,merge=1,delta=2
   131                           	psect	text87,local,class=CODE,merge=1,delta=2
   132                           	psect	text88,local,class=CODE,merge=1,delta=2
   133                           	psect	text89,local,class=CODE,merge=1,delta=2
   134                           	psect	text90,local,class=CODE,merge=1,delta=2
   135                           	psect	intentry,global,class=CODE,delta=2
   136                           	psect	text92,local,class=CODE,merge=1,delta=2
   137                           	psect	text93,local,class=CODE,merge=1,delta=2
   138                           	psect	text94,local,class=CODE,merge=1,delta=2
   139                           	psect	text95,local,class=CODE,merge=1,delta=2
   140                           	psect	text96,local,class=CODE,merge=1,delta=2
   141                           	psect	text97,local,class=CODE,merge=1,delta=2
   142                           	psect	text98,local,class=CODE,merge=1,delta=2
   143                           	psect	text99,local,class=CODE,merge=1,delta=2
   144                           	psect	text100,local,class=CODE,merge=1,delta=2
   145                           	dabs	1,0x7E,2
   146  0000                     
   147                           ; Version 2.05
   148                           ; Generated 20/12/2018 GMT
   149                           ; 
   150                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution.
   164                           ; 
   165                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   166                           ;        software without specific prior written permission.
   167                           ; 
   168                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   169                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   170                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   171                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   172                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   173                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   174                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   175                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   176                           ; 
   177                           ; 
   178                           ; Code-generator required, PIC16LF1559 Definitions
   179                           ; 
   180                           ; SFR Addresses
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  0011                     	;# 
   197  0012                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  008C                     	;# 
   208  008D                     	;# 
   209  008E                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0097                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  0116                     	;# 
   227  0117                     	;# 
   228  011D                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  018E                     	;# 
   232  0191                     	;# 
   233  0191                     	;# 
   234  0192                     	;# 
   235  0193                     	;# 
   236  0193                     	;# 
   237  0194                     	;# 
   238  0195                     	;# 
   239  0196                     	;# 
   240  0199                     	;# 
   241  019A                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019C                     	;# 
   245  019D                     	;# 
   246  019E                     	;# 
   247  019F                     	;# 
   248  020C                     	;# 
   249  020D                     	;# 
   250  0211                     	;# 
   251  0211                     	;# 
   252  0212                     	;# 
   253  0212                     	;# 
   254  0213                     	;# 
   255  0213                     	;# 
   256  0214                     	;# 
   257  0214                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0216                     	;# 
   262  0216                     	;# 
   263  0217                     	;# 
   264  0217                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  0611                     	;# 
   272  0612                     	;# 
   273  0613                     	;# 
   274  0613                     	;# 
   275  0614                     	;# 
   276  0615                     	;# 
   277  0616                     	;# 
   278  0616                     	;# 
   279  0711                     	;# 
   280  0711                     	;# 
   281  0711                     	;# 
   282  0712                     	;# 
   283  0712                     	;# 
   284  0713                     	;# 
   285  0713                     	;# 
   286  0713                     	;# 
   287  0714                     	;# 
   288  0714                     	;# 
   289  0714                     	;# 
   290  0715                     	;# 
   291  0715                     	;# 
   292  0716                     	;# 
   293  0716                     	;# 
   294  0716                     	;# 
   295  0716                     	;# 
   296  0717                     	;# 
   297  0717                     	;# 
   298  0717                     	;# 
   299  0717                     	;# 
   300  0718                     	;# 
   301  0718                     	;# 
   302  0718                     	;# 
   303  0719                     	;# 
   304  0719                     	;# 
   305  0719                     	;# 
   306  0719                     	;# 
   307  071A                     	;# 
   308  071A                     	;# 
   309  071A                     	;# 
   310  071A                     	;# 
   311  071A                     	;# 
   312  071B                     	;# 
   313  071B                     	;# 
   314  071C                     	;# 
   315  071C                     	;# 
   316  071C                     	;# 
   317  071C                     	;# 
   318  071C                     	;# 
   319  071D                     	;# 
   320  071D                     	;# 
   321  071E                     	;# 
   322  071E                     	;# 
   323  0791                     	;# 
   324  0791                     	;# 
   325  0793                     	;# 
   326  0793                     	;# 
   327  0794                     	;# 
   328  0794                     	;# 
   329  0796                     	;# 
   330  0796                     	;# 
   331  0796                     	;# 
   332  0797                     	;# 
   333  0797                     	;# 
   334  0797                     	;# 
   335  0798                     	;# 
   336  0798                     	;# 
   337  0799                     	;# 
   338  0799                     	;# 
   339  0799                     	;# 
   340  079A                     	;# 
   341  079A                     	;# 
   342  079A                     	;# 
   343  079B                     	;# 
   344  079C                     	;# 
   345  079C                     	;# 
   346  079C                     	;# 
   347  079D                     	;# 
   348  079E                     	;# 
   349  079E                     	;# 
   350  0F8C                     	;# 
   351  0F8D                     	;# 
   352  0F91                     	;# 
   353  0F96                     	;# 
   354  0F97                     	;# 
   355  0F9C                     	;# 
   356  0F9D                     	;# 
   357  0F9E                     	;# 
   358  0FE3                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE9                     	;# 
   365  0FEA                     	;# 
   366  0FEB                     	;# 
   367  0FED                     	;# 
   368  0FEE                     	;# 
   369  0FEF                     	;# 
   370  0000                     	;# 
   371  0001                     	;# 
   372  0002                     	;# 
   373  0003                     	;# 
   374  0004                     	;# 
   375  0005                     	;# 
   376  0006                     	;# 
   377  0007                     	;# 
   378  0008                     	;# 
   379  0009                     	;# 
   380  000A                     	;# 
   381  000B                     	;# 
   382  000C                     	;# 
   383  000D                     	;# 
   384  000E                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0095                     	;# 
   402  0096                     	;# 
   403  0097                     	;# 
   404  0099                     	;# 
   405  009A                     	;# 
   406  009B                     	;# 
   407  009B                     	;# 
   408  009C                     	;# 
   409  009D                     	;# 
   410  009E                     	;# 
   411  009F                     	;# 
   412  010C                     	;# 
   413  010D                     	;# 
   414  010E                     	;# 
   415  0116                     	;# 
   416  0117                     	;# 
   417  011D                     	;# 
   418  018C                     	;# 
   419  018D                     	;# 
   420  018E                     	;# 
   421  0191                     	;# 
   422  0191                     	;# 
   423  0192                     	;# 
   424  0193                     	;# 
   425  0193                     	;# 
   426  0194                     	;# 
   427  0195                     	;# 
   428  0196                     	;# 
   429  0199                     	;# 
   430  019A                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019C                     	;# 
   434  019D                     	;# 
   435  019E                     	;# 
   436  019F                     	;# 
   437  020C                     	;# 
   438  020D                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0216                     	;# 
   451  0216                     	;# 
   452  0217                     	;# 
   453  0217                     	;# 
   454  0391                     	;# 
   455  0392                     	;# 
   456  0393                     	;# 
   457  0394                     	;# 
   458  0395                     	;# 
   459  0396                     	;# 
   460  0611                     	;# 
   461  0612                     	;# 
   462  0613                     	;# 
   463  0613                     	;# 
   464  0614                     	;# 
   465  0615                     	;# 
   466  0616                     	;# 
   467  0616                     	;# 
   468  0711                     	;# 
   469  0711                     	;# 
   470  0711                     	;# 
   471  0712                     	;# 
   472  0712                     	;# 
   473  0713                     	;# 
   474  0713                     	;# 
   475  0713                     	;# 
   476  0714                     	;# 
   477  0714                     	;# 
   478  0714                     	;# 
   479  0715                     	;# 
   480  0715                     	;# 
   481  0716                     	;# 
   482  0716                     	;# 
   483  0716                     	;# 
   484  0716                     	;# 
   485  0717                     	;# 
   486  0717                     	;# 
   487  0717                     	;# 
   488  0717                     	;# 
   489  0718                     	;# 
   490  0718                     	;# 
   491  0718                     	;# 
   492  0719                     	;# 
   493  0719                     	;# 
   494  0719                     	;# 
   495  0719                     	;# 
   496  071A                     	;# 
   497  071A                     	;# 
   498  071A                     	;# 
   499  071A                     	;# 
   500  071A                     	;# 
   501  071B                     	;# 
   502  071B                     	;# 
   503  071C                     	;# 
   504  071C                     	;# 
   505  071C                     	;# 
   506  071C                     	;# 
   507  071C                     	;# 
   508  071D                     	;# 
   509  071D                     	;# 
   510  071E                     	;# 
   511  071E                     	;# 
   512  0791                     	;# 
   513  0791                     	;# 
   514  0793                     	;# 
   515  0793                     	;# 
   516  0794                     	;# 
   517  0794                     	;# 
   518  0796                     	;# 
   519  0796                     	;# 
   520  0796                     	;# 
   521  0797                     	;# 
   522  0797                     	;# 
   523  0797                     	;# 
   524  0798                     	;# 
   525  0798                     	;# 
   526  0799                     	;# 
   527  0799                     	;# 
   528  0799                     	;# 
   529  079A                     	;# 
   530  079A                     	;# 
   531  079A                     	;# 
   532  079B                     	;# 
   533  079C                     	;# 
   534  079C                     	;# 
   535  079C                     	;# 
   536  079D                     	;# 
   537  079E                     	;# 
   538  079E                     	;# 
   539  0F8C                     	;# 
   540  0F8D                     	;# 
   541  0F91                     	;# 
   542  0F96                     	;# 
   543  0F97                     	;# 
   544  0F9C                     	;# 
   545  0F9D                     	;# 
   546  0F9E                     	;# 
   547  0FE3                     	;# 
   548  0FE4                     	;# 
   549  0FE5                     	;# 
   550  0FE6                     	;# 
   551  0FE7                     	;# 
   552  0FE8                     	;# 
   553  0FE9                     	;# 
   554  0FEA                     	;# 
   555  0FEB                     	;# 
   556  0FED                     	;# 
   557  0FEE                     	;# 
   558  0FEF                     	;# 
   559  0000                     	;# 
   560  0001                     	;# 
   561  0002                     	;# 
   562  0003                     	;# 
   563  0004                     	;# 
   564  0005                     	;# 
   565  0006                     	;# 
   566  0007                     	;# 
   567  0008                     	;# 
   568  0009                     	;# 
   569  000A                     	;# 
   570  000B                     	;# 
   571  000C                     	;# 
   572  000D                     	;# 
   573  000E                     	;# 
   574  0011                     	;# 
   575  0012                     	;# 
   576  0015                     	;# 
   577  0016                     	;# 
   578  0016                     	;# 
   579  0017                     	;# 
   580  0018                     	;# 
   581  0019                     	;# 
   582  001A                     	;# 
   583  001B                     	;# 
   584  001C                     	;# 
   585  008C                     	;# 
   586  008D                     	;# 
   587  008E                     	;# 
   588  0091                     	;# 
   589  0092                     	;# 
   590  0095                     	;# 
   591  0096                     	;# 
   592  0097                     	;# 
   593  0099                     	;# 
   594  009A                     	;# 
   595  009B                     	;# 
   596  009B                     	;# 
   597  009C                     	;# 
   598  009D                     	;# 
   599  009E                     	;# 
   600  009F                     	;# 
   601  010C                     	;# 
   602  010D                     	;# 
   603  010E                     	;# 
   604  0116                     	;# 
   605  0117                     	;# 
   606  011D                     	;# 
   607  018C                     	;# 
   608  018D                     	;# 
   609  018E                     	;# 
   610  0191                     	;# 
   611  0191                     	;# 
   612  0192                     	;# 
   613  0193                     	;# 
   614  0193                     	;# 
   615  0194                     	;# 
   616  0195                     	;# 
   617  0196                     	;# 
   618  0199                     	;# 
   619  019A                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019C                     	;# 
   623  019D                     	;# 
   624  019E                     	;# 
   625  019F                     	;# 
   626  020C                     	;# 
   627  020D                     	;# 
   628  0211                     	;# 
   629  0211                     	;# 
   630  0212                     	;# 
   631  0212                     	;# 
   632  0213                     	;# 
   633  0213                     	;# 
   634  0214                     	;# 
   635  0214                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0216                     	;# 
   640  0216                     	;# 
   641  0217                     	;# 
   642  0217                     	;# 
   643  0391                     	;# 
   644  0392                     	;# 
   645  0393                     	;# 
   646  0394                     	;# 
   647  0395                     	;# 
   648  0396                     	;# 
   649  0611                     	;# 
   650  0612                     	;# 
   651  0613                     	;# 
   652  0613                     	;# 
   653  0614                     	;# 
   654  0615                     	;# 
   655  0616                     	;# 
   656  0616                     	;# 
   657  0711                     	;# 
   658  0711                     	;# 
   659  0711                     	;# 
   660  0712                     	;# 
   661  0712                     	;# 
   662  0713                     	;# 
   663  0713                     	;# 
   664  0713                     	;# 
   665  0714                     	;# 
   666  0714                     	;# 
   667  0714                     	;# 
   668  0715                     	;# 
   669  0715                     	;# 
   670  0716                     	;# 
   671  0716                     	;# 
   672  0716                     	;# 
   673  0716                     	;# 
   674  0717                     	;# 
   675  0717                     	;# 
   676  0717                     	;# 
   677  0717                     	;# 
   678  0718                     	;# 
   679  0718                     	;# 
   680  0718                     	;# 
   681  0719                     	;# 
   682  0719                     	;# 
   683  0719                     	;# 
   684  0719                     	;# 
   685  071A                     	;# 
   686  071A                     	;# 
   687  071A                     	;# 
   688  071A                     	;# 
   689  071A                     	;# 
   690  071B                     	;# 
   691  071B                     	;# 
   692  071C                     	;# 
   693  071C                     	;# 
   694  071C                     	;# 
   695  071C                     	;# 
   696  071C                     	;# 
   697  071D                     	;# 
   698  071D                     	;# 
   699  071E                     	;# 
   700  071E                     	;# 
   701  0791                     	;# 
   702  0791                     	;# 
   703  0793                     	;# 
   704  0793                     	;# 
   705  0794                     	;# 
   706  0794                     	;# 
   707  0796                     	;# 
   708  0796                     	;# 
   709  0796                     	;# 
   710  0797                     	;# 
   711  0797                     	;# 
   712  0797                     	;# 
   713  0798                     	;# 
   714  0798                     	;# 
   715  0799                     	;# 
   716  0799                     	;# 
   717  0799                     	;# 
   718  079A                     	;# 
   719  079A                     	;# 
   720  079A                     	;# 
   721  079B                     	;# 
   722  079C                     	;# 
   723  079C                     	;# 
   724  079C                     	;# 
   725  079D                     	;# 
   726  079E                     	;# 
   727  079E                     	;# 
   728  0F8C                     	;# 
   729  0F8D                     	;# 
   730  0F91                     	;# 
   731  0F96                     	;# 
   732  0F97                     	;# 
   733  0F9C                     	;# 
   734  0F9D                     	;# 
   735  0F9E                     	;# 
   736  0FE3                     	;# 
   737  0FE4                     	;# 
   738  0FE5                     	;# 
   739  0FE6                     	;# 
   740  0FE7                     	;# 
   741  0FE8                     	;# 
   742  0FE9                     	;# 
   743  0FEA                     	;# 
   744  0FEB                     	;# 
   745  0FED                     	;# 
   746  0FEE                     	;# 
   747  0FEF                     	;# 
   748  0000                     	;# 
   749  0001                     	;# 
   750  0002                     	;# 
   751  0003                     	;# 
   752  0004                     	;# 
   753  0005                     	;# 
   754  0006                     	;# 
   755  0007                     	;# 
   756  0008                     	;# 
   757  0009                     	;# 
   758  000A                     	;# 
   759  000B                     	;# 
   760  000C                     	;# 
   761  000D                     	;# 
   762  000E                     	;# 
   763  0011                     	;# 
   764  0012                     	;# 
   765  0015                     	;# 
   766  0016                     	;# 
   767  0016                     	;# 
   768  0017                     	;# 
   769  0018                     	;# 
   770  0019                     	;# 
   771  001A                     	;# 
   772  001B                     	;# 
   773  001C                     	;# 
   774  008C                     	;# 
   775  008D                     	;# 
   776  008E                     	;# 
   777  0091                     	;# 
   778  0092                     	;# 
   779  0095                     	;# 
   780  0096                     	;# 
   781  0097                     	;# 
   782  0099                     	;# 
   783  009A                     	;# 
   784  009B                     	;# 
   785  009B                     	;# 
   786  009C                     	;# 
   787  009D                     	;# 
   788  009E                     	;# 
   789  009F                     	;# 
   790  010C                     	;# 
   791  010D                     	;# 
   792  010E                     	;# 
   793  0116                     	;# 
   794  0117                     	;# 
   795  011D                     	;# 
   796  018C                     	;# 
   797  018D                     	;# 
   798  018E                     	;# 
   799  0191                     	;# 
   800  0191                     	;# 
   801  0192                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0194                     	;# 
   805  0195                     	;# 
   806  0196                     	;# 
   807  0199                     	;# 
   808  019A                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019C                     	;# 
   812  019D                     	;# 
   813  019E                     	;# 
   814  019F                     	;# 
   815  020C                     	;# 
   816  020D                     	;# 
   817  0211                     	;# 
   818  0211                     	;# 
   819  0212                     	;# 
   820  0212                     	;# 
   821  0213                     	;# 
   822  0213                     	;# 
   823  0214                     	;# 
   824  0214                     	;# 
   825  0215                     	;# 
   826  0215                     	;# 
   827  0215                     	;# 
   828  0216                     	;# 
   829  0216                     	;# 
   830  0217                     	;# 
   831  0217                     	;# 
   832  0391                     	;# 
   833  0392                     	;# 
   834  0393                     	;# 
   835  0394                     	;# 
   836  0395                     	;# 
   837  0396                     	;# 
   838  0611                     	;# 
   839  0612                     	;# 
   840  0613                     	;# 
   841  0613                     	;# 
   842  0614                     	;# 
   843  0615                     	;# 
   844  0616                     	;# 
   845  0616                     	;# 
   846  0711                     	;# 
   847  0711                     	;# 
   848  0711                     	;# 
   849  0712                     	;# 
   850  0712                     	;# 
   851  0713                     	;# 
   852  0713                     	;# 
   853  0713                     	;# 
   854  0714                     	;# 
   855  0714                     	;# 
   856  0714                     	;# 
   857  0715                     	;# 
   858  0715                     	;# 
   859  0716                     	;# 
   860  0716                     	;# 
   861  0716                     	;# 
   862  0716                     	;# 
   863  0717                     	;# 
   864  0717                     	;# 
   865  0717                     	;# 
   866  0717                     	;# 
   867  0718                     	;# 
   868  0718                     	;# 
   869  0718                     	;# 
   870  0719                     	;# 
   871  0719                     	;# 
   872  0719                     	;# 
   873  0719                     	;# 
   874  071A                     	;# 
   875  071A                     	;# 
   876  071A                     	;# 
   877  071A                     	;# 
   878  071A                     	;# 
   879  071B                     	;# 
   880  071B                     	;# 
   881  071C                     	;# 
   882  071C                     	;# 
   883  071C                     	;# 
   884  071C                     	;# 
   885  071C                     	;# 
   886  071D                     	;# 
   887  071D                     	;# 
   888  071E                     	;# 
   889  071E                     	;# 
   890  0791                     	;# 
   891  0791                     	;# 
   892  0793                     	;# 
   893  0793                     	;# 
   894  0794                     	;# 
   895  0794                     	;# 
   896  0796                     	;# 
   897  0796                     	;# 
   898  0796                     	;# 
   899  0797                     	;# 
   900  0797                     	;# 
   901  0797                     	;# 
   902  0798                     	;# 
   903  0798                     	;# 
   904  0799                     	;# 
   905  0799                     	;# 
   906  0799                     	;# 
   907  079A                     	;# 
   908  079A                     	;# 
   909  079A                     	;# 
   910  079B                     	;# 
   911  079C                     	;# 
   912  079C                     	;# 
   913  079C                     	;# 
   914  079D                     	;# 
   915  079E                     	;# 
   916  079E                     	;# 
   917  0F8C                     	;# 
   918  0F8D                     	;# 
   919  0F91                     	;# 
   920  0F96                     	;# 
   921  0F97                     	;# 
   922  0F9C                     	;# 
   923  0F9D                     	;# 
   924  0F9E                     	;# 
   925  0FE3                     	;# 
   926  0FE4                     	;# 
   927  0FE5                     	;# 
   928  0FE6                     	;# 
   929  0FE7                     	;# 
   930  0FE8                     	;# 
   931  0FE9                     	;# 
   932  0FEA                     	;# 
   933  0FEB                     	;# 
   934  0FED                     	;# 
   935  0FEE                     	;# 
   936  0FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000D                     	;# 
   951  000E                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0091                     	;# 
   967  0092                     	;# 
   968  0095                     	;# 
   969  0096                     	;# 
   970  0097                     	;# 
   971  0099                     	;# 
   972  009A                     	;# 
   973  009B                     	;# 
   974  009B                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009E                     	;# 
   978  009F                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0199                     	;# 
   997  019A                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020C                     	;# 
  1005  020D                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0391                     	;# 
  1022  0392                     	;# 
  1023  0393                     	;# 
  1024  0394                     	;# 
  1025  0395                     	;# 
  1026  0396                     	;# 
  1027  0611                     	;# 
  1028  0612                     	;# 
  1029  0613                     	;# 
  1030  0613                     	;# 
  1031  0614                     	;# 
  1032  0615                     	;# 
  1033  0616                     	;# 
  1034  0616                     	;# 
  1035  0711                     	;# 
  1036  0711                     	;# 
  1037  0711                     	;# 
  1038  0712                     	;# 
  1039  0712                     	;# 
  1040  0713                     	;# 
  1041  0713                     	;# 
  1042  0713                     	;# 
  1043  0714                     	;# 
  1044  0714                     	;# 
  1045  0714                     	;# 
  1046  0715                     	;# 
  1047  0715                     	;# 
  1048  0716                     	;# 
  1049  0716                     	;# 
  1050  0716                     	;# 
  1051  0716                     	;# 
  1052  0717                     	;# 
  1053  0717                     	;# 
  1054  0717                     	;# 
  1055  0717                     	;# 
  1056  0718                     	;# 
  1057  0718                     	;# 
  1058  0718                     	;# 
  1059  0719                     	;# 
  1060  0719                     	;# 
  1061  0719                     	;# 
  1062  0719                     	;# 
  1063  071A                     	;# 
  1064  071A                     	;# 
  1065  071A                     	;# 
  1066  071A                     	;# 
  1067  071A                     	;# 
  1068  071B                     	;# 
  1069  071B                     	;# 
  1070  071C                     	;# 
  1071  071C                     	;# 
  1072  071C                     	;# 
  1073  071C                     	;# 
  1074  071C                     	;# 
  1075  071D                     	;# 
  1076  071D                     	;# 
  1077  071E                     	;# 
  1078  071E                     	;# 
  1079  0791                     	;# 
  1080  0791                     	;# 
  1081  0793                     	;# 
  1082  0793                     	;# 
  1083  0794                     	;# 
  1084  0794                     	;# 
  1085  0796                     	;# 
  1086  0796                     	;# 
  1087  0796                     	;# 
  1088  0797                     	;# 
  1089  0797                     	;# 
  1090  0797                     	;# 
  1091  0798                     	;# 
  1092  0798                     	;# 
  1093  0799                     	;# 
  1094  0799                     	;# 
  1095  0799                     	;# 
  1096  079A                     	;# 
  1097  079A                     	;# 
  1098  079A                     	;# 
  1099  079B                     	;# 
  1100  079C                     	;# 
  1101  079C                     	;# 
  1102  079C                     	;# 
  1103  079D                     	;# 
  1104  079E                     	;# 
  1105  079E                     	;# 
  1106  0F8C                     	;# 
  1107  0F8D                     	;# 
  1108  0F91                     	;# 
  1109  0F96                     	;# 
  1110  0F97                     	;# 
  1111  0F9C                     	;# 
  1112  0F9D                     	;# 
  1113  0F9E                     	;# 
  1114  0FE3                     	;# 
  1115  0FE4                     	;# 
  1116  0FE5                     	;# 
  1117  0FE6                     	;# 
  1118  0FE7                     	;# 
  1119  0FE8                     	;# 
  1120  0FE9                     	;# 
  1121  0FEA                     	;# 
  1122  0FEB                     	;# 
  1123  0FED                     	;# 
  1124  0FEE                     	;# 
  1125  0FEF                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0008                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000D                     	;# 
  1140  000E                     	;# 
  1141  0011                     	;# 
  1142  0012                     	;# 
  1143  0015                     	;# 
  1144  0016                     	;# 
  1145  0016                     	;# 
  1146  0017                     	;# 
  1147  0018                     	;# 
  1148  0019                     	;# 
  1149  001A                     	;# 
  1150  001B                     	;# 
  1151  001C                     	;# 
  1152  008C                     	;# 
  1153  008D                     	;# 
  1154  008E                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0095                     	;# 
  1158  0096                     	;# 
  1159  0097                     	;# 
  1160  0099                     	;# 
  1161  009A                     	;# 
  1162  009B                     	;# 
  1163  009B                     	;# 
  1164  009C                     	;# 
  1165  009D                     	;# 
  1166  009E                     	;# 
  1167  009F                     	;# 
  1168  010C                     	;# 
  1169  010D                     	;# 
  1170  010E                     	;# 
  1171  0116                     	;# 
  1172  0117                     	;# 
  1173  011D                     	;# 
  1174  018C                     	;# 
  1175  018D                     	;# 
  1176  018E                     	;# 
  1177  0191                     	;# 
  1178  0191                     	;# 
  1179  0192                     	;# 
  1180  0193                     	;# 
  1181  0193                     	;# 
  1182  0194                     	;# 
  1183  0195                     	;# 
  1184  0196                     	;# 
  1185  0199                     	;# 
  1186  019A                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  020C                     	;# 
  1194  020D                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0391                     	;# 
  1211  0392                     	;# 
  1212  0393                     	;# 
  1213  0394                     	;# 
  1214  0395                     	;# 
  1215  0396                     	;# 
  1216  0611                     	;# 
  1217  0612                     	;# 
  1218  0613                     	;# 
  1219  0613                     	;# 
  1220  0614                     	;# 
  1221  0615                     	;# 
  1222  0616                     	;# 
  1223  0616                     	;# 
  1224  0711                     	;# 
  1225  0711                     	;# 
  1226  0711                     	;# 
  1227  0712                     	;# 
  1228  0712                     	;# 
  1229  0713                     	;# 
  1230  0713                     	;# 
  1231  0713                     	;# 
  1232  0714                     	;# 
  1233  0714                     	;# 
  1234  0714                     	;# 
  1235  0715                     	;# 
  1236  0715                     	;# 
  1237  0716                     	;# 
  1238  0716                     	;# 
  1239  0716                     	;# 
  1240  0716                     	;# 
  1241  0717                     	;# 
  1242  0717                     	;# 
  1243  0717                     	;# 
  1244  0717                     	;# 
  1245  0718                     	;# 
  1246  0718                     	;# 
  1247  0718                     	;# 
  1248  0719                     	;# 
  1249  0719                     	;# 
  1250  0719                     	;# 
  1251  0719                     	;# 
  1252  071A                     	;# 
  1253  071A                     	;# 
  1254  071A                     	;# 
  1255  071A                     	;# 
  1256  071A                     	;# 
  1257  071B                     	;# 
  1258  071B                     	;# 
  1259  071C                     	;# 
  1260  071C                     	;# 
  1261  071C                     	;# 
  1262  071C                     	;# 
  1263  071C                     	;# 
  1264  071D                     	;# 
  1265  071D                     	;# 
  1266  071E                     	;# 
  1267  071E                     	;# 
  1268  0791                     	;# 
  1269  0791                     	;# 
  1270  0793                     	;# 
  1271  0793                     	;# 
  1272  0794                     	;# 
  1273  0794                     	;# 
  1274  0796                     	;# 
  1275  0796                     	;# 
  1276  0796                     	;# 
  1277  0797                     	;# 
  1278  0797                     	;# 
  1279  0797                     	;# 
  1280  0798                     	;# 
  1281  0798                     	;# 
  1282  0799                     	;# 
  1283  0799                     	;# 
  1284  0799                     	;# 
  1285  079A                     	;# 
  1286  079A                     	;# 
  1287  079A                     	;# 
  1288  079B                     	;# 
  1289  079C                     	;# 
  1290  079C                     	;# 
  1291  079C                     	;# 
  1292  079D                     	;# 
  1293  079E                     	;# 
  1294  079E                     	;# 
  1295  0F8C                     	;# 
  1296  0F8D                     	;# 
  1297  0F91                     	;# 
  1298  0F96                     	;# 
  1299  0F97                     	;# 
  1300  0F9C                     	;# 
  1301  0F9D                     	;# 
  1302  0F9E                     	;# 
  1303  0FE3                     	;# 
  1304  0FE4                     	;# 
  1305  0FE5                     	;# 
  1306  0FE6                     	;# 
  1307  0FE7                     	;# 
  1308  0FE8                     	;# 
  1309  0FE9                     	;# 
  1310  0FEA                     	;# 
  1311  0FEB                     	;# 
  1312  0FED                     	;# 
  1313  0FEE                     	;# 
  1314  0FEF                     	;# 
  1315  0000                     	;# 
  1316  0001                     	;# 
  1317  0002                     	;# 
  1318  0003                     	;# 
  1319  0004                     	;# 
  1320  0005                     	;# 
  1321  0006                     	;# 
  1322  0007                     	;# 
  1323  0008                     	;# 
  1324  0009                     	;# 
  1325  000A                     	;# 
  1326  000B                     	;# 
  1327  000C                     	;# 
  1328  000D                     	;# 
  1329  000E                     	;# 
  1330  0011                     	;# 
  1331  0012                     	;# 
  1332  0015                     	;# 
  1333  0016                     	;# 
  1334  0016                     	;# 
  1335  0017                     	;# 
  1336  0018                     	;# 
  1337  0019                     	;# 
  1338  001A                     	;# 
  1339  001B                     	;# 
  1340  001C                     	;# 
  1341  008C                     	;# 
  1342  008D                     	;# 
  1343  008E                     	;# 
  1344  0091                     	;# 
  1345  0092                     	;# 
  1346  0095                     	;# 
  1347  0096                     	;# 
  1348  0097                     	;# 
  1349  0099                     	;# 
  1350  009A                     	;# 
  1351  009B                     	;# 
  1352  009B                     	;# 
  1353  009C                     	;# 
  1354  009D                     	;# 
  1355  009E                     	;# 
  1356  009F                     	;# 
  1357  010C                     	;# 
  1358  010D                     	;# 
  1359  010E                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  011D                     	;# 
  1363  018C                     	;# 
  1364  018D                     	;# 
  1365  018E                     	;# 
  1366  0191                     	;# 
  1367  0191                     	;# 
  1368  0192                     	;# 
  1369  0193                     	;# 
  1370  0193                     	;# 
  1371  0194                     	;# 
  1372  0195                     	;# 
  1373  0196                     	;# 
  1374  0199                     	;# 
  1375  019A                     	;# 
  1376  019B                     	;# 
  1377  019B                     	;# 
  1378  019C                     	;# 
  1379  019D                     	;# 
  1380  019E                     	;# 
  1381  019F                     	;# 
  1382  020C                     	;# 
  1383  020D                     	;# 
  1384  0211                     	;# 
  1385  0211                     	;# 
  1386  0212                     	;# 
  1387  0212                     	;# 
  1388  0213                     	;# 
  1389  0213                     	;# 
  1390  0214                     	;# 
  1391  0214                     	;# 
  1392  0215                     	;# 
  1393  0215                     	;# 
  1394  0215                     	;# 
  1395  0216                     	;# 
  1396  0216                     	;# 
  1397  0217                     	;# 
  1398  0217                     	;# 
  1399  0391                     	;# 
  1400  0392                     	;# 
  1401  0393                     	;# 
  1402  0394                     	;# 
  1403  0395                     	;# 
  1404  0396                     	;# 
  1405  0611                     	;# 
  1406  0612                     	;# 
  1407  0613                     	;# 
  1408  0613                     	;# 
  1409  0614                     	;# 
  1410  0615                     	;# 
  1411  0616                     	;# 
  1412  0616                     	;# 
  1413  0711                     	;# 
  1414  0711                     	;# 
  1415  0711                     	;# 
  1416  0712                     	;# 
  1417  0712                     	;# 
  1418  0713                     	;# 
  1419  0713                     	;# 
  1420  0713                     	;# 
  1421  0714                     	;# 
  1422  0714                     	;# 
  1423  0714                     	;# 
  1424  0715                     	;# 
  1425  0715                     	;# 
  1426  0716                     	;# 
  1427  0716                     	;# 
  1428  0716                     	;# 
  1429  0716                     	;# 
  1430  0717                     	;# 
  1431  0717                     	;# 
  1432  0717                     	;# 
  1433  0717                     	;# 
  1434  0718                     	;# 
  1435  0718                     	;# 
  1436  0718                     	;# 
  1437  0719                     	;# 
  1438  0719                     	;# 
  1439  0719                     	;# 
  1440  0719                     	;# 
  1441  071A                     	;# 
  1442  071A                     	;# 
  1443  071A                     	;# 
  1444  071A                     	;# 
  1445  071A                     	;# 
  1446  071B                     	;# 
  1447  071B                     	;# 
  1448  071C                     	;# 
  1449  071C                     	;# 
  1450  071C                     	;# 
  1451  071C                     	;# 
  1452  071C                     	;# 
  1453  071D                     	;# 
  1454  071D                     	;# 
  1455  071E                     	;# 
  1456  071E                     	;# 
  1457  0791                     	;# 
  1458  0791                     	;# 
  1459  0793                     	;# 
  1460  0793                     	;# 
  1461  0794                     	;# 
  1462  0794                     	;# 
  1463  0796                     	;# 
  1464  0796                     	;# 
  1465  0796                     	;# 
  1466  0797                     	;# 
  1467  0797                     	;# 
  1468  0797                     	;# 
  1469  0798                     	;# 
  1470  0798                     	;# 
  1471  0799                     	;# 
  1472  0799                     	;# 
  1473  0799                     	;# 
  1474  079A                     	;# 
  1475  079A                     	;# 
  1476  079A                     	;# 
  1477  079B                     	;# 
  1478  079C                     	;# 
  1479  079C                     	;# 
  1480  079C                     	;# 
  1481  079D                     	;# 
  1482  079E                     	;# 
  1483  079E                     	;# 
  1484  0F8C                     	;# 
  1485  0F8D                     	;# 
  1486  0F91                     	;# 
  1487  0F96                     	;# 
  1488  0F97                     	;# 
  1489  0F9C                     	;# 
  1490  0F9D                     	;# 
  1491  0F9E                     	;# 
  1492  0FE3                     	;# 
  1493  0FE4                     	;# 
  1494  0FE5                     	;# 
  1495  0FE6                     	;# 
  1496  0FE7                     	;# 
  1497  0FE8                     	;# 
  1498  0FE9                     	;# 
  1499  0FEA                     	;# 
  1500  0FEB                     	;# 
  1501  0FED                     	;# 
  1502  0FEE                     	;# 
  1503  0FEF                     	;# 
  1504  0000                     	;# 
  1505  0001                     	;# 
  1506  0002                     	;# 
  1507  0003                     	;# 
  1508  0004                     	;# 
  1509  0005                     	;# 
  1510  0006                     	;# 
  1511  0007                     	;# 
  1512  0008                     	;# 
  1513  0009                     	;# 
  1514  000A                     	;# 
  1515  000B                     	;# 
  1516  000C                     	;# 
  1517  000D                     	;# 
  1518  000E                     	;# 
  1519  0011                     	;# 
  1520  0012                     	;# 
  1521  0015                     	;# 
  1522  0016                     	;# 
  1523  0016                     	;# 
  1524  0017                     	;# 
  1525  0018                     	;# 
  1526  0019                     	;# 
  1527  001A                     	;# 
  1528  001B                     	;# 
  1529  001C                     	;# 
  1530  008C                     	;# 
  1531  008D                     	;# 
  1532  008E                     	;# 
  1533  0091                     	;# 
  1534  0092                     	;# 
  1535  0095                     	;# 
  1536  0096                     	;# 
  1537  0097                     	;# 
  1538  0099                     	;# 
  1539  009A                     	;# 
  1540  009B                     	;# 
  1541  009B                     	;# 
  1542  009C                     	;# 
  1543  009D                     	;# 
  1544  009E                     	;# 
  1545  009F                     	;# 
  1546  010C                     	;# 
  1547  010D                     	;# 
  1548  010E                     	;# 
  1549  0116                     	;# 
  1550  0117                     	;# 
  1551  011D                     	;# 
  1552  018C                     	;# 
  1553  018D                     	;# 
  1554  018E                     	;# 
  1555  0191                     	;# 
  1556  0191                     	;# 
  1557  0192                     	;# 
  1558  0193                     	;# 
  1559  0193                     	;# 
  1560  0194                     	;# 
  1561  0195                     	;# 
  1562  0196                     	;# 
  1563  0199                     	;# 
  1564  019A                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020C                     	;# 
  1572  020D                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0391                     	;# 
  1589  0392                     	;# 
  1590  0393                     	;# 
  1591  0394                     	;# 
  1592  0395                     	;# 
  1593  0396                     	;# 
  1594  0611                     	;# 
  1595  0612                     	;# 
  1596  0613                     	;# 
  1597  0613                     	;# 
  1598  0614                     	;# 
  1599  0615                     	;# 
  1600  0616                     	;# 
  1601  0616                     	;# 
  1602  0711                     	;# 
  1603  0711                     	;# 
  1604  0711                     	;# 
  1605  0712                     	;# 
  1606  0712                     	;# 
  1607  0713                     	;# 
  1608  0713                     	;# 
  1609  0713                     	;# 
  1610  0714                     	;# 
  1611  0714                     	;# 
  1612  0714                     	;# 
  1613  0715                     	;# 
  1614  0715                     	;# 
  1615  0716                     	;# 
  1616  0716                     	;# 
  1617  0716                     	;# 
  1618  0716                     	;# 
  1619  0717                     	;# 
  1620  0717                     	;# 
  1621  0717                     	;# 
  1622  0717                     	;# 
  1623  0718                     	;# 
  1624  0718                     	;# 
  1625  0718                     	;# 
  1626  0719                     	;# 
  1627  0719                     	;# 
  1628  0719                     	;# 
  1629  0719                     	;# 
  1630  071A                     	;# 
  1631  071A                     	;# 
  1632  071A                     	;# 
  1633  071A                     	;# 
  1634  071A                     	;# 
  1635  071B                     	;# 
  1636  071B                     	;# 
  1637  071C                     	;# 
  1638  071C                     	;# 
  1639  071C                     	;# 
  1640  071C                     	;# 
  1641  071C                     	;# 
  1642  071D                     	;# 
  1643  071D                     	;# 
  1644  071E                     	;# 
  1645  071E                     	;# 
  1646  0791                     	;# 
  1647  0791                     	;# 
  1648  0793                     	;# 
  1649  0793                     	;# 
  1650  0794                     	;# 
  1651  0794                     	;# 
  1652  0796                     	;# 
  1653  0796                     	;# 
  1654  0796                     	;# 
  1655  0797                     	;# 
  1656  0797                     	;# 
  1657  0797                     	;# 
  1658  0798                     	;# 
  1659  0798                     	;# 
  1660  0799                     	;# 
  1661  0799                     	;# 
  1662  0799                     	;# 
  1663  079A                     	;# 
  1664  079A                     	;# 
  1665  079A                     	;# 
  1666  079B                     	;# 
  1667  079C                     	;# 
  1668  079C                     	;# 
  1669  079C                     	;# 
  1670  079D                     	;# 
  1671  079E                     	;# 
  1672  079E                     	;# 
  1673  0F8C                     	;# 
  1674  0F8D                     	;# 
  1675  0F91                     	;# 
  1676  0F96                     	;# 
  1677  0F97                     	;# 
  1678  0F9C                     	;# 
  1679  0F9D                     	;# 
  1680  0F9E                     	;# 
  1681  0FE3                     	;# 
  1682  0FE4                     	;# 
  1683  0FE5                     	;# 
  1684  0FE6                     	;# 
  1685  0FE7                     	;# 
  1686  0FE8                     	;# 
  1687  0FE9                     	;# 
  1688  0FEA                     	;# 
  1689  0FEB                     	;# 
  1690  0FED                     	;# 
  1691  0FEE                     	;# 
  1692  0FEF                     	;# 
  1693  0000                     	;# 
  1694  0001                     	;# 
  1695  0002                     	;# 
  1696  0003                     	;# 
  1697  0004                     	;# 
  1698  0005                     	;# 
  1699  0006                     	;# 
  1700  0007                     	;# 
  1701  0008                     	;# 
  1702  0009                     	;# 
  1703  000A                     	;# 
  1704  000B                     	;# 
  1705  000C                     	;# 
  1706  000D                     	;# 
  1707  000E                     	;# 
  1708  0011                     	;# 
  1709  0012                     	;# 
  1710  0015                     	;# 
  1711  0016                     	;# 
  1712  0016                     	;# 
  1713  0017                     	;# 
  1714  0018                     	;# 
  1715  0019                     	;# 
  1716  001A                     	;# 
  1717  001B                     	;# 
  1718  001C                     	;# 
  1719  008C                     	;# 
  1720  008D                     	;# 
  1721  008E                     	;# 
  1722  0091                     	;# 
  1723  0092                     	;# 
  1724  0095                     	;# 
  1725  0096                     	;# 
  1726  0097                     	;# 
  1727  0099                     	;# 
  1728  009A                     	;# 
  1729  009B                     	;# 
  1730  009B                     	;# 
  1731  009C                     	;# 
  1732  009D                     	;# 
  1733  009E                     	;# 
  1734  009F                     	;# 
  1735  010C                     	;# 
  1736  010D                     	;# 
  1737  010E                     	;# 
  1738  0116                     	;# 
  1739  0117                     	;# 
  1740  011D                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  018E                     	;# 
  1744  0191                     	;# 
  1745  0191                     	;# 
  1746  0192                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0194                     	;# 
  1750  0195                     	;# 
  1751  0196                     	;# 
  1752  0199                     	;# 
  1753  019A                     	;# 
  1754  019B                     	;# 
  1755  019B                     	;# 
  1756  019C                     	;# 
  1757  019D                     	;# 
  1758  019E                     	;# 
  1759  019F                     	;# 
  1760  020C                     	;# 
  1761  020D                     	;# 
  1762  0211                     	;# 
  1763  0211                     	;# 
  1764  0212                     	;# 
  1765  0212                     	;# 
  1766  0213                     	;# 
  1767  0213                     	;# 
  1768  0214                     	;# 
  1769  0214                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0215                     	;# 
  1773  0216                     	;# 
  1774  0216                     	;# 
  1775  0217                     	;# 
  1776  0217                     	;# 
  1777  0391                     	;# 
  1778  0392                     	;# 
  1779  0393                     	;# 
  1780  0394                     	;# 
  1781  0395                     	;# 
  1782  0396                     	;# 
  1783  0611                     	;# 
  1784  0612                     	;# 
  1785  0613                     	;# 
  1786  0613                     	;# 
  1787  0614                     	;# 
  1788  0615                     	;# 
  1789  0616                     	;# 
  1790  0616                     	;# 
  1791  0711                     	;# 
  1792  0711                     	;# 
  1793  0711                     	;# 
  1794  0712                     	;# 
  1795  0712                     	;# 
  1796  0713                     	;# 
  1797  0713                     	;# 
  1798  0713                     	;# 
  1799  0714                     	;# 
  1800  0714                     	;# 
  1801  0714                     	;# 
  1802  0715                     	;# 
  1803  0715                     	;# 
  1804  0716                     	;# 
  1805  0716                     	;# 
  1806  0716                     	;# 
  1807  0716                     	;# 
  1808  0717                     	;# 
  1809  0717                     	;# 
  1810  0717                     	;# 
  1811  0717                     	;# 
  1812  0718                     	;# 
  1813  0718                     	;# 
  1814  0718                     	;# 
  1815  0719                     	;# 
  1816  0719                     	;# 
  1817  0719                     	;# 
  1818  0719                     	;# 
  1819  071A                     	;# 
  1820  071A                     	;# 
  1821  071A                     	;# 
  1822  071A                     	;# 
  1823  071A                     	;# 
  1824  071B                     	;# 
  1825  071B                     	;# 
  1826  071C                     	;# 
  1827  071C                     	;# 
  1828  071C                     	;# 
  1829  071C                     	;# 
  1830  071C                     	;# 
  1831  071D                     	;# 
  1832  071D                     	;# 
  1833  071E                     	;# 
  1834  071E                     	;# 
  1835  0791                     	;# 
  1836  0791                     	;# 
  1837  0793                     	;# 
  1838  0793                     	;# 
  1839  0794                     	;# 
  1840  0794                     	;# 
  1841  0796                     	;# 
  1842  0796                     	;# 
  1843  0796                     	;# 
  1844  0797                     	;# 
  1845  0797                     	;# 
  1846  0797                     	;# 
  1847  0798                     	;# 
  1848  0798                     	;# 
  1849  0799                     	;# 
  1850  0799                     	;# 
  1851  0799                     	;# 
  1852  079A                     	;# 
  1853  079A                     	;# 
  1854  079A                     	;# 
  1855  079B                     	;# 
  1856  079C                     	;# 
  1857  079C                     	;# 
  1858  079C                     	;# 
  1859  079D                     	;# 
  1860  079E                     	;# 
  1861  079E                     	;# 
  1862  0F8C                     	;# 
  1863  0F8D                     	;# 
  1864  0F91                     	;# 
  1865  0F96                     	;# 
  1866  0F97                     	;# 
  1867  0F9C                     	;# 
  1868  0F9D                     	;# 
  1869  0F9E                     	;# 
  1870  0FE3                     	;# 
  1871  0FE4                     	;# 
  1872  0FE5                     	;# 
  1873  0FE6                     	;# 
  1874  0FE7                     	;# 
  1875  0FE8                     	;# 
  1876  0FE9                     	;# 
  1877  0FEA                     	;# 
  1878  0FEB                     	;# 
  1879  0FED                     	;# 
  1880  0FEE                     	;# 
  1881  0FEF                     	;# 
  1882  0000                     	;# 
  1883  0001                     	;# 
  1884  0002                     	;# 
  1885  0003                     	;# 
  1886  0004                     	;# 
  1887  0005                     	;# 
  1888  0006                     	;# 
  1889  0007                     	;# 
  1890  0008                     	;# 
  1891  0009                     	;# 
  1892  000A                     	;# 
  1893  000B                     	;# 
  1894  000C                     	;# 
  1895  000D                     	;# 
  1896  000E                     	;# 
  1897  0011                     	;# 
  1898  0012                     	;# 
  1899  0015                     	;# 
  1900  0016                     	;# 
  1901  0016                     	;# 
  1902  0017                     	;# 
  1903  0018                     	;# 
  1904  0019                     	;# 
  1905  001A                     	;# 
  1906  001B                     	;# 
  1907  001C                     	;# 
  1908  008C                     	;# 
  1909  008D                     	;# 
  1910  008E                     	;# 
  1911  0091                     	;# 
  1912  0092                     	;# 
  1913  0095                     	;# 
  1914  0096                     	;# 
  1915  0097                     	;# 
  1916  0099                     	;# 
  1917  009A                     	;# 
  1918  009B                     	;# 
  1919  009B                     	;# 
  1920  009C                     	;# 
  1921  009D                     	;# 
  1922  009E                     	;# 
  1923  009F                     	;# 
  1924  010C                     	;# 
  1925  010D                     	;# 
  1926  010E                     	;# 
  1927  0116                     	;# 
  1928  0117                     	;# 
  1929  011D                     	;# 
  1930  018C                     	;# 
  1931  018D                     	;# 
  1932  018E                     	;# 
  1933  0191                     	;# 
  1934  0191                     	;# 
  1935  0192                     	;# 
  1936  0193                     	;# 
  1937  0193                     	;# 
  1938  0194                     	;# 
  1939  0195                     	;# 
  1940  0196                     	;# 
  1941  0199                     	;# 
  1942  019A                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019C                     	;# 
  1946  019D                     	;# 
  1947  019E                     	;# 
  1948  019F                     	;# 
  1949  020C                     	;# 
  1950  020D                     	;# 
  1951  0211                     	;# 
  1952  0211                     	;# 
  1953  0212                     	;# 
  1954  0212                     	;# 
  1955  0213                     	;# 
  1956  0213                     	;# 
  1957  0214                     	;# 
  1958  0214                     	;# 
  1959  0215                     	;# 
  1960  0215                     	;# 
  1961  0215                     	;# 
  1962  0216                     	;# 
  1963  0216                     	;# 
  1964  0217                     	;# 
  1965  0217                     	;# 
  1966  0391                     	;# 
  1967  0392                     	;# 
  1968  0393                     	;# 
  1969  0394                     	;# 
  1970  0395                     	;# 
  1971  0396                     	;# 
  1972  0611                     	;# 
  1973  0612                     	;# 
  1974  0613                     	;# 
  1975  0613                     	;# 
  1976  0614                     	;# 
  1977  0615                     	;# 
  1978  0616                     	;# 
  1979  0616                     	;# 
  1980  0711                     	;# 
  1981  0711                     	;# 
  1982  0711                     	;# 
  1983  0712                     	;# 
  1984  0712                     	;# 
  1985  0713                     	;# 
  1986  0713                     	;# 
  1987  0713                     	;# 
  1988  0714                     	;# 
  1989  0714                     	;# 
  1990  0714                     	;# 
  1991  0715                     	;# 
  1992  0715                     	;# 
  1993  0716                     	;# 
  1994  0716                     	;# 
  1995  0716                     	;# 
  1996  0716                     	;# 
  1997  0717                     	;# 
  1998  0717                     	;# 
  1999  0717                     	;# 
  2000  0717                     	;# 
  2001  0718                     	;# 
  2002  0718                     	;# 
  2003  0718                     	;# 
  2004  0719                     	;# 
  2005  0719                     	;# 
  2006  0719                     	;# 
  2007  0719                     	;# 
  2008  071A                     	;# 
  2009  071A                     	;# 
  2010  071A                     	;# 
  2011  071A                     	;# 
  2012  071A                     	;# 
  2013  071B                     	;# 
  2014  071B                     	;# 
  2015  071C                     	;# 
  2016  071C                     	;# 
  2017  071C                     	;# 
  2018  071C                     	;# 
  2019  071C                     	;# 
  2020  071D                     	;# 
  2021  071D                     	;# 
  2022  071E                     	;# 
  2023  071E                     	;# 
  2024  0791                     	;# 
  2025  0791                     	;# 
  2026  0793                     	;# 
  2027  0793                     	;# 
  2028  0794                     	;# 
  2029  0794                     	;# 
  2030  0796                     	;# 
  2031  0796                     	;# 
  2032  0796                     	;# 
  2033  0797                     	;# 
  2034  0797                     	;# 
  2035  0797                     	;# 
  2036  0798                     	;# 
  2037  0798                     	;# 
  2038  0799                     	;# 
  2039  0799                     	;# 
  2040  0799                     	;# 
  2041  079A                     	;# 
  2042  079A                     	;# 
  2043  079A                     	;# 
  2044  079B                     	;# 
  2045  079C                     	;# 
  2046  079C                     	;# 
  2047  079C                     	;# 
  2048  079D                     	;# 
  2049  079E                     	;# 
  2050  079E                     	;# 
  2051  0F8C                     	;# 
  2052  0F8D                     	;# 
  2053  0F91                     	;# 
  2054  0F96                     	;# 
  2055  0F97                     	;# 
  2056  0F9C                     	;# 
  2057  0F9D                     	;# 
  2058  0F9E                     	;# 
  2059  0FE3                     	;# 
  2060  0FE4                     	;# 
  2061  0FE5                     	;# 
  2062  0FE6                     	;# 
  2063  0FE7                     	;# 
  2064  0FE8                     	;# 
  2065  0FE9                     	;# 
  2066  0FEA                     	;# 
  2067  0FEB                     	;# 
  2068  0FED                     	;# 
  2069  0FEE                     	;# 
  2070  0FEF                     	;# 
  2071  0000                     	;# 
  2072  0001                     	;# 
  2073  0002                     	;# 
  2074  0003                     	;# 
  2075  0004                     	;# 
  2076  0005                     	;# 
  2077  0006                     	;# 
  2078  0007                     	;# 
  2079  0008                     	;# 
  2080  0009                     	;# 
  2081  000A                     	;# 
  2082  000B                     	;# 
  2083  000C                     	;# 
  2084  000D                     	;# 
  2085  000E                     	;# 
  2086  0011                     	;# 
  2087  0012                     	;# 
  2088  0015                     	;# 
  2089  0016                     	;# 
  2090  0016                     	;# 
  2091  0017                     	;# 
  2092  0018                     	;# 
  2093  0019                     	;# 
  2094  001A                     	;# 
  2095  001B                     	;# 
  2096  001C                     	;# 
  2097  008C                     	;# 
  2098  008D                     	;# 
  2099  008E                     	;# 
  2100  0091                     	;# 
  2101  0092                     	;# 
  2102  0095                     	;# 
  2103  0096                     	;# 
  2104  0097                     	;# 
  2105  0099                     	;# 
  2106  009A                     	;# 
  2107  009B                     	;# 
  2108  009B                     	;# 
  2109  009C                     	;# 
  2110  009D                     	;# 
  2111  009E                     	;# 
  2112  009F                     	;# 
  2113  010C                     	;# 
  2114  010D                     	;# 
  2115  010E                     	;# 
  2116  0116                     	;# 
  2117  0117                     	;# 
  2118  011D                     	;# 
  2119  018C                     	;# 
  2120  018D                     	;# 
  2121  018E                     	;# 
  2122  0191                     	;# 
  2123  0191                     	;# 
  2124  0192                     	;# 
  2125  0193                     	;# 
  2126  0193                     	;# 
  2127  0194                     	;# 
  2128  0195                     	;# 
  2129  0196                     	;# 
  2130  0199                     	;# 
  2131  019A                     	;# 
  2132  019B                     	;# 
  2133  019B                     	;# 
  2134  019C                     	;# 
  2135  019D                     	;# 
  2136  019E                     	;# 
  2137  019F                     	;# 
  2138  020C                     	;# 
  2139  020D                     	;# 
  2140  0211                     	;# 
  2141  0211                     	;# 
  2142  0212                     	;# 
  2143  0212                     	;# 
  2144  0213                     	;# 
  2145  0213                     	;# 
  2146  0214                     	;# 
  2147  0214                     	;# 
  2148  0215                     	;# 
  2149  0215                     	;# 
  2150  0215                     	;# 
  2151  0216                     	;# 
  2152  0216                     	;# 
  2153  0217                     	;# 
  2154  0217                     	;# 
  2155  0391                     	;# 
  2156  0392                     	;# 
  2157  0393                     	;# 
  2158  0394                     	;# 
  2159  0395                     	;# 
  2160  0396                     	;# 
  2161  0611                     	;# 
  2162  0612                     	;# 
  2163  0613                     	;# 
  2164  0613                     	;# 
  2165  0614                     	;# 
  2166  0615                     	;# 
  2167  0616                     	;# 
  2168  0616                     	;# 
  2169  0711                     	;# 
  2170  0711                     	;# 
  2171  0711                     	;# 
  2172  0712                     	;# 
  2173  0712                     	;# 
  2174  0713                     	;# 
  2175  0713                     	;# 
  2176  0713                     	;# 
  2177  0714                     	;# 
  2178  0714                     	;# 
  2179  0714                     	;# 
  2180  0715                     	;# 
  2181  0715                     	;# 
  2182  0716                     	;# 
  2183  0716                     	;# 
  2184  0716                     	;# 
  2185  0716                     	;# 
  2186  0717                     	;# 
  2187  0717                     	;# 
  2188  0717                     	;# 
  2189  0717                     	;# 
  2190  0718                     	;# 
  2191  0718                     	;# 
  2192  0718                     	;# 
  2193  0719                     	;# 
  2194  0719                     	;# 
  2195  0719                     	;# 
  2196  0719                     	;# 
  2197  071A                     	;# 
  2198  071A                     	;# 
  2199  071A                     	;# 
  2200  071A                     	;# 
  2201  071A                     	;# 
  2202  071B                     	;# 
  2203  071B                     	;# 
  2204  071C                     	;# 
  2205  071C                     	;# 
  2206  071C                     	;# 
  2207  071C                     	;# 
  2208  071C                     	;# 
  2209  071D                     	;# 
  2210  071D                     	;# 
  2211  071E                     	;# 
  2212  071E                     	;# 
  2213  0791                     	;# 
  2214  0791                     	;# 
  2215  0793                     	;# 
  2216  0793                     	;# 
  2217  0794                     	;# 
  2218  0794                     	;# 
  2219  0796                     	;# 
  2220  0796                     	;# 
  2221  0796                     	;# 
  2222  0797                     	;# 
  2223  0797                     	;# 
  2224  0797                     	;# 
  2225  0798                     	;# 
  2226  0798                     	;# 
  2227  0799                     	;# 
  2228  0799                     	;# 
  2229  0799                     	;# 
  2230  079A                     	;# 
  2231  079A                     	;# 
  2232  079A                     	;# 
  2233  079B                     	;# 
  2234  079C                     	;# 
  2235  079C                     	;# 
  2236  079C                     	;# 
  2237  079D                     	;# 
  2238  079E                     	;# 
  2239  079E                     	;# 
  2240  0F8C                     	;# 
  2241  0F8D                     	;# 
  2242  0F91                     	;# 
  2243  0F96                     	;# 
  2244  0F97                     	;# 
  2245  0F9C                     	;# 
  2246  0F9D                     	;# 
  2247  0F9E                     	;# 
  2248  0FE3                     	;# 
  2249  0FE4                     	;# 
  2250  0FE5                     	;# 
  2251  0FE6                     	;# 
  2252  0FE7                     	;# 
  2253  0FE8                     	;# 
  2254  0FE9                     	;# 
  2255  0FEA                     	;# 
  2256  0FEB                     	;# 
  2257  0FED                     	;# 
  2258  0FEE                     	;# 
  2259  0FEF                     	;# 
  2260  0000                     	;# 
  2261  0001                     	;# 
  2262  0002                     	;# 
  2263  0003                     	;# 
  2264  0004                     	;# 
  2265  0005                     	;# 
  2266  0006                     	;# 
  2267  0007                     	;# 
  2268  0008                     	;# 
  2269  0009                     	;# 
  2270  000A                     	;# 
  2271  000B                     	;# 
  2272  000C                     	;# 
  2273  000D                     	;# 
  2274  000E                     	;# 
  2275  0011                     	;# 
  2276  0012                     	;# 
  2277  0015                     	;# 
  2278  0016                     	;# 
  2279  0016                     	;# 
  2280  0017                     	;# 
  2281  0018                     	;# 
  2282  0019                     	;# 
  2283  001A                     	;# 
  2284  001B                     	;# 
  2285  001C                     	;# 
  2286  008C                     	;# 
  2287  008D                     	;# 
  2288  008E                     	;# 
  2289  0091                     	;# 
  2290  0092                     	;# 
  2291  0095                     	;# 
  2292  0096                     	;# 
  2293  0097                     	;# 
  2294  0099                     	;# 
  2295  009A                     	;# 
  2296  009B                     	;# 
  2297  009B                     	;# 
  2298  009C                     	;# 
  2299  009D                     	;# 
  2300  009E                     	;# 
  2301  009F                     	;# 
  2302  010C                     	;# 
  2303  010D                     	;# 
  2304  010E                     	;# 
  2305  0116                     	;# 
  2306  0117                     	;# 
  2307  011D                     	;# 
  2308  018C                     	;# 
  2309  018D                     	;# 
  2310  018E                     	;# 
  2311  0191                     	;# 
  2312  0191                     	;# 
  2313  0192                     	;# 
  2314  0193                     	;# 
  2315  0193                     	;# 
  2316  0194                     	;# 
  2317  0195                     	;# 
  2318  0196                     	;# 
  2319  0199                     	;# 
  2320  019A                     	;# 
  2321  019B                     	;# 
  2322  019B                     	;# 
  2323  019C                     	;# 
  2324  019D                     	;# 
  2325  019E                     	;# 
  2326  019F                     	;# 
  2327  020C                     	;# 
  2328  020D                     	;# 
  2329  0211                     	;# 
  2330  0211                     	;# 
  2331  0212                     	;# 
  2332  0212                     	;# 
  2333  0213                     	;# 
  2334  0213                     	;# 
  2335  0214                     	;# 
  2336  0214                     	;# 
  2337  0215                     	;# 
  2338  0215                     	;# 
  2339  0215                     	;# 
  2340  0216                     	;# 
  2341  0216                     	;# 
  2342  0217                     	;# 
  2343  0217                     	;# 
  2344  0391                     	;# 
  2345  0392                     	;# 
  2346  0393                     	;# 
  2347  0394                     	;# 
  2348  0395                     	;# 
  2349  0396                     	;# 
  2350  0611                     	;# 
  2351  0612                     	;# 
  2352  0613                     	;# 
  2353  0613                     	;# 
  2354  0614                     	;# 
  2355  0615                     	;# 
  2356  0616                     	;# 
  2357  0616                     	;# 
  2358  0711                     	;# 
  2359  0711                     	;# 
  2360  0711                     	;# 
  2361  0712                     	;# 
  2362  0712                     	;# 
  2363  0713                     	;# 
  2364  0713                     	;# 
  2365  0713                     	;# 
  2366  0714                     	;# 
  2367  0714                     	;# 
  2368  0714                     	;# 
  2369  0715                     	;# 
  2370  0715                     	;# 
  2371  0716                     	;# 
  2372  0716                     	;# 
  2373  0716                     	;# 
  2374  0716                     	;# 
  2375  0717                     	;# 
  2376  0717                     	;# 
  2377  0717                     	;# 
  2378  0717                     	;# 
  2379  0718                     	;# 
  2380  0718                     	;# 
  2381  0718                     	;# 
  2382  0719                     	;# 
  2383  0719                     	;# 
  2384  0719                     	;# 
  2385  0719                     	;# 
  2386  071A                     	;# 
  2387  071A                     	;# 
  2388  071A                     	;# 
  2389  071A                     	;# 
  2390  071A                     	;# 
  2391  071B                     	;# 
  2392  071B                     	;# 
  2393  071C                     	;# 
  2394  071C                     	;# 
  2395  071C                     	;# 
  2396  071C                     	;# 
  2397  071C                     	;# 
  2398  071D                     	;# 
  2399  071D                     	;# 
  2400  071E                     	;# 
  2401  071E                     	;# 
  2402  0791                     	;# 
  2403  0791                     	;# 
  2404  0793                     	;# 
  2405  0793                     	;# 
  2406  0794                     	;# 
  2407  0794                     	;# 
  2408  0796                     	;# 
  2409  0796                     	;# 
  2410  0796                     	;# 
  2411  0797                     	;# 
  2412  0797                     	;# 
  2413  0797                     	;# 
  2414  0798                     	;# 
  2415  0798                     	;# 
  2416  0799                     	;# 
  2417  0799                     	;# 
  2418  0799                     	;# 
  2419  079A                     	;# 
  2420  079A                     	;# 
  2421  079A                     	;# 
  2422  079B                     	;# 
  2423  079C                     	;# 
  2424  079C                     	;# 
  2425  079C                     	;# 
  2426  079D                     	;# 
  2427  079E                     	;# 
  2428  079E                     	;# 
  2429  0F8C                     	;# 
  2430  0F8D                     	;# 
  2431  0F91                     	;# 
  2432  0F96                     	;# 
  2433  0F97                     	;# 
  2434  0F9C                     	;# 
  2435  0F9D                     	;# 
  2436  0F9E                     	;# 
  2437  0FE3                     	;# 
  2438  0FE4                     	;# 
  2439  0FE5                     	;# 
  2440  0FE6                     	;# 
  2441  0FE7                     	;# 
  2442  0FE8                     	;# 
  2443  0FE9                     	;# 
  2444  0FEA                     	;# 
  2445  0FEB                     	;# 
  2446  0FED                     	;# 
  2447  0FEE                     	;# 
  2448  0FEF                     	;# 
  2449                           
  2450                           	psect	idataBANK0
  2451  136C                     __pidataBANK0:	
  2452                           
  2453                           ;initializer for _callback_notPressed
  2454  136C  345B               	retlw	low _Button_DefaultCallback
  2455  136D  3413               	retlw	high _Button_DefaultCallback
  2456                           
  2457                           ;initializer for _sample_period
  2458  136E  34AE               	retlw	174
  2459                           
  2460                           	psect	idataBANK1
  2461  0800                     __pidataBANK1:	
  2462                           
  2463                           ;initializer for _Button_StateMachine
  2464  0800  3407               	retlw	low _Button_State_Initializing
  2465  0801  340B               	retlw	high _Button_State_Initializing
  2466  0802  345C               	retlw	low _Button_State_NotPressed
  2467  0803  340F               	retlw	high _Button_State_NotPressed
  2468  0804  3486               	retlw	low _Button_State_Pressed
  2469  0805  3407               	retlw	high _Button_State_Pressed
  2470                           
  2471                           ;initializer for _callback_pressed
  2472  0806  345B               	retlw	low _Button_DefaultCallback
  2473  0807  3413               	retlw	high _Button_DefaultCallback
  2474                           
  2475                           ;initializer for _callback_sampled
  2476  0808  345C               	retlw	low _Sensor_DefaultCallback
  2477  0809  3413               	retlw	high _Sensor_DefaultCallback
  2478                           
  2479                           ;initializer for _mTouchScanReload
  2480  080A  34FF               	retlw	255
  2481  080B  348E               	retlw	142
  2482                           
  2483                           	psect	idataBANK2
  2484  166C                     __pidataBANK2:	
  2485                           
  2486                           ;initializer for _mtouch_sensor
  2487  166C  3400               	retlw	0
  2488  166D  3469               	retlw	105
  2489  166E  3430               	retlw	48
  2490  166F  3410               	retlw	16
  2491  1670  3420               	retlw	32
  2492  1671  3400               	retlw	0
  2493  1672  3400               	retlw	0
  2494  1673  3400               	retlw	0
  2495  1674  3400               	retlw	0
  2496  1675  3401               	retlw	1
  2497  1676  3431               	retlw	49
  2498  1677  3430               	retlw	48
  2499  1678  3410               	retlw	16
  2500  1679  3420               	retlw	32
  2501  167A  3400               	retlw	0
  2502  167B  3400               	retlw	0
  2503  167C  3400               	retlw	0
  2504  167D  3400               	retlw	0
  2505  167E  3402               	retlw	2
  2506  167F  345D               	retlw	93
  2507  1680  3430               	retlw	48
  2508  1681  3410               	retlw	16
  2509  1682  3420               	retlw	32
  2510  1683  3400               	retlw	0
  2511  1684  3400               	retlw	0
  2512  1685  3400               	retlw	0
  2513  1686  3400               	retlw	0
  2514  1687  3403               	retlw	3
  2515  1688  3435               	retlw	53
  2516  1689  3430               	retlw	48
  2517  168A  3410               	retlw	16
  2518  168B  3420               	retlw	32
  2519  168C  3400               	retlw	0
  2520  168D  3400               	retlw	0
  2521  168E  3400               	retlw	0
  2522  168F  3400               	retlw	0
  2523                           
  2524                           	psect	stringtext1
  2525  180F                     __pstringtext1:	
  2526  180F                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2527  180F  3400               	retlw	0
  2528  1810  340D               	retlw	13
  2529  1811  341C               	retlw	28
  2530  1812  341E               	retlw	30
  2531  1813  3417               	retlw	23
  2532  1814                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2533                           
  2534                           	psect	stringtext2
  2535  1864                     __pstringtext2:	
  2536  1864                     _sensor_scan_group:	
  2537  1864  3429               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2538  1865  3420               	retlw	low (_mtouch_sensor| (0+256))
  2539  1866  343B               	retlw	low ((_mtouch_sensor| (0+256)+27))
  2540  1867  3432               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2541  1868                     __end_of_sensor_scan_group:	
  2542                           
  2543                           	psect	stringtext3
  2544  1000                     __pstringtext3:	
  2545  1000                     _mtouch_button_init:	
  2546  1000  3400               	retlw	0
  2547  1001  3401               	retlw	1
  2548  1002  3400               	retlw	0
  2549  1003  3400               	retlw	0
  2550  1004  3400               	retlw	0
  2551  1005  3400               	retlw	0
  2552  1006  3400               	retlw	0
  2553  1007  3400               	retlw	0
  2554  1008  3400               	retlw	0
  2555  1009  3400               	retlw	0
  2556  100A  3400               	retlw	0
  2557  100B  3400               	retlw	0
  2558  100C  3400               	retlw	0
  2559  100D  3400               	retlw	0
  2560  100E  3464               	retlw	100
  2561  100F  3401               	retlw	1
  2562  1010  3401               	retlw	1
  2563  1011  3401               	retlw	1
  2564  1012  3400               	retlw	0
  2565  1013  3400               	retlw	0
  2566  1014  3400               	retlw	0
  2567  1015  3400               	retlw	0
  2568  1016  3400               	retlw	0
  2569  1017  3400               	retlw	0
  2570  1018  3400               	retlw	0
  2571  1019  3400               	retlw	0
  2572  101A  3400               	retlw	0
  2573  101B  3400               	retlw	0
  2574  101C  3400               	retlw	0
  2575  101D  3400               	retlw	0
  2576  101E  3400               	retlw	0
  2577  101F  3464               	retlw	100
  2578  1020  3401               	retlw	1
  2579  1021  3401               	retlw	1
  2580  1022  3402               	retlw	2
  2581  1023  3403               	retlw	3
  2582  1024  3400               	retlw	0
  2583  1025  3400               	retlw	0
  2584  1026  3400               	retlw	0
  2585  1027  3400               	retlw	0
  2586  1028  3400               	retlw	0
  2587  1029  3400               	retlw	0
  2588  102A  3400               	retlw	0
  2589  102B  3400               	retlw	0
  2590  102C  3400               	retlw	0
  2591  102D  3400               	retlw	0
  2592  102E  3400               	retlw	0
  2593  102F  3400               	retlw	0
  2594  1030  3464               	retlw	100
  2595  1031  3401               	retlw	1
  2596  1032  3401               	retlw	1
  2597  1033  3403               	retlw	3
  2598  1034  3402               	retlw	2
  2599  1035  3400               	retlw	0
  2600  1036  3400               	retlw	0
  2601  1037  3400               	retlw	0
  2602  1038  3400               	retlw	0
  2603  1039  3400               	retlw	0
  2604  103A  3400               	retlw	0
  2605  103B  3400               	retlw	0
  2606  103C  3400               	retlw	0
  2607  103D  3400               	retlw	0
  2608  103E  3400               	retlw	0
  2609  103F  3400               	retlw	0
  2610  1040  3400               	retlw	0
  2611  1041  3464               	retlw	100
  2612  1042  3401               	retlw	1
  2613  1043  3401               	retlw	1
  2614  1044                     __end_of_mtouch_button_init:	
  2615                           
  2616                           	psect	nvBANK1
  2617  00D8                     __pnvBANK1:	
  2618  00D8                     _TMR1_InterruptHandler:	
  2619  00D8                     	ds	2
  2620  00DA                     _timer1ReloadVal:	
  2621  00DA                     	ds	2
  2622  00DC                     _EUSART_ErrorHandler:	
  2623  00DC                     	ds	2
  2624  00DE                     _EUSART_OverrunErrorHandler:	
  2625  00DE                     	ds	2
  2626  00E0                     _EUSART_FramingErrorHandler:	
  2627  00E0                     	ds	2
  2628  00E2                     _EUSART_RxDefaultInterruptHandler:	
  2629  00E2                     	ds	2
  2630  0018                     _T1CONbits	set	24
  2631  0018                     _T1CON	set	24
  2632  0016                     _TMR1L	set	22
  2633  0017                     _TMR1H	set	23
  2634  0019                     _T1GCON	set	25
  2635  001C                     _T2CON	set	28
  2636  001A                     _TMR2	set	26
  2637  001B                     _PR2	set	27
  2638  000B                     _INTCONbits	set	11
  2639  0012                     _PIR2bits	set	18
  2640  0011                     _PIR1bits	set	17
  2641  001C                     _T2CONbits	set	28
  2642  005F                     _GIE	set	95
  2643  0095                     _OPTION_REGbits	set	149
  2644  008E                     _TRISC	set	142
  2645  008D                     _TRISB	set	141
  2646  008C                     _TRISA	set	140
  2647  0097                     _WDTCON	set	151
  2648  0099                     _OSCCON	set	153
  2649  0091                     _PIE1bits	set	145
  2650  010D                     _LATBbits	set	269
  2651  010E                     _LATCbits	set	270
  2652  010C                     _LATAbits	set	268
  2653  011D                     _APFCON	set	285
  2654  010E                     _LATC	set	270
  2655  010D                     _LATB	set	269
  2656  010C                     _LATA	set	268
  2657  0116                     _BORCON	set	278
  2658  011D                     _APFCONbits	set	285
  2659  018C                     _ANSELA	set	396
  2660  018D                     _ANSELB	set	397
  2661  018E                     _ANSELC	set	398
  2662  0199                     _RCREG	set	409
  2663  019D                     _RCSTAbits	set	413
  2664  019A                     _TXREG	set	410
  2665  019C                     _SPBRGH	set	412
  2666  019B                     _SPBRGL	set	411
  2667  019E                     _TXSTA	set	414
  2668  019D                     _RCSTA	set	413
  2669  019F                     _BAUDCON	set	415
  2670  020C                     _WPUA	set	524
  2671  020D                     _WPUB	set	525
  2672  071A                     _AAD1RES0	set	1818
  2673  0711                     _AD1CON0bits	set	1809
  2674  0714                     _AAD1CON3	set	1812
  2675  0713                     _AD1CON2	set	1811
  2676  0717                     _AD1ACQCON	set	1815
  2677  0716                     _AD1PRECON	set	1814
  2678  0718                     _AAD1GRD	set	1816
  2679  0713                     _AAD1CON2	set	1811
  2680  0719                     _AAD1CAP	set	1817
  2681  0714                     _AD1CON3	set	1812
  2682  0712                     _ADCOMCON	set	1810
  2683  0711                     _AD1CON0	set	1809
  2684  079A                     _AAD2RES0	set	1946
  2685  0791                     _AD2CON0bits	set	1937
  2686  0797                     _AD2ACQCON	set	1943
  2687  0796                     _AD2PRECON	set	1942
  2688  0794                     _AAD2CON3	set	1940
  2689  0798                     _AAD2GRD	set	1944
  2690  0793                     _AD2CON2	set	1939
  2691  0794                     _AD2CON3	set	1940
  2692  0791                     _AD2CON0	set	1937
  2693                           
  2694                           	psect	stringtext4
  2695  1800                     __pstringtext4:	
  2696  1800                     STR_1:	
  2697  1800  3450               	retlw	80	;'P'
  2698  1801  3449               	retlw	73	;'I'
  2699  1802  3443               	retlw	67	;'C'
  2700  1803  3453               	retlw	83	;'S'
  2701  1804  344D               	retlw	77	;'M'
  2702  1805  3441               	retlw	65	;'A'
  2703  1806  3452               	retlw	82	;'R'
  2704  1807  3454               	retlw	84	;'T'
  2705  1808  3400               	retlw	0
  2706                           
  2707                           	psect	stringtext5
  2708  1809                     __pstringtext5:	
  2709  1809                     STR_2:	
  2710  1809  3452               	retlw	82	;'R'
  2711  180A  3455               	retlw	85	;'U'
  2712  180B  344E               	retlw	78	;'N'
  2713  180C  340D               	retlw	13
  2714  180D  340A               	retlw	10
  2715  180E  3400               	retlw	0
  2716                           
  2717                           	psect	stringtext6
  2718  1814                     __pstringtext6:	
  2719  1814                     STR_3:	
  2720  1814  3450               	retlw	80	;'P'
  2721  1815  3449               	retlw	73	;'I'
  2722  1816  3443               	retlw	67	;'C'
  2723  1817  3430               	retlw	48	;'0'
  2724  1818  3400               	retlw	0
  2725                           
  2726                           	psect	stringtext7
  2727  1819                     __pstringtext7:	
  2728  1819                     STR_4:	
  2729  1819  3450               	retlw	80	;'P'
  2730  181A  3449               	retlw	73	;'I'
  2731  181B  3443               	retlw	67	;'C'
  2732  181C  3431               	retlw	49	;'1'
  2733  181D  3400               	retlw	0
  2734                           
  2735                           	psect	stringtext8
  2736  181E                     __pstringtext8:	
  2737  181E                     STR_5:	
  2738  181E  3450               	retlw	80	;'P'
  2739  181F  3449               	retlw	73	;'I'
  2740  1820  3443               	retlw	67	;'C'
  2741  1821  3432               	retlw	50	;'2'
  2742  1822  3400               	retlw	0
  2743                           
  2744                           	psect	stringtext9
  2745  1823                     __pstringtext9:	
  2746  1823                     STR_6:	
  2747  1823  3450               	retlw	80	;'P'
  2748  1824  3449               	retlw	73	;'I'
  2749  1825  3443               	retlw	67	;'C'
  2750  1826  3433               	retlw	51	;'3'
  2751  1827  3400               	retlw	0
  2752                           
  2753                           	psect	stringtext10
  2754  1828                     __pstringtext10:	
  2755  1828                     STR_7:	
  2756  1828  3450               	retlw	80	;'P'
  2757  1829  3449               	retlw	73	;'I'
  2758  182A  3443               	retlw	67	;'C'
  2759  182B  3434               	retlw	52	;'4'
  2760  182C  3400               	retlw	0
  2761                           
  2762                           	psect	stringtext11
  2763  182D                     __pstringtext11:	
  2764  182D                     STR_8:	
  2765  182D  3450               	retlw	80	;'P'
  2766  182E  3449               	retlw	73	;'I'
  2767  182F  3443               	retlw	67	;'C'
  2768  1830  3435               	retlw	53	;'5'
  2769  1831  3400               	retlw	0
  2770                           
  2771                           	psect	stringtext12
  2772  1832                     __pstringtext12:	
  2773  1832                     STR_9:	
  2774  1832  3450               	retlw	80	;'P'
  2775  1833  3449               	retlw	73	;'I'
  2776  1834  3443               	retlw	67	;'C'
  2777  1835  3436               	retlw	54	;'6'
  2778  1836  3400               	retlw	0
  2779                           
  2780                           	psect	stringtext13
  2781  1837                     __pstringtext13:	
  2782  1837                     STR_10:	
  2783  1837  3450               	retlw	80	;'P'
  2784  1838  3449               	retlw	73	;'I'
  2785  1839  3443               	retlw	67	;'C'
  2786  183A  3437               	retlw	55	;'7'
  2787  183B  3400               	retlw	0
  2788                           
  2789                           	psect	stringtext14
  2790  183C                     __pstringtext14:	
  2791  183C                     STR_11:	
  2792  183C  3450               	retlw	80	;'P'
  2793  183D  3449               	retlw	73	;'I'
  2794  183E  3443               	retlw	67	;'C'
  2795  183F  3438               	retlw	56	;'8'
  2796  1840  3400               	retlw	0
  2797                           
  2798                           	psect	stringtext15
  2799  1841                     __pstringtext15:	
  2800  1841                     STR_12:	
  2801  1841  3450               	retlw	80	;'P'
  2802  1842  3449               	retlw	73	;'I'
  2803  1843  3443               	retlw	67	;'C'
  2804  1844  3439               	retlw	57	;'9'
  2805  1845  3400               	retlw	0
  2806                           
  2807                           	psect	stringtext16
  2808  1846                     __pstringtext16:	
  2809  1846                     STR_13:	
  2810  1846  3450               	retlw	80	;'P'
  2811  1847  3449               	retlw	73	;'I'
  2812  1848  3443               	retlw	67	;'C'
  2813  1849  3441               	retlw	65	;'A'
  2814  184A  3400               	retlw	0
  2815                           
  2816                           	psect	stringtext17
  2817  184B                     __pstringtext17:	
  2818  184B                     STR_14:	
  2819  184B  3450               	retlw	80	;'P'
  2820  184C  3449               	retlw	73	;'I'
  2821  184D  3443               	retlw	67	;'C'
  2822  184E  3442               	retlw	66	;'B'
  2823  184F  3400               	retlw	0
  2824                           
  2825                           	psect	stringtext18
  2826  1850                     __pstringtext18:	
  2827  1850                     STR_15:	
  2828  1850  3450               	retlw	80	;'P'
  2829  1851  3449               	retlw	73	;'I'
  2830  1852  3443               	retlw	67	;'C'
  2831  1853  3443               	retlw	67	;'C'
  2832  1854  3400               	retlw	0
  2833                           
  2834                           	psect	stringtext19
  2835  1855                     __pstringtext19:	
  2836  1855                     STR_16:	
  2837  1855  3450               	retlw	80	;'P'
  2838  1856  3449               	retlw	73	;'I'
  2839  1857  3443               	retlw	67	;'C'
  2840  1858  3444               	retlw	68	;'D'
  2841  1859  3400               	retlw	0
  2842                           
  2843                           	psect	stringtext20
  2844  185A                     __pstringtext20:	
  2845  185A                     STR_17:	
  2846  185A  3450               	retlw	80	;'P'
  2847  185B  3449               	retlw	73	;'I'
  2848  185C  3443               	retlw	67	;'C'
  2849  185D  3445               	retlw	69	;'E'
  2850  185E  3400               	retlw	0
  2851                           
  2852                           	psect	stringtext21
  2853  185F                     __pstringtext21:	
  2854  185F                     STR_18:	
  2855  185F  3450               	retlw	80	;'P'
  2856  1860  3449               	retlw	73	;'I'
  2857  1861  3443               	retlw	67	;'C'
  2858  1862  3447               	retlw	71	;'G'
  2859  1863  3400               	retlw	0
  2860                           
  2861                           	psect	stringtext22
  2862  1868                     __pstringtext22:	
  2863  1868                     STR_19:	
  2864  1868  3425               	retlw	37	;'%'
  2865  1869  3463               	retlw	99	;'c'
  2866  186A  3400               	retlw	0
  2867                           
  2868                           	psect	stringtext23
  2869  0000                     __pstringtext23:	
  2870                           
  2871                           ; #config settings
  2872  0000                     
  2873                           	psect	cinit
  2874  0021                     start_initialization:	
  2875  0021                     __initialization:	
  2876                           
  2877                           ; Initialize objects allocated to BANK0
  2878  0021  306C               	movlw	low __pidataBANK0
  2879  0022  0084               	movwf	4
  2880  0023  3093               	movlw	(high __pidataBANK0)| (0+128)
  2881  0024  0085               	movwf	5
  2882  0025  306D               	movlw	low __pdataBANK0
  2883  0026  0086               	movwf	6
  2884  0027  3000               	movlw	high __pdataBANK0
  2885  0028  0087               	movwf	7
  2886  0029  3003               	movlw	3
  2887  002A  3193  23B7  3180   	fcall	init_ram
  2888                           
  2889                           ; Initialize objects allocated to BANK1
  2890  002D  3000               	movlw	low __pidataBANK1
  2891  002E  0084               	movwf	4
  2892  002F  3088               	movlw	(high __pidataBANK1)| (0+128)
  2893  0030  0085               	movwf	5
  2894  0031  30E4               	movlw	low __pdataBANK1
  2895  0032  0086               	movwf	6
  2896  0033  3000               	movlw	high __pdataBANK1
  2897  0034  0087               	movwf	7
  2898  0035  300C               	movlw	12
  2899  0036  3193  23B7  3180   	fcall	init_ram
  2900                           
  2901                           ; Initialize objects allocated to BANK2
  2902  0039  306C               	movlw	low __pidataBANK2
  2903  003A  0084               	movwf	4
  2904  003B  3096               	movlw	(high __pidataBANK2)| (0+128)
  2905  003C  0085               	movwf	5
  2906  003D  3020               	movlw	low __pdataBANK2
  2907  003E  0086               	movwf	6
  2908  003F  3001               	movlw	high __pdataBANK2
  2909  0040  0087               	movwf	7
  2910  0041  3024               	movlw	36
  2911  0042  3193  23B7  3180   	fcall	init_ram
  2912                           
  2913                           ; Clear objects allocated to COMMON
  2914  0045  01FA               	clrf	__pbssCOMMON& (0+127)
  2915  0046  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2916                           
  2917                           ; Clear objects allocated to BANK0
  2918  0047  3055               	movlw	low __pbssBANK0
  2919  0048  0084               	movwf	4
  2920  0049  3000               	movlw	high __pbssBANK0
  2921  004A  0085               	movwf	5
  2922  004B  3018               	movlw	24
  2923  004C  3193  23B1  3180   	fcall	clear_ram0
  2924                           
  2925                           ; Clear objects allocated to BANK1
  2926  004F  30A0               	movlw	low __pbssBANK1
  2927  0050  0084               	movwf	4
  2928  0051  3000               	movlw	high __pbssBANK1
  2929  0052  0085               	movwf	5
  2930  0053  3038               	movlw	56
  2931  0054  3193  23B1  3180   	fcall	clear_ram0
  2932                           
  2933                           ; Clear objects allocated to BANK3
  2934  0057  30A0               	movlw	low __pbssBANK3
  2935  0058  0084               	movwf	4
  2936  0059  3001               	movlw	high __pbssBANK3
  2937  005A  0085               	movwf	5
  2938  005B  3044               	movlw	68
  2939  005C  3193  23B1         	fcall	clear_ram0
  2940  005E                     end_of_initialization:	
  2941                           ;End of C runtime variable initialization code
  2942                           
  2943  005E                     __end_of__initialization:	
  2944  005E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2945  005F  0020               	movlb	0
  2946  0060  3180  2862         	ljmp	_main	;jump to C main() function
  2947                           
  2948                           	psect	bssCOMMON
  2949  007A                     __pbssCOMMON:	
  2950  007A                     _eusartRxTail:	
  2951  007A                     	ds	1
  2952  007B                     _eusartRxHead:	
  2953  007B                     	ds	1
  2954                           
  2955                           	psect	bssBANK0
  2956  0055                     __pbssBANK0:	
  2957  0055                     _packet_sample:	
  2958  0055                     	ds	4
  2959  0059                     _width:	
  2960  0059                     	ds	2
  2961  005B                     _last_touch_status:	
  2962  005B                     	ds	2
  2963  005D                     _timeout_count:	
  2964  005D                     	ds	2
  2965  005F                     _packet_noise:	
  2966  005F                     	ds	2
  2967  0061                     _update_state_flag:	
  2968  0061                     	ds	1
  2969  0062                     _blink_count:	
  2970  0062                     	ds	1
  2971  0063                     _blink:	
  2972  0063                     	ds	1
  2973  0064                     _check_request:	
  2974  0064                     	ds	1
  2975  0065                     _config_status:	
  2976  0065                     	ds	1
  2977  0066                     _prcData:	
  2978  0066                     	ds	1
  2979  0067                     _rxData:	
  2980  0067                     	ds	1
  2981  0068                     _eusartRxLastError:	
  2982  0068                     	ds	1
  2983  0069                     _eusartRxCount:	
  2984  0069                     	ds	1
  2985  006A                     _sensor_globalFlags:	
  2986  006A                     	ds	1
  2987  006B                     _lowpowerActivated:	
  2988  006B                     	ds	1
  2989  006C                     _mtouch_time_toScan:	
  2990  006C                     	ds	1
  2991                           
  2992                           	psect	dataBANK0
  2993  006D                     __pdataBANK0:	
  2994  006D                     _callback_notPressed:	
  2995  006D                     	ds	2
  2996  006F                     _sample_period:	
  2997  006F                     	ds	1
  2998                           
  2999                           	psect	bssBANK1
  3000  00A0                     __pbssBANK1:	
  3001  00A0                     _eusartRxStatusBuffer:	
  3002  00A0                     	ds	8
  3003  00A8                     _eusartRxBuffer:	
  3004  00A8                     	ds	8
  3005  00B0                     _nout:	
  3006  00B0                     	ds	2
  3007  00B2                     _prec:	
  3008  00B2                     	ds	2
  3009  00B4                     _flags:	
  3010  00B4                     	ds	2
  3011  00B6                     _count_conf:	
  3012  00B6                     	ds	2
  3013  00B8                     _dbuf:	
  3014  00B8                     	ds	32
  3015                           
  3016                           	psect	dataBANK1
  3017  00E4                     __pdataBANK1:	
  3018  00E4                     _Button_StateMachine:	
  3019  00E4                     	ds	6
  3020  00EA                     _callback_pressed:	
  3021  00EA                     	ds	2
  3022  00EC                     _callback_sampled:	
  3023  00EC                     	ds	2
  3024  00EE                     _mTouchScanReload:	
  3025  00EE                     	ds	2
  3026                           
  3027                           	psect	dataBANK2
  3028  0120                     __pdataBANK2:	
  3029  0120                     _mtouch_sensor:	
  3030  0120                     	ds	36
  3031                           
  3032                           	psect	bssBANK3
  3033  01A0                     __pbssBANK3:	
  3034  01A0                     _mtouch_button:	
  3035  01A0                     	ds	68
  3036                           
  3037                           	psect	inittext
  3038  13B7                     init_ram:	
  3039  13B7  00FE               	movwf	126
  3040  13B8                     initloop:	
  3041  13B8  0012               	moviw fsr0++
  3042  13B9  001E               	movwi fsr1++
  3043  13BA  0BFE               	decfsz	126,f
  3044  13BB  2BB8               	goto	initloop
  3045  13BC  3400               	retlw	0
  3046                           
  3047                           	psect	clrtext
  3048  13B1                     clear_ram0:	
  3049                           ;	Called with FSR0 containing the base address, and
  3050                           ;	WREG with the size to clear
  3051                           
  3052  13B1  0064               	clrwdt	;clear the watchdog before getting into this loop
  3053  13B2                     clrloop0:	
  3054  13B2  0180               	clrf	0	;clear RAM location pointed to by FSR
  3055  13B3  3101               	addfsr 0,1
  3056  13B4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3057  13B5  2BB2               	goto	clrloop0	;have we reached the end yet?
  3058  13B6  3400               	retlw	0	;all done for this memory range, return
  3059                           
  3060                           	psect	cstackBANK2
  3061  0144                     __pcstackBANK2:	
  3062  0144                     ??_main:	
  3063                           
  3064                           ; 1 bytes @ 0x0
  3065  0144                     	ds	2
  3066                           
  3067                           	psect	cstackCOMMON
  3068  0070                     __pcstackCOMMON:	
  3069  0070                     ?_TMR1_WriteTimer:	
  3070  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  3071                           ; 1 bytes @ 0x0
  3072                           
  3073  0070                     ?_MTOUCH_Button_InitializeAll:	
  3074                           ; 1 bytes @ 0x0
  3075                           
  3076  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0070                     ?_MTOUCH_Sensor_SampleAll:	
  3083                           ; 1 bytes @ 0x0
  3084                           
  3085  0070                     ?_MTOUCH_Button_ServiceAll:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0070                     ?_MTOUCH_needReburst:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0070                     ?_MTOUCH_Tick:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0070                     ?_MTOUCH_Button_Tick:	
  3095                           ; 1 bytes @ 0x0
  3096                           
  3097  0070                     ?_MTOUCH_Sensor_Enable:	
  3098                           ; 1 bytes @ 0x0
  3099                           
  3100  0070                     ?_MTOUCH_Sensor_Calibrate:	
  3101                           ; 1 bytes @ 0x0
  3102                           
  3103  0070                     ?_Sensor_Sampled_Reset:	
  3104                           ; 1 bytes @ 0x0
  3105                           
  3106  0070                     ?_Sensor_Service:	
  3107                           ; 1 bytes @ 0x0
  3108                           
  3109  0070                     ?_Sensor_isEnabled:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0070                     ?_Sensor_RawSample_Update:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0070                     ?_Sensor_setSampled:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0070                     ?_Sensor_postAcquisitionProcess:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0070                     ?_Sensor_isActive:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0070                     ?_Sensor_isCalibrated:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0070                     ?_Sensor_setActive:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0070                     ?_Sensor_setInactive:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0070                     ?_Sensor_isCalibratingAcqTime:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0070                     ?_TMR2_LoadPeriodRegister:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0070                     ?_TMR2_StartTimer:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142  0070                     ?_TMR2_StopTimer:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145  0070                     ?_Sensor_autoCalibration:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0070                     ?_Sensor_setCalibratAcqTime:	
  3149                           ; 1 bytes @ 0x0
  3150                           
  3151  0070                     ?_Sensor_setCalibrated:	
  3152                           ; 1 bytes @ 0x0
  3153                           
  3154  0070                     ?_Button_Service:	
  3155                           ; 1 bytes @ 0x0
  3156                           
  3157  0070                     ?_Button_Reading_Update:	
  3158                           ; 1 bytes @ 0x0
  3159                           
  3160  0070                     ?_Button_Deviation_Update:	
  3161                           ; 1 bytes @ 0x0
  3162                           
  3163  0070                     ?_Button_Baseline_Initialize:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166  0070                     ?_Button_Baseline_Update:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0070                     ?_Button_Tick_helper:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0070                     ?_Button_Reading_Update_Helper:	
  3173                           ; 1 bytes @ 0x0
  3174                           
  3175  0070                     ?_EUSART_Receive_ISR:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0070                     ?_EUSART_DefaultErrorHandler:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0070                     ?_EUSART_RxDataHandler:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0070                     ??_EUSART_RxDataHandler:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0070                     ?_TMR1_ISR:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0070                     ?_PIN_MANAGER_Initialize:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0070                     ?_OSCILLATOR_Initialize:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0070                     ?_WDT_Initialize:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0070                     ?_TMR2_Initialize:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0070                     ?_TMR1_Initialize:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0070                     ?_TMR1_DefaultInterruptHandler:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0070                     ??_TMR1_DefaultInterruptHandler:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0070                     ?_LED_PROCESS:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0070                     ?_update_state:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0070                     ?_check_data:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0070                     ?_check_message:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0070                     ?_DATA_PROCESS:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0070                     ?_RELAY_PROCESS:	
  3239                           ; 1 bytes @ 0x0
  3240                           
  3241  0070                     ?_MTOUCH_ScanScheduler:	
  3242                           ; 1 bytes @ 0x0
  3243                           
  3244  0070                     ?_MTOUCH_Initialize:	
  3245                           ; 1 bytes @ 0x0
  3246                           
  3247  0070                     ?_MTOUCH_Service_Mainloop:	
  3248                           ; 1 bytes @ 0x0
  3249                           
  3250  0070                     ?_MTOUCH_Sensor_Initialize:	
  3251                           ; 1 bytes @ 0x0
  3252                           
  3253  0070                     ?_Sensor_getScanGroupIndex:	
  3254                           ; 1 bytes @ 0x0
  3255                           
  3256  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  3257                           ; 1 bytes @ 0x0
  3258                           
  3259  0070                     ?_MTOUCH_Sensor_wasSampled:	
  3260                           ; 1 bytes @ 0x0
  3261                           
  3262  0070                     ?_MTOUCH_Button_Initialize:	
  3263                           ; 1 bytes @ 0x0
  3264                           
  3265  0070                     ?_MTOUCH_Button_isPressed:	
  3266                           ; 1 bytes @ 0x0
  3267                           
  3268  0070                     ?_EUSART_Initialize:	
  3269                           ; 1 bytes @ 0x0
  3270                           
  3271  0070                     ?_EUSART_is_rx_ready:	
  3272                           ; 1 bytes @ 0x0
  3273                           
  3274  0070                     ?_EUSART_Read:	
  3275                           ; 1 bytes @ 0x0
  3276                           
  3277  0070                     ?_EUSART_Write:	
  3278                           ; 1 bytes @ 0x0
  3279                           
  3280  0070                     ?_putch:	
  3281                           ; 1 bytes @ 0x0
  3282                           
  3283  0070                     ?_INTERRUPT_InterruptManager:	
  3284                           ; 1 bytes @ 0x0
  3285                           
  3286  0070                     ?_SYSTEM_Initialize:	
  3287                           ; 1 bytes @ 0x0
  3288                           
  3289  0070                     ?_main:	
  3290                           ; 1 bytes @ 0x0
  3291                           
  3292  0070                     TMR1_WriteTimer@timerVal:	
  3293                           ; 1 bytes @ 0x0
  3294                           
  3295                           
  3296                           ; 2 bytes @ 0x0
  3297  0070                     	ds	1
  3298  0071                     ??_EUSART_Receive_ISR:	
  3299  0071                     ??_EUSART_DefaultErrorHandler:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302                           
  3303                           ; 1 bytes @ 0x1
  3304  0071                     	ds	1
  3305  0072                     ??_TMR1_WriteTimer:	
  3306  0072                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3307                           ; 1 bytes @ 0x2
  3308                           
  3309  0072                     ?_TMR1_SetInterruptHandler:	
  3310                           ; 1 bytes @ 0x2
  3311                           
  3312  0072                     ??_MTOUCH_needReburst:	
  3313                           ; 1 bytes @ 0x2
  3314                           
  3315  0072                     ?_Sensor_DefaultCallback:	
  3316                           ; 1 bytes @ 0x2
  3317                           
  3318  0072                     ??_Sensor_Sampled_Reset:	
  3319                           ; 1 bytes @ 0x2
  3320                           
  3321  0072                     ??_Sensor_isEnabled:	
  3322                           ; 1 bytes @ 0x2
  3323                           
  3324  0072                     ??_Sensor_setSampled:	
  3325                           ; 1 bytes @ 0x2
  3326                           
  3327  0072                     ??_Sensor_isActive:	
  3328                           ; 1 bytes @ 0x2
  3329                           
  3330  0072                     ??_Sensor_isCalibrated:	
  3331                           ; 1 bytes @ 0x2
  3332                           
  3333  0072                     ??_Sensor_setActive:	
  3334                           ; 1 bytes @ 0x2
  3335                           
  3336  0072                     ??_Sensor_setInactive:	
  3337                           ; 1 bytes @ 0x2
  3338                           
  3339  0072                     ??_Sensor_isCalibratingAcqTime:	
  3340                           ; 1 bytes @ 0x2
  3341                           
  3342  0072                     ??_TMR2_LoadPeriodRegister:	
  3343                           ; 1 bytes @ 0x2
  3344                           
  3345  0072                     ??_TMR2_StartTimer:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348  0072                     ??_TMR2_StopTimer:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351  0072                     ??_Sensor_setCalibratAcqTime:	
  3352                           ; 1 bytes @ 0x2
  3353                           
  3354  0072                     ??_Sensor_setCalibrated:	
  3355                           ; 1 bytes @ 0x2
  3356                           
  3357  0072                     ?_memcpy:	
  3358                           ; 1 bytes @ 0x2
  3359                           
  3360  0072                     ??_Button_Baseline_Update:	
  3361                           ; 1 bytes @ 0x2
  3362                           
  3363  0072                     ??_Button_Tick_helper:	
  3364                           ; 1 bytes @ 0x2
  3365                           
  3366  0072                     ?_EUSART_SetRxInterruptHandler:	
  3367                           ; 1 bytes @ 0x2
  3368                           
  3369  0072                     ?_EUSART_SetFramingErrorHandler:	
  3370                           ; 1 bytes @ 0x2
  3371                           
  3372  0072                     ?_EUSART_SetOverrunErrorHandler:	
  3373                           ; 1 bytes @ 0x2
  3374                           
  3375  0072                     ?_EUSART_SetErrorHandler:	
  3376                           ; 1 bytes @ 0x2
  3377                           
  3378  0072                     ??_TMR1_ISR:	
  3379                           ; 1 bytes @ 0x2
  3380                           
  3381  0072                     ??_PIN_MANAGER_Initialize:	
  3382                           ; 1 bytes @ 0x2
  3383                           
  3384  0072                     ??_OSCILLATOR_Initialize:	
  3385                           ; 1 bytes @ 0x2
  3386                           
  3387  0072                     ??_WDT_Initialize:	
  3388                           ; 1 bytes @ 0x2
  3389                           
  3390  0072                     ??_TMR2_Initialize:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393  0072                     ??_LED_PROCESS:	
  3394                           ; 1 bytes @ 0x2
  3395                           
  3396  0072                     ??_check_data:	
  3397                           ; 1 bytes @ 0x2
  3398                           
  3399  0072                     ??_RELAY_PROCESS:	
  3400                           ; 1 bytes @ 0x2
  3401                           
  3402  0072                     ??_MTOUCH_ScanScheduler:	
  3403                           ; 1 bytes @ 0x2
  3404                           
  3405  0072                     ??_Sensor_getScanGroupIndex:	
  3406                           ; 1 bytes @ 0x2
  3407                           
  3408  0072                     ??_MTOUCH_Button_isPressed:	
  3409                           ; 1 bytes @ 0x2
  3410                           
  3411  0072                     ?_MTOUCH_Button_SetPressedCallback:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0072                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417  0072                     ??_EUSART_is_rx_ready:	
  3418                           ; 1 bytes @ 0x2
  3419                           
  3420  0072                     ??_EUSART_Read:	
  3421                           ; 1 bytes @ 0x2
  3422                           
  3423  0072                     ??_EUSART_Write:	
  3424                           ; 1 bytes @ 0x2
  3425                           
  3426  0072                     ??_INTERRUPT_InterruptManager:	
  3427                           ; 1 bytes @ 0x2
  3428                           
  3429  0072                     ?___bmul:	
  3430                           ; 1 bytes @ 0x2
  3431                           
  3432  0072                     ?_abs:	
  3433                           ; 1 bytes @ 0x2
  3434                           
  3435  0072                     ?_strlen:	
  3436                           ; 2 bytes @ 0x2
  3437                           
  3438  0072                     Sensor_DefaultCallback@sensor:	
  3439                           ; 2 bytes @ 0x2
  3440                           
  3441  0072                     Sensor_setActive@sensor:	
  3442                           ; 1 bytes @ 0x2
  3443                           
  3444  0072                     Sensor_setInactive@sensor:	
  3445                           ; 1 bytes @ 0x2
  3446                           
  3447  0072                     Sensor_isActive@sensor:	
  3448                           ; 1 bytes @ 0x2
  3449                           
  3450  0072                     Sensor_isCalibrated@sensor:	
  3451                           ; 1 bytes @ 0x2
  3452                           
  3453  0072                     Sensor_setCalibrated@sensor:	
  3454                           ; 1 bytes @ 0x2
  3455                           
  3456  0072                     Sensor_setCalibratAcqTime@sensor:	
  3457                           ; 1 bytes @ 0x2
  3458                           
  3459  0072                     Sensor_isCalibratingAcqTime@sensor:	
  3460                           ; 1 bytes @ 0x2
  3461                           
  3462  0072                     Sensor_Sampled_Reset@sensor:	
  3463                           ; 1 bytes @ 0x2
  3464                           
  3465  0072                     Sensor_setSampled@sensor:	
  3466                           ; 1 bytes @ 0x2
  3467                           
  3468  0072                     MTOUCH_Button_isPressed@name:	
  3469                           ; 1 bytes @ 0x2
  3470                           
  3471  0072                     Button_Deviation_Update@button:	
  3472                           ; 1 bytes @ 0x2
  3473                           
  3474  0072                     EUSART_Write@txData:	
  3475                           ; 1 bytes @ 0x2
  3476                           
  3477  0072                     TMR2_LoadPeriodRegister@periodVal:	
  3478                           ; 1 bytes @ 0x2
  3479                           
  3480  0072                     ___bmul@multiplicand:	
  3481                           ; 1 bytes @ 0x2
  3482                           
  3483  0072                     MTOUCH_Button_SetPressedCallback@callback:	
  3484                           ; 1 bytes @ 0x2
  3485                           
  3486  0072                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3487                           ; 2 bytes @ 0x2
  3488                           
  3489  0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3490                           ; 2 bytes @ 0x2
  3491                           
  3492  0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3493                           ; 2 bytes @ 0x2
  3494                           
  3495  0072                     EUSART_SetErrorHandler@interruptHandler:	
  3496                           ; 2 bytes @ 0x2
  3497                           
  3498  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3499                           ; 2 bytes @ 0x2
  3500                           
  3501  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  3502                           ; 2 bytes @ 0x2
  3503                           
  3504  0072                     abs@a:	
  3505                           ; 2 bytes @ 0x2
  3506                           
  3507  0072                     memcpy@s1:	
  3508                           ; 2 bytes @ 0x2
  3509                           
  3510                           
  3511                           ; 2 bytes @ 0x2
  3512  0072                     	ds	1
  3513  0073                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3514  0073                     ??_Sensor_DefaultCallback:	
  3515                           ; 1 bytes @ 0x3
  3516                           
  3517  0073                     ?_Sensor_loadADCSettings:	
  3518                           ; 1 bytes @ 0x3
  3519                           
  3520  0073                     ??_putch:	
  3521                           ; 1 bytes @ 0x3
  3522                           
  3523  0073                     ??___bmul:	
  3524                           ; 1 bytes @ 0x3
  3525                           
  3526  0073                     Sensor_loadADCSettings@adc_index:	
  3527                           ; 1 bytes @ 0x3
  3528                           
  3529  0073                     Sensor_isEnabled@sensor:	
  3530                           ; 1 bytes @ 0x3
  3531                           
  3532  0073                     EUSART_Read@readValue:	
  3533                           ; 1 bytes @ 0x3
  3534                           
  3535  0073                     putch@txData:	
  3536                           ; 1 bytes @ 0x3
  3537                           
  3538  0073                     Button_Deviation_Update@deviation:	
  3539                           ; 1 bytes @ 0x3
  3540                           
  3541                           
  3542                           ; 4 bytes @ 0x3
  3543  0073                     	ds	1
  3544  0074                     ??_TMR1_SetInterruptHandler:	
  3545  0074                     ??_abs:	
  3546                           ; 1 bytes @ 0x4
  3547                           
  3548  0074                     ??_EUSART_SetRxInterruptHandler:	
  3549                           ; 1 bytes @ 0x4
  3550                           
  3551  0074                     ??_EUSART_SetFramingErrorHandler:	
  3552                           ; 1 bytes @ 0x4
  3553                           
  3554  0074                     ??_EUSART_SetOverrunErrorHandler:	
  3555                           ; 1 bytes @ 0x4
  3556                           
  3557  0074                     ??_EUSART_SetErrorHandler:	
  3558                           ; 1 bytes @ 0x4
  3559                           
  3560  0074                     ??_TMR1_Initialize:	
  3561                           ; 1 bytes @ 0x4
  3562                           
  3563  0074                     ??_strlen:	
  3564                           ; 1 bytes @ 0x4
  3565                           
  3566  0074                     ??_Sensor_loadADCSettings:	
  3567                           ; 1 bytes @ 0x4
  3568                           
  3569  0074                     ??_MTOUCH_Button_SetPressedCallback:	
  3570                           ; 1 bytes @ 0x4
  3571                           
  3572  0074                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3573                           ; 1 bytes @ 0x4
  3574                           
  3575  0074                     ??_EUSART_Initialize:	
  3576                           ; 1 bytes @ 0x4
  3577                           
  3578  0074                     ?_fputc:	
  3579                           ; 1 bytes @ 0x4
  3580                           
  3581  0074                     Sensor_getScanGroupIndex@sensor:	
  3582                           ; 2 bytes @ 0x4
  3583                           
  3584  0074                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3585                           ; 1 bytes @ 0x4
  3586                           
  3587  0074                     Button_Tick_helper@button:	
  3588                           ; 1 bytes @ 0x4
  3589                           
  3590  0074                     check_data@x:	
  3591                           ; 1 bytes @ 0x4
  3592                           
  3593  0074                     LED_PROCESS@x:	
  3594                           ; 1 bytes @ 0x4
  3595                           
  3596  0074                     RELAY_PROCESS@x:	
  3597                           ; 1 bytes @ 0x4
  3598                           
  3599  0074                     ___bmul@product:	
  3600                           ; 1 bytes @ 0x4
  3601                           
  3602  0074                     memcpy@n:	
  3603                           ; 1 bytes @ 0x4
  3604                           
  3605  0074                     fputc@c:	
  3606                           ; 2 bytes @ 0x4
  3607                           
  3608                           
  3609                           ; 2 bytes @ 0x4
  3610  0074                     	ds	1
  3611  0075                     ??_MTOUCH_Button_Tick:	
  3612  0075                     ?_Button_DefaultCallback:	
  3613                           ; 1 bytes @ 0x5
  3614                           
  3615  0075                     ?_myButtonPressedCallback:	
  3616                           ; 1 bytes @ 0x5
  3617                           
  3618  0075                     ?_myButtonReleasedCallback:	
  3619                           ; 1 bytes @ 0x5
  3620                           
  3621  0075                     ??_DATA_PROCESS:	
  3622                           ; 1 bytes @ 0x5
  3623                           
  3624  0075                     Sensor_getScanGroupIndex@sensorGroup:	
  3625                           ; 1 bytes @ 0x5
  3626                           
  3627  0075                     Button_DefaultCallback@button:	
  3628                           ; 1 bytes @ 0x5
  3629                           
  3630  0075                     myButtonPressedCallback@button:	
  3631                           ; 1 bytes @ 0x5
  3632                           
  3633  0075                     myButtonReleasedCallback@button:	
  3634                           ; 1 bytes @ 0x5
  3635                           
  3636  0075                     ___bmul@multiplier:	
  3637                           ; 1 bytes @ 0x5
  3638                           
  3639  0075                     strlen@a:	
  3640                           ; 1 bytes @ 0x5
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x5
  3644  0075                     	ds	1
  3645  0076                     ??_MTOUCH_Sensor_Enable:	
  3646  0076                     ??_MTOUCH_Sensor_Calibrate:	
  3647                           ; 1 bytes @ 0x6
  3648                           
  3649  0076                     ??_Sensor_RawSample_Update:	
  3650                           ; 1 bytes @ 0x6
  3651                           
  3652  0076                     ??_Sensor_postAcquisitionProcess:	
  3653                           ; 1 bytes @ 0x6
  3654                           
  3655  0076                     ??_Sensor_autoCalibration:	
  3656                           ; 1 bytes @ 0x6
  3657                           
  3658  0076                     ??_Button_DefaultCallback:	
  3659                           ; 1 bytes @ 0x6
  3660                           
  3661  0076                     ??_memcpy:	
  3662                           ; 1 bytes @ 0x6
  3663                           
  3664  0076                     ??_myButtonPressedCallback:	
  3665                           ; 1 bytes @ 0x6
  3666                           
  3667  0076                     ??_myButtonReleasedCallback:	
  3668                           ; 1 bytes @ 0x6
  3669                           
  3670  0076                     ??_MTOUCH_Sensor_isCalibrated:	
  3671                           ; 1 bytes @ 0x6
  3672                           
  3673  0076                     ??_MTOUCH_Sensor_wasSampled:	
  3674                           ; 1 bytes @ 0x6
  3675                           
  3676  0076                     ?_MTOUCH_Sensor_RawSample_Get:	
  3677                           ; 1 bytes @ 0x6
  3678                           
  3679  0076                     MTOUCH_Button_Tick@i:	
  3680                           ; 2 bytes @ 0x6
  3681                           
  3682  0076                     fputc@fp:	
  3683                           ; 1 bytes @ 0x6
  3684                           
  3685  0076                     strlen@s:	
  3686                           ; 1 bytes @ 0x6
  3687                           
  3688                           
  3689                           ; 1 bytes @ 0x6
  3690  0076                     	ds	1
  3691  0077                     ??_MTOUCH_Tick:	
  3692  0077                     ??_fputs:	
  3693                           ; 1 bytes @ 0x7
  3694                           
  3695  0077                     Sensor_RawSample_Update@adcIndex:	
  3696                           ; 1 bytes @ 0x7
  3697                           
  3698  0077                     MTOUCH_Sensor_Enable@sensor:	
  3699                           ; 1 bytes @ 0x7
  3700                           
  3701  0077                     MTOUCH_Sensor_Calibrate@sensor:	
  3702                           ; 1 bytes @ 0x7
  3703                           
  3704  0077                     MTOUCH_Sensor_isCalibrated@sensor:	
  3705                           ; 1 bytes @ 0x7
  3706                           
  3707  0077                     MTOUCH_Sensor_wasSampled@sensor:	
  3708                           ; 1 bytes @ 0x7
  3709                           
  3710  0077                     DATA_PROCESS@x:	
  3711                           ; 1 bytes @ 0x7
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x7
  3715  0077                     	ds	1
  3716  0078                     ??_MTOUCH_Sensor_Initialize:	
  3717  0078                     ??_MTOUCH_Sensor_RawSample_Get:	
  3718                           ; 1 bytes @ 0x8
  3719                           
  3720  0078                     ??_MTOUCH_Button_Initialize:	
  3721                           ; 1 bytes @ 0x8
  3722                           
  3723  0078                     Sensor_RawSample_Update@sensor:	
  3724                           ; 1 bytes @ 0x8
  3725                           
  3726  0078                     Button_Baseline_Update@button:	
  3727                           ; 1 bytes @ 0x8
  3728                           
  3729                           
  3730                           ; 1 bytes @ 0x8
  3731  0078                     	ds	1
  3732  0079                     ??_MTOUCH_Button_InitializeAll:	
  3733  0079                     MTOUCH_Sensor_Initialize@sensor:	
  3734                           ; 1 bytes @ 0x9
  3735                           
  3736  0079                     MTOUCH_Sensor_RawSample_Get@name:	
  3737                           ; 1 bytes @ 0x9
  3738                           
  3739                           
  3740                           ; 1 bytes @ 0x9
  3741  0079                     	ds	1
  3742  007A                     ??_MTOUCH_Sensor_InitializeAll:	
  3743  007A                     ??_MTOUCH_Button_ServiceAll:	
  3744                           ; 1 bytes @ 0xA
  3745                           
  3746  007A                     ??_Button_Reading_Update:	
  3747                           ; 1 bytes @ 0xA
  3748                           
  3749  007A                     ??_update_state:	
  3750                           ; 1 bytes @ 0xA
  3751                           
  3752  007A                     ??_MTOUCH_Initialize:	
  3753                           ; 1 bytes @ 0xA
  3754                           
  3755  007A                     ??_SYSTEM_Initialize:	
  3756                           ; 1 bytes @ 0xA
  3757                           
  3758                           
  3759                           	psect	cstackBANK0
  3760  0020                     __pcstackBANK0:	
  3761                           ; 1 bytes @ 0xA
  3762                           
  3763  0020                     ??_Button_Deviation_Update:	
  3764  0020                     ??_Button_Baseline_Initialize:	
  3765                           ; 1 bytes @ 0x0
  3766                           
  3767  0020                     ??_Button_Reading_Update_Helper:	
  3768                           ; 1 bytes @ 0x0
  3769                           
  3770  0020                     ??_fputc:	
  3771                           ; 1 bytes @ 0x0
  3772                           
  3773  0020                     Sensor_postAcquisitionProcess@adcIndex:	
  3774                           ; 1 bytes @ 0x0
  3775                           
  3776  0020                     Sensor_autoCalibration@adcIndex:	
  3777                           ; 1 bytes @ 0x0
  3778                           
  3779  0020                     MTOUCH_Button_Initialize@name:	
  3780                           ; 1 bytes @ 0x0
  3781                           
  3782  0020                     memcpy@tmp:	
  3783                           ; 1 bytes @ 0x0
  3784                           
  3785  0020                     _Sensor_loadADCSettings$550:	
  3786                           ; 1 bytes @ 0x0
  3787                           
  3788                           
  3789                           ; 2 bytes @ 0x0
  3790  0020                     	ds	1
  3791  0021                     Sensor_autoCalibration@sensor:	
  3792  0021                     MTOUCH_Button_Initialize@button:	
  3793                           ; 1 bytes @ 0x1
  3794                           
  3795  0021                     Sensor_postAcquisitionProcess@deviation:	
  3796                           ; 1 bytes @ 0x1
  3797                           
  3798  0021                     memcpy@s:	
  3799                           ; 2 bytes @ 0x1
  3800                           
  3801                           
  3802                           ; 2 bytes @ 0x1
  3803  0021                     	ds	1
  3804  0022                     Sensor_loadADCSettings@addressOffset:	
  3805  0022                     Button_Reading_Update_Helper@button:	
  3806                           ; 1 bytes @ 0x2
  3807                           
  3808                           
  3809                           ; 1 bytes @ 0x2
  3810  0022                     	ds	1
  3811  0023                     Sensor_postAcquisitionProcess@sensor:	
  3812  0023                     Sensor_loadADCSettings@sensor:	
  3813                           ; 1 bytes @ 0x3
  3814                           
  3815  0023                     Button_Reading_Update@button:	
  3816                           ; 1 bytes @ 0x3
  3817                           
  3818  0023                     memcpy@d1:	
  3819                           ; 1 bytes @ 0x3
  3820                           
  3821                           
  3822                           ; 1 bytes @ 0x3
  3823  0023                     	ds	1
  3824  0024                     ?_Sensor_Acq_ExecutePacket:	
  3825  0024                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3826                           ; 1 bytes @ 0x4
  3827                           
  3828  0024                     Button_Baseline_Initialize@button:	
  3829                           ; 1 bytes @ 0x4
  3830                           
  3831  0024                     memcpy@d:	
  3832                           ; 1 bytes @ 0x4
  3833                           
  3834                           
  3835                           ; 1 bytes @ 0x4
  3836  0024                     	ds	1
  3837  0025                     ??_Sensor_Acq_ExecutePacket:	
  3838  0025                     ?_Button_State_Initializing:	
  3839                           ; 1 bytes @ 0x5
  3840                           
  3841  0025                     ?_Button_State_NotPressed:	
  3842                           ; 1 bytes @ 0x5
  3843                           
  3844  0025                     ?_Button_State_Pressed:	
  3845                           ; 1 bytes @ 0x5
  3846                           
  3847  0025                     ?_fputs:	
  3848                           ; 1 bytes @ 0x5
  3849                           
  3850  0025                     Button_State_Initializing@button:	
  3851                           ; 2 bytes @ 0x5
  3852                           
  3853  0025                     Button_State_NotPressed@button:	
  3854                           ; 1 bytes @ 0x5
  3855                           
  3856  0025                     Button_State_Pressed@button:	
  3857                           ; 1 bytes @ 0x5
  3858                           
  3859  0025                     fputs@fp:	
  3860                           ; 1 bytes @ 0x5
  3861                           
  3862                           
  3863                           ; 1 bytes @ 0x5
  3864  0025                     	ds	1
  3865  0026                     ??_Button_State_Initializing:	
  3866  0026                     ??_Button_State_NotPressed:	
  3867                           ; 1 bytes @ 0x6
  3868                           
  3869  0026                     ??_Button_State_Pressed:	
  3870                           ; 1 bytes @ 0x6
  3871                           
  3872  0026                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3873                           ; 1 bytes @ 0x6
  3874                           
  3875  0026                     fputs@c:	
  3876                           ; 1 bytes @ 0x6
  3877                           
  3878                           
  3879                           ; 1 bytes @ 0x6
  3880  0026                     	ds	1
  3881  0027                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3882  0027                     fputs@i:	
  3883                           ; 1 bytes @ 0x7
  3884                           
  3885                           
  3886                           ; 2 bytes @ 0x7
  3887  0027                     	ds	1
  3888  0028                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3889                           
  3890                           ; 1 bytes @ 0x8
  3891  0028                     	ds	1
  3892  0029                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3893  0029                     fputs@s:	
  3894                           ; 1 bytes @ 0x9
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x9
  3898  0029                     	ds	1
  3899  002A                     ??_Button_Service:	
  3900  002A                     ?_pad:	
  3901                           ; 1 bytes @ 0xA
  3902                           
  3903  002A                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3904                           ; 2 bytes @ 0xA
  3905                           
  3906  002A                     pad@buf:	
  3907                           ; 1 bytes @ 0xA
  3908                           
  3909                           
  3910                           ; 1 bytes @ 0xA
  3911  002A                     	ds	1
  3912  002B                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3913  002B                     Button_Service@name:	
  3914                           ; 1 bytes @ 0xB
  3915                           
  3916  002B                     pad@p:	
  3917                           ; 1 bytes @ 0xB
  3918                           
  3919                           
  3920                           ; 2 bytes @ 0xB
  3921  002B                     	ds	1
  3922  002C                     Sensor_Acq_ExecutePacket@activeSensor:	
  3923  002C                     Button_Service@button:	
  3924                           ; 1 bytes @ 0xC
  3925                           
  3926                           
  3927                           ; 1 bytes @ 0xC
  3928  002C                     	ds	1
  3929  002D                     ??_pad:	
  3930  002D                     Sensor_Acq_ExecutePacket@last_a:	
  3931                           ; 1 bytes @ 0xD
  3932                           
  3933                           
  3934                           ; 2 bytes @ 0xD
  3935  002D                     	ds	1
  3936  002E                     pad@i:	
  3937                           
  3938                           ; 2 bytes @ 0xE
  3939  002E                     	ds	1
  3940  002F                     Sensor_Acq_ExecutePacket@last_b:	
  3941                           
  3942                           ; 2 bytes @ 0xF
  3943  002F                     	ds	1
  3944  0030                     pad@w:	
  3945                           
  3946                           ; 2 bytes @ 0x10
  3947  0030                     	ds	1
  3948  0031                     Sensor_Acq_ExecutePacket@packet_counter:	
  3949                           
  3950                           ; 1 bytes @ 0x11
  3951  0031                     	ds	1
  3952  0032                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3953  0032                     pad@fp:	
  3954                           ; 1 bytes @ 0x12
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x12
  3958  0032                     	ds	1
  3959  0033                     ?_Sensor_Scanfrequency_Evaluation:	
  3960  0033                     ?_ctoa:	
  3961                           ; 1 bytes @ 0x13
  3962                           
  3963  0033                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3964                           ; 2 bytes @ 0x13
  3965                           
  3966  0033                     ctoa@c:	
  3967                           ; 1 bytes @ 0x13
  3968                           
  3969                           
  3970                           ; 1 bytes @ 0x13
  3971  0033                     	ds	1
  3972  0034                     ??_Sensor_Scanfrequency_Evaluation:	
  3973                           
  3974                           ; 1 bytes @ 0x14
  3975  0034                     	ds	1
  3976  0035                     ??_ctoa:	
  3977                           
  3978                           ; 1 bytes @ 0x15
  3979  0035                     	ds	1
  3980  0036                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3981  0036                     ctoa@w:	
  3982                           ; 1 bytes @ 0x16
  3983                           
  3984                           
  3985                           ; 2 bytes @ 0x16
  3986  0036                     	ds	1
  3987  0037                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3988                           
  3989                           ; 2 bytes @ 0x17
  3990  0037                     	ds	1
  3991  0038                     ctoa@fp:	
  3992                           
  3993                           ; 1 bytes @ 0x18
  3994  0038                     	ds	1
  3995  0039                     ?_vfpfcnvrt:	
  3996  0039                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3997                           ; 2 bytes @ 0x19
  3998                           
  3999  0039                     vfpfcnvrt@fmt:	
  4000                           ; 1 bytes @ 0x19
  4001                           
  4002                           
  4003                           ; 1 bytes @ 0x19
  4004  0039                     	ds	1
  4005  003A                     Sensor_Scanfrequency_Evaluation@retry:	
  4006  003A                     vfpfcnvrt@ap:	
  4007                           ; 1 bytes @ 0x1A
  4008                           
  4009                           
  4010                           ; 1 bytes @ 0x1A
  4011  003A                     	ds	1
  4012  003B                     ??_vfpfcnvrt:	
  4013  003B                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  4014                           ; 1 bytes @ 0x1B
  4015                           
  4016                           
  4017                           ; 4 bytes @ 0x1B
  4018  003B                     	ds	4
  4019  003F                     Sensor_Scanfrequency_Evaluation@i:	
  4020                           
  4021                           ; 1 bytes @ 0x1F
  4022  003F                     	ds	1
  4023  0040                     ?_Sensor_Acquisition:	
  4024  0040                     Sensor_Acquisition@sensor_adc2:	
  4025                           ; 1 bytes @ 0x20
  4026                           
  4027  0040                     vfpfcnvrt@c:	
  4028                           ; 1 bytes @ 0x20
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x20
  4032  0040                     	ds	1
  4033  0041                     ??_Sensor_Acquisition:	
  4034  0041                     vfpfcnvrt@fp:	
  4035                           ; 1 bytes @ 0x21
  4036                           
  4037                           
  4038                           ; 1 bytes @ 0x21
  4039  0041                     	ds	1
  4040  0042                     ?_vfprintf:	
  4041  0042                     Sensor_Acquisition@retry:	
  4042                           ; 2 bytes @ 0x22
  4043                           
  4044  0042                     vfprintf@fmt:	
  4045                           ; 1 bytes @ 0x22
  4046                           
  4047                           
  4048                           ; 2 bytes @ 0x22
  4049  0042                     	ds	1
  4050  0043                     Sensor_Acquisition@sensor_adc1:	
  4051                           
  4052                           ; 1 bytes @ 0x23
  4053  0043                     	ds	1
  4054  0044                     ??_Sensor_Service:	
  4055  0044                     vfprintf@ap:	
  4056                           ; 1 bytes @ 0x24
  4057                           
  4058                           
  4059                           ; 1 bytes @ 0x24
  4060  0044                     	ds	1
  4061  0045                     ??_vfprintf:	
  4062                           
  4063                           ; 1 bytes @ 0x25
  4064  0045                     	ds	2
  4065  0047                     Sensor_Service@scanGroup:	
  4066  0047                     vfprintf@fp:	
  4067                           ; 1 bytes @ 0x27
  4068                           
  4069                           
  4070                           ; 1 bytes @ 0x27
  4071  0047                     	ds	1
  4072  0048                     Sensor_Service@error:	
  4073  0048                     vfprintf@cfmt:	
  4074                           ; 1 bytes @ 0x28
  4075                           
  4076                           
  4077                           ; 2 bytes @ 0x28
  4078  0048                     	ds	1
  4079  0049                     Sensor_Service@sensor_adc1:	
  4080                           
  4081                           ; 1 bytes @ 0x29
  4082  0049                     	ds	1
  4083  004A                     ?_printf:	
  4084  004A                     Sensor_Service@sensor_adc2:	
  4085                           ; 2 bytes @ 0x2A
  4086                           
  4087  004A                     printf@fmt:	
  4088                           ; 1 bytes @ 0x2A
  4089                           
  4090                           
  4091                           ; 2 bytes @ 0x2A
  4092  004A                     	ds	1
  4093  004B                     ??_MTOUCH_Sensor_SampleAll:	
  4094                           
  4095                           ; 1 bytes @ 0x2B
  4096  004B                     	ds	1
  4097  004C                     MTOUCH_Sensor_SampleAll@group:	
  4098                           
  4099                           ; 1 bytes @ 0x2C
  4100  004C                     	ds	1
  4101  004D                     ??_MTOUCH_Service_Mainloop:	
  4102                           
  4103                           ; 1 bytes @ 0x2D
  4104  004D                     	ds	1
  4105  004E                     ??_printf:	
  4106                           
  4107                           ; 1 bytes @ 0x2E
  4108  004E                     	ds	3
  4109  0051                     printf@ap:	
  4110                           
  4111                           ; 1 bytes @ 0x31
  4112  0051                     	ds	1
  4113  0052                     ??_check_message:	
  4114                           
  4115                           ; 1 bytes @ 0x32
  4116  0052                     	ds	2
  4117  0054                     check_message@x:	
  4118                           
  4119                           ; 1 bytes @ 0x34
  4120  0054                     	ds	1
  4121                           
  4122                           	psect	maintext
  4123  0062                     __pmaintext:	
  4124 ;;
  4125 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4126 ;;
  4127 ;; *************** function _main *****************
  4128 ;; Defined at:
  4129 ;;		line 18 in file "main.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;		None
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;		None
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  1    wreg      void 
  4136 ;; Registers used:
  4137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4138 ;; Tracked objects:
  4139 ;;		On entry : B1F/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4143 ;;      Params:         0       0       0       0       0       0       0       0
  4144 ;;      Locals:         0       0       0       0       0       0       0       0
  4145 ;;      Temps:          0       0       0       2       0       0       0       0
  4146 ;;      Totals:         0       0       0       2       0       0       0       0
  4147 ;;Total ram usage:        2 bytes
  4148 ;; Hardware stack levels required when called:   14
  4149 ;; This function calls:
  4150 ;;		_DATA_PROCESS
  4151 ;;		_EUSART_Read
  4152 ;;		_EUSART_is_rx_ready
  4153 ;;		_LED_PROCESS
  4154 ;;		_MTOUCH_Button_SetNotPressedCallback
  4155 ;;		_MTOUCH_Button_SetPressedCallback
  4156 ;;		_MTOUCH_Button_isPressed
  4157 ;;		_MTOUCH_Service_Mainloop
  4158 ;;		_SYSTEM_Initialize
  4159 ;;		_check_data
  4160 ;;		_check_message
  4161 ;;		_printf
  4162 ;;		_update_state
  4163 ;; This function is called by:
  4164 ;;		Startup code after reset
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _main
  4170  0062                     _main:	
  4171                           
  4172                           ;main.c: 20:     SYSTEM_Initialize();
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4176  0062  3195  256B  3180   	fcall	_SYSTEM_Initialize
  4177                           
  4178                           ;main.c: 21:     (INTCONbits.GIE = 1);
  4179  0065  178B               	bsf	11,7	;volatile
  4180                           
  4181                           ;main.c: 22:     (INTCONbits.PEIE = 1);
  4182  0066  170B               	bsf	11,6	;volatile
  4183                           
  4184                           ;main.c: 23:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  4185  0067  30D2               	movlw	low _myButtonPressedCallback
  4186  0068  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback
  4187  0069  3017               	movlw	high _myButtonPressedCallback
  4188  006A  00F3               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  4189  006B  3193  2387  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  4190                           
  4191                           ;main.c: 24:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  4192  006E  304C               	movlw	low _myButtonReleasedCallback
  4193  006F  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  4194  0070  3016               	movlw	high _myButtonReleasedCallback
  4195  0071  00F3               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  4196  0072  3193  2381  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  4197  0075  0022               	movlb	2	; select bank2
  4198  0076  110C               	bcf	12,2	;volatile
  4199                           
  4200                           ;main.c: 26:     LED_PROCESS(0);
  4201  0077  3000               	movlw	0
  4202  0078  318E  2622  3180   	fcall	_LED_PROCESS
  4203  007B                     l6246:	
  4204                           
  4205                           ;main.c: 31:     {;main.c: 32:         if(update_state_flag == 1)
  4206  007B  0020               	movlb	0	; select bank0
  4207  007C  0361               	decf	_update_state_flag,w
  4208  007D  1D03               	btfss	3,2
  4209  007E  2883               	goto	l6252
  4210                           
  4211                           ;main.c: 33:         {;main.c: 34:             update_state_flag = 0;
  4212  007F  01E1               	clrf	_update_state_flag
  4213                           
  4214                           ;main.c: 35:             update_state();
  4215  0080  3186  2634  3180   	fcall	_update_state
  4216  0083                     l6252:	
  4217                           
  4218                           ;main.c: 38:         if(EUSART_is_rx_ready())
  4219  0083  3193  2360  3180   	fcall	_EUSART_is_rx_ready
  4220  0086  3A00               	xorlw	0
  4221  0087  1903               	skipnz
  4222  0088  297E               	goto	l6324
  4223                           
  4224                           ;main.c: 39:         {;main.c: 40:             rxData = EUSART_Read();
  4225  0089  3196  2690  3180   	fcall	_EUSART_Read
  4226  008C  0022               	movlb	2	; select bank2
  4227  008D  00C4               	movwf	??_main^(0+256)
  4228  008E  0844               	movf	??_main^(0+256),w
  4229  008F  0020               	movlb	0	; select bank0
  4230  0090  00E7               	movwf	_rxData
  4231                           
  4232                           ;main.c: 41:             if(check_data(rxData))
  4233  0091  0867               	movf	_rxData,w
  4234  0092  3189  2171  3180   	fcall	_check_data
  4235  0095  3A00               	xorlw	0
  4236  0096  1903               	skipnz
  4237  0097  297E               	goto	l6324
  4238                           
  4239                           ;main.c: 42:             {;main.c: 43:                 if(check_request == 0)
  4240  0098  0020               	movlb	0	; select bank0
  4241  0099  0864               	movf	_check_request,w
  4242  009A  1D03               	btfss	3,2
  4243  009B  28A7               	goto	l6264
  4244                           
  4245                           ;main.c: 44:                 {;main.c: 45:                     prcData = rxData;
  4246  009C  0867               	movf	_rxData,w
  4247  009D  0022               	movlb	2	; select bank2
  4248  009E  00C4               	movwf	??_main^(0+256)
  4249  009F  0844               	movf	??_main^(0+256),w
  4250  00A0  0020               	movlb	0	; select bank0
  4251  00A1  00E6               	movwf	_prcData
  4252                           
  4253                           ;main.c: 46:                     check_message(rxData);
  4254  00A2  0867               	movf	_rxData,w
  4255  00A3  3197  2701  3180   	fcall	_check_message
  4256                           
  4257                           ;main.c: 47:                 }
  4258  00A6  297E               	goto	l6324
  4259  00A7                     l6264:	
  4260                           
  4261                           ;main.c: 49:                 {;main.c: 50:                     if(config_status == 1)
  4262  00A7  0365               	decf	_config_status,w
  4263  00A8  1D03               	btfss	3,2
  4264  00A9  296C               	goto	l6314
  4265                           
  4266                           ;main.c: 51:                     {;main.c: 52:                         if(rxData == 'T')
  4267  00AA  3054               	movlw	84
  4268  00AB  0667               	xorwf	_rxData,w
  4269  00AC  1D03               	btfss	3,2
  4270  00AD  290A               	goto	l6290
  4271                           
  4272                           ;main.c: 53:                         {;main.c: 54:                             LED_PROCE
      +                          SS(15);
  4273  00AE  300F               	movlw	15
  4274  00AF  318E  2622  3180   	fcall	_LED_PROCESS
  4275                           
  4276                           ;main.c: 55:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4277  00B2  3015               	movlw	21
  4278  00B3  0022               	movlb	2	; select bank2
  4279  00B4  00C5               	movwf	(??_main^(0+256)+1)
  4280  00B5  304B               	movlw	75
  4281  00B6  00C4               	movwf	??_main^(0+256)
  4282  00B7  30BE               	movlw	190
  4283  00B8                     u4797:	
  4284  00B8  0B89               	decfsz	9,f
  4285  00B9  28B8               	goto	u4797
  4286  00BA  0BC4               	decfsz	??_main^(0+256),f
  4287  00BB  28B8               	goto	u4797
  4288  00BC  0BC5               	decfsz	(??_main^(0+256)+1),f
  4289  00BD  28B8               	goto	u4797
  4290  00BE  0000               	nop
  4291                           
  4292                           ;main.c: 56:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4293  00BF  3015               	movlw	21
  4294  00C0  0022               	movlb	2	; select bank2
  4295  00C1  00C5               	movwf	(??_main^(0+256)+1)
  4296  00C2  304B               	movlw	75
  4297  00C3  00C4               	movwf	??_main^(0+256)
  4298  00C4  30BE               	movlw	190
  4299  00C5                     u4807:	
  4300  00C5  0B89               	decfsz	9,f
  4301  00C6  28C5               	goto	u4807
  4302  00C7  0BC4               	decfsz	??_main^(0+256),f
  4303  00C8  28C5               	goto	u4807
  4304  00C9  0BC5               	decfsz	(??_main^(0+256)+1),f
  4305  00CA  28C5               	goto	u4807
  4306  00CB  0000               	nop
  4307                           
  4308                           ;main.c: 57:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4309  00CC  3015               	movlw	21
  4310  00CD  0022               	movlb	2	; select bank2
  4311  00CE  00C5               	movwf	(??_main^(0+256)+1)
  4312  00CF  304B               	movlw	75
  4313  00D0  00C4               	movwf	??_main^(0+256)
  4314  00D1  30BE               	movlw	190
  4315  00D2                     u4817:	
  4316  00D2  0B89               	decfsz	9,f
  4317  00D3  28D2               	goto	u4817
  4318  00D4  0BC4               	decfsz	??_main^(0+256),f
  4319  00D5  28D2               	goto	u4817
  4320  00D6  0BC5               	decfsz	(??_main^(0+256)+1),f
  4321  00D7  28D2               	goto	u4817
  4322  00D8  0000               	nop
  4323                           
  4324                           ;main.c: 58:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4325  00D9  3015               	movlw	21
  4326  00DA  0022               	movlb	2	; select bank2
  4327  00DB  00C5               	movwf	(??_main^(0+256)+1)
  4328  00DC  304B               	movlw	75
  4329  00DD  00C4               	movwf	??_main^(0+256)
  4330  00DE  30BE               	movlw	190
  4331  00DF                     u4827:	
  4332  00DF  0B89               	decfsz	9,f
  4333  00E0  28DF               	goto	u4827
  4334  00E1  0BC4               	decfsz	??_main^(0+256),f
  4335  00E2  28DF               	goto	u4827
  4336  00E3  0BC5               	decfsz	(??_main^(0+256)+1),f
  4337  00E4  28DF               	goto	u4827
  4338  00E5  0000               	nop
  4339                           
  4340                           ;main.c: 59:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4341  00E6  3015               	movlw	21
  4342  00E7  0022               	movlb	2	; select bank2
  4343  00E8  00C5               	movwf	(??_main^(0+256)+1)
  4344  00E9  304B               	movlw	75
  4345  00EA  00C4               	movwf	??_main^(0+256)
  4346  00EB  30BE               	movlw	190
  4347  00EC                     u4837:	
  4348  00EC  0B89               	decfsz	9,f
  4349  00ED  28EC               	goto	u4837
  4350  00EE  0BC4               	decfsz	??_main^(0+256),f
  4351  00EF  28EC               	goto	u4837
  4352  00F0  0BC5               	decfsz	(??_main^(0+256)+1),f
  4353  00F1  28EC               	goto	u4837
  4354  00F2  0000               	nop
  4355                           
  4356                           ;main.c: 60:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4357  00F3  3015               	movlw	21
  4358  00F4  0022               	movlb	2	; select bank2
  4359  00F5  00C5               	movwf	(??_main^(0+256)+1)
  4360  00F6  304B               	movlw	75
  4361  00F7  00C4               	movwf	??_main^(0+256)
  4362  00F8  30BE               	movlw	190
  4363  00F9                     u4847:	
  4364  00F9  0B89               	decfsz	9,f
  4365  00FA  28F9               	goto	u4847
  4366  00FB  0BC4               	decfsz	??_main^(0+256),f
  4367  00FC  28F9               	goto	u4847
  4368  00FD  0BC5               	decfsz	(??_main^(0+256)+1),f
  4369  00FE  28F9               	goto	u4847
  4370  00FF  0000               	nop
  4371                           
  4372                           ;main.c: 61:                             config_status = 0;
  4373  0100  0020               	movlb	0	; select bank0
  4374  0101  01E5               	clrf	_config_status
  4375                           
  4376                           ;main.c: 62:                             check_request = 0;
  4377  0102  01E4               	clrf	_check_request
  4378                           
  4379                           ;main.c: 63:                             timeout_count = 0;
  4380  0103  01DD               	clrf	_timeout_count
  4381  0104  01DE               	clrf	_timeout_count+1
  4382                           
  4383                           ;main.c: 64:                             LED_PROCESS(last_touch_status.full_status);
  4384  0105  085B               	movf	_last_touch_status,w
  4385  0106  318E  2622  3180   	fcall	_LED_PROCESS
  4386  0109  0001               	reset	;# 
  4387  010A                     l6290:	
  4388                           
  4389                           ;main.c: 67:                         if(rxData == 'F')
  4390  010A  3046               	movlw	70
  4391  010B  0020               	movlb	0	; select bank0
  4392  010C  0667               	xorwf	_rxData,w
  4393  010D  1D03               	btfss	3,2
  4394  010E  297E               	goto	l6324
  4395                           
  4396                           ;main.c: 68:                         {;main.c: 69:                             LED_PROCE
      +                          SS(0);
  4397  010F  3000               	movlw	0
  4398  0110  318E  2622  3180   	fcall	_LED_PROCESS
  4399                           
  4400                           ;main.c: 70:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4401  0113  3015               	movlw	21
  4402  0114  0022               	movlb	2	; select bank2
  4403  0115  00C5               	movwf	(??_main^(0+256)+1)
  4404  0116  304B               	movlw	75
  4405  0117  00C4               	movwf	??_main^(0+256)
  4406  0118  30BE               	movlw	190
  4407  0119                     u4857:	
  4408  0119  0B89               	decfsz	9,f
  4409  011A  2919               	goto	u4857
  4410  011B  0BC4               	decfsz	??_main^(0+256),f
  4411  011C  2919               	goto	u4857
  4412  011D  0BC5               	decfsz	(??_main^(0+256)+1),f
  4413  011E  2919               	goto	u4857
  4414  011F  0000               	nop
  4415                           
  4416                           ;main.c: 71:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4417  0120  3015               	movlw	21
  4418  0121  0022               	movlb	2	; select bank2
  4419  0122  00C5               	movwf	(??_main^(0+256)+1)
  4420  0123  304B               	movlw	75
  4421  0124  00C4               	movwf	??_main^(0+256)
  4422  0125  30BE               	movlw	190
  4423  0126                     u4867:	
  4424  0126  0B89               	decfsz	9,f
  4425  0127  2926               	goto	u4867
  4426  0128  0BC4               	decfsz	??_main^(0+256),f
  4427  0129  2926               	goto	u4867
  4428  012A  0BC5               	decfsz	(??_main^(0+256)+1),f
  4429  012B  2926               	goto	u4867
  4430  012C  0000               	nop
  4431                           
  4432                           ;main.c: 72:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4433  012D  3015               	movlw	21
  4434  012E  0022               	movlb	2	; select bank2
  4435  012F  00C5               	movwf	(??_main^(0+256)+1)
  4436  0130  304B               	movlw	75
  4437  0131  00C4               	movwf	??_main^(0+256)
  4438  0132  30BE               	movlw	190
  4439  0133                     u4877:	
  4440  0133  0B89               	decfsz	9,f
  4441  0134  2933               	goto	u4877
  4442  0135  0BC4               	decfsz	??_main^(0+256),f
  4443  0136  2933               	goto	u4877
  4444  0137  0BC5               	decfsz	(??_main^(0+256)+1),f
  4445  0138  2933               	goto	u4877
  4446  0139  0000               	nop
  4447                           
  4448                           ;main.c: 73:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4449  013A  3015               	movlw	21
  4450  013B  0022               	movlb	2	; select bank2
  4451  013C  00C5               	movwf	(??_main^(0+256)+1)
  4452  013D  304B               	movlw	75
  4453  013E  00C4               	movwf	??_main^(0+256)
  4454  013F  30BE               	movlw	190
  4455  0140                     u4887:	
  4456  0140  0B89               	decfsz	9,f
  4457  0141  2940               	goto	u4887
  4458  0142  0BC4               	decfsz	??_main^(0+256),f
  4459  0143  2940               	goto	u4887
  4460  0144  0BC5               	decfsz	(??_main^(0+256)+1),f
  4461  0145  2940               	goto	u4887
  4462  0146  0000               	nop
  4463                           
  4464                           ;main.c: 74:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4465  0147  3015               	movlw	21
  4466  0148  0022               	movlb	2	; select bank2
  4467  0149  00C5               	movwf	(??_main^(0+256)+1)
  4468  014A  304B               	movlw	75
  4469  014B  00C4               	movwf	??_main^(0+256)
  4470  014C  30BE               	movlw	190
  4471  014D                     u4897:	
  4472  014D  0B89               	decfsz	9,f
  4473  014E  294D               	goto	u4897
  4474  014F  0BC4               	decfsz	??_main^(0+256),f
  4475  0150  294D               	goto	u4897
  4476  0151  0BC5               	decfsz	(??_main^(0+256)+1),f
  4477  0152  294D               	goto	u4897
  4478  0153  0000               	nop
  4479                           
  4480                           ;main.c: 75:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4481  0154  3015               	movlw	21
  4482  0155  0022               	movlb	2	; select bank2
  4483  0156  00C5               	movwf	(??_main^(0+256)+1)
  4484  0157  304B               	movlw	75
  4485  0158  00C4               	movwf	??_main^(0+256)
  4486  0159  30BE               	movlw	190
  4487  015A                     u4907:	
  4488  015A  0B89               	decfsz	9,f
  4489  015B  295A               	goto	u4907
  4490  015C  0BC4               	decfsz	??_main^(0+256),f
  4491  015D  295A               	goto	u4907
  4492  015E  0BC5               	decfsz	(??_main^(0+256)+1),f
  4493  015F  295A               	goto	u4907
  4494  0160  0000               	nop
  4495                           
  4496                           ;main.c: 76:                             config_status = 0;
  4497  0161  0020               	movlb	0	; select bank0
  4498  0162  01E5               	clrf	_config_status
  4499                           
  4500                           ;main.c: 77:                             check_request = 0;
  4501  0163  01E4               	clrf	_check_request
  4502                           
  4503                           ;main.c: 78:                             timeout_count = 0;
  4504  0164  01DD               	clrf	_timeout_count
  4505  0165  01DE               	clrf	_timeout_count+1
  4506                           
  4507                           ;main.c: 79:                             LED_PROCESS(last_touch_status.full_status);
  4508  0166  085B               	movf	_last_touch_status,w
  4509  0167  318E  2622  3180   	fcall	_LED_PROCESS
  4510  016A  0001               	reset	;# 
  4511  016B  297E               	goto	l6324
  4512  016C                     l6314:	
  4513                           
  4514                           ;main.c: 84:                     {;main.c: 85:                         if(rxData == 'T')
  4515  016C  3054               	movlw	84
  4516  016D  0667               	xorwf	_rxData,w
  4517  016E  1D03               	btfss	3,2
  4518  016F  2977               	goto	l6320
  4519                           
  4520                           ;main.c: 86:                         {;main.c: 87:                             DATA_PROC
      +                          ESS(prcData);
  4521  0170  0866               	movf	_prcData,w
  4522  0171  3184  2459  3180   	fcall	_DATA_PROCESS
  4523                           
  4524                           ;main.c: 88:                             timeout_count = 0;
  4525  0174  0020               	movlb	0	; select bank0
  4526  0175  01DD               	clrf	_timeout_count
  4527  0176  01DE               	clrf	_timeout_count+1
  4528  0177                     l6320:	
  4529                           
  4530                           ;main.c: 90:                         if(rxData == 'F')
  4531  0177  3046               	movlw	70
  4532  0178  0667               	xorwf	_rxData,w
  4533  0179  1D03               	btfss	3,2
  4534  017A  297E               	goto	l6324
  4535                           
  4536                           ;main.c: 91:                         {;main.c: 92:                             check_req
      +                          uest = 0;
  4537  017B  01E4               	clrf	_check_request
  4538                           
  4539                           ;main.c: 93:                             timeout_count = 0;
  4540  017C  01DD               	clrf	_timeout_count
  4541  017D  01DE               	clrf	_timeout_count+1
  4542  017E                     l6324:	
  4543                           ;main.c: 97:             }
  4544                           
  4545                           
  4546                           ;main.c: 99:         if(MTOUCH_Service_Mainloop())
  4547  017E  3196  2612  3180   	fcall	_MTOUCH_Service_Mainloop
  4548  0181  3A00               	xorlw	0
  4549  0182  1903               	skipnz
  4550  0183  287B               	goto	l6246
  4551                           
  4552                           ;main.c: 100:         {;main.c: 101:             if(config_status == 0)
  4553  0184  0020               	movlb	0	; select bank0
  4554  0185  0865               	movf	_config_status,w
  4555  0186  1D03               	btfss	3,2
  4556  0187  2A16               	goto	l6372
  4557                           
  4558                           ;main.c: 102:             {;main.c: 103:                 if(check_request == 1)
  4559  0188  0364               	decf	_check_request,w
  4560  0189  1D03               	btfss	3,2
  4561  018A  2997               	goto	l6336
  4562                           
  4563                           ;main.c: 104:                 {;main.c: 105:                     timeout_count++;
  4564  018B  3001               	movlw	1
  4565  018C  07DD               	addwf	_timeout_count,f
  4566  018D  3000               	movlw	0
  4567  018E  3DDE               	addwfc	_timeout_count+1,f
  4568                           
  4569                           ;main.c: 106:                     if(timeout_count == 30)
  4570  018F  301E               	movlw	30
  4571  0190  065D               	xorwf	_timeout_count,w
  4572  0191  045E               	iorwf	_timeout_count+1,w
  4573  0192  1D03               	btfss	3,2
  4574  0193  2997               	goto	l6336
  4575                           
  4576                           ;main.c: 107:                     {;main.c: 108:                         timeout_count =
      +                           0;
  4577  0194  01DD               	clrf	_timeout_count
  4578  0195  01DE               	clrf	_timeout_count+1
  4579                           
  4580                           ;main.c: 109:                         check_request = 0;
  4581  0196  01E4               	clrf	_check_request
  4582  0197                     l6336:	
  4583                           
  4584                           ;main.c: 112:                 if(MTOUCH_Button_isPressed(0) == 1 && MTOUCH_Button_isPres
      +                          sed(1) == 0 && MTOUCH_Button_isPressed(2) == 0&& MTOUCH_Button_isPressed(3) == 1)
  4585  0197  3000               	movlw	0
  4586  0198  3194  2476  3180   	fcall	_MTOUCH_Button_isPressed
  4587  019B  3A01               	xorlw	1
  4588  019C  1D03               	skipz
  4589  019D  2A12               	goto	l6370
  4590  019E  3001               	movlw	1
  4591  019F  3194  2476  3180   	fcall	_MTOUCH_Button_isPressed
  4592  01A2  3A00               	xorlw	0
  4593  01A3  1D03               	skipz
  4594  01A4  2A12               	goto	l6370
  4595  01A5  3002               	movlw	2
  4596  01A6  3194  2476  3180   	fcall	_MTOUCH_Button_isPressed
  4597  01A9  3A00               	xorlw	0
  4598  01AA  1D03               	skipz
  4599  01AB  2A12               	goto	l6370
  4600  01AC  3003               	movlw	3
  4601  01AD  3194  2476  3180   	fcall	_MTOUCH_Button_isPressed
  4602  01B0  3A01               	xorlw	1
  4603  01B1  1D03               	skipz
  4604  01B2  2A12               	goto	l6370
  4605                           
  4606                           ;main.c: 113:                 {;main.c: 114:                     count_conf++;
  4607  01B3  3001               	movlw	1
  4608  01B4  0021               	movlb	1	; select bank1
  4609  01B5  07B6               	addwf	_count_conf^(0+128),f
  4610  01B6  3000               	movlw	0
  4611  01B7  3DB7               	addwfc	(_count_conf+1)^(0+128),f
  4612                           
  4613                           ;main.c: 115:                     if(count_conf == 1800)
  4614  01B8  3008               	movlw	8
  4615  01B9  0636               	xorwf	_count_conf^(0+128),w
  4616  01BA  3007               	movlw	7
  4617  01BB  1903               	skipnz
  4618  01BC  0637               	xorwf	(_count_conf+1)^(0+128),w
  4619  01BD  1D03               	btfss	3,2
  4620  01BE  287B               	goto	l6246
  4621                           
  4622                           ;main.c: 116:                     {;main.c: 117:                         count_conf = 0;
  4623  01BF  01B6               	clrf	_count_conf^(0+128)
  4624  01C0  01B7               	clrf	(_count_conf+1)^(0+128)
  4625                           
  4626                           ;main.c: 118:                         printf("PICSMART");
  4627  01C1  3000               	movlw	low (STR_1| (0+32768))
  4628  01C2  0020               	movlb	0	; select bank0
  4629  01C3  00CA               	movwf	printf@fmt
  4630  01C4  3098               	movlw	high (STR_1| (0+32768))
  4631  01C5  00CB               	movwf	printf@fmt+1
  4632  01C6  3195  250A  3180   	fcall	_printf
  4633                           
  4634                           ;main.c: 119:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4635  01C9  3015               	movlw	21
  4636  01CA  0022               	movlb	2	; select bank2
  4637  01CB  00C5               	movwf	(??_main^(0+256)+1)
  4638  01CC  304B               	movlw	75
  4639  01CD  00C4               	movwf	??_main^(0+256)
  4640  01CE  30BE               	movlw	190
  4641  01CF                     u4917:	
  4642  01CF  0B89               	decfsz	9,f
  4643  01D0  29CF               	goto	u4917
  4644  01D1  0BC4               	decfsz	??_main^(0+256),f
  4645  01D2  29CF               	goto	u4917
  4646  01D3  0BC5               	decfsz	(??_main^(0+256)+1),f
  4647  01D4  29CF               	goto	u4917
  4648  01D5  0000               	nop
  4649                           
  4650                           ;main.c: 120:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4651  01D6  3015               	movlw	21
  4652  01D7  0022               	movlb	2	; select bank2
  4653  01D8  00C5               	movwf	(??_main^(0+256)+1)
  4654  01D9  304B               	movlw	75
  4655  01DA  00C4               	movwf	??_main^(0+256)
  4656  01DB  30BE               	movlw	190
  4657  01DC                     u4927:	
  4658  01DC  0B89               	decfsz	9,f
  4659  01DD  29DC               	goto	u4927
  4660  01DE  0BC4               	decfsz	??_main^(0+256),f
  4661  01DF  29DC               	goto	u4927
  4662  01E0  0BC5               	decfsz	(??_main^(0+256)+1),f
  4663  01E1  29DC               	goto	u4927
  4664  01E2  0000               	nop
  4665                           
  4666                           ;main.c: 121:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4667  01E3  3015               	movlw	21
  4668  01E4  0022               	movlb	2	; select bank2
  4669  01E5  00C5               	movwf	(??_main^(0+256)+1)
  4670  01E6  304B               	movlw	75
  4671  01E7  00C4               	movwf	??_main^(0+256)
  4672  01E8  30BE               	movlw	190
  4673  01E9                     u4937:	
  4674  01E9  0B89               	decfsz	9,f
  4675  01EA  29E9               	goto	u4937
  4676  01EB  0BC4               	decfsz	??_main^(0+256),f
  4677  01EC  29E9               	goto	u4937
  4678  01ED  0BC5               	decfsz	(??_main^(0+256)+1),f
  4679  01EE  29E9               	goto	u4937
  4680  01EF  0000               	nop
  4681                           
  4682                           ;main.c: 122:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4683  01F0  3015               	movlw	21
  4684  01F1  0022               	movlb	2	; select bank2
  4685  01F2  00C5               	movwf	(??_main^(0+256)+1)
  4686  01F3  304B               	movlw	75
  4687  01F4  00C4               	movwf	??_main^(0+256)
  4688  01F5  30BE               	movlw	190
  4689  01F6                     u4947:	
  4690  01F6  0B89               	decfsz	9,f
  4691  01F7  29F6               	goto	u4947
  4692  01F8  0BC4               	decfsz	??_main^(0+256),f
  4693  01F9  29F6               	goto	u4947
  4694  01FA  0BC5               	decfsz	(??_main^(0+256)+1),f
  4695  01FB  29F6               	goto	u4947
  4696  01FC  0000               	nop
  4697                           
  4698                           ;main.c: 123:                         printf("RUN\r\n");
  4699  01FD  3009               	movlw	low (STR_2| (0+32768))
  4700  01FE  0020               	movlb	0	; select bank0
  4701  01FF  00CA               	movwf	printf@fmt
  4702  0200  3098               	movlw	high (STR_2| (0+32768))
  4703  0201  00CB               	movwf	printf@fmt+1
  4704  0202  3195  250A  3180   	fcall	_printf
  4705                           
  4706                           ;main.c: 124:                         config_status = 1;
  4707  0205  0020               	movlb	0	; select bank0
  4708  0206  01E5               	clrf	_config_status
  4709  0207  0AE5               	incf	_config_status,f
  4710                           
  4711                           ;main.c: 125:                         check_request = 1;
  4712  0208  01E4               	clrf	_check_request
  4713  0209  0AE4               	incf	_check_request,f
  4714                           
  4715                           ;main.c: 126:                         timeout_count = 0;
  4716  020A  01DD               	clrf	_timeout_count
  4717  020B  01DE               	clrf	_timeout_count+1
  4718                           
  4719                           ;main.c: 127:                         LED_PROCESS(0);
  4720  020C  3000               	movlw	0
  4721  020D  318E  2622  3180   	fcall	_LED_PROCESS
  4722                           
  4723                           ;main.c: 128:                         blink = 0;
  4724  0210  0020               	movlb	0	; select bank0
  4725  0211  2A89               	goto	L1
  4726  0212                     l6370:	
  4727                           
  4728                           ;main.c: 132:                 {;main.c: 133:                     count_conf = 0;
  4729  0212  0021               	movlb	1	; select bank1
  4730  0213  01B6               	clrf	_count_conf^(0+128)
  4731  0214  01B7               	clrf	(_count_conf+1)^(0+128)
  4732                           
  4733                           ;main.c: 135:             }
  4734                           
  4735                           ;main.c: 134:                 }
  4736  0215  287B               	goto	l6246
  4737  0216                     l6372:	
  4738                           
  4739                           ;main.c: 137:             {;main.c: 138:                 if(check_request == 1)
  4740  0216  0364               	decf	_check_request,w
  4741  0217  1D03               	btfss	3,2
  4742  0218  287B               	goto	l6246
  4743                           
  4744                           ;main.c: 139:                 {;main.c: 140:                     timeout_count++;
  4745  0219  3001               	movlw	1
  4746  021A  07DD               	addwf	_timeout_count,f
  4747  021B  3000               	movlw	0
  4748  021C  3DDE               	addwfc	_timeout_count+1,f
  4749                           
  4750                           ;main.c: 141:                     if(timeout_count >= 30000)
  4751  021D  3075               	movlw	117
  4752  021E  025E               	subwf	_timeout_count+1,w
  4753  021F  3030               	movlw	48
  4754  0220  1903               	skipnz
  4755  0221  025D               	subwf	_timeout_count,w
  4756  0222  1C03               	skipc
  4757  0223  2A69               	goto	l6390
  4758                           
  4759                           ;main.c: 142:                     {;main.c: 144:                         LED_PROCESS(0);
  4760  0224  3000               	movlw	0
  4761  0225  318E  2622  3180   	fcall	_LED_PROCESS
  4762                           
  4763                           ;main.c: 145:                         timeout_count = 0;
  4764  0228  0020               	movlb	0	; select bank0
  4765  0229  01DD               	clrf	_timeout_count
  4766  022A  01DE               	clrf	_timeout_count+1
  4767                           
  4768                           ;main.c: 146:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4769  022B  3015               	movlw	21
  4770  022C  0022               	movlb	2	; select bank2
  4771  022D  00C5               	movwf	(??_main^(0+256)+1)
  4772  022E  304B               	movlw	75
  4773  022F  00C4               	movwf	??_main^(0+256)
  4774  0230  30BE               	movlw	190
  4775  0231                     u4957:	
  4776  0231  0B89               	decfsz	9,f
  4777  0232  2A31               	goto	u4957
  4778  0233  0BC4               	decfsz	??_main^(0+256),f
  4779  0234  2A31               	goto	u4957
  4780  0235  0BC5               	decfsz	(??_main^(0+256)+1),f
  4781  0236  2A31               	goto	u4957
  4782  0237  0000               	nop
  4783                           
  4784                           ;main.c: 147:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4785  0238  3015               	movlw	21
  4786  0239  0022               	movlb	2	; select bank2
  4787  023A  00C5               	movwf	(??_main^(0+256)+1)
  4788  023B  304B               	movlw	75
  4789  023C  00C4               	movwf	??_main^(0+256)
  4790  023D  30BE               	movlw	190
  4791  023E                     u4967:	
  4792  023E  0B89               	decfsz	9,f
  4793  023F  2A3E               	goto	u4967
  4794  0240  0BC4               	decfsz	??_main^(0+256),f
  4795  0241  2A3E               	goto	u4967
  4796  0242  0BC5               	decfsz	(??_main^(0+256)+1),f
  4797  0243  2A3E               	goto	u4967
  4798  0244  0000               	nop
  4799                           
  4800                           ;main.c: 148:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4801  0245  3015               	movlw	21
  4802  0246  0022               	movlb	2	; select bank2
  4803  0247  00C5               	movwf	(??_main^(0+256)+1)
  4804  0248  304B               	movlw	75
  4805  0249  00C4               	movwf	??_main^(0+256)
  4806  024A  30BE               	movlw	190
  4807  024B                     u4977:	
  4808  024B  0B89               	decfsz	9,f
  4809  024C  2A4B               	goto	u4977
  4810  024D  0BC4               	decfsz	??_main^(0+256),f
  4811  024E  2A4B               	goto	u4977
  4812  024F  0BC5               	decfsz	(??_main^(0+256)+1),f
  4813  0250  2A4B               	goto	u4977
  4814  0251  0000               	nop
  4815                           
  4816                           ;main.c: 149:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4817  0252  3015               	movlw	21
  4818  0253  0022               	movlb	2	; select bank2
  4819  0254  00C5               	movwf	(??_main^(0+256)+1)
  4820  0255  304B               	movlw	75
  4821  0256  00C4               	movwf	??_main^(0+256)
  4822  0257  30BE               	movlw	190
  4823  0258                     u4987:	
  4824  0258  0B89               	decfsz	9,f
  4825  0259  2A58               	goto	u4987
  4826  025A  0BC4               	decfsz	??_main^(0+256),f
  4827  025B  2A58               	goto	u4987
  4828  025C  0BC5               	decfsz	(??_main^(0+256)+1),f
  4829  025D  2A58               	goto	u4987
  4830  025E  0000               	nop
  4831                           
  4832                           ;main.c: 150:                         LED_PROCESS(last_touch_status.full_status);
  4833  025F  0020               	movlb	0	; select bank0
  4834  0260  085B               	movf	_last_touch_status,w
  4835  0261  318E  2622  3180   	fcall	_LED_PROCESS
  4836                           
  4837                           ;main.c: 151:                         check_request = 0;
  4838  0264  0020               	movlb	0	; select bank0
  4839  0265  01E4               	clrf	_check_request
  4840                           
  4841                           ;main.c: 152:                         config_status = 0;
  4842  0266  01E5               	clrf	_config_status
  4843  0267  0001               	reset	;# 
  4844                           
  4845                           ;main.c: 154:                     }
  4846  0268  287B               	goto	l6246
  4847  0269                     l6390:	
  4848                           
  4849                           ;main.c: 156:                     {;main.c: 157:                         blink_count++;
  4850  0269  3001               	movlw	1
  4851  026A  0022               	movlb	2	; select bank2
  4852  026B  00C4               	movwf	??_main^(0+256)
  4853  026C  0844               	movf	??_main^(0+256),w
  4854  026D  0020               	movlb	0	; select bank0
  4855  026E  07E2               	addwf	_blink_count,f
  4856                           
  4857                           ;main.c: 158:                         if(blink == 0)
  4858  026F  0863               	movf	_blink,w
  4859  0270  1D03               	btfss	3,2
  4860  0271  2A7F               	goto	l6400
  4861                           
  4862                           ;main.c: 159:                         {;main.c: 160:                             LED_PRO
      +                          CESS(0);
  4863  0272  3000               	movlw	0
  4864  0273  318E  2622  3180   	fcall	_LED_PROCESS
  4865                           
  4866                           ;main.c: 161:                             if(blink_count >= 200)
  4867  0276  30C8               	movlw	200
  4868  0277  0020               	movlb	0	; select bank0
  4869  0278  0262               	subwf	_blink_count,w
  4870  0279  1C03               	skipc
  4871  027A  287B               	goto	l6246
  4872                           
  4873                           ;main.c: 162:                             {;main.c: 163:                                
      +                           blink_count = 0;
  4874  027B  01E2               	clrf	_blink_count
  4875                           
  4876                           ;main.c: 164:                                 blink = 1;
  4877  027C  01E3               	clrf	_blink
  4878  027D  0AE3               	incf	_blink,f
  4879  027E  287B               	goto	l6246
  4880  027F                     l6400:	
  4881                           
  4882                           ;main.c: 168:                         {;main.c: 169:                             LED_PRO
      +                          CESS(15);
  4883  027F  300F               	movlw	15
  4884  0280  318E  2622  3180   	fcall	_LED_PROCESS
  4885                           
  4886                           ;main.c: 170:                             if(blink_count >= 200)
  4887  0283  30C8               	movlw	200
  4888  0284  0020               	movlb	0	; select bank0
  4889  0285  0262               	subwf	_blink_count,w
  4890  0286  1C03               	skipc
  4891  0287  287B               	goto	l6246
  4892                           
  4893                           ;main.c: 171:                             {;main.c: 172:                                
      +                           blink_count = 0;
  4894  0288  01E2               	clrf	_blink_count
  4895  0289                     L1:	
  4896                           
  4897                           ;main.c: 173:                                 blink = 0;
  4898  0289  01E3               	clrf	_blink
  4899  028A  287B               	goto	l6246
  4900  028B                     __end_of_main:	
  4901                           
  4902                           	psect	text1
  4903  0634                     __ptext1:	
  4904 ;; *************** function _update_state *****************
  4905 ;; Defined at:
  4906 ;;		line 209 in file "main.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;		None
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      void 
  4913 ;; Registers used:
  4914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4920 ;;      Params:         0       0       0       0       0       0       0       0
  4921 ;;      Locals:         0       0       0       0       0       0       0       0
  4922 ;;      Temps:          0       0       0       0       0       0       0       0
  4923 ;;      Totals:         0       0       0       0       0       0       0       0
  4924 ;;Total ram usage:        0 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:   13
  4927 ;; This function calls:
  4928 ;;		_printf
  4929 ;; This function is called by:
  4930 ;;		_main
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           
  4935                           ;psect for function _update_state
  4936  0634                     _update_state:	
  4937                           
  4938                           ;main.c: 211:     switch(last_touch_status.full_status)
  4939                           
  4940                           ;incstack = 0
  4941                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4942  0634  2EA5               	goto	l6206
  4943  0635                     l6172:	
  4944  0635  3014               	movlw	low (STR_3| (0+32768))
  4945  0636  00CA               	movwf	printf@fmt
  4946  0637  3098               	movlw	high (STR_3| (0+32768))
  4947  0638  00CB               	movwf	printf@fmt+1
  4948  0639  3195  250A         	fcall	_printf
  4949  063B  0008               	return
  4950  063C                     l6174:	
  4951  063C  3019               	movlw	low (STR_4| (0+32768))
  4952  063D  00CA               	movwf	printf@fmt
  4953  063E  3098               	movlw	high (STR_4| (0+32768))
  4954  063F  00CB               	movwf	printf@fmt+1
  4955  0640  3195  250A         	fcall	_printf
  4956  0642  0008               	return
  4957  0643                     l6176:	
  4958  0643  301E               	movlw	low (STR_5| (0+32768))
  4959  0644  00CA               	movwf	printf@fmt
  4960  0645  3098               	movlw	high (STR_5| (0+32768))
  4961  0646  00CB               	movwf	printf@fmt+1
  4962  0647  3195  250A         	fcall	_printf
  4963  0649  0008               	return
  4964  064A                     l6178:	
  4965  064A  3023               	movlw	low (STR_6| (0+32768))
  4966  064B  00CA               	movwf	printf@fmt
  4967  064C  3098               	movlw	high (STR_6| (0+32768))
  4968  064D  00CB               	movwf	printf@fmt+1
  4969  064E  3195  250A         	fcall	_printf
  4970  0650  0008               	return
  4971  0651                     l6180:	
  4972  0651  3028               	movlw	low (STR_7| (0+32768))
  4973  0652  00CA               	movwf	printf@fmt
  4974  0653  3098               	movlw	high (STR_7| (0+32768))
  4975  0654  00CB               	movwf	printf@fmt+1
  4976  0655  3195  250A         	fcall	_printf
  4977  0657  0008               	return
  4978  0658                     l6182:	
  4979  0658  302D               	movlw	low (STR_8| (0+32768))
  4980  0659  00CA               	movwf	printf@fmt
  4981  065A  3098               	movlw	high (STR_8| (0+32768))
  4982  065B  00CB               	movwf	printf@fmt+1
  4983  065C  3195  250A         	fcall	_printf
  4984  065E  0008               	return
  4985  065F                     l6184:	
  4986  065F  3032               	movlw	low (STR_9| (0+32768))
  4987  0660  00CA               	movwf	printf@fmt
  4988  0661  3098               	movlw	high (STR_9| (0+32768))
  4989  0662  00CB               	movwf	printf@fmt+1
  4990  0663  3195  250A         	fcall	_printf
  4991  0665  0008               	return
  4992  0666                     l6186:	
  4993  0666  3037               	movlw	low (STR_10| (0+32768))
  4994  0667  00CA               	movwf	printf@fmt
  4995  0668  3098               	movlw	high (STR_10| (0+32768))
  4996  0669  00CB               	movwf	printf@fmt+1
  4997  066A  3195  250A         	fcall	_printf
  4998  066C  0008               	return
  4999  066D                     l6188:	
  5000  066D  303C               	movlw	low (STR_11| (0+32768))
  5001  066E  00CA               	movwf	printf@fmt
  5002  066F  3098               	movlw	high (STR_11| (0+32768))
  5003  0670  00CB               	movwf	printf@fmt+1
  5004  0671  3195  250A         	fcall	_printf
  5005  0673  0008               	return
  5006  0674                     l6190:	
  5007  0674  3041               	movlw	low (STR_12| (0+32768))
  5008  0675  00CA               	movwf	printf@fmt
  5009  0676  3098               	movlw	high (STR_12| (0+32768))
  5010  0677  00CB               	movwf	printf@fmt+1
  5011  0678  3195  250A         	fcall	_printf
  5012  067A  0008               	return
  5013  067B                     l6192:	
  5014  067B  3046               	movlw	low (STR_13| (0+32768))
  5015  067C  00CA               	movwf	printf@fmt
  5016  067D  3098               	movlw	high (STR_13| (0+32768))
  5017  067E  00CB               	movwf	printf@fmt+1
  5018  067F  3195  250A         	fcall	_printf
  5019  0681  0008               	return
  5020  0682                     l6194:	
  5021  0682  304B               	movlw	low (STR_14| (0+32768))
  5022  0683  00CA               	movwf	printf@fmt
  5023  0684  3098               	movlw	high (STR_14| (0+32768))
  5024  0685  00CB               	movwf	printf@fmt+1
  5025  0686  3195  250A         	fcall	_printf
  5026  0688  0008               	return
  5027  0689                     l6196:	
  5028  0689  3050               	movlw	low (STR_15| (0+32768))
  5029  068A  00CA               	movwf	printf@fmt
  5030  068B  3098               	movlw	high (STR_15| (0+32768))
  5031  068C  00CB               	movwf	printf@fmt+1
  5032  068D  3195  250A         	fcall	_printf
  5033  068F  0008               	return
  5034  0690                     l6198:	
  5035  0690  3055               	movlw	low (STR_16| (0+32768))
  5036  0691  00CA               	movwf	printf@fmt
  5037  0692  3098               	movlw	high (STR_16| (0+32768))
  5038  0693  00CB               	movwf	printf@fmt+1
  5039  0694  3195  250A         	fcall	_printf
  5040  0696  0008               	return
  5041  0697                     l6200:	
  5042  0697  305A               	movlw	low (STR_17| (0+32768))
  5043  0698  00CA               	movwf	printf@fmt
  5044  0699  3098               	movlw	high (STR_17| (0+32768))
  5045  069A  00CB               	movwf	printf@fmt+1
  5046  069B  3195  250A         	fcall	_printf
  5047  069D  0008               	return
  5048  069E                     l6202:	
  5049  069E  305F               	movlw	low (STR_18| (0+32768))
  5050  069F  00CA               	movwf	printf@fmt
  5051  06A0  3098               	movlw	high (STR_18| (0+32768))
  5052  06A1  00CB               	movwf	printf@fmt+1
  5053  06A2  3195  250A         	fcall	_printf
  5054  06A4  0008               	return
  5055  06A5                     l6206:	
  5056                           
  5057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5058                           ; Switch size 1, requested type "simple"
  5059                           ; Number of cases is 1, Range of values is 0 to 0
  5060                           ; switch strategies available:
  5061                           ; Name         Instructions Cycles
  5062                           ; simple_byte            4     3 (average)
  5063                           ; direct_byte            8     6 (fixed)
  5064                           ; jumptable            260     6 (fixed)
  5065                           ;	Chosen strategy is simple_byte
  5066  06A5  0020               	movlb	0	; select bank0
  5067  06A6  085C               	movf	_last_touch_status+1,w
  5068  06A7  3A00               	xorlw	0	; case 0
  5069  06A8  1903               	skipnz
  5070  06A9  2EAB               	goto	l6576
  5071  06AA  2EDD               	goto	l879
  5072  06AB                     l6576:	
  5073                           
  5074                           ; Switch size 1, requested type "simple"
  5075                           ; Number of cases is 16, Range of values is 0 to 15
  5076                           ; switch strategies available:
  5077                           ; Name         Instructions Cycles
  5078                           ; direct_byte           38     6 (fixed)
  5079                           ; simple_byte           49    25 (average)
  5080                           ; jumptable            260     6 (fixed)
  5081                           ;	Chosen strategy is simple_byte
  5082  06AB  085B               	movf	_last_touch_status,w
  5083  06AC  3A00               	xorlw	0	; case 0
  5084  06AD  1903               	skipnz
  5085  06AE  2E35               	goto	l6172
  5086  06AF  3A01               	xorlw	1	; case 1
  5087  06B0  1903               	skipnz
  5088  06B1  2E3C               	goto	l6174
  5089  06B2  3A03               	xorlw	3	; case 2
  5090  06B3  1903               	skipnz
  5091  06B4  2E43               	goto	l6176
  5092  06B5  3A01               	xorlw	1	; case 3
  5093  06B6  1903               	skipnz
  5094  06B7  2E4A               	goto	l6178
  5095  06B8  3A07               	xorlw	7	; case 4
  5096  06B9  1903               	skipnz
  5097  06BA  2E51               	goto	l6180
  5098  06BB  3A01               	xorlw	1	; case 5
  5099  06BC  1903               	skipnz
  5100  06BD  2E58               	goto	l6182
  5101  06BE  3A03               	xorlw	3	; case 6
  5102  06BF  1903               	skipnz
  5103  06C0  2E5F               	goto	l6184
  5104  06C1  3A01               	xorlw	1	; case 7
  5105  06C2  1903               	skipnz
  5106  06C3  2E66               	goto	l6186
  5107  06C4  3A0F               	xorlw	15	; case 8
  5108  06C5  1903               	skipnz
  5109  06C6  2E6D               	goto	l6188
  5110  06C7  3A01               	xorlw	1	; case 9
  5111  06C8  1903               	skipnz
  5112  06C9  2E74               	goto	l6190
  5113  06CA  3A03               	xorlw	3	; case 10
  5114  06CB  1903               	skipnz
  5115  06CC  2E7B               	goto	l6192
  5116  06CD  3A01               	xorlw	1	; case 11
  5117  06CE  1903               	skipnz
  5118  06CF  2E82               	goto	l6194
  5119  06D0  3A07               	xorlw	7	; case 12
  5120  06D1  1903               	skipnz
  5121  06D2  2E89               	goto	l6196
  5122  06D3  3A01               	xorlw	1	; case 13
  5123  06D4  1903               	skipnz
  5124  06D5  2E90               	goto	l6198
  5125  06D6  3A03               	xorlw	3	; case 14
  5126  06D7  1903               	skipnz
  5127  06D8  2E97               	goto	l6200
  5128  06D9  3A01               	xorlw	1	; case 15
  5129  06DA  1903               	skipnz
  5130  06DB  2E9E               	goto	l6202
  5131  06DC  2EDD               	goto	l879
  5132  06DD                     l879:	
  5133  06DD  0008               	return
  5134  06DE                     __end_of_update_state:	
  5135                           
  5136                           	psect	text2
  5137  1701                     __ptext2:	
  5138 ;; *************** function _check_message *****************
  5139 ;; Defined at:
  5140 ;;		line 377 in file "main.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;  x               1    wreg     unsigned char 
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  x               1   52[BANK0 ] unsigned char 
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  1    wreg      void 
  5147 ;; Registers used:
  5148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5154 ;;      Params:         0       0       0       0       0       0       0       0
  5155 ;;      Locals:         0       1       0       0       0       0       0       0
  5156 ;;      Temps:          0       2       0       0       0       0       0       0
  5157 ;;      Totals:         0       3       0       0       0       0       0       0
  5158 ;;Total ram usage:        3 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:   13
  5161 ;; This function calls:
  5162 ;;		_printf
  5163 ;; This function is called by:
  5164 ;;		_main
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           
  5169                           ;psect for function _check_message
  5170  1701                     _check_message:	
  5171                           
  5172                           ;incstack = 0
  5173                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5174                           ;check_message@x stored from wreg
  5175  1701  0020               	movlb	0	; select bank0
  5176  1702  00D4               	movwf	check_message@x
  5177                           
  5178                           ;main.c: 377: void check_message(uint8_t x);main.c: 378: {;main.c: 379:     switch (x)
  5179  1703  2F17               	goto	l6224
  5180  1704                     l6214:	
  5181                           
  5182                           ;main.c: 382:         {;main.c: 383:             check_request = 0;
  5183  1704  01E4               	clrf	_check_request
  5184                           
  5185                           ;main.c: 384:             break;
  5186  1705  0008               	return
  5187  1706                     l6218:	
  5188                           
  5189                           ;main.c: 392:         {;main.c: 393:             printf("%c",x);
  5190  1706  3068               	movlw	low (STR_19| (0+32768))
  5191  1707  00CA               	movwf	printf@fmt
  5192  1708  3098               	movlw	high (STR_19| (0+32768))
  5193  1709  00CB               	movwf	printf@fmt+1
  5194  170A  0854               	movf	check_message@x,w
  5195  170B  00D2               	movwf	??_check_message
  5196  170C  01D3               	clrf	??_check_message+1
  5197  170D  0852               	movf	??_check_message,w
  5198  170E  00CC               	movwf	?_printf+2
  5199  170F  0853               	movf	??_check_message+1,w
  5200  1710  00CD               	movwf	?_printf+3
  5201  1711  3195  250A         	fcall	_printf
  5202                           
  5203                           ;main.c: 394:             check_request = 1;
  5204  1713  0020               	movlb	0	; select bank0
  5205  1714  01E4               	clrf	_check_request
  5206  1715  0AE4               	incf	_check_request,f
  5207                           
  5208                           ;main.c: 395:             break;
  5209  1716  0008               	return
  5210  1717                     l6224:	
  5211  1717  0854               	movf	check_message@x,w
  5212  1718  00D2               	movwf	??_check_message
  5213  1719  01D3               	clrf	??_check_message+1
  5214                           
  5215                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5216                           ; Switch size 1, requested type "simple"
  5217                           ; Number of cases is 1, Range of values is 0 to 0
  5218                           ; switch strategies available:
  5219                           ; Name         Instructions Cycles
  5220                           ; simple_byte            4     3 (average)
  5221                           ; direct_byte            8     6 (fixed)
  5222                           ; jumptable            260     6 (fixed)
  5223                           ;	Chosen strategy is simple_byte
  5224  171A  0853               	movf	??_check_message+1,w
  5225  171B  3A00               	xorlw	0	; case 0
  5226  171C  1903               	skipnz
  5227  171D  2F1F               	goto	l6578
  5228  171E  2F06               	goto	l6218
  5229  171F                     l6578:	
  5230                           
  5231                           ; Switch size 1, requested type "simple"
  5232                           ; Number of cases is 2, Range of values is 70 to 84
  5233                           ; switch strategies available:
  5234                           ; Name         Instructions Cycles
  5235                           ; simple_byte            7     4 (average)
  5236                           ; direct_byte           39     9 (fixed)
  5237                           ; jumptable            263     9 (fixed)
  5238                           ;	Chosen strategy is simple_byte
  5239  171F  0852               	movf	??_check_message,w
  5240  1720  3A46               	xorlw	70	; case 70
  5241  1721  1903               	skipnz
  5242  1722  2F04               	goto	l6214
  5243  1723  3A12               	xorlw	18	; case 84
  5244  1724  1903               	skipnz
  5245  1725  2F04               	goto	l6214
  5246  1726  2F06               	goto	l6218
  5247  1727  0008               	return
  5248  1728                     __end_of_check_message:	
  5249                           
  5250                           	psect	text3
  5251  150A                     __ptext3:	
  5252 ;; *************** function _printf *****************
  5253 ;; Defined at:
  5254 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;  fmt             2   42[BANK0 ] PTR const unsigned char 
  5257 ;;		 -> STR_19(3), STR_18(5), STR_17(5), STR_16(5), 
  5258 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_12(5), 
  5259 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  5260 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5261 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;  ret             2    0        int 
  5264 ;;  ap              1   49[BANK0 ] PTR void [1]
  5265 ;;		 -> ?_printf(2), 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  2   42[BANK0 ] int 
  5268 ;; Registers used:
  5269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5275 ;;      Params:         0       4       0       0       0       0       0       0
  5276 ;;      Locals:         0       3       0       0       0       0       0       0
  5277 ;;      Temps:          0       1       0       0       0       0       0       0
  5278 ;;      Totals:         0       8       0       0       0       0       0       0
  5279 ;;Total ram usage:        8 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:   12
  5282 ;; This function calls:
  5283 ;;		_vfprintf
  5284 ;; This function is called by:
  5285 ;;		_main
  5286 ;;		_update_state
  5287 ;;		_check_message
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           
  5292                           ;psect for function _printf
  5293  150A                     _printf:	
  5294                           
  5295                           ;incstack = 0
  5296                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5297  150A  304C               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5298  150B  0020               	movlb	0	; select bank0
  5299  150C  00CE               	movwf	??_printf
  5300  150D  084E               	movf	??_printf,w
  5301  150E  00D1               	movwf	printf@ap
  5302  150F  084B               	movf	printf@fmt+1,w
  5303  1510  00C3               	movwf	vfprintf@fmt+1
  5304  1511  084A               	movf	printf@fmt,w
  5305  1512  00C2               	movwf	vfprintf@fmt
  5306  1513  3051               	movlw	(low (printf@ap| 0))& (0+255)
  5307  1514  00CE               	movwf	??_printf
  5308  1515  084E               	movf	??_printf,w
  5309  1516  00C4               	movwf	vfprintf@ap
  5310  1517  3000               	movlw	0
  5311  1518  3188  203B         	fcall	_vfprintf
  5312  151A  0008               	return
  5313  151B                     __end_of_printf:	
  5314                           
  5315                           	psect	text4
  5316  083B                     __ptext4:	
  5317 ;; *************** function _vfprintf *****************
  5318 ;; Defined at:
  5319 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  fp              1    wreg     PTR struct _IO_FILE
  5322 ;;		 -> NULL(0), 
  5323 ;;  fmt             2   34[BANK0 ] PTR const unsigned char 
  5324 ;;		 -> STR_19(3), STR_18(5), STR_17(5), STR_16(5), 
  5325 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_12(5), 
  5326 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  5327 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5328 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5329 ;;  ap              1   36[BANK0 ] PTR PTR void 
  5330 ;;		 -> printf@ap(1), 
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;  fp              1   39[BANK0 ] PTR struct _IO_FILE
  5333 ;;		 -> NULL(0), 
  5334 ;;  cfmt            2   40[BANK0 ] PTR unsigned char 
  5335 ;;		 -> STR_19(3), STR_18(5), STR_17(5), STR_16(5), 
  5336 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_12(5), 
  5337 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  5338 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5339 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  2   34[BANK0 ] int 
  5342 ;; Registers used:
  5343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5349 ;;      Params:         0       3       0       0       0       0       0       0
  5350 ;;      Locals:         0       3       0       0       0       0       0       0
  5351 ;;      Temps:          0       2       0       0       0       0       0       0
  5352 ;;      Totals:         0       8       0       0       0       0       0       0
  5353 ;;Total ram usage:        8 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:   11
  5356 ;; This function calls:
  5357 ;;		_vfpfcnvrt
  5358 ;; This function is called by:
  5359 ;;		_printf
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           
  5364                           ;psect for function _vfprintf
  5365  083B                     _vfprintf:	
  5366                           
  5367                           ;incstack = 0
  5368                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5369                           ;vfprintf@fp stored from wreg
  5370  083B  0020               	movlb	0	; select bank0
  5371  083C  00C7               	movwf	vfprintf@fp
  5372                           
  5373                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  5374  083D  0843               	movf	vfprintf@fmt+1,w
  5375  083E  00C9               	movwf	vfprintf@cfmt+1
  5376  083F  0842               	movf	vfprintf@fmt,w
  5377  0840  00C8               	movwf	vfprintf@cfmt
  5378                           
  5379                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  5380  0841  0021               	movlb	1	; select bank1
  5381  0842  01B0               	clrf	_nout^(0+128)
  5382  0843  01B1               	clrf	(_nout+1)^(0+128)
  5383  0844                     l6096:	
  5384                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5385                           
  5386                           
  5387                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5388  0844  0020               	movlb	0	; select bank0
  5389  0845  0848               	movf	vfprintf@cfmt,w
  5390  0846  0084               	movwf	4
  5391  0847  0849               	movf	vfprintf@cfmt+1,w
  5392  0848  0085               	movwf	5
  5393  0849  0012               	moviw fsr0++
  5394  084A  1903               	btfsc	3,2
  5395  084B  2861               	goto	l6098
  5396                           
  5397                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  5398  084C  3048               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  5399  084D  00C5               	movwf	??_vfprintf
  5400  084E  0845               	movf	??_vfprintf,w
  5401  084F  00B9               	movwf	vfpfcnvrt@fmt
  5402  0850  0844               	movf	vfprintf@ap,w
  5403  0851  00C6               	movwf	??_vfprintf+1
  5404  0852  0846               	movf	??_vfprintf+1,w
  5405  0853  00BA               	movwf	vfpfcnvrt@ap
  5406  0854  0847               	movf	vfprintf@fp,w
  5407  0855  3186  26DE  3188   	fcall	_vfpfcnvrt
  5408  0858  0020               	movlb	0	; select bank0
  5409  0859  0839               	movf	?_vfpfcnvrt,w
  5410  085A  0021               	movlb	1	; select bank1
  5411  085B  07B0               	addwf	_nout^(0+128),f
  5412  085C  0020               	movlb	0	; select bank0
  5413  085D  083A               	movf	?_vfpfcnvrt+1,w
  5414  085E  0021               	movlb	1	; select bank1
  5415  085F  3DB1               	addwfc	(_nout+1)^(0+128),f
  5416  0860  2844               	goto	l6096
  5417  0861                     l6098:	
  5418                           
  5419                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  5420  0861  0021               	movlb	1	; select bank1
  5421  0862  0831               	movf	(_nout+1)^(0+128),w
  5422  0863  0020               	movlb	0	; select bank0
  5423  0864  00C3               	movwf	?_vfprintf+1
  5424  0865  0021               	movlb	1	; select bank1
  5425  0866  0830               	movf	_nout^(0+128),w
  5426  0867  0020               	movlb	0	; select bank0
  5427  0868  00C2               	movwf	?_vfprintf
  5428  0869  0008               	return
  5429  086A                     __end_of_vfprintf:	
  5430                           
  5431                           	psect	text5
  5432  06DE                     __ptext5:	
  5433 ;; *************** function _vfpfcnvrt *****************
  5434 ;; Defined at:
  5435 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  fp              1    wreg     PTR struct _IO_FILE
  5438 ;;		 -> NULL(0), 
  5439 ;;  fmt             1   25[BANK0 ] PTR PTR unsigned char 
  5440 ;;		 -> vfprintf@cfmt(2), 
  5441 ;;  ap              1   26[BANK0 ] PTR PTR void 
  5442 ;;		 -> printf@ap(1), 
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;  fp              1   33[BANK0 ] PTR struct _IO_FILE
  5445 ;;		 -> NULL(0), 
  5446 ;;  llu             8    0        unsigned long long 
  5447 ;;  ll              8    0        long long 
  5448 ;;  f               4    0        long long 
  5449 ;;  ct              3    0        unsigned char [3]
  5450 ;;  vp              2    0        PTR void 
  5451 ;;  i               2    0        int 
  5452 ;;  done            2    0        int 
  5453 ;;  cp              2    0        PTR unsigned char 
  5454 ;;  c               1   32[BANK0 ] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  2   25[BANK0 ] int 
  5457 ;; Registers used:
  5458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5464 ;;      Params:         0       2       0       0       0       0       0       0
  5465 ;;      Locals:         0       2       0       0       0       0       0       0
  5466 ;;      Temps:          0       5       0       0       0       0       0       0
  5467 ;;      Totals:         0       9       0       0       0       0       0       0
  5468 ;;Total ram usage:        9 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:   10
  5471 ;; This function calls:
  5472 ;;		_ctoa
  5473 ;;		_fputc
  5474 ;; This function is called by:
  5475 ;;		_vfprintf
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           
  5480                           ;psect for function _vfpfcnvrt
  5481  06DE                     _vfpfcnvrt:	
  5482                           
  5483                           ;incstack = 0
  5484                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5485                           ;vfpfcnvrt@fp stored from wreg
  5486  06DE  0020               	movlb	0	; select bank0
  5487  06DF  00C1               	movwf	vfpfcnvrt@fp
  5488                           
  5489                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  5490  06E0  0839               	movf	vfpfcnvrt@fmt,w
  5491  06E1  0086               	movwf	6
  5492  06E2  0187               	clrf	7
  5493  06E3  3F40               	moviw [0]fsr1
  5494  06E4  00BB               	movwf	??_vfpfcnvrt
  5495  06E5  3F41               	moviw [1]fsr1
  5496  06E6  00BC               	movwf	??_vfpfcnvrt+1
  5497  06E7  083B               	movf	??_vfpfcnvrt,w
  5498  06E8  0084               	movwf	4
  5499  06E9  083C               	movf	??_vfpfcnvrt+1,w
  5500  06EA  0085               	movwf	5
  5501  06EB  0012               	moviw fsr0++
  5502  06EC  3A25               	xorlw	37
  5503  06ED  1D03               	btfss	3,2
  5504  06EE  2F63               	goto	l6020
  5505                           
  5506                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  5507  06EF  0839               	movf	vfpfcnvrt@fmt,w
  5508  06F0  0086               	movwf	6
  5509  06F1  0187               	clrf	7
  5510  06F2  3001               	movlw	1
  5511  06F3  0781               	addwf	1,f
  5512  06F4  3141               	addfsr 1,1
  5513  06F5  1803               	skipnc
  5514  06F6  0A81               	incf	1,f
  5515                           
  5516                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  5517  06F7  01D9               	clrf	_width
  5518  06F8  01DA               	clrf	_width+1
  5519  06F9  0021               	movlb	1	; select bank1
  5520  06FA  01B4               	clrf	_flags^(0+128)
  5521  06FB  01B5               	clrf	(_flags+1)^(0+128)
  5522                           
  5523                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  5524  06FC  30FF               	movlw	255
  5525  06FD  00B2               	movwf	_prec^(0+128)
  5526  06FE  30FF               	movlw	255
  5527  06FF  00B3               	movwf	(_prec^(0+128)+1)
  5528                           
  5529                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  5530  0700  0020               	movlb	0	; select bank0
  5531  0701  0839               	movf	vfpfcnvrt@fmt,w
  5532  0702  0086               	movwf	6
  5533  0703  0187               	clrf	7
  5534  0704  3F40               	moviw [0]fsr1
  5535  0705  00BB               	movwf	??_vfpfcnvrt
  5536  0706  3F41               	moviw [1]fsr1
  5537  0707  00BC               	movwf	??_vfpfcnvrt+1
  5538  0708  083B               	movf	??_vfpfcnvrt,w
  5539  0709  0084               	movwf	4
  5540  070A  083C               	movf	??_vfpfcnvrt+1,w
  5541  070B  0085               	movwf	5
  5542  070C  0012               	moviw fsr0++
  5543  070D  3A63               	xorlw	99
  5544  070E  1D03               	btfss	3,2
  5545  070F  2F31               	goto	l6004
  5546                           
  5547                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  5548  0710  0839               	movf	vfpfcnvrt@fmt,w
  5549  0711  0086               	movwf	6
  5550  0712  0187               	clrf	7
  5551  0713  3001               	movlw	1
  5552  0714  0781               	addwf	1,f
  5553  0715  3141               	addfsr 1,1
  5554  0716  1803               	skipnc
  5555  0717  0A81               	incf	1,f
  5556                           
  5557                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5558  0718  083A               	movf	vfpfcnvrt@ap,w
  5559  0719  0086               	movwf	6
  5560  071A  0187               	clrf	7
  5561  071B  0801               	movf	1,w
  5562  071C  0084               	movwf	4
  5563  071D  0185               	clrf	5
  5564  071E  3002               	movlw	2
  5565  071F  0781               	addwf	1,f
  5566  0720  0800               	movf	0,w
  5567  0721  00BB               	movwf	??_vfpfcnvrt
  5568  0722  083B               	movf	??_vfpfcnvrt,w
  5569  0723  00C0               	movwf	vfpfcnvrt@c
  5570                           
  5571                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  5572  0724  0840               	movf	vfpfcnvrt@c,w
  5573  0725  00BB               	movwf	??_vfpfcnvrt
  5574  0726  083B               	movf	??_vfpfcnvrt,w
  5575  0727  00B3               	movwf	ctoa@c
  5576  0728  0841               	movf	vfpfcnvrt@fp,w
  5577  0729  3197  2750         	fcall	_ctoa
  5578  072B  0020               	movlb	0	; select bank0
  5579  072C  0834               	movf	?_ctoa+1,w
  5580  072D  00BA               	movwf	?_vfpfcnvrt+1
  5581  072E  0833               	movf	?_ctoa,w
  5582  072F  00B9               	movwf	?_vfpfcnvrt
  5583  0730  0008               	return
  5584  0731                     l6004:	
  5585                           
  5586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  5587  0731  0839               	movf	vfpfcnvrt@fmt,w
  5588  0732  0086               	movwf	6
  5589  0733  0187               	clrf	7
  5590  0734  3F40               	moviw [0]fsr1
  5591  0735  00BB               	movwf	??_vfpfcnvrt
  5592  0736  3F41               	moviw [1]fsr1
  5593  0737  00BC               	movwf	??_vfpfcnvrt+1
  5594  0738  083B               	movf	??_vfpfcnvrt,w
  5595  0739  0084               	movwf	4
  5596  073A  083C               	movf	??_vfpfcnvrt+1,w
  5597  073B  0085               	movwf	5
  5598  073C  0012               	moviw fsr0++
  5599  073D  3A25               	xorlw	37
  5600  073E  1D03               	btfss	3,2
  5601  073F  2F58               	goto	l6014
  5602                           
  5603                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  5604  0740  0839               	movf	vfpfcnvrt@fmt,w
  5605  0741  0086               	movwf	6
  5606  0742  0187               	clrf	7
  5607  0743  3001               	movlw	1
  5608  0744  0781               	addwf	1,f
  5609  0745  3141               	addfsr 1,1
  5610  0746  1803               	skipnc
  5611  0747  0A81               	incf	1,f
  5612                           
  5613                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  5614  0748  3025               	movlw	37
  5615  0749  00F4               	movwf	fputc@c
  5616  074A  3000               	movlw	0
  5617  074B  00F5               	movwf	fputc@c+1
  5618  074C  0841               	movf	vfpfcnvrt@fp,w
  5619  074D  00BB               	movwf	??_vfpfcnvrt
  5620  074E  083B               	movf	??_vfpfcnvrt,w
  5621  074F  00F6               	movwf	fputc@fp
  5622  0750  3188  20FE         	fcall	_fputc
  5623  0752                     l6010:	
  5624                           
  5625                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  5626  0752  3001               	movlw	1
  5627  0753  0020               	movlb	0	; select bank0
  5628  0754  00B9               	movwf	?_vfpfcnvrt
  5629  0755  3000               	movlw	0
  5630  0756  00BA               	movwf	?_vfpfcnvrt+1
  5631  0757  0008               	return
  5632  0758                     l6014:	
  5633                           
  5634                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  5635  0758  0839               	movf	vfpfcnvrt@fmt,w
  5636  0759  0086               	movwf	6
  5637  075A  0187               	clrf	7
  5638  075B  3001               	movlw	1
  5639  075C  0781               	addwf	1,f
  5640  075D  3141               	addfsr 1,1
  5641  075E  1803               	skipnc
  5642  075F  0A81               	incf	1,f
  5643                           
  5644                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  5645  0760  01B9               	clrf	?_vfpfcnvrt
  5646  0761  01BA               	clrf	?_vfpfcnvrt+1
  5647  0762  0008               	return
  5648  0763                     l6020:	
  5649                           
  5650                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  5651  0763  0839               	movf	vfpfcnvrt@fmt,w
  5652  0764  0086               	movwf	6
  5653  0765  0187               	clrf	7
  5654  0766  3F40               	moviw [0]fsr1
  5655  0767  00BB               	movwf	??_vfpfcnvrt
  5656  0768  3F41               	moviw [1]fsr1
  5657  0769  00BC               	movwf	??_vfpfcnvrt+1
  5658  076A  083B               	movf	??_vfpfcnvrt,w
  5659  076B  0084               	movwf	4
  5660  076C  083C               	movf	??_vfpfcnvrt+1,w
  5661  076D  0085               	movwf	5
  5662  076E  0800               	movf	0,w	;code access
  5663  076F  00BD               	movwf	??_vfpfcnvrt+2
  5664  0770  01BE               	clrf	??_vfpfcnvrt+3
  5665  0771  083D               	movf	??_vfpfcnvrt+2,w
  5666  0772  00F4               	movwf	fputc@c
  5667  0773  083E               	movf	??_vfpfcnvrt+3,w
  5668  0774  00F5               	movwf	fputc@c+1
  5669  0775  0841               	movf	vfpfcnvrt@fp,w
  5670  0776  00BF               	movwf	??_vfpfcnvrt+4
  5671  0777  083F               	movf	??_vfpfcnvrt+4,w
  5672  0778  00F6               	movwf	fputc@fp
  5673  0779  3188  20FE  3186   	fcall	_fputc
  5674                           
  5675                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  5676  077C  0020               	movlb	0	; select bank0
  5677  077D  0839               	movf	vfpfcnvrt@fmt,w
  5678  077E  0086               	movwf	6
  5679  077F  0187               	clrf	7
  5680  0780  3001               	movlw	1
  5681  0781  0781               	addwf	1,f
  5682  0782  3141               	addfsr 1,1
  5683  0783  1803               	skipnc
  5684  0784  0A81               	incf	1,f
  5685  0785  2F52               	goto	l6010
  5686  0786                     __end_of_vfpfcnvrt:	
  5687                           
  5688                           	psect	text6
  5689  1750                     __ptext6:	
  5690 ;; *************** function _ctoa *****************
  5691 ;; Defined at:
  5692 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  fp              1    wreg     PTR struct _IO_FILE
  5695 ;;		 -> NULL(0), 
  5696 ;;  c               1   19[BANK0 ] unsigned char 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  fp              1   24[BANK0 ] PTR struct _IO_FILE
  5699 ;;		 -> NULL(0), 
  5700 ;;  w               2   22[BANK0 ] int 
  5701 ;;  l               2    0        int 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  2   19[BANK0 ] int 
  5704 ;; Registers used:
  5705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5711 ;;      Params:         0       2       0       0       0       0       0       0
  5712 ;;      Locals:         0       3       0       0       0       0       0       0
  5713 ;;      Temps:          0       1       0       0       0       0       0       0
  5714 ;;      Totals:         0       6       0       0       0       0       0       0
  5715 ;;Total ram usage:        6 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    9
  5718 ;; This function calls:
  5719 ;;		_pad
  5720 ;; This function is called by:
  5721 ;;		_vfpfcnvrt
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           
  5726                           ;psect for function _ctoa
  5727  1750                     _ctoa:	
  5728                           
  5729                           ;incstack = 0
  5730                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5731                           ;ctoa@fp stored from wreg
  5732  1750  0020               	movlb	0	; select bank0
  5733  1751  00B8               	movwf	ctoa@fp
  5734                           
  5735                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  5736  1752  0859               	movf	_width,w
  5737  1753  045A               	iorwf	_width+1,w
  5738  1754  1D03               	btfss	3,2
  5739  1755  2F5B               	goto	l5834
  5740  1756  085A               	movf	_width+1,w
  5741  1757  00B7               	movwf	ctoa@w+1
  5742  1758  0859               	movf	_width,w
  5743  1759  00B6               	movwf	ctoa@w
  5744  175A  2F61               	goto	l5836
  5745  175B                     l5834:	
  5746  175B  0859               	movf	_width,w
  5747  175C  3EFF               	addlw	255
  5748  175D  00B6               	movwf	ctoa@w
  5749  175E  30FF               	movlw	255
  5750  175F  3D5A               	addwfc	_width+1,w
  5751  1760  00B7               	movwf	ctoa@w+1
  5752  1761                     l5836:	
  5753                           
  5754                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  5755  1761  0833               	movf	ctoa@c,w
  5756  1762  00B5               	movwf	??_ctoa
  5757  1763  0835               	movf	??_ctoa,w
  5758  1764  0021               	movlb	1	; select bank1
  5759  1765  00B8               	movwf	_dbuf^(0+128)
  5760                           
  5761                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  5762  1766  01B9               	clrf	(_dbuf^(0+128)+1)
  5763                           
  5764                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  5765  1767  30B8               	movlw	(low (_dbuf| 0))& (0+255)
  5766  1768  0020               	movlb	0	; select bank0
  5767  1769  00B5               	movwf	??_ctoa
  5768  176A  0835               	movf	??_ctoa,w
  5769  176B  00AA               	movwf	pad@buf
  5770  176C  0837               	movf	ctoa@w+1,w
  5771  176D  00AC               	movwf	pad@p+1
  5772  176E  0836               	movf	ctoa@w,w
  5773  176F  00AB               	movwf	pad@p
  5774  1770  0838               	movf	ctoa@fp,w
  5775  1771  318A  225B         	fcall	_pad
  5776  1773  0020               	movlb	0	; select bank0
  5777  1774  082B               	movf	?_pad+1,w
  5778  1775  00B4               	movwf	?_ctoa+1
  5779  1776  082A               	movf	?_pad,w
  5780  1777  00B3               	movwf	?_ctoa
  5781  1778  0008               	return
  5782  1779                     __end_of_ctoa:	
  5783                           
  5784                           	psect	text7
  5785  0A5B                     __ptext7:	
  5786 ;; *************** function _pad *****************
  5787 ;; Defined at:
  5788 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  fp              1    wreg     PTR struct _IO_FILE
  5791 ;;		 -> NULL(0), 
  5792 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  5793 ;;		 -> dbuf(32), 
  5794 ;;  p               2   11[BANK0 ] int 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  fp              1   18[BANK0 ] PTR struct _IO_FILE
  5797 ;;		 -> NULL(0), 
  5798 ;;  w               2   16[BANK0 ] int 
  5799 ;;  i               2   14[BANK0 ] int 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  2   10[BANK0 ] int 
  5802 ;; Registers used:
  5803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5809 ;;      Params:         0       3       0       0       0       0       0       0
  5810 ;;      Locals:         0       5       0       0       0       0       0       0
  5811 ;;      Temps:          0       1       0       0       0       0       0       0
  5812 ;;      Totals:         0       9       0       0       0       0       0       0
  5813 ;;Total ram usage:        9 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    8
  5816 ;; This function calls:
  5817 ;;		_fputc
  5818 ;;		_fputs
  5819 ;;		_strlen
  5820 ;; This function is called by:
  5821 ;;		_ctoa
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           
  5826                           ;psect for function _pad
  5827  0A5B                     _pad:	
  5828                           
  5829                           ;incstack = 0
  5830                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5831                           ;pad@fp stored from wreg
  5832  0A5B  0020               	movlb	0	; select bank0
  5833  0A5C  00B2               	movwf	pad@fp
  5834                           
  5835                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  5836  0A5D  0021               	movlb	1	; select bank1
  5837  0A5E  1C34               	btfss	_flags^(0+128),0
  5838  0A5F  2A69               	goto	l5728
  5839                           
  5840                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  5841  0A60  0020               	movlb	0	; select bank0
  5842  0A61  0832               	movf	pad@fp,w
  5843  0A62  00AD               	movwf	??_pad
  5844  0A63  082D               	movf	??_pad,w
  5845  0A64  00A5               	movwf	fputs@fp
  5846  0A65  082A               	movf	pad@buf,w
  5847  0A66  3196  26B5  318A   	fcall	_fputs
  5848  0A69                     l5728:	
  5849                           
  5850                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  5851  0A69  0020               	movlb	0	; select bank0
  5852  0A6A  1BAC               	btfsc	pad@p+1,7
  5853  0A6B  2A71               	goto	l5732
  5854  0A6C  082C               	movf	pad@p+1,w
  5855  0A6D  00B1               	movwf	pad@w+1
  5856  0A6E  082B               	movf	pad@p,w
  5857  0A6F  00B0               	movwf	pad@w
  5858  0A70  2A73               	goto	l1352
  5859  0A71                     l5732:	
  5860  0A71  01B0               	clrf	pad@w
  5861  0A72  01B1               	clrf	pad@w+1
  5862  0A73                     l1352:	
  5863                           
  5864                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  5865  0A73  01AE               	clrf	pad@i
  5866  0A74  01AF               	clrf	pad@i+1
  5867  0A75                     l5738:	
  5868                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5869                           
  5870                           
  5871                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5872  0A75  082F               	movf	pad@i+1,w
  5873  0A76  3A80               	xorlw	128
  5874  0A77  00AD               	movwf	??_pad
  5875  0A78  0831               	movf	pad@w+1,w
  5876  0A79  3A80               	xorlw	128
  5877  0A7A  022D               	subwf	??_pad,w
  5878  0A7B  1D03               	skipz
  5879  0A7C  2A7F               	goto	u4035
  5880  0A7D  0830               	movf	pad@w,w
  5881  0A7E  022E               	subwf	pad@i,w
  5882  0A7F                     u4035:	
  5883  0A7F  1803               	btfsc	3,0
  5884  0A80  2A93               	goto	l1355
  5885                           
  5886                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  5887  0A81  3020               	movlw	32
  5888  0A82  00F4               	movwf	fputc@c
  5889  0A83  3000               	movlw	0
  5890  0A84  00F5               	movwf	fputc@c+1
  5891  0A85  0020               	movlb	0	; select bank0
  5892  0A86  0832               	movf	pad@fp,w
  5893  0A87  00AD               	movwf	??_pad
  5894  0A88  082D               	movf	??_pad,w
  5895  0A89  00F6               	movwf	fputc@fp
  5896  0A8A  3188  20FE  318A   	fcall	_fputc
  5897                           
  5898                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  5899  0A8D  3001               	movlw	1
  5900  0A8E  0020               	movlb	0	; select bank0
  5901  0A8F  07AE               	addwf	pad@i,f
  5902  0A90  3000               	movlw	0
  5903  0A91  3DAF               	addwfc	pad@i+1,f
  5904  0A92  2A75               	goto	l5738
  5905  0A93                     l1355:	
  5906                           
  5907                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  5908  0A93  0021               	movlb	1	; select bank1
  5909  0A94  1834               	btfsc	_flags^(0+128),0
  5910  0A95  2A9F               	goto	l1356
  5911                           
  5912                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  5913  0A96  0020               	movlb	0	; select bank0
  5914  0A97  0832               	movf	pad@fp,w
  5915  0A98  00AD               	movwf	??_pad
  5916  0A99  082D               	movf	??_pad,w
  5917  0A9A  00A5               	movwf	fputs@fp
  5918  0A9B  082A               	movf	pad@buf,w
  5919  0A9C  3196  26B5  318A   	fcall	_fputs
  5920  0A9F                     l1356:	
  5921                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  5922                           
  5923                           
  5924                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  5925  0A9F  0020               	movlb	0	; select bank0
  5926  0AA0  082A               	movf	pad@buf,w
  5927  0AA1  3195  25C4         	fcall	_strlen
  5928  0AA3  0020               	movlb	0	; select bank0
  5929  0AA4  0830               	movf	pad@w,w
  5930  0AA5  0772               	addwf	?_strlen,w
  5931  0AA6  00AA               	movwf	?_pad
  5932  0AA7  0831               	movf	pad@w+1,w
  5933  0AA8  3D73               	addwfc	?_strlen+1,w
  5934  0AA9  00AB               	movwf	?_pad+1
  5935  0AAA  0008               	return
  5936  0AAB                     __end_of_pad:	
  5937                           
  5938                           	psect	text8
  5939  15C4                     __ptext8:	
  5940 ;; *************** function _strlen *****************
  5941 ;; Defined at:
  5942 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;  s               1    wreg     PTR const unsigned char 
  5945 ;;		 -> dbuf(32), 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  s               1    6[COMMON] PTR const unsigned char 
  5948 ;;		 -> dbuf(32), 
  5949 ;;  a               1    5[COMMON] PTR const unsigned char 
  5950 ;;		 -> dbuf(32), 
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  2    2[COMMON] unsigned int 
  5953 ;; Registers used:
  5954 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5960 ;;      Params:         2       0       0       0       0       0       0       0
  5961 ;;      Locals:         2       0       0       0       0       0       0       0
  5962 ;;      Temps:          1       0       0       0       0       0       0       0
  5963 ;;      Totals:         5       0       0       0       0       0       0       0
  5964 ;;Total ram usage:        5 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    4
  5967 ;; This function calls:
  5968 ;;		Nothing
  5969 ;; This function is called by:
  5970 ;;		_pad
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           
  5975                           ;psect for function _strlen
  5976  15C4                     _strlen:	
  5977                           
  5978                           ;incstack = 0
  5979                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5980                           ;strlen@s stored from wreg
  5981  15C4  00F6               	movwf	strlen@s
  5982  15C5  0876               	movf	strlen@s,w
  5983  15C6  00F4               	movwf	??_strlen
  5984  15C7  0874               	movf	??_strlen,w
  5985  15C8  00F5               	movwf	strlen@a
  5986  15C9                     l3794:	
  5987  15C9  0876               	movf	strlen@s,w
  5988  15CA  0086               	movwf	6
  5989  15CB  0187               	clrf	7
  5990  15CC  0801               	movf	1,w
  5991  15CD  1903               	btfsc	3,2
  5992  15CE  2DD4               	goto	l3796
  5993  15CF  3001               	movlw	1
  5994  15D0  00F4               	movwf	??_strlen
  5995  15D1  0874               	movf	??_strlen,w
  5996  15D2  07F6               	addwf	strlen@s,f
  5997  15D3  2DC9               	goto	l3794
  5998  15D4                     l3796:	
  5999  15D4  0875               	movf	strlen@a,w
  6000  15D5  0276               	subwf	strlen@s,w
  6001  15D6  00F2               	movwf	?_strlen
  6002  15D7  01F3               	clrf	?_strlen+1
  6003  15D8  1BF2               	btfsc	?_strlen,7
  6004  15D9  03F3               	decf	?_strlen+1,f
  6005  15DA  0008               	return
  6006  15DB                     __end_of_strlen:	
  6007                           
  6008                           	psect	text9
  6009  16B5                     __ptext9:	
  6010 ;; *************** function _fputs *****************
  6011 ;; Defined at:
  6012 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  s               1    wreg     PTR const unsigned char 
  6015 ;;		 -> dbuf(32), 
  6016 ;;  fp              1    5[BANK0 ] PTR struct _IO_FILE
  6017 ;;		 -> NULL(0), 
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;  s               1    9[BANK0 ] PTR const unsigned char 
  6020 ;;		 -> dbuf(32), 
  6021 ;;  i               2    7[BANK0 ] int 
  6022 ;;  c               1    6[BANK0 ] unsigned char 
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  2    5[BANK0 ] int 
  6025 ;; Registers used:
  6026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6032 ;;      Params:         0       1       0       0       0       0       0       0
  6033 ;;      Locals:         0       4       0       0       0       0       0       0
  6034 ;;      Temps:          3       0       0       0       0       0       0       0
  6035 ;;      Totals:         3       5       0       0       0       0       0       0
  6036 ;;Total ram usage:        8 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    7
  6039 ;; This function calls:
  6040 ;;		_fputc
  6041 ;; This function is called by:
  6042 ;;		_pad
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           
  6047                           ;psect for function _fputs
  6048  16B5                     _fputs:	
  6049                           
  6050                           ;incstack = 0
  6051                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6052                           ;fputs@s stored from wreg
  6053  16B5  0020               	movlb	0	; select bank0
  6054  16B6  00A9               	movwf	fputs@s
  6055  16B7  01A7               	clrf	fputs@i
  6056  16B8  01A8               	clrf	fputs@i+1
  6057  16B9                     l5496:	
  6058  16B9  0827               	movf	fputs@i,w
  6059  16BA  0729               	addwf	fputs@s,w
  6060  16BB  00F7               	movwf	??_fputs
  6061  16BC  0877               	movf	??_fputs,w
  6062  16BD  0086               	movwf	6
  6063  16BE  0187               	clrf	7
  6064  16BF  0801               	movf	1,w
  6065  16C0  00F8               	movwf	??_fputs+1
  6066  16C1  0878               	movf	??_fputs+1,w
  6067  16C2  00A6               	movwf	fputs@c
  6068  16C3  0826               	movf	fputs@c,w
  6069  16C4  1903               	btfsc	3,2
  6070  16C5  0008               	return
  6071  16C6  0826               	movf	fputs@c,w
  6072  16C7  00F7               	movwf	??_fputs
  6073  16C8  01F8               	clrf	??_fputs+1
  6074  16C9  0877               	movf	??_fputs,w
  6075  16CA  00F4               	movwf	fputc@c
  6076  16CB  0878               	movf	??_fputs+1,w
  6077  16CC  00F5               	movwf	fputc@c+1
  6078  16CD  0825               	movf	fputs@fp,w
  6079  16CE  00F9               	movwf	??_fputs+2
  6080  16CF  0879               	movf	??_fputs+2,w
  6081  16D0  00F6               	movwf	fputc@fp
  6082  16D1  3188  20FE  3196   	fcall	_fputc
  6083  16D4  3001               	movlw	1
  6084  16D5  0020               	movlb	0	; select bank0
  6085  16D6  07A7               	addwf	fputs@i,f
  6086  16D7  3000               	movlw	0
  6087  16D8  3DA8               	addwfc	fputs@i+1,f
  6088  16D9  2EB9               	goto	l5496
  6089  16DA                     __end_of_fputs:	
  6090                           
  6091                           	psect	text10
  6092  08FE                     __ptext10:	
  6093 ;; *************** function _fputc *****************
  6094 ;; Defined at:
  6095 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  c               2    4[COMMON] int 
  6098 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
  6099 ;;		 -> NULL(0), 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;		None
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  2    4[COMMON] int 
  6104 ;; Registers used:
  6105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6111 ;;      Params:         3       0       0       0       0       0       0       0
  6112 ;;      Locals:         0       0       0       0       0       0       0       0
  6113 ;;      Temps:          0       5       0       0       0       0       0       0
  6114 ;;      Totals:         3       5       0       0       0       0       0       0
  6115 ;;Total ram usage:        8 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    6
  6118 ;; This function calls:
  6119 ;;		_putch
  6120 ;; This function is called by:
  6121 ;;		_pad
  6122 ;;		_vfpfcnvrt
  6123 ;;		_fputs
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           
  6128                           ;psect for function _fputc
  6129  08FE                     _fputc:	
  6130                           
  6131                           ;incstack = 0
  6132                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6133  08FE  0876               	movf	fputc@fp,w
  6134  08FF  1D03               	btfss	3,2
  6135  0900  0876               	movf	fputc@fp,w
  6136  0901  1D03               	btfss	3,2
  6137  0902  2907               	goto	l5416
  6138  0903  0874               	movf	fputc@c,w
  6139  0904  3193  237C         	fcall	_putch
  6140  0906  0008               	return
  6141  0907                     l5416:	
  6142  0907  0876               	movf	fputc@fp,w
  6143  0908  3E03               	addlw	3
  6144  0909  0086               	movwf	6
  6145  090A  0187               	clrf	7
  6146  090B  0016               	moviw fsr1++
  6147  090C  0401               	iorwf	1,w
  6148  090D  1903               	btfsc	3,2
  6149  090E  292B               	goto	l5420
  6150  090F  0876               	movf	fputc@fp,w
  6151  0910  3E03               	addlw	3
  6152  0911  0086               	movwf	6
  6153  0912  0187               	clrf	7
  6154  0913  3F40               	moviw [0]fsr1
  6155  0914  0020               	movlb	0	; select bank0
  6156  0915  00A0               	movwf	??_fputc
  6157  0916  3F41               	moviw [1]fsr1
  6158  0917  00A1               	movwf	??_fputc+1
  6159  0918  0A76               	incf	fputc@fp,w
  6160  0919  0086               	movwf	6
  6161  091A  0187               	clrf	7
  6162  091B  3F40               	moviw [0]fsr1
  6163  091C  00A2               	movwf	??_fputc+2
  6164  091D  3F41               	moviw [1]fsr1
  6165  091E  00A3               	movwf	??_fputc+3
  6166  091F  0823               	movf	??_fputc+3,w
  6167  0920  3A80               	xorlw	128
  6168  0921  00A4               	movwf	??_fputc+4
  6169  0922  0821               	movf	??_fputc+1,w
  6170  0923  3A80               	xorlw	128
  6171  0924  0224               	subwf	??_fputc+4,w
  6172  0925  1D03               	skipz
  6173  0926  2929               	goto	u3505
  6174  0927  0820               	movf	??_fputc,w
  6175  0928  0222               	subwf	??_fputc+2,w
  6176  0929                     u3505:	
  6177  0929  1803               	skipnc
  6178  092A  0008               	return
  6179  092B                     l5420:	
  6180  092B  0A76               	incf	fputc@fp,w
  6181  092C  0086               	movwf	6
  6182  092D  0187               	clrf	7
  6183  092E  3001               	movlw	1
  6184  092F  0781               	addwf	1,f
  6185  0930  3141               	addfsr 1,1
  6186  0931  1803               	skipnc
  6187  0932  0A81               	incf	1,f
  6188  0933  0008               	return
  6189  0934                     __end_of_fputc:	
  6190                           
  6191                           	psect	text11
  6192  137C                     __ptext11:	
  6193 ;; *************** function _putch *****************
  6194 ;; Defined at:
  6195 ;;		line 158 in file "mcc_generated_files/eusart.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;  txData          1    wreg     unsigned char 
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;  txData          1    3[COMMON] unsigned char 
  6200 ;; Return value:  Size  Location     Type
  6201 ;;                  1    wreg      void 
  6202 ;; Registers used:
  6203 ;;		wreg, status,2, status,0, pclath, cstack
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6209 ;;      Params:         0       0       0       0       0       0       0       0
  6210 ;;      Locals:         1       0       0       0       0       0       0       0
  6211 ;;      Temps:          0       0       0       0       0       0       0       0
  6212 ;;      Totals:         1       0       0       0       0       0       0       0
  6213 ;;Total ram usage:        1 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    5
  6216 ;; This function calls:
  6217 ;;		_EUSART_Write
  6218 ;; This function is called by:
  6219 ;;		_fputc
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           
  6224                           ;psect for function _putch
  6225  137C                     _putch:	
  6226                           
  6227                           ;incstack = 0
  6228                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  6229                           ;putch@txData stored from wreg
  6230  137C  00F3               	movwf	putch@txData
  6231                           
  6232                           ;mcc_generated_files/eusart.c: 158: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 159: {;mcc_generated_files/eusart.c: 160:     EUSART_Write(txData);
  6233  137D  0873               	movf	putch@txData,w
  6234  137E  3187  27F8         	fcall	_EUSART_Write
  6235  1380  0008               	return
  6236  1381                     __end_of_putch:	
  6237                           
  6238                           	psect	text12
  6239  07F8                     __ptext12:	
  6240 ;; *************** function _EUSART_Write *****************
  6241 ;; Defined at:
  6242 ;;		line 148 in file "mcc_generated_files/eusart.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  txData          1    wreg     unsigned char 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  txData          1    2[COMMON] unsigned char 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  1    wreg      void 
  6249 ;; Registers used:
  6250 ;;		wreg
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6256 ;;      Params:         0       0       0       0       0       0       0       0
  6257 ;;      Locals:         1       0       0       0       0       0       0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0       0
  6259 ;;      Totals:         1       0       0       0       0       0       0       0
  6260 ;;Total ram usage:        1 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    4
  6263 ;; This function calls:
  6264 ;;		Nothing
  6265 ;; This function is called by:
  6266 ;;		_putch
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           
  6271                           ;psect for function _EUSART_Write
  6272  07F8                     _EUSART_Write:	
  6273                           
  6274                           ;incstack = 0
  6275                           ; Regs used in _EUSART_Write: [wreg]
  6276                           ;EUSART_Write@txData stored from wreg
  6277  07F8  00F2               	movwf	EUSART_Write@txData
  6278  07F9                     l568:	
  6279                           ;mcc_generated_files/eusart.c: 151:     {;mcc_generated_files/eusart.c: 152:     }
  6280                           
  6281                           
  6282                           ;mcc_generated_files/eusart.c: 150:     while(0 == PIR1bits.TXIF)
  6283  07F9  0020               	movlb	0	; select bank0
  6284  07FA  1E11               	btfss	17,4	;volatile
  6285  07FB  2FF9               	goto	l568
  6286                           
  6287                           ;mcc_generated_files/eusart.c: 154:     TXREG = txData;
  6288  07FC  0872               	movf	EUSART_Write@txData,w
  6289  07FD  0023               	movlb	3	; select bank3
  6290  07FE  009A               	movwf	26	;volatile
  6291  07FF  0008               	return
  6292  0800                     __end_of_EUSART_Write:	
  6293                           
  6294                           	psect	text13
  6295  0971                     __ptext13:	
  6296 ;; *************** function _check_data *****************
  6297 ;; Defined at:
  6298 ;;		line 399 in file "main.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;  x               1    wreg     unsigned char 
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;  x               1    4[COMMON] unsigned char 
  6303 ;; Return value:  Size  Location     Type
  6304 ;;                  1    wreg      _Bool 
  6305 ;; Registers used:
  6306 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6312 ;;      Params:         0       0       0       0       0       0       0       0
  6313 ;;      Locals:         1       0       0       0       0       0       0       0
  6314 ;;      Temps:          2       0       0       0       0       0       0       0
  6315 ;;      Totals:         3       0       0       0       0       0       0       0
  6316 ;;Total ram usage:        3 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    4
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_main
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           
  6327                           ;psect for function _check_data
  6328  0971                     _check_data:	
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  6332                           ;check_data@x stored from wreg
  6333  0971  00F4               	movwf	check_data@x
  6334                           
  6335                           ;main.c: 399: _Bool check_data(uint8_t x);main.c: 400: {;main.c: 401:     switch(x)
  6336  0972  2977               	goto	l4878
  6337  0973                     l4796:	
  6338  0973  3001               	movlw	1
  6339  0974  0008               	return
  6340  0975                     l4872:	
  6341  0975  3000               	movlw	0
  6342  0976  0008               	return
  6343  0977                     l4878:	
  6344  0977  0874               	movf	check_data@x,w
  6345  0978  00F2               	movwf	??_check_data
  6346  0979  01F3               	clrf	??_check_data+1
  6347                           
  6348                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6349                           ; Switch size 1, requested type "simple"
  6350                           ; Number of cases is 1, Range of values is 0 to 0
  6351                           ; switch strategies available:
  6352                           ; Name         Instructions Cycles
  6353                           ; simple_byte            4     3 (average)
  6354                           ; direct_byte            8     6 (fixed)
  6355                           ; jumptable            260     6 (fixed)
  6356                           ;	Chosen strategy is simple_byte
  6357  097A  0873               	movf	??_check_data+1,w
  6358  097B  3A00               	xorlw	0	; case 0
  6359  097C  1903               	skipnz
  6360  097D  297F               	goto	l6580
  6361  097E  2975               	goto	l4872
  6362  097F                     l6580:	
  6363                           
  6364                           ; Switch size 1, requested type "simple"
  6365                           ; Number of cases is 19, Range of values is 48 to 85
  6366                           ; switch strategies available:
  6367                           ; Name         Instructions Cycles
  6368                           ; simple_byte           58    30 (average)
  6369                           ; direct_byte           85     9 (fixed)
  6370                           ; jumptable            263     9 (fixed)
  6371                           ;	Chosen strategy is simple_byte
  6372  097F  0872               	movf	??_check_data,w
  6373  0980  3A30               	xorlw	48	; case 48
  6374  0981  1903               	skipnz
  6375  0982  2973               	goto	l4796
  6376  0983  3A01               	xorlw	1	; case 49
  6377  0984  1903               	skipnz
  6378  0985  2973               	goto	l4796
  6379  0986  3A03               	xorlw	3	; case 50
  6380  0987  1903               	skipnz
  6381  0988  2973               	goto	l4796
  6382  0989  3A01               	xorlw	1	; case 51
  6383  098A  1903               	skipnz
  6384  098B  2973               	goto	l4796
  6385  098C  3A07               	xorlw	7	; case 52
  6386  098D  1903               	skipnz
  6387  098E  2973               	goto	l4796
  6388  098F  3A01               	xorlw	1	; case 53
  6389  0990  1903               	skipnz
  6390  0991  2973               	goto	l4796
  6391  0992  3A03               	xorlw	3	; case 54
  6392  0993  1903               	skipnz
  6393  0994  2973               	goto	l4796
  6394  0995  3A01               	xorlw	1	; case 55
  6395  0996  1903               	skipnz
  6396  0997  2973               	goto	l4796
  6397  0998  3A0F               	xorlw	15	; case 56
  6398  0999  1903               	skipnz
  6399  099A  2973               	goto	l4796
  6400  099B  3A01               	xorlw	1	; case 57
  6401  099C  1903               	skipnz
  6402  099D  2973               	goto	l4796
  6403  099E  3A78               	xorlw	120	; case 65
  6404  099F  1903               	skipnz
  6405  09A0  2973               	goto	l4796
  6406  09A1  3A03               	xorlw	3	; case 66
  6407  09A2  1903               	skipnz
  6408  09A3  2973               	goto	l4796
  6409  09A4  3A01               	xorlw	1	; case 67
  6410  09A5  1903               	skipnz
  6411  09A6  2973               	goto	l4796
  6412  09A7  3A07               	xorlw	7	; case 68
  6413  09A8  1903               	skipnz
  6414  09A9  2973               	goto	l4796
  6415  09AA  3A01               	xorlw	1	; case 69
  6416  09AB  1903               	skipnz
  6417  09AC  2973               	goto	l4796
  6418  09AD  3A03               	xorlw	3	; case 70
  6419  09AE  1903               	skipnz
  6420  09AF  2973               	goto	l4796
  6421  09B0  3A01               	xorlw	1	; case 71
  6422  09B1  1903               	skipnz
  6423  09B2  2973               	goto	l4796
  6424  09B3  3A13               	xorlw	19	; case 84
  6425  09B4  1903               	skipnz
  6426  09B5  2973               	goto	l4796
  6427  09B6  3A01               	xorlw	1	; case 85
  6428  09B7  1903               	skipnz
  6429  09B8  2973               	goto	l4796
  6430  09B9  2975               	goto	l4872
  6431  09BA  0008               	return
  6432  09BB                     __end_of_check_data:	
  6433                           
  6434                           	psect	text14
  6435  156B                     __ptext14:	
  6436 ;; *************** function _SYSTEM_Initialize *****************
  6437 ;; Defined at:
  6438 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      void 
  6445 ;; Registers used:
  6446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6452 ;;      Params:         0       0       0       0       0       0       0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0
  6455 ;;      Totals:         0       0       0       0       0       0       0       0
  6456 ;;Total ram usage:        0 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    9
  6459 ;; This function calls:
  6460 ;;		_EUSART_Initialize
  6461 ;;		_MTOUCH_Initialize
  6462 ;;		_OSCILLATOR_Initialize
  6463 ;;		_PIN_MANAGER_Initialize
  6464 ;;		_TMR1_Initialize
  6465 ;;		_TMR2_Initialize
  6466 ;;		_WDT_Initialize
  6467 ;; This function is called by:
  6468 ;;		_main
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           
  6473                           ;psect for function _SYSTEM_Initialize
  6474  156B                     _SYSTEM_Initialize:	
  6475                           
  6476                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6477                           
  6478                           ;incstack = 0
  6479                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6480  156B  3196  262F  3195   	fcall	_PIN_MANAGER_Initialize
  6481                           
  6482                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6483  156E  3193  23AB  3195   	fcall	_OSCILLATOR_Initialize
  6484                           
  6485                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6486  1571  3193  2373  3195   	fcall	_WDT_Initialize
  6487                           
  6488                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  6489  1574  3193  23DD  3195   	fcall	_TMR2_Initialize
  6490                           
  6491                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  6492  1577  3195  25DB  3195   	fcall	_TMR1_Initialize
  6493                           
  6494                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  6495  157A  3188  206A  3195   	fcall	_EUSART_Initialize
  6496                           
  6497                           ;mcc_generated_files/mcc.c: 59:     MTOUCH_Initialize();
  6498  157D  3195  252E         	fcall	_MTOUCH_Initialize
  6499  157F  0008               	return
  6500  1580                     __end_of_SYSTEM_Initialize:	
  6501                           
  6502                           	psect	text15
  6503  1373                     __ptext15:	
  6504 ;; *************** function _WDT_Initialize *****************
  6505 ;; Defined at:
  6506 ;;		line 70 in file "mcc_generated_files/mcc.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;		None
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;		None
  6511 ;; Return value:  Size  Location     Type
  6512 ;;                  1    wreg      void 
  6513 ;; Registers used:
  6514 ;;		wreg
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6520 ;;      Params:         0       0       0       0       0       0       0       0
  6521 ;;      Locals:         0       0       0       0       0       0       0       0
  6522 ;;      Temps:          0       0       0       0       0       0       0       0
  6523 ;;      Totals:         0       0       0       0       0       0       0       0
  6524 ;;Total ram usage:        0 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    4
  6527 ;; This function calls:
  6528 ;;		Nothing
  6529 ;; This function is called by:
  6530 ;;		_SYSTEM_Initialize
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function _WDT_Initialize
  6536  1373                     _WDT_Initialize:	
  6537                           
  6538                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  6539                           
  6540                           ;incstack = 0
  6541                           ; Regs used in _WDT_Initialize: [wreg]
  6542  1373  3016               	movlw	22
  6543  1374  0021               	movlb	1	; select bank1
  6544  1375  0097               	movwf	23	;volatile
  6545  1376  0008               	return
  6546  1377                     __end_of_WDT_Initialize:	
  6547                           
  6548                           	psect	text16
  6549  13DD                     __ptext16:	
  6550 ;; *************** function _TMR2_Initialize *****************
  6551 ;; Defined at:
  6552 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;		None
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;		None
  6557 ;; Return value:  Size  Location     Type
  6558 ;;                  1    wreg      void 
  6559 ;; Registers used:
  6560 ;;		wreg, status,2
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6566 ;;      Params:         0       0       0       0       0       0       0       0
  6567 ;;      Locals:         0       0       0       0       0       0       0       0
  6568 ;;      Temps:          0       0       0       0       0       0       0       0
  6569 ;;      Totals:         0       0       0       0       0       0       0       0
  6570 ;;Total ram usage:        0 bytes
  6571 ;; Hardware stack levels used:    1
  6572 ;; Hardware stack levels required when called:    4
  6573 ;; This function calls:
  6574 ;;		Nothing
  6575 ;; This function is called by:
  6576 ;;		_SYSTEM_Initialize
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _TMR2_Initialize
  6582  13DD                     _TMR2_Initialize:	
  6583                           
  6584                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  6585                           
  6586                           ;incstack = 0
  6587                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6588  13DD  30FF               	movlw	255
  6589  13DE  0020               	movlb	0	; select bank0
  6590  13DF  009B               	movwf	27	;volatile
  6591                           
  6592                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  6593  13E0  019A               	clrf	26	;volatile
  6594                           
  6595                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  6596  13E1  1091               	bcf	17,1	;volatile
  6597                           
  6598                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  6599  13E2  3004               	movlw	4
  6600  13E3  009C               	movwf	28	;volatile
  6601  13E4  0008               	return
  6602  13E5                     __end_of_TMR2_Initialize:	
  6603                           
  6604                           	psect	text17
  6605  15DB                     __ptext17:	
  6606 ;; *************** function _TMR1_Initialize *****************
  6607 ;; Defined at:
  6608 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;		None
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;		None
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  1    wreg      void 
  6615 ;; Registers used:
  6616 ;;		wreg, status,2, status,0, pclath, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6622 ;;      Params:         0       0       0       0       0       0       0       0
  6623 ;;      Locals:         0       0       0       0       0       0       0       0
  6624 ;;      Temps:          0       0       0       0       0       0       0       0
  6625 ;;      Totals:         0       0       0       0       0       0       0       0
  6626 ;;Total ram usage:        0 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; Hardware stack levels required when called:    5
  6629 ;; This function calls:
  6630 ;;		_TMR1_SetInterruptHandler
  6631 ;; This function is called by:
  6632 ;;		_SYSTEM_Initialize
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           
  6637                           ;psect for function _TMR1_Initialize
  6638  15DB                     _TMR1_Initialize:	
  6639                           
  6640                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  6641                           
  6642                           ;incstack = 0
  6643                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6644  15DB  0020               	movlb	0	; select bank0
  6645  15DC  0199               	clrf	25	;volatile
  6646                           
  6647                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xE0;
  6648  15DD  30E0               	movlw	224
  6649  15DE  0097               	movwf	23	;volatile
  6650                           
  6651                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xC0;
  6652  15DF  30C0               	movlw	192
  6653  15E0  0096               	movwf	22	;volatile
  6654                           
  6655                           ;mcc_generated_files/tmr1.c: 78:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  6656  15E1  0817               	movf	23,w	;volatile
  6657  15E2  0021               	movlb	1	; select bank1
  6658  15E3  00DB               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
  6659  15E4  0020               	movlb	0	; select bank0
  6660  15E5  0816               	movf	22,w	;volatile
  6661  15E6  0021               	movlb	1	; select bank1
  6662  15E7  00DA               	movwf	_timer1ReloadVal^(0+128)	;volatile
  6663                           
  6664                           ;mcc_generated_files/tmr1.c: 81:     PIR1bits.TMR1IF = 0;
  6665  15E8  0020               	movlb	0	; select bank0
  6666  15E9  1011               	bcf	17,0	;volatile
  6667                           
  6668                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  6669  15EA  0021               	movlb	1	; select bank1
  6670  15EB  1411               	bsf	17,0	;volatile
  6671                           
  6672                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  6673  15EC  305A               	movlw	low _TMR1_DefaultInterruptHandler
  6674  15ED  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6675  15EE  3013               	movlw	high _TMR1_DefaultInterruptHandler
  6676  15EF  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6677  15F0  3193  23A5         	fcall	_TMR1_SetInterruptHandler
  6678                           
  6679                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x05;
  6680  15F2  3005               	movlw	5
  6681  15F3  0020               	movlb	0	; select bank0
  6682  15F4  0098               	movwf	24	;volatile
  6683  15F5  0008               	return
  6684  15F6                     __end_of_TMR1_Initialize:	
  6685                           
  6686                           	psect	text18
  6687  162F                     __ptext18:	
  6688 ;; *************** function _PIN_MANAGER_Initialize *****************
  6689 ;; Defined at:
  6690 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;		None
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;		None
  6695 ;; Return value:  Size  Location     Type
  6696 ;;                  1    wreg      void 
  6697 ;; Registers used:
  6698 ;;		wreg, status,2
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/0
  6701 ;;		On exit  : 0/0
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6704 ;;      Params:         0       0       0       0       0       0       0       0
  6705 ;;      Locals:         0       0       0       0       0       0       0       0
  6706 ;;      Temps:          0       0       0       0       0       0       0       0
  6707 ;;      Totals:         0       0       0       0       0       0       0       0
  6708 ;;Total ram usage:        0 bytes
  6709 ;; Hardware stack levels used:    1
  6710 ;; Hardware stack levels required when called:    4
  6711 ;; This function calls:
  6712 ;;		Nothing
  6713 ;; This function is called by:
  6714 ;;		_SYSTEM_Initialize
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           
  6719                           ;psect for function _PIN_MANAGER_Initialize
  6720  162F                     _PIN_MANAGER_Initialize:	
  6721                           
  6722                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  6723                           
  6724                           ;incstack = 0
  6725                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6726  162F  3037               	movlw	55
  6727  1630  0022               	movlb	2	; select bank2
  6728  1631  008C               	movwf	12	;volatile
  6729                           
  6730                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0xC0;
  6731  1632  30C0               	movlw	192
  6732  1633  008D               	movwf	13	;volatile
  6733                           
  6734                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xBF;
  6735  1634  30BF               	movlw	191
  6736  1635  008E               	movwf	14	;volatile
  6737                           
  6738                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  6739  1636  3008               	movlw	8
  6740  1637  0021               	movlb	1	; select bank1
  6741  1638  008C               	movwf	12	;volatile
  6742                           
  6743                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  6744  1639  3020               	movlw	32
  6745  163A  008D               	movwf	13	;volatile
  6746                           
  6747                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  6748  163B  3040               	movlw	64
  6749  163C  008E               	movwf	14	;volatile
  6750                           
  6751                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE8;
  6752  163D  30E8               	movlw	232
  6753  163E  0023               	movlb	3	; select bank3
  6754  163F  008E               	movwf	14	;volatile
  6755                           
  6756                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  6757  1640  3040               	movlw	64
  6758  1641  008D               	movwf	13	;volatile
  6759                           
  6760                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  6761  1642  3037               	movlw	55
  6762  1643  008C               	movwf	12	;volatile
  6763                           
  6764                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  6765  1644  0024               	movlb	4	; select bank4
  6766  1645  018D               	clrf	13	;volatile
  6767                           
  6768                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  6769  1646  018C               	clrf	12	;volatile
  6770                           
  6771                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  6772  1647  0021               	movlb	1	; select bank1
  6773  1648  1795               	bsf	21,7	;volatile
  6774                           
  6775                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  6776  1649  0022               	movlb	2	; select bank2
  6777  164A  019D               	clrf	29	;volatile
  6778  164B  0008               	return
  6779  164C                     __end_of_PIN_MANAGER_Initialize:	
  6780                           
  6781                           	psect	text19
  6782  13AB                     __ptext19:	
  6783 ;; *************** function _OSCILLATOR_Initialize *****************
  6784 ;; Defined at:
  6785 ;;		line 62 in file "mcc_generated_files/mcc.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;		None
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, status,2
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6799 ;;      Params:         0       0       0       0       0       0       0       0
  6800 ;;      Locals:         0       0       0       0       0       0       0       0
  6801 ;;      Temps:          0       0       0       0       0       0       0       0
  6802 ;;      Totals:         0       0       0       0       0       0       0       0
  6803 ;;Total ram usage:        0 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    4
  6806 ;; This function calls:
  6807 ;;		Nothing
  6808 ;; This function is called by:
  6809 ;;		_SYSTEM_Initialize
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           
  6814                           ;psect for function _OSCILLATOR_Initialize
  6815  13AB                     _OSCILLATOR_Initialize:	
  6816                           
  6817                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0xF0;
  6818                           
  6819                           ;incstack = 0
  6820                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6821  13AB  30F0               	movlw	240
  6822  13AC  0021               	movlb	1	; select bank1
  6823  13AD  0099               	movwf	25	;volatile
  6824                           
  6825                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  6826  13AE  0022               	movlb	2	; select bank2
  6827  13AF  0196               	clrf	22	;volatile
  6828  13B0  0008               	return
  6829  13B1                     __end_of_OSCILLATOR_Initialize:	
  6830                           
  6831                           	psect	text20
  6832  152E                     __ptext20:	
  6833 ;; *************** function _MTOUCH_Initialize *****************
  6834 ;; Defined at:
  6835 ;;		line 96 in file "mcc_generated_files/mtouch/mtouch.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;		None
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6849 ;;      Params:         0       0       0       0       0       0       0       0
  6850 ;;      Locals:         0       0       0       0       0       0       0       0
  6851 ;;      Temps:          0       0       0       0       0       0       0       0
  6852 ;;      Totals:         0       0       0       0       0       0       0       0
  6853 ;;Total ram usage:        0 bytes
  6854 ;; Hardware stack levels used:    1
  6855 ;; Hardware stack levels required when called:    8
  6856 ;; This function calls:
  6857 ;;		_MTOUCH_Button_InitializeAll
  6858 ;;		_MTOUCH_Sensor_InitializeAll
  6859 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6860 ;;		_MTOUCH_Sensor_Scan_Initialize
  6861 ;;		_TMR1_SetInterruptHandler
  6862 ;; This function is called by:
  6863 ;;		_SYSTEM_Initialize
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           
  6868                           ;psect for function _MTOUCH_Initialize
  6869  152E                     _MTOUCH_Initialize:	
  6870                           
  6871                           ;mcc_generated_files/mtouch/mtouch.c: 98:     MTOUCH_Sensor_InitializeAll();
  6872                           
  6873                           ;incstack = 0
  6874                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6875  152E  3194  24B6  3195   	fcall	_MTOUCH_Sensor_InitializeAll
  6876                           
  6877                           ;mcc_generated_files/mtouch/mtouch.c: 99:     MTOUCH_Button_InitializeAll();
  6878  1531  3195  25F6  3195   	fcall	_MTOUCH_Button_InitializeAll
  6879                           
  6880                           ;mcc_generated_files/mtouch/mtouch.c: 100:     MTOUCH_Sensor_Sampled_ResetAll();
  6881  1534  3195  251B  3195   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6882                           
  6883                           ;mcc_generated_files/mtouch/mtouch.c: 101:     MTOUCH_Sensor_Scan_Initialize();
  6884  1537  3194  24A6  3195   	fcall	_MTOUCH_Sensor_Scan_Initialize
  6885                           
  6886                           ;mcc_generated_files/mtouch/mtouch.c: 102:     TMR1_SetInterruptHandler(MTOUCH_ScanSched
      +                          uler);
  6887  153A  30F8               	movlw	low _MTOUCH_ScanScheduler
  6888  153B  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6889  153C  3013               	movlw	high _MTOUCH_ScanScheduler
  6890  153D  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6891  153E  3193  23A5         	fcall	_TMR1_SetInterruptHandler
  6892  1540  0008               	return
  6893  1541                     __end_of_MTOUCH_Initialize:	
  6894                           
  6895                           	psect	text21
  6896  13A5                     __ptext21:	
  6897 ;; *************** function _TMR1_SetInterruptHandler *****************
  6898 ;; Defined at:
  6899 ;;		line 136 in file "mcc_generated_files/tmr1.c"
  6900 ;; Parameters:    Size  Location     Type
  6901 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  6902 ;;		 -> TMR1_DefaultInterruptHandler(1), MTOUCH_ScanScheduler(1), 
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;		None
  6905 ;; Return value:  Size  Location     Type
  6906 ;;                  1    wreg      void 
  6907 ;; Registers used:
  6908 ;;		wreg
  6909 ;; Tracked objects:
  6910 ;;		On entry : 0/0
  6911 ;;		On exit  : 0/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6914 ;;      Params:         2       0       0       0       0       0       0       0
  6915 ;;      Locals:         0       0       0       0       0       0       0       0
  6916 ;;      Temps:          0       0       0       0       0       0       0       0
  6917 ;;      Totals:         2       0       0       0       0       0       0       0
  6918 ;;Total ram usage:        2 bytes
  6919 ;; Hardware stack levels used:    1
  6920 ;; Hardware stack levels required when called:    4
  6921 ;; This function calls:
  6922 ;;		Nothing
  6923 ;; This function is called by:
  6924 ;;		_MTOUCH_Initialize
  6925 ;;		_TMR1_Initialize
  6926 ;; This function uses a non-reentrant model
  6927 ;;
  6928                           
  6929                           
  6930                           ;psect for function _TMR1_SetInterruptHandler
  6931  13A5                     _TMR1_SetInterruptHandler:	
  6932                           
  6933                           ;mcc_generated_files/tmr1.c: 137:     TMR1_InterruptHandler = InterruptHandler;
  6934                           
  6935                           ;incstack = 0
  6936                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  6937  13A5  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  6938  13A6  0021               	movlb	1	; select bank1
  6939  13A7  00D9               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  6940  13A8  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  6941  13A9  00D8               	movwf	_TMR1_InterruptHandler^(0+128)
  6942  13AA  0008               	return
  6943  13AB                     __end_of_TMR1_SetInterruptHandler:	
  6944                           
  6945                           	psect	text22
  6946  14B6                     __ptext22:	
  6947 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6948 ;; Defined at:
  6949 ;;		line 231 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;		None
  6952 ;; Auto vars:     Size  Location     Type
  6953 ;;  sensor          1    0        enum E2871
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  1    wreg      void 
  6956 ;; Registers used:
  6957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6963 ;;      Params:         0       0       0       0       0       0       0       0
  6964 ;;      Locals:         0       0       0       0       0       0       0       0
  6965 ;;      Temps:          0       0       0       0       0       0       0       0
  6966 ;;      Totals:         0       0       0       0       0       0       0       0
  6967 ;;Total ram usage:        0 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; Hardware stack levels required when called:    7
  6970 ;; This function calls:
  6971 ;;		_MTOUCH_Sensor_Initialize
  6972 ;; This function is called by:
  6973 ;;		_MTOUCH_Initialize
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           
  6978                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6979  14B6                     _MTOUCH_Sensor_InitializeAll:	
  6980                           
  6981                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 233:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 239:     MTOUCH_Sensor_Initialize(0);
  6982                           
  6983                           ;incstack = 0
  6984                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6985  14B6  3000               	movlw	0
  6986  14B7  3195  2556  3194   	fcall	_MTOUCH_Sensor_Initialize
  6987                           
  6988                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 240:     MTOUCH_Sensor_Initialize(1);
  6989  14BA  3001               	movlw	1
  6990  14BB  3195  2556  3194   	fcall	_MTOUCH_Sensor_Initialize
  6991                           
  6992                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     MTOUCH_Sensor_Initialize(2);
  6993  14BE  3002               	movlw	2
  6994  14BF  3195  2556  3194   	fcall	_MTOUCH_Sensor_Initialize
  6995                           
  6996                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 242:     MTOUCH_Sensor_Initialize(3);
  6997  14C2  3003               	movlw	3
  6998  14C3  3195  2556         	fcall	_MTOUCH_Sensor_Initialize
  6999  14C5  0008               	return
  7000  14C6                     __end_of_MTOUCH_Sensor_InitializeAll:	
  7001                           
  7002                           	psect	text23
  7003  1556                     __ptext23:	
  7004 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  7005 ;; Defined at:
  7006 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;  sensor          1    wreg     enum E2871
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  sensor          1    9[COMMON] enum E2871
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      enum E2876
  7013 ;; Registers used:
  7014 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7020 ;;      Params:         0       0       0       0       0       0       0       0
  7021 ;;      Locals:         1       0       0       0       0       0       0       0
  7022 ;;      Temps:          1       0       0       0       0       0       0       0
  7023 ;;      Totals:         2       0       0       0       0       0       0       0
  7024 ;;Total ram usage:        2 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    6
  7027 ;; This function calls:
  7028 ;;		_MTOUCH_Sensor_Calibrate
  7029 ;;		_MTOUCH_Sensor_Enable
  7030 ;;		_Sensor_Sampled_Reset
  7031 ;;		___bmul
  7032 ;; This function is called by:
  7033 ;;		_MTOUCH_Sensor_InitializeAll
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           
  7038                           ;psect for function _MTOUCH_Sensor_Initialize
  7039  1556                     _MTOUCH_Sensor_Initialize:	
  7040                           
  7041                           ;incstack = 0
  7042                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7043                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  7044  1556  00F9               	movwf	MTOUCH_Sensor_Initialize@sensor
  7045                           
  7046                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 216: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           217: {;mcc_generated_files/mtouch/mtouch_sensor.c: 219:     MTOUCH_Sensor_Enable(sensor
      +                          );
  7047  1557  0879               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7048  1558  3194  243B  3195   	fcall	_MTOUCH_Sensor_Enable
  7049                           
  7050                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 220:     MTOUCH_Sensor_Calibrate(sensor);
  7051  155B  0879               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7052  155C  3194  2411  3195   	fcall	_MTOUCH_Sensor_Calibrate
  7053                           
  7054                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 221:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  7055  155F  3009               	movlw	9
  7056  1560  00F8               	movwf	??_MTOUCH_Sensor_Initialize
  7057  1561  0878               	movf	??_MTOUCH_Sensor_Initialize,w
  7058  1562  00F2               	movwf	___bmul@multiplicand
  7059  1563  0879               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7060  1564  3194  24C6  3195   	fcall	___bmul
  7061  1567  3E20               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7062  1568  3193  23D5         	fcall	_Sensor_Sampled_Reset
  7063  156A  0008               	return
  7064  156B                     __end_of_MTOUCH_Sensor_Initialize:	
  7065                           
  7066                           	psect	text24
  7067  143B                     __ptext24:	
  7068 ;; *************** function _MTOUCH_Sensor_Enable *****************
  7069 ;; Defined at:
  7070 ;;		line 812 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;  sensor          1    wreg     enum E2871
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;  sensor          1    7[COMMON] enum E2871
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  1    wreg      void 
  7077 ;; Registers used:
  7078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7084 ;;      Params:         0       0       0       0       0       0       0       0
  7085 ;;      Locals:         1       0       0       0       0       0       0       0
  7086 ;;      Temps:          1       0       0       0       0       0       0       0
  7087 ;;      Totals:         2       0       0       0       0       0       0       0
  7088 ;;Total ram usage:        2 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    5
  7091 ;; This function calls:
  7092 ;;		___bmul
  7093 ;; This function is called by:
  7094 ;;		_MTOUCH_Sensor_Initialize
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           
  7099                           ;psect for function _MTOUCH_Sensor_Enable
  7100  143B                     _MTOUCH_Sensor_Enable:	
  7101                           
  7102                           ;incstack = 0
  7103                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7104                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  7105  143B  00F7               	movwf	MTOUCH_Sensor_Enable@sensor
  7106                           
  7107                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 812: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 813: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 814:         mtouch_sensor[sensor].enabled = 1;
  7108  143C  3009               	movlw	9
  7109  143D  00F6               	movwf	??_MTOUCH_Sensor_Enable
  7110  143E  0876               	movf	??_MTOUCH_Sensor_Enable,w
  7111  143F  00F2               	movwf	___bmul@multiplicand
  7112  1440  0877               	movf	MTOUCH_Sensor_Enable@sensor,w
  7113  1441  3194  24C6         	fcall	___bmul
  7114  1443  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  7115  1444  0086               	movwf	6
  7116  1445  3001               	movlw	1	; select bank2/3
  7117  1446  0087               	movwf	7
  7118  1447  1581               	bsf	1,3
  7119  1448  0008               	return
  7120  1449                     __end_of_MTOUCH_Sensor_Enable:	
  7121                           
  7122                           	psect	text25
  7123  15F6                     __ptext25:	
  7124 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  7125 ;; Defined at:
  7126 ;;		line 188 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;		None
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  button          1    0        enum E3070
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  1    wreg      void 
  7133 ;; Registers used:
  7134 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7140 ;;      Params:         0       0       0       0       0       0       0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0       0
  7143 ;;      Totals:         0       0       0       0       0       0       0       0
  7144 ;;Total ram usage:        0 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    7
  7147 ;; This function calls:
  7148 ;;		_MTOUCH_Button_Initialize
  7149 ;;		_memcpy
  7150 ;; This function is called by:
  7151 ;;		_MTOUCH_Initialize
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _MTOUCH_Button_InitializeAll
  7157  15F6                     _MTOUCH_Button_InitializeAll:	
  7158                           
  7159                           ;mcc_generated_files/mtouch/mtouch_button.c: 190:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 192:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  7160                           
  7161                           ;incstack = 0
  7162                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7163  15F6  3000               	movlw	low (_mtouch_button_init| (0+32768))
  7164  15F7  00F2               	movwf	memcpy@s1
  7165  15F8  3090               	movlw	high (_mtouch_button_init| (0+32768))
  7166  15F9  00F3               	movwf	memcpy@s1+1
  7167  15FA  3044               	movlw	68
  7168  15FB  00F4               	movwf	memcpy@n
  7169  15FC  3000               	movlw	0
  7170  15FD  00F5               	movwf	memcpy@n+1
  7171  15FE  30A0               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  7172  15FF  3197  2779  3195   	fcall	_memcpy
  7173                           
  7174                           ;mcc_generated_files/mtouch/mtouch_button.c: 198:     MTOUCH_Button_Initialize(0);
  7175  1602  3000               	movlw	0
  7176  1603  3188  20CC  3195   	fcall	_MTOUCH_Button_Initialize
  7177                           
  7178                           ;mcc_generated_files/mtouch/mtouch_button.c: 199:     MTOUCH_Button_Initialize(1);
  7179  1606  3001               	movlw	1
  7180  1607  3188  20CC  3195   	fcall	_MTOUCH_Button_Initialize
  7181                           
  7182                           ;mcc_generated_files/mtouch/mtouch_button.c: 200:     MTOUCH_Button_Initialize(2);
  7183  160A  3002               	movlw	2
  7184  160B  3188  20CC  3195   	fcall	_MTOUCH_Button_Initialize
  7185                           
  7186                           ;mcc_generated_files/mtouch/mtouch_button.c: 201:     MTOUCH_Button_Initialize(3);
  7187  160E  3003               	movlw	3
  7188  160F  3188  20CC         	fcall	_MTOUCH_Button_Initialize
  7189  1611  0008               	return
  7190  1612                     __end_of_MTOUCH_Button_InitializeAll:	
  7191                           
  7192                           	psect	text26
  7193  1779                     __ptext26:	
  7194 ;; *************** function _memcpy *****************
  7195 ;; Defined at:
  7196 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;  d1              1    wreg     PTR void 
  7199 ;;		 -> mtouch_button(68), 
  7200 ;;  s1              2    2[COMMON] PTR const void 
  7201 ;;		 -> mtouch_button_init(68), 
  7202 ;;  n               2    4[COMMON] unsigned int 
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;  d1              1    3[BANK0 ] PTR void 
  7205 ;;		 -> mtouch_button(68), 
  7206 ;;  s               2    1[BANK0 ] PTR const unsigned char 
  7207 ;;		 -> mtouch_button_init(68), 
  7208 ;;  d               1    4[BANK0 ] PTR unsigned char 
  7209 ;;		 -> mtouch_button(68), 
  7210 ;;  tmp             1    0[BANK0 ] unsigned char 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      PTR void 
  7213 ;; Registers used:
  7214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7220 ;;      Params:         4       0       0       0       0       0       0       0
  7221 ;;      Locals:         0       5       0       0       0       0       0       0
  7222 ;;      Temps:          1       0       0       0       0       0       0       0
  7223 ;;      Totals:         5       5       0       0       0       0       0       0
  7224 ;;Total ram usage:       10 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    4
  7227 ;; This function calls:
  7228 ;;		Nothing
  7229 ;; This function is called by:
  7230 ;;		_MTOUCH_Button_InitializeAll
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           
  7235                           ;psect for function _memcpy
  7236  1779                     _memcpy:	
  7237                           
  7238                           ;incstack = 0
  7239                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  7240                           ;memcpy@d1 stored from wreg
  7241  1779  0020               	movlb	0	; select bank0
  7242  177A  00A3               	movwf	memcpy@d1
  7243  177B  0873               	movf	memcpy@s1+1,w
  7244  177C  00A2               	movwf	memcpy@s+1
  7245  177D  0872               	movf	memcpy@s1,w
  7246  177E  00A1               	movwf	memcpy@s
  7247  177F  0823               	movf	memcpy@d1,w
  7248  1780  00F6               	movwf	??_memcpy
  7249  1781  0876               	movf	??_memcpy,w
  7250  1782  00A4               	movwf	memcpy@d
  7251  1783                     l5920:	
  7252  1783  3001               	movlw	1
  7253  1784  02F4               	subwf	memcpy@n,f
  7254  1785  3000               	movlw	0
  7255  1786  3BF5               	subwfb	memcpy@n+1,f
  7256  1787  0A74               	incf	memcpy@n,w
  7257  1788  1903               	btfsc	3,2
  7258  1789  0A75               	incf	memcpy@n+1,w
  7259  178A  1903               	btfsc	3,2
  7260  178B  0008               	return
  7261  178C  0821               	movf	memcpy@s,w
  7262  178D  0084               	movwf	4
  7263  178E  0822               	movf	memcpy@s+1,w
  7264  178F  0085               	movwf	5
  7265  1790  0800               	movf	0,w	;code access
  7266  1791  00F6               	movwf	??_memcpy
  7267  1792  0876               	movf	??_memcpy,w
  7268  1793  00A0               	movwf	memcpy@tmp
  7269  1794  3001               	movlw	1
  7270  1795  07A1               	addwf	memcpy@s,f
  7271  1796  3000               	movlw	0
  7272  1797  3DA2               	addwfc	memcpy@s+1,f
  7273  1798  0820               	movf	memcpy@tmp,w
  7274  1799  00F6               	movwf	??_memcpy
  7275  179A  0824               	movf	memcpy@d,w
  7276  179B  0086               	movwf	6
  7277  179C  3001               	movlw	1	; select bank2/3
  7278  179D  0087               	movwf	7
  7279  179E  0876               	movf	??_memcpy,w
  7280  179F  0081               	movwf	1
  7281  17A0  3001               	movlw	1
  7282  17A1  00F6               	movwf	??_memcpy
  7283  17A2  0876               	movf	??_memcpy,w
  7284  17A3  07A4               	addwf	memcpy@d,f
  7285  17A4  2F83               	goto	l5920
  7286  17A5                     __end_of_memcpy:	
  7287                           
  7288                           	psect	text27
  7289  086A                     __ptext27:	
  7290 ;; *************** function _EUSART_Initialize *****************
  7291 ;; Defined at:
  7292 ;;		line 81 in file "mcc_generated_files/eusart.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;		None
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;		None
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  1    wreg      void 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0, pclath, cstack
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7306 ;;      Params:         0       0       0       0       0       0       0       0
  7307 ;;      Locals:         0       0       0       0       0       0       0       0
  7308 ;;      Temps:          0       0       0       0       0       0       0       0
  7309 ;;      Totals:         0       0       0       0       0       0       0       0
  7310 ;;Total ram usage:        0 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; Hardware stack levels required when called:    5
  7313 ;; This function calls:
  7314 ;;		_EUSART_SetErrorHandler
  7315 ;;		_EUSART_SetFramingErrorHandler
  7316 ;;		_EUSART_SetOverrunErrorHandler
  7317 ;;		_EUSART_SetRxInterruptHandler
  7318 ;; This function is called by:
  7319 ;;		_SYSTEM_Initialize
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _EUSART_Initialize
  7325  086A                     _EUSART_Initialize:	
  7326                           
  7327                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  7328                           
  7329                           ;incstack = 0
  7330                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7331  086A  0021               	movlb	1	; select bank1
  7332  086B  1291               	bcf	17,5	;volatile
  7333                           
  7334                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  7335  086C  309A               	movlw	low _EUSART_Receive_ISR
  7336  086D  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  7337  086E  3008               	movlw	high _EUSART_Receive_ISR
  7338  086F  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  7339  0870  3193  239F  3188   	fcall	_EUSART_SetRxInterruptHandler
  7340                           
  7341                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  7342  0873  3008               	movlw	8
  7343  0874  0023               	movlb	3	; select bank3
  7344  0875  009F               	movwf	31	;volatile
  7345                           
  7346                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  7347  0876  3090               	movlw	144
  7348  0877  009D               	movwf	29	;volatile
  7349                           
  7350                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  7351  0878  3024               	movlw	36
  7352  0879  009E               	movwf	30	;volatile
  7353                           
  7354                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  7355  087A  3040               	movlw	64
  7356  087B  009B               	movwf	27	;volatile
  7357                           
  7358                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  7359  087C  3003               	movlw	3
  7360  087D  009C               	movwf	28	;volatile
  7361                           
  7362                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  7363  087E  3059               	movlw	low _EUSART_DefaultFramingErrorHandler
  7364  087F  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  7365  0880  3013               	movlw	high _EUSART_DefaultFramingErrorHandler
  7366  0881  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  7367  0882  3193  2393  3188   	fcall	_EUSART_SetFramingErrorHandler
  7368                           
  7369                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  7370  0885  306F               	movlw	low _EUSART_DefaultOverrunErrorHandler
  7371  0886  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  7372  0887  3013               	movlw	high _EUSART_DefaultOverrunErrorHandler
  7373  0888  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  7374  0889  3193  2399  3188   	fcall	_EUSART_SetOverrunErrorHandler
  7375                           
  7376                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  7377  088C  305D               	movlw	low _EUSART_DefaultErrorHandler
  7378  088D  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  7379  088E  3013               	movlw	high _EUSART_DefaultErrorHandler
  7380  088F  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  7381  0890  3193  238D         	fcall	_EUSART_SetErrorHandler
  7382                           
  7383                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  7384  0892  0020               	movlb	0	; select bank0
  7385  0893  01E8               	clrf	_eusartRxLastError	;volatile
  7386                           
  7387                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  7388  0894  01FB               	clrf	_eusartRxHead	;volatile
  7389                           
  7390                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  7391  0895  01FA               	clrf	_eusartRxTail	;volatile
  7392                           
  7393                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  7394  0896  01E9               	clrf	_eusartRxCount	;volatile
  7395                           
  7396                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  7397  0897  0021               	movlb	1	; select bank1
  7398  0898  1691               	bsf	17,5	;volatile
  7399  0899  0008               	return
  7400  089A                     __end_of_EUSART_Initialize:	
  7401                           
  7402                           	psect	text28
  7403  139F                     __ptext28:	
  7404 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7405 ;; Defined at:
  7406 ;;		line 225 in file "mcc_generated_files/eusart.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  7409 ;;		 -> EUSART_Receive_ISR(1), 
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  1    wreg      void 
  7414 ;; Registers used:
  7415 ;;		wreg
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7421 ;;      Params:         2       0       0       0       0       0       0       0
  7422 ;;      Locals:         0       0       0       0       0       0       0       0
  7423 ;;      Temps:          0       0       0       0       0       0       0       0
  7424 ;;      Totals:         2       0       0       0       0       0       0       0
  7425 ;;Total ram usage:        2 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    4
  7428 ;; This function calls:
  7429 ;;		Nothing
  7430 ;; This function is called by:
  7431 ;;		_EUSART_Initialize
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           
  7436                           ;psect for function _EUSART_SetRxInterruptHandler
  7437  139F                     _EUSART_SetRxInterruptHandler:	
  7438                           
  7439                           ;mcc_generated_files/eusart.c: 226:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7440                           
  7441                           ;incstack = 0
  7442                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7443  139F  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  7444  13A0  0021               	movlb	1	; select bank1
  7445  13A1  00E3               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  7446  13A2  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  7447  13A3  00E2               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  7448  13A4  0008               	return
  7449  13A5                     __end_of_EUSART_SetRxInterruptHandler:	
  7450                           
  7451                           	psect	text29
  7452  1399                     __ptext29:	
  7453 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7454 ;; Defined at:
  7455 ;;		line 216 in file "mcc_generated_files/eusart.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  7458 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;		None
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  1    wreg      void 
  7463 ;; Registers used:
  7464 ;;		wreg
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7470 ;;      Params:         2       0       0       0       0       0       0       0
  7471 ;;      Locals:         0       0       0       0       0       0       0       0
  7472 ;;      Temps:          0       0       0       0       0       0       0       0
  7473 ;;      Totals:         2       0       0       0       0       0       0       0
  7474 ;;Total ram usage:        2 bytes
  7475 ;; Hardware stack levels used:    1
  7476 ;; Hardware stack levels required when called:    4
  7477 ;; This function calls:
  7478 ;;		Nothing
  7479 ;; This function is called by:
  7480 ;;		_EUSART_Initialize
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           
  7485                           ;psect for function _EUSART_SetOverrunErrorHandler
  7486  1399                     _EUSART_SetOverrunErrorHandler:	
  7487                           
  7488                           ;mcc_generated_files/eusart.c: 217:     EUSART_OverrunErrorHandler = interruptHandler;
  7489                           
  7490                           ;incstack = 0
  7491                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7492  1399  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  7493  139A  0021               	movlb	1	; select bank1
  7494  139B  00DF               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  7495  139C  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7496  139D  00DE               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  7497  139E  0008               	return
  7498  139F                     __end_of_EUSART_SetOverrunErrorHandler:	
  7499                           
  7500                           	psect	text30
  7501  1393                     __ptext30:	
  7502 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7503 ;; Defined at:
  7504 ;;		line 212 in file "mcc_generated_files/eusart.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  7507 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;		None
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  1    wreg      void 
  7512 ;; Registers used:
  7513 ;;		wreg
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7519 ;;      Params:         2       0       0       0       0       0       0       0
  7520 ;;      Locals:         0       0       0       0       0       0       0       0
  7521 ;;      Temps:          0       0       0       0       0       0       0       0
  7522 ;;      Totals:         2       0       0       0       0       0       0       0
  7523 ;;Total ram usage:        2 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    4
  7526 ;; This function calls:
  7527 ;;		Nothing
  7528 ;; This function is called by:
  7529 ;;		_EUSART_Initialize
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _EUSART_SetFramingErrorHandler
  7535  1393                     _EUSART_SetFramingErrorHandler:	
  7536                           
  7537                           ;mcc_generated_files/eusart.c: 213:     EUSART_FramingErrorHandler = interruptHandler;
  7538                           
  7539                           ;incstack = 0
  7540                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7541  1393  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7542  1394  0021               	movlb	1	; select bank1
  7543  1395  00E1               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  7544  1396  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7545  1397  00E0               	movwf	_EUSART_FramingErrorHandler^(0+128)
  7546  1398  0008               	return
  7547  1399                     __end_of_EUSART_SetFramingErrorHandler:	
  7548                           
  7549                           	psect	text31
  7550  138D                     __ptext31:	
  7551 ;; *************** function _EUSART_SetErrorHandler *****************
  7552 ;; Defined at:
  7553 ;;		line 220 in file "mcc_generated_files/eusart.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  7556 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7568 ;;      Params:         2       0       0       0       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0       0
  7571 ;;      Totals:         2       0       0       0       0       0       0       0
  7572 ;;Total ram usage:        2 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    4
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		_EUSART_Initialize
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _EUSART_SetErrorHandler
  7584  138D                     _EUSART_SetErrorHandler:	
  7585                           
  7586                           ;mcc_generated_files/eusart.c: 221:     EUSART_ErrorHandler = interruptHandler;
  7587                           
  7588                           ;incstack = 0
  7589                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7590  138D  0873               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7591  138E  0021               	movlb	1	; select bank1
  7592  138F  00DD               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  7593  1390  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7594  1391  00DC               	movwf	_EUSART_ErrorHandler^(0+128)
  7595  1392  0008               	return
  7596  1393                     __end_of_EUSART_SetErrorHandler:	
  7597                           
  7598                           	psect	text32
  7599  1612                     __ptext32:	
  7600 ;; *************** function _MTOUCH_Service_Mainloop *****************
  7601 ;; Defined at:
  7602 ;;		line 112 in file "mcc_generated_files/mtouch/mtouch.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;		None
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;		None
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  1    wreg      _Bool 
  7609 ;; Registers used:
  7610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7616 ;;      Params:         0       0       0       0       0       0       0       0
  7617 ;;      Locals:         0       0       0       0       0       0       0       0
  7618 ;;      Temps:          0       1       0       0       0       0       0       0
  7619 ;;      Totals:         0       1       0       0       0       0       0       0
  7620 ;;Total ram usage:        1 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:   11
  7623 ;; This function calls:
  7624 ;;		_MTOUCH_Button_ServiceAll
  7625 ;;		_MTOUCH_Sensor_SampleAll
  7626 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7627 ;;		_MTOUCH_Tick
  7628 ;;		_MTOUCH_needReburst
  7629 ;; This function is called by:
  7630 ;;		_main
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           
  7635                           ;psect for function _MTOUCH_Service_Mainloop
  7636  1612                     _MTOUCH_Service_Mainloop:	
  7637                           
  7638                           ;mcc_generated_files/mtouch/mtouch.c: 116:     if(mtouch_time_toScan)
  7639                           
  7640                           ;incstack = 0
  7641                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7642  1612  0020               	movlb	0	; select bank0
  7643  1613  086C               	movf	_mtouch_time_toScan,w
  7644  1614  1903               	btfsc	3,2
  7645  1615  2E1C               	goto	l6144
  7646                           
  7647                           ;mcc_generated_files/mtouch/mtouch.c: 117:     {;mcc_generated_files/mtouch/mtouch.c: 11
      +                          8:         if(MTOUCH_Sensor_SampleAll() == 0)
  7648  1616  3195  2580  3196   	fcall	_MTOUCH_Sensor_SampleAll
  7649  1619  3A00               	xorlw	0
  7650  161A  1D03               	skipz
  7651  161B  2E1E               	goto	l6148
  7652  161C                     l6144:	
  7653                           
  7654                           ;mcc_generated_files/mtouch/mtouch.c: 119:         return 0;
  7655  161C  3000               	movlw	0
  7656  161D  0008               	return
  7657  161E                     l6148:	
  7658                           
  7659                           ;mcc_generated_files/mtouch/mtouch.c: 122:             MTOUCH_Button_ServiceAll();
  7660  161E  3194  2496  3196   	fcall	_MTOUCH_Button_ServiceAll
  7661                           
  7662                           ;mcc_generated_files/mtouch/mtouch.c: 123:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  7663  1621  3180  2002  3196   	fcall	_MTOUCH_needReburst
  7664  1624  0020               	movlb	0	; select bank0
  7665  1625  00CD               	movwf	??_MTOUCH_Service_Mainloop
  7666  1626  084D               	movf	??_MTOUCH_Service_Mainloop,w
  7667  1627  00EC               	movwf	_mtouch_time_toScan
  7668                           
  7669                           ;mcc_generated_files/mtouch/mtouch.c: 124:             MTOUCH_Sensor_Sampled_ResetAll();
  7670  1628  3195  251B  3196   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7671                           
  7672                           ;mcc_generated_files/mtouch/mtouch.c: 125:             MTOUCH_Tick();
  7673  162B  3193  2369         	fcall	_MTOUCH_Tick
  7674                           
  7675                           ;mcc_generated_files/mtouch/mtouch.c: 126:             return 1;
  7676  162D  3001               	movlw	1
  7677  162E  0008               	return
  7678  162F                     __end_of_MTOUCH_Service_Mainloop:	
  7679                           
  7680                           	psect	text33
  7681  0002                     __ptext33:	
  7682 ;; *************** function _MTOUCH_needReburst *****************
  7683 ;; Defined at:
  7684 ;;		line 149 in file "mcc_generated_files/mtouch/mtouch.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  needReburst     1    0        _Bool 
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  1    wreg      _Bool 
  7691 ;; Registers used:
  7692 ;;		wreg, status,2
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7698 ;;      Params:         0       0       0       0       0       0       0       0
  7699 ;;      Locals:         1       0       0       0       0       0       0       0
  7700 ;;      Temps:          0       0       0       0       0       0       0       0
  7701 ;;      Totals:         1       0       0       0       0       0       0       0
  7702 ;;Total ram usage:        1 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    4
  7705 ;; This function calls:
  7706 ;;		Nothing
  7707 ;; This function is called by:
  7708 ;;		_MTOUCH_Service_Mainloop
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _MTOUCH_needReburst
  7714  0002                     _MTOUCH_needReburst:	
  7715                           
  7716                           ;mcc_generated_files/mtouch/mtouch.c: 153:     return needReburst;
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  7720  0002  3000               	movlw	0
  7721  0003  0008               	return
  7722  0004                     __end_of_MTOUCH_needReburst:	
  7723                           
  7724                           	psect	text34
  7725  1369                     __ptext34:	
  7726 ;; *************** function _MTOUCH_Tick *****************
  7727 ;; Defined at:
  7728 ;;		line 139 in file "mcc_generated_files/mtouch/mtouch.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;		None
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;		None
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  1    wreg      void 
  7735 ;; Registers used:
  7736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7737 ;; Tracked objects:
  7738 ;;		On entry : 0/0
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7742 ;;      Params:         0       0       0       0       0       0       0       0
  7743 ;;      Locals:         0       0       0       0       0       0       0       0
  7744 ;;      Temps:          0       0       0       0       0       0       0       0
  7745 ;;      Totals:         0       0       0       0       0       0       0       0
  7746 ;;Total ram usage:        0 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; Hardware stack levels required when called:    6
  7749 ;; This function calls:
  7750 ;;		_MTOUCH_Button_Tick
  7751 ;; This function is called by:
  7752 ;;		_MTOUCH_Service_Mainloop
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           
  7757                           ;psect for function _MTOUCH_Tick
  7758  1369                     _MTOUCH_Tick:	
  7759                           
  7760                           ;mcc_generated_files/mtouch/mtouch.c: 141:     MTOUCH_Button_Tick();
  7761                           
  7762                           ;incstack = 0
  7763                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7764  1369  3194  24F9         	fcall	_MTOUCH_Button_Tick
  7765  136B  0008               	return
  7766  136C                     __end_of_MTOUCH_Tick:	
  7767                           
  7768                           	psect	text35
  7769  14F9                     __ptext35:	
  7770 ;; *************** function _MTOUCH_Button_Tick *****************
  7771 ;; Defined at:
  7772 ;;		line 322 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;		None
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;  i               1    6[COMMON] unsigned char 
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  1    wreg      void 
  7779 ;; Registers used:
  7780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/0
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7786 ;;      Params:         0       0       0       0       0       0       0       0
  7787 ;;      Locals:         1       0       0       0       0       0       0       0
  7788 ;;      Temps:          1       0       0       0       0       0       0       0
  7789 ;;      Totals:         2       0       0       0       0       0       0       0
  7790 ;;Total ram usage:        2 bytes
  7791 ;; Hardware stack levels used:    1
  7792 ;; Hardware stack levels required when called:    5
  7793 ;; This function calls:
  7794 ;;		_Button_Tick_helper
  7795 ;; This function is called by:
  7796 ;;		_MTOUCH_Tick
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           
  7801                           ;psect for function _MTOUCH_Button_Tick
  7802  14F9                     _MTOUCH_Button_Tick:	
  7803                           
  7804                           ;mcc_generated_files/mtouch/mtouch_button.c: 324:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 325:     for (i = 0; i < 4u; i++)
  7805                           
  7806                           ;incstack = 0
  7807                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7808  14F9  01F6               	clrf	MTOUCH_Button_Tick@i
  7809  14FA                     l4454:	
  7810                           
  7811                           ;mcc_generated_files/mtouch/mtouch_button.c: 326:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 327:         Button_Tick_helper(&mtouch_button[i]);
  7812  14FA  0E76               	swapf	MTOUCH_Button_Tick@i,w
  7813  14FB  39F0               	andlw	240
  7814  14FC  0776               	addwf	MTOUCH_Button_Tick@i,w
  7815  14FD  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7816  14FE  3196  26DA  3194   	fcall	_Button_Tick_helper
  7817                           
  7818                           ;mcc_generated_files/mtouch/mtouch_button.c: 328:     }
  7819  1501  3001               	movlw	1
  7820  1502  00F5               	movwf	??_MTOUCH_Button_Tick
  7821  1503  0875               	movf	??_MTOUCH_Button_Tick,w
  7822  1504  07F6               	addwf	MTOUCH_Button_Tick@i,f
  7823  1505  3004               	movlw	4
  7824  1506  0276               	subwf	MTOUCH_Button_Tick@i,w
  7825  1507  1803               	btfsc	3,0
  7826  1508  0008               	return
  7827  1509  2CFA               	goto	l4454
  7828  150A                     __end_of_MTOUCH_Button_Tick:	
  7829                           
  7830                           	psect	text36
  7831  16DA                     __ptext36:	
  7832 ;; *************** function _Button_Tick_helper *****************
  7833 ;; Defined at:
  7834 ;;		line 330 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  button          1    wreg     PTR struct .
  7837 ;;		 -> mtouch_button(68), 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  button          1    4[COMMON] PTR struct .
  7840 ;;		 -> mtouch_button(68), 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      void 
  7843 ;; Registers used:
  7844 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7850 ;;      Params:         0       0       0       0       0       0       0       0
  7851 ;;      Locals:         1       0       0       0       0       0       0       0
  7852 ;;      Temps:          2       0       0       0       0       0       0       0
  7853 ;;      Totals:         3       0       0       0       0       0       0       0
  7854 ;;Total ram usage:        3 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    4
  7857 ;; This function calls:
  7858 ;;		Nothing
  7859 ;; This function is called by:
  7860 ;;		_MTOUCH_Button_Tick
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           
  7865                           ;psect for function _Button_Tick_helper
  7866  16DA                     _Button_Tick_helper:	
  7867                           
  7868                           ;incstack = 0
  7869                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  7870                           ;Button_Tick_helper@button stored from wreg
  7871  16DA  00F4               	movwf	Button_Tick_helper@button
  7872                           
  7873                           ;mcc_generated_files/mtouch/mtouch_button.c: 330: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 331: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 333:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  7874  16DB  0874               	movf	Button_Tick_helper@button,w
  7875  16DC  3E02               	addlw	2
  7876  16DD  0086               	movwf	6
  7877  16DE  3001               	movlw	1	; select bank2/3
  7878  16DF  0087               	movwf	7
  7879  16E0  3002               	movlw	2
  7880  16E1  0601               	xorwf	1,w
  7881  16E2  1D03               	btfss	3,2
  7882  16E3  0008               	return
  7883                           
  7884                           ;mcc_generated_files/mtouch/mtouch_button.c: 334:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 335:         (button->counter)++;
  7885  16E4  0874               	movf	Button_Tick_helper@button,w
  7886  16E5  3E0A               	addlw	10
  7887  16E6  0086               	movwf	6
  7888  16E7  3001               	movlw	1	; select bank2/3
  7889  16E8  0087               	movwf	7
  7890  16E9  3001               	movlw	1
  7891  16EA  0781               	addwf	1,f
  7892  16EB  3141               	addfsr 1,1
  7893  16EC  1803               	skipnc
  7894  16ED  0A81               	incf	1,f
  7895                           
  7896                           ;mcc_generated_files/mtouch/mtouch_button.c: 336:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  7897  16EE  0874               	movf	Button_Tick_helper@button,w
  7898  16EF  3E0A               	addlw	10
  7899  16F0  0086               	movwf	6
  7900  16F1  3001               	movlw	1	; select bank2/3
  7901  16F2  0087               	movwf	7
  7902  16F3  0016               	moviw fsr1++
  7903  16F4  0401               	iorwf	1,w
  7904  16F5  1D03               	btfss	3,2
  7905  16F6  0008               	return
  7906                           
  7907                           ;mcc_generated_files/mtouch/mtouch_button.c: 337:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 338:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  7908  16F7  0874               	movf	Button_Tick_helper@button,w
  7909  16F8  3E0A               	addlw	10
  7910  16F9  0086               	movwf	6
  7911  16FA  3001               	movlw	1	; select bank2/3
  7912  16FB  0087               	movwf	7
  7913  16FC  30FF               	movlw	255
  7914  16FD  3FC0               	movwi [0]fsr1
  7915  16FE  30FF               	movlw	255
  7916  16FF  3FC1               	movwi [1]fsr1
  7917  1700  0008               	return
  7918  1701                     __end_of_Button_Tick_helper:	
  7919                           
  7920                           	psect	text37
  7921  151B                     __ptext37:	
  7922 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  7923 ;; Defined at:
  7924 ;;		line 905 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;		None
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  sensor          1    4[COMMON] PTR struct .
  7929 ;;		 -> mtouch_sensor(36), 
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1    wreg      void 
  7932 ;; Registers used:
  7933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7939 ;;      Params:         0       0       0       0       0       0       0       0
  7940 ;;      Locals:         1       0       0       0       0       0       0       0
  7941 ;;      Temps:          1       0       0       0       0       0       0       0
  7942 ;;      Totals:         2       0       0       0       0       0       0       0
  7943 ;;Total ram usage:        2 bytes
  7944 ;; Hardware stack levels used:    1
  7945 ;; Hardware stack levels required when called:    5
  7946 ;; This function calls:
  7947 ;;		_Sensor_Sampled_Reset
  7948 ;; This function is called by:
  7949 ;;		_MTOUCH_Initialize
  7950 ;;		_MTOUCH_Service_Mainloop
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           
  7955                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  7956  151B                     _MTOUCH_Sensor_Sampled_ResetAll:	
  7957                           
  7958                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 908:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[4u -1];sensor++)
  7959                           
  7960                           ;incstack = 0
  7961                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  7962  151B  3020               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7963  151C  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7964  151D  0873               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7965  151E  00F4               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  7966  151F                     L2:	
  7967  151F  303B               	movlw	(low ((_mtouch_sensor| (0+256)+27)))& (0+255)
  7968  1520  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7969  1521  0874               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7970  1522  0273               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7971  1523  1C03               	btfss	3,0
  7972  1524  0008               	return
  7973                           
  7974                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 909:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 910:         Sensor_Sampled_Reset(sensor);
  7975  1525  0874               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7976  1526  3193  23D5  3195   	fcall	_Sensor_Sampled_Reset
  7977                           
  7978                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 911:     }
  7979  1529  3009               	movlw	9
  7980  152A  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7981  152B  0873               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7982  152C  07F4               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  7983  152D  2D1F               	goto	L2
  7984  152E                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  7985                           
  7986                           	psect	text38
  7987  13D5                     __ptext38:	
  7988 ;; *************** function _Sensor_Sampled_Reset *****************
  7989 ;; Defined at:
  7990 ;;		line 919 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;  sensor          1    wreg     PTR struct .
  7993 ;;		 -> mtouch_sensor(36), 
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;  sensor          1    2[COMMON] PTR struct .
  7996 ;;		 -> mtouch_sensor(36), 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  1    wreg      void 
  7999 ;; Registers used:
  8000 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8006 ;;      Params:         0       0       0       0       0       0       0       0
  8007 ;;      Locals:         1       0       0       0       0       0       0       0
  8008 ;;      Temps:          0       0       0       0       0       0       0       0
  8009 ;;      Totals:         1       0       0       0       0       0       0       0
  8010 ;;Total ram usage:        1 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    4
  8013 ;; This function calls:
  8014 ;;		Nothing
  8015 ;; This function is called by:
  8016 ;;		_MTOUCH_Sensor_Initialize
  8017 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           
  8022                           ;psect for function _Sensor_Sampled_Reset
  8023  13D5                     _Sensor_Sampled_Reset:	
  8024                           
  8025                           ;incstack = 0
  8026                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8027                           ;Sensor_Sampled_Reset@sensor stored from wreg
  8028  13D5  00F2               	movwf	Sensor_Sampled_Reset@sensor
  8029                           
  8030                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 919: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          920: {;mcc_generated_files/mtouch/mtouch_sensor.c: 921:     sensor->sampled = 0;
  8031  13D6  0872               	movf	Sensor_Sampled_Reset@sensor,w
  8032  13D7  3E08               	addlw	8
  8033  13D8  0086               	movwf	6
  8034  13D9  3001               	movlw	1	; select bank2/3
  8035  13DA  0087               	movwf	7
  8036  13DB  1001               	bcf	1,0
  8037  13DC  0008               	return
  8038  13DD                     __end_of_Sensor_Sampled_Reset:	
  8039                           
  8040                           	psect	text39
  8041  1580                     __ptext39:	
  8042 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  8043 ;; Defined at:
  8044 ;;		line 270 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;		None
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  group           1   44[BANK0 ] unsigned char 
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      _Bool 
  8051 ;; Registers used:
  8052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8058 ;;      Params:         0       0       0       0       0       0       0       0
  8059 ;;      Locals:         0       1       0       0       0       0       0       0
  8060 ;;      Temps:          0       1       0       0       0       0       0       0
  8061 ;;      Totals:         0       2       0       0       0       0       0       0
  8062 ;;Total ram usage:        2 bytes
  8063 ;; Hardware stack levels used:    1
  8064 ;; Hardware stack levels required when called:   10
  8065 ;; This function calls:
  8066 ;;		_Sensor_Service
  8067 ;; This function is called by:
  8068 ;;		_MTOUCH_Service_Mainloop
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           
  8073                           ;psect for function _MTOUCH_Sensor_SampleAll
  8074  1580                     _MTOUCH_Sensor_SampleAll:	
  8075                           
  8076                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 272:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 273:     for (group = 0; group < 2u; group++)
  8077                           
  8078                           ;incstack = 0
  8079                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8080  1580  0020               	movlb	0	; select bank0
  8081  1581  01CC               	clrf	MTOUCH_Sensor_SampleAll@group
  8082  1582                     l6118:	
  8083                           
  8084                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 274:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 275:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  8085  1582  084C               	movf	MTOUCH_Sensor_SampleAll@group,w
  8086  1583  318C  24FB  3195   	fcall	_Sensor_Service
  8087  1586  3A00               	xorlw	0
  8088  1587  1903               	skipnz
  8089  1588  2D8B               	goto	l6124
  8090                           
  8091                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 276:             return 0;
  8092  1589  3000               	movlw	0
  8093  158A  0008               	return
  8094  158B                     l6124:	
  8095                           
  8096                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 277:     }
  8097  158B  3001               	movlw	1
  8098  158C  0020               	movlb	0	; select bank0
  8099  158D  00CB               	movwf	??_MTOUCH_Sensor_SampleAll
  8100  158E  084B               	movf	??_MTOUCH_Sensor_SampleAll,w
  8101  158F  07CC               	addwf	MTOUCH_Sensor_SampleAll@group,f
  8102  1590  3002               	movlw	2
  8103  1591  024C               	subwf	MTOUCH_Sensor_SampleAll@group,w
  8104  1592  1C03               	skipc
  8105  1593  2D82               	goto	l6118
  8106                           
  8107                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 278:     return 1;
  8108  1594  3001               	movlw	1
  8109  1595  0008               	return
  8110  1596                     __end_of_MTOUCH_Sensor_SampleAll:	
  8111                           
  8112                           	psect	text40
  8113  0CFB                     __ptext40:	
  8114 ;; *************** function _Sensor_Service *****************
  8115 ;; Defined at:
  8116 ;;		line 294 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;  scanGroup       1    wreg     unsigned char 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  scanGroup       1   39[BANK0 ] unsigned char 
  8121 ;;  sensor_adc2     1   42[BANK0 ] PTR struct .
  8122 ;;		 -> mtouch_sensor(36), 
  8123 ;;  sensor_adc1     1   41[BANK0 ] PTR struct .
  8124 ;;		 -> mtouch_sensor(36), 
  8125 ;;  error           1   40[BANK0 ] enum E2876
  8126 ;; Return value:  Size  Location     Type
  8127 ;;                  1    wreg      enum E2876
  8128 ;; Registers used:
  8129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8130 ;; Tracked objects:
  8131 ;;		On entry : 0/0
  8132 ;;		On exit  : 0/0
  8133 ;;		Unchanged: 0/0
  8134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8135 ;;      Params:         0       0       0       0       0       0       0       0
  8136 ;;      Locals:         0       4       0       0       0       0       0       0
  8137 ;;      Temps:          0       3       0       0       0       0       0       0
  8138 ;;      Totals:         0       7       0       0       0       0       0       0
  8139 ;;Total ram usage:        7 bytes
  8140 ;; Hardware stack levels used:    1
  8141 ;; Hardware stack levels required when called:    9
  8142 ;; This function calls:
  8143 ;;		_Sensor_Acquisition
  8144 ;;		_Sensor_DefaultCallback
  8145 ;;		_Sensor_RawSample_Update
  8146 ;;		_Sensor_isEnabled
  8147 ;;		_Sensor_setSampled
  8148 ;; This function is called by:
  8149 ;;		_MTOUCH_Sensor_SampleAll
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153                           
  8154                           ;psect for function _Sensor_Service
  8155  0CFB                     _Sensor_Service:	
  8156                           
  8157                           ;incstack = 0
  8158                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8159                           ;Sensor_Service@scanGroup stored from wreg
  8160  0CFB  0020               	movlb	0	; select bank0
  8161  0CFC  00C7               	movwf	Sensor_Service@scanGroup
  8162                           
  8163                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 294: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 295: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 296:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 297:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 299:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  8164  0CFD  0847               	movf	Sensor_Service@scanGroup,w
  8165  0CFE  00C4               	movwf	??_Sensor_Service
  8166  0CFF  01C5               	clrf	??_Sensor_Service+1
  8167  0D00  35C4               	lslf	??_Sensor_Service,f
  8168  0D01  0DC5               	rlf	??_Sensor_Service+1,f
  8169  0D02  3064               	movlw	low (_sensor_scan_group| (0+32768))
  8170  0D03  0744               	addwf	??_Sensor_Service,w
  8171  0D04  0084               	movwf	4
  8172  0D05  3098               	movlw	high (_sensor_scan_group| (0+32768))
  8173  0D06  3D45               	addwfc	??_Sensor_Service+1,w
  8174  0D07  0085               	movwf	5
  8175  0D08  0800               	movf	0,w	;code access
  8176  0D09  00C6               	movwf	??_Sensor_Service+2
  8177  0D0A  0846               	movf	??_Sensor_Service+2,w
  8178  0D0B  00C9               	movwf	Sensor_Service@sensor_adc1
  8179                           
  8180                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 300:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  8181  0D0C  0847               	movf	Sensor_Service@scanGroup,w
  8182  0D0D  00C4               	movwf	??_Sensor_Service
  8183  0D0E  01C5               	clrf	??_Sensor_Service+1
  8184  0D0F  35C4               	lslf	??_Sensor_Service,f
  8185  0D10  0DC5               	rlf	??_Sensor_Service+1,f
  8186  0D11  3065               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  8187  0D12  0744               	addwf	??_Sensor_Service,w
  8188  0D13  0084               	movwf	4
  8189  0D14  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  8190  0D15  3D45               	addwfc	??_Sensor_Service+1,w
  8191  0D16  0085               	movwf	5
  8192  0D17  0800               	movf	0,w	;code access
  8193  0D18  00C6               	movwf	??_Sensor_Service+2
  8194  0D19  0846               	movf	??_Sensor_Service+2,w
  8195  0D1A  00CA               	movwf	Sensor_Service@sensor_adc2
  8196                           
  8197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 302:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  8198  0D1B  084A               	movf	Sensor_Service@sensor_adc2,w
  8199  0D1C  00C4               	movwf	??_Sensor_Service
  8200  0D1D  0844               	movf	??_Sensor_Service,w
  8201  0D1E  00C0               	movwf	Sensor_Acquisition@sensor_adc2
  8202  0D1F  0849               	movf	Sensor_Service@sensor_adc1,w
  8203  0D20  318A  22AB  318C   	fcall	_Sensor_Acquisition
  8204  0D23  0020               	movlb	0	; select bank0
  8205  0D24  00C5               	movwf	??_Sensor_Service+1
  8206  0D25  0845               	movf	??_Sensor_Service+1,w
  8207  0D26  00C8               	movwf	Sensor_Service@error
  8208                           
  8209                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 305:     switch(error)
  8210  0D27  2D64               	goto	l6062
  8211  0D28                     l6044:	
  8212                           
  8213                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 308:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 309:             if(Sensor_isEnabled(sensor_adc1))
  8214  0D28  0849               	movf	Sensor_Service@sensor_adc1,w
  8215  0D29  3194  24E8  318C   	fcall	_Sensor_isEnabled
  8216  0D2C  3A00               	xorlw	0
  8217  0D2D  1903               	skipnz
  8218  0D2E  2D45               	goto	l6052
  8219                           
  8220                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 310:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 316:                     Sensor_RawSample_Update(sensor_adc1);
  8221  0D2F  0020               	movlb	0	; select bank0
  8222  0D30  0849               	movf	Sensor_Service@sensor_adc1,w
  8223  0D31  3197  2728  318C   	fcall	_Sensor_RawSample_Update
  8224                           
  8225                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:                 Sensor_setSampled(sens
      +                          or_adc1);
  8226  0D34  0020               	movlb	0	; select bank0
  8227  0D35  0849               	movf	Sensor_Service@sensor_adc1,w
  8228  0D36  3193  23CD  318C   	fcall	_Sensor_setSampled
  8229                           
  8230                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 318:                 callback_sampled(senso
      +                          r_adc1->sensor);
  8231  0D39  0020               	movlb	0	; select bank0
  8232  0D3A  0849               	movf	Sensor_Service@sensor_adc1,w
  8233  0D3B  0086               	movwf	6
  8234  0D3C  3001               	movlw	1	; select bank2/3
  8235  0D3D  0087               	movwf	7
  8236  0D3E  0801               	movf	1,w
  8237  0D3F  00C4               	movwf	??_Sensor_Service
  8238  0D40  0844               	movf	??_Sensor_Service,w
  8239  0D41  00F2               	movwf	Sensor_DefaultCallback@sensor
  8240  0D42  3193  235C  318C   	fcall	_Sensor_DefaultCallback
  8241  0D45                     l6052:	
  8242                           
  8243                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 320:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  8244  0D45  0020               	movlb	0	; select bank0
  8245  0D46  084A               	movf	Sensor_Service@sensor_adc2,w
  8246  0D47  3194  24E8  318C   	fcall	_Sensor_isEnabled
  8247  0D4A  3A00               	xorlw	0
  8248  0D4B  1903               	skipnz
  8249  0D4C  2D87               	goto	l6064
  8250                           
  8251                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 321:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 323:                     Sensor_RawSample_Update(sensor_adc2);
  8252  0D4D  0020               	movlb	0	; select bank0
  8253  0D4E  084A               	movf	Sensor_Service@sensor_adc2,w
  8254  0D4F  3197  2728  318C   	fcall	_Sensor_RawSample_Update
  8255                           
  8256                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 Sensor_setSampled(sens
      +                          or_adc2);
  8257  0D52  0020               	movlb	0	; select bank0
  8258  0D53  084A               	movf	Sensor_Service@sensor_adc2,w
  8259  0D54  3193  23CD  318C   	fcall	_Sensor_setSampled
  8260                           
  8261                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 326:                 callback_sampled(senso
      +                          r_adc2->sensor);
  8262  0D57  0020               	movlb	0	; select bank0
  8263  0D58  084A               	movf	Sensor_Service@sensor_adc2,w
  8264  0D59  0086               	movwf	6
  8265  0D5A  3001               	movlw	1	; select bank2/3
  8266  0D5B  0087               	movwf	7
  8267  0D5C  0801               	movf	1,w
  8268  0D5D  00C4               	movwf	??_Sensor_Service
  8269  0D5E  0844               	movf	??_Sensor_Service,w
  8270  0D5F  00F2               	movwf	Sensor_DefaultCallback@sensor
  8271  0D60  3193  235C  318C   	fcall	_Sensor_DefaultCallback
  8272  0D63  2D87               	goto	l6064
  8273  0D64                     l6062:	
  8274  0D64  0848               	movf	Sensor_Service@error,w
  8275  0D65  00C4               	movwf	??_Sensor_Service
  8276  0D66  01C5               	clrf	??_Sensor_Service+1
  8277  0D67  1BC4               	btfsc	??_Sensor_Service,7
  8278  0D68  03C5               	decf	??_Sensor_Service+1,f
  8279                           
  8280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  8281                           ; Switch size 1, requested type "simple"
  8282                           ; Number of cases is 2, Range of values is 0 to 255
  8283                           ; switch strategies available:
  8284                           ; Name         Instructions Cycles
  8285                           ; simple_byte            7     4 (average)
  8286                           ; jumptable            260     6 (fixed)
  8287                           ;	Chosen strategy is simple_byte
  8288  0D69  0845               	movf	??_Sensor_Service+1,w
  8289  0D6A  3A00               	xorlw	0	; case 0
  8290  0D6B  1903               	skipnz
  8291  0D6C  2D71               	goto	l6582
  8292  0D6D  3AFF               	xorlw	255	; case 255
  8293  0D6E  1903               	skipnz
  8294  0D6F  2D76               	goto	l6584
  8295  0D70  2D87               	goto	l6064
  8296  0D71                     l6582:	
  8297                           
  8298                           ; Switch size 1, requested type "simple"
  8299                           ; Number of cases is 1, Range of values is 0 to 0
  8300                           ; switch strategies available:
  8301                           ; Name         Instructions Cycles
  8302                           ; simple_byte            4     3 (average)
  8303                           ; direct_byte            8     6 (fixed)
  8304                           ; jumptable            260     6 (fixed)
  8305                           ;	Chosen strategy is simple_byte
  8306  0D71  0844               	movf	??_Sensor_Service,w
  8307  0D72  3A00               	xorlw	0	; case 0
  8308  0D73  1903               	skipnz
  8309  0D74  2D28               	goto	l6044
  8310  0D75  2D87               	goto	l6064
  8311  0D76                     l6584:	
  8312                           
  8313                           ; Switch size 1, requested type "simple"
  8314                           ; Number of cases is 5, Range of values is 251 to 255
  8315                           ; switch strategies available:
  8316                           ; Name         Instructions Cycles
  8317                           ; direct_byte           15     5 (fixed)
  8318                           ; simple_byte           16     9 (average)
  8319                           ; jumptable            263     9 (fixed)
  8320                           ;	Chosen strategy is simple_byte
  8321  0D76  0844               	movf	??_Sensor_Service,w
  8322  0D77  3AFB               	xorlw	251	; case 251
  8323  0D78  1903               	skipnz
  8324  0D79  2D87               	goto	l6064
  8325  0D7A  3A07               	xorlw	7	; case 252
  8326  0D7B  1903               	skipnz
  8327  0D7C  2D87               	goto	l6064
  8328  0D7D  3A01               	xorlw	1	; case 253
  8329  0D7E  1903               	skipnz
  8330  0D7F  2D87               	goto	l6064
  8331  0D80  3A03               	xorlw	3	; case 254
  8332  0D81  1903               	skipnz
  8333  0D82  2D87               	goto	l6064
  8334  0D83  3A01               	xorlw	1	; case 255
  8335  0D84  1903               	skipnz
  8336  0D85  2D87               	goto	l6064
  8337  0D86  2D87               	goto	l6064
  8338  0D87                     l6064:	
  8339                           
  8340                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 339:     return error;
  8341  0D87  0020               	movlb	0	; select bank0
  8342  0D88  0848               	movf	Sensor_Service@error,w
  8343  0D89  0008               	return
  8344  0D8A                     __end_of_Sensor_Service:	
  8345                           
  8346                           	psect	text41
  8347  13CD                     __ptext41:	
  8348 ;; *************** function _Sensor_setSampled *****************
  8349 ;; Defined at:
  8350 ;;		line 924 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;  sensor          1    wreg     PTR struct .
  8353 ;;		 -> mtouch_sensor(36), 
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  sensor          1    2[COMMON] PTR struct .
  8356 ;;		 -> mtouch_sensor(36), 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  1    wreg      void 
  8359 ;; Registers used:
  8360 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8366 ;;      Params:         0       0       0       0       0       0       0       0
  8367 ;;      Locals:         1       0       0       0       0       0       0       0
  8368 ;;      Temps:          0       0       0       0       0       0       0       0
  8369 ;;      Totals:         1       0       0       0       0       0       0       0
  8370 ;;Total ram usage:        1 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    4
  8373 ;; This function calls:
  8374 ;;		Nothing
  8375 ;; This function is called by:
  8376 ;;		_Sensor_Service
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           
  8381                           ;psect for function _Sensor_setSampled
  8382  13CD                     _Sensor_setSampled:	
  8383                           
  8384                           ;incstack = 0
  8385                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8386                           ;Sensor_setSampled@sensor stored from wreg
  8387  13CD  00F2               	movwf	Sensor_setSampled@sensor
  8388                           
  8389                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 924: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 925
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 926:     sensor->sampled = 1;
  8390  13CE  0872               	movf	Sensor_setSampled@sensor,w
  8391  13CF  3E08               	addlw	8
  8392  13D0  0086               	movwf	6
  8393  13D1  3001               	movlw	1	; select bank2/3
  8394  13D2  0087               	movwf	7
  8395  13D3  1401               	bsf	1,0
  8396  13D4  0008               	return
  8397  13D5                     __end_of_Sensor_setSampled:	
  8398                           
  8399                           	psect	text42
  8400  1728                     __ptext42:	
  8401 ;; *************** function _Sensor_RawSample_Update *****************
  8402 ;; Defined at:
  8403 ;;		line 782 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;  sensor          1    wreg     PTR struct .
  8406 ;;		 -> mtouch_sensor(36), 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  sensor          1    8[COMMON] PTR struct .
  8409 ;;		 -> mtouch_sensor(36), 
  8410 ;;  adcIndex        1    7[COMMON] unsigned char 
  8411 ;; Return value:  Size  Location     Type
  8412 ;;                  1    wreg      void 
  8413 ;; Registers used:
  8414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8415 ;; Tracked objects:
  8416 ;;		On entry : 0/0
  8417 ;;		On exit  : 0/0
  8418 ;;		Unchanged: 0/0
  8419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8420 ;;      Params:         0       0       0       0       0       0       0       0
  8421 ;;      Locals:         2       0       0       0       0       0       0       0
  8422 ;;      Temps:          1       0       0       0       0       0       0       0
  8423 ;;      Totals:         3       0       0       0       0       0       0       0
  8424 ;;Total ram usage:        3 bytes
  8425 ;; Hardware stack levels used:    1
  8426 ;; Hardware stack levels required when called:    5
  8427 ;; This function calls:
  8428 ;;		_Sensor_getScanGroupIndex
  8429 ;; This function is called by:
  8430 ;;		_Sensor_Service
  8431 ;; This function uses a non-reentrant model
  8432 ;;
  8433                           
  8434                           
  8435                           ;psect for function _Sensor_RawSample_Update
  8436  1728                     _Sensor_RawSample_Update:	
  8437                           
  8438                           ;incstack = 0
  8439                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8440                           ;Sensor_RawSample_Update@sensor stored from wreg
  8441  1728  00F8               	movwf	Sensor_RawSample_Update@sensor
  8442                           
  8443                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 783: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 784:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  8444  1729  0878               	movf	Sensor_RawSample_Update@sensor,w
  8445  172A  3197  27A5  3197   	fcall	_Sensor_getScanGroupIndex
  8446  172D  00F6               	movwf	??_Sensor_RawSample_Update
  8447  172E  0876               	movf	??_Sensor_RawSample_Update,w
  8448  172F  00F7               	movwf	Sensor_RawSample_Update@adcIndex
  8449                           
  8450                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 786:     if (INTCONbits.GIE == (uint8_t)1)
  8451  1730  1F8B               	btfss	11,7	;volatile
  8452  1731  2F42               	goto	l5900
  8453                           
  8454                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 787:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 788:         INTCONbits.GIE = (uint8_t)0;
  8455  1732  138B               	bcf	11,7	;volatile
  8456                           
  8457                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  8458  1733  3577               	lslf	Sensor_RawSample_Update@adcIndex,w
  8459  1734  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
  8460  1735  0086               	movwf	6
  8461  1736  0187               	clrf	7
  8462  1737  0878               	movf	Sensor_RawSample_Update@sensor,w
  8463  1738  3E06               	addlw	6
  8464  1739  0084               	movwf	4
  8465  173A  3001               	movlw	1	; select bank2/3
  8466  173B  0085               	movwf	5
  8467  173C  3F40               	moviw [0]fsr1
  8468  173D  3F80               	movwi [0]fsr0
  8469  173E  3F41               	moviw [1]fsr1
  8470  173F  3F81               	movwi [1]fsr0
  8471                           
  8472                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:         INTCONbits.GIE = (uint8_t)1;
  8473  1740  178B               	bsf	11,7	;volatile
  8474                           
  8475                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 791:     }
  8476  1741  0008               	return
  8477  1742                     l5900:	
  8478                           
  8479                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 793:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 794:         sensor->rawSample = packet_sample[adcIndex];
  8480  1742  3577               	lslf	Sensor_RawSample_Update@adcIndex,w
  8481  1743  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
  8482  1744  0086               	movwf	6
  8483  1745  0187               	clrf	7
  8484  1746  0878               	movf	Sensor_RawSample_Update@sensor,w
  8485  1747  3E06               	addlw	6
  8486  1748  0084               	movwf	4
  8487  1749  3001               	movlw	1	; select bank2/3
  8488  174A  0085               	movwf	5
  8489  174B  3F40               	moviw [0]fsr1
  8490  174C  3F80               	movwi [0]fsr0
  8491  174D  3F41               	moviw [1]fsr1
  8492  174E  3F81               	movwi [1]fsr0
  8493  174F  0008               	return
  8494  1750                     __end_of_Sensor_RawSample_Update:	
  8495                           
  8496                           	psect	text43
  8497  135C                     __ptext43:	
  8498 ;; *************** function _Sensor_DefaultCallback *****************
  8499 ;; Defined at:
  8500 ;;		line 803 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8501 ;; Parameters:    Size  Location     Type
  8502 ;;  sensor          1    2[COMMON] enum E2871
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;		None
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  1    wreg      void 
  8507 ;; Registers used:
  8508 ;;		None
  8509 ;; Tracked objects:
  8510 ;;		On entry : 0/0
  8511 ;;		On exit  : 0/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8514 ;;      Params:         1       0       0       0       0       0       0       0
  8515 ;;      Locals:         0       0       0       0       0       0       0       0
  8516 ;;      Temps:          0       0       0       0       0       0       0       0
  8517 ;;      Totals:         1       0       0       0       0       0       0       0
  8518 ;;Total ram usage:        1 bytes
  8519 ;; Hardware stack levels used:    1
  8520 ;; Hardware stack levels required when called:    4
  8521 ;; This function calls:
  8522 ;;		Nothing
  8523 ;; This function is called by:
  8524 ;;		_Sensor_Service
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           
  8529                           ;psect for function _Sensor_DefaultCallback
  8530  135C                     _Sensor_DefaultCallback:	
  8531                           
  8532                           ;incstack = 0
  8533                           ; Regs used in _Sensor_DefaultCallback: []
  8534  135C  0008               	return
  8535  135D                     __end_of_Sensor_DefaultCallback:	
  8536                           
  8537                           	psect	text44
  8538  0AAB                     __ptext44:	
  8539 ;; *************** function _Sensor_Acquisition *****************
  8540 ;; Defined at:
  8541 ;;		line 360 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;  sensor_adc1     1    wreg     PTR struct .
  8544 ;;		 -> mtouch_sensor(36), 
  8545 ;;  sensor_adc2     1   32[BANK0 ] PTR struct .
  8546 ;;		 -> mtouch_sensor(36), 
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;  sensor_adc1     1   35[BANK0 ] PTR struct .
  8549 ;;		 -> mtouch_sensor(36), 
  8550 ;;  retry           1   34[BANK0 ] unsigned char 
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  1    wreg      enum E2876
  8553 ;; Registers used:
  8554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8560 ;;      Params:         0       1       0       0       0       0       0       0
  8561 ;;      Locals:         0       2       0       0       0       0       0       0
  8562 ;;      Temps:          0       1       0       0       0       0       0       0
  8563 ;;      Totals:         0       4       0       0       0       0       0       0
  8564 ;;Total ram usage:        4 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    8
  8567 ;; This function calls:
  8568 ;;		_Sensor_Acq_ExecutePacket
  8569 ;;		_Sensor_Scanfrequency_Evaluation
  8570 ;;		_Sensor_isActive
  8571 ;;		_Sensor_isCalibrated
  8572 ;;		_Sensor_postAcquisitionProcess
  8573 ;; This function is called by:
  8574 ;;		_Sensor_Service
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           
  8579                           ;psect for function _Sensor_Acquisition
  8580  0AAB                     _Sensor_Acquisition:	
  8581                           
  8582                           ;incstack = 0
  8583                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8584                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  8585  0AAB  0020               	movlb	0	; select bank0
  8586  0AAC  00C3               	movwf	Sensor_Acquisition@sensor_adc1
  8587                           
  8588                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 361: {;mcc_generated_files/mtouch/mtouch_sensor.c: 362:     
      +                          uint8_t retry = (uint8_t)5;
  8589  0AAD  3005               	movlw	5
  8590  0AAE  00C1               	movwf	??_Sensor_Acquisition
  8591  0AAF  0841               	movf	??_Sensor_Acquisition,w
  8592  0AB0  00C2               	movwf	Sensor_Acquisition@retry
  8593                           
  8594                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 365:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  8595  0AB1  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8596  0AB2  1D03               	btfss	3,2
  8597  0AB3  2AC1               	goto	l5864
  8598  0AB4  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8599  0AB5  1D03               	btfss	3,2
  8600  0AB6  2AC1               	goto	l5864
  8601                           
  8602                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 366:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 367:         return MTOUCH_SENSOR_ERROR_invalid_index;
  8603  0AB7  30FF               	movlw	255
  8604  0AB8  0008               	return
  8605  0AB9                     l5858:	
  8606                           
  8607                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 376:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 377:         retry--;
  8608  0AB9  3001               	movlw	1
  8609  0ABA  0020               	movlb	0	; select bank0
  8610  0ABB  02C2               	subwf	Sensor_Acquisition@retry,f
  8611                           
  8612                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:         if(retry == 0)
  8613  0ABC  0842               	movf	Sensor_Acquisition@retry,w
  8614  0ABD  1D03               	btfss	3,2
  8615  0ABE  2AC1               	goto	l5864
  8616                           
  8617                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 379:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 380:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8618  0ABF  30FC               	movlw	252
  8619  0AC0  0008               	return
  8620  0AC1                     l5864:	
  8621                           
  8622                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 375:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  8623  0AC1  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8624  0AC2  00C1               	movwf	??_Sensor_Acquisition
  8625  0AC3  0841               	movf	??_Sensor_Acquisition,w
  8626  0AC4  00A4               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8627  0AC5  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8628  0AC6  3182  228B  318A   	fcall	_Sensor_Acq_ExecutePacket
  8629  0AC9  3A00               	xorlw	0
  8630  0ACA  1D03               	skipz
  8631  0ACB  2AB9               	goto	l5858
  8632                           
  8633                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 384:     if(sensor_adc1 != ((void*)0))
  8634  0ACC  0020               	movlb	0	; select bank0
  8635  0ACD  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8636  0ACE  1903               	btfsc	3,2
  8637  0ACF  2AD4               	goto	l5870
  8638                           
  8639                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 386:         Sensor_postAcquisitionProcess(sensor_adc1);
  8640  0AD0  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8641  0AD1  3189  2134  318A   	fcall	_Sensor_postAcquisitionProcess
  8642  0AD4                     l5870:	
  8643                           
  8644                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 389:     if(sensor_adc2 !=((void*)0))
  8645  0AD4  0020               	movlb	0	; select bank0
  8646  0AD5  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8647  0AD6  1903               	btfsc	3,2
  8648  0AD7  2ADC               	goto	l5874
  8649                           
  8650                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 391:         Sensor_postAcquisitionProcess(sensor_adc2);
  8651  0AD8  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8652  0AD9  3189  2134  318A   	fcall	_Sensor_postAcquisitionProcess
  8653  0ADC                     l5874:	
  8654                           
  8655                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 394:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  8656  0ADC  0020               	movlb	0	; select bank0
  8657  0ADD  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8658  0ADE  3194  242D  318A   	fcall	_Sensor_isActive
  8659  0AE1  3A00               	xorlw	0
  8660  0AE2  1903               	skipnz
  8661  0AE3  2AEC               	goto	l5878
  8662  0AE4  0020               	movlb	0	; select bank0
  8663  0AE5  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8664  0AE6  3193  23EE  318A   	fcall	_Sensor_isCalibrated
  8665  0AE9  3A00               	xorlw	0
  8666  0AEA  1D03               	skipz
  8667  0AEB  2AFC               	goto	l5882
  8668  0AEC                     l5878:	
  8669  0AEC  0020               	movlb	0	; select bank0
  8670  0AED  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8671  0AEE  3194  242D  318A   	fcall	_Sensor_isActive
  8672  0AF1  3A00               	xorlw	0
  8673  0AF2  1903               	skipnz
  8674  0AF3  2B05               	goto	l5886
  8675  0AF4  0020               	movlb	0	; select bank0
  8676  0AF5  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8677  0AF6  3193  23EE  318A   	fcall	_Sensor_isCalibrated
  8678  0AF9  3A00               	xorlw	0
  8679  0AFA  1903               	skipnz
  8680  0AFB  2B05               	goto	l5886
  8681  0AFC                     l5882:	
  8682                           
  8683                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 397:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  8684  0AFC  0020               	movlb	0	; select bank0
  8685  0AFD  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8686  0AFE  00C1               	movwf	??_Sensor_Acquisition
  8687  0AFF  0841               	movf	??_Sensor_Acquisition,w
  8688  0B00  00B3               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  8689  0B01  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8690  0B02  318B  2369         	fcall	_Sensor_Scanfrequency_Evaluation
  8691  0B04  0008               	return
  8692  0B05                     l5886:	
  8693                           
  8694                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 400:     return MTOUCH_SENSOR_ERROR_none;
  8695  0B05  3000               	movlw	0
  8696  0B06  0008               	return
  8697  0B07                     __end_of_Sensor_Acquisition:	
  8698                           
  8699                           	psect	text45
  8700  0934                     __ptext45:	
  8701 ;; *************** function _Sensor_postAcquisitionProcess *****************
  8702 ;; Defined at:
  8703 ;;		line 403 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;  sensor          1    wreg     PTR struct .
  8706 ;;		 -> mtouch_sensor(36), 
  8707 ;; Auto vars:     Size  Location     Type
  8708 ;;  sensor          1    3[BANK0 ] PTR struct .
  8709 ;;		 -> mtouch_sensor(36), 
  8710 ;;  deviation       2    1[BANK0 ] unsigned short 
  8711 ;;  adcIndex        1    0[BANK0 ] unsigned char 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  1    wreg      void 
  8714 ;; Registers used:
  8715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8721 ;;      Params:         0       0       0       0       0       0       0       0
  8722 ;;      Locals:         0       4       0       0       0       0       0       0
  8723 ;;      Temps:          1       0       0       0       0       0       0       0
  8724 ;;      Totals:         1       4       0       0       0       0       0       0
  8725 ;;Total ram usage:        5 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    5
  8728 ;; This function calls:
  8729 ;;		_Sensor_getScanGroupIndex
  8730 ;;		_Sensor_isEnabled
  8731 ;;		_Sensor_setActive
  8732 ;;		_Sensor_setInactive
  8733 ;;		_abs
  8734 ;; This function is called by:
  8735 ;;		_Sensor_Acquisition
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           
  8740                           ;psect for function _Sensor_postAcquisitionProcess
  8741  0934                     _Sensor_postAcquisitionProcess:	
  8742                           
  8743                           ;incstack = 0
  8744                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8745                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  8746  0934  0020               	movlb	0	; select bank0
  8747  0935  00A3               	movwf	Sensor_postAcquisitionProcess@sensor
  8748                           
  8749                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 403: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 404: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 405:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 406:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  8750  0936  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8751  0937  3197  27A5  3189   	fcall	_Sensor_getScanGroupIndex
  8752  093A  00F6               	movwf	??_Sensor_postAcquisitionProcess
  8753  093B  0876               	movf	??_Sensor_postAcquisitionProcess,w
  8754  093C  0020               	movlb	0	; select bank0
  8755  093D  00A0               	movwf	Sensor_postAcquisitionProcess@adcIndex
  8756                           
  8757                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     if(Sensor_isEnabled(sensor))
  8758  093E  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8759  093F  3194  24E8  3189   	fcall	_Sensor_isEnabled
  8760  0942  3A00               	xorlw	0
  8761  0943  1903               	skipnz
  8762  0944  295F               	goto	l5752
  8763                           
  8764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  8765  0945  0020               	movlb	0	; select bank0
  8766  0946  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8767  0947  3E06               	addlw	6
  8768  0948  0086               	movwf	6
  8769  0949  3001               	movlw	1	; select bank2/3
  8770  094A  0087               	movwf	7
  8771  094B  3520               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  8772  094C  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
  8773  094D  0084               	movwf	4
  8774  094E  0185               	clrf	5
  8775  094F  3F40               	moviw [0]fsr1
  8776  0950  0200               	subwf	0,w
  8777  0951  00F2               	movwf	abs@a
  8778  0952  3101               	addfsr 0,1
  8779  0953  3F41               	moviw [1]fsr1
  8780  0954  3B00               	subwfb	0,w
  8781  0955  00F3               	movwf	abs@a+1
  8782  0956  3195  25AD  3189   	fcall	_abs
  8783  0959  0873               	movf	?_abs+1,w
  8784  095A  0020               	movlb	0	; select bank0
  8785  095B  00A2               	movwf	Sensor_postAcquisitionProcess@deviation+1
  8786  095C  0872               	movf	?_abs,w
  8787  095D  00A1               	movwf	Sensor_postAcquisitionProcess@deviation
  8788  095E  2962               	goto	l5754
  8789  095F                     l5752:	
  8790                           
  8791                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 411:         deviation = 0;
  8792  095F  0020               	movlb	0	; select bank0
  8793  0960  01A1               	clrf	Sensor_postAcquisitionProcess@deviation
  8794  0961  01A2               	clrf	Sensor_postAcquisitionProcess@deviation+1
  8795  0962                     l5754:	
  8796                           
  8797                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 413:     if(deviation > 100u)
  8798  0962  3000               	movlw	0
  8799  0963  0222               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  8800  0964  3065               	movlw	101
  8801  0965  1903               	skipnz
  8802  0966  0221               	subwf	Sensor_postAcquisitionProcess@deviation,w
  8803  0967  1C03               	skipc
  8804  0968  296D               	goto	l5758
  8805                           
  8806                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 414:         Sensor_setActive(sensor);
  8807  0969  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8808  096A  3193  23BD         	fcall	_Sensor_setActive
  8809  096C  0008               	return
  8810  096D                     l5758:	
  8811                           
  8812                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 416:         Sensor_setInactive(sensor);
  8813  096D  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8814  096E  3193  23C5         	fcall	_Sensor_setInactive
  8815  0970  0008               	return
  8816  0971                     __end_of_Sensor_postAcquisitionProcess:	
  8817                           
  8818                           	psect	text46
  8819  13C5                     __ptext46:	
  8820 ;; *************** function _Sensor_setInactive *****************
  8821 ;; Defined at:
  8822 ;;		line 840 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  sensor          1    wreg     PTR struct .
  8825 ;;		 -> mtouch_sensor(36), 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  sensor          1    2[COMMON] PTR struct .
  8828 ;;		 -> mtouch_sensor(36), 
  8829 ;; Return value:  Size  Location     Type
  8830 ;;                  1    wreg      void 
  8831 ;; Registers used:
  8832 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8833 ;; Tracked objects:
  8834 ;;		On entry : 0/0
  8835 ;;		On exit  : 0/0
  8836 ;;		Unchanged: 0/0
  8837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8838 ;;      Params:         0       0       0       0       0       0       0       0
  8839 ;;      Locals:         1       0       0       0       0       0       0       0
  8840 ;;      Temps:          0       0       0       0       0       0       0       0
  8841 ;;      Totals:         1       0       0       0       0       0       0       0
  8842 ;;Total ram usage:        1 bytes
  8843 ;; Hardware stack levels used:    1
  8844 ;; Hardware stack levels required when called:    4
  8845 ;; This function calls:
  8846 ;;		Nothing
  8847 ;; This function is called by:
  8848 ;;		_Sensor_postAcquisitionProcess
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           
  8853                           ;psect for function _Sensor_setInactive
  8854  13C5                     _Sensor_setInactive:	
  8855                           
  8856                           ;incstack = 0
  8857                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8858                           ;Sensor_setInactive@sensor stored from wreg
  8859  13C5  00F2               	movwf	Sensor_setInactive@sensor
  8860                           
  8861                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 840: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 84
      +                          1: {;mcc_generated_files/mtouch/mtouch_sensor.c: 842:     sensor->active = 0;
  8862  13C6  0872               	movf	Sensor_setInactive@sensor,w
  8863  13C7  3E08               	addlw	8
  8864  13C8  0086               	movwf	6
  8865  13C9  3001               	movlw	1	; select bank2/3
  8866  13CA  0087               	movwf	7
  8867  13CB  1081               	bcf	1,1
  8868  13CC  0008               	return
  8869  13CD                     __end_of_Sensor_setInactive:	
  8870                           
  8871                           	psect	text47
  8872  13BD                     __ptext47:	
  8873 ;; *************** function _Sensor_setActive *****************
  8874 ;; Defined at:
  8875 ;;		line 835 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;  sensor          1    wreg     PTR struct .
  8878 ;;		 -> mtouch_sensor(36), 
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;  sensor          1    2[COMMON] PTR struct .
  8881 ;;		 -> mtouch_sensor(36), 
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  1    wreg      void 
  8884 ;; Registers used:
  8885 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8891 ;;      Params:         0       0       0       0       0       0       0       0
  8892 ;;      Locals:         1       0       0       0       0       0       0       0
  8893 ;;      Temps:          0       0       0       0       0       0       0       0
  8894 ;;      Totals:         1       0       0       0       0       0       0       0
  8895 ;;Total ram usage:        1 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    4
  8898 ;; This function calls:
  8899 ;;		Nothing
  8900 ;; This function is called by:
  8901 ;;		_Sensor_postAcquisitionProcess
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           
  8906                           ;psect for function _Sensor_setActive
  8907  13BD                     _Sensor_setActive:	
  8908                           
  8909                           ;incstack = 0
  8910                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8911                           ;Sensor_setActive@sensor stored from wreg
  8912  13BD  00F2               	movwf	Sensor_setActive@sensor
  8913                           
  8914                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 835: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 836:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 837:     sensor->active = 1;
  8915  13BE  0872               	movf	Sensor_setActive@sensor,w
  8916  13BF  3E08               	addlw	8
  8917  13C0  0086               	movwf	6
  8918  13C1  3001               	movlw	1	; select bank2/3
  8919  13C2  0087               	movwf	7
  8920  13C3  1481               	bsf	1,1
  8921  13C4  0008               	return
  8922  13C5                     __end_of_Sensor_setActive:	
  8923                           
  8924                           	psect	text48
  8925  0B69                     __ptext48:	
  8926 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  8927 ;; Defined at:
  8928 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  sensor_adc1     1    wreg     PTR struct .
  8931 ;;		 -> mtouch_sensor(36), 
  8932 ;;  sensor_adc2     1   19[BANK0 ] PTR struct .
  8933 ;;		 -> mtouch_sensor(36), 
  8934 ;; Auto vars:     Size  Location     Type
  8935 ;;  sensor_adc1     1   22[BANK0 ] PTR struct .
  8936 ;;		 -> mtouch_sensor(36), 
  8937 ;;  best_packet_    4   27[BANK0 ] unsigned short [2]
  8938 ;;  packet_noise    2   23[BANK0 ] unsigned short 
  8939 ;;  i               1   31[BANK0 ] unsigned char 
  8940 ;;  retry           1   26[BANK0 ] unsigned char 
  8941 ;;  best_sample_    1   25[BANK0 ] unsigned char 
  8942 ;; Return value:  Size  Location     Type
  8943 ;;                  1    wreg      enum E2876
  8944 ;; Registers used:
  8945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8946 ;; Tracked objects:
  8947 ;;		On entry : 0/0
  8948 ;;		On exit  : 0/0
  8949 ;;		Unchanged: 0/0
  8950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8951 ;;      Params:         0       1       0       0       0       0       0       0
  8952 ;;      Locals:         0      10       0       0       0       0       0       0
  8953 ;;      Temps:          0       2       0       0       0       0       0       0
  8954 ;;      Totals:         0      13       0       0       0       0       0       0
  8955 ;;Total ram usage:       13 bytes
  8956 ;; Hardware stack levels used:    1
  8957 ;; Hardware stack levels required when called:    7
  8958 ;; This function calls:
  8959 ;;		_Sensor_Acq_ExecutePacket
  8960 ;; This function is called by:
  8961 ;;		_Sensor_Acquisition
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           
  8966                           ;psect for function _Sensor_Scanfrequency_Evaluation
  8967  0B69                     _Sensor_Scanfrequency_Evaluation:	
  8968                           
  8969                           ;incstack = 0
  8970                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8971                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  8972  0B69  0020               	movlb	0	; select bank0
  8973  0B6A  00B6               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  8974                           
  8975                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 718: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 719:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 720:     const uint8
      +                          _t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/mtouch_sensor.c: 721: 
      +                              mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_files/mtouch/mtouch_sens
      +                          or.c: 722:     mtouch_sensor_sampleperiod_t best_sample_period;
  8976  0B6B  0860               	movf	_packet_noise+1,w
  8977  0B6C  00B5               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  8978  0B6D  085F               	movf	_packet_noise,w
  8979  0B6E  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  8980  0B6F  36B5               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8981  0B70  0CB4               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8982  0B71  36B5               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8983  0B72  0CB4               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8984  0B73  085F               	movf	_packet_noise,w
  8985  0B74  0734               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  8986  0B75  00B7               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8987  0B76  0860               	movf	_packet_noise+1,w
  8988  0B77  3D35               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  8989  0B78  00B8               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8990                           
  8991                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 727:     best_sample_period = sample_period
      +                          ;
  8992  0B79  086F               	movf	_sample_period,w
  8993  0B7A  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  8994  0B7B  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8995  0B7C  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8996                           
  8997                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  8998  0B7D  0856               	movf	_packet_sample+1,w
  8999  0B7E  00BC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  9000  0B7F  0855               	movf	_packet_sample,w
  9001  0B80  00BB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  9002                           
  9003                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 729:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  9004  0B81  0858               	movf	_packet_sample+3,w
  9005  0B82  00BE               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  9006  0B83  0857               	movf	_packet_sample+2,w
  9007  0B84  00BD               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  9008                           
  9009                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 731:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  9010  0B85  01BF               	clrf	Sensor_Scanfrequency_Evaluation@i
  9011  0B86                     l5774:	
  9012                           
  9013                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 732:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 733:         sample_period += frequency_hop[i];
  9014  0B86  083F               	movf	Sensor_Scanfrequency_Evaluation@i,w
  9015  0B87  3E0F               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  9016  0B88  0084               	movwf	4
  9017  0B89  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  9018  0B8A  1803               	skipnc
  9019  0B8B  3E01               	addlw	1
  9020  0B8C  0085               	movwf	5
  9021  0B8D  0800               	movf	0,w	;code access
  9022  0B8E  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9023  0B8F  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9024  0B90  07EF               	addwf	_sample_period,f
  9025                           
  9026                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 734:         if(sample_period >= 255)
  9027  0B91  0A6F               	incf	_sample_period,w
  9028  0B92  1D03               	btfss	3,2
  9029  0B93  2B97               	goto	l5780
  9030                           
  9031                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 735:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 736:             sample_period-=((mtouch_sensor_sampleperiod_t)255);
  9032  0B94  30FF               	movlw	255
  9033  0B95  02EF               	subwf	_sample_period,f
  9034  0B96  2B9B               	goto	l5782
  9035  0B97                     l5780:	
  9036                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 738:         }
  9037                           
  9038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 737:             sample_period+=((mtouch_se
      +                          nsor_sampleperiod_t)(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_t
      +                          ime_t)110);
  9039                           
  9040  0B97  30AE               	movlw	174
  9041  0B98  026F               	subwf	_sample_period,w
  9042  0B99  1803               	skipnc
  9043  0B9A  2B9F               	goto	l5784
  9044  0B9B                     l5782:	
  9045                           
  9046                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 740:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 741:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  9047  0B9B  30AE               	movlw	174
  9048  0B9C  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9049  0B9D  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9050  0B9E  07EF               	addwf	_sample_period,f
  9051  0B9F                     l5784:	
  9052                           
  9053                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:         retry = (uint8_t)5;
  9054  0B9F  3005               	movlw	5
  9055  0BA0  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9056  0BA1  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9057  0BA2  00BA               	movwf	Sensor_Scanfrequency_Evaluation@retry
  9058  0BA3                     l5792:	
  9059                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 746:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  9060                           
  9061                           
  9062                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 746:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  9063  0BA3  0833               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  9064  0BA4  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9065  0BA5  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9066  0BA6  00A4               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  9067  0BA7  0836               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  9068  0BA8  3182  228B  318B   	fcall	_Sensor_Acq_ExecutePacket
  9069  0BAB  3A00               	xorlw	0
  9070  0BAC  1903               	btfsc	3,2
  9071  0BAD  2BB6               	goto	l5794
  9072                           
  9073                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 748:             retry--;
  9074  0BAE  3001               	movlw	1
  9075  0BAF  0020               	movlb	0	; select bank0
  9076  0BB0  02BA               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  9077                           
  9078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 749:             if(retry == 0)
  9079  0BB1  083A               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  9080  0BB2  1D03               	btfss	3,2
  9081  0BB3  2BA3               	goto	l5792
  9082                           
  9083                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 751:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  9084  0BB4  30FC               	movlw	252
  9085  0BB5  0008               	return
  9086  0BB6                     l5794:	
  9087                           
  9088                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:         if(packet_noise_Max < packet_n
      +                          oise)
  9089  0BB6  0020               	movlb	0	; select bank0
  9090  0BB7  0860               	movf	_packet_noise+1,w
  9091  0BB8  0238               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  9092  0BB9  1D03               	skipz
  9093  0BBA  2BBD               	goto	u4115
  9094  0BBB  085F               	movf	_packet_noise,w
  9095  0BBC  0237               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  9096  0BBD                     u4115:	
  9097  0BBD  1803               	skipnc
  9098  0BBE  2BCF               	goto	l5798
  9099                           
  9100                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             packet_noise_Max = packet_noise;
  9101  0BBF  0860               	movf	_packet_noise+1,w
  9102  0BC0  00B8               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  9103  0BC1  085F               	movf	_packet_noise,w
  9104  0BC2  00B7               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  9105                           
  9106                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:             best_sample_period = sampl
      +                          e_period;
  9107  0BC3  086F               	movf	_sample_period,w
  9108  0BC4  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9109  0BC5  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9110  0BC6  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  9111                           
  9112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 759:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  9113  0BC7  0856               	movf	_packet_sample+1,w
  9114  0BC8  00BC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  9115  0BC9  0855               	movf	_packet_sample,w
  9116  0BCA  00BB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  9117                           
  9118                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  9119  0BCB  0858               	movf	_packet_sample+3,w
  9120  0BCC  00BE               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  9121  0BCD  0857               	movf	_packet_sample+2,w
  9122  0BCE  00BD               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  9123  0BCF                     l5798:	
  9124                           
  9125                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:     }
  9126  0BCF  3001               	movlw	1
  9127  0BD0  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9128  0BD1  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9129  0BD2  07BF               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  9130  0BD3  3005               	movlw	5
  9131  0BD4  023F               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  9132  0BD5  1C03               	skipc
  9133  0BD6  2B86               	goto	l5774
  9134                           
  9135                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:     sample_period = best_sample_period
      +                          ;
  9136  0BD7  0839               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  9137  0BD8  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9138  0BD9  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9139  0BDA  00EF               	movwf	_sample_period
  9140                           
  9141                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  9142  0BDB  083C               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  9143  0BDC  00D6               	movwf	_packet_sample+1
  9144  0BDD  083B               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  9145  0BDE  00D5               	movwf	_packet_sample
  9146                           
  9147                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  9148  0BDF  083E               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  9149  0BE0  00D8               	movwf	_packet_sample+3
  9150  0BE1  083D               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  9151  0BE2  00D7               	movwf	_packet_sample+2
  9152                           
  9153                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 768:     return MTOUCH_SENSOR_ERROR_none;
  9154  0BE3  3000               	movlw	0
  9155  0BE4  0008               	return
  9156  0BE5                     __end_of_Sensor_Scanfrequency_Evaluation:	
  9157                           
  9158                           	psect	text49
  9159  028B                     __ptext49:	
  9160 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  9161 ;; Defined at:
  9162 ;;		line 455 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;  sensor_adc1     1    wreg     PTR struct .
  9165 ;;		 -> mtouch_sensor(36), 
  9166 ;;  sensor_adc2     1    4[BANK0 ] PTR struct .
  9167 ;;		 -> mtouch_sensor(36), 
  9168 ;; Auto vars:     Size  Location     Type
  9169 ;;  sensor_adc1     1   18[BANK0 ] PTR struct .
  9170 ;;		 -> mtouch_sensor(36), 
  9171 ;;  last_b          2   15[BANK0 ] unsigned short 
  9172 ;;  last_a          2   13[BANK0 ] unsigned short 
  9173 ;;  packet_count    1   17[BANK0 ] unsigned char 
  9174 ;;  activeSensor    1   12[BANK0 ] unsigned char 
  9175 ;;  ADxIF_flag      1   11[BANK0 ] unsigned char 
  9176 ;;  sensor2Force    1   10[BANK0 ] unsigned char 
  9177 ;;  sensor1Force    1    9[BANK0 ] unsigned char 
  9178 ;;  AD2CON2_temp    1    8[BANK0 ] unsigned char 
  9179 ;;  AD1CON2_temp    1    7[BANK0 ] unsigned char 
  9180 ;;  ADCOMCON_tem    1    6[BANK0 ] unsigned char 
  9181 ;; Return value:  Size  Location     Type
  9182 ;;                  1    wreg      enum E2876
  9183 ;; Registers used:
  9184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9190 ;;      Params:         0       1       0       0       0       0       0       0
  9191 ;;      Locals:         0      13       0       0       0       0       0       0
  9192 ;;      Temps:          0       1       0       0       0       0       0       0
  9193 ;;      Totals:         0      15       0       0       0       0       0       0
  9194 ;;Total ram usage:       15 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    6
  9197 ;; This function calls:
  9198 ;;		_MTOUCH_Sensor_Scan_Initialize
  9199 ;;		_Sensor_autoCalibration
  9200 ;;		_Sensor_isActive
  9201 ;;		_Sensor_isCalibrated
  9202 ;;		_Sensor_isEnabled
  9203 ;;		_Sensor_loadADCSettings
  9204 ;;		_TMR2_LoadPeriodRegister
  9205 ;;		_TMR2_StartTimer
  9206 ;;		_TMR2_StopTimer
  9207 ;;		_abs
  9208 ;; This function is called by:
  9209 ;;		_Sensor_Acquisition
  9210 ;;		_Sensor_Scanfrequency_Evaluation
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _Sensor_Acq_ExecutePacket
  9216  028B                     _Sensor_Acq_ExecutePacket:	
  9217                           
  9218                           ;incstack = 0
  9219                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9220                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  9221  028B  0020               	movlb	0	; select bank0
  9222  028C  00B2               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  9223                           
  9224                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 460:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  9225  028D  01AD               	clrf	Sensor_Acq_ExecutePacket@last_a
  9226  028E  01AE               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  9227                           
  9228                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  9229  028F  01AF               	clrf	Sensor_Acq_ExecutePacket@last_b
  9230  0290  01B0               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  9231                           
  9232                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 462:     uint8_t activeSensor = 0;
  9233  0291  01AC               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  9234                           
  9235                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 464:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 465:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 471:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  9236  0292  01A9               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  9237  0293  01AA               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  9238                           
  9239                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 472:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  9240  0294  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9241  0295  1903               	btfsc	3,2
  9242  0296  2AD1               	goto	l5546
  9243  0297  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9244  0298  1903               	btfsc	3,2
  9245  0299  2AD1               	goto	l5546
  9246                           
  9247                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 473:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 474:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  9248  029A  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9249  029B  3E08               	addlw	8
  9250  029C  0086               	movwf	6
  9251  029D  3001               	movlw	1	; select bank2/3
  9252  029E  0087               	movwf	7
  9253  029F  1981               	btfsc	1,3
  9254  02A0  2AB1               	goto	l5528
  9255  02A1  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9256  02A2  3E08               	addlw	8
  9257  02A3  0086               	movwf	6
  9258  02A4  3001               	movlw	1	; select bank2/3
  9259  02A5  0087               	movwf	7
  9260  02A6  1D81               	btfss	1,3
  9261  02A7  2AB1               	goto	l5528
  9262                           
  9263                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 475:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 476:             sensor_adc1->enabled = 1;
  9264  02A8  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9265  02A9  3E08               	addlw	8
  9266  02AA  0086               	movwf	6
  9267  02AB  3001               	movlw	1	; select bank2/3
  9268  02AC  0087               	movwf	7
  9269  02AD  1581               	bsf	1,3
  9270                           
  9271                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:             sensor1ForceEnabled = 1;
  9272  02AE  01A9               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  9273  02AF  0AA9               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  9274                           
  9275                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:         }
  9276  02B0  2AE6               	goto	l5570
  9277  02B1                     l5528:	
  9278  02B1  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9279  02B2  3E08               	addlw	8
  9280  02B3  0086               	movwf	6
  9281  02B4  3001               	movlw	1	; select bank2/3
  9282  02B5  0087               	movwf	7
  9283  02B6  1981               	btfsc	1,3
  9284  02B7  2AC8               	goto	l5536
  9285  02B8  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9286  02B9  3E08               	addlw	8
  9287  02BA  0086               	movwf	6
  9288  02BB  3001               	movlw	1	; select bank2/3
  9289  02BC  0087               	movwf	7
  9290  02BD  1D81               	btfss	1,3
  9291  02BE  2AC8               	goto	l5536
  9292                           
  9293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 481:             sensor_adc2->enabled = 1;
  9294  02BF  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9295  02C0  3E08               	addlw	8
  9296  02C1  0086               	movwf	6
  9297  02C2  3001               	movlw	1	; select bank2/3
  9298  02C3  0087               	movwf	7
  9299  02C4  1581               	bsf	1,3
  9300                           
  9301                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:             sensor2ForceEnabled = 1;
  9302  02C5  01AA               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  9303  02C6  0AAA               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  9304                           
  9305                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 483:         }
  9306  02C7  2AE6               	goto	l5570
  9307  02C8                     l5536:	
  9308  02C8  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9309  02C9  3E08               	addlw	8
  9310  02CA  0086               	movwf	6
  9311  02CB  3001               	movlw	1	; select bank2/3
  9312  02CC  0087               	movwf	7
  9313  02CD  1981               	btfsc	1,3
  9314  02CE  2AE6               	goto	l5570
  9315  02CF                     l5538:	
  9316  02CF  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9317  02D0  2ADE               	goto	L4
  9318  02D1                     l5546:	
  9319                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:     }
  9320                           
  9321  02D1  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9322  02D2  1D03               	btfss	3,2
  9323  02D3  2AD7               	goto	l5558
  9324  02D4  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9325  02D5  1D03               	btfss	3,2
  9326  02D6  2ACF               	goto	l5538
  9327  02D7                     l5558:	
  9328                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 494:         if(sensor_adc2->enabled == 0)
  9329                           
  9330  02D7  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9331  02D8  1903               	btfsc	3,2
  9332  02D9  2AE6               	goto	l5570
  9333  02DA  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9334  02DB  1D03               	btfss	3,2
  9335  02DC  2AE6               	goto	l5570
  9336                           
  9337                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 503:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 504:         if(sensor_adc1->enabled == 0)
  9338  02DD  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9339  02DE                     L4:	
  9340  02DE  3E08               	addlw	8
  9341  02DF  0086               	movwf	6
  9342  02E0  3001               	movlw	1	; select bank2/3
  9343  02E1  0087               	movwf	7
  9344  02E2  1981               	btfsc	1,3
  9345  02E3  2AE6               	goto	l5570
  9346  02E4                     l5540:	
  9347                           
  9348                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 486:             return MTOUCH_SENSOR_ERROR_none;
  9349  02E4  3000               	movlw	0
  9350  02E5  0008               	return
  9351  02E6                     l5570:	
  9352                           
  9353                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 516:     if(Sensor_isActive(sensor_adc2))
  9354  02E6  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9355  02E7  3194  242D  3182   	fcall	_Sensor_isActive
  9356  02EA  3A00               	xorlw	0
  9357  02EB  1903               	skipnz
  9358  02EC  2AF0               	goto	l5574
  9359                           
  9360                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 517:         activeSensor = 1;
  9361  02ED  0020               	movlb	0	; select bank0
  9362  02EE  01AC               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  9363  02EF  0AAC               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  9364  02F0                     l5574:	
  9365                           
  9366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 523:     ADCOMCON_temp = ADCOMCON;
  9367  02F0  002E               	movlb	14	; select bank14
  9368  02F1  0812               	movf	18,w	;volatile
  9369  02F2  0020               	movlb	0	; select bank0
  9370  02F3  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9371  02F4  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9372  02F5  00A6               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  9373                           
  9374                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 524:     AD1CON2_temp = AD1CON2;
  9375  02F6  002E               	movlb	14	; select bank14
  9376  02F7  0813               	movf	19,w	;volatile
  9377  02F8  0020               	movlb	0	; select bank0
  9378  02F9  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9379  02FA  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9380  02FB  00A7               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  9381                           
  9382                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 525:     AD2CON2_temp = AD2CON2;
  9383  02FC  002F               	movlb	15	; select bank15
  9384  02FD  0813               	movf	19,w	;volatile
  9385  02FE  0020               	movlb	0	; select bank0
  9386  02FF  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9387  0300  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9388  0301  00A8               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  9389                           
  9390                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 526:     MTOUCH_Sensor_Scan_Initialize();
  9391  0302  3194  24A6  3182   	fcall	_MTOUCH_Sensor_Scan_Initialize
  9392                           
  9393                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 530:     if(sensor_adc1!=((void*)0))
  9394  0305  0020               	movlb	0	; select bank0
  9395  0306  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9396  0307  1903               	btfsc	3,2
  9397  0308  2B1C               	goto	l5590
  9398                           
  9399                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 531:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 532:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9400  0309  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9401  030A  3E04               	addlw	4
  9402  030B  0086               	movwf	6
  9403  030C  3001               	movlw	1	; select bank2/3
  9404  030D  0087               	movwf	7
  9405  030E  0801               	movf	1,w
  9406  030F  3EFF               	addlw	255
  9407  0310  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9408  0311  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9409  0312  00B1               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9410                           
  9411                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         ADxIF_flag = 0;
  9412  0313  01AB               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9413                           
  9414                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 534:         AAD1GRD = 0b01000000;
  9415  0314  3040               	movlw	64
  9416  0315  002E               	movlb	14	; select bank14
  9417  0316  0098               	movwf	24	;volatile
  9418                           
  9419                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 535:         AAD2GRD = 0b00000000;
  9420  0317  002F               	movlb	15	; select bank15
  9421  0318  0198               	clrf	24	;volatile
  9422                           
  9423                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 536:         APFCONbits.GRDASEL = 0x0;
  9424  0319  0022               	movlb	2	; select bank2
  9425  031A  101D               	bcf	29,0	;volatile
  9426                           
  9427                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 537:     }
  9428  031B  2B2F               	goto	l5600
  9429  031C                     l5590:	
  9430                           
  9431                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 540:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9432  031C  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9433  031D  3E04               	addlw	4
  9434  031E  0086               	movwf	6
  9435  031F  3001               	movlw	1	; select bank2/3
  9436  0320  0087               	movwf	7
  9437  0321  0801               	movf	1,w
  9438  0322  3EFF               	addlw	255
  9439  0323  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9440  0324  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9441  0325  00B1               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9442                           
  9443                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         ADxIF_flag = 1;
  9444  0326  01AB               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9445  0327  0AAB               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  9446                           
  9447                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:         AAD1GRD = 0b00000000;
  9448  0328  002E               	movlb	14	; select bank14
  9449  0329  0198               	clrf	24	;volatile
  9450                           
  9451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 543:         AAD2GRD = 0b01000000;
  9452  032A  3040               	movlw	64
  9453  032B  002F               	movlb	15	; select bank15
  9454  032C  0098               	movwf	24	;volatile
  9455                           
  9456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 544:         APFCONbits.GRDASEL = 0x1;
  9457  032D  0022               	movlb	2	; select bank2
  9458  032E  141D               	bsf	29,0	;volatile
  9459  032F                     l5600:	
  9460                           
  9461                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  9462  032F  01F3               	clrf	Sensor_loadADCSettings@adc_index
  9463  0330  0020               	movlb	0	; select bank0
  9464  0331  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9465  0332  3185  257F  3182   	fcall	_Sensor_loadADCSettings
  9466                           
  9467                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  9468  0335  01F3               	clrf	Sensor_loadADCSettings@adc_index
  9469  0336  0AF3               	incf	Sensor_loadADCSettings@adc_index,f
  9470  0337  0020               	movlb	0	; select bank0
  9471  0338  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9472  0339  3185  257F  3182   	fcall	_Sensor_loadADCSettings
  9473                           
  9474                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     sensor_globalFlags.done = 0;
  9475  033C  0020               	movlb	0	; select bank0
  9476  033D  106A               	bcf	_sensor_globalFlags,0	;volatile
  9477                           
  9478                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:     sensor_globalFlags.error = 0;
  9479  033E  116A               	bcf	_sensor_globalFlags,2	;volatile
  9480                           
  9481                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:     sensor_globalFlags.interrupted = 0
      +                          ;
  9482  033F  11EA               	bcf	_sensor_globalFlags,3	;volatile
  9483                           
  9484                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  9485  0340  086F               	movf	_sample_period,w
  9486  0341  3193  2377  3182   	fcall	_TMR2_LoadPeriodRegister
  9487                           
  9488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     TMR2_StartTimer();
  9489  0344  3193  2363  3182   	fcall	_TMR2_StartTimer
  9490                           
  9491                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 556:     packet_noise = 0;
  9492  0347  0020               	movlb	0	; select bank0
  9493  0348  01DF               	clrf	_packet_noise
  9494  0349  01E0               	clrf	_packet_noise+1
  9495  034A                     l5616:	
  9496                           
  9497                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 560:         if(ADxIF_flag == 0)
  9498  034A  082B               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  9499  034B  1D03               	btfss	3,2
  9500  034C  2B53               	goto	l259
  9501                           
  9502                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 561:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 562:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9503  034D  1F11               	btfss	17,6	;volatile
  9504  034E  10EA               	bcf	_sensor_globalFlags,1	;volatile
  9505  034F                     l261:	
  9506  034F  1F11               	btfss	17,6	;volatile
  9507  0350  2B4F               	goto	l261
  9508                           
  9509                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:             PIR1bits.AD1IF = 0;
  9510  0351  1311               	bcf	17,6	;volatile
  9511                           
  9512                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         }
  9513  0352  2B59               	goto	l5624
  9514  0353                     l259:	
  9515                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         else
  9516                           
  9517                           
  9518                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 568:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9519  0353  1B12               	btfsc	18,6	;volatile
  9520  0354  2B56               	goto	l266
  9521  0355  10EA               	bcf	_sensor_globalFlags,1	;volatile
  9522  0356                     l266:	
  9523  0356  1F12               	btfss	18,6	;volatile
  9524  0357  2B56               	goto	l266
  9525                           
  9526                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:             PIR2bits.AD2IF = 0;
  9527  0358  1312               	bcf	18,6	;volatile
  9528  0359                     l5624:	
  9529                           
  9530                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 573:         AAD1GRD ^= 0b00100001;
  9531  0359  3021               	movlw	33
  9532  035A  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9533  035B  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9534  035C  002E               	movlb	14	; select bank14
  9535  035D  0698               	xorwf	24,f	;volatile
  9536                           
  9537                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:         AAD2GRD ^= 0b00100001;
  9538  035E  3021               	movlw	33
  9539  035F  0020               	movlb	0	; select bank0
  9540  0360  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9541  0361  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9542  0362  002F               	movlb	15	; select bank15
  9543  0363  0698               	xorwf	24,f	;volatile
  9544                           
  9545                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:         AAD1CON3 ^= 0b11000000;
  9546  0364  30C0               	movlw	192
  9547  0365  0020               	movlb	0	; select bank0
  9548  0366  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9549  0367  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9550  0368  002E               	movlb	14	; select bank14
  9551  0369  0694               	xorwf	20,f	;volatile
  9552                           
  9553                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 576:         AAD2CON3 ^= 0b11000000;
  9554  036A  30C0               	movlw	192
  9555  036B  0020               	movlb	0	; select bank0
  9556  036C  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9557  036D  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9558  036E  002F               	movlb	15	; select bank15
  9559  036F  0694               	xorwf	20,f	;volatile
  9560                           
  9561                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:         if ((packet_counter & 0x01) ==
      +                           0)
  9562  0370  0020               	movlb	0	; select bank0
  9563  0371  1831               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  9564  0372  2BB9               	goto	l5640
  9565                           
  9566                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 579:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 580:             packet_sample[0] += AAD1RES0;
  9567  0373  002E               	movlb	14	; select bank14
  9568  0374  081A               	movf	26,w	;volatile
  9569  0375  0020               	movlb	0	; select bank0
  9570  0376  07D5               	addwf	_packet_sample,f
  9571  0377  002E               	movlb	14	; select bank14
  9572  0378  081B               	movf	27,w	;volatile
  9573  0379  0020               	movlb	0	; select bank0
  9574  037A  3DD6               	addwfc	_packet_sample+1,f
  9575                           
  9576                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:             packet_sample[1] += AAD2RE
      +                          S0;
  9577  037B  002F               	movlb	15	; select bank15
  9578  037C  081A               	movf	26,w	;volatile
  9579  037D  0020               	movlb	0	; select bank0
  9580  037E  07D7               	addwf	_packet_sample+2,f
  9581  037F  002F               	movlb	15	; select bank15
  9582  0380  081B               	movf	27,w	;volatile
  9583  0381  0020               	movlb	0	; select bank0
  9584  0382  3DD8               	addwfc	_packet_sample+3,f
  9585                           
  9586                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:             if(activeSensor ==0)
  9587  0383  082C               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9588  0384  1D03               	btfss	3,2
  9589  0385  2B9E               	goto	l5636
  9590                           
  9591                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 584:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  9592  0386  002E               	movlb	14	; select bank14
  9593  0387  081A               	movf	26,w	;volatile
  9594  0388  0020               	movlb	0	; select bank0
  9595  0389  022F               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9596  038A  00F2               	movwf	abs@a
  9597  038B  002E               	movlb	14	; select bank14
  9598  038C  081B               	movf	27,w	;volatile
  9599  038D  0020               	movlb	0	; select bank0
  9600  038E  3B30               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9601  038F  00F3               	movwf	abs@a+1
  9602  0390  3195  25AD  3182   	fcall	_abs
  9603  0393  0872               	movf	?_abs,w
  9604  0394  0020               	movlb	0	; select bank0
  9605  0395  07DF               	addwf	_packet_noise,f
  9606  0396  0873               	movf	?_abs+1,w
  9607  0397  3DE0               	addwfc	_packet_noise+1,f
  9608                           
  9609                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:                 last_b = AAD1RES0;
  9610  0398  002E               	movlb	14	; select bank14
  9611  0399  081B               	movf	27,w	;volatile
  9612  039A  0020               	movlb	0	; select bank0
  9613  039B  00B0               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9614  039C  002E               	movlb	14	; select bank14
  9615  039D  2BB5               	goto	L3
  9616  039E                     l5636:	
  9617                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             }
  9618                           
  9619                           
  9620                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 589:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  9621  039E  002F               	movlb	15	; select bank15
  9622  039F  081A               	movf	26,w	;volatile
  9623  03A0  0020               	movlb	0	; select bank0
  9624  03A1  022F               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9625  03A2  00F2               	movwf	abs@a
  9626  03A3  002F               	movlb	15	; select bank15
  9627  03A4  081B               	movf	27,w	;volatile
  9628  03A5  0020               	movlb	0	; select bank0
  9629  03A6  3B30               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9630  03A7  00F3               	movwf	abs@a+1
  9631  03A8  3195  25AD  3182   	fcall	_abs
  9632  03AB  0872               	movf	?_abs,w
  9633  03AC  0020               	movlb	0	; select bank0
  9634  03AD  07DF               	addwf	_packet_noise,f
  9635  03AE  0873               	movf	?_abs+1,w
  9636  03AF  3DE0               	addwfc	_packet_noise+1,f
  9637                           
  9638                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:                 last_b = AAD2RES0;
  9639  03B0  002F               	movlb	15	; select bank15
  9640  03B1  081B               	movf	27,w	;volatile
  9641  03B2  0020               	movlb	0	; select bank0
  9642  03B3  00B0               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9643  03B4  002F               	movlb	15	; select bank15
  9644  03B5                     L3:	
  9645  03B5  081A               	movf	26,w	;volatile
  9646  03B6  0020               	movlb	0	; select bank0
  9647  03B7  00AF               	movwf	Sensor_Acq_ExecutePacket@last_b
  9648  03B8  2BED               	goto	l5652
  9649  03B9                     l5640:	
  9650                           
  9651                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 595:             packet_sample[0] -= AAD1RES0;
  9652  03B9  002E               	movlb	14	; select bank14
  9653  03BA  081A               	movf	26,w	;volatile
  9654  03BB  0020               	movlb	0	; select bank0
  9655  03BC  02D5               	subwf	_packet_sample,f
  9656  03BD  002E               	movlb	14	; select bank14
  9657  03BE  081B               	movf	27,w	;volatile
  9658  03BF  0020               	movlb	0	; select bank0
  9659  03C0  3BD6               	subwfb	_packet_sample+1,f
  9660                           
  9661                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 596:             packet_sample[1] -= AAD2RE
      +                          S0;
  9662  03C1  002F               	movlb	15	; select bank15
  9663  03C2  081A               	movf	26,w	;volatile
  9664  03C3  0020               	movlb	0	; select bank0
  9665  03C4  02D7               	subwf	_packet_sample+2,f
  9666  03C5  002F               	movlb	15	; select bank15
  9667  03C6  081B               	movf	27,w	;volatile
  9668  03C7  0020               	movlb	0	; select bank0
  9669  03C8  3BD8               	subwfb	_packet_sample+3,f
  9670                           
  9671                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             if(activeSensor ==0)
  9672  03C9  082C               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9673  03CA  1D03               	btfss	3,2
  9674  03CB  2BD3               	goto	l5648
  9675                           
  9676                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 599:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  9677  03CC  002E               	movlb	14	; select bank14
  9678  03CD  081A               	movf	26,w	;volatile
  9679  03CE  0020               	movlb	0	; select bank0
  9680  03CF  022D               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9681  03D0  00F2               	movwf	abs@a
  9682  03D1  002E               	movlb	14	; select bank14
  9683  03D2  2BD9               	goto	L6
  9684  03D3                     l5648:	
  9685                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:             }
  9686                           
  9687                           
  9688                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 603:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 604:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  9689  03D3  002F               	movlb	15	; select bank15
  9690  03D4  081A               	movf	26,w	;volatile
  9691  03D5  0020               	movlb	0	; select bank0
  9692  03D6  022D               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9693  03D7  00F2               	movwf	abs@a
  9694  03D8  002F               	movlb	15	; select bank15
  9695  03D9                     L6:	
  9696  03D9  081B               	movf	27,w	;volatile
  9697  03DA  0020               	movlb	0	; select bank0
  9698  03DB  3B2E               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  9699  03DC  00F3               	movwf	abs@a+1
  9700  03DD  3195  25AD  3182   	fcall	_abs
  9701  03E0  0872               	movf	?_abs,w
  9702  03E1  0020               	movlb	0	; select bank0
  9703  03E2  07DF               	addwf	_packet_noise,f
  9704  03E3  0873               	movf	?_abs+1,w
  9705  03E4  3DE0               	addwfc	_packet_noise+1,f
  9706                           
  9707                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:                 last_a = AAD1RES0;
  9708  03E5  002E               	movlb	14	; select bank14
  9709  03E6  081B               	movf	27,w	;volatile
  9710  03E7  0020               	movlb	0	; select bank0
  9711  03E8  00AE               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  9712  03E9  002E               	movlb	14	; select bank14
  9713  03EA  081A               	movf	26,w	;volatile
  9714  03EB  0020               	movlb	0	; select bank0
  9715  03EC  00AD               	movwf	Sensor_Acq_ExecutePacket@last_a
  9716  03ED                     l5652:	
  9717                           
  9718                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         if (packet_counter == 0)
  9719  03ED  0831               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  9720  03EE  1903               	btfsc	3,2
  9721                           
  9722                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 611:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 613:             sensor_globalFlags.done = (uint8_t)1;
  9723  03EF  146A               	bsf	_sensor_globalFlags,0	;volatile
  9724                           
  9725                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 615:         packet_counter--;
  9726  03F0  3001               	movlw	1
  9727  03F1  02B1               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  9728                           
  9729                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:         if (sensor_globalFlags.check !
      +                          = 0)
  9730  03F2  1CEA               	btfss	_sensor_globalFlags,1	;volatile
  9731  03F3  2BF6               	goto	l276
  9732                           
  9733                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 618:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 619:             sensor_globalFlags.error = 1;
  9734  03F4  156A               	bsf	_sensor_globalFlags,2	;volatile
  9735                           
  9736                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:             sensor_globalFlags.done = 
      +                          1;
  9737  03F5  146A               	bsf	_sensor_globalFlags,0	;volatile
  9738  03F6                     l276:	
  9739                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:         }
  9740                           
  9741                           
  9742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:         sensor_globalFlags.check = 1;
  9743  03F6  14EA               	bsf	_sensor_globalFlags,1	;volatile
  9744                           
  9745                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 623:     } while(sensor_globalFlags.done ==
      +                           0);
  9746  03F7  1C6A               	btfss	_sensor_globalFlags,0	;volatile
  9747  03F8  2B4A               	goto	l5616
  9748                           
  9749                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:     TMR2_StopTimer();
  9750  03F9  3193  2366  3182   	fcall	_TMR2_StopTimer
  9751                           
  9752                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:     ADCOMCON = ADCOMCON_temp;
  9753  03FC  0020               	movlb	0	; select bank0
  9754  03FD  0826               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  9755  03FE  002E               	movlb	14	; select bank14
  9756  03FF  0092               	movwf	18	;volatile
  9757                           
  9758                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:     AD1CON2 = AD1CON2_temp;
  9759  0400  0020               	movlb	0	; select bank0
  9760  0401  0827               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  9761  0402  002E               	movlb	14	; select bank14
  9762  0403  0093               	movwf	19	;volatile
  9763                           
  9764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 628:     AD2CON2 = AD2CON2_temp;
  9765  0404  0020               	movlb	0	; select bank0
  9766  0405  0828               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  9767  0406  002F               	movlb	15	; select bank15
  9768  0407  0093               	movwf	19	;volatile
  9769                           
  9770                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 630:     if(sensor_globalFlags.error)
  9771  0408  0020               	movlb	0	; select bank0
  9772  0409  1D6A               	btfss	_sensor_globalFlags,2	;volatile
  9773  040A  2C0D               	goto	l278
  9774                           
  9775                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 632:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  9776  040B  30FB               	movlw	251
  9777  040C  0008               	return
  9778  040D                     l278:	
  9779                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:     }
  9780                           
  9781                           
  9782                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:     if(sensor_globalFlags.interrupted)
  9783  040D  1DEA               	btfss	_sensor_globalFlags,3	;volatile
  9784  040E  2C11               	goto	l5680
  9785                           
  9786                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 637:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  9787  040F  30FA               	movlw	250
  9788  0410  0008               	return
  9789  0411                     l5680:	
  9790                           
  9791                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     if (sensor1ForceEnabled)
  9792  0411  0829               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  9793  0412  1903               	btfsc	3,2
  9794  0413  2C1A               	goto	l5684
  9795                           
  9796                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:         sensor_adc1->enabled = 0;
  9797  0414  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9798  0415  3E08               	addlw	8
  9799  0416  0086               	movwf	6
  9800  0417  3001               	movlw	1	; select bank2/3
  9801  0418  0087               	movwf	7
  9802  0419  1181               	bcf	1,3
  9803  041A                     l5684:	
  9804                           
  9805                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     if (sensor2ForceEnabled)
  9806  041A  082A               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  9807  041B  1903               	btfsc	3,2
  9808  041C  2C23               	goto	l5688
  9809                           
  9810                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 645:         sensor_adc2->enabled = 0;
  9811  041D  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9812  041E  3E08               	addlw	8
  9813  041F  0086               	movwf	6
  9814  0420  3001               	movlw	1	; select bank2/3
  9815  0421  0087               	movwf	7
  9816  0422  1181               	bcf	1,3
  9817  0423                     l5688:	
  9818                           
  9819                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 648:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  9820  0423  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9821  0424  3194  24E8  3182   	fcall	_Sensor_isEnabled
  9822  0427  3A00               	xorlw	0
  9823  0428  1903               	skipnz
  9824  0429  2C37               	goto	l5694
  9825  042A  0020               	movlb	0	; select bank0
  9826  042B  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9827  042C  3193  23EE  3182   	fcall	_Sensor_isCalibrated
  9828  042F  3A00               	xorlw	0
  9829  0430  1D03               	skipz
  9830  0431  2C37               	goto	l5694
  9831                           
  9832                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:         Sensor_autoCalibration(sensor_
      +                          adc1);
  9833  0432  0020               	movlb	0	; select bank0
  9834  0433  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9835  0434  318D  258A  3182   	fcall	_Sensor_autoCalibration
  9836  0437                     l5694:	
  9837                           
  9838                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  9839  0437  0020               	movlb	0	; select bank0
  9840  0438  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9841  0439  3194  24E8  3182   	fcall	_Sensor_isEnabled
  9842  043C  3A00               	xorlw	0
  9843  043D  1903               	skipnz
  9844  043E  2C4C               	goto	l5700
  9845  043F  0020               	movlb	0	; select bank0
  9846  0440  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9847  0441  3193  23EE  3182   	fcall	_Sensor_isCalibrated
  9848  0444  3A00               	xorlw	0
  9849  0445  1D03               	skipz
  9850  0446  2C4C               	goto	l5700
  9851                           
  9852                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:         Sensor_autoCalibration(sensor_
      +                          adc2);
  9853  0447  0020               	movlb	0	; select bank0
  9854  0448  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9855  0449  318D  258A  3182   	fcall	_Sensor_autoCalibration
  9856  044C                     l5700:	
  9857                           
  9858                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     AD1PRECON = 0;
  9859  044C  002E               	movlb	14	; select bank14
  9860  044D  0196               	clrf	22	;volatile
  9861                           
  9862                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     AD2PRECON = 0;
  9863  044E  002F               	movlb	15	; select bank15
  9864  044F  0196               	clrf	22	;volatile
  9865                           
  9866                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 656:     AD1ACQCON = 0;
  9867  0450  002E               	movlb	14	; select bank14
  9868  0451  0197               	clrf	23	;volatile
  9869                           
  9870                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     AD2ACQCON = 0;
  9871  0452  002F               	movlb	15	; select bank15
  9872  0453  0197               	clrf	23	;volatile
  9873                           
  9874                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:     AD1CON0bits.ADON = 0;
  9875  0454  002E               	movlb	14	; select bank14
  9876  0455  1011               	bcf	17,0	;volatile
  9877                           
  9878                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 659:     AD2CON0bits.ADON = 0;
  9879  0456  002F               	movlb	15	; select bank15
  9880  0457  1011               	bcf	17,0	;volatile
  9881  0458  2AE4               	goto	l5540
  9882  0459                     __end_of_Sensor_Acq_ExecutePacket:	
  9883                           
  9884                           	psect	text50
  9885  1366                     __ptext50:	
  9886 ;; *************** function _TMR2_StopTimer *****************
  9887 ;; Defined at:
  9888 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  9889 ;; Parameters:    Size  Location     Type
  9890 ;;		None
  9891 ;; Auto vars:     Size  Location     Type
  9892 ;;		None
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  1    wreg      void 
  9895 ;; Registers used:
  9896 ;;		None
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9902 ;;      Params:         0       0       0       0       0       0       0       0
  9903 ;;      Locals:         0       0       0       0       0       0       0       0
  9904 ;;      Temps:          0       0       0       0       0       0       0       0
  9905 ;;      Totals:         0       0       0       0       0       0       0       0
  9906 ;;Total ram usage:        0 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; Hardware stack levels required when called:    4
  9909 ;; This function calls:
  9910 ;;		Nothing
  9911 ;; This function is called by:
  9912 ;;		_Sensor_Acq_ExecutePacket
  9913 ;; This function uses a non-reentrant model
  9914 ;;
  9915                           
  9916                           
  9917                           ;psect for function _TMR2_StopTimer
  9918  1366                     _TMR2_StopTimer:	
  9919                           
  9920                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  9921                           
  9922                           ;incstack = 0
  9923                           ; Regs used in _TMR2_StopTimer: []
  9924  1366  0020               	movlb	0	; select bank0
  9925  1367  111C               	bcf	28,2	;volatile
  9926  1368  0008               	return
  9927  1369                     __end_of_TMR2_StopTimer:	
  9928                           
  9929                           	psect	text51
  9930  1363                     __ptext51:	
  9931 ;; *************** function _TMR2_StartTimer *****************
  9932 ;; Defined at:
  9933 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  9934 ;; Parameters:    Size  Location     Type
  9935 ;;		None
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;		None
  9938 ;; Return value:  Size  Location     Type
  9939 ;;                  1    wreg      void 
  9940 ;; Registers used:
  9941 ;;		None
  9942 ;; Tracked objects:
  9943 ;;		On entry : 0/0
  9944 ;;		On exit  : 0/0
  9945 ;;		Unchanged: 0/0
  9946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9947 ;;      Params:         0       0       0       0       0       0       0       0
  9948 ;;      Locals:         0       0       0       0       0       0       0       0
  9949 ;;      Temps:          0       0       0       0       0       0       0       0
  9950 ;;      Totals:         0       0       0       0       0       0       0       0
  9951 ;;Total ram usage:        0 bytes
  9952 ;; Hardware stack levels used:    1
  9953 ;; Hardware stack levels required when called:    4
  9954 ;; This function calls:
  9955 ;;		Nothing
  9956 ;; This function is called by:
  9957 ;;		_Sensor_Acq_ExecutePacket
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           
  9962                           ;psect for function _TMR2_StartTimer
  9963  1363                     _TMR2_StartTimer:	
  9964                           
  9965                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  9966                           
  9967                           ;incstack = 0
  9968                           ; Regs used in _TMR2_StartTimer: []
  9969  1363  0020               	movlb	0	; select bank0
  9970  1364  151C               	bsf	28,2	;volatile
  9971  1365  0008               	return
  9972  1366                     __end_of_TMR2_StartTimer:	
  9973                           
  9974                           	psect	text52
  9975  1377                     __ptext52:	
  9976 ;; *************** function _TMR2_LoadPeriodRegister *****************
  9977 ;; Defined at:
  9978 ;;		line 91 in file "mcc_generated_files/tmr2.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;  periodVal       1    wreg     unsigned char 
  9981 ;; Auto vars:     Size  Location     Type
  9982 ;;  periodVal       1    2[COMMON] unsigned char 
  9983 ;; Return value:  Size  Location     Type
  9984 ;;                  1    wreg      void 
  9985 ;; Registers used:
  9986 ;;		wreg
  9987 ;; Tracked objects:
  9988 ;;		On entry : 0/0
  9989 ;;		On exit  : 0/0
  9990 ;;		Unchanged: 0/0
  9991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9992 ;;      Params:         0       0       0       0       0       0       0       0
  9993 ;;      Locals:         1       0       0       0       0       0       0       0
  9994 ;;      Temps:          0       0       0       0       0       0       0       0
  9995 ;;      Totals:         1       0       0       0       0       0       0       0
  9996 ;;Total ram usage:        1 bytes
  9997 ;; Hardware stack levels used:    1
  9998 ;; Hardware stack levels required when called:    4
  9999 ;; This function calls:
 10000 ;;		Nothing
 10001 ;; This function is called by:
 10002 ;;		_Sensor_Acq_ExecutePacket
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006                           
 10007                           ;psect for function _TMR2_LoadPeriodRegister
 10008  1377                     _TMR2_LoadPeriodRegister:	
 10009                           
 10010                           ;incstack = 0
 10011                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
 10012                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 10013  1377  00F2               	movwf	TMR2_LoadPeriodRegister@periodVal
 10014                           
 10015                           ;mcc_generated_files/tmr2.c: 91: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_gen
      +                          erated_files/tmr2.c: 92: {;mcc_generated_files/tmr2.c: 93:    PR2 = periodVal;
 10016  1378  0872               	movf	TMR2_LoadPeriodRegister@periodVal,w
 10017  1379  0020               	movlb	0	; select bank0
 10018  137A  009B               	movwf	27	;volatile
 10019  137B  0008               	return
 10020  137C                     __end_of_TMR2_LoadPeriodRegister:	
 10021                           
 10022                           	psect	text53
 10023  057F                     __ptext53:	
 10024 ;; *************** function _Sensor_loadADCSettings *****************
 10025 ;; Defined at:
 10026 ;;		line 421 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;  sensor          1    wreg     PTR struct .
 10029 ;;		 -> mtouch_sensor(36), 
 10030 ;;  adc_index       1    3[COMMON] unsigned char 
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;  sensor          1    3[BANK0 ] PTR struct .
 10033 ;;		 -> mtouch_sensor(36), 
 10034 ;;  addressOffse    1    2[BANK0 ] unsigned char 
 10035 ;; Return value:  Size  Location     Type
 10036 ;;                  1    wreg      void 
 10037 ;; Registers used:
 10038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10039 ;; Tracked objects:
 10040 ;;		On entry : 0/0
 10041 ;;		On exit  : 0/0
 10042 ;;		Unchanged: 0/0
 10043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10044 ;;      Params:         1       0       0       0       0       0       0       0
 10045 ;;      Locals:         0       4       0       0       0       0       0       0
 10046 ;;      Temps:          3       0       0       0       0       0       0       0
 10047 ;;      Totals:         4       4       0       0       0       0       0       0
 10048 ;;Total ram usage:        8 bytes
 10049 ;; Hardware stack levels used:    1
 10050 ;; Hardware stack levels required when called:    5
 10051 ;; This function calls:
 10052 ;;		_Sensor_isCalibrated
 10053 ;;		_Sensor_isCalibratingAcqTime
 10054 ;; This function is called by:
 10055 ;;		_Sensor_Acq_ExecutePacket
 10056 ;; This function uses a non-reentrant model
 10057 ;;
 10058                           
 10059                           
 10060                           ;psect for function _Sensor_loadADCSettings
 10061  057F                     _Sensor_loadADCSettings:	
 10062                           
 10063                           ;incstack = 0
 10064                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 10065                           ;Sensor_loadADCSettings@sensor stored from wreg
 10066  057F  0020               	movlb	0	; select bank0
 10067  0580  00A3               	movwf	Sensor_loadADCSettings@sensor
 10068                           
 10069                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 422
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 423:     if (sensor == ((void*)0))
 10070  0581  0823               	movf	Sensor_loadADCSettings@sensor,w
 10071  0582  1903               	btfsc	3,2
 10072  0583  0008               	return
 10073                           
 10074                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
 10075  0584  0873               	movf	Sensor_loadADCSettings@adc_index,w
 10076  0585  1D03               	btfss	3,2
 10077  0586  2D8A               	goto	l5444
 10078  0587  01A0               	clrf	_Sensor_loadADCSettings$550
 10079  0588  01A1               	clrf	_Sensor_loadADCSettings$550+1
 10080  0589  2D8E               	goto	l230
 10081  058A                     l5444:	
 10082  058A  3080               	movlw	128
 10083  058B  00A0               	movwf	_Sensor_loadADCSettings$550
 10084  058C  3000               	movlw	0
 10085  058D  00A1               	movwf	_Sensor_loadADCSettings$550+1
 10086  058E                     l230:	
 10087  058E  0820               	movf	_Sensor_loadADCSettings$550,w
 10088  058F  00F4               	movwf	??_Sensor_loadADCSettings
 10089  0590  0874               	movf	??_Sensor_loadADCSettings,w
 10090  0591  00A2               	movwf	Sensor_loadADCSettings@addressOffset
 10091                           
 10092                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
 10093  0592  0A23               	incf	Sensor_loadADCSettings@sensor,w
 10094  0593  0086               	movwf	6
 10095  0594  3001               	movlw	1	; select bank2/3
 10096  0595  0087               	movwf	7
 10097  0596  0801               	movf	1,w
 10098  0597  00F4               	movwf	??_Sensor_loadADCSettings
 10099  0598  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10100  0599  3E11               	addlw	17
 10101  059A  00F5               	movwf	??_Sensor_loadADCSettings+1
 10102  059B  01F6               	clrf	??_Sensor_loadADCSettings+2
 10103  059C  3007               	movlw	7
 10104  059D  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
 10105  059E  0875               	movf	??_Sensor_loadADCSettings+1,w
 10106  059F  0086               	movwf	6
 10107  05A0  0876               	movf	??_Sensor_loadADCSettings+2,w
 10108  05A1  0087               	movwf	7
 10109  05A2  0874               	movf	??_Sensor_loadADCSettings,w
 10110  05A3  0081               	movwf	1
 10111                           
 10112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
 10113  05A4  0823               	movf	Sensor_loadADCSettings@sensor,w
 10114  05A5  3E05               	addlw	5
 10115  05A6  0086               	movwf	6
 10116  05A7  3001               	movlw	1	; select bank2/3
 10117  05A8  0087               	movwf	7
 10118  05A9  0801               	movf	1,w
 10119  05AA  00F4               	movwf	??_Sensor_loadADCSettings
 10120  05AB  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10121  05AC  3E19               	addlw	25
 10122  05AD  00F5               	movwf	??_Sensor_loadADCSettings+1
 10123  05AE  01F6               	clrf	??_Sensor_loadADCSettings+2
 10124  05AF  3007               	movlw	7
 10125  05B0  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
 10126  05B1  0875               	movf	??_Sensor_loadADCSettings+1,w
 10127  05B2  0086               	movwf	6
 10128  05B3  0876               	movf	??_Sensor_loadADCSettings+2,w
 10129  05B4  0087               	movwf	7
 10130  05B5  0874               	movf	??_Sensor_loadADCSettings,w
 10131  05B6  0081               	movwf	1
 10132                           
 10133                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 430:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
 10134  05B7  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10135  05B8  3E13               	addlw	19
 10136  05B9  00F4               	movwf	??_Sensor_loadADCSettings
 10137  05BA  01F5               	clrf	??_Sensor_loadADCSettings+1
 10138  05BB  3007               	movlw	7
 10139  05BC  3DF5               	addwfc	??_Sensor_loadADCSettings+1,f
 10140  05BD  0874               	movf	??_Sensor_loadADCSettings,w
 10141  05BE  0086               	movwf	6
 10142  05BF  0875               	movf	??_Sensor_loadADCSettings+1,w
 10143  05C0  0087               	movwf	7
 10144  05C1  3050               	movlw	80
 10145  05C2  0081               	movwf	1
 10146                           
 10147                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 431:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
 10148  05C3  30FE               	movlw	254
 10149  05C4  00F4               	movwf	??_Sensor_loadADCSettings
 10150  05C5  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10151  05C6  3E18               	addlw	24
 10152  05C7  0086               	movwf	6
 10153  05C8  0187               	clrf	7
 10154  05C9  3007               	movlw	7
 10155  05CA  3D87               	addwfc	7,f
 10156  05CB  0874               	movf	??_Sensor_loadADCSettings,w
 10157  05CC  0581               	andwf	1,f
 10158                           
 10159                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     if (Sensor_isCalibrated(sensor))
 10160  05CD  0823               	movf	Sensor_loadADCSettings@sensor,w
 10161  05CE  3193  23EE  3185   	fcall	_Sensor_isCalibrated
 10162  05D1  3A00               	xorlw	0
 10163  05D2  1903               	skipnz
 10164  05D3  2DE9               	goto	l5458
 10165                           
 10166                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 434:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 435:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
 10167  05D4  0020               	movlb	0	; select bank0
 10168  05D5  0823               	movf	Sensor_loadADCSettings@sensor,w
 10169  05D6  3E02               	addlw	2
 10170  05D7  0086               	movwf	6
 10171  05D8  3001               	movlw	1	; select bank2/3
 10172  05D9  0087               	movwf	7
 10173  05DA  0801               	movf	1,w
 10174  05DB  00F4               	movwf	??_Sensor_loadADCSettings
 10175  05DC  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10176  05DD  3E16               	addlw	22
 10177  05DE  00F5               	movwf	??_Sensor_loadADCSettings+1
 10178  05DF  01F6               	clrf	??_Sensor_loadADCSettings+2
 10179  05E0  3007               	movlw	7
 10180  05E1  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
 10181  05E2  0875               	movf	??_Sensor_loadADCSettings+1,w
 10182  05E3  0086               	movwf	6
 10183  05E4  0876               	movf	??_Sensor_loadADCSettings+2,w
 10184  05E5  0087               	movwf	7
 10185  05E6  0874               	movf	??_Sensor_loadADCSettings,w
 10186  05E7  0081               	movwf	1
 10187  05E8  2DFE               	goto	L8
 10188  05E9                     l5458:	
 10189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437:     }
 10190                           
 10191                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
 10192                           
 10193                           
 10194                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 440:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
 10195  05E9  0020               	movlb	0	; select bank0
 10196  05EA  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10197  05EB  3E16               	addlw	22
 10198  05EC  00F4               	movwf	??_Sensor_loadADCSettings
 10199  05ED  01F5               	clrf	??_Sensor_loadADCSettings+1
 10200  05EE  3007               	movlw	7
 10201  05EF  3DF5               	addwfc	??_Sensor_loadADCSettings+1,f
 10202  05F0  0874               	movf	??_Sensor_loadADCSettings,w
 10203  05F1  0086               	movwf	6
 10204  05F2  0875               	movf	??_Sensor_loadADCSettings+1,w
 10205  05F3  0087               	movwf	7
 10206  05F4  3020               	movlw	32
 10207  05F5  0081               	movwf	1
 10208                           
 10209                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 441:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
 10210  05F6  0823               	movf	Sensor_loadADCSettings@sensor,w
 10211  05F7  3193  23E5  3185   	fcall	_Sensor_isCalibratingAcqTime
 10212  05FA  3A00               	xorlw	0
 10213  05FB  1903               	skipnz
 10214  05FC  2E11               	goto	l5464
 10215                           
 10216                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
 10217  05FD  0020               	movlb	0	; select bank0
 10218  05FE                     L8:	
 10219  05FE  0823               	movf	Sensor_loadADCSettings@sensor,w
 10220  05FF  3E03               	addlw	3
 10221  0600  0086               	movwf	6
 10222  0601  3001               	movlw	1	; select bank2/3
 10223  0602  0087               	movwf	7
 10224  0603  0801               	movf	1,w
 10225  0604  00F4               	movwf	??_Sensor_loadADCSettings
 10226  0605  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10227  0606  3E17               	addlw	23
 10228  0607  00F5               	movwf	??_Sensor_loadADCSettings+1
 10229  0608  01F6               	clrf	??_Sensor_loadADCSettings+2
 10230  0609  3007               	movlw	7
 10231  060A  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
 10232  060B  0875               	movf	??_Sensor_loadADCSettings+1,w
 10233  060C  0086               	movwf	6
 10234  060D  0876               	movf	??_Sensor_loadADCSettings+2,w
 10235  060E  0087               	movwf	7
 10236  060F  0874               	movf	??_Sensor_loadADCSettings,w
 10237  0610  2E1D               	goto	L7
 10238  0611                     l5464:	
 10239                           
 10240                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
 10241  0611  0020               	movlb	0	; select bank0
 10242  0612  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10243  0613  3E17               	addlw	23
 10244  0614  00F4               	movwf	??_Sensor_loadADCSettings
 10245  0615  01F5               	clrf	??_Sensor_loadADCSettings+1
 10246  0616  3007               	movlw	7
 10247  0617  3DF5               	addwfc	??_Sensor_loadADCSettings+1,f
 10248  0618  0874               	movf	??_Sensor_loadADCSettings,w
 10249  0619  0086               	movwf	6
 10250  061A  0875               	movf	??_Sensor_loadADCSettings+1,w
 10251  061B  0087               	movwf	7
 10252  061C  3020               	movlw	32
 10253  061D                     L7:	
 10254  061D  0081               	movwf	1
 10255                           
 10256                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
 10257                           
 10258                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     }
 10259  061E  0823               	movf	Sensor_loadADCSettings@sensor,w
 10260  061F  3E04               	addlw	4
 10261  0620  0086               	movwf	6
 10262  0621  3001               	movlw	1	; select bank2/3
 10263  0622  0087               	movwf	7
 10264  0623  0801               	movf	1,w
 10265  0624  00F4               	movwf	??_Sensor_loadADCSettings
 10266  0625  01F5               	clrf	??_Sensor_loadADCSettings+1
 10267  0626  3009               	movlw	9
 10268  0627                     u3565:	
 10269  0627  35F4               	lslf	??_Sensor_loadADCSettings,f
 10270  0628  0DF5               	rlf	??_Sensor_loadADCSettings+1,f
 10271  0629  0B89               	decfsz	9,f
 10272  062A  2E27               	goto	u3565
 10273  062B  3573               	lslf	Sensor_loadADCSettings@adc_index,w
 10274  062C  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 10275  062D  0086               	movwf	6
 10276  062E  0187               	clrf	7
 10277  062F  0874               	movf	??_Sensor_loadADCSettings,w
 10278  0630  3FC0               	movwi [0]fsr1
 10279  0631  0875               	movf	??_Sensor_loadADCSettings+1,w
 10280  0632  3FC1               	movwi [1]fsr1
 10281  0633  0008               	return
 10282  0634                     __end_of_Sensor_loadADCSettings:	
 10283                           
 10284                           	psect	text54
 10285  13EE                     __ptext54:	
 10286 ;; *************** function _Sensor_isCalibrated *****************
 10287 ;; Defined at:
 10288 ;;		line 875 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;  sensor          1    wreg     PTR struct .
 10291 ;;		 -> mtouch_sensor(36), 
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;  sensor          1    2[COMMON] PTR struct .
 10294 ;;		 -> mtouch_sensor(36), 
 10295 ;; Return value:  Size  Location     Type
 10296 ;;                  1    wreg      _Bool 
 10297 ;; Registers used:
 10298 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10299 ;; Tracked objects:
 10300 ;;		On entry : 0/0
 10301 ;;		On exit  : 0/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10304 ;;      Params:         0       0       0       0       0       0       0       0
 10305 ;;      Locals:         1       0       0       0       0       0       0       0
 10306 ;;      Temps:          0       0       0       0       0       0       0       0
 10307 ;;      Totals:         1       0       0       0       0       0       0       0
 10308 ;;Total ram usage:        1 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    4
 10311 ;; This function calls:
 10312 ;;		Nothing
 10313 ;; This function is called by:
 10314 ;;		_Sensor_Acquisition
 10315 ;;		_Sensor_loadADCSettings
 10316 ;;		_Sensor_Acq_ExecutePacket
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           
 10321                           ;psect for function _Sensor_isCalibrated
 10322  13EE                     _Sensor_isCalibrated:	
 10323                           
 10324                           ;incstack = 0
 10325                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10326                           ;Sensor_isCalibrated@sensor stored from wreg
 10327  13EE  00F2               	movwf	Sensor_isCalibrated@sensor
 10328                           
 10329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 875: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          876: {;mcc_generated_files/mtouch/mtouch_sensor.c: 877:     return (_Bool)sensor->calibr
      +                          ated;
 10330  13EF  0872               	movf	Sensor_isCalibrated@sensor,w
 10331  13F0  3E08               	addlw	8
 10332  13F1  0086               	movwf	6
 10333  13F2  3001               	movlw	1	; select bank2/3
 10334  13F3  0087               	movwf	7
 10335  13F4  0C01               	rrf	1,w
 10336  13F5  0C89               	rrf	9,f
 10337  13F6  3901               	andlw	1
 10338  13F7  0008               	return
 10339  13F8                     __end_of_Sensor_isCalibrated:	
 10340                           
 10341                           	psect	text55
 10342  14E8                     __ptext55:	
 10343 ;; *************** function _Sensor_isEnabled *****************
 10344 ;; Defined at:
 10345 ;;		line 818 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10346 ;; Parameters:    Size  Location     Type
 10347 ;;  sensor          1    wreg     PTR struct .
 10348 ;;		 -> mtouch_sensor(36), 
 10349 ;; Auto vars:     Size  Location     Type
 10350 ;;  sensor          1    3[COMMON] PTR struct .
 10351 ;;		 -> mtouch_sensor(36), 
 10352 ;; Return value:  Size  Location     Type
 10353 ;;                  1    wreg      _Bool 
 10354 ;; Registers used:
 10355 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10361 ;;      Params:         0       0       0       0       0       0       0       0
 10362 ;;      Locals:         1       0       0       0       0       0       0       0
 10363 ;;      Temps:          1       0       0       0       0       0       0       0
 10364 ;;      Totals:         2       0       0       0       0       0       0       0
 10365 ;;Total ram usage:        2 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    4
 10368 ;; This function calls:
 10369 ;;		Nothing
 10370 ;; This function is called by:
 10371 ;;		_Sensor_Service
 10372 ;;		_Sensor_postAcquisitionProcess
 10373 ;;		_Sensor_Acq_ExecutePacket
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           
 10378                           ;psect for function _Sensor_isEnabled
 10379  14E8                     _Sensor_isEnabled:	
 10380                           
 10381                           ;incstack = 0
 10382                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 10383                           ;Sensor_isEnabled@sensor stored from wreg
 10384  14E8  00F3               	movwf	Sensor_isEnabled@sensor
 10385                           
 10386                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 818: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 819: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 820:     if(sensor!=((void*)0))
 10387  14E9  0873               	movf	Sensor_isEnabled@sensor,w
 10388  14EA  1903               	btfsc	3,2
 10389  14EB  2CF7               	goto	l5432
 10390                           
 10391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 821:         return (_Bool)sensor->enabled;
 10392  14EC  0873               	movf	Sensor_isEnabled@sensor,w
 10393  14ED  3E08               	addlw	8
 10394  14EE  0086               	movwf	6
 10395  14EF  3001               	movlw	1	; select bank2/3
 10396  14F0  0087               	movwf	7
 10397  14F1  0C01               	rrf	1,w
 10398  14F2  00F2               	movwf	??_Sensor_isEnabled
 10399  14F3  0CF2               	rrf	??_Sensor_isEnabled,f
 10400  14F4  0C72               	rrf	??_Sensor_isEnabled,w
 10401  14F5  3901               	andlw	1
 10402  14F6  0008               	return
 10403  14F7                     l5432:	
 10404                           
 10405                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 823:         return 0;
 10406  14F7  3000               	movlw	0
 10407  14F8  0008               	return
 10408  14F9                     __end_of_Sensor_isEnabled:	
 10409                           
 10410                           	psect	text56
 10411  142D                     __ptext56:	
 10412 ;; *************** function _Sensor_isActive *****************
 10413 ;; Defined at:
 10414 ;;		line 845 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;  sensor          1    wreg     PTR struct .
 10417 ;;		 -> mtouch_sensor(36), 
 10418 ;; Auto vars:     Size  Location     Type
 10419 ;;  sensor          1    2[COMMON] PTR struct .
 10420 ;;		 -> mtouch_sensor(36), 
 10421 ;; Return value:  Size  Location     Type
 10422 ;;                  1    wreg      _Bool 
 10423 ;; Registers used:
 10424 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10430 ;;      Params:         0       0       0       0       0       0       0       0
 10431 ;;      Locals:         1       0       0       0       0       0       0       0
 10432 ;;      Temps:          0       0       0       0       0       0       0       0
 10433 ;;      Totals:         1       0       0       0       0       0       0       0
 10434 ;;Total ram usage:        1 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    4
 10437 ;; This function calls:
 10438 ;;		Nothing
 10439 ;; This function is called by:
 10440 ;;		_Sensor_Acquisition
 10441 ;;		_Sensor_Acq_ExecutePacket
 10442 ;; This function uses a non-reentrant model
 10443 ;;
 10444                           
 10445                           
 10446                           ;psect for function _Sensor_isActive
 10447  142D                     _Sensor_isActive:	
 10448                           
 10449                           ;incstack = 0
 10450                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10451                           ;Sensor_isActive@sensor stored from wreg
 10452  142D  00F2               	movwf	Sensor_isActive@sensor
 10453                           
 10454                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 845: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 846:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 847:     if(sensor == ((void*)0))
 10455  142E  0872               	movf	Sensor_isActive@sensor,w
 10456  142F  1D03               	btfss	3,2
 10457  1430  2C33               	goto	l3718
 10458                           
 10459                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 848:         return 0;
 10460  1431  3000               	movlw	0
 10461  1432  0008               	return
 10462  1433                     l3718:	
 10463                           
 10464                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 850:     return (_Bool)sensor->active;
 10465  1433  0872               	movf	Sensor_isActive@sensor,w
 10466  1434  3E08               	addlw	8
 10467  1435  0086               	movwf	6
 10468  1436  3001               	movlw	1	; select bank2/3
 10469  1437  0087               	movwf	7
 10470  1438  0C01               	rrf	1,w
 10471  1439  3901               	andlw	1
 10472  143A  0008               	return
 10473  143B                     __end_of_Sensor_isActive:	
 10474                           
 10475                           	psect	text57
 10476  0D8A                     __ptext57:	
 10477 ;; *************** function _Sensor_autoCalibration *****************
 10478 ;; Defined at:
 10479 ;;		line 672 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;  sensor          1    wreg     PTR struct .
 10482 ;;		 -> mtouch_sensor(36), 
 10483 ;; Auto vars:     Size  Location     Type
 10484 ;;  sensor          1    1[BANK0 ] PTR struct .
 10485 ;;		 -> mtouch_sensor(36), 
 10486 ;;  adcIndex        1    0[BANK0 ] unsigned char 
 10487 ;; Return value:  Size  Location     Type
 10488 ;;                  1    wreg      void 
 10489 ;; Registers used:
 10490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10496 ;;      Params:         0       0       0       0       0       0       0       0
 10497 ;;      Locals:         0       2       0       0       0       0       0       0
 10498 ;;      Temps:          4       0       0       0       0       0       0       0
 10499 ;;      Totals:         4       2       0       0       0       0       0       0
 10500 ;;Total ram usage:        6 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    5
 10503 ;; This function calls:
 10504 ;;		_Sensor_getScanGroupIndex
 10505 ;;		_Sensor_isCalibratingAcqTime
 10506 ;;		_Sensor_setCalibratAcqTime
 10507 ;;		_Sensor_setCalibrated
 10508 ;;		_abs
 10509 ;; This function is called by:
 10510 ;;		_Sensor_Acq_ExecutePacket
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           
 10515                           ;psect for function _Sensor_autoCalibration
 10516  0D8A                     _Sensor_autoCalibration:	
 10517                           
 10518                           ;incstack = 0
 10519                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10520                           ;Sensor_autoCalibration@sensor stored from wreg
 10521  0D8A  0020               	movlb	0	; select bank0
 10522  0D8B  00A1               	movwf	Sensor_autoCalibration@sensor
 10523                           
 10524                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 673: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 674:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
 10525  0D8C  0821               	movf	Sensor_autoCalibration@sensor,w
 10526  0D8D  3197  27A5  318D   	fcall	_Sensor_getScanGroupIndex
 10527  0D90  00F6               	movwf	??_Sensor_autoCalibration
 10528  0D91  0876               	movf	??_Sensor_autoCalibration,w
 10529  0D92  0020               	movlb	0	; select bank0
 10530  0D93  00A0               	movwf	Sensor_autoCalibration@adcIndex
 10531                           
 10532                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
 10533  0D94  0821               	movf	Sensor_autoCalibration@sensor,w
 10534  0D95  3193  23E5  318D   	fcall	_Sensor_isCalibratingAcqTime
 10535  0D98  3A00               	xorlw	0
 10536  0D99  1D03               	skipz
 10537  0D9A  2DCE               	goto	l5478
 10538                           
 10539                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 677:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 678:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
 10540  0D9B  0020               	movlb	0	; select bank0
 10541  0D9C  3520               	lslf	Sensor_autoCalibration@adcIndex,w
 10542  0D9D  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 10543  0D9E  0086               	movwf	6
 10544  0D9F  0187               	clrf	7
 10545  0DA0  3F40               	moviw [0]fsr1
 10546  0DA1  00F6               	movwf	??_Sensor_autoCalibration
 10547  0DA2  3F41               	moviw [1]fsr1
 10548  0DA3  00F7               	movwf	??_Sensor_autoCalibration+1
 10549  0DA4  0821               	movf	Sensor_autoCalibration@sensor,w
 10550  0DA5  3E04               	addlw	4
 10551  0DA6  0086               	movwf	6
 10552  0DA7  3001               	movlw	1	; select bank2/3
 10553  0DA8  0087               	movwf	7
 10554  0DA9  0801               	movf	1,w
 10555  0DAA  00F8               	movwf	??_Sensor_autoCalibration+2
 10556  0DAB  01F9               	clrf	??_Sensor_autoCalibration+3
 10557  0DAC  3009               	movlw	9
 10558  0DAD                     u3585:	
 10559  0DAD  35F8               	lslf	??_Sensor_autoCalibration+2,f
 10560  0DAE  0DF9               	rlf	??_Sensor_autoCalibration+3,f
 10561  0DAF  0B89               	decfsz	9,f
 10562  0DB0  2DAD               	goto	u3585
 10563  0DB1  0877               	movf	??_Sensor_autoCalibration+1,w
 10564  0DB2  0279               	subwf	??_Sensor_autoCalibration+3,w
 10565  0DB3  1D03               	skipz
 10566  0DB4  2DB7               	goto	u3595
 10567  0DB5  0876               	movf	??_Sensor_autoCalibration,w
 10568  0DB6  0278               	subwf	??_Sensor_autoCalibration+2,w
 10569  0DB7                     u3595:	
 10570  0DB7  1803               	skipnc
 10571  0DB8  2DCA               	goto	l5476
 10572                           
 10573                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 679:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 680:             if(++(sensor->addcap) >= (uint8_t)0x0F)
 10574  0DB9  3001               	movlw	1
 10575  0DBA  00F6               	movwf	??_Sensor_autoCalibration
 10576  0DBB  0821               	movf	Sensor_autoCalibration@sensor,w
 10577  0DBC  3E05               	addlw	5
 10578  0DBD  0086               	movwf	6
 10579  0DBE  3001               	movlw	1	; select bank2/3
 10580  0DBF  0087               	movwf	7
 10581  0DC0  0876               	movf	??_Sensor_autoCalibration,w
 10582  0DC1  0781               	addwf	1,f
 10583  0DC2  300F               	movlw	15
 10584  0DC3  0201               	subwf	1,w
 10585  0DC4  1C03               	skipc
 10586  0DC5  0008               	return
 10587                           
 10588                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 681:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
 10589  0DC6  0821               	movf	Sensor_autoCalibration@sensor,w
 10590  0DC7  3194  2467         	fcall	_Sensor_setCalibratAcqTime
 10591  0DC9  0008               	return
 10592  0DCA                     l5476:	
 10593                           
 10594                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 684:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 685:              Sensor_setCalibratAcqTime(sensor);
 10595  0DCA  0821               	movf	Sensor_autoCalibration@sensor,w
 10596  0DCB  3194  2467         	fcall	_Sensor_setCalibratAcqTime
 10597  0DCD  0008               	return
 10598  0DCE                     l5478:	
 10599                           
 10600                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 689:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 690:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 10601  0DCE  0020               	movlb	0	; select bank0
 10602  0DCF  0821               	movf	Sensor_autoCalibration@sensor,w
 10603  0DD0  3E04               	addlw	4
 10604  0DD1  0086               	movwf	6
 10605  0DD2  3001               	movlw	1	; select bank2/3
 10606  0DD3  0087               	movwf	7
 10607  0DD4  0801               	movf	1,w
 10608  0DD5  00F6               	movwf	??_Sensor_autoCalibration
 10609  0DD6  01F7               	clrf	??_Sensor_autoCalibration+1
 10610  0DD7  35F6               	lslf	??_Sensor_autoCalibration,f
 10611  0DD8  0DF7               	rlf	??_Sensor_autoCalibration+1,f
 10612  0DD9  0821               	movf	Sensor_autoCalibration@sensor,w
 10613  0DDA  3E06               	addlw	6
 10614  0DDB  0086               	movwf	6
 10615  0DDC  3001               	movlw	1	; select bank2/3
 10616  0DDD  0087               	movwf	7
 10617  0DDE  3520               	lslf	Sensor_autoCalibration@adcIndex,w
 10618  0DDF  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 10619  0DE0  0084               	movwf	4
 10620  0DE1  0185               	clrf	5
 10621  0DE2  3F40               	moviw [0]fsr1
 10622  0DE3  0200               	subwf	0,w
 10623  0DE4  00F2               	movwf	abs@a
 10624  0DE5  3101               	addfsr 0,1
 10625  0DE6  3F41               	moviw [1]fsr1
 10626  0DE7  3B00               	subwfb	0,w
 10627  0DE8  00F3               	movwf	abs@a+1
 10628  0DE9  3195  25AD  318D   	fcall	_abs
 10629  0DEC  0877               	movf	??_Sensor_autoCalibration+1,w
 10630  0DED  0273               	subwf	?_abs+1,w
 10631  0DEE  1D03               	skipz
 10632  0DEF  2DF2               	goto	u3615
 10633  0DF0  0876               	movf	??_Sensor_autoCalibration,w
 10634  0DF1  0272               	subwf	?_abs,w
 10635  0DF2                     u3615:	
 10636  0DF2  1803               	skipnc
 10637  0DF3  2E02               	goto	l5484
 10638                           
 10639                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 691:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 692:             sensor->precharge_time = (mtouch_sensor_time_t)32;
 10640  0DF4  3020               	movlw	32
 10641  0DF5  00F6               	movwf	??_Sensor_autoCalibration
 10642  0DF6  0020               	movlb	0	; select bank0
 10643  0DF7  0821               	movf	Sensor_autoCalibration@sensor,w
 10644  0DF8  3E02               	addlw	2
 10645  0DF9  0086               	movwf	6
 10646  0DFA  3001               	movlw	1	; select bank2/3
 10647  0DFB  0087               	movwf	7
 10648  0DFC  0876               	movf	??_Sensor_autoCalibration,w
 10649  0DFD  0081               	movwf	1
 10650                           
 10651                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:             Sensor_setCalibrated(senso
      +                          r);
 10652  0DFE  0821               	movf	Sensor_autoCalibration@sensor,w
 10653  0DFF  3194  241F         	fcall	_Sensor_setCalibrated
 10654                           
 10655                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 694:         }
 10656  0E01  0008               	return
 10657  0E02                     l5484:	
 10658                           
 10659                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 696:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 700:             sensor->acquisition_time += (uint8_t)2;
 10660  0E02  3002               	movlw	2
 10661  0E03  00F6               	movwf	??_Sensor_autoCalibration
 10662  0E04  0020               	movlb	0	; select bank0
 10663  0E05  0821               	movf	Sensor_autoCalibration@sensor,w
 10664  0E06  3E03               	addlw	3
 10665  0E07  0086               	movwf	6
 10666  0E08  3001               	movlw	1	; select bank2/3
 10667  0E09  0087               	movwf	7
 10668  0E0A  0876               	movf	??_Sensor_autoCalibration,w
 10669  0E0B  0781               	addwf	1,f
 10670                           
 10671                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 10672  0E0C  0821               	movf	Sensor_autoCalibration@sensor,w
 10673  0E0D  3E03               	addlw	3
 10674  0E0E  0086               	movwf	6
 10675  0E0F  3001               	movlw	1	; select bank2/3
 10676  0E10  0087               	movwf	7
 10677  0E11  3020               	movlw	32
 10678  0E12  0201               	subwf	1,w
 10679  0E13  1C03               	skipc
 10680  0E14  0008               	return
 10681                           
 10682                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 702:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 703:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 10683  0E15  3020               	movlw	32
 10684  0E16  00F6               	movwf	??_Sensor_autoCalibration
 10685  0E17  0821               	movf	Sensor_autoCalibration@sensor,w
 10686  0E18  3E02               	addlw	2
 10687  0E19  0086               	movwf	6
 10688  0E1A  3001               	movlw	1	; select bank2/3
 10689  0E1B  0087               	movwf	7
 10690  0E1C  0876               	movf	??_Sensor_autoCalibration,w
 10691  0E1D  0081               	movwf	1
 10692                           
 10693                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 704:                 Sensor_setCalibrated(s
      +                          ensor);
 10694  0E1E  0821               	movf	Sensor_autoCalibration@sensor,w
 10695  0E1F  3194  241F         	fcall	_Sensor_setCalibrated
 10696  0E21  0008               	return
 10697  0E22                     __end_of_Sensor_autoCalibration:	
 10698                           
 10699                           	psect	text58
 10700  15AD                     __ptext58:	
 10701 ;; *************** function _abs *****************
 10702 ;; Defined at:
 10703 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;  a               2    2[COMMON] int 
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;		None
 10708 ;; Return value:  Size  Location     Type
 10709 ;;                  2    2[COMMON] int 
 10710 ;; Registers used:
 10711 ;;		wreg, status,2, status,0
 10712 ;; Tracked objects:
 10713 ;;		On entry : 0/0
 10714 ;;		On exit  : 0/0
 10715 ;;		Unchanged: 0/0
 10716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10717 ;;      Params:         2       0       0       0       0       0       0       0
 10718 ;;      Locals:         0       0       0       0       0       0       0       0
 10719 ;;      Temps:          2       0       0       0       0       0       0       0
 10720 ;;      Totals:         4       0       0       0       0       0       0       0
 10721 ;;Total ram usage:        4 bytes
 10722 ;; Hardware stack levels used:    1
 10723 ;; Hardware stack levels required when called:    4
 10724 ;; This function calls:
 10725 ;;		Nothing
 10726 ;; This function is called by:
 10727 ;;		_Sensor_postAcquisitionProcess
 10728 ;;		_Sensor_Acq_ExecutePacket
 10729 ;;		_Sensor_autoCalibration
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           
 10734                           ;psect for function _abs
 10735  15AD                     _abs:	
 10736                           
 10737                           ;incstack = 0
 10738                           ; Regs used in _abs: [wreg+status,2+status,0]
 10739  15AD  0873               	movf	abs@a+1,w
 10740  15AE  3A80               	xorlw	128
 10741  15AF  00F4               	movwf	??_abs
 10742  15B0  3080               	movlw	128
 10743  15B1  0274               	subwf	??_abs,w
 10744  15B2  1D03               	skipz
 10745  15B3  2DB6               	goto	u3465
 10746  15B4  3001               	movlw	1
 10747  15B5  0272               	subwf	abs@a,w
 10748  15B6                     u3465:	
 10749  15B6  1803               	skipnc
 10750  15B7  0008               	return
 10751  15B8  0972               	comf	abs@a,w
 10752  15B9  00F4               	movwf	??_abs
 10753  15BA  0973               	comf	abs@a+1,w
 10754  15BB  00F5               	movwf	??_abs+1
 10755  15BC  0AF4               	incf	??_abs,f
 10756  15BD  1903               	skipnz
 10757  15BE  0AF5               	incf	??_abs+1,f
 10758  15BF  0874               	movf	??_abs,w
 10759  15C0  00F2               	movwf	?_abs
 10760  15C1  0875               	movf	??_abs+1,w
 10761  15C2  00F3               	movwf	?_abs+1
 10762  15C3  0008               	return
 10763  15C4                     __end_of_abs:	
 10764                           
 10765                           	psect	text59
 10766  141F                     __ptext59:	
 10767 ;; *************** function _Sensor_setCalibrated *****************
 10768 ;; Defined at:
 10769 ;;		line 880 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;  sensor          1    wreg     PTR struct .
 10772 ;;		 -> mtouch_sensor(36), 
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;  sensor          1    2[COMMON] PTR struct .
 10775 ;;		 -> mtouch_sensor(36), 
 10776 ;; Return value:  Size  Location     Type
 10777 ;;                  1    wreg      void 
 10778 ;; Registers used:
 10779 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10780 ;; Tracked objects:
 10781 ;;		On entry : 0/0
 10782 ;;		On exit  : 0/0
 10783 ;;		Unchanged: 0/0
 10784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10785 ;;      Params:         0       0       0       0       0       0       0       0
 10786 ;;      Locals:         1       0       0       0       0       0       0       0
 10787 ;;      Temps:          0       0       0       0       0       0       0       0
 10788 ;;      Totals:         1       0       0       0       0       0       0       0
 10789 ;;Total ram usage:        1 bytes
 10790 ;; Hardware stack levels used:    1
 10791 ;; Hardware stack levels required when called:    4
 10792 ;; This function calls:
 10793 ;;		Nothing
 10794 ;; This function is called by:
 10795 ;;		_Sensor_autoCalibration
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           
 10800                           ;psect for function _Sensor_setCalibrated
 10801  141F                     _Sensor_setCalibrated:	
 10802                           
 10803                           ;incstack = 0
 10804                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10805                           ;Sensor_setCalibrated@sensor stored from wreg
 10806  141F  00F2               	movwf	Sensor_setCalibrated@sensor
 10807                           
 10808                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 880: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          881: {;mcc_generated_files/mtouch/mtouch_sensor.c: 882:     sensor->calibrated = 1;
 10809  1420  0872               	movf	Sensor_setCalibrated@sensor,w
 10810  1421  3E08               	addlw	8
 10811  1422  0086               	movwf	6
 10812  1423  3001               	movlw	1	; select bank2/3
 10813  1424  0087               	movwf	7
 10814  1425  1501               	bsf	1,2
 10815                           
 10816                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 883:     sensor->acqTime_cal = 0;
 10817  1426  0872               	movf	Sensor_setCalibrated@sensor,w
 10818  1427  3E08               	addlw	8
 10819  1428  0086               	movwf	6
 10820  1429  3001               	movlw	1	; select bank2/3
 10821  142A  0087               	movwf	7
 10822  142B  1201               	bcf	1,4
 10823  142C  0008               	return
 10824  142D                     __end_of_Sensor_setCalibrated:	
 10825                           
 10826                           	psect	text60
 10827  1467                     __ptext60:	
 10828 ;; *************** function _Sensor_setCalibratAcqTime *****************
 10829 ;; Defined at:
 10830 ;;		line 886 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;  sensor          1    wreg     PTR struct .
 10833 ;;		 -> mtouch_sensor(36), 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  sensor          1    2[COMMON] PTR struct .
 10836 ;;		 -> mtouch_sensor(36), 
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  1    wreg      void 
 10839 ;; Registers used:
 10840 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10846 ;;      Params:         0       0       0       0       0       0       0       0
 10847 ;;      Locals:         1       0       0       0       0       0       0       0
 10848 ;;      Temps:          0       0       0       0       0       0       0       0
 10849 ;;      Totals:         1       0       0       0       0       0       0       0
 10850 ;;Total ram usage:        1 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    4
 10853 ;; This function calls:
 10854 ;;		Nothing
 10855 ;; This function is called by:
 10856 ;;		_Sensor_autoCalibration
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860                           
 10861                           ;psect for function _Sensor_setCalibratAcqTime
 10862  1467                     _Sensor_setCalibratAcqTime:	
 10863                           
 10864                           ;incstack = 0
 10865                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10866                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 10867  1467  00F2               	movwf	Sensor_setCalibratAcqTime@sensor
 10868                           
 10869                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 886: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 887: {;mcc_generated_files/mtouch/mtouch_sensor.c: 888:     sensor->acqTime_cal = 1
      +                          ;
 10870  1468  0872               	movf	Sensor_setCalibratAcqTime@sensor,w
 10871  1469  3E08               	addlw	8
 10872  146A  0086               	movwf	6
 10873  146B  3001               	movlw	1	; select bank2/3
 10874  146C  0087               	movwf	7
 10875  146D  1601               	bsf	1,4
 10876                           
 10877                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 889:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 10878  146E  0872               	movf	Sensor_setCalibratAcqTime@sensor,w
 10879  146F  3E03               	addlw	3
 10880  1470  0086               	movwf	6
 10881  1471  3001               	movlw	1	; select bank2/3
 10882  1472  0087               	movwf	7
 10883  1473  0181               	clrf	1
 10884  1474  0A81               	incf	1,f
 10885  1475  0008               	return
 10886  1476                     __end_of_Sensor_setCalibratAcqTime:	
 10887                           
 10888                           	psect	text61
 10889  13E5                     __ptext61:	
 10890 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 10891 ;; Defined at:
 10892 ;;		line 892 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;  sensor          1    wreg     PTR struct .
 10895 ;;		 -> mtouch_sensor(36), 
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;  sensor          1    2[COMMON] PTR struct .
 10898 ;;		 -> mtouch_sensor(36), 
 10899 ;; Return value:  Size  Location     Type
 10900 ;;                  1    wreg      _Bool 
 10901 ;; Registers used:
 10902 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10908 ;;      Params:         0       0       0       0       0       0       0       0
 10909 ;;      Locals:         1       0       0       0       0       0       0       0
 10910 ;;      Temps:          0       0       0       0       0       0       0       0
 10911 ;;      Totals:         1       0       0       0       0       0       0       0
 10912 ;;Total ram usage:        1 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    4
 10915 ;; This function calls:
 10916 ;;		Nothing
 10917 ;; This function is called by:
 10918 ;;		_Sensor_loadADCSettings
 10919 ;;		_Sensor_autoCalibration
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           
 10924                           ;psect for function _Sensor_isCalibratingAcqTime
 10925  13E5                     _Sensor_isCalibratingAcqTime:	
 10926                           
 10927                           ;incstack = 0
 10928                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10929                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 10930  13E5  00F2               	movwf	Sensor_isCalibratingAcqTime@sensor
 10931                           
 10932                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 892: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 893: {;mcc_generated_files/mtouch/mtouch_sensor.c: 894:     return (_Bool)sensor
      +                          ->acqTime_cal;
 10933  13E6  0872               	movf	Sensor_isCalibratingAcqTime@sensor,w
 10934  13E7  3E08               	addlw	8
 10935  13E8  0086               	movwf	6
 10936  13E9  3001               	movlw	1	; select bank2/3
 10937  13EA  0087               	movwf	7
 10938  13EB  0E01               	swapf	1,w
 10939  13EC  3901               	andlw	1
 10940  13ED  0008               	return
 10941  13EE                     __end_of_Sensor_isCalibratingAcqTime:	
 10942                           
 10943                           	psect	text62
 10944  17A5                     __ptext62:	
 10945 ;; *************** function _Sensor_getScanGroupIndex *****************
 10946 ;; Defined at:
 10947 ;;		line 342 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;  sensor          1    wreg     PTR struct .
 10950 ;;		 -> mtouch_sensor(36), 
 10951 ;; Auto vars:     Size  Location     Type
 10952 ;;  sensor          1    4[COMMON] PTR struct .
 10953 ;;		 -> mtouch_sensor(36), 
 10954 ;;  sensorGroup     1    5[COMMON] unsigned char 
 10955 ;; Return value:  Size  Location     Type
 10956 ;;                  1    wreg      unsigned char 
 10957 ;; Registers used:
 10958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10959 ;; Tracked objects:
 10960 ;;		On entry : 0/0
 10961 ;;		On exit  : 0/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10964 ;;      Params:         0       0       0       0       0       0       0       0
 10965 ;;      Locals:         2       0       0       0       0       0       0       0
 10966 ;;      Temps:          2       0       0       0       0       0       0       0
 10967 ;;      Totals:         4       0       0       0       0       0       0       0
 10968 ;;Total ram usage:        4 bytes
 10969 ;; Hardware stack levels used:    1
 10970 ;; Hardware stack levels required when called:    4
 10971 ;; This function calls:
 10972 ;;		Nothing
 10973 ;; This function is called by:
 10974 ;;		_Sensor_postAcquisitionProcess
 10975 ;;		_Sensor_autoCalibration
 10976 ;;		_Sensor_RawSample_Update
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           
 10981                           ;psect for function _Sensor_getScanGroupIndex
 10982  17A5                     _Sensor_getScanGroupIndex:	
 10983                           
 10984                           ;incstack = 0
 10985                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 10986                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 10987  17A5  00F4               	movwf	Sensor_getScanGroupIndex@sensor
 10988                           
 10989                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 343: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 344:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 345:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
 10990  17A6  01F5               	clrf	Sensor_getScanGroupIndex@sensorGroup
 10991  17A7                     l5374:	
 10992                           
 10993                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 347:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 10994  17A7  0875               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10995  17A8  00F2               	movwf	??_Sensor_getScanGroupIndex
 10996  17A9  01F3               	clrf	??_Sensor_getScanGroupIndex+1
 10997  17AA  35F2               	lslf	??_Sensor_getScanGroupIndex,f
 10998  17AB  0DF3               	rlf	??_Sensor_getScanGroupIndex+1,f
 10999  17AC  3064               	movlw	low (_sensor_scan_group| (0+32768))
 11000  17AD  0772               	addwf	??_Sensor_getScanGroupIndex,w
 11001  17AE  0084               	movwf	4
 11002  17AF  3098               	movlw	high (_sensor_scan_group| (0+32768))
 11003  17B0  3D73               	addwfc	??_Sensor_getScanGroupIndex+1,w
 11004  17B1  0085               	movwf	5
 11005  17B2  0800               	movf	0,w	;code access
 11006  17B3  0674               	xorwf	Sensor_getScanGroupIndex@sensor,w
 11007  17B4  1D03               	skipz
 11008  17B5  2FB8               	goto	l5380
 11009  17B6                     l5376:	
 11010                           
 11011                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 348:             return 0;
 11012  17B6  3000               	movlw	0
 11013  17B7  0008               	return
 11014  17B8                     l5380:	
 11015                           
 11016                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 349:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 11017  17B8  0875               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 11018  17B9  00F2               	movwf	??_Sensor_getScanGroupIndex
 11019  17BA  01F3               	clrf	??_Sensor_getScanGroupIndex+1
 11020  17BB  35F2               	lslf	??_Sensor_getScanGroupIndex,f
 11021  17BC  0DF3               	rlf	??_Sensor_getScanGroupIndex+1,f
 11022  17BD  3065               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 11023  17BE  0772               	addwf	??_Sensor_getScanGroupIndex,w
 11024  17BF  0084               	movwf	4
 11025  17C0  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 11026  17C1  3D73               	addwfc	??_Sensor_getScanGroupIndex+1,w
 11027  17C2  0085               	movwf	5
 11028  17C3  0800               	movf	0,w	;code access
 11029  17C4  0674               	xorwf	Sensor_getScanGroupIndex@sensor,w
 11030  17C5  1D03               	skipz
 11031  17C6  2FC9               	goto	l5386
 11032                           
 11033                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 350:             return 1;
 11034  17C7  3001               	movlw	1
 11035  17C8  0008               	return
 11036  17C9                     l5386:	
 11037                           
 11038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     }
 11039  17C9  3001               	movlw	1
 11040  17CA  00F2               	movwf	??_Sensor_getScanGroupIndex
 11041  17CB  0872               	movf	??_Sensor_getScanGroupIndex,w
 11042  17CC  07F5               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 11043  17CD  3002               	movlw	2
 11044  17CE  0275               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
 11045  17CF  1803               	btfsc	3,0
 11046  17D0  2FB6               	goto	l5376
 11047  17D1  2FA7               	goto	l5374
 11048  17D2                     __end_of_Sensor_getScanGroupIndex:	
 11049                           
 11050                           	psect	text63
 11051  14A6                     __ptext63:	
 11052 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 11053 ;; Defined at:
 11054 ;;		line 251 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11055 ;; Parameters:    Size  Location     Type
 11056 ;;		None
 11057 ;; Auto vars:     Size  Location     Type
 11058 ;;		None
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  1    wreg      void 
 11061 ;; Registers used:
 11062 ;;		wreg, status,2, status,0
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11068 ;;      Params:         0       0       0       0       0       0       0       0
 11069 ;;      Locals:         0       0       0       0       0       0       0       0
 11070 ;;      Temps:          0       0       0       0       0       0       0       0
 11071 ;;      Totals:         0       0       0       0       0       0       0       0
 11072 ;;Total ram usage:        0 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    4
 11075 ;; This function calls:
 11076 ;;		Nothing
 11077 ;; This function is called by:
 11078 ;;		_MTOUCH_Initialize
 11079 ;;		_Sensor_Acq_ExecutePacket
 11080 ;; This function uses a non-reentrant model
 11081 ;;
 11082                           
 11083                           
 11084                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 11085  14A6                     _MTOUCH_Sensor_Scan_Initialize:	
 11086                           
 11087                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 253:     T2CONbits.T2CKPS = 0x0;
 11088                           
 11089                           ;incstack = 0
 11090                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 11091  14A6  30FC               	movlw	-4
 11092  14A7  0020               	movlb	0	; select bank0
 11093  14A8  059C               	andwf	28,f	;volatile
 11094                           
 11095                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 255:     AD1CON0 = (uint8_t)0;
 11096  14A9  002E               	movlb	14	; select bank14
 11097  14AA  0191               	clrf	17	;volatile
 11098                           
 11099                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 256:     AD2CON0 = (uint8_t)0;
 11100  14AB  002F               	movlb	15	; select bank15
 11101  14AC  0191               	clrf	17	;volatile
 11102                           
 11103                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 257:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 11104  14AD  3090               	movlw	144
 11105  14AE  002E               	movlb	14	; select bank14
 11106  14AF  0092               	movwf	18	;volatile
 11107                           
 11108                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 258:     AD1CON3 = (uint8_t)0b01000000;
 11109  14B0  3040               	movlw	64
 11110  14B1  0094               	movwf	20	;volatile
 11111                           
 11112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 259:     AD2CON3 = (uint8_t)0b01000000;
 11113  14B2  3040               	movlw	64
 11114  14B3  002F               	movlb	15	; select bank15
 11115  14B4  0094               	movwf	20	;volatile
 11116  14B5  0008               	return
 11117  14B6                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 11118                           
 11119                           	psect	text64
 11120  1496                     __ptext64:	
 11121 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 11122 ;; Defined at:
 11123 ;;		line 210 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;		None
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;  button          1    0        enum E3070
 11128 ;; Return value:  Size  Location     Type
 11129 ;;                  1    wreg      void 
 11130 ;; Registers used:
 11131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11132 ;; Tracked objects:
 11133 ;;		On entry : 0/0
 11134 ;;		On exit  : 0/0
 11135 ;;		Unchanged: 0/0
 11136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11137 ;;      Params:         0       0       0       0       0       0       0       0
 11138 ;;      Locals:         0       0       0       0       0       0       0       0
 11139 ;;      Temps:          0       0       0       0       0       0       0       0
 11140 ;;      Totals:         0       0       0       0       0       0       0       0
 11141 ;;Total ram usage:        0 bytes
 11142 ;; Hardware stack levels used:    1
 11143 ;; Hardware stack levels required when called:    9
 11144 ;; This function calls:
 11145 ;;		_Button_Service
 11146 ;; This function is called by:
 11147 ;;		_MTOUCH_Service_Mainloop
 11148 ;; This function uses a non-reentrant model
 11149 ;;
 11150                           
 11151                           
 11152                           ;psect for function _MTOUCH_Button_ServiceAll
 11153  1496                     _MTOUCH_Button_ServiceAll:	
 11154                           
 11155                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 219:     Button_Service(0);
 11156                           
 11157                           ;incstack = 0
 11158                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11159  1496  3000               	movlw	0
 11160  1497  318A  220B  3194   	fcall	_Button_Service
 11161                           
 11162                           ;mcc_generated_files/mtouch/mtouch_button.c: 220:     Button_Service(1);
 11163  149A  3001               	movlw	1
 11164  149B  318A  220B  3194   	fcall	_Button_Service
 11165                           
 11166                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     Button_Service(2);
 11167  149E  3002               	movlw	2
 11168  149F  318A  220B  3194   	fcall	_Button_Service
 11169                           
 11170                           ;mcc_generated_files/mtouch/mtouch_button.c: 222:     Button_Service(3);
 11171  14A2  3003               	movlw	3
 11172  14A3  318A  220B         	fcall	_Button_Service
 11173  14A5  0008               	return
 11174  14A6                     __end_of_MTOUCH_Button_ServiceAll:	
 11175                           
 11176                           	psect	text65
 11177  0A0B                     __ptext65:	
 11178 ;; *************** function _Button_Service *****************
 11179 ;; Defined at:
 11180 ;;		line 225 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;  name            1    wreg     enum E3070
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;  name            1   11[BANK0 ] enum E3070
 11185 ;;  button          1   12[BANK0 ] PTR struct .
 11186 ;;		 -> mtouch_button(68), 
 11187 ;; Return value:  Size  Location     Type
 11188 ;;                  1    wreg      void 
 11189 ;; Registers used:
 11190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11196 ;;      Params:         0       0       0       0       0       0       0       0
 11197 ;;      Locals:         0       2       0       0       0       0       0       0
 11198 ;;      Temps:          0       1       0       0       0       0       0       0
 11199 ;;      Totals:         0       3       0       0       0       0       0       0
 11200 ;;Total ram usage:        3 bytes
 11201 ;; Hardware stack levels used:    1
 11202 ;; Hardware stack levels required when called:    8
 11203 ;; This function calls:
 11204 ;;		_Button_Deviation_Update
 11205 ;;		_Button_Reading_Update
 11206 ;;		_Button_State_Initializing
 11207 ;;		_Button_State_NotPressed
 11208 ;;		_Button_State_Pressed
 11209 ;;		_MTOUCH_Button_Initialize
 11210 ;;		_MTOUCH_Sensor_isCalibrated
 11211 ;;		_MTOUCH_Sensor_wasSampled
 11212 ;; This function is called by:
 11213 ;;		_MTOUCH_Button_ServiceAll
 11214 ;; This function uses a non-reentrant model
 11215 ;;
 11216                           
 11217                           
 11218                           ;psect for function _Button_Service
 11219  0A0B                     _Button_Service:	
 11220                           
 11221                           ;incstack = 0
 11222                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11223                           ;Button_Service@name stored from wreg
 11224  0A0B  0020               	movlb	0	; select bank0
 11225  0A0C  00AB               	movwf	Button_Service@name
 11226                           
 11227                           ;mcc_generated_files/mtouch/mtouch_button.c: 225: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 226: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 227:     mtouch_button_t* button = &mtouch_button[name];
 11228  0A0D  0E2B               	swapf	Button_Service@name,w
 11229  0A0E  39F0               	andlw	240
 11230  0A0F  072B               	addwf	Button_Service@name,w
 11231  0A10  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 11232  0A11  00AA               	movwf	??_Button_Service
 11233  0A12  082A               	movf	??_Button_Service,w
 11234  0A13  00AC               	movwf	Button_Service@button
 11235                           
 11236                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 11237  0A14  0A2C               	incf	Button_Service@button,w
 11238  0A15  0086               	movwf	6
 11239  0A16  3001               	movlw	1	; select bank2/3
 11240  0A17  0087               	movwf	7
 11241  0A18  0801               	movf	1,w
 11242  0A19  3194  2458  318A   	fcall	_MTOUCH_Sensor_wasSampled
 11243  0A1C  3A00               	xorlw	0
 11244  0A1D  1903               	skipnz
 11245  0A1E  0008               	return
 11246  0A1F  0020               	movlb	0	; select bank0
 11247  0A20  0A2C               	incf	Button_Service@button,w
 11248  0A21  0086               	movwf	6
 11249  0A22  3001               	movlw	1	; select bank2/3
 11250  0A23  0087               	movwf	7
 11251  0A24  0801               	movf	1,w
 11252  0A25  3194  2486  318A   	fcall	_MTOUCH_Sensor_isCalibrated
 11253  0A28  3A00               	xorlw	0
 11254  0A29  1903               	skipnz
 11255  0A2A  0008               	return
 11256                           
 11257                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         Button_Reading_Update(button);
 11258  0A2B  0020               	movlb	0	; select bank0
 11259  0A2C  082C               	movf	Button_Service@button,w
 11260  0A2D  3194  2403  318A   	fcall	_Button_Reading_Update
 11261                           
 11262                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         Button_Deviation_Update(button
      +                          );
 11263  0A30  0020               	movlb	0	; select bank0
 11264  0A31  082C               	movf	Button_Service@button,w
 11265  0A32  318B  23E5  318A   	fcall	_Button_Deviation_Update
 11266                           
 11267                           ;mcc_generated_files/mtouch/mtouch_button.c: 234:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 11268  0A35  0020               	movlb	0	; select bank0
 11269  0A36  082C               	movf	Button_Service@button,w
 11270  0A37  3E02               	addlw	2
 11271  0A38  0086               	movwf	6
 11272  0A39  3001               	movlw	1	; select bank2/3
 11273  0A3A  0087               	movwf	7
 11274  0A3B  3003               	movlw	3
 11275  0A3C  0201               	subwf	1,w
 11276  0A3D  1C03               	skipc
 11277  0A3E  2A47               	goto	l6088
 11278                           
 11279                           ;mcc_generated_files/mtouch/mtouch_button.c: 235:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 236:             MTOUCH_Button_Initialize(button->name);
 11280  0A3F  082C               	movf	Button_Service@button,w
 11281  0A40  0086               	movwf	6
 11282  0A41  3001               	movlw	1	; select bank2/3
 11283  0A42  0087               	movwf	7
 11284  0A43  0801               	movf	1,w
 11285  0A44  3188  20CC  318A   	fcall	_MTOUCH_Button_Initialize
 11286  0A47                     l6088:	
 11287                           
 11288                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 11289  0A47  0020               	movlb	0	; select bank0
 11290  0A48  082C               	movf	Button_Service@button,w
 11291  0A49  00AA               	movwf	??_Button_Service
 11292  0A4A  082A               	movf	??_Button_Service,w
 11293  0A4B  00A5               	movwf	Button_State_Pressed@button
 11294  0A4C  082C               	movf	Button_Service@button,w
 11295  0A4D  3E02               	addlw	2
 11296  0A4E  0086               	movwf	6
 11297  0A4F  3001               	movlw	1	; select bank2/3
 11298  0A50  0087               	movwf	7
 11299  0A51  3501               	lslf	1,w
 11300  0A52  3EE4               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 11301  0A53  0086               	movwf	6
 11302  0A54  0187               	clrf	7
 11303  0A55  3F41               	moviw [1]fsr1
 11304  0A56  008A               	movwf	10
 11305  0A57  3F40               	moviw [0]fsr1
 11306  0A58  000A               	callw
 11307  0A59  318A               	pagesel	$
 11308  0A5A  0008               	return
 11309  0A5B                     __end_of_Button_Service:	
 11310                           
 11311                           	psect	text66
 11312  1458                     __ptext66:	
 11313 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 11314 ;; Defined at:
 11315 ;;		line 914 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;  sensor          1    wreg     enum E2871
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;  sensor          1    7[COMMON] enum E2871
 11320 ;; Return value:  Size  Location     Type
 11321 ;;                  1    wreg      _Bool 
 11322 ;; Registers used:
 11323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11324 ;; Tracked objects:
 11325 ;;		On entry : 0/0
 11326 ;;		On exit  : 0/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11329 ;;      Params:         0       0       0       0       0       0       0       0
 11330 ;;      Locals:         1       0       0       0       0       0       0       0
 11331 ;;      Temps:          1       0       0       0       0       0       0       0
 11332 ;;      Totals:         2       0       0       0       0       0       0       0
 11333 ;;Total ram usage:        2 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; Hardware stack levels required when called:    5
 11336 ;; This function calls:
 11337 ;;		___bmul
 11338 ;; This function is called by:
 11339 ;;		_Button_Service
 11340 ;; This function uses a non-reentrant model
 11341 ;;
 11342                           
 11343                           
 11344                           ;psect for function _MTOUCH_Sensor_wasSampled
 11345  1458                     _MTOUCH_Sensor_wasSampled:	
 11346                           
 11347                           ;incstack = 0
 11348                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11349                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 11350  1458  00F7               	movwf	MTOUCH_Sensor_wasSampled@sensor
 11351                           
 11352                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 914: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 915: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 916:     return (_Bool)mtouch_sensor[sensor].sampled;
 11353  1459  3009               	movlw	9
 11354  145A  00F6               	movwf	??_MTOUCH_Sensor_wasSampled
 11355  145B  0876               	movf	??_MTOUCH_Sensor_wasSampled,w
 11356  145C  00F2               	movwf	___bmul@multiplicand
 11357  145D  0877               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 11358  145E  3194  24C6         	fcall	___bmul
 11359  1460  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11360  1461  0086               	movwf	6
 11361  1462  3001               	movlw	1	; select bank2/3
 11362  1463  0087               	movwf	7
 11363  1464  0801               	movf	1,w
 11364  1465  3901               	andlw	1
 11365  1466  0008               	return
 11366  1467                     __end_of_MTOUCH_Sensor_wasSampled:	
 11367                           
 11368                           	psect	text67
 11369  1486                     __ptext67:	
 11370 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 11371 ;; Defined at:
 11372 ;;		line 868 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  sensor          1    wreg     enum E2871
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;  sensor          1    7[COMMON] enum E2871
 11377 ;; Return value:  Size  Location     Type
 11378 ;;                  1    wreg      _Bool 
 11379 ;; Registers used:
 11380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 0/0
 11383 ;;		On exit  : 0/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11386 ;;      Params:         0       0       0       0       0       0       0       0
 11387 ;;      Locals:         1       0       0       0       0       0       0       0
 11388 ;;      Temps:          1       0       0       0       0       0       0       0
 11389 ;;      Totals:         2       0       0       0       0       0       0       0
 11390 ;;Total ram usage:        2 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    5
 11393 ;; This function calls:
 11394 ;;		___bmul
 11395 ;; This function is called by:
 11396 ;;		_Button_Service
 11397 ;; This function uses a non-reentrant model
 11398 ;;
 11399                           
 11400                           
 11401                           ;psect for function _MTOUCH_Sensor_isCalibrated
 11402  1486                     _MTOUCH_Sensor_isCalibrated:	
 11403                           
 11404                           ;incstack = 0
 11405                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11406                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 11407  1486  00F7               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 11408                           
 11409                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 869: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 871:         return (_Bool)mtouch_sensor[sensor].cali
      +                          brated;
 11410  1487  3009               	movlw	9
 11411  1488  00F6               	movwf	??_MTOUCH_Sensor_isCalibrated
 11412  1489  0876               	movf	??_MTOUCH_Sensor_isCalibrated,w
 11413  148A  00F2               	movwf	___bmul@multiplicand
 11414  148B  0877               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 11415  148C  3194  24C6         	fcall	___bmul
 11416  148E  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11417  148F  0086               	movwf	6
 11418  1490  3001               	movlw	1	; select bank2/3
 11419  1491  0087               	movwf	7
 11420  1492  0C01               	rrf	1,w
 11421  1493  0C89               	rrf	9,f
 11422  1494  3901               	andlw	1
 11423  1495  0008               	return
 11424  1496                     __end_of_MTOUCH_Sensor_isCalibrated:	
 11425                           
 11426                           	psect	text68
 11427  0F5C                     __ptext68:	
 11428 ;; *************** function _Button_State_NotPressed *****************
 11429 ;; Defined at:
 11430 ;;		line 262 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11431 ;; Parameters:    Size  Location     Type
 11432 ;;  button          1    5[BANK0 ] PTR struct .
 11433 ;;		 -> mtouch_button(68), 
 11434 ;; Auto vars:     Size  Location     Type
 11435 ;;		None
 11436 ;; Return value:  Size  Location     Type
 11437 ;;                  1    wreg      void 
 11438 ;; Registers used:
 11439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11440 ;; Tracked objects:
 11441 ;;		On entry : 0/0
 11442 ;;		On exit  : 0/0
 11443 ;;		Unchanged: 0/0
 11444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11445 ;;      Params:         0       1       0       0       0       0       0       0
 11446 ;;      Locals:         0       0       0       0       0       0       0       0
 11447 ;;      Temps:          0       2       0       0       0       0       0       0
 11448 ;;      Totals:         0       3       0       0       0       0       0       0
 11449 ;;Total ram usage:        3 bytes
 11450 ;; Hardware stack levels used:    1
 11451 ;; Hardware stack levels required when called:    7
 11452 ;; This function calls:
 11453 ;;		_Button_Baseline_Update
 11454 ;;		_Button_DefaultCallback
 11455 ;;		_MTOUCH_Button_Initialize
 11456 ;;		_myButtonPressedCallback
 11457 ;; This function is called by:
 11458 ;;		_Button_Service
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           
 11463                           ;psect for function _Button_State_NotPressed
 11464  0F5C                     _Button_State_NotPressed:	
 11465                           
 11466                           ;mcc_generated_files/mtouch/mtouch_button.c: 262: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 263: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 265:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 11467                           
 11468                           ;incstack = 0
 11469                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11470  0F5C  0020               	movlb	0	; select bank0
 11471  0F5D  0825               	movf	Button_State_NotPressed@button,w
 11472  0F5E  3E09               	addlw	9
 11473  0F5F  0086               	movwf	6
 11474  0F60  3001               	movlw	1	; select bank2/3
 11475  0F61  0087               	movwf	7
 11476  0F62  0801               	movf	1,w
 11477  0F63  3A80               	xorlw	128
 11478  0F64  00A6               	movwf	??_Button_State_NotPressed
 11479  0F65  0825               	movf	Button_State_NotPressed@button,w
 11480  0F66  3E0E               	addlw	14
 11481  0F67  0086               	movwf	6
 11482  0F68  3001               	movlw	1	; select bank2/3
 11483  0F69  0087               	movwf	7
 11484  0F6A  0301               	decf	1,w
 11485  0F6B  3AFF               	xorlw	255
 11486  0F6C  3A80               	xorlw	128
 11487  0F6D  02A6               	subwf	??_Button_State_NotPressed,f
 11488  0F6E  1803               	skipnc
 11489  0F6F  2F9B               	goto	l5964
 11490                           
 11491                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 267:         (button->counter)++;
 11492  0F70  0825               	movf	Button_State_NotPressed@button,w
 11493  0F71  3E0A               	addlw	10
 11494  0F72  0086               	movwf	6
 11495  0F73  3001               	movlw	1	; select bank2/3
 11496  0F74  0087               	movwf	7
 11497  0F75  3001               	movlw	1
 11498  0F76  0781               	addwf	1,f
 11499  0F77  3141               	addfsr 1,1
 11500  0F78  1803               	skipnc
 11501  0F79  0A81               	incf	1,f
 11502                           
 11503                           ;mcc_generated_files/mtouch/mtouch_button.c: 268:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 11504  0F7A  0825               	movf	Button_State_NotPressed@button,w
 11505  0F7B  3E0A               	addlw	10
 11506  0F7C  0086               	movwf	6
 11507  0F7D  3001               	movlw	1	; select bank2/3
 11508  0F7E  0087               	movwf	7
 11509  0F7F  3F40               	moviw [0]fsr1
 11510  0F80  00A6               	movwf	??_Button_State_NotPressed
 11511  0F81  3F41               	moviw [1]fsr1
 11512  0F82  00A7               	movwf	??_Button_State_NotPressed+1
 11513  0F83  3000               	movlw	0
 11514  0F84  0227               	subwf	??_Button_State_NotPressed+1,w
 11515  0F85  3041               	movlw	65
 11516  0F86  1903               	skipnz
 11517  0F87  0226               	subwf	??_Button_State_NotPressed,w
 11518  0F88  1C03               	skipc
 11519  0F89  2FDD               	goto	l439
 11520                           
 11521                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 270:             button->counter = (mtouch_button_statecounter_t)0;
 11522  0F8A  0825               	movf	Button_State_NotPressed@button,w
 11523  0F8B  3E0A               	addlw	10
 11524  0F8C  0086               	movwf	6
 11525  0F8D  3001               	movlw	1	; select bank2/3
 11526  0F8E  0087               	movwf	7
 11527  0F8F  3000               	movlw	0
 11528  0F90  3FC0               	movwi [0]fsr1
 11529  0F91  3FC1               	movwi [1]fsr1
 11530                           
 11531                           ;mcc_generated_files/mtouch/mtouch_button.c: 271:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 11532  0F92  0825               	movf	Button_State_NotPressed@button,w
 11533  0F93  0086               	movwf	6
 11534  0F94  3001               	movlw	1	; select bank2/3
 11535  0F95  0087               	movwf	7
 11536  0F96  0801               	movf	1,w
 11537  0F97  3188  20CC  318F   	fcall	_MTOUCH_Button_Initialize
 11538  0F9A  2FDD               	goto	l439
 11539  0F9B                     l5964:	
 11540  0F9B  0825               	movf	Button_State_NotPressed@button,w
 11541  0F9C  3E09               	addlw	9
 11542  0F9D  0086               	movwf	6
 11543  0F9E  3001               	movlw	1	; select bank2/3
 11544  0F9F  0087               	movwf	7
 11545  0FA0  0801               	movf	1,w
 11546  0FA1  00A6               	movwf	??_Button_State_NotPressed
 11547  0FA2  01A7               	clrf	??_Button_State_NotPressed+1
 11548  0FA3  1BA6               	btfsc	??_Button_State_NotPressed,7
 11549  0FA4  03A7               	decf	??_Button_State_NotPressed+1,f
 11550  0FA5  0825               	movf	Button_State_NotPressed@button,w
 11551  0FA6  3E0E               	addlw	14
 11552  0FA7  0086               	movwf	6
 11553  0FA8  3001               	movlw	1	; select bank2/3
 11554  0FA9  0087               	movwf	7
 11555  0FAA  0827               	movf	??_Button_State_NotPressed+1,w
 11556  0FAB  3A80               	xorlw	128
 11557  0FAC  3C80               	sublw	128
 11558  0FAD  1D03               	skipz
 11559  0FAE  2FB1               	goto	u4385
 11560  0FAF  0826               	movf	??_Button_State_NotPressed,w
 11561  0FB0  0201               	subwf	1,w
 11562  0FB1                     u4385:	
 11563  0FB1  1803               	skipnc
 11564  0FB2  2FD4               	goto	l5970
 11565                           
 11566                           ;mcc_generated_files/mtouch/mtouch_button.c: 276:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         button->state = MTOUCH_BUTTON_STATE_pressed;
 11567  0FB3  3002               	movlw	2
 11568  0FB4  0020               	movlb	0	; select bank0
 11569  0FB5  00A6               	movwf	??_Button_State_NotPressed
 11570  0FB6  0825               	movf	Button_State_NotPressed@button,w
 11571  0FB7  3E02               	addlw	2
 11572  0FB8  0086               	movwf	6
 11573  0FB9  3001               	movlw	1	; select bank2/3
 11574  0FBA  0087               	movwf	7
 11575  0FBB  0826               	movf	??_Button_State_NotPressed,w
 11576  0FBC  0081               	movwf	1
 11577                           
 11578                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11579  0FBD  0825               	movf	Button_State_NotPressed@button,w
 11580  0FBE  3E0A               	addlw	10
 11581  0FBF  0086               	movwf	6
 11582  0FC0  3001               	movlw	1	; select bank2/3
 11583  0FC1  0087               	movwf	7
 11584  0FC2  3000               	movlw	0
 11585  0FC3  3FC0               	movwi [0]fsr1
 11586  0FC4  3FC1               	movwi [1]fsr1
 11587                           
 11588                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:         callback_pressed(button->name)
      +                          ;
 11589  0FC5  0825               	movf	Button_State_NotPressed@button,w
 11590  0FC6  0086               	movwf	6
 11591  0FC7  3001               	movlw	1	; select bank2/3
 11592  0FC8  0087               	movwf	7
 11593  0FC9  0801               	movf	1,w
 11594  0FCA  00A6               	movwf	??_Button_State_NotPressed
 11595  0FCB  0826               	movf	??_Button_State_NotPressed,w
 11596  0FCC  00F5               	movwf	myButtonPressedCallback@button
 11597  0FCD  0021               	movlb	1	; select bank1
 11598  0FCE  086B               	movf	(_callback_pressed+1)^(0+128),w
 11599  0FCF  008A               	movwf	10
 11600  0FD0  086A               	movf	_callback_pressed^(0+128),w
 11601  0FD1  000A               	callw
 11602  0FD2  318F               	pagesel	$
 11603                           
 11604                           ;mcc_generated_files/mtouch/mtouch_button.c: 281:     }
 11605  0FD3  2FDD               	goto	l439
 11606  0FD4                     l5970:	
 11607                           
 11608                           ;mcc_generated_files/mtouch/mtouch_button.c: 283:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->counter = (mtouch_button_statecounter_t)0;
 11609  0FD4  0020               	movlb	0	; select bank0
 11610  0FD5  0825               	movf	Button_State_NotPressed@button,w
 11611  0FD6  3E0A               	addlw	10
 11612  0FD7  0086               	movwf	6
 11613  0FD8  3001               	movlw	1	; select bank2/3
 11614  0FD9  0087               	movwf	7
 11615  0FDA  3000               	movlw	0
 11616  0FDB  3FC0               	movwi [0]fsr1
 11617  0FDC  3FC1               	movwi [1]fsr1
 11618  0FDD                     l439:	
 11619                           
 11620                           ;mcc_generated_files/mtouch/mtouch_button.c: 290:     (button->baseline_count)++;
 11621  0FDD  0020               	movlb	0	; select bank0
 11622  0FDE  0825               	movf	Button_State_NotPressed@button,w
 11623  0FDF  3E0C               	addlw	12
 11624  0FE0  0086               	movwf	6
 11625  0FE1  3001               	movlw	1	; select bank2/3
 11626  0FE2  0087               	movwf	7
 11627  0FE3  3001               	movlw	1
 11628  0FE4  0781               	addwf	1,f
 11629  0FE5  3141               	addfsr 1,1
 11630  0FE6  1803               	skipnc
 11631  0FE7  0A81               	incf	1,f
 11632                           
 11633                           ;mcc_generated_files/mtouch/mtouch_button.c: 291:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 11634  0FE8  0825               	movf	Button_State_NotPressed@button,w
 11635  0FE9  3E0C               	addlw	12
 11636  0FEA  0086               	movwf	6
 11637  0FEB  3001               	movlw	1	; select bank2/3
 11638  0FEC  0087               	movwf	7
 11639  0FED  0016               	moviw fsr1++
 11640  0FEE  3A40               	xorlw	64
 11641  0FEF  00A6               	movwf	??_Button_State_NotPressed
 11642  0FF0  0016               	moviw fsr1++
 11643  0FF1  04A6               	iorwf	??_Button_State_NotPressed,f
 11644  0FF2  1D03               	btfss	3,2
 11645  0FF3  0008               	return
 11646                           
 11647                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 293:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 11648  0FF4  0825               	movf	Button_State_NotPressed@button,w
 11649  0FF5  3E0C               	addlw	12
 11650  0FF6  0086               	movwf	6
 11651  0FF7  3001               	movlw	1	; select bank2/3
 11652  0FF8  0087               	movwf	7
 11653  0FF9  3000               	movlw	0
 11654  0FFA  3FC0               	movwi [0]fsr1
 11655  0FFB  3FC1               	movwi [1]fsr1
 11656                           
 11657                           ;mcc_generated_files/mtouch/mtouch_button.c: 294:         Button_Baseline_Update(button)
      +                          ;
 11658  0FFC  0825               	movf	Button_State_NotPressed@button,w
 11659  0FFD  318C  246C         	fcall	_Button_Baseline_Update
 11660  0FFF  0008               	return
 11661  1000                     __end_of_Button_State_NotPressed:	
 11662                           
 11663                           	psect	text69
 11664  0B07                     __ptext69:	
 11665 ;; *************** function _Button_State_Initializing *****************
 11666 ;; Defined at:
 11667 ;;		line 242 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;  button          1    5[BANK0 ] PTR struct .
 11670 ;;		 -> mtouch_button(68), 
 11671 ;; Auto vars:     Size  Location     Type
 11672 ;;		None
 11673 ;; Return value:  Size  Location     Type
 11674 ;;                  1    wreg      void 
 11675 ;; Registers used:
 11676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11677 ;; Tracked objects:
 11678 ;;		On entry : 0/0
 11679 ;;		On exit  : 0/0
 11680 ;;		Unchanged: 0/0
 11681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11682 ;;      Params:         0       1       0       0       0       0       0       0
 11683 ;;      Locals:         0       0       0       0       0       0       0       0
 11684 ;;      Temps:          0       4       0       0       0       0       0       0
 11685 ;;      Totals:         0       5       0       0       0       0       0       0
 11686 ;;Total ram usage:        5 bytes
 11687 ;; Hardware stack levels used:    1
 11688 ;; Hardware stack levels required when called:    7
 11689 ;; This function calls:
 11690 ;;		_Button_Baseline_Initialize
 11691 ;;		_Button_Baseline_Update
 11692 ;; This function is called by:
 11693 ;;		_Button_Service
 11694 ;; This function uses a non-reentrant model
 11695 ;;
 11696                           
 11697                           
 11698                           ;psect for function _Button_State_Initializing
 11699  0B07                     _Button_State_Initializing:	
 11700                           
 11701                           ;mcc_generated_files/mtouch/mtouch_button.c: 242: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 243: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 245:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 11702                           
 11703                           ;incstack = 0
 11704                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11705  0B07  0020               	movlb	0	; select bank0
 11706  0B08  0825               	movf	Button_State_Initializing@button,w
 11707  0B09  3E0A               	addlw	10
 11708  0B0A  0086               	movwf	6
 11709  0B0B  3001               	movlw	1	; select bank2/3
 11710  0B0C  0087               	movwf	7
 11711  0B0D  3F40               	moviw [0]fsr1
 11712  0B0E  00A6               	movwf	??_Button_State_Initializing
 11713  0B0F  3F41               	moviw [1]fsr1
 11714  0B10  00A7               	movwf	??_Button_State_Initializing+1
 11715  0B11  3000               	movlw	0
 11716  0B12  0227               	subwf	??_Button_State_Initializing+1,w
 11717  0B13  3009               	movlw	9
 11718  0B14  1903               	skipnz
 11719  0B15  0226               	subwf	??_Button_State_Initializing,w
 11720  0B16  1803               	skipnc
 11721  0B17  2B1D               	goto	l5948
 11722                           
 11723                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 247:         Button_Baseline_Initialize(button);
 11724  0B18  0825               	movf	Button_State_Initializing@button,w
 11725  0B19  3188  200C  318B   	fcall	_Button_Baseline_Initialize
 11726                           
 11727                           ;mcc_generated_files/mtouch/mtouch_button.c: 248:     } else {
 11728  0B1C  2B21               	goto	l5950
 11729  0B1D                     l5948:	
 11730                           
 11731                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:         Button_Baseline_Update(button)
      +                          ;
 11732  0B1D  0825               	movf	Button_State_Initializing@button,w
 11733  0B1E  318C  246C  318B   	fcall	_Button_Baseline_Update
 11734  0B21                     l5950:	
 11735                           
 11736                           ;mcc_generated_files/mtouch/mtouch_button.c: 253:     (button->counter)++;
 11737  0B21  0020               	movlb	0	; select bank0
 11738  0B22  0825               	movf	Button_State_Initializing@button,w
 11739  0B23  3E0A               	addlw	10
 11740  0B24  0086               	movwf	6
 11741  0B25  3001               	movlw	1	; select bank2/3
 11742  0B26  0087               	movwf	7
 11743  0B27  3001               	movlw	1
 11744  0B28  0781               	addwf	1,f
 11745  0B29  3141               	addfsr 1,1
 11746  0B2A  1803               	skipnc
 11747  0B2B  0A81               	incf	1,f
 11748                           
 11749                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 11750  0B2C  0825               	movf	Button_State_Initializing@button,w
 11751  0B2D  3E0A               	addlw	10
 11752  0B2E  0086               	movwf	6
 11753  0B2F  3001               	movlw	1	; select bank2/3
 11754  0B30  0087               	movwf	7
 11755  0B31  3F40               	moviw [0]fsr1
 11756  0B32  00A6               	movwf	??_Button_State_Initializing
 11757  0B33  3F41               	moviw [1]fsr1
 11758  0B34  00A7               	movwf	??_Button_State_Initializing+1
 11759  0B35  3000               	movlw	0
 11760  0B36  0227               	subwf	??_Button_State_Initializing+1,w
 11761  0B37  3010               	movlw	16
 11762  0B38  1903               	skipnz
 11763  0B39  0226               	subwf	??_Button_State_Initializing,w
 11764  0B3A  1C03               	skipc
 11765  0B3B  0008               	return
 11766                           
 11767                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 256:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 11768  0B3C  0825               	movf	Button_State_Initializing@button,w
 11769  0B3D  3E05               	addlw	5
 11770  0B3E  0086               	movwf	6
 11771  0B3F  3001               	movlw	1	; select bank2/3
 11772  0B40  0087               	movwf	7
 11773  0B41  3F40               	moviw [0]fsr1
 11774  0B42  00A6               	movwf	??_Button_State_Initializing
 11775  0B43  3F41               	moviw [1]fsr1
 11776  0B44  00A7               	movwf	??_Button_State_Initializing+1
 11777  0B45  3F42               	moviw [2]fsr1
 11778  0B46  00A8               	movwf	??_Button_State_Initializing+2
 11779  0B47  3F43               	moviw [3]fsr1
 11780  0B48  00A9               	movwf	??_Button_State_Initializing+3
 11781  0B49  3004               	movlw	4
 11782  0B4A                     u4355:	
 11783  0B4A  36A9               	lsrf	??_Button_State_Initializing+3,f
 11784  0B4B  0CA8               	rrf	??_Button_State_Initializing+2,f
 11785  0B4C  0CA7               	rrf	??_Button_State_Initializing+1,f
 11786  0B4D  0CA6               	rrf	??_Button_State_Initializing,f
 11787  0B4E  0B89               	decfsz	9,f
 11788  0B4F  2B4A               	goto	u4355
 11789  0B50  0825               	movf	Button_State_Initializing@button,w
 11790  0B51  3E03               	addlw	3
 11791  0B52  0086               	movwf	6
 11792  0B53  3001               	movlw	1	; select bank2/3
 11793  0B54  0087               	movwf	7
 11794  0B55  0826               	movf	??_Button_State_Initializing,w
 11795  0B56  3FC0               	movwi [0]fsr1
 11796  0B57  0827               	movf	??_Button_State_Initializing+1,w
 11797  0B58  3FC1               	movwi [1]fsr1
 11798                           
 11799                           ;mcc_generated_files/mtouch/mtouch_button.c: 257:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 11800  0B59  0825               	movf	Button_State_Initializing@button,w
 11801  0B5A  3E02               	addlw	2
 11802  0B5B  0086               	movwf	6
 11803  0B5C  3001               	movlw	1	; select bank2/3
 11804  0B5D  0087               	movwf	7
 11805  0B5E  0181               	clrf	1
 11806  0B5F  0A81               	incf	1,f
 11807                           
 11808                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11809  0B60  0825               	movf	Button_State_Initializing@button,w
 11810  0B61  3E0A               	addlw	10
 11811  0B62  0086               	movwf	6
 11812  0B63  3001               	movlw	1	; select bank2/3
 11813  0B64  0087               	movwf	7
 11814  0B65  3000               	movlw	0
 11815  0B66  3FC0               	movwi [0]fsr1
 11816  0B67  3FC1               	movwi [1]fsr1
 11817  0B68  0008               	return
 11818  0B69                     __end_of_Button_State_Initializing:	
 11819                           
 11820                           	psect	text70
 11821  0786                     __ptext70:	
 11822 ;; *************** function _Button_State_Pressed *****************
 11823 ;; Defined at:
 11824 ;;		line 298 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11825 ;; Parameters:    Size  Location     Type
 11826 ;;  button          1    5[BANK0 ] PTR struct .
 11827 ;;		 -> mtouch_button(68), 
 11828 ;; Auto vars:     Size  Location     Type
 11829 ;;		None
 11830 ;; Return value:  Size  Location     Type
 11831 ;;                  1    wreg      void 
 11832 ;; Registers used:
 11833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11834 ;; Tracked objects:
 11835 ;;		On entry : 0/0
 11836 ;;		On exit  : 0/0
 11837 ;;		Unchanged: 0/0
 11838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11839 ;;      Params:         0       1       0       0       0       0       0       0
 11840 ;;      Locals:         0       0       0       0       0       0       0       0
 11841 ;;      Temps:          0       2       0       0       0       0       0       0
 11842 ;;      Totals:         0       3       0       0       0       0       0       0
 11843 ;;Total ram usage:        3 bytes
 11844 ;; Hardware stack levels used:    1
 11845 ;; Hardware stack levels required when called:    7
 11846 ;; This function calls:
 11847 ;;		_Button_DefaultCallback
 11848 ;;		_MTOUCH_Button_Initialize
 11849 ;;		_myButtonReleasedCallback
 11850 ;; This function is called by:
 11851 ;;		_Button_Service
 11852 ;; This function uses a non-reentrant model
 11853 ;;
 11854                           
 11855                           
 11856                           ;psect for function _Button_State_Pressed
 11857  0786                     _Button_State_Pressed:	
 11858                           
 11859                           ;mcc_generated_files/mtouch/mtouch_button.c: 298: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 299: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 301:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 11860                           
 11861                           ;incstack = 0
 11862                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11863  0786  0020               	movlb	0	; select bank0
 11864  0787  0825               	movf	Button_State_Pressed@button,w
 11865  0788  3E0A               	addlw	10
 11866  0789  0086               	movwf	6
 11867  078A  3001               	movlw	1	; select bank2/3
 11868  078B  0087               	movwf	7
 11869  078C  3F40               	moviw [0]fsr1
 11870  078D  00A6               	movwf	??_Button_State_Pressed
 11871  078E  3F41               	moviw [1]fsr1
 11872  078F  00A7               	movwf	??_Button_State_Pressed+1
 11873  0790  3007               	movlw	7
 11874  0791  0227               	subwf	??_Button_State_Pressed+1,w
 11875  0792  30D0               	movlw	208
 11876  0793  1903               	skipnz
 11877  0794  0226               	subwf	??_Button_State_Pressed,w
 11878  0795  1C03               	skipc
 11879  0796  2FAE               	goto	l5980
 11880                           
 11881                           ;mcc_generated_files/mtouch/mtouch_button.c: 302:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 303:         MTOUCH_Button_Initialize(button->name);
 11882  0797  0825               	movf	Button_State_Pressed@button,w
 11883  0798  0086               	movwf	6
 11884  0799  3001               	movlw	1	; select bank2/3
 11885  079A  0087               	movwf	7
 11886  079B  0801               	movf	1,w
 11887  079C  3188  20CC  3187   	fcall	_MTOUCH_Button_Initialize
 11888                           
 11889                           ;mcc_generated_files/mtouch/mtouch_button.c: 304:         callback_notPressed(button->na
      +                          me);
 11890  079F  0020               	movlb	0	; select bank0
 11891  07A0  0825               	movf	Button_State_Pressed@button,w
 11892  07A1  0086               	movwf	6
 11893  07A2  3001               	movlw	1	; select bank2/3
 11894  07A3  0087               	movwf	7
 11895  07A4  0801               	movf	1,w
 11896  07A5  00A6               	movwf	??_Button_State_Pressed
 11897  07A6  0826               	movf	??_Button_State_Pressed,w
 11898  07A7  00F5               	movwf	myButtonReleasedCallback@button
 11899  07A8  086E               	movf	_callback_notPressed+1,w
 11900  07A9  008A               	movwf	10
 11901  07AA  086D               	movf	_callback_notPressed,w
 11902  07AB  000A               	callw
 11903  07AC  3187               	pagesel	$
 11904                           
 11905                           ;mcc_generated_files/mtouch/mtouch_button.c: 305:     }
 11906  07AD  0008               	return
 11907  07AE                     l5980:	
 11908  07AE  0825               	movf	Button_State_Pressed@button,w
 11909  07AF  3E09               	addlw	9
 11910  07B0  0086               	movwf	6
 11911  07B1  3001               	movlw	1	; select bank2/3
 11912  07B2  0087               	movwf	7
 11913  07B3  0801               	movf	1,w
 11914  07B4  3A80               	xorlw	128
 11915  07B5  00A6               	movwf	??_Button_State_Pressed
 11916  07B6  0825               	movf	Button_State_Pressed@button,w
 11917  07B7  3E0E               	addlw	14
 11918  07B8  0086               	movwf	6
 11919  07B9  3001               	movlw	1	; select bank2/3
 11920  07BA  0087               	movwf	7
 11921  07BB  0825               	movf	Button_State_Pressed@button,w
 11922  07BC  3E0E               	addlw	14
 11923  07BD  0084               	movwf	4
 11924  07BE  3001               	movlw	1	; select bank2/3
 11925  07BF  0085               	movwf	5
 11926  07C0  0800               	movf	0,w
 11927  07C1  00A7               	movwf	??_Button_State_Pressed+1
 11928  07C2  0825               	movf	Button_State_Pressed@button,w
 11929  07C3  3E10               	addlw	16
 11930  07C4  0084               	movwf	4
 11931  07C5  3001               	movlw	1	; select bank2/3
 11932  07C6  0085               	movwf	5
 11933  07C7  0A00               	incf	0,w
 11934  07C8  2FCA               	goto	u4414
 11935  07C9                     u4415:	
 11936  07C9  36A7               	lsrf	??_Button_State_Pressed+1,f
 11937  07CA                     u4414:	
 11938  07CA  0B89               	decfsz	9,f
 11939  07CB  2FC9               	goto	u4415
 11940  07CC  0827               	movf	??_Button_State_Pressed+1,w
 11941  07CD  0201               	subwf	1,w
 11942  07CE  3A80               	xorlw	128
 11943  07CF  02A6               	subwf	??_Button_State_Pressed,f
 11944  07D0  1803               	skipnc
 11945  07D1  0008               	return
 11946                           
 11947                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 11948  07D2  0825               	movf	Button_State_Pressed@button,w
 11949  07D3  3E02               	addlw	2
 11950  07D4  0086               	movwf	6
 11951  07D5  3001               	movlw	1	; select bank2/3
 11952  07D6  0087               	movwf	7
 11953  07D7  0181               	clrf	1
 11954  07D8  0A81               	incf	1,f
 11955                           
 11956                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11957  07D9  0825               	movf	Button_State_Pressed@button,w
 11958  07DA  3E0A               	addlw	10
 11959  07DB  0086               	movwf	6
 11960  07DC  3001               	movlw	1	; select bank2/3
 11961  07DD  0087               	movwf	7
 11962  07DE  3000               	movlw	0
 11963  07DF  3FC0               	movwi [0]fsr1
 11964  07E0  3FC1               	movwi [1]fsr1
 11965                           
 11966                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11967  07E1  0825               	movf	Button_State_Pressed@button,w
 11968  07E2  3E0C               	addlw	12
 11969  07E3  0086               	movwf	6
 11970  07E4  3001               	movlw	1	; select bank2/3
 11971  07E5  0087               	movwf	7
 11972  07E6  30FF               	movlw	255
 11973  07E7  3FC0               	movwi [0]fsr1
 11974  07E8  30FB               	movlw	251
 11975  07E9  3FC1               	movwi [1]fsr1
 11976                           
 11977                           ;mcc_generated_files/mtouch/mtouch_button.c: 313:         callback_notPressed(button->na
      +                          me);
 11978  07EA  0825               	movf	Button_State_Pressed@button,w
 11979  07EB  0086               	movwf	6
 11980  07EC  3001               	movlw	1	; select bank2/3
 11981  07ED  0087               	movwf	7
 11982  07EE  0801               	movf	1,w
 11983  07EF  00A6               	movwf	??_Button_State_Pressed
 11984  07F0  0826               	movf	??_Button_State_Pressed,w
 11985  07F1  00F5               	movwf	myButtonReleasedCallback@button
 11986  07F2  086E               	movf	_callback_notPressed+1,w
 11987  07F3  008A               	movwf	10
 11988  07F4  086D               	movf	_callback_notPressed,w
 11989  07F5  000A               	callw
 11990  07F6  3187               	pagesel	$
 11991  07F7  0008               	return
 11992  07F8                     __end_of_Button_State_Pressed:	
 11993                           
 11994                           	psect	text71
 11995  17D2                     __ptext71:	
 11996 ;; *************** function _myButtonPressedCallback *****************
 11997 ;; Defined at:
 11998 ;;		line 183 in file "main.c"
 11999 ;; Parameters:    Size  Location     Type
 12000 ;;  button          1    5[COMMON] enum E2931
 12001 ;; Auto vars:     Size  Location     Type
 12002 ;;		None
 12003 ;; Return value:  Size  Location     Type
 12004 ;;                  1    wreg      void 
 12005 ;; Registers used:
 12006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12007 ;; Tracked objects:
 12008 ;;		On entry : 0/0
 12009 ;;		On exit  : 0/0
 12010 ;;		Unchanged: 0/0
 12011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12012 ;;      Params:         1       0       0       0       0       0       0       0
 12013 ;;      Locals:         0       0       0       0       0       0       0       0
 12014 ;;      Temps:          0       0       0       0       0       0       0       0
 12015 ;;      Totals:         1       0       0       0       0       0       0       0
 12016 ;;Total ram usage:        1 bytes
 12017 ;; Hardware stack levels used:    1
 12018 ;; Hardware stack levels required when called:    5
 12019 ;; This function calls:
 12020 ;;		_LED_PROCESS
 12021 ;;		_RELAY_PROCESS
 12022 ;; This function is called by:
 12023 ;;		_main
 12024 ;;		_Button_State_NotPressed
 12025 ;; This function uses a non-reentrant model
 12026 ;;
 12027                           
 12028                           
 12029                           ;psect for function _myButtonPressedCallback
 12030  17D2                     _myButtonPressedCallback:	
 12031                           
 12032                           ;main.c: 183: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 184:
      +                           {;main.c: 185:     count_conf = 0;
 12033                           
 12034                           ;incstack = 0
 12035                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12036  17D2  0021               	movlb	1	; select bank1
 12037  17D3  01B6               	clrf	_count_conf^(0+128)
 12038  17D4  01B7               	clrf	(_count_conf+1)^(0+128)
 12039                           
 12040                           ;main.c: 186:     if(config_status == 0)
 12041  17D5  0020               	movlb	0	; select bank0
 12042  17D6  0865               	movf	_config_status,w
 12043  17D7  1D03               	btfss	3,2
 12044  17D8  0008               	return
 12045                           
 12046                           ;main.c: 187:     {;main.c: 188:         if(button == 0) last_touch_status.full_status ^
      +                          = 0b00000001;
 12047  17D9  0875               	movf	myButtonPressedCallback@button,w
 12048  17DA  1D03               	btfss	3,2
 12049  17DB  2FE0               	goto	l4176
 12050  17DC  3001               	movlw	1
 12051  17DD  06DB               	xorwf	_last_touch_status,f
 12052  17DE  3000               	movlw	0
 12053  17DF  06DC               	xorwf	_last_touch_status+1,f
 12054  17E0                     l4176:	
 12055                           
 12056                           ;main.c: 189:         if(button == 1) last_touch_status.full_status ^= 0b00000010;
 12057  17E0  0375               	decf	myButtonPressedCallback@button,w
 12058  17E1  1D03               	btfss	3,2
 12059  17E2  2FE7               	goto	l4180
 12060  17E3  3002               	movlw	2
 12061  17E4  06DB               	xorwf	_last_touch_status,f
 12062  17E5  3000               	movlw	0
 12063  17E6  06DC               	xorwf	_last_touch_status+1,f
 12064  17E7                     l4180:	
 12065                           
 12066                           ;main.c: 190:         if(button == 2) last_touch_status.full_status ^= 0b00000100;
 12067  17E7  3002               	movlw	2
 12068  17E8  0675               	xorwf	myButtonPressedCallback@button,w
 12069  17E9  1D03               	btfss	3,2
 12070  17EA  2FEF               	goto	l4184
 12071  17EB  3004               	movlw	4
 12072  17EC  06DB               	xorwf	_last_touch_status,f
 12073  17ED  3000               	movlw	0
 12074  17EE  06DC               	xorwf	_last_touch_status+1,f
 12075  17EF                     l4184:	
 12076                           
 12077                           ;main.c: 191:         if(button == 3) last_touch_status.full_status ^= 0b00001000;
 12078  17EF  3003               	movlw	3
 12079  17F0  0675               	xorwf	myButtonPressedCallback@button,w
 12080  17F1  1D03               	btfss	3,2
 12081  17F2  2FF7               	goto	l4188
 12082  17F3  3008               	movlw	8
 12083  17F4  06DB               	xorwf	_last_touch_status,f
 12084  17F5  3000               	movlw	0
 12085  17F6  06DC               	xorwf	_last_touch_status+1,f
 12086  17F7                     l4188:	
 12087                           
 12088                           ;main.c: 193:         LED_PROCESS(last_touch_status.full_status);
 12089  17F7  085B               	movf	_last_touch_status,w
 12090  17F8  318E  2622  3197   	fcall	_LED_PROCESS
 12091                           
 12092                           ;main.c: 194:         RELAY_PROCESS(last_touch_status.full_status);
 12093  17FB  0020               	movlb	0	; select bank0
 12094  17FC  085B               	movf	_last_touch_status,w
 12095  17FD  318E  26BF         	fcall	_RELAY_PROCESS
 12096  17FF  0008               	return
 12097  1800                     __end_of_myButtonPressedCallback:	
 12098                           
 12099                           	psect	text72
 12100  135B                     __ptext72:	
 12101 ;; *************** function _Button_DefaultCallback *****************
 12102 ;; Defined at:
 12103 ;;		line 444 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12104 ;; Parameters:    Size  Location     Type
 12105 ;;  button          1    5[COMMON] enum E3070
 12106 ;; Auto vars:     Size  Location     Type
 12107 ;;		None
 12108 ;; Return value:  Size  Location     Type
 12109 ;;                  1    wreg      void 
 12110 ;; Registers used:
 12111 ;;		None
 12112 ;; Tracked objects:
 12113 ;;		On entry : 0/0
 12114 ;;		On exit  : 0/0
 12115 ;;		Unchanged: 0/0
 12116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12117 ;;      Params:         1       0       0       0       0       0       0       0
 12118 ;;      Locals:         0       0       0       0       0       0       0       0
 12119 ;;      Temps:          0       0       0       0       0       0       0       0
 12120 ;;      Totals:         1       0       0       0       0       0       0       0
 12121 ;;Total ram usage:        1 bytes
 12122 ;; Hardware stack levels used:    1
 12123 ;; Hardware stack levels required when called:    4
 12124 ;; This function calls:
 12125 ;;		Nothing
 12126 ;; This function is called by:
 12127 ;;		_Button_State_NotPressed
 12128 ;;		_Button_State_Pressed
 12129 ;; This function uses a non-reentrant model
 12130 ;;
 12131                           
 12132                           
 12133                           ;psect for function _Button_DefaultCallback
 12134  135B                     _Button_DefaultCallback:	
 12135                           
 12136                           ;incstack = 0
 12137                           ; Regs used in _Button_DefaultCallback: []
 12138  135B  0008               	return
 12139  135C                     __end_of_Button_DefaultCallback:	
 12140                           
 12141                           	psect	text73
 12142  164C                     __ptext73:	
 12143 ;; *************** function _myButtonReleasedCallback *****************
 12144 ;; Defined at:
 12145 ;;		line 197 in file "main.c"
 12146 ;; Parameters:    Size  Location     Type
 12147 ;;  button          1    5[COMMON] enum E2931
 12148 ;; Auto vars:     Size  Location     Type
 12149 ;;		None
 12150 ;; Return value:  Size  Location     Type
 12151 ;;                  1    wreg      void 
 12152 ;; Registers used:
 12153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12154 ;; Tracked objects:
 12155 ;;		On entry : 0/0
 12156 ;;		On exit  : 0/0
 12157 ;;		Unchanged: 0/0
 12158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12159 ;;      Params:         1       0       0       0       0       0       0       0
 12160 ;;      Locals:         0       0       0       0       0       0       0       0
 12161 ;;      Temps:          0       0       0       0       0       0       0       0
 12162 ;;      Totals:         1       0       0       0       0       0       0       0
 12163 ;;Total ram usage:        1 bytes
 12164 ;; Hardware stack levels used:    1
 12165 ;; Hardware stack levels required when called:    5
 12166 ;; This function calls:
 12167 ;;		_MTOUCH_Button_isPressed
 12168 ;; This function is called by:
 12169 ;;		_main
 12170 ;;		_Button_State_Pressed
 12171 ;; This function uses a non-reentrant model
 12172 ;;
 12173                           
 12174                           
 12175                           ;psect for function _myButtonReleasedCallback
 12176  164C                     _myButtonReleasedCallback:	
 12177                           
 12178                           ;main.c: 197: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 198
      +                          : {;main.c: 199:     count_conf = 0;
 12179                           
 12180                           ;incstack = 0
 12181                           ; Regs used in _myButtonReleasedCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12182  164C  0021               	movlb	1	; select bank1
 12183  164D  01B6               	clrf	_count_conf^(0+128)
 12184  164E  01B7               	clrf	(_count_conf+1)^(0+128)
 12185                           
 12186                           ;main.c: 200:     if(config_status == 0)
 12187  164F  0020               	movlb	0	; select bank0
 12188  1650  0865               	movf	_config_status,w
 12189  1651  1D03               	btfss	3,2
 12190  1652  0008               	return
 12191                           
 12192                           ;main.c: 201:     {;main.c: 203:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0&&MTOUCH_Button_isPressed(2)==0)
 12193  1653  3000               	movlw	0
 12194  1654  3194  2476  3196   	fcall	_MTOUCH_Button_isPressed
 12195  1657  3A00               	xorlw	0
 12196  1658  1D03               	skipz
 12197  1659  0008               	return
 12198  165A  3001               	movlw	1
 12199  165B  3194  2476  3196   	fcall	_MTOUCH_Button_isPressed
 12200  165E  3A00               	xorlw	0
 12201  165F  1D03               	skipz
 12202  1660  0008               	return
 12203  1661  3002               	movlw	2
 12204  1662  3194  2476  3196   	fcall	_MTOUCH_Button_isPressed
 12205  1665  3A00               	xorlw	0
 12206  1666  1D03               	skipz
 12207  1667  0008               	return
 12208                           
 12209                           ;main.c: 204:         {;main.c: 205:             update_state_flag = 1;
 12210  1668  0020               	movlb	0	; select bank0
 12211  1669  01E1               	clrf	_update_state_flag
 12212  166A  0AE1               	incf	_update_state_flag,f
 12213  166B  0008               	return
 12214  166C                     __end_of_myButtonReleasedCallback:	
 12215                           
 12216                           	psect	text74
 12217  1476                     __ptext74:	
 12218 ;; *************** function _MTOUCH_Button_isPressed *****************
 12219 ;; Defined at:
 12220 ;;		line 351 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12221 ;; Parameters:    Size  Location     Type
 12222 ;;  name            1    wreg     enum E3070
 12223 ;; Auto vars:     Size  Location     Type
 12224 ;;  name            1    2[COMMON] enum E3070
 12225 ;; Return value:  Size  Location     Type
 12226 ;;                  1    wreg      _Bool 
 12227 ;; Registers used:
 12228 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12229 ;; Tracked objects:
 12230 ;;		On entry : 0/0
 12231 ;;		On exit  : 0/0
 12232 ;;		Unchanged: 0/0
 12233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12234 ;;      Params:         0       0       0       0       0       0       0       0
 12235 ;;      Locals:         1       0       0       0       0       0       0       0
 12236 ;;      Temps:          0       0       0       0       0       0       0       0
 12237 ;;      Totals:         1       0       0       0       0       0       0       0
 12238 ;;Total ram usage:        1 bytes
 12239 ;; Hardware stack levels used:    1
 12240 ;; Hardware stack levels required when called:    4
 12241 ;; This function calls:
 12242 ;;		Nothing
 12243 ;; This function is called by:
 12244 ;;		_main
 12245 ;;		_myButtonReleasedCallback
 12246 ;; This function uses a non-reentrant model
 12247 ;;
 12248                           
 12249                           
 12250                           ;psect for function _MTOUCH_Button_isPressed
 12251  1476                     _MTOUCH_Button_isPressed:	
 12252                           
 12253                           ;incstack = 0
 12254                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 12255                           ;MTOUCH_Button_isPressed@name stored from wreg
 12256  1476  00F2               	movwf	MTOUCH_Button_isPressed@name
 12257                           
 12258                           ;mcc_generated_files/mtouch/mtouch_button.c: 351: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 352: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 353:         return (_Bool)((mtouch_button[name].state == 
      +                          MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 12259  1477  0E72               	swapf	MTOUCH_Button_isPressed@name,w
 12260  1478  39F0               	andlw	240
 12261  1479  0772               	addwf	MTOUCH_Button_isPressed@name,w
 12262  147A  3EA2               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 12263  147B  0086               	movwf	6
 12264  147C  3001               	movlw	1	; select bank3/4
 12265  147D  0087               	movwf	7
 12266  147E  3002               	movlw	2
 12267  147F  0601               	xorwf	1,w
 12268  1480  1D03               	btfss	3,2
 12269  1481  2C84               	goto	u2330
 12270  1482  3001               	movlw	1
 12271  1483  0008               	return
 12272  1484                     u2330:	
 12273  1484  3000               	movlw	0
 12274  1485  0008               	return
 12275  1486                     __end_of_MTOUCH_Button_isPressed:	
 12276                           
 12277                           	psect	text75
 12278  08CC                     __ptext75:	
 12279 ;; *************** function _MTOUCH_Button_Initialize *****************
 12280 ;; Defined at:
 12281 ;;		line 176 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12282 ;; Parameters:    Size  Location     Type
 12283 ;;  name            1    wreg     enum E3070
 12284 ;; Auto vars:     Size  Location     Type
 12285 ;;  name            1    0[BANK0 ] enum E3070
 12286 ;;  button          1    1[BANK0 ] PTR struct .
 12287 ;;		 -> mtouch_button(68), 
 12288 ;; Return value:  Size  Location     Type
 12289 ;;                  1    wreg      void 
 12290 ;; Registers used:
 12291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12292 ;; Tracked objects:
 12293 ;;		On entry : 0/0
 12294 ;;		On exit  : 0/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12297 ;;      Params:         0       0       0       0       0       0       0       0
 12298 ;;      Locals:         0       2       0       0       0       0       0       0
 12299 ;;      Temps:          1       0       0       0       0       0       0       0
 12300 ;;      Totals:         1       2       0       0       0       0       0       0
 12301 ;;Total ram usage:        3 bytes
 12302 ;; Hardware stack levels used:    1
 12303 ;; Hardware stack levels required when called:    6
 12304 ;; This function calls:
 12305 ;;		_MTOUCH_Sensor_Calibrate
 12306 ;; This function is called by:
 12307 ;;		_MTOUCH_Button_InitializeAll
 12308 ;;		_Button_Service
 12309 ;;		_Button_State_NotPressed
 12310 ;;		_Button_State_Pressed
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           
 12315                           ;psect for function _MTOUCH_Button_Initialize
 12316  08CC                     _MTOUCH_Button_Initialize:	
 12317                           
 12318                           ;incstack = 0
 12319                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12320                           ;MTOUCH_Button_Initialize@name stored from wreg
 12321  08CC  0020               	movlb	0	; select bank0
 12322  08CD  00A0               	movwf	MTOUCH_Button_Initialize@name
 12323                           
 12324                           ;mcc_generated_files/mtouch/mtouch_button.c: 176: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 177: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 178:     mtouch_button_t* button = &mtouch_button[name];
 12325  08CE  0E20               	swapf	MTOUCH_Button_Initialize@name,w
 12326  08CF  39F0               	andlw	240
 12327  08D0  0720               	addwf	MTOUCH_Button_Initialize@name,w
 12328  08D1  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 12329  08D2  00F8               	movwf	??_MTOUCH_Button_Initialize
 12330  08D3  0878               	movf	??_MTOUCH_Button_Initialize,w
 12331  08D4  00A1               	movwf	MTOUCH_Button_Initialize@button
 12332                           
 12333                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 12334  08D5  0821               	movf	MTOUCH_Button_Initialize@button,w
 12335  08D6  3E02               	addlw	2
 12336  08D7  0086               	movwf	6
 12337  08D8  3001               	movlw	1	; select bank2/3
 12338  08D9  0087               	movwf	7
 12339  08DA  0181               	clrf	1
 12340                           
 12341                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 12342  08DB  0821               	movf	MTOUCH_Button_Initialize@button,w
 12343  08DC  3E05               	addlw	5
 12344  08DD  0086               	movwf	6
 12345  08DE  3001               	movlw	1	; select bank2/3
 12346  08DF  0087               	movwf	7
 12347  08E0  3000               	movlw	0
 12348  08E1  3FC0               	movwi [0]fsr1
 12349  08E2  3000               	movlw	0
 12350  08E3  3FC1               	movwi [1]fsr1
 12351  08E4  3FC2               	movwi [2]fsr1
 12352  08E5  3FC3               	movwi [3]fsr1
 12353                           
 12354                           ;mcc_generated_files/mtouch/mtouch_button.c: 182:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 12355  08E6  0821               	movf	MTOUCH_Button_Initialize@button,w
 12356  08E7  3E0A               	addlw	10
 12357  08E8  0086               	movwf	6
 12358  08E9  3001               	movlw	1	; select bank2/3
 12359  08EA  0087               	movwf	7
 12360  08EB  3000               	movlw	0
 12361  08EC  3FC0               	movwi [0]fsr1
 12362  08ED  3FC1               	movwi [1]fsr1
 12363                           
 12364                           ;mcc_generated_files/mtouch/mtouch_button.c: 183:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 12365  08EE  0821               	movf	MTOUCH_Button_Initialize@button,w
 12366  08EF  3E0C               	addlw	12
 12367  08F0  0086               	movwf	6
 12368  08F1  3001               	movlw	1	; select bank2/3
 12369  08F2  0087               	movwf	7
 12370  08F3  3000               	movlw	0
 12371  08F4  3FC0               	movwi [0]fsr1
 12372  08F5  3FC1               	movwi [1]fsr1
 12373                           
 12374                           ;mcc_generated_files/mtouch/mtouch_button.c: 185:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 12375  08F6  0A21               	incf	MTOUCH_Button_Initialize@button,w
 12376  08F7  0086               	movwf	6
 12377  08F8  3001               	movlw	1	; select bank2/3
 12378  08F9  0087               	movwf	7
 12379  08FA  0801               	movf	1,w
 12380  08FB  3194  2411         	fcall	_MTOUCH_Sensor_Calibrate
 12381  08FD  0008               	return
 12382  08FE                     __end_of_MTOUCH_Button_Initialize:	
 12383                           
 12384                           	psect	text76
 12385  1411                     __ptext76:	
 12386 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 12387 ;; Defined at:
 12388 ;;		line 861 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;  sensor          1    wreg     enum E2871
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;  sensor          1    7[COMMON] enum E2871
 12393 ;; Return value:  Size  Location     Type
 12394 ;;                  1    wreg      void 
 12395 ;; Registers used:
 12396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12397 ;; Tracked objects:
 12398 ;;		On entry : 0/0
 12399 ;;		On exit  : 0/0
 12400 ;;		Unchanged: 0/0
 12401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12402 ;;      Params:         0       0       0       0       0       0       0       0
 12403 ;;      Locals:         1       0       0       0       0       0       0       0
 12404 ;;      Temps:          1       0       0       0       0       0       0       0
 12405 ;;      Totals:         2       0       0       0       0       0       0       0
 12406 ;;Total ram usage:        2 bytes
 12407 ;; Hardware stack levels used:    1
 12408 ;; Hardware stack levels required when called:    5
 12409 ;; This function calls:
 12410 ;;		___bmul
 12411 ;; This function is called by:
 12412 ;;		_MTOUCH_Sensor_Initialize
 12413 ;;		_MTOUCH_Button_Initialize
 12414 ;; This function uses a non-reentrant model
 12415 ;;
 12416                           
 12417                           
 12418                           ;psect for function _MTOUCH_Sensor_Calibrate
 12419  1411                     _MTOUCH_Sensor_Calibrate:	
 12420                           
 12421                           ;incstack = 0
 12422                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12423                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 12424  1411  00F7               	movwf	MTOUCH_Sensor_Calibrate@sensor
 12425                           
 12426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 861: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 862: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 864:         mtouch_sensor[sensor].calibrated = 0;
 12427  1412  3009               	movlw	9
 12428  1413  00F6               	movwf	??_MTOUCH_Sensor_Calibrate
 12429  1414  0876               	movf	??_MTOUCH_Sensor_Calibrate,w
 12430  1415  00F2               	movwf	___bmul@multiplicand
 12431  1416  0877               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 12432  1417  3194  24C6         	fcall	___bmul
 12433  1419  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12434  141A  0086               	movwf	6
 12435  141B  3001               	movlw	1	; select bank2/3
 12436  141C  0087               	movwf	7
 12437  141D  1101               	bcf	1,2
 12438  141E  0008               	return
 12439  141F                     __end_of_MTOUCH_Sensor_Calibrate:	
 12440                           
 12441                           	psect	text77
 12442  0C6C                     __ptext77:	
 12443 ;; *************** function _Button_Baseline_Update *****************
 12444 ;; Defined at:
 12445 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12446 ;; Parameters:    Size  Location     Type
 12447 ;;  button          1    wreg     PTR struct .
 12448 ;;		 -> mtouch_button(68), 
 12449 ;; Auto vars:     Size  Location     Type
 12450 ;;  button          1    8[COMMON] PTR struct .
 12451 ;;		 -> mtouch_button(68), 
 12452 ;; Return value:  Size  Location     Type
 12453 ;;                  1    wreg      void 
 12454 ;; Registers used:
 12455 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12461 ;;      Params:         0       0       0       0       0       0       0       0
 12462 ;;      Locals:         1       0       0       0       0       0       0       0
 12463 ;;      Temps:          6       0       0       0       0       0       0       0
 12464 ;;      Totals:         7       0       0       0       0       0       0       0
 12465 ;;Total ram usage:        7 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; Hardware stack levels required when called:    4
 12468 ;; This function calls:
 12469 ;;		Nothing
 12470 ;; This function is called by:
 12471 ;;		_Button_State_Initializing
 12472 ;;		_Button_State_NotPressed
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function _Button_Baseline_Update
 12478  0C6C                     _Button_Baseline_Update:	
 12479                           
 12480                           ;incstack = 0
 12481                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12482                           ;Button_Baseline_Update@button stored from wreg
 12483  0C6C  00F8               	movwf	Button_Baseline_Update@button
 12484                           
 12485                           ;mcc_generated_files/mtouch/mtouch_button.c: 423: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 424: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 425:     if (GIE == (uint8_t)1)
 12486  0C6D  1F8B               	btfss	11,7	;volatile
 12487  0C6E  2CB6               	goto	l4158
 12488                           
 12489                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 427:         GIE = (uint8_t)0;
 12490  0C6F  138B               	bcf	11,7	;volatile
 12491                           
 12492                           ;mcc_generated_files/mtouch/mtouch_button.c: 428:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 12493  0C70  0878               	movf	Button_Baseline_Update@button,w
 12494  0C71  3E05               	addlw	5
 12495  0C72  0086               	movwf	6
 12496  0C73  3001               	movlw	1	; select bank2/3
 12497  0C74  0087               	movwf	7
 12498  0C75  3F40               	moviw [0]fsr1
 12499  0C76  00F2               	movwf	??_Button_Baseline_Update
 12500  0C77  3F41               	moviw [1]fsr1
 12501  0C78  00F3               	movwf	??_Button_Baseline_Update+1
 12502  0C79  3F42               	moviw [2]fsr1
 12503  0C7A  00F4               	movwf	??_Button_Baseline_Update+2
 12504  0C7B  3F43               	moviw [3]fsr1
 12505  0C7C  00F5               	movwf	??_Button_Baseline_Update+3
 12506  0C7D  3004               	movlw	4
 12507  0C7E                     u2495:	
 12508  0C7E  36F5               	lsrf	??_Button_Baseline_Update+3,f
 12509  0C7F  0CF4               	rrf	??_Button_Baseline_Update+2,f
 12510  0C80  0CF3               	rrf	??_Button_Baseline_Update+1,f
 12511  0C81  0CF2               	rrf	??_Button_Baseline_Update,f
 12512  0C82  0B89               	decfsz	9,f
 12513  0C83  2C7E               	goto	u2495
 12514  0C84  0878               	movf	Button_Baseline_Update@button,w
 12515  0C85  3E05               	addlw	5
 12516  0C86  0086               	movwf	6
 12517  0C87  3001               	movlw	1	; select bank2/3
 12518  0C88  0087               	movwf	7
 12519  0C89  0872               	movf	??_Button_Baseline_Update,w
 12520  0C8A  0281               	subwf	1,f
 12521  0C8B  3141               	addfsr 1,1
 12522  0C8C  0873               	movf	??_Button_Baseline_Update+1,w
 12523  0C8D  3B81               	subwfb	1,f
 12524  0C8E  3141               	addfsr 1,1
 12525  0C8F  0874               	movf	??_Button_Baseline_Update+2,w
 12526  0C90  3B81               	subwfb	1,f
 12527  0C91  3141               	addfsr 1,1
 12528  0C92  0875               	movf	??_Button_Baseline_Update+3,w
 12529  0C93  3B81               	subwfb	1,f
 12530  0C94  317D               	addfsr 1,-3
 12531                           
 12532                           ;mcc_generated_files/mtouch/mtouch_button.c: 429:         button->baseline += button->re
      +                          ading;
 12533  0C95  0878               	movf	Button_Baseline_Update@button,w
 12534  0C96  3E03               	addlw	3
 12535  0C97  0086               	movwf	6
 12536  0C98  3001               	movlw	1	; select bank2/3
 12537  0C99  0087               	movwf	7
 12538  0C9A  3F40               	moviw [0]fsr1
 12539  0C9B  00F2               	movwf	??_Button_Baseline_Update
 12540  0C9C  3F41               	moviw [1]fsr1
 12541  0C9D  00F3               	movwf	??_Button_Baseline_Update+1
 12542  0C9E  0872               	movf	??_Button_Baseline_Update,w
 12543  0C9F  00F4               	movwf	??_Button_Baseline_Update+2
 12544  0CA0  0873               	movf	??_Button_Baseline_Update+1,w
 12545  0CA1  00F5               	movwf	??_Button_Baseline_Update+3
 12546  0CA2  01F6               	clrf	??_Button_Baseline_Update+4
 12547  0CA3  01F7               	clrf	??_Button_Baseline_Update+5
 12548  0CA4  0878               	movf	Button_Baseline_Update@button,w
 12549  0CA5  3E05               	addlw	5
 12550  0CA6  0086               	movwf	6
 12551  0CA7  3001               	movlw	1	; select bank2/3
 12552  0CA8  0087               	movwf	7
 12553  0CA9  0874               	movf	??_Button_Baseline_Update+2,w
 12554  0CAA  0781               	addwf	1,f
 12555  0CAB  3141               	addfsr 1,1
 12556  0CAC  0875               	movf	??_Button_Baseline_Update+3,w
 12557  0CAD  3D81               	addwfc	1,f
 12558  0CAE  3141               	addfsr 1,1
 12559  0CAF  0876               	movf	??_Button_Baseline_Update+4,w
 12560  0CB0  3D81               	addwfc	1,f
 12561  0CB1  3141               	addfsr 1,1
 12562  0CB2  0877               	movf	??_Button_Baseline_Update+5,w
 12563  0CB3  3D81               	addwfc	1,f
 12564                           
 12565                           ;mcc_generated_files/mtouch/mtouch_button.c: 430:         GIE = (uint8_t)1;
 12566  0CB4  178B               	bsf	11,7	;volatile
 12567                           
 12568                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     }
 12569  0CB5  0008               	return
 12570  0CB6                     l4158:	
 12571                           
 12572                           ;mcc_generated_files/mtouch/mtouch_button.c: 433:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 434:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 12573  0CB6  0878               	movf	Button_Baseline_Update@button,w
 12574  0CB7  3E05               	addlw	5
 12575  0CB8  0086               	movwf	6
 12576  0CB9  3001               	movlw	1	; select bank2/3
 12577  0CBA  0087               	movwf	7
 12578  0CBB  3F40               	moviw [0]fsr1
 12579  0CBC  00F2               	movwf	??_Button_Baseline_Update
 12580  0CBD  3F41               	moviw [1]fsr1
 12581  0CBE  00F3               	movwf	??_Button_Baseline_Update+1
 12582  0CBF  3F42               	moviw [2]fsr1
 12583  0CC0  00F4               	movwf	??_Button_Baseline_Update+2
 12584  0CC1  3F43               	moviw [3]fsr1
 12585  0CC2  00F5               	movwf	??_Button_Baseline_Update+3
 12586  0CC3  3004               	movlw	4
 12587  0CC4                     u2505:	
 12588  0CC4  36F5               	lsrf	??_Button_Baseline_Update+3,f
 12589  0CC5  0CF4               	rrf	??_Button_Baseline_Update+2,f
 12590  0CC6  0CF3               	rrf	??_Button_Baseline_Update+1,f
 12591  0CC7  0CF2               	rrf	??_Button_Baseline_Update,f
 12592  0CC8  0B89               	decfsz	9,f
 12593  0CC9  2CC4               	goto	u2505
 12594  0CCA  0878               	movf	Button_Baseline_Update@button,w
 12595  0CCB  3E05               	addlw	5
 12596  0CCC  0086               	movwf	6
 12597  0CCD  3001               	movlw	1	; select bank2/3
 12598  0CCE  0087               	movwf	7
 12599  0CCF  0872               	movf	??_Button_Baseline_Update,w
 12600  0CD0  0281               	subwf	1,f
 12601  0CD1  3141               	addfsr 1,1
 12602  0CD2  0873               	movf	??_Button_Baseline_Update+1,w
 12603  0CD3  3B81               	subwfb	1,f
 12604  0CD4  3141               	addfsr 1,1
 12605  0CD5  0874               	movf	??_Button_Baseline_Update+2,w
 12606  0CD6  3B81               	subwfb	1,f
 12607  0CD7  3141               	addfsr 1,1
 12608  0CD8  0875               	movf	??_Button_Baseline_Update+3,w
 12609  0CD9  3B81               	subwfb	1,f
 12610  0CDA  317D               	addfsr 1,-3
 12611                           
 12612                           ;mcc_generated_files/mtouch/mtouch_button.c: 435:         button->baseline += button->re
      +                          ading;
 12613  0CDB  0878               	movf	Button_Baseline_Update@button,w
 12614  0CDC  3E03               	addlw	3
 12615  0CDD  0086               	movwf	6
 12616  0CDE  3001               	movlw	1	; select bank2/3
 12617  0CDF  0087               	movwf	7
 12618  0CE0  3F40               	moviw [0]fsr1
 12619  0CE1  00F2               	movwf	??_Button_Baseline_Update
 12620  0CE2  3F41               	moviw [1]fsr1
 12621  0CE3  00F3               	movwf	??_Button_Baseline_Update+1
 12622  0CE4  0872               	movf	??_Button_Baseline_Update,w
 12623  0CE5  00F4               	movwf	??_Button_Baseline_Update+2
 12624  0CE6  0873               	movf	??_Button_Baseline_Update+1,w
 12625  0CE7  00F5               	movwf	??_Button_Baseline_Update+3
 12626  0CE8  01F6               	clrf	??_Button_Baseline_Update+4
 12627  0CE9  01F7               	clrf	??_Button_Baseline_Update+5
 12628  0CEA  0878               	movf	Button_Baseline_Update@button,w
 12629  0CEB  3E05               	addlw	5
 12630  0CEC  0086               	movwf	6
 12631  0CED  3001               	movlw	1	; select bank2/3
 12632  0CEE  0087               	movwf	7
 12633  0CEF  0874               	movf	??_Button_Baseline_Update+2,w
 12634  0CF0  0781               	addwf	1,f
 12635  0CF1  3141               	addfsr 1,1
 12636  0CF2  0875               	movf	??_Button_Baseline_Update+3,w
 12637  0CF3  3D81               	addwfc	1,f
 12638  0CF4  3141               	addfsr 1,1
 12639  0CF5  0876               	movf	??_Button_Baseline_Update+4,w
 12640  0CF6  3D81               	addwfc	1,f
 12641  0CF7  3141               	addfsr 1,1
 12642  0CF8  0877               	movf	??_Button_Baseline_Update+5,w
 12643  0CF9  3D81               	addwfc	1,f
 12644  0CFA  0008               	return
 12645  0CFB                     __end_of_Button_Baseline_Update:	
 12646                           
 12647                           	psect	text78
 12648  080C                     __ptext78:	
 12649 ;; *************** function _Button_Baseline_Initialize *****************
 12650 ;; Defined at:
 12651 ;;		line 417 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12652 ;; Parameters:    Size  Location     Type
 12653 ;;  button          1    wreg     PTR struct .
 12654 ;;		 -> mtouch_button(68), 
 12655 ;; Auto vars:     Size  Location     Type
 12656 ;;  button          1    4[BANK0 ] PTR struct .
 12657 ;;		 -> mtouch_button(68), 
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  1    wreg      void 
 12660 ;; Registers used:
 12661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12667 ;;      Params:         0       0       0       0       0       0       0       0
 12668 ;;      Locals:         0       1       0       0       0       0       0       0
 12669 ;;      Temps:          0       4       0       0       0       0       0       0
 12670 ;;      Totals:         0       5       0       0       0       0       0       0
 12671 ;;Total ram usage:        5 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    6
 12674 ;; This function calls:
 12675 ;;		_MTOUCH_Sensor_RawSample_Get
 12676 ;; This function is called by:
 12677 ;;		_Button_State_Initializing
 12678 ;; This function uses a non-reentrant model
 12679 ;;
 12680                           
 12681                           
 12682                           ;psect for function _Button_Baseline_Initialize
 12683  080C                     _Button_Baseline_Initialize:	
 12684                           
 12685                           ;incstack = 0
 12686                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12687                           ;Button_Baseline_Initialize@button stored from wreg
 12688  080C  0020               	movlb	0	; select bank0
 12689  080D  00A4               	movwf	Button_Baseline_Initialize@button
 12690                           
 12691                           ;mcc_generated_files/mtouch/mtouch_button.c: 417: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 418: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 419:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 12692  080E  0A24               	incf	Button_Baseline_Initialize@button,w
 12693  080F  0086               	movwf	6
 12694  0810  3001               	movlw	1	; select bank2/3
 12695  0811  0087               	movwf	7
 12696  0812  0801               	movf	1,w
 12697  0813  3194  24D7  3188   	fcall	_MTOUCH_Sensor_RawSample_Get
 12698  0816  0876               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12699  0817  0020               	movlb	0	; select bank0
 12700  0818  00A0               	movwf	??_Button_Baseline_Initialize
 12701  0819  0877               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12702  081A  00A1               	movwf	??_Button_Baseline_Initialize+1
 12703  081B  01A2               	clrf	??_Button_Baseline_Initialize+2
 12704  081C  01A3               	clrf	??_Button_Baseline_Initialize+3
 12705  081D  0824               	movf	Button_Baseline_Initialize@button,w
 12706  081E  3E05               	addlw	5
 12707  081F  0086               	movwf	6
 12708  0820  3001               	movlw	1	; select bank2/3
 12709  0821  0087               	movwf	7
 12710  0822  0820               	movf	??_Button_Baseline_Initialize,w
 12711  0823  3FC0               	movwi [0]fsr1
 12712  0824  0821               	movf	??_Button_Baseline_Initialize+1,w
 12713  0825  3FC1               	movwi [1]fsr1
 12714  0826  0822               	movf	??_Button_Baseline_Initialize+2,w
 12715  0827  3FC2               	movwi [2]fsr1
 12716  0828  0823               	movf	??_Button_Baseline_Initialize+3,w
 12717  0829  3FC3               	movwi [3]fsr1
 12718                           
 12719                           ;mcc_generated_files/mtouch/mtouch_button.c: 420:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 12720  082A  0824               	movf	Button_Baseline_Initialize@button,w
 12721  082B  3E05               	addlw	5
 12722  082C  0086               	movwf	6
 12723  082D  3001               	movlw	1	; select bank2/3
 12724  082E  0087               	movwf	7
 12725  082F  3004               	movlw	4
 12726  0830                     u4135:	
 12727  0830  3581               	lslf	1,f
 12728  0831  3141               	addfsr 1,1
 12729  0832  0D81               	rlf	1,f
 12730  0833  3141               	addfsr 1,1
 12731  0834  0D81               	rlf	1,f
 12732  0835  3141               	addfsr 1,1
 12733  0836  0D81               	rlf	1,f
 12734  0837  317D               	addfsr 1,-3
 12735  0838  0B89               	decfsz	9,f
 12736  0839  2830               	goto	u4135
 12737  083A  0008               	return
 12738  083B                     __end_of_Button_Baseline_Initialize:	
 12739                           
 12740                           	psect	text79
 12741  1403                     __ptext79:	
 12742 ;; *************** function _Button_Reading_Update *****************
 12743 ;; Defined at:
 12744 ;;		line 390 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12745 ;; Parameters:    Size  Location     Type
 12746 ;;  button          1    wreg     PTR struct .
 12747 ;;		 -> mtouch_button(68), 
 12748 ;; Auto vars:     Size  Location     Type
 12749 ;;  button          1    3[BANK0 ] PTR struct .
 12750 ;;		 -> mtouch_button(68), 
 12751 ;; Return value:  Size  Location     Type
 12752 ;;                  1    wreg      void 
 12753 ;; Registers used:
 12754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12755 ;; Tracked objects:
 12756 ;;		On entry : 0/0
 12757 ;;		On exit  : 0/0
 12758 ;;		Unchanged: 0/0
 12759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12760 ;;      Params:         0       0       0       0       0       0       0       0
 12761 ;;      Locals:         0       1       0       0       0       0       0       0
 12762 ;;      Temps:          0       0       0       0       0       0       0       0
 12763 ;;      Totals:         0       1       0       0       0       0       0       0
 12764 ;;Total ram usage:        1 bytes
 12765 ;; Hardware stack levels used:    1
 12766 ;; Hardware stack levels required when called:    7
 12767 ;; This function calls:
 12768 ;;		_Button_Reading_Update_Helper
 12769 ;; This function is called by:
 12770 ;;		_Button_Service
 12771 ;; This function uses a non-reentrant model
 12772 ;;
 12773                           
 12774                           
 12775                           ;psect for function _Button_Reading_Update
 12776  1403                     _Button_Reading_Update:	
 12777                           
 12778                           ;incstack = 0
 12779                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12780                           ;Button_Reading_Update@button stored from wreg
 12781  1403  0020               	movlb	0	; select bank0
 12782  1404  00A3               	movwf	Button_Reading_Update@button
 12783                           
 12784                           ;mcc_generated_files/mtouch/mtouch_button.c: 390: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 391: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 392:     if (GIE == (uint8_t) 1)
 12785  1405  1F8B               	btfss	11,7	;volatile
 12786  1406  2C0D               	goto	l5930
 12787                           
 12788                           ;mcc_generated_files/mtouch/mtouch_button.c: 393:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 394:         GIE = (uint8_t) 0;
 12789  1407  138B               	bcf	11,7	;volatile
 12790                           
 12791                           ;mcc_generated_files/mtouch/mtouch_button.c: 395:         Button_Reading_Update_Helper(b
      +                          utton);
 12792  1408  0823               	movf	Button_Reading_Update@button,w
 12793  1409  3189  21BB         	fcall	_Button_Reading_Update_Helper
 12794                           
 12795                           ;mcc_generated_files/mtouch/mtouch_button.c: 396:         GIE = (uint8_t) 1;
 12796  140B  178B               	bsf	11,7	;volatile
 12797                           
 12798                           ;mcc_generated_files/mtouch/mtouch_button.c: 397:     }
 12799  140C  0008               	return
 12800  140D                     l5930:	
 12801                           
 12802                           ;mcc_generated_files/mtouch/mtouch_button.c: 399:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 400:         Button_Reading_Update_Helper(button);
 12803  140D  0823               	movf	Button_Reading_Update@button,w
 12804  140E  3189  21BB         	fcall	_Button_Reading_Update_Helper
 12805  1410  0008               	return
 12806  1411                     __end_of_Button_Reading_Update:	
 12807                           
 12808                           	psect	text80
 12809  09BB                     __ptext80:	
 12810 ;; *************** function _Button_Reading_Update_Helper *****************
 12811 ;; Defined at:
 12812 ;;		line 404 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12813 ;; Parameters:    Size  Location     Type
 12814 ;;  button          1    wreg     PTR struct .
 12815 ;;		 -> mtouch_button(68), 
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;  button          1    2[BANK0 ] PTR struct .
 12818 ;;		 -> mtouch_button(68), 
 12819 ;; Return value:  Size  Location     Type
 12820 ;;                  1    wreg      void 
 12821 ;; Registers used:
 12822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12823 ;; Tracked objects:
 12824 ;;		On entry : 0/0
 12825 ;;		On exit  : 0/0
 12826 ;;		Unchanged: 0/0
 12827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12828 ;;      Params:         0       0       0       0       0       0       0       0
 12829 ;;      Locals:         0       1       0       0       0       0       0       0
 12830 ;;      Temps:          0       2       0       0       0       0       0       0
 12831 ;;      Totals:         0       3       0       0       0       0       0       0
 12832 ;;Total ram usage:        3 bytes
 12833 ;; Hardware stack levels used:    1
 12834 ;; Hardware stack levels required when called:    6
 12835 ;; This function calls:
 12836 ;;		_MTOUCH_Sensor_RawSample_Get
 12837 ;; This function is called by:
 12838 ;;		_Button_Reading_Update
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           
 12843                           ;psect for function _Button_Reading_Update_Helper
 12844  09BB                     _Button_Reading_Update_Helper:	
 12845                           
 12846                           ;incstack = 0
 12847                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12848                           ;Button_Reading_Update_Helper@button stored from wreg
 12849  09BB  0020               	movlb	0	; select bank0
 12850  09BC  00A2               	movwf	Button_Reading_Update_Helper@button
 12851                           
 12852                           ;mcc_generated_files/mtouch/mtouch_button.c: 404: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 405: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 406:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12853  09BD  0822               	movf	Button_Reading_Update_Helper@button,w
 12854  09BE  3E02               	addlw	2
 12855  09BF  0086               	movwf	6
 12856  09C0  3001               	movlw	1	; select bank2/3
 12857  09C1  0087               	movwf	7
 12858  09C2  0801               	movf	1,w
 12859  09C3  1903               	btfsc	3,2
 12860  09C4  29F9               	goto	l5828
 12861                           
 12862                           ;mcc_generated_files/mtouch/mtouch_button.c: 407:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 408:         button->reading -= button->reading>>((uint8_t)2u);
 12863  09C5  0822               	movf	Button_Reading_Update_Helper@button,w
 12864  09C6  3E03               	addlw	3
 12865  09C7  0086               	movwf	6
 12866  09C8  3001               	movlw	1	; select bank2/3
 12867  09C9  0087               	movwf	7
 12868  09CA  3F40               	moviw [0]fsr1
 12869  09CB  00A0               	movwf	??_Button_Reading_Update_Helper
 12870  09CC  3F41               	moviw [1]fsr1
 12871  09CD  00A1               	movwf	??_Button_Reading_Update_Helper+1
 12872  09CE  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 12873  09CF  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 12874  09D0  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 12875  09D1  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 12876  09D2  0822               	movf	Button_Reading_Update_Helper@button,w
 12877  09D3  3E03               	addlw	3
 12878  09D4  0086               	movwf	6
 12879  09D5  3001               	movlw	1	; select bank2/3
 12880  09D6  0087               	movwf	7
 12881  09D7  0820               	movf	??_Button_Reading_Update_Helper,w
 12882  09D8  0281               	subwf	1,f
 12883  09D9  3141               	addfsr 1,1
 12884  09DA  0821               	movf	??_Button_Reading_Update_Helper+1,w
 12885  09DB  3B81               	subwfb	1,f
 12886  09DC  317F               	addfsr 1,-1
 12887                           
 12888                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12889  09DD  0A22               	incf	Button_Reading_Update_Helper@button,w
 12890  09DE  0086               	movwf	6
 12891  09DF  3001               	movlw	1	; select bank2/3
 12892  09E0  0087               	movwf	7
 12893  09E1  0801               	movf	1,w
 12894  09E2  3194  24D7         	fcall	_MTOUCH_Sensor_RawSample_Get
 12895  09E4  0876               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12896  09E5  0020               	movlb	0	; select bank0
 12897  09E6  00A0               	movwf	??_Button_Reading_Update_Helper
 12898  09E7  0877               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12899  09E8  00A1               	movwf	??_Button_Reading_Update_Helper+1
 12900  09E9  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 12901  09EA  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 12902  09EB  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 12903  09EC  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 12904  09ED  0822               	movf	Button_Reading_Update_Helper@button,w
 12905  09EE  3E03               	addlw	3
 12906  09EF  0086               	movwf	6
 12907  09F0  3001               	movlw	1	; select bank2/3
 12908  09F1  0087               	movwf	7
 12909  09F2  0820               	movf	??_Button_Reading_Update_Helper,w
 12910  09F3  0781               	addwf	1,f
 12911  09F4  3141               	addfsr 1,1
 12912  09F5  0821               	movf	??_Button_Reading_Update_Helper+1,w
 12913  09F6  3D81               	addwfc	1,f
 12914  09F7  317F               	addfsr 1,-1
 12915                           
 12916                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     }
 12917  09F8  0008               	return
 12918  09F9                     l5828:	
 12919                           
 12920                           ;mcc_generated_files/mtouch/mtouch_button.c: 412:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 413:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12921  09F9  0A22               	incf	Button_Reading_Update_Helper@button,w
 12922  09FA  0086               	movwf	6
 12923  09FB  3001               	movlw	1	; select bank2/3
 12924  09FC  0087               	movwf	7
 12925  09FD  0801               	movf	1,w
 12926  09FE  3194  24D7         	fcall	_MTOUCH_Sensor_RawSample_Get
 12927  0A00  0020               	movlb	0	; select bank0
 12928  0A01  0822               	movf	Button_Reading_Update_Helper@button,w
 12929  0A02  3E03               	addlw	3
 12930  0A03  0086               	movwf	6
 12931  0A04  3001               	movlw	1	; select bank2/3
 12932  0A05  0087               	movwf	7
 12933  0A06  0876               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12934  0A07  3FC0               	movwi [0]fsr1
 12935  0A08  0877               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12936  0A09  3FC1               	movwi [1]fsr1
 12937  0A0A  0008               	return
 12938  0A0B                     __end_of_Button_Reading_Update_Helper:	
 12939                           
 12940                           	psect	text81
 12941  14D7                     __ptext81:	
 12942 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12943 ;; Defined at:
 12944 ;;		line 776 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12945 ;; Parameters:    Size  Location     Type
 12946 ;;  name            1    wreg     enum E2871
 12947 ;; Auto vars:     Size  Location     Type
 12948 ;;  name            1    9[COMMON] enum E2871
 12949 ;; Return value:  Size  Location     Type
 12950 ;;                  2    6[COMMON] unsigned short 
 12951 ;; Registers used:
 12952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12953 ;; Tracked objects:
 12954 ;;		On entry : 0/0
 12955 ;;		On exit  : 0/0
 12956 ;;		Unchanged: 0/0
 12957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12958 ;;      Params:         2       0       0       0       0       0       0       0
 12959 ;;      Locals:         1       0       0       0       0       0       0       0
 12960 ;;      Temps:          1       0       0       0       0       0       0       0
 12961 ;;      Totals:         4       0       0       0       0       0       0       0
 12962 ;;Total ram usage:        4 bytes
 12963 ;; Hardware stack levels used:    1
 12964 ;; Hardware stack levels required when called:    5
 12965 ;; This function calls:
 12966 ;;		___bmul
 12967 ;; This function is called by:
 12968 ;;		_Button_Reading_Update_Helper
 12969 ;;		_Button_Baseline_Initialize
 12970 ;; This function uses a non-reentrant model
 12971 ;;
 12972                           
 12973                           
 12974                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12975  14D7                     _MTOUCH_Sensor_RawSample_Get:	
 12976                           
 12977                           ;incstack = 0
 12978                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12979                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12980  14D7  00F9               	movwf	MTOUCH_Sensor_RawSample_Get@name
 12981                           
 12982                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          777: {;mcc_generated_files/mtouch/mtouch_sensor.c: 779:         return mtouch_sensor[nam
      +                          e].rawSample;
 12983  14D8  3009               	movlw	9
 12984  14D9  00F8               	movwf	??_MTOUCH_Sensor_RawSample_Get
 12985  14DA  0878               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 12986  14DB  00F2               	movwf	___bmul@multiplicand
 12987  14DC  0879               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12988  14DD  3194  24C6         	fcall	___bmul
 12989  14DF  3E26               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 12990  14E0  0086               	movwf	6
 12991  14E1  3001               	movlw	1	; select bank2/3
 12992  14E2  0087               	movwf	7
 12993  14E3  3F40               	moviw [0]fsr1
 12994  14E4  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get
 12995  14E5  3F41               	moviw [1]fsr1
 12996  14E6  00F7               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 12997  14E7  0008               	return
 12998  14E8                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 12999                           
 13000                           	psect	text82
 13001  14C6                     __ptext82:	
 13002 ;; *************** function ___bmul *****************
 13003 ;; Defined at:
 13004 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 13005 ;; Parameters:    Size  Location     Type
 13006 ;;  multiplier      1    wreg     unsigned char 
 13007 ;;  multiplicand    1    2[COMMON] unsigned char 
 13008 ;; Auto vars:     Size  Location     Type
 13009 ;;  multiplier      1    5[COMMON] unsigned char 
 13010 ;;  product         1    4[COMMON] unsigned char 
 13011 ;; Return value:  Size  Location     Type
 13012 ;;                  1    wreg      unsigned char 
 13013 ;; Registers used:
 13014 ;;		wreg, status,2, status,0
 13015 ;; Tracked objects:
 13016 ;;		On entry : 0/0
 13017 ;;		On exit  : 0/0
 13018 ;;		Unchanged: 0/0
 13019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13020 ;;      Params:         1       0       0       0       0       0       0       0
 13021 ;;      Locals:         2       0       0       0       0       0       0       0
 13022 ;;      Temps:          1       0       0       0       0       0       0       0
 13023 ;;      Totals:         4       0       0       0       0       0       0       0
 13024 ;;Total ram usage:        4 bytes
 13025 ;; Hardware stack levels used:    1
 13026 ;; Hardware stack levels required when called:    4
 13027 ;; This function calls:
 13028 ;;		Nothing
 13029 ;; This function is called by:
 13030 ;;		_MTOUCH_Sensor_Initialize
 13031 ;;		_MTOUCH_Sensor_RawSample_Get
 13032 ;;		_MTOUCH_Sensor_Enable
 13033 ;;		_MTOUCH_Sensor_Calibrate
 13034 ;;		_MTOUCH_Sensor_isCalibrated
 13035 ;;		_MTOUCH_Sensor_wasSampled
 13036 ;; This function uses a non-reentrant model
 13037 ;;
 13038                           
 13039                           
 13040                           ;psect for function ___bmul
 13041  14C6                     ___bmul:	
 13042                           
 13043                           ;incstack = 0
 13044                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 13045                           ;___bmul@multiplier stored from wreg
 13046  14C6  00F5               	movwf	___bmul@multiplier
 13047  14C7  01F4               	clrf	___bmul@product
 13048  14C8                     l5500:	
 13049  14C8  1C75               	btfss	___bmul@multiplier,0
 13050  14C9  2CCE               	goto	l5504
 13051  14CA  0872               	movf	___bmul@multiplicand,w
 13052  14CB  00F3               	movwf	??___bmul
 13053  14CC  0873               	movf	??___bmul,w
 13054  14CD  07F4               	addwf	___bmul@product,f
 13055  14CE                     l5504:	
 13056  14CE  1003               	clrc
 13057  14CF  0DF2               	rlf	___bmul@multiplicand,f
 13058  14D0  1003               	clrc
 13059  14D1  0CF5               	rrf	___bmul@multiplier,f
 13060  14D2  0875               	movf	___bmul@multiplier,w
 13061  14D3  1D03               	btfss	3,2
 13062  14D4  2CC8               	goto	l5500
 13063  14D5  0874               	movf	___bmul@product,w
 13064  14D6  0008               	return
 13065  14D7                     __end_of___bmul:	
 13066                           
 13067                           	psect	text83
 13068  0BE5                     __ptext83:	
 13069 ;; *************** function _Button_Deviation_Update *****************
 13070 ;; Defined at:
 13071 ;;		line 361 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13072 ;; Parameters:    Size  Location     Type
 13073 ;;  button          1    wreg     PTR struct .
 13074 ;;		 -> mtouch_button(68), 
 13075 ;; Auto vars:     Size  Location     Type
 13076 ;;  button          1    2[COMMON] PTR struct .
 13077 ;;		 -> mtouch_button(68), 
 13078 ;;  deviation       4    3[COMMON] long 
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  1    wreg      void 
 13081 ;; Registers used:
 13082 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13088 ;;      Params:         0       0       0       0       0       0       0       0
 13089 ;;      Locals:         5       0       0       0       0       0       0       0
 13090 ;;      Temps:          0      10       0       0       0       0       0       0
 13091 ;;      Totals:         5      10       0       0       0       0       0       0
 13092 ;;Total ram usage:       15 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    4
 13095 ;; This function calls:
 13096 ;;		Nothing
 13097 ;; This function is called by:
 13098 ;;		_Button_Service
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           
 13103                           ;psect for function _Button_Deviation_Update
 13104  0BE5                     _Button_Deviation_Update:	
 13105                           
 13106                           ;incstack = 0
 13107                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 13108                           ;Button_Deviation_Update@button stored from wreg
 13109  0BE5  00F2               	movwf	Button_Deviation_Update@button
 13110                           
 13111                           ;mcc_generated_files/mtouch/mtouch_button.c: 361: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 362: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 363:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 365:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 13112  0BE6  0872               	movf	Button_Deviation_Update@button,w
 13113  0BE7  3E05               	addlw	5
 13114  0BE8  0086               	movwf	6
 13115  0BE9  3001               	movlw	1	; select bank2/3
 13116  0BEA  0087               	movwf	7
 13117  0BEB  3F40               	moviw [0]fsr1
 13118  0BEC  0020               	movlb	0	; select bank0
 13119  0BED  00A0               	movwf	??_Button_Deviation_Update
 13120  0BEE  3F41               	moviw [1]fsr1
 13121  0BEF  00A1               	movwf	??_Button_Deviation_Update+1
 13122  0BF0  3F42               	moviw [2]fsr1
 13123  0BF1  00A2               	movwf	??_Button_Deviation_Update+2
 13124  0BF2  3F43               	moviw [3]fsr1
 13125  0BF3  00A3               	movwf	??_Button_Deviation_Update+3
 13126  0BF4  3004               	movlw	4
 13127  0BF5                     u4295:	
 13128  0BF5  36A3               	lsrf	??_Button_Deviation_Update+3,f
 13129  0BF6  0CA2               	rrf	??_Button_Deviation_Update+2,f
 13130  0BF7  0CA1               	rrf	??_Button_Deviation_Update+1,f
 13131  0BF8  0CA0               	rrf	??_Button_Deviation_Update,f
 13132  0BF9  0B89               	decfsz	9,f
 13133  0BFA  2BF5               	goto	u4295
 13134  0BFB  0872               	movf	Button_Deviation_Update@button,w
 13135  0BFC  3E03               	addlw	3
 13136  0BFD  0086               	movwf	6
 13137  0BFE  3001               	movlw	1	; select bank2/3
 13138  0BFF  0087               	movwf	7
 13139  0C00  3F40               	moviw [0]fsr1
 13140  0C01  00A4               	movwf	??_Button_Deviation_Update+4
 13141  0C02  3F41               	moviw [1]fsr1
 13142  0C03  00A5               	movwf	??_Button_Deviation_Update+5
 13143  0C04  0824               	movf	??_Button_Deviation_Update+4,w
 13144  0C05  00A6               	movwf	??_Button_Deviation_Update+6
 13145  0C06  0825               	movf	??_Button_Deviation_Update+5,w
 13146  0C07  00A7               	movwf	??_Button_Deviation_Update+7
 13147  0C08  01A8               	clrf	??_Button_Deviation_Update+8
 13148  0C09  01A9               	clrf	??_Button_Deviation_Update+9
 13149  0C0A  0820               	movf	??_Button_Deviation_Update,w
 13150  0C0B  02A6               	subwf	??_Button_Deviation_Update+6,f
 13151  0C0C  0821               	movf	??_Button_Deviation_Update+1,w
 13152  0C0D  3BA7               	subwfb	??_Button_Deviation_Update+7,f
 13153  0C0E  0822               	movf	??_Button_Deviation_Update+2,w
 13154  0C0F  3BA8               	subwfb	??_Button_Deviation_Update+8,f
 13155  0C10  0823               	movf	??_Button_Deviation_Update+3,w
 13156  0C11  3BA9               	subwfb	??_Button_Deviation_Update+9,f
 13157  0C12  0829               	movf	??_Button_Deviation_Update+9,w
 13158  0C13  00F6               	movwf	Button_Deviation_Update@deviation+3
 13159  0C14  0828               	movf	??_Button_Deviation_Update+8,w
 13160  0C15  00F5               	movwf	Button_Deviation_Update@deviation+2
 13161  0C16  0827               	movf	??_Button_Deviation_Update+7,w
 13162  0C17  00F4               	movwf	Button_Deviation_Update@deviation+1
 13163  0C18  0826               	movf	??_Button_Deviation_Update+6,w
 13164  0C19  00F3               	movwf	Button_Deviation_Update@deviation
 13165                           
 13166                           ;mcc_generated_files/mtouch/mtouch_button.c: 368:     deviation = deviation >> (button->
      +                          scaling);
 13167  0C1A  0873               	movf	Button_Deviation_Update@deviation,w
 13168  0C1B  00A0               	movwf	??_Button_Deviation_Update
 13169  0C1C  0874               	movf	Button_Deviation_Update@deviation+1,w
 13170  0C1D  00A1               	movwf	??_Button_Deviation_Update+1
 13171  0C1E  0875               	movf	Button_Deviation_Update@deviation+2,w
 13172  0C1F  00A2               	movwf	??_Button_Deviation_Update+2
 13173  0C20  0876               	movf	Button_Deviation_Update@deviation+3,w
 13174  0C21  00A3               	movwf	??_Button_Deviation_Update+3
 13175  0C22  0872               	movf	Button_Deviation_Update@button,w
 13176  0C23  3E0F               	addlw	15
 13177  0C24  0086               	movwf	6
 13178  0C25  3001               	movlw	1	; select bank2/3
 13179  0C26  0087               	movwf	7
 13180  0C27  0A01               	incf	1,w
 13181  0C28  2C2D               	goto	u4300
 13182  0C29                     u4305:	
 13183  0C29  37A3               	asrf	??_Button_Deviation_Update+3,f
 13184  0C2A  0CA2               	rrf	??_Button_Deviation_Update+2,f
 13185  0C2B  0CA1               	rrf	??_Button_Deviation_Update+1,f
 13186  0C2C  0CA0               	rrf	??_Button_Deviation_Update,f
 13187  0C2D                     u4300:	
 13188  0C2D  0B89               	decfsz	9,f
 13189  0C2E  2C29               	goto	u4305
 13190  0C2F  0823               	movf	??_Button_Deviation_Update+3,w
 13191  0C30  00F6               	movwf	Button_Deviation_Update@deviation+3
 13192  0C31  0822               	movf	??_Button_Deviation_Update+2,w
 13193  0C32  00F5               	movwf	Button_Deviation_Update@deviation+2
 13194  0C33  0821               	movf	??_Button_Deviation_Update+1,w
 13195  0C34  00F4               	movwf	Button_Deviation_Update@deviation+1
 13196  0C35  0820               	movf	??_Button_Deviation_Update,w
 13197  0C36  00F3               	movwf	Button_Deviation_Update@deviation
 13198                           
 13199                           ;mcc_generated_files/mtouch/mtouch_button.c: 371:     if (deviation > ((0x7f)))
 13200  0C37  1BF6               	btfsc	Button_Deviation_Update@deviation+3,7
 13201  0C38  2C4E               	goto	l5938
 13202  0C39  0876               	movf	Button_Deviation_Update@deviation+3,w
 13203  0C3A  1D03               	btfss	3,2
 13204  0C3B  2C46               	goto	l5936
 13205  0C3C  0875               	movf	Button_Deviation_Update@deviation+2,w
 13206  0C3D  1D03               	btfss	3,2
 13207  0C3E  2C46               	goto	l5936
 13208  0C3F  0874               	movf	Button_Deviation_Update@deviation+1,w
 13209  0C40  1D03               	btfss	3,2
 13210  0C41  2C46               	goto	l5936
 13211  0C42  3080               	movlw	128
 13212  0C43  0273               	subwf	Button_Deviation_Update@deviation,w
 13213  0C44  1C03               	btfss	3,0
 13214  0C45  2C4E               	goto	l5938
 13215  0C46                     l5936:	
 13216                           
 13217                           ;mcc_generated_files/mtouch/mtouch_button.c: 372:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 373:         deviation = ((0x7f));
 13218  0C46  3000               	movlw	0
 13219  0C47  00F6               	movwf	Button_Deviation_Update@deviation+3
 13220  0C48  3000               	movlw	0
 13221  0C49  00F5               	movwf	Button_Deviation_Update@deviation+2
 13222  0C4A  3000               	movlw	0
 13223  0C4B  00F4               	movwf	Button_Deviation_Update@deviation+1
 13224  0C4C  307F               	movlw	127
 13225  0C4D  00F3               	movwf	Button_Deviation_Update@deviation
 13226  0C4E                     l5938:	
 13227                           
 13228                           ;mcc_generated_files/mtouch/mtouch_button.c: 375:     if (deviation < ((-1-0x7f)))
 13229  0C4E  1FF6               	btfss	Button_Deviation_Update@deviation+3,7
 13230  0C4F  2C62               	goto	l5942
 13231  0C50  3080               	movlw	128
 13232  0C51  0273               	subwf	Button_Deviation_Update@deviation,w
 13233  0C52  30FF               	movlw	255
 13234  0C53  3B74               	subwfb	Button_Deviation_Update@deviation+1,w
 13235  0C54  30FF               	movlw	255
 13236  0C55  3B75               	subwfb	Button_Deviation_Update@deviation+2,w
 13237  0C56  30FF               	movlw	255
 13238  0C57  3B76               	subwfb	Button_Deviation_Update@deviation+3,w
 13239  0C58  1803               	btfsc	3,0
 13240  0C59  2C62               	goto	l5942
 13241                           
 13242                           ;mcc_generated_files/mtouch/mtouch_button.c: 376:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 377:         deviation = ((-1-0x7f));
 13243  0C5A  30FF               	movlw	255
 13244  0C5B  00F6               	movwf	Button_Deviation_Update@deviation+3
 13245  0C5C  30FF               	movlw	255
 13246  0C5D  00F5               	movwf	Button_Deviation_Update@deviation+2
 13247  0C5E  30FF               	movlw	255
 13248  0C5F  00F4               	movwf	Button_Deviation_Update@deviation+1
 13249  0C60  3080               	movlw	128
 13250  0C61  00F3               	movwf	Button_Deviation_Update@deviation
 13251  0C62                     l5942:	
 13252                           
 13253                           ;mcc_generated_files/mtouch/mtouch_button.c: 380:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 13254  0C62  0873               	movf	Button_Deviation_Update@deviation,w
 13255  0C63  00A0               	movwf	??_Button_Deviation_Update
 13256  0C64  0872               	movf	Button_Deviation_Update@button,w
 13257  0C65  3E09               	addlw	9
 13258  0C66  0086               	movwf	6
 13259  0C67  3001               	movlw	1	; select bank2/3
 13260  0C68  0087               	movwf	7
 13261  0C69  0820               	movf	??_Button_Deviation_Update,w
 13262  0C6A  0081               	movwf	1
 13263  0C6B  0008               	return
 13264  0C6C                     __end_of_Button_Deviation_Update:	
 13265                           
 13266                           	psect	text84
 13267  1387                     __ptext84:	
 13268 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 13269 ;; Defined at:
 13270 ;;		line 445 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13271 ;; Parameters:    Size  Location     Type
 13272 ;;  callback        2    2[COMMON] PTR FTN(enum E3070,)void
 13273 ;;		 -> myButtonPressedCallback(1), 
 13274 ;; Auto vars:     Size  Location     Type
 13275 ;;		None
 13276 ;; Return value:  Size  Location     Type
 13277 ;;                  1    wreg      void 
 13278 ;; Registers used:
 13279 ;;		wreg
 13280 ;; Tracked objects:
 13281 ;;		On entry : 0/0
 13282 ;;		On exit  : 0/0
 13283 ;;		Unchanged: 0/0
 13284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13285 ;;      Params:         2       0       0       0       0       0       0       0
 13286 ;;      Locals:         0       0       0       0       0       0       0       0
 13287 ;;      Temps:          0       0       0       0       0       0       0       0
 13288 ;;      Totals:         2       0       0       0       0       0       0       0
 13289 ;;Total ram usage:        2 bytes
 13290 ;; Hardware stack levels used:    1
 13291 ;; Hardware stack levels required when called:    4
 13292 ;; This function calls:
 13293 ;;		Nothing
 13294 ;; This function is called by:
 13295 ;;		_main
 13296 ;; This function uses a non-reentrant model
 13297 ;;
 13298                           
 13299                           
 13300                           ;psect for function _MTOUCH_Button_SetPressedCallback
 13301  1387                     _MTOUCH_Button_SetPressedCallback:	
 13302                           
 13303                           ;mcc_generated_files/mtouch/mtouch_button.c: 445: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          446: {;mcc_generated_files/mtouch/mtouch_button.c: 447:     callback_pressed = callback;
 13304                           
 13305                           ;incstack = 0
 13306                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 13307  1387  0873               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 13308  1388  0021               	movlb	1	; select bank1
 13309  1389  00EB               	movwf	(_callback_pressed+1)^(0+128)
 13310  138A  0872               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 13311  138B  00EA               	movwf	_callback_pressed^(0+128)
 13312  138C  0008               	return
 13313  138D                     __end_of_MTOUCH_Button_SetPressedCallback:	
 13314                           
 13315                           	psect	text85
 13316  1381                     __ptext85:	
 13317 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 13318 ;; Defined at:
 13319 ;;		line 449 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13320 ;; Parameters:    Size  Location     Type
 13321 ;;  callback        2    2[COMMON] PTR FTN(enum E3070,)void
 13322 ;;		 -> myButtonReleasedCallback(1), 
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;		None
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      void 
 13327 ;; Registers used:
 13328 ;;		wreg
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13334 ;;      Params:         2       0       0       0       0       0       0       0
 13335 ;;      Locals:         0       0       0       0       0       0       0       0
 13336 ;;      Temps:          0       0       0       0       0       0       0       0
 13337 ;;      Totals:         2       0       0       0       0       0       0       0
 13338 ;;Total ram usage:        2 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    4
 13341 ;; This function calls:
 13342 ;;		Nothing
 13343 ;; This function is called by:
 13344 ;;		_main
 13345 ;; This function uses a non-reentrant model
 13346 ;;
 13347                           
 13348                           
 13349                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 13350  1381                     _MTOUCH_Button_SetNotPressedCallback:	
 13351                           
 13352                           ;mcc_generated_files/mtouch/mtouch_button.c: 449: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 450: {;mcc_generated_files/mtouch/mtouch_button.c: 451:     callback_notPressed = cal
      +                          lback;
 13353                           
 13354                           ;incstack = 0
 13355                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 13356  1381  0873               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 13357  1382  0020               	movlb	0	; select bank0
 13358  1383  00EE               	movwf	_callback_notPressed+1
 13359  1384  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 13360  1385  00ED               	movwf	_callback_notPressed
 13361  1386  0008               	return
 13362  1387                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 13363                           
 13364                           	psect	text86
 13365  1360                     __ptext86:	
 13366 ;; *************** function _EUSART_is_rx_ready *****************
 13367 ;; Defined at:
 13368 ;;		line 120 in file "mcc_generated_files/eusart.c"
 13369 ;; Parameters:    Size  Location     Type
 13370 ;;		None
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;		None
 13373 ;; Return value:  Size  Location     Type
 13374 ;;                  1    wreg      unsigned char 
 13375 ;; Registers used:
 13376 ;;		wreg
 13377 ;; Tracked objects:
 13378 ;;		On entry : 0/0
 13379 ;;		On exit  : 0/0
 13380 ;;		Unchanged: 0/0
 13381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13382 ;;      Params:         0       0       0       0       0       0       0       0
 13383 ;;      Locals:         0       0       0       0       0       0       0       0
 13384 ;;      Temps:          0       0       0       0       0       0       0       0
 13385 ;;      Totals:         0       0       0       0       0       0       0       0
 13386 ;;Total ram usage:        0 bytes
 13387 ;; Hardware stack levels used:    1
 13388 ;; Hardware stack levels required when called:    4
 13389 ;; This function calls:
 13390 ;;		Nothing
 13391 ;; This function is called by:
 13392 ;;		_main
 13393 ;; This function uses a non-reentrant model
 13394 ;;
 13395                           
 13396                           
 13397                           ;psect for function _EUSART_is_rx_ready
 13398  1360                     _EUSART_is_rx_ready:	
 13399                           
 13400                           ;mcc_generated_files/eusart.c: 122:     return eusartRxCount;
 13401                           
 13402                           ;incstack = 0
 13403                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 13404  1360  0020               	movlb	0	; select bank0
 13405  1361  0869               	movf	_eusartRxCount,w	;volatile
 13406  1362  0008               	return
 13407  1363                     __end_of_EUSART_is_rx_ready:	
 13408                           
 13409                           	psect	text87
 13410  1690                     __ptext87:	
 13411 ;; *************** function _EUSART_Read *****************
 13412 ;; Defined at:
 13413 ;;		line 126 in file "mcc_generated_files/eusart.c"
 13414 ;; Parameters:    Size  Location     Type
 13415 ;;		None
 13416 ;; Auto vars:     Size  Location     Type
 13417 ;;  readValue       1    3[COMMON] unsigned char 
 13418 ;; Return value:  Size  Location     Type
 13419 ;;                  1    wreg      unsigned char 
 13420 ;; Registers used:
 13421 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13422 ;; Tracked objects:
 13423 ;;		On entry : 0/0
 13424 ;;		On exit  : 0/0
 13425 ;;		Unchanged: 0/0
 13426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13427 ;;      Params:         0       0       0       0       0       0       0       0
 13428 ;;      Locals:         1       0       0       0       0       0       0       0
 13429 ;;      Temps:          1       0       0       0       0       0       0       0
 13430 ;;      Totals:         2       0       0       0       0       0       0       0
 13431 ;;Total ram usage:        2 bytes
 13432 ;; Hardware stack levels used:    1
 13433 ;; Hardware stack levels required when called:    4
 13434 ;; This function calls:
 13435 ;;		Nothing
 13436 ;; This function is called by:
 13437 ;;		_main
 13438 ;; This function uses a non-reentrant model
 13439 ;;
 13440                           
 13441                           
 13442                           ;psect for function _EUSART_Read
 13443  1690                     _EUSART_Read:	
 13444  1690                     l4700:	
 13445                           ;mcc_generated_files/eusart.c: 130:     while(0 == eusartRxCount)
 13446                           
 13447                           ;incstack = 0
 13448                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 13449                           
 13450                           
 13451                           ;mcc_generated_files/eusart.c: 130:     while(0 == eusartRxCount)
 13452  1690  0020               	movlb	0	; select bank0
 13453  1691  0869               	movf	_eusartRxCount,w	;volatile
 13454  1692  1903               	btfsc	3,2
 13455  1693  2E90               	goto	l4700
 13456                           
 13457                           ;mcc_generated_files/eusart.c: 134:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 13458  1694  087A               	movf	_eusartRxTail,w	;volatile
 13459  1695  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13460  1696  0086               	movwf	6
 13461  1697  0187               	clrf	7
 13462  1698  0801               	movf	1,w
 13463  1699  00F2               	movwf	??_EUSART_Read
 13464  169A  0872               	movf	??_EUSART_Read,w
 13465  169B  00E8               	movwf	_eusartRxLastError	;volatile
 13466                           
 13467                           ;mcc_generated_files/eusart.c: 136:     readValue = eusartRxBuffer[eusartRxTail++];
 13468  169C  087A               	movf	_eusartRxTail,w
 13469  169D  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 13470  169E  0086               	movwf	6
 13471  169F  0187               	clrf	7
 13472  16A0  0801               	movf	1,w
 13473  16A1  00F2               	movwf	??_EUSART_Read
 13474  16A2  0872               	movf	??_EUSART_Read,w
 13475  16A3  00F3               	movwf	EUSART_Read@readValue
 13476  16A4  3001               	movlw	1
 13477  16A5  00F2               	movwf	??_EUSART_Read
 13478  16A6  0872               	movf	??_EUSART_Read,w
 13479  16A7  07FA               	addwf	_eusartRxTail,f	;volatile
 13480                           
 13481                           ;mcc_generated_files/eusart.c: 137:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 13482  16A8  3008               	movlw	8
 13483  16A9  027A               	subwf	_eusartRxTail,w	;volatile
 13484  16AA  1803               	btfsc	3,0
 13485                           
 13486                           ;mcc_generated_files/eusart.c: 138:     {;mcc_generated_files/eusart.c: 139:         eus
      +                          artRxTail = 0;
 13487  16AB  01FA               	clrf	_eusartRxTail	;volatile
 13488                           
 13489                           ;mcc_generated_files/eusart.c: 141:     PIE1bits.RCIE = 0;
 13490  16AC  0021               	movlb	1	; select bank1
 13491  16AD  1291               	bcf	17,5	;volatile
 13492                           
 13493                           ;mcc_generated_files/eusart.c: 142:     eusartRxCount--;
 13494  16AE  3001               	movlw	1
 13495  16AF  0020               	movlb	0	; select bank0
 13496  16B0  02E9               	subwf	_eusartRxCount,f	;volatile
 13497                           
 13498                           ;mcc_generated_files/eusart.c: 143:     PIE1bits.RCIE = 1;
 13499  16B1  0021               	movlb	1	; select bank1
 13500  16B2  1691               	bsf	17,5	;volatile
 13501                           
 13502                           ;mcc_generated_files/eusart.c: 145:     return readValue;
 13503  16B3  0873               	movf	EUSART_Read@readValue,w
 13504  16B4  0008               	return
 13505  16B5                     __end_of_EUSART_Read:	
 13506                           
 13507                           	psect	text88
 13508  0459                     __ptext88:	
 13509 ;; *************** function _DATA_PROCESS *****************
 13510 ;; Defined at:
 13511 ;;		line 232 in file "main.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;  x               1    wreg     unsigned char 
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;  x               1    7[COMMON] unsigned char 
 13516 ;; Return value:  Size  Location     Type
 13517 ;;                  1    wreg      void 
 13518 ;; Registers used:
 13519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13525 ;;      Params:         0       0       0       0       0       0       0       0
 13526 ;;      Locals:         1       0       0       0       0       0       0       0
 13527 ;;      Temps:          2       0       0       0       0       0       0       0
 13528 ;;      Totals:         3       0       0       0       0       0       0       0
 13529 ;;Total ram usage:        3 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:    5
 13532 ;; This function calls:
 13533 ;;		_LED_PROCESS
 13534 ;;		_RELAY_PROCESS
 13535 ;; This function is called by:
 13536 ;;		_main
 13537 ;; This function uses a non-reentrant model
 13538 ;;
 13539                           
 13540                           
 13541                           ;psect for function _DATA_PROCESS
 13542  0459                     _DATA_PROCESS:	
 13543                           
 13544                           ;incstack = 0
 13545                           ; Regs used in _DATA_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13546                           ;DATA_PROCESS@x stored from wreg
 13547  0459  00F7               	movwf	DATA_PROCESS@x
 13548                           
 13549                           ;main.c: 232: void DATA_PROCESS(char x);main.c: 233: {;main.c: 234:     timeout_count = 
      +                          0;
 13550  045A  0020               	movlb	0	; select bank0
 13551  045B  01DD               	clrf	_timeout_count
 13552  045C  01DE               	clrf	_timeout_count+1
 13553                           
 13554                           ;main.c: 235:     switch(x)
 13555  045D  2D41               	goto	l5006
 13556  045E                     l4906:	
 13557                           
 13558                           ;main.c: 238:         {;main.c: 239:             LED_PROCESS(0);
 13559  045E  3000               	movlw	0
 13560  045F  318E  2622  3184   	fcall	_LED_PROCESS
 13561                           
 13562                           ;main.c: 240:             RELAY_PROCESS(0);
 13563  0462  3000               	movlw	0
 13564  0463  318E  26BF         	fcall	_RELAY_PROCESS
 13565                           
 13566                           ;main.c: 241:             check_request = 0;
 13567  0465  0020               	movlb	0	; select bank0
 13568  0466  01E4               	clrf	_check_request
 13569                           
 13570                           ;main.c: 242:             last_touch_status.full_status = 0;
 13571  0467  01DB               	clrf	_last_touch_status
 13572  0468  01DC               	clrf	_last_touch_status+1
 13573                           
 13574                           ;main.c: 243:             break;
 13575  0469  0008               	return
 13576  046A                     l4912:	
 13577                           
 13578                           ;main.c: 246:         {;main.c: 247:             LED_PROCESS(1);
 13579  046A  3001               	movlw	1
 13580  046B  318E  2622  3184   	fcall	_LED_PROCESS
 13581                           
 13582                           ;main.c: 248:             RELAY_PROCESS(1);
 13583  046E  3001               	movlw	1
 13584  046F  318E  26BF         	fcall	_RELAY_PROCESS
 13585                           
 13586                           ;main.c: 249:             check_request = 0;
 13587  0471  0020               	movlb	0	; select bank0
 13588  0472  01E4               	clrf	_check_request
 13589                           
 13590                           ;main.c: 250:             last_touch_status.full_status = 1;
 13591  0473  3001               	movlw	1
 13592  0474  00DB               	movwf	_last_touch_status
 13593  0475  3000               	movlw	0
 13594  0476  00DC               	movwf	_last_touch_status+1
 13595                           
 13596                           ;main.c: 251:             break;
 13597  0477  0008               	return
 13598  0478                     l4918:	
 13599                           
 13600                           ;main.c: 254:         {;main.c: 255:             LED_PROCESS(2);
 13601  0478  3002               	movlw	2
 13602  0479  318E  2622  3184   	fcall	_LED_PROCESS
 13603                           
 13604                           ;main.c: 256:             RELAY_PROCESS(2);
 13605  047C  3002               	movlw	2
 13606  047D  318E  26BF         	fcall	_RELAY_PROCESS
 13607                           
 13608                           ;main.c: 257:             check_request = 0;
 13609  047F  0020               	movlb	0	; select bank0
 13610  0480  01E4               	clrf	_check_request
 13611                           
 13612                           ;main.c: 258:             last_touch_status.full_status = 2;
 13613  0481  3002               	movlw	2
 13614  0482  00DB               	movwf	_last_touch_status
 13615  0483  3000               	movlw	0
 13616  0484  00DC               	movwf	_last_touch_status+1
 13617                           
 13618                           ;main.c: 259:             break;
 13619  0485  0008               	return
 13620  0486                     l4924:	
 13621                           
 13622                           ;main.c: 262:         {;main.c: 263:             LED_PROCESS(3);
 13623  0486  3003               	movlw	3
 13624  0487  318E  2622  3184   	fcall	_LED_PROCESS
 13625                           
 13626                           ;main.c: 264:             RELAY_PROCESS(3);
 13627  048A  3003               	movlw	3
 13628  048B  318E  26BF         	fcall	_RELAY_PROCESS
 13629                           
 13630                           ;main.c: 265:             check_request = 0;
 13631  048D  0020               	movlb	0	; select bank0
 13632  048E  01E4               	clrf	_check_request
 13633                           
 13634                           ;main.c: 266:             last_touch_status.full_status = 3;
 13635  048F  3003               	movlw	3
 13636  0490  00DB               	movwf	_last_touch_status
 13637  0491  3000               	movlw	0
 13638  0492  00DC               	movwf	_last_touch_status+1
 13639                           
 13640                           ;main.c: 267:             break;
 13641  0493  0008               	return
 13642  0494                     l4930:	
 13643                           
 13644                           ;main.c: 270:         {;main.c: 271:             LED_PROCESS(4);
 13645  0494  3004               	movlw	4
 13646  0495  318E  2622  3184   	fcall	_LED_PROCESS
 13647                           
 13648                           ;main.c: 272:             RELAY_PROCESS(4);
 13649  0498  3004               	movlw	4
 13650  0499  318E  26BF         	fcall	_RELAY_PROCESS
 13651                           
 13652                           ;main.c: 273:             check_request = 0;
 13653  049B  0020               	movlb	0	; select bank0
 13654  049C  01E4               	clrf	_check_request
 13655                           
 13656                           ;main.c: 274:             last_touch_status.full_status = 4;
 13657  049D  3004               	movlw	4
 13658  049E  00DB               	movwf	_last_touch_status
 13659  049F  3000               	movlw	0
 13660  04A0  00DC               	movwf	_last_touch_status+1
 13661                           
 13662                           ;main.c: 275:             break;
 13663  04A1  0008               	return
 13664  04A2                     l4936:	
 13665                           
 13666                           ;main.c: 278:         {;main.c: 279:             LED_PROCESS(5);
 13667  04A2  3005               	movlw	5
 13668  04A3  318E  2622  3184   	fcall	_LED_PROCESS
 13669                           
 13670                           ;main.c: 280:             RELAY_PROCESS(5);
 13671  04A6  3005               	movlw	5
 13672  04A7  318E  26BF         	fcall	_RELAY_PROCESS
 13673                           
 13674                           ;main.c: 281:             check_request = 0;
 13675  04A9  0020               	movlb	0	; select bank0
 13676  04AA  01E4               	clrf	_check_request
 13677                           
 13678                           ;main.c: 282:             last_touch_status.full_status = 5;
 13679  04AB  3005               	movlw	5
 13680  04AC  00DB               	movwf	_last_touch_status
 13681  04AD  3000               	movlw	0
 13682  04AE  00DC               	movwf	_last_touch_status+1
 13683                           
 13684                           ;main.c: 283:             break;
 13685  04AF  0008               	return
 13686  04B0                     l4942:	
 13687                           
 13688                           ;main.c: 286:         {;main.c: 287:             LED_PROCESS(6);
 13689  04B0  3006               	movlw	6
 13690  04B1  318E  2622  3184   	fcall	_LED_PROCESS
 13691                           
 13692                           ;main.c: 288:             RELAY_PROCESS(6);
 13693  04B4  3006               	movlw	6
 13694  04B5  318E  26BF         	fcall	_RELAY_PROCESS
 13695                           
 13696                           ;main.c: 289:             check_request = 0;
 13697  04B7  0020               	movlb	0	; select bank0
 13698  04B8  01E4               	clrf	_check_request
 13699                           
 13700                           ;main.c: 290:             last_touch_status.full_status = 6;
 13701  04B9  3006               	movlw	6
 13702  04BA  00DB               	movwf	_last_touch_status
 13703  04BB  3000               	movlw	0
 13704  04BC  00DC               	movwf	_last_touch_status+1
 13705                           
 13706                           ;main.c: 291:             break;
 13707  04BD  0008               	return
 13708  04BE                     l4948:	
 13709                           
 13710                           ;main.c: 294:         {;main.c: 295:             LED_PROCESS(7);
 13711  04BE  3007               	movlw	7
 13712  04BF  318E  2622  3184   	fcall	_LED_PROCESS
 13713                           
 13714                           ;main.c: 296:             RELAY_PROCESS(7);
 13715  04C2  3007               	movlw	7
 13716  04C3  318E  26BF         	fcall	_RELAY_PROCESS
 13717                           
 13718                           ;main.c: 297:             check_request = 0;
 13719  04C5  0020               	movlb	0	; select bank0
 13720  04C6  01E4               	clrf	_check_request
 13721                           
 13722                           ;main.c: 298:             last_touch_status.full_status = 7;
 13723  04C7  3007               	movlw	7
 13724  04C8  00DB               	movwf	_last_touch_status
 13725  04C9  3000               	movlw	0
 13726  04CA  00DC               	movwf	_last_touch_status+1
 13727                           
 13728                           ;main.c: 299:             break;
 13729  04CB  0008               	return
 13730  04CC                     l4954:	
 13731                           
 13732                           ;main.c: 302:         {;main.c: 303:             LED_PROCESS(8);
 13733  04CC  3008               	movlw	8
 13734  04CD  318E  2622  3184   	fcall	_LED_PROCESS
 13735                           
 13736                           ;main.c: 304:             RELAY_PROCESS(8);
 13737  04D0  3008               	movlw	8
 13738  04D1  318E  26BF         	fcall	_RELAY_PROCESS
 13739                           
 13740                           ;main.c: 305:             check_request = 0;
 13741  04D3  0020               	movlb	0	; select bank0
 13742  04D4  01E4               	clrf	_check_request
 13743                           
 13744                           ;main.c: 306:             last_touch_status.full_status = 8;
 13745  04D5  3008               	movlw	8
 13746  04D6  00DB               	movwf	_last_touch_status
 13747  04D7  3000               	movlw	0
 13748  04D8  00DC               	movwf	_last_touch_status+1
 13749                           
 13750                           ;main.c: 307:             break;
 13751  04D9  0008               	return
 13752  04DA                     l4960:	
 13753                           
 13754                           ;main.c: 310:         {;main.c: 311:             LED_PROCESS(9);
 13755  04DA  3009               	movlw	9
 13756  04DB  318E  2622  3184   	fcall	_LED_PROCESS
 13757                           
 13758                           ;main.c: 312:             RELAY_PROCESS(9);
 13759  04DE  3009               	movlw	9
 13760  04DF  318E  26BF         	fcall	_RELAY_PROCESS
 13761                           
 13762                           ;main.c: 313:             check_request = 0;
 13763  04E1  0020               	movlb	0	; select bank0
 13764  04E2  01E4               	clrf	_check_request
 13765                           
 13766                           ;main.c: 314:             last_touch_status.full_status = 9;
 13767  04E3  3009               	movlw	9
 13768  04E4  00DB               	movwf	_last_touch_status
 13769  04E5  3000               	movlw	0
 13770  04E6  00DC               	movwf	_last_touch_status+1
 13771                           
 13772                           ;main.c: 315:             break;
 13773  04E7  0008               	return
 13774  04E8                     l4966:	
 13775                           
 13776                           ;main.c: 318:         {;main.c: 319:             LED_PROCESS(10);
 13777  04E8  300A               	movlw	10
 13778  04E9  318E  2622  3184   	fcall	_LED_PROCESS
 13779                           
 13780                           ;main.c: 320:             RELAY_PROCESS(10);
 13781  04EC  300A               	movlw	10
 13782  04ED  318E  26BF         	fcall	_RELAY_PROCESS
 13783                           
 13784                           ;main.c: 321:             check_request = 0;
 13785  04EF  0020               	movlb	0	; select bank0
 13786  04F0  01E4               	clrf	_check_request
 13787                           
 13788                           ;main.c: 322:             last_touch_status.full_status = 10;
 13789  04F1  300A               	movlw	10
 13790  04F2  00DB               	movwf	_last_touch_status
 13791  04F3  3000               	movlw	0
 13792  04F4  00DC               	movwf	_last_touch_status+1
 13793                           
 13794                           ;main.c: 323:             break;
 13795  04F5  0008               	return
 13796  04F6                     l4972:	
 13797                           
 13798                           ;main.c: 326:         {;main.c: 327:             LED_PROCESS(11);
 13799  04F6  300B               	movlw	11
 13800  04F7  318E  2622  3184   	fcall	_LED_PROCESS
 13801                           
 13802                           ;main.c: 328:             RELAY_PROCESS(11);
 13803  04FA  300B               	movlw	11
 13804  04FB  318E  26BF         	fcall	_RELAY_PROCESS
 13805                           
 13806                           ;main.c: 329:             check_request = 0;
 13807  04FD  0020               	movlb	0	; select bank0
 13808  04FE  01E4               	clrf	_check_request
 13809                           
 13810                           ;main.c: 330:             last_touch_status.full_status = 11;
 13811  04FF  300B               	movlw	11
 13812  0500  00DB               	movwf	_last_touch_status
 13813  0501  3000               	movlw	0
 13814  0502  00DC               	movwf	_last_touch_status+1
 13815                           
 13816                           ;main.c: 331:             break;
 13817  0503  0008               	return
 13818  0504                     l4978:	
 13819                           
 13820                           ;main.c: 334:         {;main.c: 335:             LED_PROCESS(12);
 13821  0504  300C               	movlw	12
 13822  0505  318E  2622  3184   	fcall	_LED_PROCESS
 13823                           
 13824                           ;main.c: 336:             RELAY_PROCESS(12);
 13825  0508  300C               	movlw	12
 13826  0509  318E  26BF         	fcall	_RELAY_PROCESS
 13827                           
 13828                           ;main.c: 337:             check_request = 0;
 13829  050B  0020               	movlb	0	; select bank0
 13830  050C  01E4               	clrf	_check_request
 13831                           
 13832                           ;main.c: 338:             last_touch_status.full_status = 12;
 13833  050D  300C               	movlw	12
 13834  050E  00DB               	movwf	_last_touch_status
 13835  050F  3000               	movlw	0
 13836  0510  00DC               	movwf	_last_touch_status+1
 13837                           
 13838                           ;main.c: 339:             break;
 13839  0511  0008               	return
 13840  0512                     l4984:	
 13841                           
 13842                           ;main.c: 342:         {;main.c: 343:             LED_PROCESS(13);
 13843  0512  300D               	movlw	13
 13844  0513  318E  2622  3184   	fcall	_LED_PROCESS
 13845                           
 13846                           ;main.c: 344:             RELAY_PROCESS(13);
 13847  0516  300D               	movlw	13
 13848  0517  318E  26BF         	fcall	_RELAY_PROCESS
 13849                           
 13850                           ;main.c: 345:             check_request = 0;
 13851  0519  0020               	movlb	0	; select bank0
 13852  051A  01E4               	clrf	_check_request
 13853                           
 13854                           ;main.c: 346:             last_touch_status.full_status = 13;
 13855  051B  300D               	movlw	13
 13856  051C  00DB               	movwf	_last_touch_status
 13857  051D  3000               	movlw	0
 13858  051E  00DC               	movwf	_last_touch_status+1
 13859                           
 13860                           ;main.c: 347:             break;
 13861  051F  0008               	return
 13862  0520                     l4990:	
 13863                           
 13864                           ;main.c: 350:         {;main.c: 351:             LED_PROCESS(14);
 13865  0520  300E               	movlw	14
 13866  0521  318E  2622  3184   	fcall	_LED_PROCESS
 13867                           
 13868                           ;main.c: 352:             RELAY_PROCESS(14);
 13869  0524  300E               	movlw	14
 13870  0525  318E  26BF         	fcall	_RELAY_PROCESS
 13871                           
 13872                           ;main.c: 353:             check_request = 0;
 13873  0527  0020               	movlb	0	; select bank0
 13874  0528  01E4               	clrf	_check_request
 13875                           
 13876                           ;main.c: 354:             last_touch_status.full_status = 14;
 13877  0529  300E               	movlw	14
 13878  052A  00DB               	movwf	_last_touch_status
 13879  052B  3000               	movlw	0
 13880  052C  00DC               	movwf	_last_touch_status+1
 13881                           
 13882                           ;main.c: 355:             break;
 13883  052D  0008               	return
 13884  052E                     l4996:	
 13885                           
 13886                           ;main.c: 358:         {;main.c: 359:             LED_PROCESS(15);
 13887  052E  300F               	movlw	15
 13888  052F  318E  2622  3184   	fcall	_LED_PROCESS
 13889                           
 13890                           ;main.c: 360:             RELAY_PROCESS(15);
 13891  0532  300F               	movlw	15
 13892  0533  318E  26BF         	fcall	_RELAY_PROCESS
 13893                           
 13894                           ;main.c: 361:             check_request = 0;
 13895  0535  0020               	movlb	0	; select bank0
 13896  0536  01E4               	clrf	_check_request
 13897                           
 13898                           ;main.c: 362:             last_touch_status.full_status = 15;
 13899  0537  300F               	movlw	15
 13900  0538  00DB               	movwf	_last_touch_status
 13901  0539  3000               	movlw	0
 13902  053A  00DC               	movwf	_last_touch_status+1
 13903                           
 13904                           ;main.c: 363:             break;
 13905  053B  0008               	return
 13906  053C                     l900:	
 13907                           ;main.c: 364:         };main.c: 365:         case 'U':
 13908                           
 13909                           
 13910                           ;main.c: 366:         {;main.c: 367:             update_state_flag = 1;
 13911  053C  01E1               	clrf	_update_state_flag
 13912  053D  0AE1               	incf	_update_state_flag,f
 13913                           
 13914                           ;main.c: 368:             break;
 13915  053E  0008               	return
 13916  053F                     l5002:	
 13917                           
 13918                           ;main.c: 371:         {;main.c: 372:             check_request = 0;
 13919  053F  01E4               	clrf	_check_request
 13920                           
 13921                           ;main.c: 373:             break;
 13922  0540  0008               	return
 13923  0541                     l5006:	
 13924  0541  0877               	movf	DATA_PROCESS@x,w
 13925  0542  00F5               	movwf	??_DATA_PROCESS
 13926  0543  01F6               	clrf	??_DATA_PROCESS+1
 13927                           
 13928                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13929                           ; Switch size 1, requested type "simple"
 13930                           ; Number of cases is 1, Range of values is 0 to 0
 13931                           ; switch strategies available:
 13932                           ; Name         Instructions Cycles
 13933                           ; simple_byte            4     3 (average)
 13934                           ; direct_byte            8     6 (fixed)
 13935                           ; jumptable            260     6 (fixed)
 13936                           ;	Chosen strategy is simple_byte
 13937  0544  0876               	movf	??_DATA_PROCESS+1,w
 13938  0545  3A00               	xorlw	0	; case 0
 13939  0546  1903               	skipnz
 13940  0547  2D49               	goto	l6586
 13941  0548  2D3F               	goto	l5002
 13942  0549                     l6586:	
 13943                           
 13944                           ; Switch size 1, requested type "simple"
 13945                           ; Number of cases is 17, Range of values is 48 to 85
 13946                           ; switch strategies available:
 13947                           ; Name         Instructions Cycles
 13948                           ; simple_byte           52    27 (average)
 13949                           ; direct_byte           85     9 (fixed)
 13950                           ; jumptable            263     9 (fixed)
 13951                           ;	Chosen strategy is simple_byte
 13952  0549  0875               	movf	??_DATA_PROCESS,w
 13953  054A  3A30               	xorlw	48	; case 48
 13954  054B  1903               	skipnz
 13955  054C  2C5E               	goto	l4906
 13956  054D  3A01               	xorlw	1	; case 49
 13957  054E  1903               	skipnz
 13958  054F  2C6A               	goto	l4912
 13959  0550  3A03               	xorlw	3	; case 50
 13960  0551  1903               	skipnz
 13961  0552  2C78               	goto	l4918
 13962  0553  3A01               	xorlw	1	; case 51
 13963  0554  1903               	skipnz
 13964  0555  2C86               	goto	l4924
 13965  0556  3A07               	xorlw	7	; case 52
 13966  0557  1903               	skipnz
 13967  0558  2C94               	goto	l4930
 13968  0559  3A01               	xorlw	1	; case 53
 13969  055A  1903               	skipnz
 13970  055B  2CA2               	goto	l4936
 13971  055C  3A03               	xorlw	3	; case 54
 13972  055D  1903               	skipnz
 13973  055E  2CB0               	goto	l4942
 13974  055F  3A01               	xorlw	1	; case 55
 13975  0560  1903               	skipnz
 13976  0561  2CBE               	goto	l4948
 13977  0562  3A0F               	xorlw	15	; case 56
 13978  0563  1903               	skipnz
 13979  0564  2CCC               	goto	l4954
 13980  0565  3A01               	xorlw	1	; case 57
 13981  0566  1903               	skipnz
 13982  0567  2CDA               	goto	l4960
 13983  0568  3A78               	xorlw	120	; case 65
 13984  0569  1903               	skipnz
 13985  056A  2CE8               	goto	l4966
 13986  056B  3A03               	xorlw	3	; case 66
 13987  056C  1903               	skipnz
 13988  056D  2CF6               	goto	l4972
 13989  056E  3A01               	xorlw	1	; case 67
 13990  056F  1903               	skipnz
 13991  0570  2D04               	goto	l4978
 13992  0571  3A07               	xorlw	7	; case 68
 13993  0572  1903               	skipnz
 13994  0573  2D12               	goto	l4984
 13995  0574  3A01               	xorlw	1	; case 69
 13996  0575  1903               	skipnz
 13997  0576  2D20               	goto	l4990
 13998  0577  3A02               	xorlw	2	; case 71
 13999  0578  1903               	skipnz
 14000  0579  2D2E               	goto	l4996
 14001  057A  3A12               	xorlw	18	; case 85
 14002  057B  1903               	skipnz
 14003  057C  2D3C               	goto	l900
 14004  057D  2D3F               	goto	l5002
 14005  057E  0008               	return
 14006  057F                     __end_of_DATA_PROCESS:	
 14007                           
 14008                           	psect	text89
 14009  0EBF                     __ptext89:	
 14010 ;; *************** function _RELAY_PROCESS *****************
 14011 ;; Defined at:
 14012 ;;		line 5 in file "relay.c"
 14013 ;; Parameters:    Size  Location     Type
 14014 ;;  x               1    wreg     unsigned char 
 14015 ;; Auto vars:     Size  Location     Type
 14016 ;;  x               1    4[COMMON] unsigned char 
 14017 ;; Return value:  Size  Location     Type
 14018 ;;                  1    wreg      void 
 14019 ;; Registers used:
 14020 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14021 ;; Tracked objects:
 14022 ;;		On entry : 0/0
 14023 ;;		On exit  : 0/0
 14024 ;;		Unchanged: 0/0
 14025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14026 ;;      Params:         0       0       0       0       0       0       0       0
 14027 ;;      Locals:         1       0       0       0       0       0       0       0
 14028 ;;      Temps:          2       0       0       0       0       0       0       0
 14029 ;;      Totals:         3       0       0       0       0       0       0       0
 14030 ;;Total ram usage:        3 bytes
 14031 ;; Hardware stack levels used:    1
 14032 ;; Hardware stack levels required when called:    4
 14033 ;; This function calls:
 14034 ;;		Nothing
 14035 ;; This function is called by:
 14036 ;;		_myButtonPressedCallback
 14037 ;;		_DATA_PROCESS
 14038 ;; This function uses a non-reentrant model
 14039 ;;
 14040                           
 14041                           
 14042                           ;psect for function _RELAY_PROCESS
 14043  0EBF                     _RELAY_PROCESS:	
 14044                           
 14045                           ;incstack = 0
 14046                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 14047                           ;RELAY_PROCESS@x stored from wreg
 14048  0EBF  00F4               	movwf	RELAY_PROCESS@x
 14049                           
 14050                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 14051  0EC0  2F21               	goto	l4044
 14052  0EC1                     l1119:	
 14053                           ;relay.c: 10:         {;relay.c: 11:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14054                           
 14055  0EC1  0022               	movlb	2	; select bank2
 14056  0EC2  168E               	bsf	14,5	;volatile
 14057  0EC3  170D               	bsf	13,6	;volatile
 14058  0EC4  160C               	bsf	12,4	;volatile
 14059  0EC5  168C               	bsf	12,5	;volatile
 14060  0EC6  0008               	return
 14061  0EC7                     l1129:	
 14062                           ;relay.c: 15:         {;relay.c: 16:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14063                           
 14064  0EC7  0022               	movlb	2	; select bank2
 14065  0EC8  168E               	bsf	14,5	;volatile
 14066  0EC9  170D               	bsf	13,6	;volatile
 14067  0ECA  160C               	bsf	12,4	;volatile
 14068  0ECB  128C               	bcf	12,5	;volatile
 14069  0ECC  0008               	return
 14070  0ECD                     l1138:	
 14071                           ;relay.c: 20:         {;relay.c: 21:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14072                           
 14073  0ECD  0022               	movlb	2	; select bank2
 14074  0ECE  168E               	bsf	14,5	;volatile
 14075  0ECF  170D               	bsf	13,6	;volatile
 14076  0ED0  120C               	bcf	12,4	;volatile
 14077  0ED1  168C               	bsf	12,5	;volatile
 14078  0ED2  0008               	return
 14079  0ED3                     l1147:	
 14080                           ;relay.c: 25:         {;relay.c: 26:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14081                           
 14082  0ED3  0022               	movlb	2	; select bank2
 14083  0ED4  168E               	bsf	14,5	;volatile
 14084  0ED5  170D               	bsf	13,6	;volatile
 14085  0ED6  120C               	bcf	12,4	;volatile
 14086  0ED7  128C               	bcf	12,5	;volatile
 14087  0ED8  0008               	return
 14088  0ED9                     l1156:	
 14089                           ;relay.c: 30:         {;relay.c: 31:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14090                           
 14091  0ED9  0022               	movlb	2	; select bank2
 14092  0EDA  168E               	bsf	14,5	;volatile
 14093  0EDB  130D               	bcf	13,6	;volatile
 14094  0EDC  160C               	bsf	12,4	;volatile
 14095  0EDD  168C               	bsf	12,5	;volatile
 14096  0EDE  0008               	return
 14097  0EDF                     l1165:	
 14098                           ;relay.c: 35:         {;relay.c: 36:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14099                           
 14100  0EDF  0022               	movlb	2	; select bank2
 14101  0EE0  168E               	bsf	14,5	;volatile
 14102  0EE1  130D               	bcf	13,6	;volatile
 14103  0EE2  160C               	bsf	12,4	;volatile
 14104  0EE3  128C               	bcf	12,5	;volatile
 14105  0EE4  0008               	return
 14106  0EE5                     l1174:	
 14107                           ;relay.c: 40:         {;relay.c: 41:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14108                           
 14109  0EE5  0022               	movlb	2	; select bank2
 14110  0EE6  168E               	bsf	14,5	;volatile
 14111  0EE7  130D               	bcf	13,6	;volatile
 14112  0EE8  120C               	bcf	12,4	;volatile
 14113  0EE9  168C               	bsf	12,5	;volatile
 14114  0EEA  0008               	return
 14115  0EEB                     l1183:	
 14116                           ;relay.c: 45:         {;relay.c: 46:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14117                           
 14118  0EEB  0022               	movlb	2	; select bank2
 14119  0EEC  168E               	bsf	14,5	;volatile
 14120  0EED  130D               	bcf	13,6	;volatile
 14121  0EEE  120C               	bcf	12,4	;volatile
 14122  0EEF  128C               	bcf	12,5	;volatile
 14123  0EF0  0008               	return
 14124  0EF1                     l1192:	
 14125                           ;relay.c: 50:         {;relay.c: 51:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14126                           
 14127  0EF1  0022               	movlb	2	; select bank2
 14128  0EF2  128E               	bcf	14,5	;volatile
 14129  0EF3  170D               	bsf	13,6	;volatile
 14130  0EF4  160C               	bsf	12,4	;volatile
 14131  0EF5  168C               	bsf	12,5	;volatile
 14132  0EF6  0008               	return
 14133  0EF7                     l1201:	
 14134                           ;relay.c: 55:         {;relay.c: 56:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14135                           
 14136  0EF7  0022               	movlb	2	; select bank2
 14137  0EF8  128E               	bcf	14,5	;volatile
 14138  0EF9  170D               	bsf	13,6	;volatile
 14139  0EFA  160C               	bsf	12,4	;volatile
 14140  0EFB  128C               	bcf	12,5	;volatile
 14141  0EFC  0008               	return
 14142  0EFD                     l1210:	
 14143                           ;relay.c: 60:         {;relay.c: 61:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14144                           
 14145  0EFD  0022               	movlb	2	; select bank2
 14146  0EFE  128E               	bcf	14,5	;volatile
 14147  0EFF  170D               	bsf	13,6	;volatile
 14148  0F00  120C               	bcf	12,4	;volatile
 14149  0F01  168C               	bsf	12,5	;volatile
 14150  0F02  0008               	return
 14151  0F03                     l1219:	
 14152                           ;relay.c: 65:         {;relay.c: 66:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14153                           
 14154  0F03  0022               	movlb	2	; select bank2
 14155  0F04  128E               	bcf	14,5	;volatile
 14156  0F05  170D               	bsf	13,6	;volatile
 14157  0F06  120C               	bcf	12,4	;volatile
 14158  0F07  128C               	bcf	12,5	;volatile
 14159  0F08  0008               	return
 14160  0F09                     l1228:	
 14161                           ;relay.c: 70:         {;relay.c: 71:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14162                           
 14163  0F09  0022               	movlb	2	; select bank2
 14164  0F0A  128E               	bcf	14,5	;volatile
 14165  0F0B  130D               	bcf	13,6	;volatile
 14166  0F0C  160C               	bsf	12,4	;volatile
 14167  0F0D  168C               	bsf	12,5	;volatile
 14168  0F0E  0008               	return
 14169  0F0F                     l1237:	
 14170                           ;relay.c: 75:         {;relay.c: 76:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14171                           
 14172  0F0F  0022               	movlb	2	; select bank2
 14173  0F10  128E               	bcf	14,5	;volatile
 14174  0F11  130D               	bcf	13,6	;volatile
 14175  0F12  160C               	bsf	12,4	;volatile
 14176  0F13  128C               	bcf	12,5	;volatile
 14177  0F14  0008               	return
 14178  0F15                     l1246:	
 14179                           ;relay.c: 80:         {;relay.c: 81:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14180                           
 14181  0F15  0022               	movlb	2	; select bank2
 14182  0F16  128E               	bcf	14,5	;volatile
 14183  0F17  130D               	bcf	13,6	;volatile
 14184  0F18  120C               	bcf	12,4	;volatile
 14185  0F19  168C               	bsf	12,5	;volatile
 14186  0F1A  0008               	return
 14187  0F1B                     l1255:	
 14188                           ;relay.c: 85:         {;relay.c: 86:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14189                           
 14190  0F1B  0022               	movlb	2	; select bank2
 14191  0F1C  128E               	bcf	14,5	;volatile
 14192  0F1D  130D               	bcf	13,6	;volatile
 14193  0F1E  120C               	bcf	12,4	;volatile
 14194  0F1F  128C               	bcf	12,5	;volatile
 14195  0F20  0008               	return
 14196  0F21                     l4044:	
 14197  0F21  0874               	movf	RELAY_PROCESS@x,w
 14198  0F22  00F2               	movwf	??_RELAY_PROCESS
 14199  0F23  01F3               	clrf	??_RELAY_PROCESS+1
 14200                           
 14201                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14202                           ; Switch size 1, requested type "simple"
 14203                           ; Number of cases is 1, Range of values is 0 to 0
 14204                           ; switch strategies available:
 14205                           ; Name         Instructions Cycles
 14206                           ; simple_byte            4     3 (average)
 14207                           ; direct_byte            8     6 (fixed)
 14208                           ; jumptable            260     6 (fixed)
 14209                           ;	Chosen strategy is simple_byte
 14210  0F24  0873               	movf	??_RELAY_PROCESS+1,w
 14211  0F25  3A00               	xorlw	0	; case 0
 14212  0F26  1903               	skipnz
 14213  0F27  2F29               	goto	l6588
 14214  0F28  2F5B               	goto	l1263
 14215  0F29                     l6588:	
 14216                           
 14217                           ; Switch size 1, requested type "simple"
 14218                           ; Number of cases is 16, Range of values is 0 to 15
 14219                           ; switch strategies available:
 14220                           ; Name         Instructions Cycles
 14221                           ; direct_byte           38     6 (fixed)
 14222                           ; simple_byte           49    25 (average)
 14223                           ; jumptable            260     6 (fixed)
 14224                           ;	Chosen strategy is simple_byte
 14225  0F29  0872               	movf	??_RELAY_PROCESS,w
 14226  0F2A  3A00               	xorlw	0	; case 0
 14227  0F2B  1903               	skipnz
 14228  0F2C  2EC1               	goto	l1119
 14229  0F2D  3A01               	xorlw	1	; case 1
 14230  0F2E  1903               	skipnz
 14231  0F2F  2EC7               	goto	l1129
 14232  0F30  3A03               	xorlw	3	; case 2
 14233  0F31  1903               	skipnz
 14234  0F32  2ECD               	goto	l1138
 14235  0F33  3A01               	xorlw	1	; case 3
 14236  0F34  1903               	skipnz
 14237  0F35  2ED3               	goto	l1147
 14238  0F36  3A07               	xorlw	7	; case 4
 14239  0F37  1903               	skipnz
 14240  0F38  2ED9               	goto	l1156
 14241  0F39  3A01               	xorlw	1	; case 5
 14242  0F3A  1903               	skipnz
 14243  0F3B  2EDF               	goto	l1165
 14244  0F3C  3A03               	xorlw	3	; case 6
 14245  0F3D  1903               	skipnz
 14246  0F3E  2EE5               	goto	l1174
 14247  0F3F  3A01               	xorlw	1	; case 7
 14248  0F40  1903               	skipnz
 14249  0F41  2EEB               	goto	l1183
 14250  0F42  3A0F               	xorlw	15	; case 8
 14251  0F43  1903               	skipnz
 14252  0F44  2EF1               	goto	l1192
 14253  0F45  3A01               	xorlw	1	; case 9
 14254  0F46  1903               	skipnz
 14255  0F47  2EF7               	goto	l1201
 14256  0F48  3A03               	xorlw	3	; case 10
 14257  0F49  1903               	skipnz
 14258  0F4A  2EFD               	goto	l1210
 14259  0F4B  3A01               	xorlw	1	; case 11
 14260  0F4C  1903               	skipnz
 14261  0F4D  2F03               	goto	l1219
 14262  0F4E  3A07               	xorlw	7	; case 12
 14263  0F4F  1903               	skipnz
 14264  0F50  2F09               	goto	l1228
 14265  0F51  3A01               	xorlw	1	; case 13
 14266  0F52  1903               	skipnz
 14267  0F53  2F0F               	goto	l1237
 14268  0F54  3A03               	xorlw	3	; case 14
 14269  0F55  1903               	skipnz
 14270  0F56  2F15               	goto	l1246
 14271  0F57  3A01               	xorlw	1	; case 15
 14272  0F58  1903               	skipnz
 14273  0F59  2F1B               	goto	l1255
 14274  0F5A  2F5B               	goto	l1263
 14275  0F5B                     l1263:	
 14276  0F5B  0008               	return
 14277  0F5C                     __end_of_RELAY_PROCESS:	
 14278                           
 14279                           	psect	text90
 14280  0E22                     __ptext90:	
 14281 ;; *************** function _LED_PROCESS *****************
 14282 ;; Defined at:
 14283 ;;		line 10 in file "led.c"
 14284 ;; Parameters:    Size  Location     Type
 14285 ;;  x               1    wreg     unsigned char 
 14286 ;; Auto vars:     Size  Location     Type
 14287 ;;  x               1    4[COMMON] unsigned char 
 14288 ;; Return value:  Size  Location     Type
 14289 ;;                  1    wreg      void 
 14290 ;; Registers used:
 14291 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14292 ;; Tracked objects:
 14293 ;;		On entry : 0/0
 14294 ;;		On exit  : 0/0
 14295 ;;		Unchanged: 0/0
 14296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14297 ;;      Params:         0       0       0       0       0       0       0       0
 14298 ;;      Locals:         1       0       0       0       0       0       0       0
 14299 ;;      Temps:          2       0       0       0       0       0       0       0
 14300 ;;      Totals:         3       0       0       0       0       0       0       0
 14301 ;;Total ram usage:        3 bytes
 14302 ;; Hardware stack levels used:    1
 14303 ;; Hardware stack levels required when called:    4
 14304 ;; This function calls:
 14305 ;;		Nothing
 14306 ;; This function is called by:
 14307 ;;		_main
 14308 ;;		_myButtonPressedCallback
 14309 ;;		_DATA_PROCESS
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           
 14314                           ;psect for function _LED_PROCESS
 14315  0E22                     _LED_PROCESS:	
 14316                           
 14317                           ;incstack = 0
 14318                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0]
 14319                           ;LED_PROCESS@x stored from wreg
 14320  0E22  00F4               	movwf	LED_PROCESS@x
 14321                           
 14322                           ;led.c: 10: void LED_PROCESS(uint8_t x);led.c: 11: {;led.c: 12:     switch(x)
 14323  0E23  2E84               	goto	l4034
 14324  0E24                     l944:	
 14325                           ;led.c: 15:         {;led.c: 16:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14326                           
 14327  0E24  0022               	movlb	2	; select bank2
 14328  0E25  140C               	bsf	12,0	;volatile
 14329  0E26  178E               	bsf	14,7	;volatile
 14330  0E27  148C               	bsf	12,1	;volatile
 14331  0E28  158E               	bsf	14,3	;volatile
 14332  0E29  0008               	return
 14333  0E2A                     l954:	
 14334                           ;led.c: 20:         {;led.c: 21:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14335                           
 14336  0E2A  0022               	movlb	2	; select bank2
 14337  0E2B  140C               	bsf	12,0	;volatile
 14338  0E2C  178E               	bsf	14,7	;volatile
 14339  0E2D  148C               	bsf	12,1	;volatile
 14340  0E2E  118E               	bcf	14,3	;volatile
 14341  0E2F  0008               	return
 14342  0E30                     l963:	
 14343                           ;led.c: 25:         {;led.c: 26:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14344                           
 14345  0E30  0022               	movlb	2	; select bank2
 14346  0E31  140C               	bsf	12,0	;volatile
 14347  0E32  178E               	bsf	14,7	;volatile
 14348  0E33  108C               	bcf	12,1	;volatile
 14349  0E34  158E               	bsf	14,3	;volatile
 14350  0E35  0008               	return
 14351  0E36                     l972:	
 14352                           ;led.c: 30:         {;led.c: 31:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14353                           
 14354  0E36  0022               	movlb	2	; select bank2
 14355  0E37  140C               	bsf	12,0	;volatile
 14356  0E38  178E               	bsf	14,7	;volatile
 14357  0E39  108C               	bcf	12,1	;volatile
 14358  0E3A  118E               	bcf	14,3	;volatile
 14359  0E3B  0008               	return
 14360  0E3C                     l981:	
 14361                           ;led.c: 35:         {;led.c: 36:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14362                           
 14363  0E3C  0022               	movlb	2	; select bank2
 14364  0E3D  140C               	bsf	12,0	;volatile
 14365  0E3E  138E               	bcf	14,7	;volatile
 14366  0E3F  148C               	bsf	12,1	;volatile
 14367  0E40  158E               	bsf	14,3	;volatile
 14368  0E41  0008               	return
 14369  0E42                     l990:	
 14370                           ;led.c: 40:         {;led.c: 41:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14371                           
 14372  0E42  0022               	movlb	2	; select bank2
 14373  0E43  140C               	bsf	12,0	;volatile
 14374  0E44  138E               	bcf	14,7	;volatile
 14375  0E45  148C               	bsf	12,1	;volatile
 14376  0E46  118E               	bcf	14,3	;volatile
 14377  0E47  0008               	return
 14378  0E48                     l999:	
 14379                           ;led.c: 45:         {;led.c: 46:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14380                           
 14381  0E48  0022               	movlb	2	; select bank2
 14382  0E49  140C               	bsf	12,0	;volatile
 14383  0E4A  138E               	bcf	14,7	;volatile
 14384  0E4B  108C               	bcf	12,1	;volatile
 14385  0E4C  158E               	bsf	14,3	;volatile
 14386  0E4D  0008               	return
 14387  0E4E                     l1008:	
 14388                           ;led.c: 50:         {;led.c: 51:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14389                           
 14390  0E4E  0022               	movlb	2	; select bank2
 14391  0E4F  140C               	bsf	12,0	;volatile
 14392  0E50  138E               	bcf	14,7	;volatile
 14393  0E51  108C               	bcf	12,1	;volatile
 14394  0E52  118E               	bcf	14,3	;volatile
 14395  0E53  0008               	return
 14396  0E54                     l1017:	
 14397                           ;led.c: 55:         {;led.c: 56:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14398                           
 14399  0E54  0022               	movlb	2	; select bank2
 14400  0E55  100C               	bcf	12,0	;volatile
 14401  0E56  178E               	bsf	14,7	;volatile
 14402  0E57  148C               	bsf	12,1	;volatile
 14403  0E58  158E               	bsf	14,3	;volatile
 14404  0E59  0008               	return
 14405  0E5A                     l1026:	
 14406                           ;led.c: 60:         {;led.c: 61:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14407                           
 14408  0E5A  0022               	movlb	2	; select bank2
 14409  0E5B  100C               	bcf	12,0	;volatile
 14410  0E5C  178E               	bsf	14,7	;volatile
 14411  0E5D  148C               	bsf	12,1	;volatile
 14412  0E5E  118E               	bcf	14,3	;volatile
 14413  0E5F  0008               	return
 14414  0E60                     l1035:	
 14415                           ;led.c: 65:         {;led.c: 66:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14416                           
 14417  0E60  0022               	movlb	2	; select bank2
 14418  0E61  100C               	bcf	12,0	;volatile
 14419  0E62  178E               	bsf	14,7	;volatile
 14420  0E63  108C               	bcf	12,1	;volatile
 14421  0E64  158E               	bsf	14,3	;volatile
 14422  0E65  0008               	return
 14423  0E66                     l1044:	
 14424                           ;led.c: 70:         {;led.c: 71:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14425                           
 14426  0E66  0022               	movlb	2	; select bank2
 14427  0E67  100C               	bcf	12,0	;volatile
 14428  0E68  178E               	bsf	14,7	;volatile
 14429  0E69  108C               	bcf	12,1	;volatile
 14430  0E6A  118E               	bcf	14,3	;volatile
 14431  0E6B  0008               	return
 14432  0E6C                     l1053:	
 14433                           ;led.c: 75:         {;led.c: 76:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14434                           
 14435  0E6C  0022               	movlb	2	; select bank2
 14436  0E6D  100C               	bcf	12,0	;volatile
 14437  0E6E  138E               	bcf	14,7	;volatile
 14438  0E6F  148C               	bsf	12,1	;volatile
 14439  0E70  158E               	bsf	14,3	;volatile
 14440  0E71  0008               	return
 14441  0E72                     l1062:	
 14442                           ;led.c: 80:         {;led.c: 81:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14443                           
 14444  0E72  0022               	movlb	2	; select bank2
 14445  0E73  100C               	bcf	12,0	;volatile
 14446  0E74  138E               	bcf	14,7	;volatile
 14447  0E75  148C               	bsf	12,1	;volatile
 14448  0E76  118E               	bcf	14,3	;volatile
 14449  0E77  0008               	return
 14450  0E78                     l1071:	
 14451                           ;led.c: 85:         {;led.c: 86:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14452                           
 14453  0E78  0022               	movlb	2	; select bank2
 14454  0E79  100C               	bcf	12,0	;volatile
 14455  0E7A  138E               	bcf	14,7	;volatile
 14456  0E7B  108C               	bcf	12,1	;volatile
 14457  0E7C  158E               	bsf	14,3	;volatile
 14458  0E7D  0008               	return
 14459  0E7E                     l1080:	
 14460                           ;led.c: 90:         {;led.c: 91:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14461                           
 14462  0E7E  0022               	movlb	2	; select bank2
 14463  0E7F  100C               	bcf	12,0	;volatile
 14464  0E80  138E               	bcf	14,7	;volatile
 14465  0E81  108C               	bcf	12,1	;volatile
 14466  0E82  118E               	bcf	14,3	;volatile
 14467  0E83  0008               	return
 14468  0E84                     l4034:	
 14469  0E84  0874               	movf	LED_PROCESS@x,w
 14470  0E85  00F2               	movwf	??_LED_PROCESS
 14471  0E86  01F3               	clrf	??_LED_PROCESS+1
 14472                           
 14473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14474                           ; Switch size 1, requested type "simple"
 14475                           ; Number of cases is 1, Range of values is 0 to 0
 14476                           ; switch strategies available:
 14477                           ; Name         Instructions Cycles
 14478                           ; simple_byte            4     3 (average)
 14479                           ; direct_byte            8     6 (fixed)
 14480                           ; jumptable            260     6 (fixed)
 14481                           ;	Chosen strategy is simple_byte
 14482  0E87  0873               	movf	??_LED_PROCESS+1,w
 14483  0E88  3A00               	xorlw	0	; case 0
 14484  0E89  1903               	skipnz
 14485  0E8A  2E8C               	goto	l6590
 14486  0E8B  2EBE               	goto	l1088
 14487  0E8C                     l6590:	
 14488                           
 14489                           ; Switch size 1, requested type "simple"
 14490                           ; Number of cases is 16, Range of values is 0 to 15
 14491                           ; switch strategies available:
 14492                           ; Name         Instructions Cycles
 14493                           ; direct_byte           38     6 (fixed)
 14494                           ; simple_byte           49    25 (average)
 14495                           ; jumptable            260     6 (fixed)
 14496                           ;	Chosen strategy is simple_byte
 14497  0E8C  0872               	movf	??_LED_PROCESS,w
 14498  0E8D  3A00               	xorlw	0	; case 0
 14499  0E8E  1903               	skipnz
 14500  0E8F  2E7E               	goto	l1080
 14501  0E90  3A01               	xorlw	1	; case 1
 14502  0E91  1903               	skipnz
 14503  0E92  2E78               	goto	l1071
 14504  0E93  3A03               	xorlw	3	; case 2
 14505  0E94  1903               	skipnz
 14506  0E95  2E72               	goto	l1062
 14507  0E96  3A01               	xorlw	1	; case 3
 14508  0E97  1903               	skipnz
 14509  0E98  2E6C               	goto	l1053
 14510  0E99  3A07               	xorlw	7	; case 4
 14511  0E9A  1903               	skipnz
 14512  0E9B  2E66               	goto	l1044
 14513  0E9C  3A01               	xorlw	1	; case 5
 14514  0E9D  1903               	skipnz
 14515  0E9E  2E60               	goto	l1035
 14516  0E9F  3A03               	xorlw	3	; case 6
 14517  0EA0  1903               	skipnz
 14518  0EA1  2E5A               	goto	l1026
 14519  0EA2  3A01               	xorlw	1	; case 7
 14520  0EA3  1903               	skipnz
 14521  0EA4  2E54               	goto	l1017
 14522  0EA5  3A0F               	xorlw	15	; case 8
 14523  0EA6  1903               	skipnz
 14524  0EA7  2E4E               	goto	l1008
 14525  0EA8  3A01               	xorlw	1	; case 9
 14526  0EA9  1903               	skipnz
 14527  0EAA  2E48               	goto	l999
 14528  0EAB  3A03               	xorlw	3	; case 10
 14529  0EAC  1903               	skipnz
 14530  0EAD  2E42               	goto	l990
 14531  0EAE  3A01               	xorlw	1	; case 11
 14532  0EAF  1903               	skipnz
 14533  0EB0  2E3C               	goto	l981
 14534  0EB1  3A07               	xorlw	7	; case 12
 14535  0EB2  1903               	skipnz
 14536  0EB3  2E36               	goto	l972
 14537  0EB4  3A01               	xorlw	1	; case 13
 14538  0EB5  1903               	skipnz
 14539  0EB6  2E30               	goto	l963
 14540  0EB7  3A03               	xorlw	3	; case 14
 14541  0EB8  1903               	skipnz
 14542  0EB9  2E2A               	goto	l954
 14543  0EBA  3A01               	xorlw	1	; case 15
 14544  0EBB  1903               	skipnz
 14545  0EBC  2E24               	goto	l944
 14546  0EBD  2EBE               	goto	l1088
 14547  0EBE                     l1088:	
 14548  0EBE  0008               	return
 14549  0EBF                     __end_of_LED_PROCESS:	
 14550                           
 14551                           	psect	intentry
 14552  0004                     __pintentry:	
 14553 ;; *************** function _INTERRUPT_InterruptManager *****************
 14554 ;; Defined at:
 14555 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14556 ;; Parameters:    Size  Location     Type
 14557 ;;		None
 14558 ;; Auto vars:     Size  Location     Type
 14559 ;;		None
 14560 ;; Return value:  Size  Location     Type
 14561 ;;                  1    wreg      void 
 14562 ;; Registers used:
 14563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14564 ;; Tracked objects:
 14565 ;;		On entry : 0/0
 14566 ;;		On exit  : 0/0
 14567 ;;		Unchanged: 0/0
 14568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14569 ;;      Params:         0       0       0       0       0       0       0       0
 14570 ;;      Locals:         0       0       0       0       0       0       0       0
 14571 ;;      Temps:          0       0       0       0       0       0       0       0
 14572 ;;      Totals:         0       0       0       0       0       0       0       0
 14573 ;;Total ram usage:        0 bytes
 14574 ;; Hardware stack levels used:    1
 14575 ;; Hardware stack levels required when called:    3
 14576 ;; This function calls:
 14577 ;;		Absolute function
 14578 ;;		_EUSART_Receive_ISR
 14579 ;;		_TMR1_ISR
 14580 ;; This function is called by:
 14581 ;;		Interrupt level 1
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585  0004                     _INTERRUPT_InterruptManager:	
 14586                           
 14587                           ;incstack = 0
 14588  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14589                           
 14590                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14591  0005  3180               	pagesel	$
 14592                           
 14593                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 14594  0006  1F0B               	btfss	11,6	;volatile
 14595  0007  281D               	goto	i1l627
 14596                           
 14597                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 14598  0008  0021               	movlb	1	; select bank1
 14599  0009  1E91               	btfss	17,5	;volatile
 14600  000A  2815               	goto	i1l622
 14601  000B  0020               	movlb	0	; select bank0
 14602  000C  1E91               	btfss	17,5	;volatile
 14603  000D  2815               	goto	i1l622
 14604                           
 14605                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_RxDefaultInterruptHandler();
 14606  000E  0021               	movlb	1	; select bank1
 14607  000F  0863               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14608  0010  008A               	movwf	10
 14609  0011  0862               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14610  0012  000A               	callw
 14611  0013  3180               	pagesel	$
 14612                           
 14613                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 14614  0014  281D               	goto	i1l627
 14615  0015                     i1l622:	
 14616                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 14617                           
 14618  0015  0021               	movlb	1	; select bank1
 14619  0016  1C11               	btfss	17,0	;volatile
 14620  0017  281D               	goto	i1l627
 14621  0018  0020               	movlb	0	; select bank0
 14622  0019  1C11               	btfss	17,0	;volatile
 14623  001A  281D               	goto	i1l627
 14624                           
 14625                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
 14626  001B  3195  2541         	fcall	_TMR1_ISR
 14627  001D                     i1l627:	
 14628                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 14629                           
 14630                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14631                           
 14632  001D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14633  001E  0009               	retfie
 14634  001F                     __end_of_INTERRUPT_InterruptManager:	
 14635                           
 14636                           	psect	text92
 14637  1541                     __ptext92:	
 14638 ;; *************** function _TMR1_ISR *****************
 14639 ;; Defined at:
 14640 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 14641 ;; Parameters:    Size  Location     Type
 14642 ;;		None
 14643 ;; Auto vars:     Size  Location     Type
 14644 ;;		None
 14645 ;; Return value:  Size  Location     Type
 14646 ;;                  1    wreg      void 
 14647 ;; Registers used:
 14648 ;;		wreg, status,2, status,0, pclath, cstack
 14649 ;; Tracked objects:
 14650 ;;		On entry : 0/0
 14651 ;;		On exit  : 0/0
 14652 ;;		Unchanged: 0/0
 14653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14654 ;;      Params:         0       0       0       0       0       0       0       0
 14655 ;;      Locals:         0       0       0       0       0       0       0       0
 14656 ;;      Temps:          0       0       0       0       0       0       0       0
 14657 ;;      Totals:         0       0       0       0       0       0       0       0
 14658 ;;Total ram usage:        0 bytes
 14659 ;; Hardware stack levels used:    1
 14660 ;; Hardware stack levels required when called:    2
 14661 ;; This function calls:
 14662 ;;		Absolute function
 14663 ;;		_MTOUCH_ScanScheduler
 14664 ;;		_TMR1_DefaultInterruptHandler
 14665 ;;		_TMR1_WriteTimer
 14666 ;; This function is called by:
 14667 ;;		_INTERRUPT_InterruptManager
 14668 ;; This function uses a non-reentrant model
 14669 ;;
 14670                           
 14671                           
 14672                           ;psect for function _TMR1_ISR
 14673  1541                     _TMR1_ISR:	
 14674                           
 14675                           ;mcc_generated_files/tmr1.c: 126:     PIR1bits.TMR1IF = 0;
 14676                           
 14677                           ;incstack = 0
 14678                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 14679  1541  0020               	movlb	0	; select bank0
 14680  1542  1011               	bcf	17,0	;volatile
 14681                           
 14682                           ;mcc_generated_files/tmr1.c: 127:     TMR1_WriteTimer(timer1ReloadVal);
 14683  1543  0021               	movlb	1	; select bank1
 14684  1544  085B               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 14685  1545  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 14686  1546  085A               	movf	_timer1ReloadVal^(0+128),w	;volatile
 14687  1547  00F0               	movwf	TMR1_WriteTimer@timerVal
 14688  1548  3194  2449  3195   	fcall	_TMR1_WriteTimer
 14689                           
 14690                           ;mcc_generated_files/tmr1.c: 129:     if(TMR1_InterruptHandler)
 14691  154B  0021               	movlb	1	; select bank1
 14692  154C  0858               	movf	_TMR1_InterruptHandler^(0+128),w
 14693  154D  0459               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 14694  154E  1903               	btfsc	3,2
 14695  154F  0008               	return
 14696                           
 14697                           ;mcc_generated_files/tmr1.c: 130:     {;mcc_generated_files/tmr1.c: 131:         TMR1_In
      +                          terruptHandler();
 14698  1550  0859               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 14699  1551  008A               	movwf	10
 14700  1552  0858               	movf	_TMR1_InterruptHandler^(0+128),w
 14701  1553  000A               	callw
 14702  1554  3195               	pagesel	$
 14703  1555  0008               	return
 14704  1556                     __end_of_TMR1_ISR:	
 14705                           
 14706                           	psect	text93
 14707  13F8                     __ptext93:	
 14708 ;; *************** function _MTOUCH_ScanScheduler *****************
 14709 ;; Defined at:
 14710 ;;		line 71 in file "mcc_generated_files/mtouch/mtouch.c"
 14711 ;; Parameters:    Size  Location     Type
 14712 ;;		None
 14713 ;; Auto vars:     Size  Location     Type
 14714 ;;		None
 14715 ;; Return value:  Size  Location     Type
 14716 ;;                  1    wreg      void 
 14717 ;; Registers used:
 14718 ;;		wreg, status,2, status,0, pclath, cstack
 14719 ;; Tracked objects:
 14720 ;;		On entry : 0/0
 14721 ;;		On exit  : 0/0
 14722 ;;		Unchanged: 0/0
 14723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14724 ;;      Params:         0       0       0       0       0       0       0       0
 14725 ;;      Locals:         0       0       0       0       0       0       0       0
 14726 ;;      Temps:          0       0       0       0       0       0       0       0
 14727 ;;      Totals:         0       0       0       0       0       0       0       0
 14728 ;;Total ram usage:        0 bytes
 14729 ;; Hardware stack levels used:    1
 14730 ;; Hardware stack levels required when called:    1
 14731 ;; This function calls:
 14732 ;;		_TMR1_WriteTimer
 14733 ;; This function is called by:
 14734 ;;		_MTOUCH_Initialize
 14735 ;;		_TMR1_ISR
 14736 ;; This function uses a non-reentrant model
 14737 ;;
 14738                           
 14739                           
 14740                           ;psect for function _MTOUCH_ScanScheduler
 14741  13F8                     _MTOUCH_ScanScheduler:	
 14742                           
 14743                           ;mcc_generated_files/mtouch/mtouch.c: 75:     TMR1_WriteTimer(mTouchScanReload);
 14744                           
 14745                           ;incstack = 0
 14746                           ; Regs used in _MTOUCH_ScanScheduler: [wreg+status,2+status,0+pclath+cstack]
 14747  13F8  0021               	movlb	1	; select bank1
 14748  13F9  086F               	movf	(_mTouchScanReload+1)^(0+128),w
 14749  13FA  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 14750  13FB  086E               	movf	_mTouchScanReload^(0+128),w
 14751  13FC  00F0               	movwf	TMR1_WriteTimer@timerVal
 14752  13FD  3194  2449         	fcall	_TMR1_WriteTimer
 14753                           
 14754                           ;mcc_generated_files/mtouch/mtouch.c: 78:     mtouch_time_toScan = 1;
 14755  13FF  0020               	movlb	0	; select bank0
 14756  1400  01EC               	clrf	_mtouch_time_toScan
 14757  1401  0AEC               	incf	_mtouch_time_toScan,f
 14758  1402  0008               	return
 14759  1403                     __end_of_MTOUCH_ScanScheduler:	
 14760                           
 14761                           	psect	text94
 14762  135A                     __ptext94:	
 14763 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 14764 ;; Defined at:
 14765 ;;		line 140 in file "mcc_generated_files/tmr1.c"
 14766 ;; Parameters:    Size  Location     Type
 14767 ;;		None
 14768 ;; Auto vars:     Size  Location     Type
 14769 ;;		None
 14770 ;; Return value:  Size  Location     Type
 14771 ;;                  1    wreg      void 
 14772 ;; Registers used:
 14773 ;;		None
 14774 ;; Tracked objects:
 14775 ;;		On entry : 0/0
 14776 ;;		On exit  : 0/0
 14777 ;;		Unchanged: 0/0
 14778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14779 ;;      Params:         0       0       0       0       0       0       0       0
 14780 ;;      Locals:         0       0       0       0       0       0       0       0
 14781 ;;      Temps:          0       0       0       0       0       0       0       0
 14782 ;;      Totals:         0       0       0       0       0       0       0       0
 14783 ;;Total ram usage:        0 bytes
 14784 ;; Hardware stack levels used:    1
 14785 ;; This function calls:
 14786 ;;		Nothing
 14787 ;; This function is called by:
 14788 ;;		_TMR1_Initialize
 14789 ;;		_TMR1_ISR
 14790 ;; This function uses a non-reentrant model
 14791 ;;
 14792                           
 14793                           
 14794                           ;psect for function _TMR1_DefaultInterruptHandler
 14795  135A                     _TMR1_DefaultInterruptHandler:	
 14796                           
 14797                           ;incstack = 0
 14798                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 14799  135A  0008               	return
 14800  135B                     __end_of_TMR1_DefaultInterruptHandler:	
 14801                           
 14802                           	psect	text95
 14803  1449                     __ptext95:	
 14804 ;; *************** function _TMR1_WriteTimer *****************
 14805 ;; Defined at:
 14806 ;;		line 95 in file "mcc_generated_files/tmr1.c"
 14807 ;; Parameters:    Size  Location     Type
 14808 ;;  timerVal        2    0[COMMON] unsigned short 
 14809 ;; Auto vars:     Size  Location     Type
 14810 ;;		None
 14811 ;; Return value:  Size  Location     Type
 14812 ;;                  1    wreg      void 
 14813 ;; Registers used:
 14814 ;;		wreg, status,2
 14815 ;; Tracked objects:
 14816 ;;		On entry : 0/0
 14817 ;;		On exit  : 0/0
 14818 ;;		Unchanged: 0/0
 14819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14820 ;;      Params:         2       0       0       0       0       0       0       0
 14821 ;;      Locals:         0       0       0       0       0       0       0       0
 14822 ;;      Temps:          0       0       0       0       0       0       0       0
 14823 ;;      Totals:         2       0       0       0       0       0       0       0
 14824 ;;Total ram usage:        2 bytes
 14825 ;; Hardware stack levels used:    1
 14826 ;; This function calls:
 14827 ;;		Nothing
 14828 ;; This function is called by:
 14829 ;;		_MTOUCH_ScanScheduler
 14830 ;;		_TMR1_ISR
 14831 ;; This function uses a non-reentrant model
 14832 ;;
 14833                           
 14834                           
 14835                           ;psect for function _TMR1_WriteTimer
 14836  1449                     _TMR1_WriteTimer:	
 14837                           
 14838                           ;mcc_generated_files/tmr1.c: 95: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_f
      +                          iles/tmr1.c: 96: {;mcc_generated_files/tmr1.c: 97:     if (T1CONbits.nT1SYNC == 1)
 14839                           
 14840                           ;incstack = 0
 14841                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 14842  1449  0020               	movlb	0	; select bank0
 14843  144A  1D18               	btfss	24,2	;volatile
 14844  144B  2C53               	goto	i1l4420
 14845                           
 14846                           ;mcc_generated_files/tmr1.c: 98:     {;mcc_generated_files/tmr1.c: 100:         T1CONbit
      +                          s.TMR1ON = 0;
 14847  144C  1018               	bcf	24,0	;volatile
 14848                           
 14849                           ;mcc_generated_files/tmr1.c: 103:         TMR1H = (timerVal >> 8);
 14850  144D  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 14851  144E  0097               	movwf	23	;volatile
 14852                           
 14853                           ;mcc_generated_files/tmr1.c: 104:         TMR1L = timerVal;
 14854  144F  0870               	movf	TMR1_WriteTimer@timerVal,w
 14855  1450  0096               	movwf	22	;volatile
 14856                           
 14857                           ;mcc_generated_files/tmr1.c: 107:         T1CONbits.TMR1ON =1;
 14858  1451  1418               	bsf	24,0	;volatile
 14859                           
 14860                           ;mcc_generated_files/tmr1.c: 108:     }
 14861  1452  0008               	return
 14862  1453                     i1l4420:	
 14863                           
 14864                           ;mcc_generated_files/tmr1.c: 110:     {;mcc_generated_files/tmr1.c: 112:         TMR1H =
      +                           (timerVal >> 8);
 14865  1453  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 14866  1454  0097               	movwf	23	;volatile
 14867                           
 14868                           ;mcc_generated_files/tmr1.c: 113:         TMR1L = timerVal;
 14869  1455  0870               	movf	TMR1_WriteTimer@timerVal,w
 14870  1456  0096               	movwf	22	;volatile
 14871  1457  0008               	return
 14872  1458                     __end_of_TMR1_WriteTimer:	
 14873                           
 14874                           	psect	text96
 14875  089A                     __ptext96:	
 14876 ;; *************** function _EUSART_Receive_ISR *****************
 14877 ;; Defined at:
 14878 ;;		line 164 in file "mcc_generated_files/eusart.c"
 14879 ;; Parameters:    Size  Location     Type
 14880 ;;		None
 14881 ;; Auto vars:     Size  Location     Type
 14882 ;;		None
 14883 ;; Return value:  Size  Location     Type
 14884 ;;                  1    wreg      void 
 14885 ;; Registers used:
 14886 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14887 ;; Tracked objects:
 14888 ;;		On entry : 0/0
 14889 ;;		On exit  : 0/0
 14890 ;;		Unchanged: 0/0
 14891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14892 ;;      Params:         0       0       0       0       0       0       0       0
 14893 ;;      Locals:         0       0       0       0       0       0       0       0
 14894 ;;      Temps:          0       0       0       0       0       0       0       0
 14895 ;;      Totals:         0       0       0       0       0       0       0       0
 14896 ;;Total ram usage:        0 bytes
 14897 ;; Hardware stack levels used:    1
 14898 ;; Hardware stack levels required when called:    2
 14899 ;; This function calls:
 14900 ;;		Absolute function
 14901 ;;		_EUSART_DefaultErrorHandler
 14902 ;;		_EUSART_DefaultFramingErrorHandler
 14903 ;;		_EUSART_DefaultOverrunErrorHandler
 14904 ;;		_EUSART_RxDataHandler
 14905 ;; This function is called by:
 14906 ;;		_EUSART_Initialize
 14907 ;;		_INTERRUPT_InterruptManager
 14908 ;; This function uses a non-reentrant model
 14909 ;;
 14910                           
 14911                           
 14912                           ;psect for function _EUSART_Receive_ISR
 14913  089A                     _EUSART_Receive_ISR:	
 14914                           
 14915                           ;mcc_generated_files/eusart.c: 167:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 14916                           
 14917                           ;incstack = 0
 14918                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14919  089A  087B               	movf	_eusartRxHead,w	;volatile
 14920  089B  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14921  089C  0086               	movwf	6
 14922  089D  0187               	clrf	7
 14923  089E  0181               	clrf	1
 14924                           
 14925                           ;mcc_generated_files/eusart.c: 169:     if(RCSTAbits.FERR){
 14926  089F  0023               	movlb	3	; select bank3
 14927  08A0  1D1D               	btfss	29,2	;volatile
 14928  08A1  28AD               	goto	i1l4728
 14929                           
 14930                           ;mcc_generated_files/eusart.c: 170:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14931  08A2  087B               	movf	_eusartRxHead,w	;volatile
 14932  08A3  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14933  08A4  0086               	movwf	6
 14934  08A5  0187               	clrf	7
 14935  08A6  1481               	bsf	1,1
 14936                           
 14937                           ;mcc_generated_files/eusart.c: 171:         EUSART_FramingErrorHandler();
 14938  08A7  0021               	movlb	1	; select bank1
 14939  08A8  0861               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 14940  08A9  008A               	movwf	10
 14941  08AA  0860               	movf	_EUSART_FramingErrorHandler^(0+128),w
 14942  08AB  000A               	callw
 14943  08AC  3188               	pagesel	$
 14944  08AD                     i1l4728:	
 14945                           
 14946                           ;mcc_generated_files/eusart.c: 174:     if(RCSTAbits.OERR){
 14947  08AD  0023               	movlb	3	; select bank3
 14948  08AE  1C9D               	btfss	29,1	;volatile
 14949  08AF  28BB               	goto	i1l4734
 14950                           
 14951                           ;mcc_generated_files/eusart.c: 175:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14952  08B0  087B               	movf	_eusartRxHead,w	;volatile
 14953  08B1  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14954  08B2  0086               	movwf	6
 14955  08B3  0187               	clrf	7
 14956  08B4  1501               	bsf	1,2
 14957                           
 14958                           ;mcc_generated_files/eusart.c: 176:         EUSART_OverrunErrorHandler();
 14959  08B5  0021               	movlb	1	; select bank1
 14960  08B6  085F               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 14961  08B7  008A               	movwf	10
 14962  08B8  085E               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 14963  08B9  000A               	callw
 14964  08BA  3188               	pagesel	$
 14965  08BB                     i1l4734:	
 14966                           
 14967                           ;mcc_generated_files/eusart.c: 179:     if(eusartRxStatusBuffer[eusartRxHead].status){
 14968  08BB  087B               	movf	_eusartRxHead,w	;volatile
 14969  08BC  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14970  08BD  0086               	movwf	6
 14971  08BE  0187               	clrf	7
 14972  08BF  0801               	movf	1,w
 14973  08C0  1903               	btfsc	3,2
 14974  08C1  28C9               	goto	i1l4738
 14975                           
 14976                           ;mcc_generated_files/eusart.c: 180:         EUSART_ErrorHandler();
 14977  08C2  0021               	movlb	1	; select bank1
 14978  08C3  085D               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14979  08C4  008A               	movwf	10
 14980  08C5  085C               	movf	_EUSART_ErrorHandler^(0+128),w
 14981  08C6  000A               	callw
 14982  08C7  3188               	pagesel	$
 14983                           
 14984                           ;mcc_generated_files/eusart.c: 181:     } else {
 14985  08C8  0008               	return
 14986  08C9                     i1l4738:	
 14987                           
 14988                           ;mcc_generated_files/eusart.c: 182:         EUSART_RxDataHandler();
 14989  08C9  3195  2596         	fcall	_EUSART_RxDataHandler
 14990  08CB  0008               	return
 14991  08CC                     __end_of_EUSART_Receive_ISR:	
 14992                           
 14993                           	psect	text97
 14994  136F                     __ptext97:	
 14995 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14996 ;; Defined at:
 14997 ;;		line 200 in file "mcc_generated_files/eusart.c"
 14998 ;; Parameters:    Size  Location     Type
 14999 ;;		None
 15000 ;; Auto vars:     Size  Location     Type
 15001 ;;		None
 15002 ;; Return value:  Size  Location     Type
 15003 ;;                  1    wreg      void 
 15004 ;; Registers used:
 15005 ;;		None
 15006 ;; Tracked objects:
 15007 ;;		On entry : 0/0
 15008 ;;		On exit  : 0/0
 15009 ;;		Unchanged: 0/0
 15010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15011 ;;      Params:         0       0       0       0       0       0       0       0
 15012 ;;      Locals:         0       0       0       0       0       0       0       0
 15013 ;;      Temps:          0       0       0       0       0       0       0       0
 15014 ;;      Totals:         0       0       0       0       0       0       0       0
 15015 ;;Total ram usage:        0 bytes
 15016 ;; Hardware stack levels used:    1
 15017 ;; This function calls:
 15018 ;;		Nothing
 15019 ;; This function is called by:
 15020 ;;		_EUSART_Initialize
 15021 ;;		_EUSART_Receive_ISR
 15022 ;; This function uses a non-reentrant model
 15023 ;;
 15024                           
 15025                           
 15026                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 15027  136F                     _EUSART_DefaultOverrunErrorHandler:	
 15028                           
 15029                           ;mcc_generated_files/eusart.c: 203:     RCSTAbits.CREN = 0;
 15030                           
 15031                           ;incstack = 0
 15032                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 15033  136F  0023               	movlb	3	; select bank3
 15034  1370  121D               	bcf	29,4	;volatile
 15035                           
 15036                           ;mcc_generated_files/eusart.c: 204:     RCSTAbits.CREN = 1;
 15037  1371  161D               	bsf	29,4	;volatile
 15038  1372  0008               	return
 15039  1373                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 15040                           
 15041                           	psect	text98
 15042  1359                     __ptext98:	
 15043 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 15044 ;; Defined at:
 15045 ;;		line 198 in file "mcc_generated_files/eusart.c"
 15046 ;; Parameters:    Size  Location     Type
 15047 ;;		None
 15048 ;; Auto vars:     Size  Location     Type
 15049 ;;		None
 15050 ;; Return value:  Size  Location     Type
 15051 ;;                  1    wreg      void 
 15052 ;; Registers used:
 15053 ;;		None
 15054 ;; Tracked objects:
 15055 ;;		On entry : 0/0
 15056 ;;		On exit  : 0/0
 15057 ;;		Unchanged: 0/0
 15058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15059 ;;      Params:         0       0       0       0       0       0       0       0
 15060 ;;      Locals:         0       0       0       0       0       0       0       0
 15061 ;;      Temps:          0       0       0       0       0       0       0       0
 15062 ;;      Totals:         0       0       0       0       0       0       0       0
 15063 ;;Total ram usage:        0 bytes
 15064 ;; Hardware stack levels used:    1
 15065 ;; This function calls:
 15066 ;;		Nothing
 15067 ;; This function is called by:
 15068 ;;		_EUSART_Initialize
 15069 ;;		_EUSART_Receive_ISR
 15070 ;; This function uses a non-reentrant model
 15071 ;;
 15072                           
 15073                           
 15074                           ;psect for function _EUSART_DefaultFramingErrorHandler
 15075  1359                     _EUSART_DefaultFramingErrorHandler:	
 15076                           
 15077                           ;incstack = 0
 15078                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 15079  1359  0008               	return
 15080  135A                     __end_of_EUSART_DefaultFramingErrorHandler:	
 15081                           
 15082                           	psect	text99
 15083  135D                     __ptext99:	
 15084 ;; *************** function _EUSART_DefaultErrorHandler *****************
 15085 ;; Defined at:
 15086 ;;		line 208 in file "mcc_generated_files/eusart.c"
 15087 ;; Parameters:    Size  Location     Type
 15088 ;;		None
 15089 ;; Auto vars:     Size  Location     Type
 15090 ;;		None
 15091 ;; Return value:  Size  Location     Type
 15092 ;;                  1    wreg      void 
 15093 ;; Registers used:
 15094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15095 ;; Tracked objects:
 15096 ;;		On entry : 0/0
 15097 ;;		On exit  : 0/0
 15098 ;;		Unchanged: 0/0
 15099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15100 ;;      Params:         0       0       0       0       0       0       0       0
 15101 ;;      Locals:         0       0       0       0       0       0       0       0
 15102 ;;      Temps:          0       0       0       0       0       0       0       0
 15103 ;;      Totals:         0       0       0       0       0       0       0       0
 15104 ;;Total ram usage:        0 bytes
 15105 ;; Hardware stack levels used:    1
 15106 ;; Hardware stack levels required when called:    1
 15107 ;; This function calls:
 15108 ;;		_EUSART_RxDataHandler
 15109 ;; This function is called by:
 15110 ;;		_EUSART_Initialize
 15111 ;;		_EUSART_Receive_ISR
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115                           
 15116                           ;psect for function _EUSART_DefaultErrorHandler
 15117  135D                     _EUSART_DefaultErrorHandler:	
 15118                           
 15119                           ;mcc_generated_files/eusart.c: 209:     EUSART_RxDataHandler();
 15120                           
 15121                           ;incstack = 0
 15122                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15123  135D  3195  2596         	fcall	_EUSART_RxDataHandler
 15124  135F  0008               	return
 15125  1360                     __end_of_EUSART_DefaultErrorHandler:	
 15126                           
 15127                           	psect	text100
 15128  1596                     __ptext100:	
 15129 ;; *************** function _EUSART_RxDataHandler *****************
 15130 ;; Defined at:
 15131 ;;		line 188 in file "mcc_generated_files/eusart.c"
 15132 ;; Parameters:    Size  Location     Type
 15133 ;;		None
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;		None
 15136 ;; Return value:  Size  Location     Type
 15137 ;;                  1    wreg      void 
 15138 ;; Registers used:
 15139 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15140 ;; Tracked objects:
 15141 ;;		On entry : 0/0
 15142 ;;		On exit  : 0/0
 15143 ;;		Unchanged: 0/0
 15144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15145 ;;      Params:         0       0       0       0       0       0       0       0
 15146 ;;      Locals:         0       0       0       0       0       0       0       0
 15147 ;;      Temps:          1       0       0       0       0       0       0       0
 15148 ;;      Totals:         1       0       0       0       0       0       0       0
 15149 ;;Total ram usage:        1 bytes
 15150 ;; Hardware stack levels used:    1
 15151 ;; This function calls:
 15152 ;;		Nothing
 15153 ;; This function is called by:
 15154 ;;		_EUSART_Receive_ISR
 15155 ;;		_EUSART_DefaultErrorHandler
 15156 ;; This function uses a non-reentrant model
 15157 ;;
 15158                           
 15159                           
 15160                           ;psect for function _EUSART_RxDataHandler
 15161  1596                     _EUSART_RxDataHandler:	
 15162                           
 15163                           ;mcc_generated_files/eusart.c: 190:     eusartRxBuffer[eusartRxHead++] = RCREG;
 15164                           
 15165                           ;incstack = 0
 15166                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 15167  1596  0023               	movlb	3	; select bank3
 15168  1597  0819               	movf	25,w	;volatile
 15169  1598  00F0               	movwf	??_EUSART_RxDataHandler
 15170  1599  087B               	movf	_eusartRxHead,w
 15171  159A  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 15172  159B  0086               	movwf	6
 15173  159C  0187               	clrf	7
 15174  159D  0870               	movf	??_EUSART_RxDataHandler,w
 15175  159E  0081               	movwf	1
 15176  159F  3001               	movlw	1
 15177  15A0  00F0               	movwf	??_EUSART_RxDataHandler
 15178  15A1  0870               	movf	??_EUSART_RxDataHandler,w
 15179  15A2  07FB               	addwf	_eusartRxHead,f	;volatile
 15180                           
 15181                           ;mcc_generated_files/eusart.c: 191:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 15182  15A3  3008               	movlw	8
 15183  15A4  027B               	subwf	_eusartRxHead,w	;volatile
 15184  15A5  1803               	btfsc	3,0
 15185                           
 15186                           ;mcc_generated_files/eusart.c: 192:     {;mcc_generated_files/eusart.c: 193:         eus
      +                          artRxHead = 0;
 15187  15A6  01FB               	clrf	_eusartRxHead	;volatile
 15188                           
 15189                           ;mcc_generated_files/eusart.c: 195:     eusartRxCount++;
 15190  15A7  3001               	movlw	1
 15191  15A8  00F0               	movwf	??_EUSART_RxDataHandler
 15192  15A9  0870               	movf	??_EUSART_RxDataHandler,w
 15193  15AA  0020               	movlb	0	; select bank0
 15194  15AB  07E9               	addwf	_eusartRxCount,f	;volatile
 15195  15AC  0008               	return
 15196  15AD                     __end_of_EUSART_RxDataHandler:	
 15197  007E                     btemp	set	126	;btemp
 15198  007E                     int$flags	set	126
 15199  007E                     wtemp0	set	126


Data Sizes:
    Strings     98
    Constant    77
    Data        51
    BSS         150
    Persistent  44
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     53      80
    BANK1            80      0      80
    BANK2            80      2      38
    BANK3            80      0      68
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2496$0	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Service$2496	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_19(CODE[3]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2288_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    memcpy@s1	PTR const void  size(2) Largest target is 68
		 -> mtouch_button_init(CODE[68]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 68
		 -> mtouch_button_init(CODE[68]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_19(CODE[3]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_19(CODE[3]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), MTOUCH_ScanScheduler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), MTOUCH_ScanScheduler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Service@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    sp__memcpy	PTR void  size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    S109$sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    S109$sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    callback_sampled	PTR FTN(enum E2871,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _DATA_PROCESS->_LED_PROCESS
    _DATA_PROCESS->_RELAY_PROCESS

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _MTOUCH_ScanScheduler->_TMR1_WriteTimer
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_check_message
    _update_state->_printf
    _check_message->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _MTOUCH_Button_InitializeAll->_memcpy
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_loadADCSettings
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_Deviation_Update
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Reading_Update->_Button_Reading_Update_Helper

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   48571
                                              0 BANK2      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         0     0      0    7209
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    7271
                                             50 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    7209
                                             42 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    5418
                                             34 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    4983
                                             25 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 8     6      2    3323
                                             19 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    3079
                                             10 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     123
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1380
                                              7 COMMON     3     3      0
                                              5 BANK0      5     4      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     988
                                              4 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      44
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3167
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    2601
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0    1281
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    1281
                                              8 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     377
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          1     1      0     990
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              2 COMMON     5     1      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23363
                                             45 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              5 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              3 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   16671
                                             43 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   16572
                                             36 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     530
                                              6 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              2 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   15163
                                             32 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1607
                                              6 COMMON     1     1      0
                                              0 BANK0      4     4      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      67
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      67
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    6574
                                             19 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    6031
                                              4 BANK0     15    14      1
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1    1226
                                              3 COMMON     4     3      1
                                              0 BANK0      4     4      0
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     211
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     242
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1875
                                              6 COMMON     4     4      0
                                              0 BANK0      2     2      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     633
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     134
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     134
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0     103
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     300
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    6324
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       3     3      0    6324
                                             10 BANK0      3     3      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     377
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     377
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1100
                                              5 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     128
                                              5 COMMON     1     0      1
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1507
                                              5 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     185
                                              5 COMMON     1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             3     3      0     566
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     377
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              5 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1055
                                              5 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     516
                                              0 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0     764
                                              3 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0     666
                                              0 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     377
                                              6 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     346
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     296
                                              2 COMMON     5     5      0
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0      66
                                              5 COMMON     3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (6) _RELAY_PROCESS                                        3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0     480
                   Absolute function *
                 _EUSART_Receive_ISR *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     480
                   Absolute function *
               _MTOUCH_ScanScheduler *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (13) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _MTOUCH_ScanScheduler                                0     0      0     240
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (13) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
     _RELAY_PROCESS
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
       _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write
   _update_state
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _TMR1_ISR *
     Absolute function(Fake) *
     _MTOUCH_ScanScheduler *
       _TMR1_WriteTimer
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     116       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     35      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      2      26      10       47.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      44      12       85.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     116      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Aug 30 10:06:52 2019

                       ?_EUSART_SetRxInterruptHandler 0072                       Sensor_loadADCSettings@adc_index 0073  
                        ?_MTOUCH_Sensor_RawSample_Get 0076                                          _update_state 0634  
                                      ___bmul@product 0074                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 13CD                             _Sensor_setCalibratAcqTime 1467  
                                         __CFG_LVP$ON 0000                                                   l230 058E  
                                                 l261 034F                                                   l266 0356  
                                                 l259 0353                                                   l276 03F6  
                                                 l278 040D                                                   l439 0FDD  
                                                 l900 053C                                                   l568 07F9  
                                                 l944 0E24                                                   l954 0E2A  
                                                 l963 0E30                                                   l972 0E36  
                                                 l981 0E3C                                                   l990 0E42  
                                                 l879 06DD                                                   _GIE 005F  
                                                 l999 0E48                                                   _PR2 001B  
                                     _timer1ReloadVal 00DA                                                   _abs 15AD  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 0A5B  
                      ?_EUSART_SetFramingErrorHandler 0072                               ?_Sensor_loadADCSettings 0073  
                                     _TMR2_Initialize 13DD                                          __CFG_BORV$LO 0000  
                                       DATA_PROCESS@x 0077                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0073                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 0074  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                        ?_EUSART_Read 0070                                                  l1008 0E4E  
                                                l1017 0E54                                                  l1201 0EF7  
                                                l1026 0E5A                                                  l1210 0EFD  
                                                l1035 0E60                                                  ?_abs 0072  
                                                l1044 0E66                                                  l1053 0E6C  
                                                l1062 0E72                                                  l1071 0E78  
                                                l1119 0EC1                                                  l1080 0E7E  
                                                l1129 0EC7                                                  l1138 0ECD  
                                                l1219 0F03                                                  l1147 0ED3  
                                                l1228 0F09                                                  l1156 0ED9  
                                                l1237 0F0F                                                  l1165 0EDF  
                                                l1246 0F15                                                  l1174 0EE5  
                                                l1255 0F1B                                                  l1183 0EEB  
                                                l1263 0F5B                                                  l1088 0EBE  
                                                l1192 0EF1                                                  l1352 0A73  
                                                l1355 0A93                                                  l1356 0A9F  
                                                l4034 0E84                                                  l5002 053F  
                                                l4044 0F21                                                  l5006 0541  
                                                l6010 0752                                                  l4180 17E7  
                                                l6004 0731                                                  l6020 0763  
                                                l4158 0CB6                                                  l6014 0758  
                                                l4184 17EF                                                  l4176 17E0  
                                                l6200 0697                                                  l6202 069E  
                                                l4700 1690                                                  l5500 14C8  
                                                l4188 17F7                                                  l6052 0D45  
                                                l6044 0D28                                                  l6124 158B  
                                                l5420 092B                                                  l3718 1433  
                                                l6062 0D64                                                  l6118 1582  
                                                l4454 14FA                                                  l6214 1704  
                                                l6206 06A5                                                  ?_pad 002A  
                                                l5504 14CE                                                  l5432 14F7  
                                                l5600 032F                                                  l6064 0D87  
                                                l6144 161C                                                  l5416 0907  
                                                l6224 1717                                                  l6400 027F  
                                                l6320 0177                                                  l6218 1706  
                                                l6314 016C                                                  l5380 17B8  
                                                l5444 058A                                                  l5700 044C  
                                                l5540 02E4                                                  l6148 161E  
                                                l6180 0651                                                  l6172 0635  
                                                l6324 017E                                                  l6252 0083  
                                                l5374 17A7                                                  l6190 0674  
                                                l6182 0658                                                  l6174 063C  
                                                l6246 007B                                                  l4912 046A  
                                                l6088 0A47                                                  l5376 17B6  
                                                l5464 0611                                                  l5640 03B9  
                                                l5624 0359                                                  l5616 034A  
                                                l5536 02C8                                                  l5528 02B1  
                                                l6096 0844                                                  l6192 067B  
                                                l6184 065F                                                  l6176 0643  
                                                l6336 0197                                                  l6264 00A7  
                                                l4930 0494                                                  l4906 045E  
                                                l5386 17C9                                                  l5458 05E9  
                                                l5538 02CF                                                  l5570 02E6  
                                                l5546 02D1                                                  l3794 15C9  
                                                l6098 0861                                                  l6194 0682  
                                                l6186 0666                                                  l6178 064A  
                                                l6370 0212                                                  l6290 010A  
                                                l4924 0486                                                  l5484 0E02  
                                                l5476 0DCA                                                  l5652 03ED  
                                                l5636 039E                                                  l5900 1742  
                                                l3796 15D4                                                  l5732 0A71  
                                                l6196 0689                                                  l6188 066D  
                                                l6372 0216                                                  l4942 04B0  
                                                l4918 0478                                                  l5478 0DCE  
                                                l5590 031C                                                  l5574 02F0  
                                                l5558 02D7                                                  l6198 0690  
                                                l6390 0269                                                  l4960 04DA  
                                                l4936 04A2                                                  l5680 0411  
                                                l5648 03D3                                                  l5752 095F  
                                                l5920 1783                                                  l4872 0975  
                                                l5496 16B9                                                  l5728 0A69  
                                                l4954 04CC                                                  l5930 140D  
                                                l5754 0962                                                  l5738 0A75  
                                                l5834 175B                                                  l4972 04F6  
                                                l4948 04BE                                                  l5828 09F9  
                                                l5684 041A                                                  l5780 0B97  
                                                l6580 097F                                                  l4796 0973  
                                                l5836 1761                                                  l6590 0E8C  
                                                l4990 0520                                                  l4966 04E8  
                                                l5942 0C62                                                  l5950 0B21  
                                                l5694 0437                                                  l5782 0B9B  
                                                l5774 0B86                                                  l5758 096D  
                                                l5870 0AD4                                                  l6582 0D71  
                                                l4878 0977                                                  l4984 0512  
                                                l5936 0C46                                                  l5688 0423  
                                                l5792 0BA3                                                  l5784 0B9F  
                                                l5864 0AC1                                                  l6584 0D76  
                                                l6576 06AB                                                  l6586 0549  
                                                l4978 0504                                                  l5938 0C4E  
                                                l5970 0FD4                                                  l5794 0BB6  
                                                l5882 0AFC                                                  l5874 0ADC  
                                                l5858 0AB9                                                  l6578 171F  
                                                l6588 0F29                                                  l4996 052E  
                                                l5980 07AE                                                  l5948 0B1D  
                                                l5964 0F9B                                                  l5798 0BCF  
                                                l5886 0B05                                                  l5878 0AEC  
                                                STR_1 1800                                                  STR_2 1809  
                                                STR_3 1814                                                  STR_4 1819  
                                                STR_5 181E                                                  STR_6 1823  
                                                STR_7 1828                                                  STR_8 182D  
                                                STR_9 1832                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u2330 1484  
                                                u2505 0CC4                                                  u4115 0BBD  
                                                u4035 0A7F                                                  u4300 0C2D  
                                                u4135 0830                                                  u4305 0C29  
                                                u3505 0929                                                  u4414 07CA  
                                                u2495 0C7E                                                  u4415 07C9  
                                                u3615 0DF2                                                  u3465 15B6  
                                                u4355 0B4A                                                  u3565 0627  
                                                u4295 0BF5                                                  u4385 0FB1  
                                                u3585 0DAD                                                  u3595 0DB7  
                                                u4807 00C5                                                  u4817 00D2  
                                                u4907 015A                                                  u4827 00DF  
                                                u4917 01CF                                                  u4837 00EC  
                                                u4927 01DC                                                  u4847 00F9  
                                                u4937 01E9                                                  u4857 0119  
                                                u4947 01F6                                                  u4867 0126  
                                                u4957 0231                                                  u4877 0133  
                                                u4797 00B8                                                  u4967 023E  
                                                u4887 0140                                                  u4977 024B  
                                                u4897 014D                                                  u4987 0258  
                          Button_State_Pressed@button 0025                                                  _TMR2 001A  
                               __end_of_check_message 1728                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01CE  
                            _Sensor_getScanGroupIndex 17A5                             ?_Sensor_Acq_ExecutePacket 0024  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0072                                                  _dbuf 00B8  
                                                _ctoa 1750                                                  _main 0062  
                __size_of_MTOUCH_Button_InitializeAll 001C                                                  _prec 00B2  
                                                _nout 00B0                                                  pad@i 002E  
                                                pad@p 002B                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 0030  
                __size_of_MTOUCH_Sensor_InitializeAll 0010                                                  btemp 007E  
                                                start 001F                            ??_TMR1_SetInterruptHandler 0074  
                                   ___bmul@multiplier 0075                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                        __end_of_Sensor_autoCalibration 0E22  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1814          Sensor_Scanfrequency_Evaluation@frequency_hop 180F  
                            _myButtonReleasedCallback 164C                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 0010                         __size_of_Button_State_Pressed 0072  
                                               ??_abs 0074                                                 ??_pad 002D  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 0020  
                       ??_MTOUCH_Sensor_RawSample_Get 0078                         Sensor_RawSample_Update@sensor 0078  
                       myButtonPressedCallback@button 0075                             __size_of_Sensor_isEnabled 0011  
                                       ?_EUSART_Write 0070                        __size_of_OSCILLATOR_Initialize 0006  
                       __end_of_OSCILLATOR_Initialize 13B1     Sensor_Scanfrequency_Evaluation@best_packet_sample 003B  
                 __end_of_Sensor_isCalibratingAcqTime 13EE                           _Sensor_isCalibratingAcqTime 13E5  
                                               ?_ctoa 0033                                                 ?_main 0070  
                                               STR_10 1837                                                 STR_11 183C  
                                               STR_12 1841                                                 STR_13 1846  
                                               STR_14 184B                                                 STR_15 1850  
                                               STR_16 1855                                                 STR_17 185A  
                                       __CFG_WDTE$OFF 0000                                                 STR_18 185F  
                                               STR_19 1868                        __end_of_Sensor_loadADCSettings 0634  
                                               _T1CON 0018                                                 _T2CON 001C  
                             __size_of_Button_Service 0050                                                 i1l622 0015  
                                               i1l627 001D                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0039  
                                               _TMR1H 0017                                                 _TMR1L 0016  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 _TXREG 019A  
                                               _TXSTA 019E                       __size_of_Button_DefaultCallback 0001  
                                ??_MTOUCH_needReburst 0072                                      __end_of_TMR1_ISR 1556  
                     __size_of_Sensor_DefaultCallback 0001                                                 _blink 0063  
                                               _flags 00B4                               __size_of_Sensor_Service 008F  
               __end_of_MTOUCH_Sensor_Scan_Initialize 14B6                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 14A6                                        _WDT_Initialize 1373  
                             Sensor_setSampled@sensor 0072                                                 _fputc 08FE  
                                               _fputs 16B5                                          LED_PROCESS@x 0074  
                                               pad@fp 0032                                                 _width 0059  
                                               ctoa@c 0033                                                 _putch 137C  
                                               ctoa@w 0036                      __size_of_Button_State_NotPressed 00A4  
                             __end_of_TMR1_Initialize 15F6                                                 pclath 000A  
                                _Sensor_Sampled_Reset 13D5                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 1363  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0008  
                                     _TMR1_WriteTimer 1449                                Sensor_isEnabled@sensor 0073  
                                     __initialization 0021                                          __end_of_ctoa 1779  
                                        __end_of_main 028B                                  _Sensor_setCalibrated 141F  
                               __size_of_DATA_PROCESS 0126                                        ??_EUSART_Write 0072  
                             __end_of_TMR2_Initialize 13E5                                        __CFG_LPBOR$OFF 0000  
                         ?_INTERRUPT_InterruptManager 0070                          __end_of_MTOUCH_ScanScheduler 1403  
                      ??_EUSART_SetRxInterruptHandler 0074                      __end_of_MTOUCH_Button_Initialize 08FE  
                                              ??_ctoa 0035                                                ??_main 0144  
                             _MTOUCH_Sensor_Calibrate 1411                             Sensor_Service@sensor_adc1 0049  
                           Sensor_Service@sensor_adc2 004A                               ??_Button_Reading_Update 007A  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0074                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 1377                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0078             __end_of_EUSART_DefaultFramingErrorHandler 135A  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 1359  
                          _EUSART_OverrunErrorHandler 00DE                  __size_of_MTOUCH_Sensor_RawSample_Get 0011  
                                              ?_fputc 0074                                                ?_fputs 0025  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              ?_putch 0070                                                _ANSELB 018D  
                                              _ANSELC 018E                            __end_of_EUSART_is_rx_ready 1363  
                                              _BORCON 0116                                                _T1GCON 0019  
                             TMR1_WriteTimer@timerVal 0070                                                i1l4420 1453  
                                              i1l4734 08BB                                                i1l4728 08AD  
                                              i1l4738 08C9                                 ?_Sensor_Sampled_Reset 0070  
                                              _OSCCON 0099                                                _SPBRGH 019C  
                                              _SPBRGL 019B                                                _WDTCON 0097  
                                        _DATA_PROCESS 0459                        ??_Button_Reading_Update_Helper 0020  
                              _Button_DefaultCallback 135B                       __end_of_MTOUCH_Service_Mainloop 162F  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 13EE  
                __end_of_TMR1_DefaultInterruptHandler 135B                 __size_of_TMR1_DefaultInterruptHandler 0001  
                        _TMR1_DefaultInterruptHandler 135A                                _Sensor_DefaultCallback 135C  
                                        vfprintf@cfmt 0048                                         _packet_sample 0055  
                                              ___bmul 14C6                                 ?_Sensor_setCalibrated 0070  
                        Sensor_DefaultCallback@sensor 0072                                        __CFG_STVREN$ON 0000  
                    __size_of_myButtonPressedCallback 002E                                                _memcpy 1779  
                                              _rxData 0067                      __end_of_MTOUCH_Button_ServiceAll 14A6  
                                              _printf 150A                                                pad@buf 002A  
                                __size_of_LED_PROCESS 009D                                                ctoa@fp 0038  
                        Sensor_autoCalibration@sensor 0021                                                _strlen 15C4  
                                              fputc@c 0074                                                fputs@c 0026  
                                              fputs@i 0027                                                fputs@s 0029  
                             _MTOUCH_Sensor_SampleAll 1580                          Button_DefaultCallback@button 0075  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0B07  
                              __size_of_RELAY_PROCESS 009D                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 086A                   Sensor_postAcquisitionProcess@sensor 0023  
                             __end_of_TMR2_StartTimer 1366              TMR1_SetInterruptHandler@InterruptHandler 0072  
                  __size_of_Sensor_setCalibratAcqTime 000F              __end_of_MTOUCH_Button_SetPressedCallback 138D  
           __size_of_MTOUCH_Button_SetPressedCallback 0006                    ??_MTOUCH_Button_SetPressedCallback 0074  
                   ?_MTOUCH_Button_SetPressedCallback 0072                      _MTOUCH_Button_SetPressedCallback 1387  
                             __end_of_TMR1_WriteTimer 1458                              __size_of_Sensor_isActive 000E  
                     MTOUCH_Sensor_RawSample_Get@name 0079                                      ?_TMR1_Initialize 0070  
                 Sensor_getScanGroupIndex@sensorGroup 0075                                  __size_of_EUSART_Read 0025  
                                   _SYSTEM_Initialize 156B                               __end_of__initialization 005E  
                 __size_of_Button_Baseline_Initialize 002F                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0076                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00E4                            __end_of_Button_Tick_helper 1701  
                                   _update_state_flag 0061                         MTOUCH_Sensor_Calibrate@sensor 0077  
         Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0029                                   ___bmul@multiplicand 0072  
                                      __pcstackCOMMON 0070                               _MTOUCH_Button_isPressed 1476  
                                        __pidataBANK0 136C                                          __pidataBANK1 0800  
                                        __pidataBANK2 166C           __end_of_MTOUCH_Button_SetNotPressedCallback 1387  
        __size_of_MTOUCH_Button_SetNotPressedCallback 0006                 ??_MTOUCH_Button_SetNotPressedCallback 0074  
                ?_MTOUCH_Button_SetNotPressedCallback 0072                   _MTOUCH_Button_SetNotPressedCallback 1381  
                                 ??_SYSTEM_Initialize 007A                                             ?_TMR1_ISR 0070  
                       ?_TMR1_DefaultInterruptHandler 0070                            __end_of_MTOUCH_Button_Tick 150A  
                                       __end_of_fputc 0934                                         __end_of_fputs 16DA  
                    __end_of_MTOUCH_Sensor_Initialize 156B                                         __end_of_putch 1381  
                           ??_MTOUCH_Sensor_Calibrate 0076                                      _Sensor_isEnabled 14E8  
                                    ?_TMR2_Initialize 0070                       __end_of_Button_Deviation_Update 0C6C  
                            Sensor_setInactive@sensor 0072                                        _Button_Service 0A0B  
                    __end_of_Sensor_Acq_ExecutePacket 0459                            ?_Button_State_Initializing 0025  
                                Button_Service@button 002C                                        _OPTION_REGbits 0095  
                               ??_Sensor_isCalibrated 0072                            ??_Sensor_getScanGroupIndex 0072  
                                _eusartRxStatusBuffer 00A0                        __end_of_Button_Baseline_Update 0CFB  
                 Sensor_Acq_ExecutePacket@sensor_adc1 0032                   Sensor_Acq_ExecutePacket@sensor_adc2 0024  
                            _MTOUCH_Button_Initialize 08CC                       ??_EUSART_SetOverrunErrorHandler 0074  
                                      _Sensor_Service 0CFB                               _Button_State_NotPressed 0F5C  
                       __size_of_MTOUCH_Sensor_Enable 000E                                    _Sensor_setInactive 13C5  
                                   _sensor_scan_group 1864                                               ??_fputc 0020  
                           __end_of_SYSTEM_Initialize 1580                                     _lowpowerActivated 006B  
                                             ??_fputs 0077                      MTOUCH_Sensor_isCalibrated@sensor 0077  
                              ??_Sensor_Sampled_Reset 0072                                               ??_putch 0073  
                                          __pbssBANK0 0055                                            __pbssBANK1 00A0  
                                          __pbssBANK3 01A0                                            _check_data 0971  
                                __end_of_EUSART_Write 0800                               _TMR2_LoadPeriodRegister 1377  
                                _MTOUCH_ScanScheduler 13F8                            ??_myButtonReleasedCallback 0076  
                        Sensor_loadADCSettings@sensor 0023                                      _mTouchScanReload 00EE  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 13BD  
                         __size_of_EUSART_Receive_ISR 0032                            __end_of_mtouch_button_init 1044  
                                   _last_touch_status 005B           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 002A  
                              ??_Sensor_setCalibrated 0072                                            __pmaintext 0062  
                                       _RELAY_PROCESS 0EBF                                               ?___bmul 0072  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                                            ??_TMR1_ISR 0072  
                      MTOUCH_Sensor_wasSampled@sensor 0077                                            __pintentry 0004  
                              __end_of_Button_Service 0A5B                                               ?_memcpy 0072  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 1612                           _MTOUCH_Button_InitializeAll 15F6  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 14C6                           _MTOUCH_Sensor_InitializeAll 14B6  
                           ??_MTOUCH_Sensor_SampleAll 004B                                               ?_printf 004A  
                     __end_of_Sensor_RawSample_Update 1750                                  ??_Sensor_setInactive 0072  
                                             ?_strlen 0072                     __size_of_MTOUCH_Sensor_wasSampled 000F  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 0069  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0072  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 0B69  
                              __end_of_Sensor_Service 0D8A                               Sensor_Service@scanGroup 0047  
                            _MTOUCH_Button_ServiceAll 1496                             __end_of_sensor_scan_group 1868  
                                  __size_of_vfpfcnvrt 00A8                         __size_of_EUSART_RxDataHandler 0017  
                    __size_of_MTOUCH_Service_Mainloop 001D                          __end_of_Button_State_Pressed 07F8  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0074  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0024  
                     Sensor_setCalibratAcqTime@sensor 0072                                      ?_TMR1_WriteTimer 0070  
                                __size_of_MTOUCH_Tick 0003                   Sensor_loadADCSettings@addressOffset 0022  
                __size_of_Sensor_isCalibratingAcqTime 0009                                 ?_MTOUCH_ScanScheduler 0070  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0026                             ??_MTOUCH_Button_isPressed 0072  
                                          _count_conf 00B6                                     ??_Sensor_isActive 0072  
                 __size_of_EUSART_DefaultErrorHandler 0003                                        ?_RELAY_PROCESS 0070  
               __end_of_Sensor_postAcquisitionProcess 0971                __size_of_Sensor_postAcquisitionProcess 003D  
                       _Sensor_postAcquisitionProcess 0934                               _myButtonPressedCallback 17D2  
                             Sensor_Acquisition@retry 0042                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                        MTOUCH_Button_Initialize@button 0021  
                                         _AD2CON0bits 0791                                             ?_vfprintf 0042  
                                     ?_Button_Service 0070            Sensor_Scanfrequency_Evaluation@sensor_adc1 0036  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 0033                                       __size_of_memcpy 002C  
                                             __ptext1 0634                                               __ptext2 1701  
                                             __ptext3 150A                                               __ptext4 083B  
                                             __ptext5 06DE                                               __ptext6 1750  
                                             __ptext7 0A5B                                               __ptext8 15C4  
                                             __ptext9 16B5                                __size_of_check_message 0027  
                                     __size_of_printf 0011                           Button_Reading_Update@button 0023  
                      ??_TMR1_DefaultInterruptHandler 0070                                       __size_of_strlen 0017  
                                           _T1CONbits 0018                              _MTOUCH_Sensor_Initialize 1556  
                               _OSCILLATOR_Initialize 13AB                                             _T2CONbits 001C  
                                        __size_of_abs 0017                                          __size_of_pad 0050  
                           ??_Button_State_NotPressed 0026                                               _prcData 0066  
                                     ?_Sensor_Service 0070                     __size_of_TMR1_SetInterruptHandler 0006  
                            ??_PIN_MANAGER_Initialize 0072                             ?_TMR1_SetInterruptHandler 0072  
                      __size_of_Button_Reading_Update 000E                           __size_of_MTOUCH_needReburst 0002  
                       __end_of_Button_Reading_Update 1411                              _Sensor_Acq_ExecutePacket 028B  
                                    _callback_sampled 00EC                             ??_TMR2_LoadPeriodRegister 0072  
                     Sensor_RawSample_Update@adcIndex 0077                            __size_of_SYSTEM_Initialize 0015  
                                             clrloop0 13B2                                      _callback_pressed 00EA  
                      MTOUCH_Sensor_Initialize@sensor 0079                                  end_of_initialization 005E  
                                         ?_check_data 0070                               ?_Button_DefaultCallback 0075  
               __end_of_EUSART_SetOverrunErrorHandler 139F                __size_of_EUSART_SetOverrunErrorHandler 0006  
                       _EUSART_SetOverrunErrorHandler 1399                                               memcpy@d 0024  
                                             memcpy@n 0074                                               memcpy@s 0021  
                                             fputc@fp 0076                                               init_ram 13B7  
                                             fputs@fp 0025                                               initloop 13B8  
                             ?_Sensor_DefaultCallback 0072                         Sensor_Acquisition@sensor_adc1 0043  
                       Sensor_Acquisition@sensor_adc2 0040                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 086A                          ??_MTOUCH_Sensor_isCalibrated 0076  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 0786  
                 __end_of_MTOUCH_Sensor_RawSample_Get 14E8                           _MTOUCH_Sensor_RawSample_Get 14D7  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 1360  
                                          ??_vfprintf 0045                                               strlen@a 0075  
                                             strlen@s 0076                                   ??_EUSART_Initialize 0074  
                                    ??_WDT_Initialize 0072                                   ?_EUSART_is_rx_ready 0070  
                              Sensor_setActive@sensor 0072                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0039                         Button_Deviation_Update@button 0072  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0027                                 __size_of_EUSART_Write 0008  
            MTOUCH_Button_SetPressedCallback@callback 0072                            MTOUCH_Sensor_Enable@sensor 0077  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0028                                   _callback_notPressed 006D  
                 __size_of_MTOUCH_Sensor_isCalibrated 0010                        __end_of_Button_DefaultCallback 135C  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0037  
                              ??_MTOUCH_ScanScheduler 0072                                    _sensor_globalFlags 006A  
                            __end_of_Sensor_isEnabled 14F9                            Sensor_setCalibrated@sensor 0072  
                      __end_of_Sensor_DefaultCallback 135D                      __end_of_myButtonReleasedCallback 166C  
                           __end_of_EUSART_Initialize 089A                                  ??_EUSART_is_rx_ready 0072  
                                       _check_message 1701                            _Sensor_loadADCSettings$550 0020  
                            ??_Sensor_autoCalibration 0076                                         _check_request 0064  
                                     ??_RELAY_PROCESS 0072                             ??_myButtonPressedCallback 0076  
                    __size_of_Sensor_RawSample_Update 0028                                    _Sensor_Acquisition 0AAB  
                            ??_Sensor_loadADCSettings 0074                                         ?_update_state 0070  
                                       ??_LED_PROCESS 0072                                  _Button_State_Pressed 0786  
                                      __end_of___bmul 14D7                    __end_of_EUSART_DefaultErrorHandler 1360  
                          _EUSART_DefaultErrorHandler 135D                                   ?_Sensor_Acquisition 0040  
                                         vfpfcnvrt@ap 003A                                           vfpfcnvrt@fp 0041  
                          ??_MTOUCH_Button_Initialize 0078           MTOUCH_Button_SetNotPressedCallback@callback 0072  
                     ??_MTOUCH_Sensor_Scan_Initialize 0072                        ?_Sensor_postAcquisitionProcess 0070  
                                        _EUSART_Write 07F8                                     __size_of_TMR1_ISR 0015  
                                 __size_of_check_data 004A                                    _Button_Tick_helper 16DA  
                                      __end_of_memcpy 17A5                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0076                              __end_of_Sensor_setActive 13C5  
                    TMR2_LoadPeriodRegister@periodVal 0072                                        __end_of_printf 151B  
                         ??_Button_State_Initializing 0026                                        __end_of_strlen 15DB  
                                 start_initialization 0021                               _MTOUCH_Service_Mainloop 1612  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 14F9  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 15C4  
                                         __end_of_pad 0AAB                                        _TMR2_StopTimer 1366  
                                       ??_EUSART_Read 0072          EUSART_SetRxInterruptHandler@interruptHandler 0072  
                                         putch@txData 0073                                  ??_Sensor_Acquisition 0041  
                                      ?_check_message 0070                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 0025                        Sensor_autoCalibration@adcIndex 0020  
                      ?_EUSART_SetOverrunErrorHandler 0072                      __end_of_MTOUCH_Sensor_wasSampled 1467  
                                ??_Button_Tick_helper 0072                              __size_of_TMR1_Initialize 001B  
                        __end_of_MTOUCH_Sensor_Enable 1449                                           vfprintf@fmt 0042  
                                        _packet_noise 005F                                        ??_update_state 007A  
                          _EUSART_FramingErrorHandler 00E0                                              ??___bmul 0073  
                               ?_Button_State_Pressed 0025                                _EUSART_SetErrorHandler 138D  
                          ??_MTOUCH_Button_ServiceAll 007A                                           __pdataBANK0 006D  
                                         __pdataBANK1 00E4                                           __pdataBANK2 0120  
                                      check_message@x 0054                                              ??_memcpy 0076  
                         __end_of_Sensor_isCalibrated 13F8                          ??_Button_Baseline_Initialize 0020  
                                       _sample_period 006F                                  ??_MTOUCH_Button_Tick 0075  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 0072  
                                            ??_printf 004E                                              ??_strlen 0074  
                        ?_Sensor_isCalibratingAcqTime 0070                       __end_of_myButtonPressedCallback 1800  
                                 __end_of_LED_PROCESS 0EBF                                __end_of_TMR2_StopTimer 1369  
                                         __pbssCOMMON 007A                                             ___latbits 0002  
                                       __pcstackBANK0 0020                                         __pcstackBANK2 0144  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 142D  
                                 Sensor_Service@error 0048                            __end_of_EUSART_Receive_ISR 08CC  
                       __size_of_Sensor_Sampled_Reset 0008                            __size_of_EUSART_Initialize 0030  
                             _Button_Deviation_Update 0BE5                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00E2                                   __end_of_EUSART_Read 16B5  
                           _Button_State_Initializing 0B07                    __end_of_MTOUCH_Sensor_isCalibrated 1496  
                          _MTOUCH_Sensor_isCalibrated 1486                                             __pnvBANK1 00D8  
                     __size_of_Sensor_autoCalibration 0098                     __size_of_Sensor_getScanGroupIndex 002D  
                                   _Sensor_setSampled 13CD                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 15AD                                _PIN_MANAGER_Initialize 162F  
                                    ??_Button_Service 002A                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 0073                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 0022                      __end_of_TMR1_SetInterruptHandler 13AB  
                          ??_MTOUCH_Sensor_Initialize 0078                         __size_of_Sensor_setCalibrated 000E  
                                           __ptext100 1596                       __size_of_Sensor_loadADCSettings 00B5  
                                            _AAD1CON2 0713                                              _AAD1CON3 0714  
                                            _AAD2CON3 0794                                              _AAD1RES0 071A  
                                        _eusartRxHead 007B                                              _AAD2RES0 079A  
                                        _eusartRxTail 007A                                      ??_Sensor_Service 0044  
                          ??_Sensor_Acq_ExecutePacket 0025                          ??_INTERRUPT_InterruptManager 0072  
                                 ??_Sensor_setSampled 0072                     __size_of_myButtonReleasedCallback 0020  
                                         _blink_count 0062                             ?_myButtonReleasedCallback 0075  
                           ??_MTOUCH_Service_Mainloop 004D                                     __size_of_vfprintf 002F  
                                            _ADCOMCON 0712                           __size_of_Sensor_setInactive 0008  
                      Sensor_Acq_ExecutePacket@last_a 002D                        Sensor_Acq_ExecutePacket@last_b 002F  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0072  
                                       ??_MTOUCH_Tick 0077                                       ??_check_message 0052  
                                      __size_of_fputc 0036                                        __size_of_fputs 0025  
                                      __size_of_putch 0005                                          ??_check_data 0072  
                                      _eusartRxBuffer 00A8                             __end_of_Sensor_setSampled 13D5  
                                            _LATAbits 010C                EUSART_SetErrorHandler@interruptHandler 0072  
                                            _LATBbits 010D                                              _LATCbits 010E  
                                       ?_DATA_PROCESS 0070                               _Sensor_RawSample_Update 1728  
                   __end_of_Sensor_setCalibratAcqTime 1476                                             clear_ram0 13B1  
                                            _PIE1bits 0091                                     _eusartRxLastError 0068  
                            __size_of_TMR2_StartTimer 0003                              __size_of_TMR1_WriteTimer 000F  
                 __size_of_INTERRUPT_InterruptManager 001B                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0074                Sensor_Acq_ExecutePacket@packet_counter 0031  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0026  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 152E               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 151B                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 1373            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 136F                                              _TMR1_ISR 1541  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 002B                                           _LED_PROCESS 0E22  
                            _MTOUCH_Sensor_wasSampled 1458                                    _mtouch_time_toScan 006C  
                                           _vfpfcnvrt 06DE                              ??_Button_Baseline_Update 0072  
                                   ??_TMR1_Initialize 0074                                    __end_of_check_data 09BB  
                             __end_of_Sensor_isActive 143B                                _Sensor_autoCalibration 0D8A  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 0075  
                              _Sensor_loadADCSettings 057F                                  _MTOUCH_Sensor_Enable 143B  
                                         _EUSART_Read 1690                                  __end_of_update_state 06DE  
                                          vfpfcnvrt@c 0040                              Button_Tick_helper@button 0074  
                           ??_Button_Deviation_Update 0020                                 _Button_Reading_Update 1403  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                      ??_DATA_PROCESS 0075                                     ??_TMR2_Initialize 0072  
                                 __end_of_MTOUCH_Tick 136C                                     _MTOUCH_Initialize 152E  
                     __end_of_MTOUCH_Sensor_Calibrate 141F                                    ??_Sensor_isEnabled 0072  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0021  
                                           memcpy@tmp 0020                                            vfprintf@ap 0044  
                                          vfprintf@fp 0047                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 0072                    __end_of_Button_Baseline_Initialize 083B  
                          _Button_Baseline_Initialize 080C                                   _EUSART_ErrorHandler 00DC  
                                 ??_MTOUCH_Initialize 007A                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 0039                              ?_Button_State_NotPressed 0025  
                                         check_data@x 0074                              _TMR1_SetInterruptHandler 13A5  
                                  Button_Service@name 002B                                 _TMR1_InterruptHandler 00D8  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0072                  Sensor_Scanfrequency_Evaluation@retry 003A  
                                  ??_Sensor_setActive 0072                                  _EUSART_RxDataHandler 1596  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 08FE  
                                            __ptext11 137C                                              __ptext20 152E  
                                            __ptext12 07F8                                              __ptext21 13A5  
                                            __ptext13 0971                                              __ptext30 1393  
                                            __ptext22 14B6                                              __ptext14 156B  
                                            __ptext31 138D                                              __ptext23 1556  
                                            __ptext15 1373                                              __ptext40 0CFB  
                                            __ptext32 1612                                              __ptext24 143B  
                                            __ptext16 13DD                                              __ptext41 13CD  
                                            __ptext33 0002                                              __ptext25 15F6  
                                            __ptext17 15DB                                              __ptext50 1366  
                                            __ptext42 1728                                              __ptext34 1369  
                                            __ptext26 1779                                              __ptext18 162F  
                                            __ptext51 1363                                              __ptext43 135C  
                                            __ptext35 14F9                                              __ptext27 086A  
                                            __ptext19 13AB                                              __ptext60 1467  
                                            __ptext52 1377                                              __ptext44 0AAB  
                                            __ptext36 16DA                                              __ptext28 139F  
                                            __ptext61 13E5                                              __ptext53 057F  
                                            __ptext45 0934                                              __ptext37 151B  
                                            __ptext29 1399                                              __ptext70 0786  
                                            __ptext62 17A5                                              __ptext54 13EE  
                                            __ptext46 13C5                                              __ptext38 13D5  
                                            __ptext71 17D2                                              __ptext63 14A6  
                                            __ptext55 14E8                                              __ptext47 13BD  
                                            __ptext39 1580                                              __ptext80 09BB  
                                            __ptext72 135B                                              __ptext64 1496  
                                            __ptext56 142D                                              __ptext48 0B69  
                                            __ptext81 14D7                                              __ptext73 164C  
                                            __ptext65 0A0B                                              __ptext57 0D8A  
                                            __ptext49 028B                                              __ptext90 0E22  
                                            __ptext82 14C6                                              __ptext74 1476  
                                            __ptext66 1458                                              __ptext58 15AD  
                                            __ptext83 0BE5                                              __ptext75 08CC  
                                            __ptext67 1486                                              __ptext59 141F  
                                            __ptext92 1541                                              __ptext84 1387  
                                            __ptext76 1411                                              __ptext68 0F5C  
                                            __ptext93 13F8                                              __ptext85 1381  
                                            __ptext77 0C6C                                              __ptext69 0B07  
                                            __ptext94 135A                                              __ptext86 1360  
                                            __ptext78 080C                                              __ptext95 1449  
                                            __ptext87 1690                                              __ptext79 1403  
                                            __ptext96 089A                                              __ptext88 0459  
                                            __ptext97 136F                                              __ptext89 0EBF  
                                            __ptext98 1359                                              __ptext99 135D  
                           __end_of_MTOUCH_Initialize 1541                             ??_Sensor_RawSample_Update 0076  
                       __size_of_MTOUCH_ScanScheduler 000B                            __size_of_Sensor_setSampled 0008  
                         __size_of_EUSART_is_rx_ready 0003                                         __size_of_ctoa 0029  
                                       __size_of_main 0229                       __end_of_MTOUCH_Sensor_SampleAll 1596  
                    Sensor_Scanfrequency_Evaluation@i 003F                               ?_EUSART_SetErrorHandler 0072  
                               __end_of_RELAY_PROCESS 0F5C         EUSART_SetOverrunErrorHandler@interruptHandler 0072  
                                            int$flags 007E                                              _vfprintf 083B  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0072  
                  __end_of_INTERRUPT_InterruptManager 001F                            _INTERRUPT_InterruptManager 0004  
                                           printf@fmt 004A                 __end_of_EUSART_SetFramingErrorHandler 1399  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 1393  
                                   ??_TMR1_WriteTimer 0072                                        RELAY_PROCESS@x 0074  
                     __size_of_Button_Baseline_Update 008F                          ?_MTOUCH_Button_InitializeAll 0070  
                        MTOUCH_Sensor_SampleAll@group 004C                          ?_MTOUCH_Sensor_InitializeAll 0070  
                                    ?_Sensor_isActive 0070                                         _mtouch_button 01A0  
                                          _INTCONbits 000B                                 ?_EUSART_RxDataHandler 0070  
                                       _mtouch_sensor 0120                                              memcpy@d1 0023  
                                            memcpy@s1 0072                       __end_of_MTOUCH_Button_isPressed 1486  
                    __end_of_Sensor_getScanGroupIndex 17D2                                     __CFG_BOREN$NSLEEP 0000  
                                      __pstringtext10 1828                                        __pstringtext11 182D  
                                      __pstringtext20 185A                                        __pstringtext12 1832  
                                      __pstringtext21 185F                                        __pstringtext13 1837  
                                      __pstringtext22 1868                                        __pstringtext14 183C  
                                      __pstringtext23 0000                                        __pstringtext15 1841  
                                      __pstringtext16 1846                                        __pstringtext17 184B  
                                      __pstringtext18 1850                                        __pstringtext19 1855  
                                         _MTOUCH_Tick 1369                                ?_Button_Reading_Update 0070  
                    Button_Deviation_Update@deviation 0073                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 0020                     __size_of_MTOUCH_Button_Initialize 0032  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 0075  
             __end_of_Sensor_Scanfrequency_Evaluation 0BE5              __size_of_Sensor_Scanfrequency_Evaluation 007C  
                   ??_Sensor_Scanfrequency_Evaluation 0034                      ?_Sensor_Scanfrequency_Evaluation 0033  
                     _Sensor_Scanfrequency_Evaluation 0B69                               ?_PIN_MANAGER_Initialize 0070  
                                       _timeout_count 005D                           ??_Sensor_setCalibratAcqTime 0072  
                      __end_of_EUSART_SetErrorHandler 1393                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 13A5  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 139F  
                                       _config_status 0065                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 1000                                              printf@ap 0051  
                                  _EUSART_Receive_ISR 089A         EUSART_SetFramingErrorHandler@interruptHandler 0072  
                        __end_of_Sensor_Sampled_Reset 13DD                                           ??_vfpfcnvrt 003B  
                                    ??_TMR2_StopTimer 0072                       __end_of_TMR2_LoadPeriodRegister 137C  
                         __size_of_MTOUCH_Button_Tick 0011                                         __pstringtext1 180F  
                                       __pstringtext2 1864                                         __pstringtext3 1000  
                                       __pstringtext4 1800                                         __pstringtext5 1809  
                                       __pstringtext6 1814                                         __pstringtext7 1819  
                                       __pstringtext8 181E                                         __pstringtext9 1823  
                                __end_of_DATA_PROCESS 057F                                   ?_EUSART_Receive_ISR 0070  
                               __size_of_update_state 00AA                         ??_MTOUCH_Button_InitializeAll 0079  
                            ??_Button_DefaultCallback 0076                         ??_MTOUCH_Sensor_InitializeAll 007A  
                Sensor_Acq_ExecutePacket@activeSensor 002C                      __size_of_MTOUCH_Sensor_Calibrate 000E  
                              ??_MTOUCH_Sensor_Enable 0076                     Sensor_isCalibratingAcqTime@sensor 0072  
                        __size_of_Sensor_isCalibrated 000A                              ??_Sensor_DefaultCallback 0073  
                        __end_of_Sensor_setCalibrated 142D                  __end_of_Button_Reading_Update_Helper 0A0B  
               __size_of_Button_Reading_Update_Helper 0050                          _Button_Reading_Update_Helper 09BB  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0025                                    EUSART_Write@txData 0072  
                          __size_of_MTOUCH_Initialize 0013                        __end_of_PIN_MANAGER_Initialize 164C  
                              _Button_Baseline_Update 0C6C                           MTOUCH_Button_isPressed@name 0072  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0076  
                                     _TMR1_Initialize 15DB  
