

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jul 05 17:18:46 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	cinit,global,class=CODE,merge=1,delta=2
    31                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    32                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    33                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    34                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    37                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    38                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    39                           	psect	inittext,global,class=CODE,delta=2
    40                           	psect	clrtext,global,class=CODE,delta=2
    41                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    42                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    43                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    44                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    45                           	psect	text1,local,class=CODE,merge=1,delta=2
    46                           	psect	text2,local,class=CODE,merge=1,delta=2
    47                           	psect	text3,local,class=CODE,merge=1,delta=2
    48                           	psect	text4,local,class=CODE,merge=1,delta=2
    49                           	psect	text5,local,class=CODE,merge=1,delta=2
    50                           	psect	text6,local,class=CODE,merge=1,delta=2
    51                           	psect	text7,local,class=CODE,merge=1,delta=2
    52                           	psect	text8,local,class=CODE,merge=1,delta=2
    53                           	psect	text9,local,class=CODE,merge=1,delta=2
    54                           	psect	text10,local,class=CODE,merge=1,delta=2
    55                           	psect	text11,local,class=CODE,merge=1,delta=2
    56                           	psect	text12,local,class=CODE,merge=1,delta=2
    57                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text14,local,class=CODE,merge=1,delta=2
    59                           	psect	text15,local,class=CODE,merge=1,delta=2
    60                           	psect	text16,local,class=CODE,merge=1,delta=2
    61                           	psect	text17,local,class=CODE,merge=1,delta=2
    62                           	psect	text18,local,class=CODE,merge=1,delta=2
    63                           	psect	text19,local,class=CODE,merge=1,delta=2
    64                           	psect	text20,local,class=CODE,merge=1,delta=2
    65                           	psect	text21,local,class=CODE,merge=1,delta=2
    66                           	psect	text22,local,class=CODE,merge=1,delta=2
    67                           	psect	text23,local,class=CODE,merge=1,delta=2
    68                           	psect	text24,local,class=CODE,merge=1,delta=2
    69                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text26,local,class=CODE,merge=1,delta=2
    71                           	psect	text27,local,class=CODE,merge=1,delta=2
    72                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text29,local,class=CODE,merge=1,delta=2
    74                           	psect	text30,local,class=CODE,merge=1,delta=2
    75                           	psect	text31,local,class=CODE,merge=1,delta=2
    76                           	psect	text32,local,class=CODE,merge=1,delta=2
    77                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text35,local,class=CODE,merge=1,delta=2
    80                           	psect	text36,local,class=CODE,merge=1,delta=2
    81                           	psect	text37,local,class=CODE,merge=1,delta=2
    82                           	psect	text38,local,class=CODE,merge=1,delta=2
    83                           	psect	text39,local,class=CODE,merge=1,delta=2
    84                           	psect	text40,local,class=CODE,merge=1,delta=2
    85                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text42,local,class=CODE,merge=1,delta=2
    87                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text44,local,class=CODE,merge=1,delta=2
    89                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text49,local,class=CODE,merge=1,delta=2
    94                           	psect	text50,local,class=CODE,merge=1,delta=2
    95                           	psect	text51,local,class=CODE,merge=1,delta=2
    96                           	psect	text52,local,class=CODE,merge=1,delta=2
    97                           	psect	text53,local,class=CODE,merge=1,delta=2
    98                           	psect	text54,local,class=CODE,merge=1,delta=2
    99                           	psect	text55,local,class=CODE,merge=1,delta=2
   100                           	psect	text56,local,class=CODE,merge=1,delta=2
   101                           	psect	text57,local,class=CODE,merge=1,delta=2
   102                           	psect	text58,local,class=CODE,merge=1,delta=2
   103                           	psect	text59,local,class=CODE,merge=1,delta=2
   104                           	psect	text60,local,class=CODE,merge=1,delta=2
   105                           	psect	text61,local,class=CODE,merge=1,delta=2
   106                           	psect	text62,local,class=CODE,merge=1,delta=2
   107                           	psect	text63,local,class=CODE,merge=1,delta=2
   108                           	psect	text64,local,class=CODE,merge=1,delta=2
   109                           	psect	text65,local,class=CODE,merge=1,delta=2
   110                           	psect	text66,local,class=CODE,merge=1,delta=2
   111                           	psect	text67,local,class=CODE,merge=1,delta=2
   112                           	psect	text68,local,class=CODE,merge=1,delta=2
   113                           	psect	text69,local,class=CODE,merge=1,delta=2,group=1
   114                           	psect	text70,local,class=CODE,merge=1,delta=2
   115                           	psect	text71,local,class=CODE,merge=1,delta=2
   116                           	psect	text72,local,class=CODE,merge=1,delta=2
   117                           	psect	text73,local,class=CODE,merge=1,delta=2
   118                           	psect	text74,local,class=CODE,merge=1,delta=2
   119                           	psect	text75,local,class=CODE,merge=1,delta=2
   120                           	psect	text76,local,class=CODE,merge=1,delta=2
   121                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
   122                           	psect	text78,local,class=CODE,merge=1,delta=2
   123                           	psect	text79,local,class=CODE,merge=1,delta=2
   124                           	psect	text80,local,class=CODE,merge=1,delta=2
   125                           	psect	text81,local,class=CODE,merge=1,delta=2
   126                           	psect	text82,local,class=CODE,merge=1,delta=2,group=2
   127                           	psect	text83,local,class=CODE,merge=1,delta=2,group=2
   128                           	psect	text84,local,class=CODE,merge=1,delta=2,group=2
   129                           	psect	text85,local,class=CODE,merge=1,delta=2
   130                           	psect	text86,local,class=CODE,merge=1,delta=2
   131                           	psect	text87,local,class=CODE,merge=1,delta=2
   132                           	psect	text88,local,class=CODE,merge=1,delta=2
   133                           	psect	intentry,global,class=CODE,delta=2
   134                           	psect	text90,local,class=CODE,merge=1,delta=2
   135                           	psect	text91,local,class=CODE,merge=1,delta=2
   136                           	psect	text92,local,class=CODE,merge=1,delta=2
   137                           	psect	text93,local,class=CODE,merge=1,delta=2
   138                           	psect	text94,local,class=CODE,merge=1,delta=2
   139                           	dabs	1,0x7E,2
   140  0000                     
   141                           ; Version 2.05
   142                           ; Generated 20/12/2018 GMT
   143                           ; 
   144                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   145                           ; All rights reserved.
   146                           ; 
   147                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   148                           ; 
   149                           ; Redistribution and use in source and binary forms, with or without modification, are
   150                           ; permitted provided that the following conditions are met:
   151                           ; 
   152                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   153                           ;        conditions and the following disclaimer.
   154                           ; 
   155                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   156                           ;        of conditions and the following disclaimer in the documentation and/or other
   157                           ;        materials provided with the distribution.
   158                           ; 
   159                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   160                           ;        software without specific prior written permission.
   161                           ; 
   162                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   163                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   164                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   165                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   166                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   167                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   168                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   169                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   170                           ; 
   171                           ; 
   172                           ; Code-generator required, PIC16LF1559 Definitions
   173                           ; 
   174                           ; SFR Addresses
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0016                     	;# 
   195  0017                     	;# 
   196  0018                     	;# 
   197  0019                     	;# 
   198  001A                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  011D                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  018E                     	;# 
   226  0191                     	;# 
   227  0191                     	;# 
   228  0192                     	;# 
   229  0193                     	;# 
   230  0193                     	;# 
   231  0194                     	;# 
   232  0195                     	;# 
   233  0196                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019C                     	;# 
   239  019D                     	;# 
   240  019E                     	;# 
   241  019F                     	;# 
   242  020C                     	;# 
   243  020D                     	;# 
   244  0211                     	;# 
   245  0211                     	;# 
   246  0212                     	;# 
   247  0212                     	;# 
   248  0213                     	;# 
   249  0213                     	;# 
   250  0214                     	;# 
   251  0214                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0216                     	;# 
   256  0216                     	;# 
   257  0217                     	;# 
   258  0217                     	;# 
   259  0391                     	;# 
   260  0392                     	;# 
   261  0393                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0611                     	;# 
   266  0612                     	;# 
   267  0613                     	;# 
   268  0613                     	;# 
   269  0614                     	;# 
   270  0615                     	;# 
   271  0616                     	;# 
   272  0616                     	;# 
   273  0711                     	;# 
   274  0711                     	;# 
   275  0711                     	;# 
   276  0712                     	;# 
   277  0712                     	;# 
   278  0713                     	;# 
   279  0713                     	;# 
   280  0713                     	;# 
   281  0714                     	;# 
   282  0714                     	;# 
   283  0714                     	;# 
   284  0715                     	;# 
   285  0715                     	;# 
   286  0716                     	;# 
   287  0716                     	;# 
   288  0716                     	;# 
   289  0716                     	;# 
   290  0717                     	;# 
   291  0717                     	;# 
   292  0717                     	;# 
   293  0717                     	;# 
   294  0718                     	;# 
   295  0718                     	;# 
   296  0718                     	;# 
   297  0719                     	;# 
   298  0719                     	;# 
   299  0719                     	;# 
   300  0719                     	;# 
   301  071A                     	;# 
   302  071A                     	;# 
   303  071A                     	;# 
   304  071A                     	;# 
   305  071A                     	;# 
   306  071B                     	;# 
   307  071B                     	;# 
   308  071C                     	;# 
   309  071C                     	;# 
   310  071C                     	;# 
   311  071C                     	;# 
   312  071C                     	;# 
   313  071D                     	;# 
   314  071D                     	;# 
   315  071E                     	;# 
   316  071E                     	;# 
   317  0791                     	;# 
   318  0791                     	;# 
   319  0793                     	;# 
   320  0793                     	;# 
   321  0794                     	;# 
   322  0794                     	;# 
   323  0796                     	;# 
   324  0796                     	;# 
   325  0796                     	;# 
   326  0797                     	;# 
   327  0797                     	;# 
   328  0797                     	;# 
   329  0798                     	;# 
   330  0798                     	;# 
   331  0799                     	;# 
   332  0799                     	;# 
   333  0799                     	;# 
   334  079A                     	;# 
   335  079A                     	;# 
   336  079A                     	;# 
   337  079B                     	;# 
   338  079C                     	;# 
   339  079C                     	;# 
   340  079C                     	;# 
   341  079D                     	;# 
   342  079E                     	;# 
   343  079E                     	;# 
   344  0F8C                     	;# 
   345  0F8D                     	;# 
   346  0F91                     	;# 
   347  0F96                     	;# 
   348  0F97                     	;# 
   349  0F9C                     	;# 
   350  0F9D                     	;# 
   351  0F9E                     	;# 
   352  0FE3                     	;# 
   353  0FE4                     	;# 
   354  0FE5                     	;# 
   355  0FE6                     	;# 
   356  0FE7                     	;# 
   357  0FE8                     	;# 
   358  0FE9                     	;# 
   359  0FEA                     	;# 
   360  0FEB                     	;# 
   361  0FED                     	;# 
   362  0FEE                     	;# 
   363  0FEF                     	;# 
   364  0000                     	;# 
   365  0001                     	;# 
   366  0002                     	;# 
   367  0003                     	;# 
   368  0004                     	;# 
   369  0005                     	;# 
   370  0006                     	;# 
   371  0007                     	;# 
   372  0008                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  0011                     	;# 
   380  0012                     	;# 
   381  0015                     	;# 
   382  0016                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001C                     	;# 
   390  008C                     	;# 
   391  008D                     	;# 
   392  008E                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0095                     	;# 
   396  0096                     	;# 
   397  0097                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  009F                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  0116                     	;# 
   410  0117                     	;# 
   411  011D                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  018E                     	;# 
   415  0191                     	;# 
   416  0191                     	;# 
   417  0192                     	;# 
   418  0193                     	;# 
   419  0193                     	;# 
   420  0194                     	;# 
   421  0195                     	;# 
   422  0196                     	;# 
   423  0199                     	;# 
   424  019A                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019C                     	;# 
   428  019D                     	;# 
   429  019E                     	;# 
   430  019F                     	;# 
   431  020C                     	;# 
   432  020D                     	;# 
   433  0211                     	;# 
   434  0211                     	;# 
   435  0212                     	;# 
   436  0212                     	;# 
   437  0213                     	;# 
   438  0213                     	;# 
   439  0214                     	;# 
   440  0214                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0216                     	;# 
   445  0216                     	;# 
   446  0217                     	;# 
   447  0217                     	;# 
   448  0391                     	;# 
   449  0392                     	;# 
   450  0393                     	;# 
   451  0394                     	;# 
   452  0395                     	;# 
   453  0396                     	;# 
   454  0611                     	;# 
   455  0612                     	;# 
   456  0613                     	;# 
   457  0613                     	;# 
   458  0614                     	;# 
   459  0615                     	;# 
   460  0616                     	;# 
   461  0616                     	;# 
   462  0711                     	;# 
   463  0711                     	;# 
   464  0711                     	;# 
   465  0712                     	;# 
   466  0712                     	;# 
   467  0713                     	;# 
   468  0713                     	;# 
   469  0713                     	;# 
   470  0714                     	;# 
   471  0714                     	;# 
   472  0714                     	;# 
   473  0715                     	;# 
   474  0715                     	;# 
   475  0716                     	;# 
   476  0716                     	;# 
   477  0716                     	;# 
   478  0716                     	;# 
   479  0717                     	;# 
   480  0717                     	;# 
   481  0717                     	;# 
   482  0717                     	;# 
   483  0718                     	;# 
   484  0718                     	;# 
   485  0718                     	;# 
   486  0719                     	;# 
   487  0719                     	;# 
   488  0719                     	;# 
   489  0719                     	;# 
   490  071A                     	;# 
   491  071A                     	;# 
   492  071A                     	;# 
   493  071A                     	;# 
   494  071A                     	;# 
   495  071B                     	;# 
   496  071B                     	;# 
   497  071C                     	;# 
   498  071C                     	;# 
   499  071C                     	;# 
   500  071C                     	;# 
   501  071C                     	;# 
   502  071D                     	;# 
   503  071D                     	;# 
   504  071E                     	;# 
   505  071E                     	;# 
   506  0791                     	;# 
   507  0791                     	;# 
   508  0793                     	;# 
   509  0793                     	;# 
   510  0794                     	;# 
   511  0794                     	;# 
   512  0796                     	;# 
   513  0796                     	;# 
   514  0796                     	;# 
   515  0797                     	;# 
   516  0797                     	;# 
   517  0797                     	;# 
   518  0798                     	;# 
   519  0798                     	;# 
   520  0799                     	;# 
   521  0799                     	;# 
   522  0799                     	;# 
   523  079A                     	;# 
   524  079A                     	;# 
   525  079A                     	;# 
   526  079B                     	;# 
   527  079C                     	;# 
   528  079C                     	;# 
   529  079C                     	;# 
   530  079D                     	;# 
   531  079E                     	;# 
   532  079E                     	;# 
   533  0F8C                     	;# 
   534  0F8D                     	;# 
   535  0F91                     	;# 
   536  0F96                     	;# 
   537  0F97                     	;# 
   538  0F9C                     	;# 
   539  0F9D                     	;# 
   540  0F9E                     	;# 
   541  0FE3                     	;# 
   542  0FE4                     	;# 
   543  0FE5                     	;# 
   544  0FE6                     	;# 
   545  0FE7                     	;# 
   546  0FE8                     	;# 
   547  0FE9                     	;# 
   548  0FEA                     	;# 
   549  0FEB                     	;# 
   550  0FED                     	;# 
   551  0FEE                     	;# 
   552  0FEF                     	;# 
   553  0000                     	;# 
   554  0001                     	;# 
   555  0002                     	;# 
   556  0003                     	;# 
   557  0004                     	;# 
   558  0005                     	;# 
   559  0006                     	;# 
   560  0007                     	;# 
   561  0008                     	;# 
   562  0009                     	;# 
   563  000A                     	;# 
   564  000B                     	;# 
   565  000C                     	;# 
   566  000D                     	;# 
   567  000E                     	;# 
   568  0011                     	;# 
   569  0012                     	;# 
   570  0015                     	;# 
   571  0016                     	;# 
   572  0016                     	;# 
   573  0017                     	;# 
   574  0018                     	;# 
   575  0019                     	;# 
   576  001A                     	;# 
   577  001B                     	;# 
   578  001C                     	;# 
   579  008C                     	;# 
   580  008D                     	;# 
   581  008E                     	;# 
   582  0091                     	;# 
   583  0092                     	;# 
   584  0095                     	;# 
   585  0096                     	;# 
   586  0097                     	;# 
   587  0099                     	;# 
   588  009A                     	;# 
   589  009B                     	;# 
   590  009B                     	;# 
   591  009C                     	;# 
   592  009D                     	;# 
   593  009E                     	;# 
   594  009F                     	;# 
   595  010C                     	;# 
   596  010D                     	;# 
   597  010E                     	;# 
   598  0116                     	;# 
   599  0117                     	;# 
   600  011D                     	;# 
   601  018C                     	;# 
   602  018D                     	;# 
   603  018E                     	;# 
   604  0191                     	;# 
   605  0191                     	;# 
   606  0192                     	;# 
   607  0193                     	;# 
   608  0193                     	;# 
   609  0194                     	;# 
   610  0195                     	;# 
   611  0196                     	;# 
   612  0199                     	;# 
   613  019A                     	;# 
   614  019B                     	;# 
   615  019B                     	;# 
   616  019C                     	;# 
   617  019D                     	;# 
   618  019E                     	;# 
   619  019F                     	;# 
   620  020C                     	;# 
   621  020D                     	;# 
   622  0211                     	;# 
   623  0211                     	;# 
   624  0212                     	;# 
   625  0212                     	;# 
   626  0213                     	;# 
   627  0213                     	;# 
   628  0214                     	;# 
   629  0214                     	;# 
   630  0215                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0216                     	;# 
   634  0216                     	;# 
   635  0217                     	;# 
   636  0217                     	;# 
   637  0391                     	;# 
   638  0392                     	;# 
   639  0393                     	;# 
   640  0394                     	;# 
   641  0395                     	;# 
   642  0396                     	;# 
   643  0611                     	;# 
   644  0612                     	;# 
   645  0613                     	;# 
   646  0613                     	;# 
   647  0614                     	;# 
   648  0615                     	;# 
   649  0616                     	;# 
   650  0616                     	;# 
   651  0711                     	;# 
   652  0711                     	;# 
   653  0711                     	;# 
   654  0712                     	;# 
   655  0712                     	;# 
   656  0713                     	;# 
   657  0713                     	;# 
   658  0713                     	;# 
   659  0714                     	;# 
   660  0714                     	;# 
   661  0714                     	;# 
   662  0715                     	;# 
   663  0715                     	;# 
   664  0716                     	;# 
   665  0716                     	;# 
   666  0716                     	;# 
   667  0716                     	;# 
   668  0717                     	;# 
   669  0717                     	;# 
   670  0717                     	;# 
   671  0717                     	;# 
   672  0718                     	;# 
   673  0718                     	;# 
   674  0718                     	;# 
   675  0719                     	;# 
   676  0719                     	;# 
   677  0719                     	;# 
   678  0719                     	;# 
   679  071A                     	;# 
   680  071A                     	;# 
   681  071A                     	;# 
   682  071A                     	;# 
   683  071A                     	;# 
   684  071B                     	;# 
   685  071B                     	;# 
   686  071C                     	;# 
   687  071C                     	;# 
   688  071C                     	;# 
   689  071C                     	;# 
   690  071C                     	;# 
   691  071D                     	;# 
   692  071D                     	;# 
   693  071E                     	;# 
   694  071E                     	;# 
   695  0791                     	;# 
   696  0791                     	;# 
   697  0793                     	;# 
   698  0793                     	;# 
   699  0794                     	;# 
   700  0794                     	;# 
   701  0796                     	;# 
   702  0796                     	;# 
   703  0796                     	;# 
   704  0797                     	;# 
   705  0797                     	;# 
   706  0797                     	;# 
   707  0798                     	;# 
   708  0798                     	;# 
   709  0799                     	;# 
   710  0799                     	;# 
   711  0799                     	;# 
   712  079A                     	;# 
   713  079A                     	;# 
   714  079A                     	;# 
   715  079B                     	;# 
   716  079C                     	;# 
   717  079C                     	;# 
   718  079C                     	;# 
   719  079D                     	;# 
   720  079E                     	;# 
   721  079E                     	;# 
   722  0F8C                     	;# 
   723  0F8D                     	;# 
   724  0F91                     	;# 
   725  0F96                     	;# 
   726  0F97                     	;# 
   727  0F9C                     	;# 
   728  0F9D                     	;# 
   729  0F9E                     	;# 
   730  0FE3                     	;# 
   731  0FE4                     	;# 
   732  0FE5                     	;# 
   733  0FE6                     	;# 
   734  0FE7                     	;# 
   735  0FE8                     	;# 
   736  0FE9                     	;# 
   737  0FEA                     	;# 
   738  0FEB                     	;# 
   739  0FED                     	;# 
   740  0FEE                     	;# 
   741  0FEF                     	;# 
   742  0000                     	;# 
   743  0001                     	;# 
   744  0002                     	;# 
   745  0003                     	;# 
   746  0004                     	;# 
   747  0005                     	;# 
   748  0006                     	;# 
   749  0007                     	;# 
   750  0008                     	;# 
   751  0009                     	;# 
   752  000A                     	;# 
   753  000B                     	;# 
   754  000C                     	;# 
   755  000D                     	;# 
   756  000E                     	;# 
   757  0011                     	;# 
   758  0012                     	;# 
   759  0015                     	;# 
   760  0016                     	;# 
   761  0016                     	;# 
   762  0017                     	;# 
   763  0018                     	;# 
   764  0019                     	;# 
   765  001A                     	;# 
   766  001B                     	;# 
   767  001C                     	;# 
   768  008C                     	;# 
   769  008D                     	;# 
   770  008E                     	;# 
   771  0091                     	;# 
   772  0092                     	;# 
   773  0095                     	;# 
   774  0096                     	;# 
   775  0097                     	;# 
   776  0099                     	;# 
   777  009A                     	;# 
   778  009B                     	;# 
   779  009B                     	;# 
   780  009C                     	;# 
   781  009D                     	;# 
   782  009E                     	;# 
   783  009F                     	;# 
   784  010C                     	;# 
   785  010D                     	;# 
   786  010E                     	;# 
   787  0116                     	;# 
   788  0117                     	;# 
   789  011D                     	;# 
   790  018C                     	;# 
   791  018D                     	;# 
   792  018E                     	;# 
   793  0191                     	;# 
   794  0191                     	;# 
   795  0192                     	;# 
   796  0193                     	;# 
   797  0193                     	;# 
   798  0194                     	;# 
   799  0195                     	;# 
   800  0196                     	;# 
   801  0199                     	;# 
   802  019A                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019C                     	;# 
   806  019D                     	;# 
   807  019E                     	;# 
   808  019F                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  0211                     	;# 
   812  0211                     	;# 
   813  0212                     	;# 
   814  0212                     	;# 
   815  0213                     	;# 
   816  0213                     	;# 
   817  0214                     	;# 
   818  0214                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0216                     	;# 
   823  0216                     	;# 
   824  0217                     	;# 
   825  0217                     	;# 
   826  0391                     	;# 
   827  0392                     	;# 
   828  0393                     	;# 
   829  0394                     	;# 
   830  0395                     	;# 
   831  0396                     	;# 
   832  0611                     	;# 
   833  0612                     	;# 
   834  0613                     	;# 
   835  0613                     	;# 
   836  0614                     	;# 
   837  0615                     	;# 
   838  0616                     	;# 
   839  0616                     	;# 
   840  0711                     	;# 
   841  0711                     	;# 
   842  0711                     	;# 
   843  0712                     	;# 
   844  0712                     	;# 
   845  0713                     	;# 
   846  0713                     	;# 
   847  0713                     	;# 
   848  0714                     	;# 
   849  0714                     	;# 
   850  0714                     	;# 
   851  0715                     	;# 
   852  0715                     	;# 
   853  0716                     	;# 
   854  0716                     	;# 
   855  0716                     	;# 
   856  0716                     	;# 
   857  0717                     	;# 
   858  0717                     	;# 
   859  0717                     	;# 
   860  0717                     	;# 
   861  0718                     	;# 
   862  0718                     	;# 
   863  0718                     	;# 
   864  0719                     	;# 
   865  0719                     	;# 
   866  0719                     	;# 
   867  0719                     	;# 
   868  071A                     	;# 
   869  071A                     	;# 
   870  071A                     	;# 
   871  071A                     	;# 
   872  071A                     	;# 
   873  071B                     	;# 
   874  071B                     	;# 
   875  071C                     	;# 
   876  071C                     	;# 
   877  071C                     	;# 
   878  071C                     	;# 
   879  071C                     	;# 
   880  071D                     	;# 
   881  071D                     	;# 
   882  071E                     	;# 
   883  071E                     	;# 
   884  0791                     	;# 
   885  0791                     	;# 
   886  0793                     	;# 
   887  0793                     	;# 
   888  0794                     	;# 
   889  0794                     	;# 
   890  0796                     	;# 
   891  0796                     	;# 
   892  0796                     	;# 
   893  0797                     	;# 
   894  0797                     	;# 
   895  0797                     	;# 
   896  0798                     	;# 
   897  0798                     	;# 
   898  0799                     	;# 
   899  0799                     	;# 
   900  0799                     	;# 
   901  079A                     	;# 
   902  079A                     	;# 
   903  079A                     	;# 
   904  079B                     	;# 
   905  079C                     	;# 
   906  079C                     	;# 
   907  079C                     	;# 
   908  079D                     	;# 
   909  079E                     	;# 
   910  079E                     	;# 
   911  0F8C                     	;# 
   912  0F8D                     	;# 
   913  0F91                     	;# 
   914  0F96                     	;# 
   915  0F97                     	;# 
   916  0F9C                     	;# 
   917  0F9D                     	;# 
   918  0F9E                     	;# 
   919  0FE3                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  008C                     	;# 
   958  008D                     	;# 
   959  008E                     	;# 
   960  0091                     	;# 
   961  0092                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0099                     	;# 
   966  009A                     	;# 
   967  009B                     	;# 
   968  009B                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009E                     	;# 
   972  009F                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0116                     	;# 
   977  0117                     	;# 
   978  011D                     	;# 
   979  018C                     	;# 
   980  018D                     	;# 
   981  018E                     	;# 
   982  0191                     	;# 
   983  0191                     	;# 
   984  0192                     	;# 
   985  0193                     	;# 
   986  0193                     	;# 
   987  0194                     	;# 
   988  0195                     	;# 
   989  0196                     	;# 
   990  0199                     	;# 
   991  019A                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019C                     	;# 
   995  019D                     	;# 
   996  019E                     	;# 
   997  019F                     	;# 
   998  020C                     	;# 
   999  020D                     	;# 
  1000  0211                     	;# 
  1001  0211                     	;# 
  1002  0212                     	;# 
  1003  0212                     	;# 
  1004  0213                     	;# 
  1005  0213                     	;# 
  1006  0214                     	;# 
  1007  0214                     	;# 
  1008  0215                     	;# 
  1009  0215                     	;# 
  1010  0215                     	;# 
  1011  0216                     	;# 
  1012  0216                     	;# 
  1013  0217                     	;# 
  1014  0217                     	;# 
  1015  0391                     	;# 
  1016  0392                     	;# 
  1017  0393                     	;# 
  1018  0394                     	;# 
  1019  0395                     	;# 
  1020  0396                     	;# 
  1021  0611                     	;# 
  1022  0612                     	;# 
  1023  0613                     	;# 
  1024  0613                     	;# 
  1025  0614                     	;# 
  1026  0615                     	;# 
  1027  0616                     	;# 
  1028  0616                     	;# 
  1029  0711                     	;# 
  1030  0711                     	;# 
  1031  0711                     	;# 
  1032  0712                     	;# 
  1033  0712                     	;# 
  1034  0713                     	;# 
  1035  0713                     	;# 
  1036  0713                     	;# 
  1037  0714                     	;# 
  1038  0714                     	;# 
  1039  0714                     	;# 
  1040  0715                     	;# 
  1041  0715                     	;# 
  1042  0716                     	;# 
  1043  0716                     	;# 
  1044  0716                     	;# 
  1045  0716                     	;# 
  1046  0717                     	;# 
  1047  0717                     	;# 
  1048  0717                     	;# 
  1049  0717                     	;# 
  1050  0718                     	;# 
  1051  0718                     	;# 
  1052  0718                     	;# 
  1053  0719                     	;# 
  1054  0719                     	;# 
  1055  0719                     	;# 
  1056  0719                     	;# 
  1057  071A                     	;# 
  1058  071A                     	;# 
  1059  071A                     	;# 
  1060  071A                     	;# 
  1061  071A                     	;# 
  1062  071B                     	;# 
  1063  071B                     	;# 
  1064  071C                     	;# 
  1065  071C                     	;# 
  1066  071C                     	;# 
  1067  071C                     	;# 
  1068  071C                     	;# 
  1069  071D                     	;# 
  1070  071D                     	;# 
  1071  071E                     	;# 
  1072  071E                     	;# 
  1073  0791                     	;# 
  1074  0791                     	;# 
  1075  0793                     	;# 
  1076  0793                     	;# 
  1077  0794                     	;# 
  1078  0794                     	;# 
  1079  0796                     	;# 
  1080  0796                     	;# 
  1081  0796                     	;# 
  1082  0797                     	;# 
  1083  0797                     	;# 
  1084  0797                     	;# 
  1085  0798                     	;# 
  1086  0798                     	;# 
  1087  0799                     	;# 
  1088  0799                     	;# 
  1089  0799                     	;# 
  1090  079A                     	;# 
  1091  079A                     	;# 
  1092  079A                     	;# 
  1093  079B                     	;# 
  1094  079C                     	;# 
  1095  079C                     	;# 
  1096  079C                     	;# 
  1097  079D                     	;# 
  1098  079E                     	;# 
  1099  079E                     	;# 
  1100  0F8C                     	;# 
  1101  0F8D                     	;# 
  1102  0F91                     	;# 
  1103  0F96                     	;# 
  1104  0F97                     	;# 
  1105  0F9C                     	;# 
  1106  0F9D                     	;# 
  1107  0F9E                     	;# 
  1108  0FE3                     	;# 
  1109  0FE4                     	;# 
  1110  0FE5                     	;# 
  1111  0FE6                     	;# 
  1112  0FE7                     	;# 
  1113  0FE8                     	;# 
  1114  0FE9                     	;# 
  1115  0FEA                     	;# 
  1116  0FEB                     	;# 
  1117  0FED                     	;# 
  1118  0FEE                     	;# 
  1119  0FEF                     	;# 
  1120  0000                     	;# 
  1121  0001                     	;# 
  1122  0002                     	;# 
  1123  0003                     	;# 
  1124  0004                     	;# 
  1125  0005                     	;# 
  1126  0006                     	;# 
  1127  0007                     	;# 
  1128  0008                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0095                     	;# 
  1152  0096                     	;# 
  1153  0097                     	;# 
  1154  0099                     	;# 
  1155  009A                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  009F                     	;# 
  1162  010C                     	;# 
  1163  010D                     	;# 
  1164  010E                     	;# 
  1165  0116                     	;# 
  1166  0117                     	;# 
  1167  011D                     	;# 
  1168  018C                     	;# 
  1169  018D                     	;# 
  1170  018E                     	;# 
  1171  0191                     	;# 
  1172  0191                     	;# 
  1173  0192                     	;# 
  1174  0193                     	;# 
  1175  0193                     	;# 
  1176  0194                     	;# 
  1177  0195                     	;# 
  1178  0196                     	;# 
  1179  0199                     	;# 
  1180  019A                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019C                     	;# 
  1184  019D                     	;# 
  1185  019E                     	;# 
  1186  019F                     	;# 
  1187  020C                     	;# 
  1188  020D                     	;# 
  1189  0211                     	;# 
  1190  0211                     	;# 
  1191  0212                     	;# 
  1192  0212                     	;# 
  1193  0213                     	;# 
  1194  0213                     	;# 
  1195  0214                     	;# 
  1196  0214                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0215                     	;# 
  1200  0216                     	;# 
  1201  0216                     	;# 
  1202  0217                     	;# 
  1203  0217                     	;# 
  1204  0391                     	;# 
  1205  0392                     	;# 
  1206  0393                     	;# 
  1207  0394                     	;# 
  1208  0395                     	;# 
  1209  0396                     	;# 
  1210  0611                     	;# 
  1211  0612                     	;# 
  1212  0613                     	;# 
  1213  0613                     	;# 
  1214  0614                     	;# 
  1215  0615                     	;# 
  1216  0616                     	;# 
  1217  0616                     	;# 
  1218  0711                     	;# 
  1219  0711                     	;# 
  1220  0711                     	;# 
  1221  0712                     	;# 
  1222  0712                     	;# 
  1223  0713                     	;# 
  1224  0713                     	;# 
  1225  0713                     	;# 
  1226  0714                     	;# 
  1227  0714                     	;# 
  1228  0714                     	;# 
  1229  0715                     	;# 
  1230  0715                     	;# 
  1231  0716                     	;# 
  1232  0716                     	;# 
  1233  0716                     	;# 
  1234  0716                     	;# 
  1235  0717                     	;# 
  1236  0717                     	;# 
  1237  0717                     	;# 
  1238  0717                     	;# 
  1239  0718                     	;# 
  1240  0718                     	;# 
  1241  0718                     	;# 
  1242  0719                     	;# 
  1243  0719                     	;# 
  1244  0719                     	;# 
  1245  0719                     	;# 
  1246  071A                     	;# 
  1247  071A                     	;# 
  1248  071A                     	;# 
  1249  071A                     	;# 
  1250  071A                     	;# 
  1251  071B                     	;# 
  1252  071B                     	;# 
  1253  071C                     	;# 
  1254  071C                     	;# 
  1255  071C                     	;# 
  1256  071C                     	;# 
  1257  071C                     	;# 
  1258  071D                     	;# 
  1259  071D                     	;# 
  1260  071E                     	;# 
  1261  071E                     	;# 
  1262  0791                     	;# 
  1263  0791                     	;# 
  1264  0793                     	;# 
  1265  0793                     	;# 
  1266  0794                     	;# 
  1267  0794                     	;# 
  1268  0796                     	;# 
  1269  0796                     	;# 
  1270  0796                     	;# 
  1271  0797                     	;# 
  1272  0797                     	;# 
  1273  0797                     	;# 
  1274  0798                     	;# 
  1275  0798                     	;# 
  1276  0799                     	;# 
  1277  0799                     	;# 
  1278  0799                     	;# 
  1279  079A                     	;# 
  1280  079A                     	;# 
  1281  079A                     	;# 
  1282  079B                     	;# 
  1283  079C                     	;# 
  1284  079C                     	;# 
  1285  079C                     	;# 
  1286  079D                     	;# 
  1287  079E                     	;# 
  1288  079E                     	;# 
  1289  0F8C                     	;# 
  1290  0F8D                     	;# 
  1291  0F91                     	;# 
  1292  0F96                     	;# 
  1293  0F97                     	;# 
  1294  0F9C                     	;# 
  1295  0F9D                     	;# 
  1296  0F9E                     	;# 
  1297  0FE3                     	;# 
  1298  0FE4                     	;# 
  1299  0FE5                     	;# 
  1300  0FE6                     	;# 
  1301  0FE7                     	;# 
  1302  0FE8                     	;# 
  1303  0FE9                     	;# 
  1304  0FEA                     	;# 
  1305  0FEB                     	;# 
  1306  0FED                     	;# 
  1307  0FEE                     	;# 
  1308  0FEF                     	;# 
  1309  0000                     	;# 
  1310  0001                     	;# 
  1311  0002                     	;# 
  1312  0003                     	;# 
  1313  0004                     	;# 
  1314  0005                     	;# 
  1315  0006                     	;# 
  1316  0007                     	;# 
  1317  0008                     	;# 
  1318  0009                     	;# 
  1319  000A                     	;# 
  1320  000B                     	;# 
  1321  000C                     	;# 
  1322  000D                     	;# 
  1323  000E                     	;# 
  1324  0011                     	;# 
  1325  0012                     	;# 
  1326  0015                     	;# 
  1327  0016                     	;# 
  1328  0016                     	;# 
  1329  0017                     	;# 
  1330  0018                     	;# 
  1331  0019                     	;# 
  1332  001A                     	;# 
  1333  001B                     	;# 
  1334  001C                     	;# 
  1335  008C                     	;# 
  1336  008D                     	;# 
  1337  008E                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0095                     	;# 
  1341  0096                     	;# 
  1342  0097                     	;# 
  1343  0099                     	;# 
  1344  009A                     	;# 
  1345  009B                     	;# 
  1346  009B                     	;# 
  1347  009C                     	;# 
  1348  009D                     	;# 
  1349  009E                     	;# 
  1350  009F                     	;# 
  1351  010C                     	;# 
  1352  010D                     	;# 
  1353  010E                     	;# 
  1354  0116                     	;# 
  1355  0117                     	;# 
  1356  011D                     	;# 
  1357  018C                     	;# 
  1358  018D                     	;# 
  1359  018E                     	;# 
  1360  0191                     	;# 
  1361  0191                     	;# 
  1362  0192                     	;# 
  1363  0193                     	;# 
  1364  0193                     	;# 
  1365  0194                     	;# 
  1366  0195                     	;# 
  1367  0196                     	;# 
  1368  0199                     	;# 
  1369  019A                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019C                     	;# 
  1373  019D                     	;# 
  1374  019E                     	;# 
  1375  019F                     	;# 
  1376  020C                     	;# 
  1377  020D                     	;# 
  1378  0211                     	;# 
  1379  0211                     	;# 
  1380  0212                     	;# 
  1381  0212                     	;# 
  1382  0213                     	;# 
  1383  0213                     	;# 
  1384  0214                     	;# 
  1385  0214                     	;# 
  1386  0215                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0216                     	;# 
  1390  0216                     	;# 
  1391  0217                     	;# 
  1392  0217                     	;# 
  1393  0391                     	;# 
  1394  0392                     	;# 
  1395  0393                     	;# 
  1396  0394                     	;# 
  1397  0395                     	;# 
  1398  0396                     	;# 
  1399  0611                     	;# 
  1400  0612                     	;# 
  1401  0613                     	;# 
  1402  0613                     	;# 
  1403  0614                     	;# 
  1404  0615                     	;# 
  1405  0616                     	;# 
  1406  0616                     	;# 
  1407  0711                     	;# 
  1408  0711                     	;# 
  1409  0711                     	;# 
  1410  0712                     	;# 
  1411  0712                     	;# 
  1412  0713                     	;# 
  1413  0713                     	;# 
  1414  0713                     	;# 
  1415  0714                     	;# 
  1416  0714                     	;# 
  1417  0714                     	;# 
  1418  0715                     	;# 
  1419  0715                     	;# 
  1420  0716                     	;# 
  1421  0716                     	;# 
  1422  0716                     	;# 
  1423  0716                     	;# 
  1424  0717                     	;# 
  1425  0717                     	;# 
  1426  0717                     	;# 
  1427  0717                     	;# 
  1428  0718                     	;# 
  1429  0718                     	;# 
  1430  0718                     	;# 
  1431  0719                     	;# 
  1432  0719                     	;# 
  1433  0719                     	;# 
  1434  0719                     	;# 
  1435  071A                     	;# 
  1436  071A                     	;# 
  1437  071A                     	;# 
  1438  071A                     	;# 
  1439  071A                     	;# 
  1440  071B                     	;# 
  1441  071B                     	;# 
  1442  071C                     	;# 
  1443  071C                     	;# 
  1444  071C                     	;# 
  1445  071C                     	;# 
  1446  071C                     	;# 
  1447  071D                     	;# 
  1448  071D                     	;# 
  1449  071E                     	;# 
  1450  071E                     	;# 
  1451  0791                     	;# 
  1452  0791                     	;# 
  1453  0793                     	;# 
  1454  0793                     	;# 
  1455  0794                     	;# 
  1456  0794                     	;# 
  1457  0796                     	;# 
  1458  0796                     	;# 
  1459  0796                     	;# 
  1460  0797                     	;# 
  1461  0797                     	;# 
  1462  0797                     	;# 
  1463  0798                     	;# 
  1464  0798                     	;# 
  1465  0799                     	;# 
  1466  0799                     	;# 
  1467  0799                     	;# 
  1468  079A                     	;# 
  1469  079A                     	;# 
  1470  079A                     	;# 
  1471  079B                     	;# 
  1472  079C                     	;# 
  1473  079C                     	;# 
  1474  079C                     	;# 
  1475  079D                     	;# 
  1476  079E                     	;# 
  1477  079E                     	;# 
  1478  0F8C                     	;# 
  1479  0F8D                     	;# 
  1480  0F91                     	;# 
  1481  0F96                     	;# 
  1482  0F97                     	;# 
  1483  0F9C                     	;# 
  1484  0F9D                     	;# 
  1485  0F9E                     	;# 
  1486  0FE3                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0011                     	;# 
  1514  0012                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001C                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  009F                     	;# 
  1540  010C                     	;# 
  1541  010D                     	;# 
  1542  010E                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019C                     	;# 
  1562  019D                     	;# 
  1563  019E                     	;# 
  1564  019F                     	;# 
  1565  020C                     	;# 
  1566  020D                     	;# 
  1567  0211                     	;# 
  1568  0211                     	;# 
  1569  0212                     	;# 
  1570  0212                     	;# 
  1571  0213                     	;# 
  1572  0213                     	;# 
  1573  0214                     	;# 
  1574  0214                     	;# 
  1575  0215                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0216                     	;# 
  1579  0216                     	;# 
  1580  0217                     	;# 
  1581  0217                     	;# 
  1582  0391                     	;# 
  1583  0392                     	;# 
  1584  0393                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0611                     	;# 
  1589  0612                     	;# 
  1590  0613                     	;# 
  1591  0613                     	;# 
  1592  0614                     	;# 
  1593  0615                     	;# 
  1594  0616                     	;# 
  1595  0616                     	;# 
  1596  0711                     	;# 
  1597  0711                     	;# 
  1598  0711                     	;# 
  1599  0712                     	;# 
  1600  0712                     	;# 
  1601  0713                     	;# 
  1602  0713                     	;# 
  1603  0713                     	;# 
  1604  0714                     	;# 
  1605  0714                     	;# 
  1606  0714                     	;# 
  1607  0715                     	;# 
  1608  0715                     	;# 
  1609  0716                     	;# 
  1610  0716                     	;# 
  1611  0716                     	;# 
  1612  0716                     	;# 
  1613  0717                     	;# 
  1614  0717                     	;# 
  1615  0717                     	;# 
  1616  0717                     	;# 
  1617  0718                     	;# 
  1618  0718                     	;# 
  1619  0718                     	;# 
  1620  0719                     	;# 
  1621  0719                     	;# 
  1622  0719                     	;# 
  1623  0719                     	;# 
  1624  071A                     	;# 
  1625  071A                     	;# 
  1626  071A                     	;# 
  1627  071A                     	;# 
  1628  071A                     	;# 
  1629  071B                     	;# 
  1630  071B                     	;# 
  1631  071C                     	;# 
  1632  071C                     	;# 
  1633  071C                     	;# 
  1634  071C                     	;# 
  1635  071C                     	;# 
  1636  071D                     	;# 
  1637  071D                     	;# 
  1638  071E                     	;# 
  1639  071E                     	;# 
  1640  0791                     	;# 
  1641  0791                     	;# 
  1642  0793                     	;# 
  1643  0793                     	;# 
  1644  0794                     	;# 
  1645  0794                     	;# 
  1646  0796                     	;# 
  1647  0796                     	;# 
  1648  0796                     	;# 
  1649  0797                     	;# 
  1650  0797                     	;# 
  1651  0797                     	;# 
  1652  0798                     	;# 
  1653  0798                     	;# 
  1654  0799                     	;# 
  1655  0799                     	;# 
  1656  0799                     	;# 
  1657  079A                     	;# 
  1658  079A                     	;# 
  1659  079A                     	;# 
  1660  079B                     	;# 
  1661  079C                     	;# 
  1662  079C                     	;# 
  1663  079C                     	;# 
  1664  079D                     	;# 
  1665  079E                     	;# 
  1666  079E                     	;# 
  1667  0F8C                     	;# 
  1668  0F8D                     	;# 
  1669  0F91                     	;# 
  1670  0F96                     	;# 
  1671  0F97                     	;# 
  1672  0F9C                     	;# 
  1673  0F9D                     	;# 
  1674  0F9E                     	;# 
  1675  0FE3                     	;# 
  1676  0FE4                     	;# 
  1677  0FE5                     	;# 
  1678  0FE6                     	;# 
  1679  0FE7                     	;# 
  1680  0FE8                     	;# 
  1681  0FE9                     	;# 
  1682  0FEA                     	;# 
  1683  0FEB                     	;# 
  1684  0FED                     	;# 
  1685  0FEE                     	;# 
  1686  0FEF                     	;# 
  1687  0000                     	;# 
  1688  0001                     	;# 
  1689  0002                     	;# 
  1690  0003                     	;# 
  1691  0004                     	;# 
  1692  0005                     	;# 
  1693  0006                     	;# 
  1694  0007                     	;# 
  1695  0008                     	;# 
  1696  0009                     	;# 
  1697  000A                     	;# 
  1698  000B                     	;# 
  1699  000C                     	;# 
  1700  000D                     	;# 
  1701  000E                     	;# 
  1702  0011                     	;# 
  1703  0012                     	;# 
  1704  0015                     	;# 
  1705  0016                     	;# 
  1706  0016                     	;# 
  1707  0017                     	;# 
  1708  0018                     	;# 
  1709  0019                     	;# 
  1710  001A                     	;# 
  1711  001B                     	;# 
  1712  001C                     	;# 
  1713  008C                     	;# 
  1714  008D                     	;# 
  1715  008E                     	;# 
  1716  0091                     	;# 
  1717  0092                     	;# 
  1718  0095                     	;# 
  1719  0096                     	;# 
  1720  0097                     	;# 
  1721  0099                     	;# 
  1722  009A                     	;# 
  1723  009B                     	;# 
  1724  009B                     	;# 
  1725  009C                     	;# 
  1726  009D                     	;# 
  1727  009E                     	;# 
  1728  009F                     	;# 
  1729  010C                     	;# 
  1730  010D                     	;# 
  1731  010E                     	;# 
  1732  0116                     	;# 
  1733  0117                     	;# 
  1734  011D                     	;# 
  1735  018C                     	;# 
  1736  018D                     	;# 
  1737  018E                     	;# 
  1738  0191                     	;# 
  1739  0191                     	;# 
  1740  0192                     	;# 
  1741  0193                     	;# 
  1742  0193                     	;# 
  1743  0194                     	;# 
  1744  0195                     	;# 
  1745  0196                     	;# 
  1746  0199                     	;# 
  1747  019A                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019C                     	;# 
  1751  019D                     	;# 
  1752  019E                     	;# 
  1753  019F                     	;# 
  1754  020C                     	;# 
  1755  020D                     	;# 
  1756  0211                     	;# 
  1757  0211                     	;# 
  1758  0212                     	;# 
  1759  0212                     	;# 
  1760  0213                     	;# 
  1761  0213                     	;# 
  1762  0214                     	;# 
  1763  0214                     	;# 
  1764  0215                     	;# 
  1765  0215                     	;# 
  1766  0215                     	;# 
  1767  0216                     	;# 
  1768  0216                     	;# 
  1769  0217                     	;# 
  1770  0217                     	;# 
  1771  0391                     	;# 
  1772  0392                     	;# 
  1773  0393                     	;# 
  1774  0394                     	;# 
  1775  0395                     	;# 
  1776  0396                     	;# 
  1777  0611                     	;# 
  1778  0612                     	;# 
  1779  0613                     	;# 
  1780  0613                     	;# 
  1781  0614                     	;# 
  1782  0615                     	;# 
  1783  0616                     	;# 
  1784  0616                     	;# 
  1785  0711                     	;# 
  1786  0711                     	;# 
  1787  0711                     	;# 
  1788  0712                     	;# 
  1789  0712                     	;# 
  1790  0713                     	;# 
  1791  0713                     	;# 
  1792  0713                     	;# 
  1793  0714                     	;# 
  1794  0714                     	;# 
  1795  0714                     	;# 
  1796  0715                     	;# 
  1797  0715                     	;# 
  1798  0716                     	;# 
  1799  0716                     	;# 
  1800  0716                     	;# 
  1801  0716                     	;# 
  1802  0717                     	;# 
  1803  0717                     	;# 
  1804  0717                     	;# 
  1805  0717                     	;# 
  1806  0718                     	;# 
  1807  0718                     	;# 
  1808  0718                     	;# 
  1809  0719                     	;# 
  1810  0719                     	;# 
  1811  0719                     	;# 
  1812  0719                     	;# 
  1813  071A                     	;# 
  1814  071A                     	;# 
  1815  071A                     	;# 
  1816  071A                     	;# 
  1817  071A                     	;# 
  1818  071B                     	;# 
  1819  071B                     	;# 
  1820  071C                     	;# 
  1821  071C                     	;# 
  1822  071C                     	;# 
  1823  071C                     	;# 
  1824  071C                     	;# 
  1825  071D                     	;# 
  1826  071D                     	;# 
  1827  071E                     	;# 
  1828  071E                     	;# 
  1829  0791                     	;# 
  1830  0791                     	;# 
  1831  0793                     	;# 
  1832  0793                     	;# 
  1833  0794                     	;# 
  1834  0794                     	;# 
  1835  0796                     	;# 
  1836  0796                     	;# 
  1837  0796                     	;# 
  1838  0797                     	;# 
  1839  0797                     	;# 
  1840  0797                     	;# 
  1841  0798                     	;# 
  1842  0798                     	;# 
  1843  0799                     	;# 
  1844  0799                     	;# 
  1845  0799                     	;# 
  1846  079A                     	;# 
  1847  079A                     	;# 
  1848  079A                     	;# 
  1849  079B                     	;# 
  1850  079C                     	;# 
  1851  079C                     	;# 
  1852  079C                     	;# 
  1853  079D                     	;# 
  1854  079E                     	;# 
  1855  079E                     	;# 
  1856  0F8C                     	;# 
  1857  0F8D                     	;# 
  1858  0F91                     	;# 
  1859  0F96                     	;# 
  1860  0F97                     	;# 
  1861  0F9C                     	;# 
  1862  0F9D                     	;# 
  1863  0F9E                     	;# 
  1864  0FE3                     	;# 
  1865  0FE4                     	;# 
  1866  0FE5                     	;# 
  1867  0FE6                     	;# 
  1868  0FE7                     	;# 
  1869  0FE8                     	;# 
  1870  0FE9                     	;# 
  1871  0FEA                     	;# 
  1872  0FEB                     	;# 
  1873  0FED                     	;# 
  1874  0FEE                     	;# 
  1875  0FEF                     	;# 
  1876  0000                     	;# 
  1877  0001                     	;# 
  1878  0002                     	;# 
  1879  0003                     	;# 
  1880  0004                     	;# 
  1881  0005                     	;# 
  1882  0006                     	;# 
  1883  0007                     	;# 
  1884  0008                     	;# 
  1885  0009                     	;# 
  1886  000A                     	;# 
  1887  000B                     	;# 
  1888  000C                     	;# 
  1889  000D                     	;# 
  1890  000E                     	;# 
  1891  0011                     	;# 
  1892  0012                     	;# 
  1893  0015                     	;# 
  1894  0016                     	;# 
  1895  0016                     	;# 
  1896  0017                     	;# 
  1897  0018                     	;# 
  1898  0019                     	;# 
  1899  001A                     	;# 
  1900  001B                     	;# 
  1901  001C                     	;# 
  1902  008C                     	;# 
  1903  008D                     	;# 
  1904  008E                     	;# 
  1905  0091                     	;# 
  1906  0092                     	;# 
  1907  0095                     	;# 
  1908  0096                     	;# 
  1909  0097                     	;# 
  1910  0099                     	;# 
  1911  009A                     	;# 
  1912  009B                     	;# 
  1913  009B                     	;# 
  1914  009C                     	;# 
  1915  009D                     	;# 
  1916  009E                     	;# 
  1917  009F                     	;# 
  1918  010C                     	;# 
  1919  010D                     	;# 
  1920  010E                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  011D                     	;# 
  1924  018C                     	;# 
  1925  018D                     	;# 
  1926  018E                     	;# 
  1927  0191                     	;# 
  1928  0191                     	;# 
  1929  0192                     	;# 
  1930  0193                     	;# 
  1931  0193                     	;# 
  1932  0194                     	;# 
  1933  0195                     	;# 
  1934  0196                     	;# 
  1935  0199                     	;# 
  1936  019A                     	;# 
  1937  019B                     	;# 
  1938  019B                     	;# 
  1939  019C                     	;# 
  1940  019D                     	;# 
  1941  019E                     	;# 
  1942  019F                     	;# 
  1943  020C                     	;# 
  1944  020D                     	;# 
  1945  0211                     	;# 
  1946  0211                     	;# 
  1947  0212                     	;# 
  1948  0212                     	;# 
  1949  0213                     	;# 
  1950  0213                     	;# 
  1951  0214                     	;# 
  1952  0214                     	;# 
  1953  0215                     	;# 
  1954  0215                     	;# 
  1955  0215                     	;# 
  1956  0216                     	;# 
  1957  0216                     	;# 
  1958  0217                     	;# 
  1959  0217                     	;# 
  1960  0391                     	;# 
  1961  0392                     	;# 
  1962  0393                     	;# 
  1963  0394                     	;# 
  1964  0395                     	;# 
  1965  0396                     	;# 
  1966  0611                     	;# 
  1967  0612                     	;# 
  1968  0613                     	;# 
  1969  0613                     	;# 
  1970  0614                     	;# 
  1971  0615                     	;# 
  1972  0616                     	;# 
  1973  0616                     	;# 
  1974  0711                     	;# 
  1975  0711                     	;# 
  1976  0711                     	;# 
  1977  0712                     	;# 
  1978  0712                     	;# 
  1979  0713                     	;# 
  1980  0713                     	;# 
  1981  0713                     	;# 
  1982  0714                     	;# 
  1983  0714                     	;# 
  1984  0714                     	;# 
  1985  0715                     	;# 
  1986  0715                     	;# 
  1987  0716                     	;# 
  1988  0716                     	;# 
  1989  0716                     	;# 
  1990  0716                     	;# 
  1991  0717                     	;# 
  1992  0717                     	;# 
  1993  0717                     	;# 
  1994  0717                     	;# 
  1995  0718                     	;# 
  1996  0718                     	;# 
  1997  0718                     	;# 
  1998  0719                     	;# 
  1999  0719                     	;# 
  2000  0719                     	;# 
  2001  0719                     	;# 
  2002  071A                     	;# 
  2003  071A                     	;# 
  2004  071A                     	;# 
  2005  071A                     	;# 
  2006  071A                     	;# 
  2007  071B                     	;# 
  2008  071B                     	;# 
  2009  071C                     	;# 
  2010  071C                     	;# 
  2011  071C                     	;# 
  2012  071C                     	;# 
  2013  071C                     	;# 
  2014  071D                     	;# 
  2015  071D                     	;# 
  2016  071E                     	;# 
  2017  071E                     	;# 
  2018  0791                     	;# 
  2019  0791                     	;# 
  2020  0793                     	;# 
  2021  0793                     	;# 
  2022  0794                     	;# 
  2023  0794                     	;# 
  2024  0796                     	;# 
  2025  0796                     	;# 
  2026  0796                     	;# 
  2027  0797                     	;# 
  2028  0797                     	;# 
  2029  0797                     	;# 
  2030  0798                     	;# 
  2031  0798                     	;# 
  2032  0799                     	;# 
  2033  0799                     	;# 
  2034  0799                     	;# 
  2035  079A                     	;# 
  2036  079A                     	;# 
  2037  079A                     	;# 
  2038  079B                     	;# 
  2039  079C                     	;# 
  2040  079C                     	;# 
  2041  079C                     	;# 
  2042  079D                     	;# 
  2043  079E                     	;# 
  2044  079E                     	;# 
  2045  0F8C                     	;# 
  2046  0F8D                     	;# 
  2047  0F91                     	;# 
  2048  0F96                     	;# 
  2049  0F97                     	;# 
  2050  0F9C                     	;# 
  2051  0F9D                     	;# 
  2052  0F9E                     	;# 
  2053  0FE3                     	;# 
  2054  0FE4                     	;# 
  2055  0FE5                     	;# 
  2056  0FE6                     	;# 
  2057  0FE7                     	;# 
  2058  0FE8                     	;# 
  2059  0FE9                     	;# 
  2060  0FEA                     	;# 
  2061  0FEB                     	;# 
  2062  0FED                     	;# 
  2063  0FEE                     	;# 
  2064  0FEF                     	;# 
  2065  0000                     	;# 
  2066  0001                     	;# 
  2067  0002                     	;# 
  2068  0003                     	;# 
  2069  0004                     	;# 
  2070  0005                     	;# 
  2071  0006                     	;# 
  2072  0007                     	;# 
  2073  0008                     	;# 
  2074  0009                     	;# 
  2075  000A                     	;# 
  2076  000B                     	;# 
  2077  000C                     	;# 
  2078  000D                     	;# 
  2079  000E                     	;# 
  2080  0011                     	;# 
  2081  0012                     	;# 
  2082  0015                     	;# 
  2083  0016                     	;# 
  2084  0016                     	;# 
  2085  0017                     	;# 
  2086  0018                     	;# 
  2087  0019                     	;# 
  2088  001A                     	;# 
  2089  001B                     	;# 
  2090  001C                     	;# 
  2091  008C                     	;# 
  2092  008D                     	;# 
  2093  008E                     	;# 
  2094  0091                     	;# 
  2095  0092                     	;# 
  2096  0095                     	;# 
  2097  0096                     	;# 
  2098  0097                     	;# 
  2099  0099                     	;# 
  2100  009A                     	;# 
  2101  009B                     	;# 
  2102  009B                     	;# 
  2103  009C                     	;# 
  2104  009D                     	;# 
  2105  009E                     	;# 
  2106  009F                     	;# 
  2107  010C                     	;# 
  2108  010D                     	;# 
  2109  010E                     	;# 
  2110  0116                     	;# 
  2111  0117                     	;# 
  2112  011D                     	;# 
  2113  018C                     	;# 
  2114  018D                     	;# 
  2115  018E                     	;# 
  2116  0191                     	;# 
  2117  0191                     	;# 
  2118  0192                     	;# 
  2119  0193                     	;# 
  2120  0193                     	;# 
  2121  0194                     	;# 
  2122  0195                     	;# 
  2123  0196                     	;# 
  2124  0199                     	;# 
  2125  019A                     	;# 
  2126  019B                     	;# 
  2127  019B                     	;# 
  2128  019C                     	;# 
  2129  019D                     	;# 
  2130  019E                     	;# 
  2131  019F                     	;# 
  2132  020C                     	;# 
  2133  020D                     	;# 
  2134  0211                     	;# 
  2135  0211                     	;# 
  2136  0212                     	;# 
  2137  0212                     	;# 
  2138  0213                     	;# 
  2139  0213                     	;# 
  2140  0214                     	;# 
  2141  0214                     	;# 
  2142  0215                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0216                     	;# 
  2146  0216                     	;# 
  2147  0217                     	;# 
  2148  0217                     	;# 
  2149  0391                     	;# 
  2150  0392                     	;# 
  2151  0393                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0611                     	;# 
  2156  0612                     	;# 
  2157  0613                     	;# 
  2158  0613                     	;# 
  2159  0614                     	;# 
  2160  0615                     	;# 
  2161  0616                     	;# 
  2162  0616                     	;# 
  2163  0711                     	;# 
  2164  0711                     	;# 
  2165  0711                     	;# 
  2166  0712                     	;# 
  2167  0712                     	;# 
  2168  0713                     	;# 
  2169  0713                     	;# 
  2170  0713                     	;# 
  2171  0714                     	;# 
  2172  0714                     	;# 
  2173  0714                     	;# 
  2174  0715                     	;# 
  2175  0715                     	;# 
  2176  0716                     	;# 
  2177  0716                     	;# 
  2178  0716                     	;# 
  2179  0716                     	;# 
  2180  0717                     	;# 
  2181  0717                     	;# 
  2182  0717                     	;# 
  2183  0717                     	;# 
  2184  0718                     	;# 
  2185  0718                     	;# 
  2186  0718                     	;# 
  2187  0719                     	;# 
  2188  0719                     	;# 
  2189  0719                     	;# 
  2190  0719                     	;# 
  2191  071A                     	;# 
  2192  071A                     	;# 
  2193  071A                     	;# 
  2194  071A                     	;# 
  2195  071A                     	;# 
  2196  071B                     	;# 
  2197  071B                     	;# 
  2198  071C                     	;# 
  2199  071C                     	;# 
  2200  071C                     	;# 
  2201  071C                     	;# 
  2202  071C                     	;# 
  2203  071D                     	;# 
  2204  071D                     	;# 
  2205  071E                     	;# 
  2206  071E                     	;# 
  2207  0791                     	;# 
  2208  0791                     	;# 
  2209  0793                     	;# 
  2210  0793                     	;# 
  2211  0794                     	;# 
  2212  0794                     	;# 
  2213  0796                     	;# 
  2214  0796                     	;# 
  2215  0796                     	;# 
  2216  0797                     	;# 
  2217  0797                     	;# 
  2218  0797                     	;# 
  2219  0798                     	;# 
  2220  0798                     	;# 
  2221  0799                     	;# 
  2222  0799                     	;# 
  2223  0799                     	;# 
  2224  079A                     	;# 
  2225  079A                     	;# 
  2226  079A                     	;# 
  2227  079B                     	;# 
  2228  079C                     	;# 
  2229  079C                     	;# 
  2230  079C                     	;# 
  2231  079D                     	;# 
  2232  079E                     	;# 
  2233  079E                     	;# 
  2234  0F8C                     	;# 
  2235  0F8D                     	;# 
  2236  0F91                     	;# 
  2237  0F96                     	;# 
  2238  0F97                     	;# 
  2239  0F9C                     	;# 
  2240  0F9D                     	;# 
  2241  0F9E                     	;# 
  2242  0FE3                     	;# 
  2243  0FE4                     	;# 
  2244  0FE5                     	;# 
  2245  0FE6                     	;# 
  2246  0FE7                     	;# 
  2247  0FE8                     	;# 
  2248  0FE9                     	;# 
  2249  0FEA                     	;# 
  2250  0FEB                     	;# 
  2251  0FED                     	;# 
  2252  0FEE                     	;# 
  2253  0FEF                     	;# 
  2254                           
  2255                           	psect	idataBANK0
  2256  0800                     __pidataBANK0:	
  2257                           
  2258                           ;initializer for _sample_period
  2259  0800  34AE               	retlw	174
  2260                           
  2261                           	psect	idataBANK1
  2262  14CF                     __pidataBANK1:	
  2263                           
  2264                           ;initializer for _Button_StateMachine
  2265  14CF  349B               	retlw	low _Button_State_Initializing
  2266  14D0  3407               	retlw	high _Button_State_Initializing
  2267  14D1  34F7               	retlw	low _Button_State_NotPressed
  2268  14D2  3406               	retlw	high _Button_State_NotPressed
  2269  14D3  34AB               	retlw	low _Button_State_Pressed
  2270  14D4  340B               	retlw	high _Button_State_Pressed
  2271                           
  2272                           ;initializer for _callback_notPressed
  2273  14D5  342A               	retlw	low _Button_DefaultCallback
  2274  14D6  3414               	retlw	high _Button_DefaultCallback
  2275                           
  2276                           ;initializer for _callback_pressed
  2277  14D7  342A               	retlw	low _Button_DefaultCallback
  2278  14D8  3414               	retlw	high _Button_DefaultCallback
  2279                           
  2280                           ;initializer for _callback_sampled
  2281  14D9  342B               	retlw	low _Sensor_DefaultCallback
  2282  14DA  3414               	retlw	high _Sensor_DefaultCallback
  2283                           
  2284                           	psect	idataBANK2
  2285  0801                     __pidataBANK2:	
  2286                           
  2287                           ;initializer for _mtouch_sensor
  2288  0801  3400               	retlw	0
  2289  0802  3469               	retlw	105
  2290  0803  3430               	retlw	48
  2291  0804  3410               	retlw	16
  2292  0805  3420               	retlw	32
  2293  0806  3400               	retlw	0
  2294  0807  3400               	retlw	0
  2295  0808  3400               	retlw	0
  2296  0809  3400               	retlw	0
  2297  080A  3401               	retlw	1
  2298  080B  3431               	retlw	49
  2299  080C  3430               	retlw	48
  2300  080D  3410               	retlw	16
  2301  080E  3420               	retlw	32
  2302  080F  3400               	retlw	0
  2303  0810  3400               	retlw	0
  2304  0811  3400               	retlw	0
  2305  0812  3400               	retlw	0
  2306  0813  3402               	retlw	2
  2307  0814  345D               	retlw	93
  2308  0815  3430               	retlw	48
  2309  0816  3410               	retlw	16
  2310  0817  3420               	retlw	32
  2311  0818  3400               	retlw	0
  2312  0819  3400               	retlw	0
  2313  081A  3400               	retlw	0
  2314  081B  3400               	retlw	0
  2315  081C  3403               	retlw	3
  2316  081D  3435               	retlw	53
  2317  081E  3430               	retlw	48
  2318  081F  3410               	retlw	16
  2319  0820  3420               	retlw	32
  2320  0821  3400               	retlw	0
  2321  0822  3400               	retlw	0
  2322  0823  3400               	retlw	0
  2323  0824  3400               	retlw	0
  2324                           
  2325                           	psect	stringtext1
  2326  1809                     __pstringtext1:	
  2327  1809                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2328  1809  3400               	retlw	0
  2329  180A  340D               	retlw	13
  2330  180B  341C               	retlw	28
  2331  180C  341E               	retlw	30
  2332  180D  3417               	retlw	23
  2333  180E                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2334                           
  2335                           	psect	stringtext2
  2336  185E                     __pstringtext2:	
  2337  185E                     _sensor_scan_group:	
  2338  185E  3429               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2339  185F  3420               	retlw	low (_mtouch_sensor| (0+256))
  2340  1860  343B               	retlw	low ((_mtouch_sensor| (0+256)+27))
  2341  1861  3432               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2342  1862                     __end_of_sensor_scan_group:	
  2343                           
  2344                           	psect	stringtext3
  2345  1000                     __pstringtext3:	
  2346  1000                     _mtouch_button_init:	
  2347  1000  3400               	retlw	0
  2348  1001  3401               	retlw	1
  2349  1002  3400               	retlw	0
  2350  1003  3400               	retlw	0
  2351  1004  3400               	retlw	0
  2352  1005  3400               	retlw	0
  2353  1006  3400               	retlw	0
  2354  1007  3400               	retlw	0
  2355  1008  3400               	retlw	0
  2356  1009  3400               	retlw	0
  2357  100A  3400               	retlw	0
  2358  100B  3400               	retlw	0
  2359  100C  3400               	retlw	0
  2360  100D  3400               	retlw	0
  2361  100E  3464               	retlw	100
  2362  100F  3401               	retlw	1
  2363  1010  3401               	retlw	1
  2364  1011  3400               	retlw	0
  2365  1012  3400               	retlw	0
  2366  1013  3400               	retlw	0
  2367  1014  3400               	retlw	0
  2368  1015  3400               	retlw	0
  2369  1016  3400               	retlw	0
  2370  1017  3400               	retlw	0
  2371  1018  3400               	retlw	0
  2372  1019  3400               	retlw	0
  2373  101A  3400               	retlw	0
  2374  101B  3400               	retlw	0
  2375  101C  3400               	retlw	0
  2376  101D  3400               	retlw	0
  2377  101E  3464               	retlw	100
  2378  101F  3401               	retlw	1
  2379  1020  3402               	retlw	2
  2380  1021  3403               	retlw	3
  2381  1022  3400               	retlw	0
  2382  1023  3400               	retlw	0
  2383  1024  3400               	retlw	0
  2384  1025  3400               	retlw	0
  2385  1026  3400               	retlw	0
  2386  1027  3400               	retlw	0
  2387  1028  3400               	retlw	0
  2388  1029  3400               	retlw	0
  2389  102A  3400               	retlw	0
  2390  102B  3400               	retlw	0
  2391  102C  3400               	retlw	0
  2392  102D  3400               	retlw	0
  2393  102E  3464               	retlw	100
  2394  102F  3401               	retlw	1
  2395  1030  3403               	retlw	3
  2396  1031  3402               	retlw	2
  2397  1032  3400               	retlw	0
  2398  1033  3400               	retlw	0
  2399  1034  3400               	retlw	0
  2400  1035  3400               	retlw	0
  2401  1036  3400               	retlw	0
  2402  1037  3400               	retlw	0
  2403  1038  3400               	retlw	0
  2404  1039  3400               	retlw	0
  2405  103A  3400               	retlw	0
  2406  103B  3400               	retlw	0
  2407  103C  3400               	retlw	0
  2408  103D  3400               	retlw	0
  2409  103E  3464               	retlw	100
  2410  103F  3401               	retlw	1
  2411  1040                     __end_of_mtouch_button_init:	
  2412                           
  2413                           	psect	nvBANK1
  2414  00CA                     __pnvBANK1:	
  2415  00CA                     _EUSART_ErrorHandler:	
  2416  00CA                     	ds	2
  2417  00CC                     _EUSART_OverrunErrorHandler:	
  2418  00CC                     	ds	2
  2419  00CE                     _EUSART_FramingErrorHandler:	
  2420  00CE                     	ds	2
  2421  00D0                     _EUSART_RxDefaultInterruptHandler:	
  2422  00D0                     	ds	2
  2423  0012                     _PIR2bits	set	18
  2424  001C                     _T2CONbits	set	28
  2425  001C                     _T2CON	set	28
  2426  001A                     _TMR2	set	26
  2427  001B                     _PR2	set	27
  2428  000B                     _INTCONbits	set	11
  2429  0011                     _PIR1bits	set	17
  2430  005F                     _GIE	set	95
  2431  0095                     _OPTION_REGbits	set	149
  2432  008E                     _TRISC	set	142
  2433  008D                     _TRISB	set	141
  2434  008C                     _TRISA	set	140
  2435  0097                     _WDTCON	set	151
  2436  0099                     _OSCCON	set	153
  2437  0091                     _PIE1bits	set	145
  2438  010D                     _LATBbits	set	269
  2439  011D                     _APFCONbits	set	285
  2440  010E                     _LATCbits	set	270
  2441  010C                     _LATAbits	set	268
  2442  011D                     _APFCON	set	285
  2443  010E                     _LATC	set	270
  2444  010D                     _LATB	set	269
  2445  010C                     _LATA	set	268
  2446  0116                     _BORCON	set	278
  2447  018C                     _ANSELA	set	396
  2448  018D                     _ANSELB	set	397
  2449  018E                     _ANSELC	set	398
  2450  0199                     _RCREG	set	409
  2451  019D                     _RCSTAbits	set	413
  2452  019A                     _TXREG	set	410
  2453  019E                     _TXSTAbits	set	414
  2454  019C                     _SPBRGH	set	412
  2455  019B                     _SPBRGL	set	411
  2456  019E                     _TXSTA	set	414
  2457  019D                     _RCSTA	set	413
  2458  019F                     _BAUDCON	set	415
  2459  020C                     _WPUA	set	524
  2460  020D                     _WPUB	set	525
  2461  071A                     _AAD1RES0	set	1818
  2462  0711                     _AD1CON0bits	set	1809
  2463  0714                     _AAD1CON3	set	1812
  2464  0713                     _AD1CON2	set	1811
  2465  0717                     _AD1ACQCON	set	1815
  2466  0716                     _AD1PRECON	set	1814
  2467  0718                     _AAD1GRD	set	1816
  2468  0713                     _AAD1CON2	set	1811
  2469  0719                     _AAD1CAP	set	1817
  2470  0714                     _AD1CON3	set	1812
  2471  0712                     _ADCOMCON	set	1810
  2472  0711                     _AD1CON0	set	1809
  2473  079A                     _AAD2RES0	set	1946
  2474  0791                     _AD2CON0bits	set	1937
  2475  0797                     _AD2ACQCON	set	1943
  2476  0796                     _AD2PRECON	set	1942
  2477  0794                     _AAD2CON3	set	1940
  2478  0798                     _AAD2GRD	set	1944
  2479  0793                     _AD2CON2	set	1939
  2480  0794                     _AD2CON3	set	1940
  2481  0791                     _AD2CON0	set	1937
  2482                           
  2483                           	psect	stringtext4
  2484  1800                     __pstringtext4:	
  2485  1800                     STR_1:	
  2486  1800  3450               	retlw	80	;'P'
  2487  1801  3449               	retlw	73	;'I'
  2488  1802  3443               	retlw	67	;'C'
  2489  1803  3453               	retlw	83	;'S'
  2490  1804  344D               	retlw	77	;'M'
  2491  1805  3441               	retlw	65	;'A'
  2492  1806  3452               	retlw	82	;'R'
  2493  1807  3454               	retlw	84	;'T'
  2494  1808  3400               	retlw	0
  2495                           
  2496                           	psect	stringtext5
  2497  180E                     __pstringtext5:	
  2498  180E                     STR_2:	
  2499  180E  3450               	retlw	80	;'P'
  2500  180F  3449               	retlw	73	;'I'
  2501  1810  3443               	retlw	67	;'C'
  2502  1811  3430               	retlw	48	;'0'
  2503  1812  3400               	retlw	0
  2504                           
  2505                           	psect	stringtext6
  2506  1813                     __pstringtext6:	
  2507  1813                     STR_3:	
  2508  1813  3450               	retlw	80	;'P'
  2509  1814  3449               	retlw	73	;'I'
  2510  1815  3443               	retlw	67	;'C'
  2511  1816  3431               	retlw	49	;'1'
  2512  1817  3400               	retlw	0
  2513                           
  2514                           	psect	stringtext7
  2515  1818                     __pstringtext7:	
  2516  1818                     STR_4:	
  2517  1818  3450               	retlw	80	;'P'
  2518  1819  3449               	retlw	73	;'I'
  2519  181A  3443               	retlw	67	;'C'
  2520  181B  3432               	retlw	50	;'2'
  2521  181C  3400               	retlw	0
  2522                           
  2523                           	psect	stringtext8
  2524  181D                     __pstringtext8:	
  2525  181D                     STR_5:	
  2526  181D  3450               	retlw	80	;'P'
  2527  181E  3449               	retlw	73	;'I'
  2528  181F  3443               	retlw	67	;'C'
  2529  1820  3433               	retlw	51	;'3'
  2530  1821  3400               	retlw	0
  2531                           
  2532                           	psect	stringtext9
  2533  1822                     __pstringtext9:	
  2534  1822                     STR_6:	
  2535  1822  3450               	retlw	80	;'P'
  2536  1823  3449               	retlw	73	;'I'
  2537  1824  3443               	retlw	67	;'C'
  2538  1825  3434               	retlw	52	;'4'
  2539  1826  3400               	retlw	0
  2540                           
  2541                           	psect	stringtext10
  2542  1827                     __pstringtext10:	
  2543  1827                     STR_7:	
  2544  1827  3450               	retlw	80	;'P'
  2545  1828  3449               	retlw	73	;'I'
  2546  1829  3443               	retlw	67	;'C'
  2547  182A  3435               	retlw	53	;'5'
  2548  182B  3400               	retlw	0
  2549                           
  2550                           	psect	stringtext11
  2551  182C                     __pstringtext11:	
  2552  182C                     STR_8:	
  2553  182C  3450               	retlw	80	;'P'
  2554  182D  3449               	retlw	73	;'I'
  2555  182E  3443               	retlw	67	;'C'
  2556  182F  3436               	retlw	54	;'6'
  2557  1830  3400               	retlw	0
  2558                           
  2559                           	psect	stringtext12
  2560  1831                     __pstringtext12:	
  2561  1831                     STR_9:	
  2562  1831  3450               	retlw	80	;'P'
  2563  1832  3449               	retlw	73	;'I'
  2564  1833  3443               	retlw	67	;'C'
  2565  1834  3437               	retlw	55	;'7'
  2566  1835  3400               	retlw	0
  2567                           
  2568                           	psect	stringtext13
  2569  1836                     __pstringtext13:	
  2570  1836                     STR_10:	
  2571  1836  3450               	retlw	80	;'P'
  2572  1837  3449               	retlw	73	;'I'
  2573  1838  3443               	retlw	67	;'C'
  2574  1839  3438               	retlw	56	;'8'
  2575  183A  3400               	retlw	0
  2576                           
  2577                           	psect	stringtext14
  2578  183B                     __pstringtext14:	
  2579  183B                     STR_11:	
  2580  183B  3450               	retlw	80	;'P'
  2581  183C  3449               	retlw	73	;'I'
  2582  183D  3443               	retlw	67	;'C'
  2583  183E  3439               	retlw	57	;'9'
  2584  183F  3400               	retlw	0
  2585                           
  2586                           	psect	stringtext15
  2587  1840                     __pstringtext15:	
  2588  1840                     STR_12:	
  2589  1840  3450               	retlw	80	;'P'
  2590  1841  3449               	retlw	73	;'I'
  2591  1842  3443               	retlw	67	;'C'
  2592  1843  3441               	retlw	65	;'A'
  2593  1844  3400               	retlw	0
  2594                           
  2595                           	psect	stringtext16
  2596  1845                     __pstringtext16:	
  2597  1845                     STR_13:	
  2598  1845  3450               	retlw	80	;'P'
  2599  1846  3449               	retlw	73	;'I'
  2600  1847  3443               	retlw	67	;'C'
  2601  1848  3442               	retlw	66	;'B'
  2602  1849  3400               	retlw	0
  2603                           
  2604                           	psect	stringtext17
  2605  184A                     __pstringtext17:	
  2606  184A                     STR_14:	
  2607  184A  3450               	retlw	80	;'P'
  2608  184B  3449               	retlw	73	;'I'
  2609  184C  3443               	retlw	67	;'C'
  2610  184D  3443               	retlw	67	;'C'
  2611  184E  3400               	retlw	0
  2612                           
  2613                           	psect	stringtext18
  2614  184F                     __pstringtext18:	
  2615  184F                     STR_15:	
  2616  184F  3450               	retlw	80	;'P'
  2617  1850  3449               	retlw	73	;'I'
  2618  1851  3443               	retlw	67	;'C'
  2619  1852  3444               	retlw	68	;'D'
  2620  1853  3400               	retlw	0
  2621                           
  2622                           	psect	stringtext19
  2623  1854                     __pstringtext19:	
  2624  1854                     STR_16:	
  2625  1854  3450               	retlw	80	;'P'
  2626  1855  3449               	retlw	73	;'I'
  2627  1856  3443               	retlw	67	;'C'
  2628  1857  3445               	retlw	69	;'E'
  2629  1858  3400               	retlw	0
  2630                           
  2631                           	psect	stringtext20
  2632  1859                     __pstringtext20:	
  2633  1859                     STR_17:	
  2634  1859  3450               	retlw	80	;'P'
  2635  185A  3449               	retlw	73	;'I'
  2636  185B  3443               	retlw	67	;'C'
  2637  185C  3447               	retlw	71	;'G'
  2638  185D  3400               	retlw	0
  2639                           
  2640                           	psect	stringtext21
  2641  1862                     __pstringtext21:	
  2642  1862                     STR_18:	
  2643  1862  3425               	retlw	37	;'%'
  2644  1863  3463               	retlw	99	;'c'
  2645  1864  3400               	retlw	0
  2646                           
  2647                           	psect	stringtext22
  2648  0000                     __pstringtext22:	
  2649                           
  2650                           ; #config settings
  2651  0000                     
  2652                           	psect	cinit
  2653  0018                     start_initialization:	
  2654  0018                     __initialization:	
  2655                           
  2656                           ; Initialize objects allocated to BANK0
  2657  0018  3188  2000  3180   	fcall	__pidataBANK0	;fetch initializer
  2658  001B  00EE               	movwf	__pdataBANK0& (0+127)
  2659                           
  2660                           ; Initialize objects allocated to BANK1
  2661  001C  30CF               	movlw	low __pidataBANK1
  2662  001D  0084               	movwf	4
  2663  001E  3094               	movlw	(high __pidataBANK1)| (0+128)
  2664  001F  0085               	movwf	5
  2665  0020  30BE               	movlw	low __pdataBANK1
  2666  0021  0086               	movwf	6
  2667  0022  3000               	movlw	high __pdataBANK1
  2668  0023  0087               	movwf	7
  2669  0024  300C               	movlw	12
  2670  0025  3194  247A  3180   	fcall	init_ram
  2671                           
  2672                           ; Initialize objects allocated to BANK2
  2673  0028  3001               	movlw	low __pidataBANK2
  2674  0029  0084               	movwf	4
  2675  002A  3088               	movlw	(high __pidataBANK2)| (0+128)
  2676  002B  0085               	movwf	5
  2677  002C  3020               	movlw	low __pdataBANK2
  2678  002D  0086               	movwf	6
  2679  002E  3001               	movlw	high __pdataBANK2
  2680  002F  0087               	movwf	7
  2681  0030  3024               	movlw	36
  2682  0031  3194  247A  3180   	fcall	init_ram
  2683                           
  2684                           ; Clear objects allocated to COMMON
  2685  0034  01FC               	clrf	__pbssCOMMON& (0+127)
  2686                           
  2687                           ; Clear objects allocated to BANK0
  2688  0035  305C               	movlw	low __pbssBANK0
  2689  0036  0084               	movwf	4
  2690  0037  3000               	movlw	high __pbssBANK0
  2691  0038  0085               	movwf	5
  2692  0039  3012               	movlw	18
  2693  003A  3194  2474  3180   	fcall	clear_ram0
  2694                           
  2695                           ; Clear objects allocated to BANK1
  2696  003D  30A0               	movlw	low __pbssBANK1
  2697  003E  0084               	movwf	4
  2698  003F  3000               	movlw	high __pbssBANK1
  2699  0040  0085               	movwf	5
  2700  0041  301E               	movlw	30
  2701  0042  3194  2474  3180   	fcall	clear_ram0
  2702                           
  2703                           ; Clear objects allocated to BANK2
  2704  0045  3044               	movlw	low __pbssBANK2
  2705  0046  0084               	movwf	4
  2706  0047  3001               	movlw	high __pbssBANK2
  2707  0048  0085               	movwf	5
  2708  0049  3020               	movlw	32
  2709  004A  3194  2474  3180   	fcall	clear_ram0
  2710                           
  2711                           ; Clear objects allocated to BANK3
  2712  004D  30A0               	movlw	low __pbssBANK3
  2713  004E  0084               	movwf	4
  2714  004F  3001               	movlw	high __pbssBANK3
  2715  0050  0085               	movwf	5
  2716  0051  3040               	movlw	64
  2717  0052  3194  2474         	fcall	clear_ram0
  2718  0054                     end_of_initialization:	
  2719                           ;End of C runtime variable initialization code
  2720                           
  2721  0054                     __end_of__initialization:	
  2722  0054  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2723  0055  0020               	movlb	0
  2724  0056  3182  2A22         	ljmp	_main	;jump to C main() function
  2725                           
  2726                           	psect	bssCOMMON
  2727  007C                     __pbssCOMMON:	
  2728  007C                     _eusartRxHead:	
  2729  007C                     	ds	1
  2730                           
  2731                           	psect	bssBANK0
  2732  005C                     __pbssBANK0:	
  2733  005C                     _packet_sample:	
  2734  005C                     	ds	4
  2735  0060                     _packet_noise:	
  2736  0060                     	ds	2
  2737  0062                     _last_touch_status:	
  2738  0062                     	ds	2
  2739  0064                     _sensor_globalFlags:	
  2740  0064                     	ds	1
  2741  0065                     _lowpowerActivated:	
  2742  0065                     	ds	1
  2743  0066                     _blink_count:	
  2744  0066                     	ds	1
  2745  0067                     _blink:	
  2746  0067                     	ds	1
  2747  0068                     _check_request:	
  2748  0068                     	ds	1
  2749  0069                     _config_status:	
  2750  0069                     	ds	1
  2751  006A                     _prcData:	
  2752  006A                     	ds	1
  2753  006B                     _rxData:	
  2754  006B                     	ds	1
  2755  006C                     _eusartRxCount:	
  2756  006C                     	ds	1
  2757  006D                     _eusartRxTail:	
  2758  006D                     	ds	1
  2759                           
  2760                           	psect	dataBANK0
  2761  006E                     __pdataBANK0:	
  2762  006E                     _sample_period:	
  2763  006E                     	ds	1
  2764                           
  2765                           	psect	bssBANK1
  2766  00A0                     __pbssBANK1:	
  2767  00A0                     _eusartRxStatusBuffer:	
  2768  00A0                     	ds	8
  2769  00A8                     _eusartRxBuffer:	
  2770  00A8                     	ds	8
  2771  00B0                     _nout:	
  2772  00B0                     	ds	2
  2773  00B2                     _width:	
  2774  00B2                     	ds	2
  2775  00B4                     _prec:	
  2776  00B4                     	ds	2
  2777  00B6                     _flags:	
  2778  00B6                     	ds	2
  2779  00B8                     _timeout_count:	
  2780  00B8                     	ds	2
  2781  00BA                     _count_conf:	
  2782  00BA                     	ds	2
  2783  00BC                     _mtouch_time_toScan:	
  2784  00BC                     	ds	1
  2785  00BD                     _eusartRxLastError:	
  2786  00BD                     	ds	1
  2787                           
  2788                           	psect	dataBANK1
  2789  00BE                     __pdataBANK1:	
  2790  00BE                     _Button_StateMachine:	
  2791  00BE                     	ds	6
  2792  00C4                     _callback_notPressed:	
  2793  00C4                     	ds	2
  2794  00C6                     _callback_pressed:	
  2795  00C6                     	ds	2
  2796  00C8                     _callback_sampled:	
  2797  00C8                     	ds	2
  2798                           
  2799                           	psect	bssBANK2
  2800  0144                     __pbssBANK2:	
  2801  0144                     _dbuf:	
  2802  0144                     	ds	32
  2803                           
  2804                           	psect	dataBANK2
  2805  0120                     __pdataBANK2:	
  2806  0120                     _mtouch_sensor:	
  2807  0120                     	ds	36
  2808                           
  2809                           	psect	bssBANK3
  2810  01A0                     __pbssBANK3:	
  2811  01A0                     _mtouch_button:	
  2812  01A0                     	ds	64
  2813                           
  2814                           	psect	inittext
  2815  147A                     init_ram:	
  2816  147A  00FE               	movwf	126
  2817  147B                     initloop:	
  2818  147B  0012               	moviw fsr0++
  2819  147C  001E               	movwi fsr1++
  2820  147D  0BFE               	decfsz	126,f
  2821  147E  2C7B               	goto	initloop
  2822  147F  3400               	retlw	0
  2823                           
  2824                           	psect	clrtext
  2825  1474                     clear_ram0:	
  2826                           ;	Called with FSR0 containing the base address, and
  2827                           ;	WREG with the size to clear
  2828                           
  2829  1474  0064               	clrwdt	;clear the watchdog before getting into this loop
  2830  1475                     clrloop0:	
  2831  1475  0180               	clrf	0	;clear RAM location pointed to by FSR
  2832  1476  3101               	addfsr 0,1
  2833  1477  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2834  1478  2C75               	goto	clrloop0	;have we reached the end yet?
  2835  1479  3400               	retlw	0	;all done for this memory range, return
  2836                           
  2837                           	psect	cstackBANK1
  2838  00D2                     __pcstackBANK1:	
  2839  00D2                     ??_main:	
  2840                           
  2841                           ; 1 bytes @ 0x0
  2842  00D2                     	ds	2
  2843                           
  2844                           	psect	cstackCOMMON
  2845  0070                     __pcstackCOMMON:	
  2846  0070                     ?_EUSART_Receive_ISR:	
  2847  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ?_EUSART_DefaultErrorHandler:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?_EUSART_RxDataHandler:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ??_EUSART_RxDataHandler:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_PIN_MANAGER_Initialize:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_OSCILLATOR_Initialize:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_WDT_Initialize:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_TMR2_Initialize:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_MTOUCH_Initialize:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_check_data:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_check_message:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_LED_PROCESS:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_DATA_PROCESS:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_MTOUCH_Service_Mainloop:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_MTOUCH_Button_isPressed:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_RELAY_PROCESS:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_update_state:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_MTOUCH_Button_InitializeAll:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_MTOUCH_Button_ServiceAll:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_MTOUCH_needReburst:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_MTOUCH_Tick:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_MTOUCH_Button_Tick:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_MTOUCH_Sensor_Enable:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_Sensor_Sampled_Reset:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_Sensor_Service:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_Sensor_isEnabled:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_Sensor_RawSample_Update:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_Sensor_setSampled:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_Sensor_postAcquisitionProcess:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_Sensor_isActive:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_Sensor_isCalibrated:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_Sensor_setActive:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_Sensor_setInactive:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_Sensor_isCalibratingAcqTime:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_Sensor_autoCalibration:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?_Sensor_setCalibratAcqTime:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_Sensor_setCalibrated:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ?_Button_Service:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     ?_Button_Reading_Update:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     ?_Button_Deviation_Update:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991  0070                     ?_Button_Baseline_Initialize:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0070                     ?_Button_Baseline_Update:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997  0070                     ?_Button_Tick_helper:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000  0070                     ?_Button_Reading_Update_Helper:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003  0070                     ?_EUSART_Initialize:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006  0070                     ?_EUSART_is_rx_ready:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009  0070                     ?_EUSART_Read:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0070                     ?_EUSART_Write:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0070                     ?_putch:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0070                     ?_INTERRUPT_InterruptManager:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0070                     ?_SYSTEM_Initialize:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0070                     ?_main:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0070                     ?_TMR2_StartTimer:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030  0070                     ?_TMR2_StopTimer:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0070                     ?_TMR2_LoadPeriodRegister:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0070                     ?_MTOUCH_Sensor_Initialize:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0070                     ?_Sensor_getScanGroupIndex:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0070                     ?_MTOUCH_Sensor_wasSampled:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0070                     ?_MTOUCH_Button_Initialize:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051                           
  3052                           ; 1 bytes @ 0x0
  3053  0070                     	ds	1
  3054  0071                     ?_EUSART_SetRxInterruptHandler:	
  3055  0071                     ??_EUSART_Receive_ISR:	
  3056                           ; 1 bytes @ 0x1
  3057                           
  3058  0071                     ?_EUSART_SetFramingErrorHandler:	
  3059                           ; 1 bytes @ 0x1
  3060                           
  3061  0071                     ?_EUSART_SetOverrunErrorHandler:	
  3062                           ; 1 bytes @ 0x1
  3063                           
  3064  0071                     ?_EUSART_SetErrorHandler:	
  3065                           ; 1 bytes @ 0x1
  3066                           
  3067  0071                     ??_EUSART_DefaultErrorHandler:	
  3068                           ; 1 bytes @ 0x1
  3069                           
  3070  0071                     ??_PIN_MANAGER_Initialize:	
  3071                           ; 1 bytes @ 0x1
  3072                           
  3073  0071                     ??_OSCILLATOR_Initialize:	
  3074                           ; 1 bytes @ 0x1
  3075                           
  3076  0071                     ??_WDT_Initialize:	
  3077                           ; 1 bytes @ 0x1
  3078                           
  3079  0071                     ??_TMR2_Initialize:	
  3080                           ; 1 bytes @ 0x1
  3081                           
  3082  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  3083                           ; 1 bytes @ 0x1
  3084                           
  3085  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3086                           ; 1 bytes @ 0x1
  3087                           
  3088  0071                     ??_check_data:	
  3089                           ; 1 bytes @ 0x1
  3090                           
  3091  0071                     ??_LED_PROCESS:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094  0071                     ??_MTOUCH_Button_isPressed:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0071                     ??_RELAY_PROCESS:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103  0071                     ??_MTOUCH_needReburst:	
  3104                           ; 1 bytes @ 0x1
  3105                           
  3106  0071                     ?_Sensor_DefaultCallback:	
  3107                           ; 1 bytes @ 0x1
  3108                           
  3109  0071                     ??_Sensor_Sampled_Reset:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0071                     ??_Sensor_isEnabled:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0071                     ??_Sensor_setSampled:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0071                     ??_Sensor_isActive:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0071                     ??_Sensor_isCalibrated:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0071                     ??_Sensor_setActive:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0071                     ??_Sensor_setInactive:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0071                     ??_Sensor_isCalibratingAcqTime:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133  0071                     ??_Sensor_setCalibratAcqTime:	
  3134                           ; 1 bytes @ 0x1
  3135                           
  3136  0071                     ??_Sensor_setCalibrated:	
  3137                           ; 1 bytes @ 0x1
  3138                           
  3139  0071                     ?_memcpy:	
  3140                           ; 1 bytes @ 0x1
  3141                           
  3142  0071                     ??_Button_Deviation_Update:	
  3143                           ; 1 bytes @ 0x1
  3144                           
  3145  0071                     ??_Button_Baseline_Update:	
  3146                           ; 1 bytes @ 0x1
  3147                           
  3148  0071                     ??_Button_Tick_helper:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0071                     ??_EUSART_is_rx_ready:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154  0071                     ??_EUSART_Read:	
  3155                           ; 1 bytes @ 0x1
  3156                           
  3157  0071                     ??_EUSART_Write:	
  3158                           ; 1 bytes @ 0x1
  3159                           
  3160  0071                     ??_INTERRUPT_InterruptManager:	
  3161                           ; 1 bytes @ 0x1
  3162                           
  3163  0071                     ??_TMR2_StartTimer:	
  3164                           ; 1 bytes @ 0x1
  3165                           
  3166  0071                     ??_TMR2_StopTimer:	
  3167                           ; 1 bytes @ 0x1
  3168                           
  3169  0071                     ??_TMR2_LoadPeriodRegister:	
  3170                           ; 1 bytes @ 0x1
  3171                           
  3172  0071                     ??_Sensor_getScanGroupIndex:	
  3173                           ; 1 bytes @ 0x1
  3174                           
  3175  0071                     ?___bmul:	
  3176                           ; 1 bytes @ 0x1
  3177                           
  3178  0071                     ?_abs:	
  3179                           ; 1 bytes @ 0x1
  3180                           
  3181  0071                     ?_strlen:	
  3182                           ; 2 bytes @ 0x1
  3183                           
  3184  0071                     EUSART_Write@txData:	
  3185                           ; 2 bytes @ 0x1
  3186                           
  3187  0071                     TMR2_LoadPeriodRegister@periodVal:	
  3188                           ; 1 bytes @ 0x1
  3189                           
  3190  0071                     Sensor_DefaultCallback@sensor:	
  3191                           ; 1 bytes @ 0x1
  3192                           
  3193  0071                     Sensor_setActive@sensor:	
  3194                           ; 1 bytes @ 0x1
  3195                           
  3196  0071                     Sensor_setInactive@sensor:	
  3197                           ; 1 bytes @ 0x1
  3198                           
  3199  0071                     Sensor_isActive@sensor:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0071                     Sensor_isCalibrated@sensor:	
  3203                           ; 1 bytes @ 0x1
  3204                           
  3205  0071                     Sensor_setCalibrated@sensor:	
  3206                           ; 1 bytes @ 0x1
  3207                           
  3208  0071                     Sensor_setCalibratAcqTime@sensor:	
  3209                           ; 1 bytes @ 0x1
  3210                           
  3211  0071                     Sensor_isCalibratingAcqTime@sensor:	
  3212                           ; 1 bytes @ 0x1
  3213                           
  3214  0071                     Sensor_Sampled_Reset@sensor:	
  3215                           ; 1 bytes @ 0x1
  3216                           
  3217  0071                     Sensor_setSampled@sensor:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220  0071                     ___bmul@multiplicand:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3224                           ; 1 bytes @ 0x1
  3225                           
  3226  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3227                           ; 2 bytes @ 0x1
  3228                           
  3229  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3230                           ; 2 bytes @ 0x1
  3231                           
  3232  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3233                           ; 2 bytes @ 0x1
  3234                           
  3235  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  3236                           ; 2 bytes @ 0x1
  3237                           
  3238  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3239                           ; 2 bytes @ 0x1
  3240                           
  3241  0071                     abs@a:	
  3242                           ; 2 bytes @ 0x1
  3243                           
  3244  0071                     memcpy@s1:	
  3245                           ; 2 bytes @ 0x1
  3246                           
  3247                           
  3248                           ; 2 bytes @ 0x1
  3249  0071                     	ds	1
  3250  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3251  0072                     ??_Sensor_DefaultCallback:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254  0072                     ??_putch:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257  0072                     ?_Sensor_loadADCSettings:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260  0072                     ??___bmul:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263  0072                     EUSART_Read@readValue:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266  0072                     putch@txData:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269  0072                     Sensor_loadADCSettings@adc_index:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272  0072                     Sensor_isEnabled@sensor:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275  0072                     MTOUCH_Button_isPressed@name:	
  3276                           ; 1 bytes @ 0x2
  3277                           
  3278                           
  3279                           ; 1 bytes @ 0x2
  3280  0072                     	ds	1
  3281  0073                     ??_EUSART_SetRxInterruptHandler:	
  3282  0073                     ??_EUSART_SetFramingErrorHandler:	
  3283                           ; 1 bytes @ 0x3
  3284                           
  3285  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3286                           ; 1 bytes @ 0x3
  3287                           
  3288  0073                     ??_EUSART_SetErrorHandler:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0073                     ??_abs:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0073                     ??_strlen:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0073                     ??_EUSART_Initialize:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0073                     ??_Sensor_loadADCSettings:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0073                     ?_fputc:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0073                     check_data@x:	
  3313                           ; 2 bytes @ 0x3
  3314                           
  3315  0073                     LED_PROCESS@x:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318  0073                     Sensor_getScanGroupIndex@sensor:	
  3319                           ; 1 bytes @ 0x3
  3320                           
  3321  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0073                     Button_Tick_helper@button:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0073                     RELAY_PROCESS@x:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0073                     ___bmul@product:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0073                     memcpy@n:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336  0073                     fputc@c:	
  3337                           ; 2 bytes @ 0x3
  3338                           
  3339                           
  3340                           ; 2 bytes @ 0x3
  3341  0073                     	ds	1
  3342  0074                     ??_myButtonPressedCallback:	
  3343  0074                     ??_MTOUCH_Button_Tick:	
  3344                           ; 1 bytes @ 0x4
  3345                           
  3346  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3347                           ; 1 bytes @ 0x4
  3348                           
  3349  0074                     ___bmul@multiplier:	
  3350                           ; 1 bytes @ 0x4
  3351                           
  3352  0074                     strlen@a:	
  3353                           ; 1 bytes @ 0x4
  3354                           
  3355                           
  3356                           ; 1 bytes @ 0x4
  3357  0074                     	ds	1
  3358  0075                     ??_MTOUCH_Sensor_Enable:	
  3359  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3360                           ; 1 bytes @ 0x5
  3361                           
  3362  0075                     ??_Sensor_RawSample_Update:	
  3363                           ; 1 bytes @ 0x5
  3364                           
  3365  0075                     ??_Sensor_postAcquisitionProcess:	
  3366                           ; 1 bytes @ 0x5
  3367                           
  3368  0075                     ??_Sensor_autoCalibration:	
  3369                           ; 1 bytes @ 0x5
  3370                           
  3371  0075                     ??_memcpy:	
  3372                           ; 1 bytes @ 0x5
  3373                           
  3374  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3375                           ; 1 bytes @ 0x5
  3376                           
  3377  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3378                           ; 1 bytes @ 0x5
  3379                           
  3380  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3381                           ; 1 bytes @ 0x5
  3382                           
  3383  0075                     MTOUCH_Button_Tick@i:	
  3384                           ; 2 bytes @ 0x5
  3385                           
  3386  0075                     fputc@fp:	
  3387                           ; 1 bytes @ 0x5
  3388                           
  3389  0075                     strlen@s:	
  3390                           ; 1 bytes @ 0x5
  3391                           
  3392                           
  3393                           ; 1 bytes @ 0x5
  3394  0075                     	ds	1
  3395  0076                     ??_MTOUCH_Tick:	
  3396  0076                     ??_fputc:	
  3397                           ; 1 bytes @ 0x6
  3398                           
  3399  0076                     Sensor_RawSample_Update@adcIndex:	
  3400                           ; 1 bytes @ 0x6
  3401                           
  3402  0076                     MTOUCH_Sensor_Enable@sensor:	
  3403                           ; 1 bytes @ 0x6
  3404                           
  3405  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3406                           ; 1 bytes @ 0x6
  3407                           
  3408  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3409                           ; 1 bytes @ 0x6
  3410                           
  3411  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3412                           ; 1 bytes @ 0x6
  3413                           
  3414  0076                     memcpy@tmp:	
  3415                           ; 1 bytes @ 0x6
  3416                           
  3417  0076                     Sensor_postAcquisitionProcess@deviation:	
  3418                           ; 1 bytes @ 0x6
  3419                           
  3420  0076                     _Sensor_loadADCSettings$1228:	
  3421                           ; 2 bytes @ 0x6
  3422                           
  3423                           
  3424                           ; 2 bytes @ 0x6
  3425  0076                     	ds	1
  3426  0077                     ??_MTOUCH_Sensor_Initialize:	
  3427  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3428                           ; 1 bytes @ 0x7
  3429                           
  3430  0077                     ??_MTOUCH_Button_Initialize:	
  3431                           ; 1 bytes @ 0x7
  3432                           
  3433  0077                     Sensor_RawSample_Update@sensor:	
  3434                           ; 1 bytes @ 0x7
  3435                           
  3436  0077                     Button_Baseline_Update@button:	
  3437                           ; 1 bytes @ 0x7
  3438                           
  3439  0077                     memcpy@s:	
  3440                           ; 1 bytes @ 0x7
  3441                           
  3442                           
  3443                           ; 2 bytes @ 0x7
  3444  0077                     	ds	1
  3445  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3446  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3447                           ; 1 bytes @ 0x8
  3448                           
  3449  0078                     Sensor_loadADCSettings@addressOffset:	
  3450                           ; 1 bytes @ 0x8
  3451                           
  3452  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3453                           ; 1 bytes @ 0x8
  3454                           
  3455                           
  3456                           ; 1 bytes @ 0x8
  3457  0078                     	ds	1
  3458  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3459  0079                     ??_Button_Reading_Update_Helper:	
  3460                           ; 1 bytes @ 0x9
  3461                           
  3462  0079                     Sensor_postAcquisitionProcess@sensor:	
  3463                           ; 1 bytes @ 0x9
  3464                           
  3465  0079                     Sensor_loadADCSettings@sensor:	
  3466                           ; 1 bytes @ 0x9
  3467                           
  3468  0079                     Sensor_autoCalibration@adcIndex:	
  3469                           ; 1 bytes @ 0x9
  3470                           
  3471  0079                     MTOUCH_Button_Initialize@name:	
  3472                           ; 1 bytes @ 0x9
  3473                           
  3474  0079                     Button_Baseline_Initialize@button:	
  3475                           ; 1 bytes @ 0x9
  3476                           
  3477  0079                     memcpy@d1:	
  3478                           ; 1 bytes @ 0x9
  3479                           
  3480                           
  3481                           ; 1 bytes @ 0x9
  3482  0079                     	ds	1
  3483  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3484  007A                     Sensor_autoCalibration@sensor:	
  3485                           ; 1 bytes @ 0xA
  3486                           
  3487  007A                     MTOUCH_Button_Initialize@button:	
  3488                           ; 1 bytes @ 0xA
  3489                           
  3490  007A                     memcpy@d:	
  3491                           ; 1 bytes @ 0xA
  3492                           
  3493                           
  3494                           ; 1 bytes @ 0xA
  3495  007A                     	ds	1
  3496  007B                     ??_MTOUCH_Button_InitializeAll:	
  3497  007B                     ?_Sensor_Acq_ExecutePacket:	
  3498                           ; 1 bytes @ 0xB
  3499                           
  3500  007B                     ?_fputs:	
  3501                           ; 1 bytes @ 0xB
  3502                           
  3503  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3504                           ; 2 bytes @ 0xB
  3505                           
  3506  007B                     Button_Reading_Update_Helper@button:	
  3507                           ; 1 bytes @ 0xB
  3508                           
  3509  007B                     fputs@fp:	
  3510                           ; 1 bytes @ 0xB
  3511                           
  3512                           
  3513                           ; 1 bytes @ 0xB
  3514  007B                     	ds	1
  3515  007C                     ??_MTOUCH_Initialize:	
  3516  007C                     ??_myButtonReleasedCallback:	
  3517                           ; 1 bytes @ 0xC
  3518                           
  3519  007C                     ??_update_state:	
  3520                           ; 1 bytes @ 0xC
  3521                           
  3522  007C                     ??_Button_DefaultCallback:	
  3523                           ; 1 bytes @ 0xC
  3524                           
  3525  007C                     ??_Button_Reading_Update:	
  3526                           ; 1 bytes @ 0xC
  3527                           
  3528  007C                     ??_SYSTEM_Initialize:	
  3529                           ; 1 bytes @ 0xC
  3530                           
  3531                           
  3532                           	psect	cstackBANK0
  3533  0020                     __pcstackBANK0:	
  3534                           ; 1 bytes @ 0xC
  3535                           
  3536  0020                     ??_Sensor_Acq_ExecutePacket:	
  3537  0020                     ??_Button_Baseline_Initialize:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540  0020                     ??_fputs:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0020                     MTOUCH_Button_InitializeAll@button:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0020                     Button_Deviation_Update@button:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549  0020                     Button_Reading_Update@button:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552                           
  3553                           ; 1 bytes @ 0x0
  3554  0020                     	ds	1
  3555  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3556  0021                     Button_Deviation_Update@deviation:	
  3557                           ; 1 bytes @ 0x1
  3558                           
  3559                           
  3560                           ; 4 bytes @ 0x1
  3561  0021                     	ds	1
  3562  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3563                           
  3564                           ; 1 bytes @ 0x2
  3565  0022                     	ds	1
  3566  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3567  0023                     fputs@c:	
  3568                           ; 1 bytes @ 0x3
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0x3
  3572  0023                     	ds	1
  3573  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3574  0024                     fputs@i:	
  3575                           ; 1 bytes @ 0x4
  3576                           
  3577                           
  3578                           ; 2 bytes @ 0x4
  3579  0024                     	ds	1
  3580  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3581                           
  3582                           ; 1 bytes @ 0x5
  3583  0025                     	ds	1
  3584  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3585  0026                     fputs@s:	
  3586                           ; 1 bytes @ 0x6
  3587                           
  3588                           
  3589                           ; 1 bytes @ 0x6
  3590  0026                     	ds	1
  3591  0027                     ?_pad:	
  3592  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3593                           ; 2 bytes @ 0x7
  3594                           
  3595  0027                     pad@buf:	
  3596                           ; 1 bytes @ 0x7
  3597                           
  3598                           
  3599                           ; 1 bytes @ 0x7
  3600  0027                     	ds	1
  3601  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3602  0028                     pad@p:	
  3603                           ; 2 bytes @ 0x8
  3604                           
  3605                           
  3606                           ; 2 bytes @ 0x8
  3607  0028                     	ds	2
  3608  002A                     ??_pad:	
  3609  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3610                           ; 1 bytes @ 0xA
  3611                           
  3612                           
  3613                           ; 2 bytes @ 0xA
  3614  002A                     	ds	1
  3615  002B                     pad@i:	
  3616                           
  3617                           ; 2 bytes @ 0xB
  3618  002B                     	ds	1
  3619  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3620                           
  3621                           ; 1 bytes @ 0xC
  3622  002C                     	ds	1
  3623  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3624  002D                     pad@w:	
  3625                           ; 1 bytes @ 0xD
  3626                           
  3627                           
  3628                           ; 2 bytes @ 0xD
  3629  002D                     	ds	1
  3630  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3631  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3632                           ; 1 bytes @ 0xE
  3633                           
  3634                           
  3635                           ; 1 bytes @ 0xE
  3636  002E                     	ds	1
  3637  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3638  002F                     pad@fp:	
  3639                           ; 1 bytes @ 0xF
  3640                           
  3641                           
  3642                           ; 1 bytes @ 0xF
  3643  002F                     	ds	1
  3644  0030                     ?_ctoa:	
  3645  0030                     ctoa@c:	
  3646                           ; 2 bytes @ 0x10
  3647                           
  3648                           
  3649                           ; 1 bytes @ 0x10
  3650  0030                     	ds	1
  3651  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3652                           
  3653                           ; 1 bytes @ 0x11
  3654  0031                     	ds	1
  3655  0032                     ??_ctoa:	
  3656  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3657                           ; 1 bytes @ 0x12
  3658                           
  3659                           
  3660                           ; 2 bytes @ 0x12
  3661  0032                     	ds	1
  3662  0033                     ctoa@w:	
  3663                           
  3664                           ; 2 bytes @ 0x13
  3665  0033                     	ds	1
  3666  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3667                           
  3668                           ; 1 bytes @ 0x14
  3669  0034                     	ds	1
  3670  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3671  0035                     ctoa@fp:	
  3672                           ; 1 bytes @ 0x15
  3673                           
  3674                           
  3675                           ; 1 bytes @ 0x15
  3676  0035                     	ds	1
  3677  0036                     ?_vfpfcnvrt:	
  3678  0036                     vfpfcnvrt@fmt:	
  3679                           ; 2 bytes @ 0x16
  3680                           
  3681  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3682                           ; 1 bytes @ 0x16
  3683                           
  3684                           
  3685                           ; 4 bytes @ 0x16
  3686  0036                     	ds	1
  3687  0037                     vfpfcnvrt@ap:	
  3688                           
  3689                           ; 1 bytes @ 0x17
  3690  0037                     	ds	1
  3691  0038                     ??_vfpfcnvrt:	
  3692                           
  3693                           ; 1 bytes @ 0x18
  3694  0038                     	ds	2
  3695  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3696                           
  3697                           ; 1 bytes @ 0x1A
  3698  003A                     	ds	1
  3699  003B                     ?_Sensor_Acquisition:	
  3700  003B                     Sensor_Acquisition@sensor_adc2:	
  3701                           ; 1 bytes @ 0x1B
  3702                           
  3703                           
  3704                           ; 1 bytes @ 0x1B
  3705  003B                     	ds	1
  3706  003C                     ??_Sensor_Acquisition:	
  3707                           
  3708                           ; 1 bytes @ 0x1C
  3709  003C                     	ds	1
  3710  003D                     Sensor_Acquisition@retry:	
  3711  003D                     vfpfcnvrt@c:	
  3712                           ; 1 bytes @ 0x1D
  3713                           
  3714                           
  3715                           ; 1 bytes @ 0x1D
  3716  003D                     	ds	1
  3717  003E                     Sensor_Acquisition@sensor_adc1:	
  3718  003E                     vfpfcnvrt@fp:	
  3719                           ; 1 bytes @ 0x1E
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x1E
  3723  003E                     	ds	1
  3724  003F                     ??_Sensor_Service:	
  3725  003F                     ?_vfprintf:	
  3726                           ; 1 bytes @ 0x1F
  3727                           
  3728  003F                     vfprintf@fmt:	
  3729                           ; 2 bytes @ 0x1F
  3730                           
  3731                           
  3732                           ; 2 bytes @ 0x1F
  3733  003F                     	ds	2
  3734  0041                     vfprintf@ap:	
  3735                           
  3736                           ; 1 bytes @ 0x21
  3737  0041                     	ds	1
  3738  0042                     ??_vfprintf:	
  3739  0042                     Sensor_Service@scanGroup:	
  3740                           ; 1 bytes @ 0x22
  3741                           
  3742                           
  3743                           ; 1 bytes @ 0x22
  3744  0042                     	ds	1
  3745  0043                     Sensor_Service@error:	
  3746                           
  3747                           ; 1 bytes @ 0x23
  3748  0043                     	ds	1
  3749  0044                     Sensor_Service@sensor_adc1:	
  3750  0044                     vfprintf@fp:	
  3751                           ; 1 bytes @ 0x24
  3752                           
  3753                           
  3754                           ; 1 bytes @ 0x24
  3755  0044                     	ds	1
  3756  0045                     Sensor_Service@sensor_adc2:	
  3757  0045                     vfprintf@cfmt:	
  3758                           ; 1 bytes @ 0x25
  3759                           
  3760                           
  3761                           ; 2 bytes @ 0x25
  3762  0045                     	ds	1
  3763  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3764                           
  3765                           ; 1 bytes @ 0x26
  3766  0046                     	ds	1
  3767  0047                     ?_printf:	
  3768  0047                     MTOUCH_Sensor_SampleAll@group:	
  3769                           ; 2 bytes @ 0x27
  3770                           
  3771  0047                     printf@fmt:	
  3772                           ; 1 bytes @ 0x27
  3773                           
  3774                           
  3775                           ; 2 bytes @ 0x27
  3776  0047                     	ds	4
  3777  004B                     ??_printf:	
  3778                           
  3779                           ; 1 bytes @ 0x2B
  3780  004B                     	ds	3
  3781  004E                     printf@ap:	
  3782                           
  3783                           ; 1 bytes @ 0x2E
  3784  004E                     	ds	1
  3785  004F                     ?_myButtonPressedCallback:	
  3786  004F                     ?_myButtonReleasedCallback:	
  3787                           ; 1 bytes @ 0x2F
  3788                           
  3789  004F                     ??_check_message:	
  3790                           ; 1 bytes @ 0x2F
  3791                           
  3792  004F                     ??_DATA_PROCESS:	
  3793                           ; 1 bytes @ 0x2F
  3794                           
  3795  004F                     ?_Button_DefaultCallback:	
  3796                           ; 1 bytes @ 0x2F
  3797                           
  3798  004F                     myButtonPressedCallback@button:	
  3799                           ; 1 bytes @ 0x2F
  3800                           
  3801  004F                     myButtonReleasedCallback@button:	
  3802                           ; 1 bytes @ 0x2F
  3803                           
  3804  004F                     Button_DefaultCallback@button:	
  3805                           ; 1 bytes @ 0x2F
  3806                           
  3807                           
  3808                           ; 1 bytes @ 0x2F
  3809  004F                     	ds	1
  3810  0050                     ?_Button_State_Initializing:	
  3811  0050                     ?_Button_State_NotPressed:	
  3812                           ; 1 bytes @ 0x30
  3813                           
  3814  0050                     ?_Button_State_Pressed:	
  3815                           ; 1 bytes @ 0x30
  3816                           
  3817  0050                     Button_State_Initializing@button:	
  3818                           ; 1 bytes @ 0x30
  3819                           
  3820  0050                     Button_State_NotPressed@button:	
  3821                           ; 1 bytes @ 0x30
  3822                           
  3823  0050                     Button_State_Pressed@button:	
  3824                           ; 1 bytes @ 0x30
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0x30
  3828  0050                     	ds	1
  3829  0051                     ??_Button_State_Initializing:	
  3830  0051                     ??_Button_State_NotPressed:	
  3831                           ; 1 bytes @ 0x31
  3832                           
  3833  0051                     ??_Button_State_Pressed:	
  3834                           ; 1 bytes @ 0x31
  3835                           
  3836  0051                     DATA_PROCESS@x:	
  3837                           ; 1 bytes @ 0x31
  3838                           
  3839  0051                     check_message@x:	
  3840                           ; 1 bytes @ 0x31
  3841                           
  3842                           
  3843                           ; 1 bytes @ 0x31
  3844  0051                     	ds	4
  3845  0055                     ??_Button_Service:	
  3846                           
  3847                           ; 1 bytes @ 0x35
  3848  0055                     	ds	2
  3849  0057                     Button_Service@name:	
  3850                           
  3851                           ; 1 bytes @ 0x37
  3852  0057                     	ds	1
  3853  0058                     Button_Service@button:	
  3854                           
  3855                           ; 1 bytes @ 0x38
  3856  0058                     	ds	1
  3857  0059                     ??_MTOUCH_Button_ServiceAll:	
  3858                           
  3859                           ; 1 bytes @ 0x39
  3860  0059                     	ds	1
  3861  005A                     MTOUCH_Button_ServiceAll@button:	
  3862                           
  3863                           ; 1 bytes @ 0x3A
  3864  005A                     	ds	1
  3865  005B                     ??_MTOUCH_Service_Mainloop:	
  3866                           
  3867                           ; 1 bytes @ 0x3B
  3868  005B                     	ds	1
  3869                           
  3870                           	psect	maintext
  3871  0222                     __pmaintext:	
  3872 ;;
  3873 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3874 ;;
  3875 ;; *************** function _main *****************
  3876 ;; Defined at:
  3877 ;;		line 17 in file "main.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : B1F/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3891 ;;      Params:         0       0       0       0       0       0       0       0
  3892 ;;      Locals:         0       0       0       0       0       0       0       0
  3893 ;;      Temps:          0       0       2       0       0       0       0       0
  3894 ;;      Totals:         0       0       2       0       0       0       0       0
  3895 ;;Total ram usage:        2 bytes
  3896 ;; Hardware stack levels required when called:   19
  3897 ;; This function calls:
  3898 ;;		_DATA_PROCESS
  3899 ;;		_EUSART_Read
  3900 ;;		_EUSART_is_rx_ready
  3901 ;;		_LED_PROCESS
  3902 ;;		_MTOUCH_Button_SetNotPressedCallback
  3903 ;;		_MTOUCH_Button_SetPressedCallback
  3904 ;;		_MTOUCH_Button_isPressed
  3905 ;;		_MTOUCH_Service_Mainloop
  3906 ;;		_SYSTEM_Initialize
  3907 ;;		_check_data
  3908 ;;		_check_message
  3909 ;;		_printf
  3910 ;; This function is called by:
  3911 ;;		Startup code after reset
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           
  3916                           ;psect for function _main
  3917  0222                     _main:	
  3918                           
  3919                           ;main.c: 19:     SYSTEM_Initialize();
  3920                           
  3921                           ;incstack = 0
  3922 ;; hardware stack exceeded
  3923                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3924  0222  3195  25A8  3182   	fcall	_SYSTEM_Initialize
  3925                           
  3926                           ;main.c: 20:     (INTCONbits.GIE = 1);
  3927  0225  178B               	bsf	11,7	;volatile
  3928                           
  3929                           ;main.c: 21:     (INTCONbits.PEIE = 1);
  3930  0226  170B               	bsf	11,6	;volatile
  3931                           
  3932                           ;main.c: 22:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3933  0227  3080               	movlw	low _myButtonPressedCallback
  3934  0228  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3935  0229  3008               	movlw	high _myButtonPressedCallback
  3936  022A  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3937  022B  3194  2450  3182   	fcall	_MTOUCH_Button_SetPressedCallback
  3938                           
  3939                           ;main.c: 23:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3940  022E  30F3               	movlw	low _myButtonReleasedCallback
  3941  022F  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3942  0230  3016               	movlw	high _myButtonReleasedCallback
  3943  0231  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3944  0232  3194  244A  3182   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3945  0235  0022               	movlb	2	; select bank2
  3946  0236  110C               	bcf	12,2	;volatile
  3947                           
  3948                           ;main.c: 25:     last_touch_status.full_status = 0x00;
  3949  0237  0020               	movlb	0	; select bank0
  3950  0238  01E2               	clrf	_last_touch_status
  3951  0239  01E3               	clrf	_last_touch_status+1
  3952  023A                     l6700:	
  3953                           
  3954                           ;main.c: 27:     {;main.c: 28:         if(EUSART_is_rx_ready())
  3955  023A  3194  242F  3182   	fcall	_EUSART_is_rx_ready
  3956  023D  3A00               	xorlw	0
  3957  023E  1903               	skipnz
  3958  023F  2B2A               	goto	l6762
  3959                           
  3960                           ;main.c: 29:         {;main.c: 30:             rxData = EUSART_Read();
  3961  0240  3197  2738  3182   	fcall	_EUSART_Read
  3962  0243  0021               	movlb	1	; select bank1
  3963  0244  00D2               	movwf	??_main^(0+128)
  3964  0245  0852               	movf	??_main^(0+128),w
  3965  0246  0020               	movlb	0	; select bank0
  3966  0247  00EB               	movwf	_rxData
  3967                           
  3968                           ;main.c: 31:             if(check_data(rxData))
  3969  0248  086B               	movf	_rxData,w
  3970  0249  318A  2213  3182   	fcall	_check_data
  3971  024C  3A00               	xorlw	0
  3972  024D  1903               	skipnz
  3973  024E  2B2A               	goto	l6762
  3974                           
  3975                           ;main.c: 32:             {;main.c: 33:                 if(check_request == 0)
  3976  024F  0020               	movlb	0	; select bank0
  3977  0250  0868               	movf	_check_request,w
  3978  0251  1D03               	btfss	3,2
  3979  0252  2A5E               	goto	l6712
  3980                           
  3981                           ;main.c: 34:                 {;main.c: 35:                     prcData = rxData;
  3982  0253  086B               	movf	_rxData,w
  3983  0254  0021               	movlb	1	; select bank1
  3984  0255  00D2               	movwf	??_main^(0+128)
  3985  0256  0852               	movf	??_main^(0+128),w
  3986  0257  0020               	movlb	0	; select bank0
  3987  0258  00EA               	movwf	_prcData
  3988                           
  3989                           ;main.c: 36:                     check_message(rxData);
  3990  0259  086B               	movf	_rxData,w
  3991  025A  3197  2786  3182   	fcall	_check_message
  3992                           
  3993                           ;main.c: 37:                 }
  3994  025D  2B2A               	goto	l6762
  3995  025E                     l6712:	
  3996                           
  3997                           ;main.c: 39:                 {;main.c: 40:                     if(config_status == 1)
  3998  025E  0369               	decf	_config_status,w
  3999  025F  1D03               	btfss	3,2
  4000  0260  2B1D               	goto	l6754
  4001                           
  4002                           ;main.c: 41:                     {;main.c: 42:                         if(rxData == 'T')
  4003  0261  3054               	movlw	84
  4004  0262  066B               	xorwf	_rxData,w
  4005  0263  1D03               	btfss	3,2
  4006  0264  2ABE               	goto	l6734
  4007                           
  4008                           ;main.c: 43:                         {;main.c: 44:                             LED_PROCE
      +                          SS(15);
  4009  0265  300F               	movlw	15
  4010  0266  318E  26C6  3182   	fcall	_LED_PROCESS
  4011                           
  4012                           ;main.c: 45:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4013  0269  3015               	movlw	21
  4014  026A  0021               	movlb	1	; select bank1
  4015  026B  00D3               	movwf	(??_main^(0+128)+1)
  4016  026C  304B               	movlw	75
  4017  026D  00D2               	movwf	??_main^(0+128)
  4018  026E  30BE               	movlw	190
  4019  026F                     u5517:	
  4020  026F  0B89               	decfsz	9,f
  4021  0270  2A6F               	goto	u5517
  4022  0271  0BD2               	decfsz	??_main^(0+128),f
  4023  0272  2A6F               	goto	u5517
  4024  0273  0BD3               	decfsz	(??_main^(0+128)+1),f
  4025  0274  2A6F               	goto	u5517
  4026  0275  0000               	nop
  4027                           
  4028                           ;main.c: 46:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4029  0276  3015               	movlw	21
  4030  0277  0021               	movlb	1	; select bank1
  4031  0278  00D3               	movwf	(??_main^(0+128)+1)
  4032  0279  304B               	movlw	75
  4033  027A  00D2               	movwf	??_main^(0+128)
  4034  027B  30BE               	movlw	190
  4035  027C                     u5527:	
  4036  027C  0B89               	decfsz	9,f
  4037  027D  2A7C               	goto	u5527
  4038  027E  0BD2               	decfsz	??_main^(0+128),f
  4039  027F  2A7C               	goto	u5527
  4040  0280  0BD3               	decfsz	(??_main^(0+128)+1),f
  4041  0281  2A7C               	goto	u5527
  4042  0282  0000               	nop
  4043                           
  4044                           ;main.c: 47:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4045  0283  3015               	movlw	21
  4046  0284  0021               	movlb	1	; select bank1
  4047  0285  00D3               	movwf	(??_main^(0+128)+1)
  4048  0286  304B               	movlw	75
  4049  0287  00D2               	movwf	??_main^(0+128)
  4050  0288  30BE               	movlw	190
  4051  0289                     u5537:	
  4052  0289  0B89               	decfsz	9,f
  4053  028A  2A89               	goto	u5537
  4054  028B  0BD2               	decfsz	??_main^(0+128),f
  4055  028C  2A89               	goto	u5537
  4056  028D  0BD3               	decfsz	(??_main^(0+128)+1),f
  4057  028E  2A89               	goto	u5537
  4058  028F  0000               	nop
  4059                           
  4060                           ;main.c: 48:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4061  0290  3015               	movlw	21
  4062  0291  0021               	movlb	1	; select bank1
  4063  0292  00D3               	movwf	(??_main^(0+128)+1)
  4064  0293  304B               	movlw	75
  4065  0294  00D2               	movwf	??_main^(0+128)
  4066  0295  30BE               	movlw	190
  4067  0296                     u5547:	
  4068  0296  0B89               	decfsz	9,f
  4069  0297  2A96               	goto	u5547
  4070  0298  0BD2               	decfsz	??_main^(0+128),f
  4071  0299  2A96               	goto	u5547
  4072  029A  0BD3               	decfsz	(??_main^(0+128)+1),f
  4073  029B  2A96               	goto	u5547
  4074  029C  0000               	nop
  4075                           
  4076                           ;main.c: 49:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4077  029D  3015               	movlw	21
  4078  029E  0021               	movlb	1	; select bank1
  4079  029F  00D3               	movwf	(??_main^(0+128)+1)
  4080  02A0  304B               	movlw	75
  4081  02A1  00D2               	movwf	??_main^(0+128)
  4082  02A2  30BE               	movlw	190
  4083  02A3                     u5557:	
  4084  02A3  0B89               	decfsz	9,f
  4085  02A4  2AA3               	goto	u5557
  4086  02A5  0BD2               	decfsz	??_main^(0+128),f
  4087  02A6  2AA3               	goto	u5557
  4088  02A7  0BD3               	decfsz	(??_main^(0+128)+1),f
  4089  02A8  2AA3               	goto	u5557
  4090  02A9  0000               	nop
  4091                           
  4092                           ;main.c: 50:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4093  02AA  3015               	movlw	21
  4094  02AB  0021               	movlb	1	; select bank1
  4095  02AC  00D3               	movwf	(??_main^(0+128)+1)
  4096  02AD  304B               	movlw	75
  4097  02AE  00D2               	movwf	??_main^(0+128)
  4098  02AF  30BE               	movlw	190
  4099  02B0                     u5567:	
  4100  02B0  0B89               	decfsz	9,f
  4101  02B1  2AB0               	goto	u5567
  4102  02B2  0BD2               	decfsz	??_main^(0+128),f
  4103  02B3  2AB0               	goto	u5567
  4104  02B4  0BD3               	decfsz	(??_main^(0+128)+1),f
  4105  02B5  2AB0               	goto	u5567
  4106  02B6  0000               	nop
  4107                           
  4108                           ;main.c: 51:                             config_status = 0;
  4109  02B7  0020               	movlb	0	; select bank0
  4110  02B8  01E9               	clrf	_config_status
  4111                           
  4112                           ;main.c: 52:                             check_request = 0;
  4113  02B9  01E8               	clrf	_check_request
  4114                           
  4115                           ;main.c: 53:                             LED_PROCESS(last_touch_status.full_status);
  4116  02BA  0862               	movf	_last_touch_status,w
  4117  02BB  318E  26C6  3182   	fcall	_LED_PROCESS
  4118  02BE                     l6734:	
  4119                           
  4120                           ;main.c: 55:                         if(rxData == 'F')
  4121  02BE  3046               	movlw	70
  4122  02BF  0020               	movlb	0	; select bank0
  4123  02C0  066B               	xorwf	_rxData,w
  4124  02C1  1D03               	btfss	3,2
  4125  02C2  2B2A               	goto	l6762
  4126                           
  4127                           ;main.c: 56:                         {;main.c: 57:                             LED_PROCE
      +                          SS(0);
  4128  02C3  3000               	movlw	0
  4129  02C4  318E  26C6  3182   	fcall	_LED_PROCESS
  4130                           
  4131                           ;main.c: 58:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4132  02C7  3015               	movlw	21
  4133  02C8  0021               	movlb	1	; select bank1
  4134  02C9  00D3               	movwf	(??_main^(0+128)+1)
  4135  02CA  304B               	movlw	75
  4136  02CB  00D2               	movwf	??_main^(0+128)
  4137  02CC  30BE               	movlw	190
  4138  02CD                     u5577:	
  4139  02CD  0B89               	decfsz	9,f
  4140  02CE  2ACD               	goto	u5577
  4141  02CF  0BD2               	decfsz	??_main^(0+128),f
  4142  02D0  2ACD               	goto	u5577
  4143  02D1  0BD3               	decfsz	(??_main^(0+128)+1),f
  4144  02D2  2ACD               	goto	u5577
  4145  02D3  0000               	nop
  4146                           
  4147                           ;main.c: 59:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4148  02D4  3015               	movlw	21
  4149  02D5  0021               	movlb	1	; select bank1
  4150  02D6  00D3               	movwf	(??_main^(0+128)+1)
  4151  02D7  304B               	movlw	75
  4152  02D8  00D2               	movwf	??_main^(0+128)
  4153  02D9  30BE               	movlw	190
  4154  02DA                     u5587:	
  4155  02DA  0B89               	decfsz	9,f
  4156  02DB  2ADA               	goto	u5587
  4157  02DC  0BD2               	decfsz	??_main^(0+128),f
  4158  02DD  2ADA               	goto	u5587
  4159  02DE  0BD3               	decfsz	(??_main^(0+128)+1),f
  4160  02DF  2ADA               	goto	u5587
  4161  02E0  0000               	nop
  4162                           
  4163                           ;main.c: 60:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4164  02E1  3015               	movlw	21
  4165  02E2  0021               	movlb	1	; select bank1
  4166  02E3  00D3               	movwf	(??_main^(0+128)+1)
  4167  02E4  304B               	movlw	75
  4168  02E5  00D2               	movwf	??_main^(0+128)
  4169  02E6  30BE               	movlw	190
  4170  02E7                     u5597:	
  4171  02E7  0B89               	decfsz	9,f
  4172  02E8  2AE7               	goto	u5597
  4173  02E9  0BD2               	decfsz	??_main^(0+128),f
  4174  02EA  2AE7               	goto	u5597
  4175  02EB  0BD3               	decfsz	(??_main^(0+128)+1),f
  4176  02EC  2AE7               	goto	u5597
  4177  02ED  0000               	nop
  4178                           
  4179                           ;main.c: 61:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4180  02EE  3015               	movlw	21
  4181  02EF  0021               	movlb	1	; select bank1
  4182  02F0  00D3               	movwf	(??_main^(0+128)+1)
  4183  02F1  304B               	movlw	75
  4184  02F2  00D2               	movwf	??_main^(0+128)
  4185  02F3  30BE               	movlw	190
  4186  02F4                     u5607:	
  4187  02F4  0B89               	decfsz	9,f
  4188  02F5  2AF4               	goto	u5607
  4189  02F6  0BD2               	decfsz	??_main^(0+128),f
  4190  02F7  2AF4               	goto	u5607
  4191  02F8  0BD3               	decfsz	(??_main^(0+128)+1),f
  4192  02F9  2AF4               	goto	u5607
  4193  02FA  0000               	nop
  4194                           
  4195                           ;main.c: 62:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4196  02FB  3015               	movlw	21
  4197  02FC  0021               	movlb	1	; select bank1
  4198  02FD  00D3               	movwf	(??_main^(0+128)+1)
  4199  02FE  304B               	movlw	75
  4200  02FF  00D2               	movwf	??_main^(0+128)
  4201  0300  30BE               	movlw	190
  4202  0301                     u5617:	
  4203  0301  0B89               	decfsz	9,f
  4204  0302  2B01               	goto	u5617
  4205  0303  0BD2               	decfsz	??_main^(0+128),f
  4206  0304  2B01               	goto	u5617
  4207  0305  0BD3               	decfsz	(??_main^(0+128)+1),f
  4208  0306  2B01               	goto	u5617
  4209  0307  0000               	nop
  4210                           
  4211                           ;main.c: 63:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4212  0308  3015               	movlw	21
  4213  0309  0021               	movlb	1	; select bank1
  4214  030A  00D3               	movwf	(??_main^(0+128)+1)
  4215  030B  304B               	movlw	75
  4216  030C  00D2               	movwf	??_main^(0+128)
  4217  030D  30BE               	movlw	190
  4218  030E                     u5627:	
  4219  030E  0B89               	decfsz	9,f
  4220  030F  2B0E               	goto	u5627
  4221  0310  0BD2               	decfsz	??_main^(0+128),f
  4222  0311  2B0E               	goto	u5627
  4223  0312  0BD3               	decfsz	(??_main^(0+128)+1),f
  4224  0313  2B0E               	goto	u5627
  4225  0314  0000               	nop
  4226                           
  4227                           ;main.c: 64:                             config_status = 0;
  4228  0315  0020               	movlb	0	; select bank0
  4229  0316  01E9               	clrf	_config_status
  4230                           
  4231                           ;main.c: 65:                             check_request = 0;
  4232  0317  01E8               	clrf	_check_request
  4233                           
  4234                           ;main.c: 66:                             LED_PROCESS(last_touch_status.full_status);
  4235  0318  0862               	movf	_last_touch_status,w
  4236  0319  318E  26C6  3182   	fcall	_LED_PROCESS
  4237  031C  2B2A               	goto	l6762
  4238  031D                     l6754:	
  4239                           
  4240                           ;main.c: 70:                     {;main.c: 71:                         if(rxData == 'T')
  4241  031D  3054               	movlw	84
  4242  031E  066B               	xorwf	_rxData,w
  4243  031F  1D03               	btfss	3,2
  4244  0320  2B25               	goto	l6758
  4245                           
  4246                           ;main.c: 72:                         {;main.c: 73:                             DATA_PROC
      +                          ESS(prcData);
  4247  0321  086A               	movf	_prcData,w
  4248  0322  3183  23D1  3182   	fcall	_DATA_PROCESS
  4249  0325                     l6758:	
  4250                           
  4251                           ;main.c: 75:                         if(rxData == 'F')
  4252  0325  3046               	movlw	70
  4253  0326  0020               	movlb	0	; select bank0
  4254  0327  066B               	xorwf	_rxData,w
  4255  0328  1903               	btfsc	3,2
  4256                           
  4257                           ;main.c: 76:                         {;main.c: 77:                             check_req
      +                          uest = 0;
  4258  0329  01E8               	clrf	_check_request
  4259  032A                     l6762:	
  4260                           ;main.c: 81:             }
  4261                           
  4262                           
  4263                           ;main.c: 83:         if(MTOUCH_Service_Mainloop())
  4264  032A  3196  26B9  3182   	fcall	_MTOUCH_Service_Mainloop
  4265  032D  3A00               	xorlw	0
  4266  032E  1903               	skipnz
  4267  032F  2A3A               	goto	l6700
  4268                           
  4269                           ;main.c: 84:         {;main.c: 85:             if(config_status == 0)
  4270  0330  0020               	movlb	0	; select bank0
  4271  0331  0869               	movf	_config_status,w
  4272  0332  1D03               	btfss	3,2
  4273  0333  2B89               	goto	l6802
  4274                           
  4275                           ;main.c: 86:             {;main.c: 87:                 if(check_request == 1)
  4276  0334  0368               	decf	_check_request,w
  4277  0335  1D03               	btfss	3,2
  4278  0336  2B45               	goto	l6774
  4279                           
  4280                           ;main.c: 88:                 {;main.c: 89:                     timeout_count++;
  4281  0337  3001               	movlw	1
  4282  0338  0021               	movlb	1	; select bank1
  4283  0339  07B8               	addwf	_timeout_count^(0+128),f
  4284  033A  3000               	movlw	0
  4285  033B  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4286                           
  4287                           ;main.c: 90:                     if(timeout_count == 20)
  4288  033C  3014               	movlw	20
  4289  033D  0638               	xorwf	_timeout_count^(0+128),w
  4290  033E  0439               	iorwf	(_timeout_count+1)^(0+128),w
  4291  033F  1D03               	btfss	3,2
  4292  0340  2B45               	goto	l6774
  4293                           
  4294                           ;main.c: 91:                     {;main.c: 92:                         timeout_count = 0
      +                          ;
  4295  0341  01B8               	clrf	_timeout_count^(0+128)
  4296  0342  01B9               	clrf	(_timeout_count+1)^(0+128)
  4297                           
  4298                           ;main.c: 93:                         check_request = 0;
  4299  0343  0020               	movlb	0	; select bank0
  4300  0344  01E8               	clrf	_check_request
  4301  0345                     l6774:	
  4302                           
  4303                           ;main.c: 96:                 if(MTOUCH_Button_isPressed(0) == 1 && MTOUCH_Button_isPress
      +                          ed(1) == 0 && MTOUCH_Button_isPressed(2) == 0&& MTOUCH_Button_isPressed(3) == 1)
  4304  0345  3000               	movlw	0
  4305  0346  3196  2682  3182   	fcall	_MTOUCH_Button_isPressed
  4306  0349  3A01               	xorlw	1
  4307  034A  1D03               	skipz
  4308  034B  2B85               	goto	l6800
  4309  034C  3001               	movlw	1
  4310  034D  3196  2682  3182   	fcall	_MTOUCH_Button_isPressed
  4311  0350  3A00               	xorlw	0
  4312  0351  1D03               	skipz
  4313  0352  2B85               	goto	l6800
  4314  0353  3002               	movlw	2
  4315  0354  3196  2682  3182   	fcall	_MTOUCH_Button_isPressed
  4316  0357  3A00               	xorlw	0
  4317  0358  1D03               	skipz
  4318  0359  2B85               	goto	l6800
  4319  035A  3003               	movlw	3
  4320  035B  3196  2682  3182   	fcall	_MTOUCH_Button_isPressed
  4321  035E  3A01               	xorlw	1
  4322  035F  1D03               	skipz
  4323  0360  2B85               	goto	l6800
  4324                           
  4325                           ;main.c: 97:                 {;main.c: 98:                     count_conf++;
  4326  0361  3001               	movlw	1
  4327  0362  0021               	movlb	1	; select bank1
  4328  0363  07BA               	addwf	_count_conf^(0+128),f
  4329  0364  3000               	movlw	0
  4330  0365  3DBB               	addwfc	(_count_conf+1)^(0+128),f
  4331                           
  4332                           ;main.c: 99:                     if(count_conf == 1500)
  4333  0366  30DC               	movlw	220
  4334  0367  063A               	xorwf	_count_conf^(0+128),w
  4335  0368  3005               	movlw	5
  4336  0369  1903               	skipnz
  4337  036A  063B               	xorwf	(_count_conf+1)^(0+128),w
  4338  036B  1D03               	btfss	3,2
  4339  036C  2A3A               	goto	l6700
  4340                           
  4341                           ;main.c: 100:                     {;main.c: 101:                         count_conf = 0;
  4342  036D  01BA               	clrf	_count_conf^(0+128)
  4343  036E  01BB               	clrf	(_count_conf+1)^(0+128)
  4344                           
  4345                           ;main.c: 102:                         printf("PICSMART");
  4346  036F  3000               	movlw	low (STR_1| (0+32768))
  4347  0370  0020               	movlb	0	; select bank0
  4348  0371  00C7               	movwf	printf@fmt
  4349  0372  3098               	movlw	high (STR_1| (0+32768))
  4350  0373  00C8               	movwf	printf@fmt+1
  4351  0374  3195  2551  3182   	fcall	_printf
  4352                           
  4353                           ;main.c: 103:                         config_status = 1;
  4354  0377  0020               	movlb	0	; select bank0
  4355  0378  01E9               	clrf	_config_status
  4356  0379  0AE9               	incf	_config_status,f
  4357                           
  4358                           ;main.c: 104:                         check_request = 1;
  4359  037A  01E8               	clrf	_check_request
  4360  037B  0AE8               	incf	_check_request,f
  4361                           
  4362                           ;main.c: 105:                         timeout_count = 0;
  4363  037C  0021               	movlb	1	; select bank1
  4364  037D  01B8               	clrf	_timeout_count^(0+128)
  4365  037E  01B9               	clrf	(_timeout_count+1)^(0+128)
  4366                           
  4367                           ;main.c: 106:                         LED_PROCESS(0);
  4368  037F  3000               	movlw	0
  4369  0380  318E  26C6  3182   	fcall	_LED_PROCESS
  4370                           
  4371                           ;main.c: 107:                         blink = 0;
  4372  0383  0020               	movlb	0	; select bank0
  4373  0384  2BCF               	goto	L1
  4374  0385                     l6800:	
  4375                           
  4376                           ;main.c: 111:                 {;main.c: 112:                     count_conf = 0;
  4377  0385  0021               	movlb	1	; select bank1
  4378  0386  01BA               	clrf	_count_conf^(0+128)
  4379  0387  01BB               	clrf	(_count_conf+1)^(0+128)
  4380  0388  2A3A               	goto	l6700
  4381  0389                     l6802:	
  4382                           
  4383                           ;main.c: 116:             {;main.c: 117:                 if(check_request == 1)
  4384  0389  0368               	decf	_check_request,w
  4385  038A  1D03               	btfss	3,2
  4386  038B  2BAF               	goto	l6818
  4387                           
  4388                           ;main.c: 118:                 {;main.c: 119:                     timeout_count++;
  4389  038C  3001               	movlw	1
  4390  038D  0021               	movlb	1	; select bank1
  4391  038E  07B8               	addwf	_timeout_count^(0+128),f
  4392  038F  3000               	movlw	0
  4393  0390  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4394                           
  4395                           ;main.c: 120:                     if(timeout_count > 30000)
  4396  0391  3075               	movlw	117
  4397  0392  0239               	subwf	(_timeout_count+1)^(0+128),w
  4398  0393  3031               	movlw	49
  4399  0394  1903               	skipnz
  4400  0395  0238               	subwf	_timeout_count^(0+128),w
  4401  0396  1C03               	skipc
  4402  0397  2BAF               	goto	l6818
  4403                           
  4404                           ;main.c: 121:                     {;main.c: 123:                         LED_PROCESS(0);
  4405  0398  3000               	movlw	0
  4406  0399  318E  26C6  3182   	fcall	_LED_PROCESS
  4407                           
  4408                           ;main.c: 124:                         timeout_count++;
  4409  039C  3001               	movlw	1
  4410  039D  0021               	movlb	1	; select bank1
  4411  039E  07B8               	addwf	_timeout_count^(0+128),f
  4412  039F  3000               	movlw	0
  4413  03A0  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4414                           
  4415                           ;main.c: 125:                         if(timeout_count == 32000)
  4416  03A1  307D               	movlw	125
  4417  03A2  0639               	xorwf	(_timeout_count+1)^(0+128),w
  4418  03A3  0438               	iorwf	_timeout_count^(0+128),w
  4419  03A4  1D03               	btfss	3,2
  4420  03A5  2BAF               	goto	l6818
  4421                           
  4422                           ;main.c: 126:                         {;main.c: 127:                             timeout
      +                          _count = 0;
  4423  03A6  01B8               	clrf	_timeout_count^(0+128)
  4424  03A7  01B9               	clrf	(_timeout_count+1)^(0+128)
  4425                           
  4426                           ;main.c: 128:                             LED_PROCESS(last_touch_status.full_status);
  4427  03A8  0020               	movlb	0	; select bank0
  4428  03A9  0862               	movf	_last_touch_status,w
  4429  03AA  318E  26C6  3182   	fcall	_LED_PROCESS
  4430                           
  4431                           ;main.c: 129:                             check_request = 0;
  4432  03AD  0020               	movlb	0	; select bank0
  4433  03AE  01E8               	clrf	_check_request
  4434  03AF                     l6818:	
  4435                           
  4436                           ;main.c: 134:                 blink_count++;
  4437  03AF  3001               	movlw	1
  4438  03B0  0021               	movlb	1	; select bank1
  4439  03B1  00D2               	movwf	??_main^(0+128)
  4440  03B2  0852               	movf	??_main^(0+128),w
  4441  03B3  0020               	movlb	0	; select bank0
  4442  03B4  07E6               	addwf	_blink_count,f
  4443                           
  4444                           ;main.c: 135:                 if(blink == 0)
  4445  03B5  0867               	movf	_blink,w
  4446  03B6  1D03               	btfss	3,2
  4447  03B7  2BC5               	goto	l6830
  4448                           
  4449                           ;main.c: 136:                 {;main.c: 137:                     LED_PROCESS(0);
  4450  03B8  3000               	movlw	0
  4451  03B9  318E  26C6  3182   	fcall	_LED_PROCESS
  4452                           
  4453                           ;main.c: 138:                     if(blink_count == 200)
  4454  03BC  30C8               	movlw	200
  4455  03BD  0020               	movlb	0	; select bank0
  4456  03BE  0666               	xorwf	_blink_count,w
  4457  03BF  1D03               	btfss	3,2
  4458  03C0  2A3A               	goto	l6700
  4459                           
  4460                           ;main.c: 139:                     {;main.c: 140:                         blink_count = 0
      +                          ;
  4461  03C1  01E6               	clrf	_blink_count
  4462                           
  4463                           ;main.c: 141:                         blink = 1;
  4464  03C2  01E7               	clrf	_blink
  4465  03C3  0AE7               	incf	_blink,f
  4466  03C4  2A3A               	goto	l6700
  4467  03C5                     l6830:	
  4468                           
  4469                           ;main.c: 145:                 {;main.c: 146:                     LED_PROCESS(15);
  4470  03C5  300F               	movlw	15
  4471  03C6  318E  26C6  3182   	fcall	_LED_PROCESS
  4472                           
  4473                           ;main.c: 147:                     if(blink_count == 200)
  4474  03C9  30C8               	movlw	200
  4475  03CA  0020               	movlb	0	; select bank0
  4476  03CB  0666               	xorwf	_blink_count,w
  4477  03CC  1D03               	btfss	3,2
  4478  03CD  2A3A               	goto	l6700
  4479                           
  4480                           ;main.c: 148:                     {;main.c: 149:                         blink_count = 0
      +                          ;
  4481  03CE  01E6               	clrf	_blink_count
  4482  03CF                     L1:	
  4483                           
  4484                           ;main.c: 150:                         blink = 0;
  4485  03CF  01E7               	clrf	_blink
  4486                           
  4487                           ;main.c: 154:         }
  4488  03D0  2A3A               	goto	l6700
  4489  03D1                     __end_of_main:	
  4490                           
  4491                           	psect	text1
  4492  1786                     __ptext1:	
  4493 ;; *************** function _check_message *****************
  4494 ;; Defined at:
  4495 ;;		line 350 in file "main.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  x               1    wreg     unsigned char 
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;  x               1   49[BANK0 ] unsigned char 
  4500 ;; Return value:  Size  Location     Type
  4501 ;;                  1    wreg      void 
  4502 ;; Registers used:
  4503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4509 ;;      Params:         0       0       0       0       0       0       0       0
  4510 ;;      Locals:         0       1       0       0       0       0       0       0
  4511 ;;      Temps:          0       2       0       0       0       0       0       0
  4512 ;;      Totals:         0       3       0       0       0       0       0       0
  4513 ;;Total ram usage:        3 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; Hardware stack levels required when called:   13
  4516 ;; This function calls:
  4517 ;;		_printf
  4518 ;; This function is called by:
  4519 ;;		_main
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _check_message
  4525  1786                     _check_message:	
  4526                           
  4527                           ;incstack = 0
  4528                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4529                           ;check_message@x stored from wreg
  4530  1786  0020               	movlb	0	; select bank0
  4531  1787  00D1               	movwf	check_message@x
  4532                           
  4533                           ;main.c: 350: void check_message(uint8_t x);main.c: 351: {;main.c: 352:     switch (x)
  4534  1788  2F9C               	goto	l6522
  4535  1789                     l6512:	
  4536                           
  4537                           ;main.c: 355:         {;main.c: 356:             check_request = 0;
  4538  1789  01E8               	clrf	_check_request
  4539                           
  4540                           ;main.c: 357:             break;
  4541  178A  0008               	return
  4542  178B                     l6516:	
  4543                           
  4544                           ;main.c: 365:         {;main.c: 366:             printf("%c",x);
  4545  178B  3062               	movlw	low (STR_18| (0+32768))
  4546  178C  00C7               	movwf	printf@fmt
  4547  178D  3098               	movlw	high (STR_18| (0+32768))
  4548  178E  00C8               	movwf	printf@fmt+1
  4549  178F  0851               	movf	check_message@x,w
  4550  1790  00CF               	movwf	??_check_message
  4551  1791  01D0               	clrf	??_check_message+1
  4552  1792  084F               	movf	??_check_message,w
  4553  1793  00C9               	movwf	?_printf+2
  4554  1794  0850               	movf	??_check_message+1,w
  4555  1795  00CA               	movwf	?_printf+3
  4556  1796  3195  2551         	fcall	_printf
  4557                           
  4558                           ;main.c: 367:             check_request = 1;
  4559  1798  0020               	movlb	0	; select bank0
  4560  1799  01E8               	clrf	_check_request
  4561  179A  0AE8               	incf	_check_request,f
  4562                           
  4563                           ;main.c: 368:             break;
  4564  179B  0008               	return
  4565  179C                     l6522:	
  4566  179C  0851               	movf	check_message@x,w
  4567  179D  00CF               	movwf	??_check_message
  4568  179E  01D0               	clrf	??_check_message+1
  4569                           
  4570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4571                           ; Switch size 1, requested type "simple"
  4572                           ; Number of cases is 1, Range of values is 0 to 0
  4573                           ; switch strategies available:
  4574                           ; Name         Instructions Cycles
  4575                           ; simple_byte            4     3 (average)
  4576                           ; direct_byte            8     6 (fixed)
  4577                           ; jumptable            260     6 (fixed)
  4578                           ;	Chosen strategy is simple_byte
  4579  179F  0850               	movf	??_check_message+1,w
  4580  17A0  3A00               	xorlw	0	; case 0
  4581  17A1  1903               	skipnz
  4582  17A2  2FA4               	goto	l7090
  4583  17A3  2F8B               	goto	l6516
  4584  17A4                     l7090:	
  4585                           
  4586                           ; Switch size 1, requested type "simple"
  4587                           ; Number of cases is 2, Range of values is 70 to 84
  4588                           ; switch strategies available:
  4589                           ; Name         Instructions Cycles
  4590                           ; simple_byte            7     4 (average)
  4591                           ; direct_byte           39     9 (fixed)
  4592                           ; jumptable            263     9 (fixed)
  4593                           ;	Chosen strategy is simple_byte
  4594  17A4  084F               	movf	??_check_message,w
  4595  17A5  3A46               	xorlw	70	; case 70
  4596  17A6  1903               	skipnz
  4597  17A7  2F89               	goto	l6512
  4598  17A8  3A12               	xorlw	18	; case 84
  4599  17A9  1903               	skipnz
  4600  17AA  2F89               	goto	l6512
  4601  17AB  2F8B               	goto	l6516
  4602  17AC  0008               	return
  4603  17AD                     __end_of_check_message:	
  4604                           
  4605                           	psect	text2
  4606  0A13                     __ptext2:	
  4607 ;; *************** function _check_data *****************
  4608 ;; Defined at:
  4609 ;;		line 372 in file "main.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  x               1    wreg     unsigned char 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  x               1    3[COMMON] unsigned char 
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      _Bool 
  4616 ;; Registers used:
  4617 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4623 ;;      Params:         0       0       0       0       0       0       0       0
  4624 ;;      Locals:         1       0       0       0       0       0       0       0
  4625 ;;      Temps:          2       0       0       0       0       0       0       0
  4626 ;;      Totals:         3       0       0       0       0       0       0       0
  4627 ;;Total ram usage:        3 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    4
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_main
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           
  4638                           ;psect for function _check_data
  4639  0A13                     _check_data:	
  4640                           
  4641                           ;incstack = 0
  4642                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  4643                           ;check_data@x stored from wreg
  4644  0A13  00F3               	movwf	check_data@x
  4645                           
  4646                           ;main.c: 372: _Bool check_data(uint8_t x);main.c: 373: {;main.c: 374:     switch(x)
  4647  0A14  2A19               	goto	l5162
  4648  0A15                     l5080:	
  4649  0A15  3001               	movlw	1
  4650  0A16  0008               	return
  4651  0A17                     l5156:	
  4652  0A17  3000               	movlw	0
  4653  0A18  0008               	return
  4654  0A19                     l5162:	
  4655  0A19  0873               	movf	check_data@x,w
  4656  0A1A  00F1               	movwf	??_check_data
  4657  0A1B  01F2               	clrf	??_check_data+1
  4658                           
  4659                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4660                           ; Switch size 1, requested type "simple"
  4661                           ; Number of cases is 1, Range of values is 0 to 0
  4662                           ; switch strategies available:
  4663                           ; Name         Instructions Cycles
  4664                           ; simple_byte            4     3 (average)
  4665                           ; direct_byte            8     6 (fixed)
  4666                           ; jumptable            260     6 (fixed)
  4667                           ;	Chosen strategy is simple_byte
  4668  0A1C  0872               	movf	??_check_data+1,w
  4669  0A1D  3A00               	xorlw	0	; case 0
  4670  0A1E  1903               	skipnz
  4671  0A1F  2A21               	goto	l7092
  4672  0A20  2A17               	goto	l5156
  4673  0A21                     l7092:	
  4674                           
  4675                           ; Switch size 1, requested type "simple"
  4676                           ; Number of cases is 19, Range of values is 48 to 85
  4677                           ; switch strategies available:
  4678                           ; Name         Instructions Cycles
  4679                           ; simple_byte           58    30 (average)
  4680                           ; direct_byte           85     9 (fixed)
  4681                           ; jumptable            263     9 (fixed)
  4682                           ;	Chosen strategy is simple_byte
  4683  0A21  0871               	movf	??_check_data,w
  4684  0A22  3A30               	xorlw	48	; case 48
  4685  0A23  1903               	skipnz
  4686  0A24  2A15               	goto	l5080
  4687  0A25  3A01               	xorlw	1	; case 49
  4688  0A26  1903               	skipnz
  4689  0A27  2A15               	goto	l5080
  4690  0A28  3A03               	xorlw	3	; case 50
  4691  0A29  1903               	skipnz
  4692  0A2A  2A15               	goto	l5080
  4693  0A2B  3A01               	xorlw	1	; case 51
  4694  0A2C  1903               	skipnz
  4695  0A2D  2A15               	goto	l5080
  4696  0A2E  3A07               	xorlw	7	; case 52
  4697  0A2F  1903               	skipnz
  4698  0A30  2A15               	goto	l5080
  4699  0A31  3A01               	xorlw	1	; case 53
  4700  0A32  1903               	skipnz
  4701  0A33  2A15               	goto	l5080
  4702  0A34  3A03               	xorlw	3	; case 54
  4703  0A35  1903               	skipnz
  4704  0A36  2A15               	goto	l5080
  4705  0A37  3A01               	xorlw	1	; case 55
  4706  0A38  1903               	skipnz
  4707  0A39  2A15               	goto	l5080
  4708  0A3A  3A0F               	xorlw	15	; case 56
  4709  0A3B  1903               	skipnz
  4710  0A3C  2A15               	goto	l5080
  4711  0A3D  3A01               	xorlw	1	; case 57
  4712  0A3E  1903               	skipnz
  4713  0A3F  2A15               	goto	l5080
  4714  0A40  3A78               	xorlw	120	; case 65
  4715  0A41  1903               	skipnz
  4716  0A42  2A15               	goto	l5080
  4717  0A43  3A03               	xorlw	3	; case 66
  4718  0A44  1903               	skipnz
  4719  0A45  2A15               	goto	l5080
  4720  0A46  3A01               	xorlw	1	; case 67
  4721  0A47  1903               	skipnz
  4722  0A48  2A15               	goto	l5080
  4723  0A49  3A07               	xorlw	7	; case 68
  4724  0A4A  1903               	skipnz
  4725  0A4B  2A15               	goto	l5080
  4726  0A4C  3A01               	xorlw	1	; case 69
  4727  0A4D  1903               	skipnz
  4728  0A4E  2A15               	goto	l5080
  4729  0A4F  3A03               	xorlw	3	; case 70
  4730  0A50  1903               	skipnz
  4731  0A51  2A15               	goto	l5080
  4732  0A52  3A01               	xorlw	1	; case 71
  4733  0A53  1903               	skipnz
  4734  0A54  2A15               	goto	l5080
  4735  0A55  3A13               	xorlw	19	; case 84
  4736  0A56  1903               	skipnz
  4737  0A57  2A15               	goto	l5080
  4738  0A58  3A01               	xorlw	1	; case 85
  4739  0A59  1903               	skipnz
  4740  0A5A  2A15               	goto	l5080
  4741  0A5B  2A17               	goto	l5156
  4742  0A5C  0008               	return
  4743  0A5D                     __end_of_check_data:	
  4744                           
  4745                           	psect	text3
  4746  15A8                     __ptext3:	
  4747 ;; *************** function _SYSTEM_Initialize *****************
  4748 ;; Defined at:
  4749 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;		None
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;		None
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  1    wreg      void 
  4756 ;; Registers used:
  4757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4763 ;;      Params:         0       0       0       0       0       0       0       0
  4764 ;;      Locals:         0       0       0       0       0       0       0       0
  4765 ;;      Temps:          0       0       0       0       0       0       0       0
  4766 ;;      Totals:         0       0       0       0       0       0       0       0
  4767 ;;Total ram usage:        0 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:    9
  4770 ;; This function calls:
  4771 ;;		_EUSART_Initialize
  4772 ;;		_MTOUCH_Initialize
  4773 ;;		_OSCILLATOR_Initialize
  4774 ;;		_PIN_MANAGER_Initialize
  4775 ;;		_TMR2_Initialize
  4776 ;;		_WDT_Initialize
  4777 ;; This function is called by:
  4778 ;;		_main
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _SYSTEM_Initialize
  4784  15A8                     _SYSTEM_Initialize:	
  4785                           
  4786                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4787                           
  4788                           ;incstack = 0
  4789                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4790  15A8  3196  26D6  3195   	fcall	_PIN_MANAGER_Initialize
  4791                           
  4792                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4793  15AB  3194  246E  3195   	fcall	_OSCILLATOR_Initialize
  4794                           
  4795                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4796  15AE  3194  243C  3195   	fcall	_WDT_Initialize
  4797                           
  4798                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  4799  15B1  3194  24A8  3195   	fcall	_TMR2_Initialize
  4800                           
  4801                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  4802  15B4  3189  210D  3195   	fcall	_EUSART_Initialize
  4803                           
  4804                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  4805  15B7  3194  24C3         	fcall	_MTOUCH_Initialize
  4806  15B9  0008               	return
  4807  15BA                     __end_of_SYSTEM_Initialize:	
  4808                           
  4809                           	psect	text4
  4810  143C                     __ptext4:	
  4811 ;; *************** function _WDT_Initialize *****************
  4812 ;; Defined at:
  4813 ;;		line 69 in file "mcc_generated_files/mcc.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4827 ;;      Params:         0       0       0       0       0       0       0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0
  4830 ;;      Totals:         0       0       0       0       0       0       0       0
  4831 ;;Total ram usage:        0 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    4
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		_SYSTEM_Initialize
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           
  4842                           ;psect for function _WDT_Initialize
  4843  143C                     _WDT_Initialize:	
  4844                           
  4845                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  4846                           
  4847                           ;incstack = 0
  4848                           ; Regs used in _WDT_Initialize: [wreg]
  4849  143C  3016               	movlw	22
  4850  143D  0021               	movlb	1	; select bank1
  4851  143E  0097               	movwf	23	;volatile
  4852  143F  0008               	return
  4853  1440                     __end_of_WDT_Initialize:	
  4854                           
  4855                           	psect	text5
  4856  14A8                     __ptext5:	
  4857 ;; *************** function _TMR2_Initialize *****************
  4858 ;; Defined at:
  4859 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;		None
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;		None
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  1    wreg      void 
  4866 ;; Registers used:
  4867 ;;		wreg, status,2
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4873 ;;      Params:         0       0       0       0       0       0       0       0
  4874 ;;      Locals:         0       0       0       0       0       0       0       0
  4875 ;;      Temps:          0       0       0       0       0       0       0       0
  4876 ;;      Totals:         0       0       0       0       0       0       0       0
  4877 ;;Total ram usage:        0 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    4
  4880 ;; This function calls:
  4881 ;;		Nothing
  4882 ;; This function is called by:
  4883 ;;		_SYSTEM_Initialize
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           
  4888                           ;psect for function _TMR2_Initialize
  4889  14A8                     _TMR2_Initialize:	
  4890                           
  4891                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4892                           
  4893                           ;incstack = 0
  4894                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4895  14A8  30FF               	movlw	255
  4896  14A9  0020               	movlb	0	; select bank0
  4897  14AA  009B               	movwf	27	;volatile
  4898                           
  4899                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4900  14AB  019A               	clrf	26	;volatile
  4901                           
  4902                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4903  14AC  1091               	bcf	17,1	;volatile
  4904                           
  4905                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4906  14AD  3004               	movlw	4
  4907  14AE  009C               	movwf	28	;volatile
  4908  14AF  0008               	return
  4909  14B0                     __end_of_TMR2_Initialize:	
  4910                           
  4911                           	psect	text6
  4912  16D6                     __ptext6:	
  4913 ;; *************** function _PIN_MANAGER_Initialize *****************
  4914 ;; Defined at:
  4915 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;		None
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      void 
  4922 ;; Registers used:
  4923 ;;		wreg, status,2
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4929 ;;      Params:         0       0       0       0       0       0       0       0
  4930 ;;      Locals:         0       0       0       0       0       0       0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0
  4932 ;;      Totals:         0       0       0       0       0       0       0       0
  4933 ;;Total ram usage:        0 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    4
  4936 ;; This function calls:
  4937 ;;		Nothing
  4938 ;; This function is called by:
  4939 ;;		_SYSTEM_Initialize
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function _PIN_MANAGER_Initialize
  4945  16D6                     _PIN_MANAGER_Initialize:	
  4946                           
  4947                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  4948                           
  4949                           ;incstack = 0
  4950                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4951  16D6  3037               	movlw	55
  4952  16D7  0022               	movlb	2	; select bank2
  4953  16D8  008C               	movwf	12	;volatile
  4954                           
  4955                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0xC0;
  4956  16D9  30C0               	movlw	192
  4957  16DA  008D               	movwf	13	;volatile
  4958                           
  4959                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xBF;
  4960  16DB  30BF               	movlw	191
  4961  16DC  008E               	movwf	14	;volatile
  4962                           
  4963                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  4964  16DD  3008               	movlw	8
  4965  16DE  0021               	movlb	1	; select bank1
  4966  16DF  008C               	movwf	12	;volatile
  4967                           
  4968                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  4969  16E0  3020               	movlw	32
  4970  16E1  008D               	movwf	13	;volatile
  4971                           
  4972                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  4973  16E2  3040               	movlw	64
  4974  16E3  008E               	movwf	14	;volatile
  4975                           
  4976                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE8;
  4977  16E4  30E8               	movlw	232
  4978  16E5  0023               	movlb	3	; select bank3
  4979  16E6  008E               	movwf	14	;volatile
  4980                           
  4981                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  4982  16E7  3040               	movlw	64
  4983  16E8  008D               	movwf	13	;volatile
  4984                           
  4985                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  4986  16E9  3037               	movlw	55
  4987  16EA  008C               	movwf	12	;volatile
  4988                           
  4989                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4990  16EB  0024               	movlb	4	; select bank4
  4991  16EC  018D               	clrf	13	;volatile
  4992                           
  4993                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4994  16ED  018C               	clrf	12	;volatile
  4995                           
  4996                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4997  16EE  0021               	movlb	1	; select bank1
  4998  16EF  1795               	bsf	21,7	;volatile
  4999                           
  5000                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  5001  16F0  0022               	movlb	2	; select bank2
  5002  16F1  019D               	clrf	29	;volatile
  5003  16F2  0008               	return
  5004  16F3                     __end_of_PIN_MANAGER_Initialize:	
  5005                           
  5006                           	psect	text7
  5007  146E                     __ptext7:	
  5008 ;; *************** function _OSCILLATOR_Initialize *****************
  5009 ;; Defined at:
  5010 ;;		line 61 in file "mcc_generated_files/mcc.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;		None
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;		None
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  1    wreg      void 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5024 ;;      Params:         0       0       0       0       0       0       0       0
  5025 ;;      Locals:         0       0       0       0       0       0       0       0
  5026 ;;      Temps:          0       0       0       0       0       0       0       0
  5027 ;;      Totals:         0       0       0       0       0       0       0       0
  5028 ;;Total ram usage:        0 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    4
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		_SYSTEM_Initialize
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _OSCILLATOR_Initialize
  5040  146E                     _OSCILLATOR_Initialize:	
  5041                           
  5042                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5046  146E  30F0               	movlw	240
  5047  146F  0021               	movlb	1	; select bank1
  5048  1470  0099               	movwf	25	;volatile
  5049                           
  5050                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  5051  1471  0022               	movlb	2	; select bank2
  5052  1472  0196               	clrf	22	;volatile
  5053  1473  0008               	return
  5054  1474                     __end_of_OSCILLATOR_Initialize:	
  5055                           
  5056                           	psect	text8
  5057  14C3                     __ptext8:	
  5058 ;; *************** function _MTOUCH_Initialize *****************
  5059 ;; Defined at:
  5060 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      void 
  5067 ;; Registers used:
  5068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5074 ;;      Params:         0       0       0       0       0       0       0       0
  5075 ;;      Locals:         0       0       0       0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0       0
  5077 ;;      Totals:         0       0       0       0       0       0       0       0
  5078 ;;Total ram usage:        0 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    8
  5081 ;; This function calls:
  5082 ;;		_MTOUCH_Button_InitializeAll
  5083 ;;		_MTOUCH_Sensor_InitializeAll
  5084 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5085 ;;		_MTOUCH_Sensor_Scan_Initialize
  5086 ;; This function is called by:
  5087 ;;		_SYSTEM_Initialize
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           
  5092                           ;psect for function _MTOUCH_Initialize
  5093  14C3                     _MTOUCH_Initialize:	
  5094                           
  5095                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5099  14C3  3195  2505  3194   	fcall	_MTOUCH_Sensor_InitializeAll
  5100                           
  5101                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  5102  14C6  3196  269D  3194   	fcall	_MTOUCH_Button_InitializeAll
  5103                           
  5104                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  5105  14C9  3195  25BA  3194   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5106                           
  5107                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  5108  14CC  3195  2541         	fcall	_MTOUCH_Sensor_Scan_Initialize
  5109  14CE  0008               	return
  5110  14CF                     __end_of_MTOUCH_Initialize:	
  5111                           
  5112                           	psect	text9
  5113  1505                     __ptext9:	
  5114 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  5115 ;; Defined at:
  5116 ;;		line 231 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;		None
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  sensor          1   10[COMMON] enum E2854
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5130 ;;      Params:         0       0       0       0       0       0       0       0
  5131 ;;      Locals:         1       0       0       0       0       0       0       0
  5132 ;;      Temps:          1       0       0       0       0       0       0       0
  5133 ;;      Totals:         2       0       0       0       0       0       0       0
  5134 ;;Total ram usage:        2 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    7
  5137 ;; This function calls:
  5138 ;;		_MTOUCH_Sensor_Initialize
  5139 ;; This function is called by:
  5140 ;;		_MTOUCH_Initialize
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           
  5145                           ;psect for function _MTOUCH_Sensor_InitializeAll
  5146  1505                     _MTOUCH_Sensor_InitializeAll:	
  5147                           
  5148                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 233:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 235:     for (sensor = 0; sensor < 4u; sensor
      +                          ++)
  5149                           
  5150                           ;incstack = 0
  5151                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  5152  1505  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  5153  1506                     l6392:	
  5154                           
  5155                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 236:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 237:         MTOUCH_Sensor_Initialize(sensor);
  5156  1506  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  5157  1507  3195  25CD  3195   	fcall	_MTOUCH_Sensor_Initialize
  5158                           
  5159                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 238:     }
  5160  150A  3001               	movlw	1
  5161  150B  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  5162  150C  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  5163  150D  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  5164  150E  3004               	movlw	4
  5165  150F  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  5166  1510  1803               	btfsc	3,0
  5167  1511  0008               	return
  5168  1512  2D06               	goto	l6392
  5169  1513                     __end_of_MTOUCH_Sensor_InitializeAll:	
  5170                           
  5171                           	psect	text10
  5172  15CD                     __ptext10:	
  5173 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  5174 ;; Defined at:
  5175 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  sensor          1    wreg     enum E2854
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;  sensor          1    8[COMMON] enum E2854
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      enum E2859
  5182 ;; Registers used:
  5183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5189 ;;      Params:         0       0       0       0       0       0       0       0
  5190 ;;      Locals:         1       0       0       0       0       0       0       0
  5191 ;;      Temps:          1       0       0       0       0       0       0       0
  5192 ;;      Totals:         2       0       0       0       0       0       0       0
  5193 ;;Total ram usage:        2 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    6
  5196 ;; This function calls:
  5197 ;;		_MTOUCH_Sensor_Calibrate
  5198 ;;		_MTOUCH_Sensor_Enable
  5199 ;;		_Sensor_Sampled_Reset
  5200 ;;		___bmul
  5201 ;; This function is called by:
  5202 ;;		_MTOUCH_Sensor_InitializeAll
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _MTOUCH_Sensor_Initialize
  5208  15CD                     _MTOUCH_Sensor_Initialize:	
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5212                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  5213  15CD  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  5214                           
  5215                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 216: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           217: {;mcc_generated_files/mtouch/mtouch_sensor.c: 219:     MTOUCH_Sensor_Enable(sensor
      +                          );
  5216  15CE  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5217  15CF  3195  2596  3195   	fcall	_MTOUCH_Sensor_Enable
  5218                           
  5219                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 220:     MTOUCH_Sensor_Calibrate(sensor);
  5220  15D2  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5221  15D3  3195  2584  3195   	fcall	_MTOUCH_Sensor_Calibrate
  5222                           
  5223                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 221:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  5224  15D6  3009               	movlw	9
  5225  15D7  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  5226  15D8  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  5227  15D9  00F1               	movwf	___bmul@multiplicand
  5228  15DA  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5229  15DB  3195  2562  3195   	fcall	___bmul
  5230  15DE  3E20               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  5231  15DF  3194  24A0         	fcall	_Sensor_Sampled_Reset
  5232  15E1  0008               	return
  5233  15E2                     __end_of_MTOUCH_Sensor_Initialize:	
  5234                           
  5235                           	psect	text11
  5236  1596                     __ptext11:	
  5237 ;; *************** function _MTOUCH_Sensor_Enable *****************
  5238 ;; Defined at:
  5239 ;;		line 849 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  sensor          1    wreg     enum E2854
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;  sensor          1    6[COMMON] enum E2854
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  1    wreg      void 
  5246 ;; Registers used:
  5247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5253 ;;      Params:         0       0       0       0       0       0       0       0
  5254 ;;      Locals:         1       0       0       0       0       0       0       0
  5255 ;;      Temps:          1       0       0       0       0       0       0       0
  5256 ;;      Totals:         2       0       0       0       0       0       0       0
  5257 ;;Total ram usage:        2 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    5
  5260 ;; This function calls:
  5261 ;;		___bmul
  5262 ;; This function is called by:
  5263 ;;		_MTOUCH_Sensor_Initialize
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           
  5268                           ;psect for function _MTOUCH_Sensor_Enable
  5269  1596                     _MTOUCH_Sensor_Enable:	
  5270                           
  5271                           ;incstack = 0
  5272                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5273                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  5274  1596  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  5275                           
  5276                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 849: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 850: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 851:     if(sensor < 4u)
  5277  1597  3004               	movlw	4
  5278  1598  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  5279  1599  1803               	skipnc
  5280  159A  0008               	return
  5281                           
  5282                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 852:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  5283  159B  3009               	movlw	9
  5284  159C  00F5               	movwf	??_MTOUCH_Sensor_Enable
  5285  159D  0875               	movf	??_MTOUCH_Sensor_Enable,w
  5286  159E  00F1               	movwf	___bmul@multiplicand
  5287  159F  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  5288  15A0  3195  2562         	fcall	___bmul
  5289  15A2  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  5290  15A3  0086               	movwf	6
  5291  15A4  3001               	movlw	1	; select bank2/3
  5292  15A5  0087               	movwf	7
  5293  15A6  1581               	bsf	1,3
  5294  15A7  0008               	return
  5295  15A8                     __end_of_MTOUCH_Sensor_Enable:	
  5296                           
  5297                           	psect	text12
  5298  169D                     __ptext12:	
  5299 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  5300 ;; Defined at:
  5301 ;;		line 179 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;		None
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  button          1    0[BANK0 ] enum E3070
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      void 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5315 ;;      Params:         0       0       0       0       0       0       0       0
  5316 ;;      Locals:         0       1       0       0       0       0       0       0
  5317 ;;      Temps:          1       0       0       0       0       0       0       0
  5318 ;;      Totals:         1       1       0       0       0       0       0       0
  5319 ;;Total ram usage:        2 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    7
  5322 ;; This function calls:
  5323 ;;		_MTOUCH_Button_Initialize
  5324 ;;		_memcpy
  5325 ;; This function is called by:
  5326 ;;		_MTOUCH_Initialize
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           
  5331                           ;psect for function _MTOUCH_Button_InitializeAll
  5332  169D                     _MTOUCH_Button_InitializeAll:	
  5333                           
  5334                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 183:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  5335                           
  5336                           ;incstack = 0
  5337                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5338  169D  3000               	movlw	low (_mtouch_button_init| (0+32768))
  5339  169E  00F1               	movwf	memcpy@s1
  5340  169F  3090               	movlw	high (_mtouch_button_init| (0+32768))
  5341  16A0  00F2               	movwf	memcpy@s1+1
  5342  16A1  3040               	movlw	64
  5343  16A2  00F3               	movwf	memcpy@n
  5344  16A3  3000               	movlw	0
  5345  16A4  00F4               	movwf	memcpy@n+1
  5346  16A5  30A0               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  5347  16A6  3197  27D5  3196   	fcall	_memcpy
  5348                           
  5349                           ;mcc_generated_files/mtouch/mtouch_button.c: 185:     for (button = 0; button < 4u; butt
      +                          on++)
  5350  16A9  0020               	movlb	0	; select bank0
  5351  16AA  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  5352  16AB                     l6406:	
  5353                           
  5354                           ;mcc_generated_files/mtouch/mtouch_button.c: 186:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 187:         MTOUCH_Button_Initialize(button);
  5355  16AB  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  5356  16AC  3189  21A5  3196   	fcall	_MTOUCH_Button_Initialize
  5357                           
  5358                           ;mcc_generated_files/mtouch/mtouch_button.c: 188:     }
  5359  16AF  3001               	movlw	1
  5360  16B0  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  5361  16B1  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  5362  16B2  0020               	movlb	0	; select bank0
  5363  16B3  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  5364  16B4  3004               	movlw	4
  5365  16B5  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  5366  16B6  1803               	btfsc	3,0
  5367  16B7  0008               	return
  5368  16B8  2EAB               	goto	l6406
  5369  16B9                     __end_of_MTOUCH_Button_InitializeAll:	
  5370                           
  5371                           	psect	text13
  5372  17D5                     __ptext13:	
  5373 ;; *************** function _memcpy *****************
  5374 ;; Defined at:
  5375 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  d1              1    wreg     PTR void 
  5378 ;;		 -> mtouch_button(64), 
  5379 ;;  s1              2    1[COMMON] PTR const void 
  5380 ;;		 -> mtouch_button_init(64), 
  5381 ;;  n               2    3[COMMON] unsigned int 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  d1              1    9[COMMON] PTR void 
  5384 ;;		 -> mtouch_button(64), 
  5385 ;;  s               2    7[COMMON] PTR const unsigned char 
  5386 ;;		 -> mtouch_button_init(64), 
  5387 ;;  d               1   10[COMMON] PTR unsigned char 
  5388 ;;		 -> mtouch_button(64), 
  5389 ;;  tmp             1    6[COMMON] unsigned char 
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      PTR void 
  5392 ;; Registers used:
  5393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5399 ;;      Params:         4       0       0       0       0       0       0       0
  5400 ;;      Locals:         5       0       0       0       0       0       0       0
  5401 ;;      Temps:          1       0       0       0       0       0       0       0
  5402 ;;      Totals:        10       0       0       0       0       0       0       0
  5403 ;;Total ram usage:       10 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    4
  5406 ;; This function calls:
  5407 ;;		Nothing
  5408 ;; This function is called by:
  5409 ;;		_MTOUCH_Button_InitializeAll
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           
  5414                           ;psect for function _memcpy
  5415  17D5                     _memcpy:	
  5416                           
  5417                           ;incstack = 0
  5418                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  5419                           ;memcpy@d1 stored from wreg
  5420  17D5  00F9               	movwf	memcpy@d1
  5421  17D6  0872               	movf	memcpy@s1+1,w
  5422  17D7  00F8               	movwf	memcpy@s+1
  5423  17D8  0871               	movf	memcpy@s1,w
  5424  17D9  00F7               	movwf	memcpy@s
  5425  17DA  0879               	movf	memcpy@d1,w
  5426  17DB  00F5               	movwf	??_memcpy
  5427  17DC  0875               	movf	??_memcpy,w
  5428  17DD  00FA               	movwf	memcpy@d
  5429  17DE                     l6330:	
  5430  17DE  3001               	movlw	1
  5431  17DF  02F3               	subwf	memcpy@n,f
  5432  17E0  3000               	movlw	0
  5433  17E1  3BF4               	subwfb	memcpy@n+1,f
  5434  17E2  0A73               	incf	memcpy@n,w
  5435  17E3  1903               	btfsc	3,2
  5436  17E4  0A74               	incf	memcpy@n+1,w
  5437  17E5  1903               	btfsc	3,2
  5438  17E6  0008               	return
  5439  17E7  0877               	movf	memcpy@s,w
  5440  17E8  0084               	movwf	4
  5441  17E9  0878               	movf	memcpy@s+1,w
  5442  17EA  0085               	movwf	5
  5443  17EB  0800               	movf	0,w	;code access
  5444  17EC  00F5               	movwf	??_memcpy
  5445  17ED  0875               	movf	??_memcpy,w
  5446  17EE  00F6               	movwf	memcpy@tmp
  5447  17EF  3001               	movlw	1
  5448  17F0  07F7               	addwf	memcpy@s,f
  5449  17F1  3000               	movlw	0
  5450  17F2  3DF8               	addwfc	memcpy@s+1,f
  5451  17F3  0876               	movf	memcpy@tmp,w
  5452  17F4  00F5               	movwf	??_memcpy
  5453  17F5  087A               	movf	memcpy@d,w
  5454  17F6  0086               	movwf	6
  5455  17F7  3001               	movlw	1	; select bank2/3
  5456  17F8  0087               	movwf	7
  5457  17F9  0875               	movf	??_memcpy,w
  5458  17FA  0081               	movwf	1
  5459  17FB  3001               	movlw	1
  5460  17FC  00F5               	movwf	??_memcpy
  5461  17FD  0875               	movf	??_memcpy,w
  5462  17FE  07FA               	addwf	memcpy@d,f
  5463  17FF  2FDE               	goto	l6330
  5464  1800                     __end_of_memcpy:	
  5465                           
  5466                           	psect	text14
  5467  090D                     __ptext14:	
  5468 ;; *************** function _EUSART_Initialize *****************
  5469 ;; Defined at:
  5470 ;;		line 81 in file "mcc_generated_files/eusart.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;		None
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;		None
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  1    wreg      void 
  5477 ;; Registers used:
  5478 ;;		wreg, status,2, status,0, pclath, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5484 ;;      Params:         0       0       0       0       0       0       0       0
  5485 ;;      Locals:         0       0       0       0       0       0       0       0
  5486 ;;      Temps:          0       0       0       0       0       0       0       0
  5487 ;;      Totals:         0       0       0       0       0       0       0       0
  5488 ;;Total ram usage:        0 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    5
  5491 ;; This function calls:
  5492 ;;		_EUSART_SetErrorHandler
  5493 ;;		_EUSART_SetFramingErrorHandler
  5494 ;;		_EUSART_SetOverrunErrorHandler
  5495 ;;		_EUSART_SetRxInterruptHandler
  5496 ;; This function is called by:
  5497 ;;		_SYSTEM_Initialize
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           
  5502                           ;psect for function _EUSART_Initialize
  5503  090D                     _EUSART_Initialize:	
  5504                           
  5505                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  5506                           
  5507                           ;incstack = 0
  5508                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5509  090D  0021               	movlb	1	; select bank1
  5510  090E  1291               	bcf	17,5	;volatile
  5511                           
  5512                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5513  090F  303E               	movlw	low _EUSART_Receive_ISR
  5514  0910  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5515  0911  3009               	movlw	high _EUSART_Receive_ISR
  5516  0912  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5517  0913  3194  2468  3189   	fcall	_EUSART_SetRxInterruptHandler
  5518                           
  5519                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  5520  0916  3008               	movlw	8
  5521  0917  0023               	movlb	3	; select bank3
  5522  0918  009F               	movwf	31	;volatile
  5523                           
  5524                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  5525  0919  3090               	movlw	144
  5526  091A  009D               	movwf	29	;volatile
  5527                           
  5528                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  5529  091B  3024               	movlw	36
  5530  091C  009E               	movwf	30	;volatile
  5531                           
  5532                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  5533  091D  3040               	movlw	64
  5534  091E  009B               	movwf	27	;volatile
  5535                           
  5536                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  5537  091F  3003               	movlw	3
  5538  0920  009C               	movwf	28	;volatile
  5539                           
  5540                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5541  0921  3029               	movlw	low _EUSART_DefaultFramingErrorHandler
  5542  0922  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5543  0923  3014               	movlw	high _EUSART_DefaultFramingErrorHandler
  5544  0924  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  5545  0925  3194  245C  3189   	fcall	_EUSART_SetFramingErrorHandler
  5546                           
  5547                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5548  0928  3038               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5549  0929  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5550  092A  3014               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5551  092B  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  5552  092C  3194  2462  3189   	fcall	_EUSART_SetOverrunErrorHandler
  5553                           
  5554                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5555  092F  302C               	movlw	low _EUSART_DefaultErrorHandler
  5556  0930  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  5557  0931  3014               	movlw	high _EUSART_DefaultErrorHandler
  5558  0932  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  5559  0933  3194  2456         	fcall	_EUSART_SetErrorHandler
  5560                           
  5561                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  5562  0935  0021               	movlb	1	; select bank1
  5563  0936  01BD               	clrf	_eusartRxLastError^(0+128)	;volatile
  5564                           
  5565                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  5566  0937  01FC               	clrf	_eusartRxHead	;volatile
  5567                           
  5568                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  5569  0938  0020               	movlb	0	; select bank0
  5570  0939  01ED               	clrf	_eusartRxTail	;volatile
  5571                           
  5572                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  5573  093A  01EC               	clrf	_eusartRxCount	;volatile
  5574                           
  5575                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  5576  093B  0021               	movlb	1	; select bank1
  5577  093C  1691               	bsf	17,5	;volatile
  5578  093D  0008               	return
  5579  093E                     __end_of_EUSART_Initialize:	
  5580                           
  5581                           	psect	text15
  5582  1468                     __ptext15:	
  5583 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5584 ;; Defined at:
  5585 ;;		line 241 in file "mcc_generated_files/eusart.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5588 ;;		 -> EUSART_Receive_ISR(1), 
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;		None
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5600 ;;      Params:         2       0       0       0       0       0       0       0
  5601 ;;      Locals:         0       0       0       0       0       0       0       0
  5602 ;;      Temps:          0       0       0       0       0       0       0       0
  5603 ;;      Totals:         2       0       0       0       0       0       0       0
  5604 ;;Total ram usage:        2 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    4
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_EUSART_Initialize
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function _EUSART_SetRxInterruptHandler
  5616  1468                     _EUSART_SetRxInterruptHandler:	
  5617                           
  5618                           ;mcc_generated_files/eusart.c: 242:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5619                           
  5620                           ;incstack = 0
  5621                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5622  1468  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  5623  1469  0021               	movlb	1	; select bank1
  5624  146A  00D1               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5625  146B  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  5626  146C  00D0               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5627  146D  0008               	return
  5628  146E                     __end_of_EUSART_SetRxInterruptHandler:	
  5629                           
  5630                           	psect	text16
  5631  1462                     __ptext16:	
  5632 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5633 ;; Defined at:
  5634 ;;		line 232 in file "mcc_generated_files/eusart.c"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5637 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;		None
  5640 ;; Return value:  Size  Location     Type
  5641 ;;                  1    wreg      void 
  5642 ;; Registers used:
  5643 ;;		wreg
  5644 ;; Tracked objects:
  5645 ;;		On entry : 0/0
  5646 ;;		On exit  : 0/0
  5647 ;;		Unchanged: 0/0
  5648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5649 ;;      Params:         2       0       0       0       0       0       0       0
  5650 ;;      Locals:         0       0       0       0       0       0       0       0
  5651 ;;      Temps:          0       0       0       0       0       0       0       0
  5652 ;;      Totals:         2       0       0       0       0       0       0       0
  5653 ;;Total ram usage:        2 bytes
  5654 ;; Hardware stack levels used:    1
  5655 ;; Hardware stack levels required when called:    4
  5656 ;; This function calls:
  5657 ;;		Nothing
  5658 ;; This function is called by:
  5659 ;;		_EUSART_Initialize
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           
  5664                           ;psect for function _EUSART_SetOverrunErrorHandler
  5665  1462                     _EUSART_SetOverrunErrorHandler:	
  5666                           
  5667                           ;mcc_generated_files/eusart.c: 233:     EUSART_OverrunErrorHandler = interruptHandler;
  5668                           
  5669                           ;incstack = 0
  5670                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5671  1462  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  5672  1463  0021               	movlb	1	; select bank1
  5673  1464  00CD               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5674  1465  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  5675  1466  00CC               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5676  1467  0008               	return
  5677  1468                     __end_of_EUSART_SetOverrunErrorHandler:	
  5678                           
  5679                           	psect	text17
  5680  145C                     __ptext17:	
  5681 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5682 ;; Defined at:
  5683 ;;		line 228 in file "mcc_generated_files/eusart.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5686 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;		None
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  1    wreg      void 
  5691 ;; Registers used:
  5692 ;;		wreg
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5698 ;;      Params:         2       0       0       0       0       0       0       0
  5699 ;;      Locals:         0       0       0       0       0       0       0       0
  5700 ;;      Temps:          0       0       0       0       0       0       0       0
  5701 ;;      Totals:         2       0       0       0       0       0       0       0
  5702 ;;Total ram usage:        2 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    4
  5705 ;; This function calls:
  5706 ;;		Nothing
  5707 ;; This function is called by:
  5708 ;;		_EUSART_Initialize
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           
  5713                           ;psect for function _EUSART_SetFramingErrorHandler
  5714  145C                     _EUSART_SetFramingErrorHandler:	
  5715                           
  5716                           ;mcc_generated_files/eusart.c: 229:     EUSART_FramingErrorHandler = interruptHandler;
  5717                           
  5718                           ;incstack = 0
  5719                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5720  145C  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  5721  145D  0021               	movlb	1	; select bank1
  5722  145E  00CF               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5723  145F  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5724  1460  00CE               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5725  1461  0008               	return
  5726  1462                     __end_of_EUSART_SetFramingErrorHandler:	
  5727                           
  5728                           	psect	text18
  5729  1456                     __ptext18:	
  5730 ;; *************** function _EUSART_SetErrorHandler *****************
  5731 ;; Defined at:
  5732 ;;		line 236 in file "mcc_generated_files/eusart.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5735 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;		None
  5738 ;; Return value:  Size  Location     Type
  5739 ;;                  1    wreg      void 
  5740 ;; Registers used:
  5741 ;;		wreg
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5747 ;;      Params:         2       0       0       0       0       0       0       0
  5748 ;;      Locals:         0       0       0       0       0       0       0       0
  5749 ;;      Temps:          0       0       0       0       0       0       0       0
  5750 ;;      Totals:         2       0       0       0       0       0       0       0
  5751 ;;Total ram usage:        2 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; Hardware stack levels required when called:    4
  5754 ;; This function calls:
  5755 ;;		Nothing
  5756 ;; This function is called by:
  5757 ;;		_EUSART_Initialize
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           
  5762                           ;psect for function _EUSART_SetErrorHandler
  5763  1456                     _EUSART_SetErrorHandler:	
  5764                           
  5765                           ;mcc_generated_files/eusart.c: 237:     EUSART_ErrorHandler = interruptHandler;
  5766                           
  5767                           ;incstack = 0
  5768                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5769  1456  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  5770  1457  0021               	movlb	1	; select bank1
  5771  1458  00CB               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5772  1459  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5773  145A  00CA               	movwf	_EUSART_ErrorHandler^(0+128)
  5774  145B  0008               	return
  5775  145C                     __end_of_EUSART_SetErrorHandler:	
  5776                           
  5777                           	psect	text19
  5778  16B9                     __ptext19:	
  5779 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5780 ;; Defined at:
  5781 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;		None
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;		None
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      _Bool 
  5788 ;; Registers used:
  5789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5795 ;;      Params:         0       0       0       0       0       0       0       0
  5796 ;;      Locals:         0       0       0       0       0       0       0       0
  5797 ;;      Temps:          0       1       0       0       0       0       0       0
  5798 ;;      Totals:         0       1       0       0       0       0       0       0
  5799 ;;Total ram usage:        1 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:   18
  5802 ;; This function calls:
  5803 ;;		_MTOUCH_Button_ServiceAll
  5804 ;;		_MTOUCH_Sensor_SampleAll
  5805 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5806 ;;		_MTOUCH_Tick
  5807 ;;		_MTOUCH_needReburst
  5808 ;; This function is called by:
  5809 ;;		_main
  5810 ;;		_touch_example
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           
  5815                           ;psect for function _MTOUCH_Service_Mainloop
  5816  16B9                     _MTOUCH_Service_Mainloop:	
  5817                           
  5818                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  5819                           
  5820                           ;incstack = 0
  5821 ;; hardware stack exceeded
  5822                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5823  16B9  0021               	movlb	1	; select bank1
  5824  16BA  01BC               	clrf	_mtouch_time_toScan^(0+128)
  5825  16BB  0ABC               	incf	_mtouch_time_toScan^(0+128),f
  5826                           
  5827                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  5828                           
  5829                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  5830  16BC  3195  25F8  3196   	fcall	_MTOUCH_Sensor_SampleAll
  5831  16BF  3A00               	xorlw	0
  5832  16C0  1D03               	skipz
  5833  16C1  2EC4               	goto	l6652
  5834                           
  5835                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  5836  16C2  3000               	movlw	0
  5837  16C3  0008               	return
  5838  16C4                     l6652:	
  5839                           
  5840                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  5841  16C4  3195  2531  3196   	fcall	_MTOUCH_Button_ServiceAll
  5842                           
  5843                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  5844  16C7  3180  2002  3196   	fcall	_MTOUCH_needReburst
  5845  16CA  0020               	movlb	0	; select bank0
  5846  16CB  00DB               	movwf	??_MTOUCH_Service_Mainloop
  5847  16CC  085B               	movf	??_MTOUCH_Service_Mainloop,w
  5848  16CD  0021               	movlb	1	; select bank1
  5849  16CE  00BC               	movwf	_mtouch_time_toScan^(0+128)
  5850                           
  5851                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  5852  16CF  3195  25BA  3196   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5853                           
  5854                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  5855  16D2  3187  27FD         	fcall	_MTOUCH_Tick
  5856                           
  5857                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  5858  16D4  3001               	movlw	1
  5859  16D5  0008               	return
  5860  16D6                     __end_of_MTOUCH_Service_Mainloop:	
  5861                           
  5862                           	psect	text20
  5863  0002                     __ptext20:	
  5864 ;; *************** function _MTOUCH_needReburst *****************
  5865 ;; Defined at:
  5866 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;		None
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;  needReburst     1    0        _Bool 
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  1    wreg      _Bool 
  5873 ;; Registers used:
  5874 ;;		wreg, status,2
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5880 ;;      Params:         0       0       0       0       0       0       0       0
  5881 ;;      Locals:         1       0       0       0       0       0       0       0
  5882 ;;      Temps:          0       0       0       0       0       0       0       0
  5883 ;;      Totals:         1       0       0       0       0       0       0       0
  5884 ;;Total ram usage:        1 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    4
  5887 ;; This function calls:
  5888 ;;		Nothing
  5889 ;; This function is called by:
  5890 ;;		_MTOUCH_Service_Mainloop
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           
  5895                           ;psect for function _MTOUCH_needReburst
  5896  0002                     _MTOUCH_needReburst:	
  5897                           
  5898                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  5899                           
  5900                           ;incstack = 0
  5901                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  5902  0002  3000               	movlw	0
  5903  0003  0008               	return
  5904  0004                     __end_of_MTOUCH_needReburst:	
  5905                           
  5906                           	psect	text21
  5907  07FD                     __ptext21:	
  5908 ;; *************** function _MTOUCH_Tick *****************
  5909 ;; Defined at:
  5910 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;		None
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;		None
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  1    wreg      void 
  5917 ;; Registers used:
  5918 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5924 ;;      Params:         0       0       0       0       0       0       0       0
  5925 ;;      Locals:         0       0       0       0       0       0       0       0
  5926 ;;      Temps:          0       0       0       0       0       0       0       0
  5927 ;;      Totals:         0       0       0       0       0       0       0       0
  5928 ;;Total ram usage:        0 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:    6
  5931 ;; This function calls:
  5932 ;;		_MTOUCH_Button_Tick
  5933 ;; This function is called by:
  5934 ;;		_MTOUCH_Service_Mainloop
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           
  5939                           ;psect for function _MTOUCH_Tick
  5940  07FD                     _MTOUCH_Tick:	
  5941                           
  5942                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  5943                           
  5944                           ;incstack = 0
  5945                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5946  07FD  3196  260E         	fcall	_MTOUCH_Button_Tick
  5947  07FF  0008               	return
  5948  0800                     __end_of_MTOUCH_Tick:	
  5949                           
  5950                           	psect	text22
  5951  160E                     __ptext22:	
  5952 ;; *************** function _MTOUCH_Button_Tick *****************
  5953 ;; Defined at:
  5954 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;		None
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  i               1    5[COMMON] unsigned char 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  1    wreg      void 
  5961 ;; Registers used:
  5962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5968 ;;      Params:         0       0       0       0       0       0       0       0
  5969 ;;      Locals:         1       0       0       0       0       0       0       0
  5970 ;;      Temps:          1       0       0       0       0       0       0       0
  5971 ;;      Totals:         2       0       0       0       0       0       0       0
  5972 ;;Total ram usage:        2 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    5
  5975 ;; This function calls:
  5976 ;;		_Button_Tick_helper
  5977 ;; This function is called by:
  5978 ;;		_MTOUCH_Tick
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           
  5983                           ;psect for function _MTOUCH_Button_Tick
  5984  160E                     _MTOUCH_Button_Tick:	
  5985                           
  5986                           ;mcc_generated_files/mtouch/mtouch_button.c: 307:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 308:     for (i = 0; i < 4u; i++)
  5987                           
  5988                           ;incstack = 0
  5989                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5990  160E  01F5               	clrf	MTOUCH_Button_Tick@i
  5991  160F                     l4858:	
  5992                           
  5993                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         Button_Tick_helper(&mtouch_button[i]);
  5994  160F  0875               	movf	MTOUCH_Button_Tick@i,w
  5995  1610  00F4               	movwf	??_MTOUCH_Button_Tick
  5996  1611  3003               	movlw	3
  5997  1612                     u3435:	
  5998  1612  35F4               	lslf	??_MTOUCH_Button_Tick,f
  5999  1613  3EFF               	addlw	-1
  6000  1614  1D03               	skipz
  6001  1615  2E12               	goto	u3435
  6002  1616  3574               	lslf	??_MTOUCH_Button_Tick,w
  6003  1617  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  6004  1618  3197  275F  3196   	fcall	_Button_Tick_helper
  6005                           
  6006                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:     }
  6007  161B  3001               	movlw	1
  6008  161C  00F4               	movwf	??_MTOUCH_Button_Tick
  6009  161D  0874               	movf	??_MTOUCH_Button_Tick,w
  6010  161E  07F5               	addwf	MTOUCH_Button_Tick@i,f
  6011  161F  3004               	movlw	4
  6012  1620  0275               	subwf	MTOUCH_Button_Tick@i,w
  6013  1621  1803               	btfsc	3,0
  6014  1622  0008               	return
  6015  1623  2E0F               	goto	l4858
  6016  1624                     __end_of_MTOUCH_Button_Tick:	
  6017                           
  6018                           	psect	text23
  6019  175F                     __ptext23:	
  6020 ;; *************** function _Button_Tick_helper *****************
  6021 ;; Defined at:
  6022 ;;		line 313 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  button          1    wreg     PTR struct .
  6025 ;;		 -> mtouch_button(64), 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  button          1    3[COMMON] PTR struct .
  6028 ;;		 -> mtouch_button(64), 
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  1    wreg      void 
  6031 ;; Registers used:
  6032 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6038 ;;      Params:         0       0       0       0       0       0       0       0
  6039 ;;      Locals:         1       0       0       0       0       0       0       0
  6040 ;;      Temps:          2       0       0       0       0       0       0       0
  6041 ;;      Totals:         3       0       0       0       0       0       0       0
  6042 ;;Total ram usage:        3 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    4
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_MTOUCH_Button_Tick
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function _Button_Tick_helper
  6054  175F                     _Button_Tick_helper:	
  6055                           
  6056                           ;incstack = 0
  6057                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  6058                           ;Button_Tick_helper@button stored from wreg
  6059  175F  00F3               	movwf	Button_Tick_helper@button
  6060                           
  6061                           ;mcc_generated_files/mtouch/mtouch_button.c: 313: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 314: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 316:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  6062  1760  0873               	movf	Button_Tick_helper@button,w
  6063  1761  3E02               	addlw	2
  6064  1762  0086               	movwf	6
  6065  1763  3001               	movlw	1	; select bank2/3
  6066  1764  0087               	movwf	7
  6067  1765  3002               	movlw	2
  6068  1766  0601               	xorwf	1,w
  6069  1767  1D03               	btfss	3,2
  6070  1768  0008               	return
  6071                           
  6072                           ;mcc_generated_files/mtouch/mtouch_button.c: 317:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 318:         (button->counter)++;
  6073  1769  0873               	movf	Button_Tick_helper@button,w
  6074  176A  3E0A               	addlw	10
  6075  176B  0086               	movwf	6
  6076  176C  3001               	movlw	1	; select bank2/3
  6077  176D  0087               	movwf	7
  6078  176E  3001               	movlw	1
  6079  176F  0781               	addwf	1,f
  6080  1770  3141               	addfsr 1,1
  6081  1771  1803               	skipnc
  6082  1772  0A81               	incf	1,f
  6083                           
  6084                           ;mcc_generated_files/mtouch/mtouch_button.c: 319:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  6085  1773  0873               	movf	Button_Tick_helper@button,w
  6086  1774  3E0A               	addlw	10
  6087  1775  0086               	movwf	6
  6088  1776  3001               	movlw	1	; select bank2/3
  6089  1777  0087               	movwf	7
  6090  1778  0016               	moviw fsr1++
  6091  1779  0401               	iorwf	1,w
  6092  177A  1D03               	btfss	3,2
  6093  177B  0008               	return
  6094                           
  6095                           ;mcc_generated_files/mtouch/mtouch_button.c: 320:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 321:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  6096  177C  0873               	movf	Button_Tick_helper@button,w
  6097  177D  3E0A               	addlw	10
  6098  177E  0086               	movwf	6
  6099  177F  3001               	movlw	1	; select bank2/3
  6100  1780  0087               	movwf	7
  6101  1781  30FF               	movlw	255
  6102  1782  3FC0               	movwi [0]fsr1
  6103  1783  30FF               	movlw	255
  6104  1784  3FC1               	movwi [1]fsr1
  6105  1785  0008               	return
  6106  1786                     __end_of_Button_Tick_helper:	
  6107                           
  6108                           	psect	text24
  6109  15BA                     __ptext24:	
  6110 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  6111 ;; Defined at:
  6112 ;;		line 958 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;		None
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;  sensor          1    3[COMMON] PTR struct .
  6117 ;;		 -> mtouch_sensor(36), 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      void 
  6120 ;; Registers used:
  6121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6127 ;;      Params:         0       0       0       0       0       0       0       0
  6128 ;;      Locals:         1       0       0       0       0       0       0       0
  6129 ;;      Temps:          1       0       0       0       0       0       0       0
  6130 ;;      Totals:         2       0       0       0       0       0       0       0
  6131 ;;Total ram usage:        2 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    5
  6134 ;; This function calls:
  6135 ;;		_Sensor_Sampled_Reset
  6136 ;; This function is called by:
  6137 ;;		_MTOUCH_Initialize
  6138 ;;		_MTOUCH_Service_Mainloop
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           
  6143                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  6144  15BA                     _MTOUCH_Sensor_Sampled_ResetAll:	
  6145                           
  6146                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 960:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 961:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[4u -1];sensor++)
  6147                           
  6148                           ;incstack = 0
  6149                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  6150  15BA  3020               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  6151  15BB  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6152  15BC  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6153  15BD  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  6154  15BE                     L2:	
  6155  15BE  303B               	movlw	(low ((_mtouch_sensor| (0+256)+27)))& (0+255)
  6156  15BF  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6157  15C0  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6158  15C1  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6159  15C2  1C03               	btfss	3,0
  6160  15C3  0008               	return
  6161                           
  6162                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 962:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 963:         Sensor_Sampled_Reset(sensor);
  6163  15C4  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6164  15C5  3194  24A0  3195   	fcall	_Sensor_Sampled_Reset
  6165                           
  6166                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964:     }
  6167  15C8  3009               	movlw	9
  6168  15C9  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6169  15CA  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6170  15CB  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  6171  15CC  2DBE               	goto	L2
  6172  15CD                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  6173                           
  6174                           	psect	text25
  6175  14A0                     __ptext25:	
  6176 ;; *************** function _Sensor_Sampled_Reset *****************
  6177 ;; Defined at:
  6178 ;;		line 972 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  sensor          1    wreg     PTR struct .
  6181 ;;		 -> mtouch_sensor(36), 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  sensor          1    1[COMMON] PTR struct .
  6184 ;;		 -> mtouch_sensor(36), 
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      void 
  6187 ;; Registers used:
  6188 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6194 ;;      Params:         0       0       0       0       0       0       0       0
  6195 ;;      Locals:         1       0       0       0       0       0       0       0
  6196 ;;      Temps:          0       0       0       0       0       0       0       0
  6197 ;;      Totals:         1       0       0       0       0       0       0       0
  6198 ;;Total ram usage:        1 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    4
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_MTOUCH_Sensor_Initialize
  6205 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           
  6210                           ;psect for function _Sensor_Sampled_Reset
  6211  14A0                     _Sensor_Sampled_Reset:	
  6212                           
  6213                           ;incstack = 0
  6214                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6215                           ;Sensor_Sampled_Reset@sensor stored from wreg
  6216  14A0  00F1               	movwf	Sensor_Sampled_Reset@sensor
  6217                           
  6218                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 972: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          973: {;mcc_generated_files/mtouch/mtouch_sensor.c: 974:     sensor->sampled = 0;
  6219  14A1  0871               	movf	Sensor_Sampled_Reset@sensor,w
  6220  14A2  3E08               	addlw	8
  6221  14A3  0086               	movwf	6
  6222  14A4  3001               	movlw	1	; select bank2/3
  6223  14A5  0087               	movwf	7
  6224  14A6  1001               	bcf	1,0
  6225  14A7  0008               	return
  6226  14A8                     __end_of_Sensor_Sampled_Reset:	
  6227                           
  6228                           	psect	text26
  6229  15F8                     __ptext26:	
  6230 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  6231 ;; Defined at:
  6232 ;;		line 266 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;		None
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  group           1   39[BANK0 ] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  1    wreg      _Bool 
  6239 ;; Registers used:
  6240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6246 ;;      Params:         0       0       0       0       0       0       0       0
  6247 ;;      Locals:         0       1       0       0       0       0       0       0
  6248 ;;      Temps:          0       1       0       0       0       0       0       0
  6249 ;;      Totals:         0       2       0       0       0       0       0       0
  6250 ;;Total ram usage:        2 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:   10
  6253 ;; This function calls:
  6254 ;;		_Sensor_Service
  6255 ;; This function is called by:
  6256 ;;		_MTOUCH_Service_Mainloop
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           
  6261                           ;psect for function _MTOUCH_Sensor_SampleAll
  6262  15F8                     _MTOUCH_Sensor_SampleAll:	
  6263                           
  6264                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 268:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 269:     for (group = 0; group < 2u; group++)
  6265                           
  6266                           ;incstack = 0
  6267                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6268  15F8  0020               	movlb	0	; select bank0
  6269  15F9  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  6270  15FA                     l6480:	
  6271                           
  6272                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 270:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 271:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  6273  15FA  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  6274  15FB  318E  2631  3195   	fcall	_Sensor_Service
  6275  15FE  3A00               	xorlw	0
  6276  15FF  1903               	skipnz
  6277  1600  2E03               	goto	l6486
  6278                           
  6279                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 272:             return 0;
  6280  1601  3000               	movlw	0
  6281  1602  0008               	return
  6282  1603                     l6486:	
  6283                           
  6284                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 273:     }
  6285  1603  3001               	movlw	1
  6286  1604  0020               	movlb	0	; select bank0
  6287  1605  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  6288  1606  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  6289  1607  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  6290  1608  3002               	movlw	2
  6291  1609  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  6292  160A  1C03               	skipc
  6293  160B  2DFA               	goto	l6480
  6294                           
  6295                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 274:     return 1;
  6296  160C  3001               	movlw	1
  6297  160D  0008               	return
  6298  160E                     __end_of_MTOUCH_Sensor_SampleAll:	
  6299                           
  6300                           	psect	text27
  6301  0E31                     __ptext27:	
  6302 ;; *************** function _Sensor_Service *****************
  6303 ;; Defined at:
  6304 ;;		line 311 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;  scanGroup       1    wreg     unsigned char 
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  6309 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  6310 ;;		 -> mtouch_sensor(36), 
  6311 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  6312 ;;		 -> mtouch_sensor(36), 
  6313 ;;  error           1   35[BANK0 ] enum E2859
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  1    wreg      enum E2859
  6316 ;; Registers used:
  6317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6323 ;;      Params:         0       0       0       0       0       0       0       0
  6324 ;;      Locals:         0       4       0       0       0       0       0       0
  6325 ;;      Temps:          0       3       0       0       0       0       0       0
  6326 ;;      Totals:         0       7       0       0       0       0       0       0
  6327 ;;Total ram usage:        7 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    9
  6330 ;; This function calls:
  6331 ;;		_Sensor_Acquisition
  6332 ;;		_Sensor_DefaultCallback
  6333 ;;		_Sensor_RawSample_Update
  6334 ;;		_Sensor_isEnabled
  6335 ;;		_Sensor_setSampled
  6336 ;; This function is called by:
  6337 ;;		_MTOUCH_Sensor_SampleAll
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function _Sensor_Service
  6343  0E31                     _Sensor_Service:	
  6344                           
  6345                           ;incstack = 0
  6346                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6347                           ;Sensor_Service@scanGroup stored from wreg
  6348  0E31  0020               	movlb	0	; select bank0
  6349  0E32  00C2               	movwf	Sensor_Service@scanGroup
  6350                           
  6351                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 312: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 313:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 314:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 316:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  6352  0E33  0842               	movf	Sensor_Service@scanGroup,w
  6353  0E34  00BF               	movwf	??_Sensor_Service
  6354  0E35  01C0               	clrf	??_Sensor_Service+1
  6355  0E36  35BF               	lslf	??_Sensor_Service,f
  6356  0E37  0DC0               	rlf	??_Sensor_Service+1,f
  6357  0E38  305E               	movlw	low (_sensor_scan_group| (0+32768))
  6358  0E39  073F               	addwf	??_Sensor_Service,w
  6359  0E3A  0084               	movwf	4
  6360  0E3B  3098               	movlw	high (_sensor_scan_group| (0+32768))
  6361  0E3C  3D40               	addwfc	??_Sensor_Service+1,w
  6362  0E3D  0085               	movwf	5
  6363  0E3E  0800               	movf	0,w	;code access
  6364  0E3F  00C1               	movwf	??_Sensor_Service+2
  6365  0E40  0841               	movf	??_Sensor_Service+2,w
  6366  0E41  00C4               	movwf	Sensor_Service@sensor_adc1
  6367                           
  6368                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  6369  0E42  0842               	movf	Sensor_Service@scanGroup,w
  6370  0E43  00BF               	movwf	??_Sensor_Service
  6371  0E44  01C0               	clrf	??_Sensor_Service+1
  6372  0E45  35BF               	lslf	??_Sensor_Service,f
  6373  0E46  0DC0               	rlf	??_Sensor_Service+1,f
  6374  0E47  305F               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  6375  0E48  073F               	addwf	??_Sensor_Service,w
  6376  0E49  0084               	movwf	4
  6377  0E4A  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  6378  0E4B  3D40               	addwfc	??_Sensor_Service+1,w
  6379  0E4C  0085               	movwf	5
  6380  0E4D  0800               	movf	0,w	;code access
  6381  0E4E  00C1               	movwf	??_Sensor_Service+2
  6382  0E4F  0841               	movf	??_Sensor_Service+2,w
  6383  0E50  00C5               	movwf	Sensor_Service@sensor_adc2
  6384                           
  6385                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  6386  0E51  0845               	movf	Sensor_Service@sensor_adc2,w
  6387  0E52  00BF               	movwf	??_Sensor_Service
  6388  0E53  083F               	movf	??_Sensor_Service,w
  6389  0E54  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  6390  0E55  0844               	movf	Sensor_Service@sensor_adc1,w
  6391  0E56  318B  234F  318E   	fcall	_Sensor_Acquisition
  6392  0E59  0020               	movlb	0	; select bank0
  6393  0E5A  00C0               	movwf	??_Sensor_Service+1
  6394  0E5B  0840               	movf	??_Sensor_Service+1,w
  6395  0E5C  00C3               	movwf	Sensor_Service@error
  6396                           
  6397                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 322:     switch(error)
  6398  0E5D  2EA0               	goto	l6438
  6399  0E5E                     l6416:	
  6400                           
  6401                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 326:             if(Sensor_isEnabled(sensor_adc1))
  6402  0E5E  0844               	movf	Sensor_Service@sensor_adc1,w
  6403  0E5F  3195  2573  318E   	fcall	_Sensor_isEnabled
  6404  0E62  3A00               	xorlw	0
  6405  0E63  1903               	skipnz
  6406  0E64  2E7E               	goto	l6426
  6407                           
  6408                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 327:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 332:                 if(!lowpowerActivated)
  6409  0E65  0020               	movlb	0	; select bank0
  6410  0E66  0865               	movf	_lowpowerActivated,w
  6411  0E67  1D03               	btfss	3,2
  6412  0E68  2E6D               	goto	l6422
  6413                           
  6414                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 333:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 334:                     Sensor_RawSample_Update(sensor_adc1);
  6415  0E69  0844               	movf	Sensor_Service@sensor_adc1,w
  6416  0E6A  3197  27AD  318E   	fcall	_Sensor_RawSample_Update
  6417  0E6D                     l6422:	
  6418                           
  6419                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 336:                 Sensor_setSampled(sens
      +                          or_adc1);
  6420  0E6D  0020               	movlb	0	; select bank0
  6421  0E6E  0844               	movf	Sensor_Service@sensor_adc1,w
  6422  0E6F  3194  2498  318E   	fcall	_Sensor_setSampled
  6423                           
  6424                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 callback_sampled(senso
      +                          r_adc1->sensor);
  6425  0E72  0020               	movlb	0	; select bank0
  6426  0E73  0844               	movf	Sensor_Service@sensor_adc1,w
  6427  0E74  0086               	movwf	6
  6428  0E75  3001               	movlw	1	; select bank2/3
  6429  0E76  0087               	movwf	7
  6430  0E77  0801               	movf	1,w
  6431  0E78  00BF               	movwf	??_Sensor_Service
  6432  0E79  083F               	movf	??_Sensor_Service,w
  6433  0E7A  00F1               	movwf	Sensor_DefaultCallback@sensor
  6434  0E7B  3194  242B  318E   	fcall	_Sensor_DefaultCallback
  6435  0E7E                     l6426:	
  6436                           
  6437                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 339:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  6438  0E7E  0020               	movlb	0	; select bank0
  6439  0E7F  0845               	movf	Sensor_Service@sensor_adc2,w
  6440  0E80  3195  2573  318E   	fcall	_Sensor_isEnabled
  6441  0E83  3A00               	xorlw	0
  6442  0E84  1903               	skipnz
  6443  0E85  2EC3               	goto	l6440
  6444                           
  6445                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 340:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 341:                 if(!lowpowerActivated)
  6446  0E86  0020               	movlb	0	; select bank0
  6447  0E87  0865               	movf	_lowpowerActivated,w
  6448  0E88  1D03               	btfss	3,2
  6449  0E89  2E8E               	goto	l6432
  6450                           
  6451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 343:                     Sensor_RawSample_Update(sensor_adc2);
  6452  0E8A  0845               	movf	Sensor_Service@sensor_adc2,w
  6453  0E8B  3197  27AD  318E   	fcall	_Sensor_RawSample_Update
  6454  0E8E                     l6432:	
  6455                           
  6456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345:                 Sensor_setSampled(sens
      +                          or_adc2);
  6457  0E8E  0020               	movlb	0	; select bank0
  6458  0E8F  0845               	movf	Sensor_Service@sensor_adc2,w
  6459  0E90  3194  2498  318E   	fcall	_Sensor_setSampled
  6460                           
  6461                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:                 callback_sampled(senso
      +                          r_adc2->sensor);
  6462  0E93  0020               	movlb	0	; select bank0
  6463  0E94  0845               	movf	Sensor_Service@sensor_adc2,w
  6464  0E95  0086               	movwf	6
  6465  0E96  3001               	movlw	1	; select bank2/3
  6466  0E97  0087               	movwf	7
  6467  0E98  0801               	movf	1,w
  6468  0E99  00BF               	movwf	??_Sensor_Service
  6469  0E9A  083F               	movf	??_Sensor_Service,w
  6470  0E9B  00F1               	movwf	Sensor_DefaultCallback@sensor
  6471  0E9C  3194  242B  318E   	fcall	_Sensor_DefaultCallback
  6472  0E9F  2EC3               	goto	l6440
  6473  0EA0                     l6438:	
  6474  0EA0  0843               	movf	Sensor_Service@error,w
  6475  0EA1  00BF               	movwf	??_Sensor_Service
  6476  0EA2  01C0               	clrf	??_Sensor_Service+1
  6477  0EA3  1BBF               	btfsc	??_Sensor_Service,7
  6478  0EA4  03C0               	decf	??_Sensor_Service+1,f
  6479                           
  6480                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6481                           ; Switch size 1, requested type "simple"
  6482                           ; Number of cases is 2, Range of values is 0 to 255
  6483                           ; switch strategies available:
  6484                           ; Name         Instructions Cycles
  6485                           ; simple_byte            7     4 (average)
  6486                           ; jumptable            260     6 (fixed)
  6487                           ;	Chosen strategy is simple_byte
  6488  0EA5  0840               	movf	??_Sensor_Service+1,w
  6489  0EA6  3A00               	xorlw	0	; case 0
  6490  0EA7  1903               	skipnz
  6491  0EA8  2EAD               	goto	l7094
  6492  0EA9  3AFF               	xorlw	255	; case 255
  6493  0EAA  1903               	skipnz
  6494  0EAB  2EB2               	goto	l7096
  6495  0EAC  2EC3               	goto	l6440
  6496  0EAD                     l7094:	
  6497                           
  6498                           ; Switch size 1, requested type "simple"
  6499                           ; Number of cases is 1, Range of values is 0 to 0
  6500                           ; switch strategies available:
  6501                           ; Name         Instructions Cycles
  6502                           ; simple_byte            4     3 (average)
  6503                           ; direct_byte            8     6 (fixed)
  6504                           ; jumptable            260     6 (fixed)
  6505                           ;	Chosen strategy is simple_byte
  6506  0EAD  083F               	movf	??_Sensor_Service,w
  6507  0EAE  3A00               	xorlw	0	; case 0
  6508  0EAF  1903               	skipnz
  6509  0EB0  2E5E               	goto	l6416
  6510  0EB1  2EC3               	goto	l6440
  6511  0EB2                     l7096:	
  6512                           
  6513                           ; Switch size 1, requested type "simple"
  6514                           ; Number of cases is 5, Range of values is 251 to 255
  6515                           ; switch strategies available:
  6516                           ; Name         Instructions Cycles
  6517                           ; direct_byte           15     5 (fixed)
  6518                           ; simple_byte           16     9 (average)
  6519                           ; jumptable            263     9 (fixed)
  6520                           ;	Chosen strategy is simple_byte
  6521  0EB2  083F               	movf	??_Sensor_Service,w
  6522  0EB3  3AFB               	xorlw	251	; case 251
  6523  0EB4  1903               	skipnz
  6524  0EB5  2EC3               	goto	l6440
  6525  0EB6  3A07               	xorlw	7	; case 252
  6526  0EB7  1903               	skipnz
  6527  0EB8  2EC3               	goto	l6440
  6528  0EB9  3A01               	xorlw	1	; case 253
  6529  0EBA  1903               	skipnz
  6530  0EBB  2EC3               	goto	l6440
  6531  0EBC  3A03               	xorlw	3	; case 254
  6532  0EBD  1903               	skipnz
  6533  0EBE  2EC3               	goto	l6440
  6534  0EBF  3A01               	xorlw	1	; case 255
  6535  0EC0  1903               	skipnz
  6536  0EC1  2EC3               	goto	l6440
  6537  0EC2  2EC3               	goto	l6440
  6538  0EC3                     l6440:	
  6539                           
  6540                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 359:     return error;
  6541  0EC3  0020               	movlb	0	; select bank0
  6542  0EC4  0843               	movf	Sensor_Service@error,w
  6543  0EC5  0008               	return
  6544  0EC6                     __end_of_Sensor_Service:	
  6545                           
  6546                           	psect	text28
  6547  1498                     __ptext28:	
  6548 ;; *************** function _Sensor_setSampled *****************
  6549 ;; Defined at:
  6550 ;;		line 977 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  sensor          1    wreg     PTR struct .
  6553 ;;		 -> mtouch_sensor(36), 
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;  sensor          1    1[COMMON] PTR struct .
  6556 ;;		 -> mtouch_sensor(36), 
  6557 ;; Return value:  Size  Location     Type
  6558 ;;                  1    wreg      void 
  6559 ;; Registers used:
  6560 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6566 ;;      Params:         0       0       0       0       0       0       0       0
  6567 ;;      Locals:         1       0       0       0       0       0       0       0
  6568 ;;      Temps:          0       0       0       0       0       0       0       0
  6569 ;;      Totals:         1       0       0       0       0       0       0       0
  6570 ;;Total ram usage:        1 bytes
  6571 ;; Hardware stack levels used:    1
  6572 ;; Hardware stack levels required when called:    4
  6573 ;; This function calls:
  6574 ;;		Nothing
  6575 ;; This function is called by:
  6576 ;;		_Sensor_Service
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _Sensor_setSampled
  6582  1498                     _Sensor_setSampled:	
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  6586                           ;Sensor_setSampled@sensor stored from wreg
  6587  1498  00F1               	movwf	Sensor_setSampled@sensor
  6588                           
  6589                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 977: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 978
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 979:     sensor->sampled = 1;
  6590  1499  0871               	movf	Sensor_setSampled@sensor,w
  6591  149A  3E08               	addlw	8
  6592  149B  0086               	movwf	6
  6593  149C  3001               	movlw	1	; select bank2/3
  6594  149D  0087               	movwf	7
  6595  149E  1401               	bsf	1,0
  6596  149F  0008               	return
  6597  14A0                     __end_of_Sensor_setSampled:	
  6598                           
  6599                           	psect	text29
  6600  17AD                     __ptext29:	
  6601 ;; *************** function _Sensor_RawSample_Update *****************
  6602 ;; Defined at:
  6603 ;;		line 810 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  sensor          1    wreg     PTR struct .
  6606 ;;		 -> mtouch_sensor(36), 
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;  sensor          1    7[COMMON] PTR struct .
  6609 ;;		 -> mtouch_sensor(36), 
  6610 ;;  adcIndex        1    6[COMMON] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6620 ;;      Params:         0       0       0       0       0       0       0       0
  6621 ;;      Locals:         2       0       0       0       0       0       0       0
  6622 ;;      Temps:          1       0       0       0       0       0       0       0
  6623 ;;      Totals:         3       0       0       0       0       0       0       0
  6624 ;;Total ram usage:        3 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    5
  6627 ;; This function calls:
  6628 ;;		_Sensor_getScanGroupIndex
  6629 ;; This function is called by:
  6630 ;;		_Sensor_Service
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _Sensor_RawSample_Update
  6636  17AD                     _Sensor_RawSample_Update:	
  6637                           
  6638                           ;incstack = 0
  6639                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6640                           ;Sensor_RawSample_Update@sensor stored from wreg
  6641  17AD  00F7               	movwf	Sensor_RawSample_Update@sensor
  6642                           
  6643                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 811: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 812:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  6644  17AE  0877               	movf	Sensor_RawSample_Update@sensor,w
  6645  17AF  3188  2025  3197   	fcall	_Sensor_getScanGroupIndex
  6646  17B2  00F5               	movwf	??_Sensor_RawSample_Update
  6647  17B3  0875               	movf	??_Sensor_RawSample_Update,w
  6648  17B4  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  6649                           
  6650                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 814:     if (INTCONbits.GIE == (uint8_t)1)
  6651  17B5  1F8B               	btfss	11,7	;volatile
  6652  17B6  2FC7               	goto	l4694
  6653                           
  6654                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 815:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 816:         INTCONbits.GIE = (uint8_t)0;
  6655  17B7  138B               	bcf	11,7	;volatile
  6656                           
  6657                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 817:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  6658  17B8  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6659  17B9  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  6660  17BA  0086               	movwf	6
  6661  17BB  0187               	clrf	7
  6662  17BC  0877               	movf	Sensor_RawSample_Update@sensor,w
  6663  17BD  3E06               	addlw	6
  6664  17BE  0084               	movwf	4
  6665  17BF  3001               	movlw	1	; select bank2/3
  6666  17C0  0085               	movwf	5
  6667  17C1  3F40               	moviw [0]fsr1
  6668  17C2  3F80               	movwi [0]fsr0
  6669  17C3  3F41               	moviw [1]fsr1
  6670  17C4  3F81               	movwi [1]fsr0
  6671                           
  6672                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 818:         INTCONbits.GIE = (uint8_t)1;
  6673  17C5  178B               	bsf	11,7	;volatile
  6674                           
  6675                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 819:     }
  6676  17C6  0008               	return
  6677  17C7                     l4694:	
  6678                           
  6679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 821:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 822:         sensor->rawSample = packet_sample[adcIndex];
  6680  17C7  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6681  17C8  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  6682  17C9  0086               	movwf	6
  6683  17CA  0187               	clrf	7
  6684  17CB  0877               	movf	Sensor_RawSample_Update@sensor,w
  6685  17CC  3E06               	addlw	6
  6686  17CD  0084               	movwf	4
  6687  17CE  3001               	movlw	1	; select bank2/3
  6688  17CF  0085               	movwf	5
  6689  17D0  3F40               	moviw [0]fsr1
  6690  17D1  3F80               	movwi [0]fsr0
  6691  17D2  3F41               	moviw [1]fsr1
  6692  17D3  3F81               	movwi [1]fsr0
  6693  17D4  0008               	return
  6694  17D5                     __end_of_Sensor_RawSample_Update:	
  6695                           
  6696                           	psect	text30
  6697  142B                     __ptext30:	
  6698 ;; *************** function _Sensor_DefaultCallback *****************
  6699 ;; Defined at:
  6700 ;;		line 831 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;  sensor          1    1[COMMON] enum E2854
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      void 
  6707 ;; Registers used:
  6708 ;;		None
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6714 ;;      Params:         1       0       0       0       0       0       0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0       0
  6717 ;;      Totals:         1       0       0       0       0       0       0       0
  6718 ;;Total ram usage:        1 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    4
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_Sensor_Service
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           
  6729                           ;psect for function _Sensor_DefaultCallback
  6730  142B                     _Sensor_DefaultCallback:	
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _Sensor_DefaultCallback: []
  6734  142B  0008               	return
  6735  142C                     __end_of_Sensor_DefaultCallback:	
  6736                           
  6737                           	psect	text31
  6738  0B4F                     __ptext31:	
  6739 ;; *************** function _Sensor_Acquisition *****************
  6740 ;; Defined at:
  6741 ;;		line 380 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;  sensor_adc1     1    wreg     PTR struct .
  6744 ;;		 -> mtouch_sensor(36), 
  6745 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  6746 ;;		 -> mtouch_sensor(36), 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  6749 ;;		 -> mtouch_sensor(36), 
  6750 ;;  retry           1   29[BANK0 ] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      enum E2859
  6753 ;; Registers used:
  6754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6760 ;;      Params:         0       1       0       0       0       0       0       0
  6761 ;;      Locals:         0       2       0       0       0       0       0       0
  6762 ;;      Temps:          0       1       0       0       0       0       0       0
  6763 ;;      Totals:         0       4       0       0       0       0       0       0
  6764 ;;Total ram usage:        4 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    8
  6767 ;; This function calls:
  6768 ;;		_Sensor_Acq_ExecutePacket
  6769 ;;		_Sensor_Scanfrequency_Evaluation
  6770 ;;		_Sensor_isActive
  6771 ;;		_Sensor_isCalibrated
  6772 ;;		_Sensor_postAcquisitionProcess
  6773 ;; This function is called by:
  6774 ;;		_Sensor_Service
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           
  6779                           ;psect for function _Sensor_Acquisition
  6780  0B4F                     _Sensor_Acquisition:	
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6784                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  6785  0B4F  0020               	movlb	0	; select bank0
  6786  0B50  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  6787                           
  6788                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 380: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 381: {;mcc_generated_files/mtouch/mtouch_sensor.c: 382:     
      +                          uint8_t retry = (uint8_t)5;
  6789  0B51  3005               	movlw	5
  6790  0B52  00BC               	movwf	??_Sensor_Acquisition
  6791  0B53  083C               	movf	??_Sensor_Acquisition,w
  6792  0B54  00BD               	movwf	Sensor_Acquisition@retry
  6793                           
  6794                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  6795  0B55  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6796  0B56  1D03               	btfss	3,2
  6797  0B57  2B65               	goto	l6278
  6798  0B58  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6799  0B59  1D03               	btfss	3,2
  6800  0B5A  2B65               	goto	l6278
  6801                           
  6802                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 386:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 387:         return MTOUCH_SENSOR_ERROR_invalid_index;
  6803  0B5B  30FF               	movlw	255
  6804  0B5C  0008               	return
  6805  0B5D                     l6272:	
  6806                           
  6807                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 397:         retry--;
  6808  0B5D  3001               	movlw	1
  6809  0B5E  0020               	movlb	0	; select bank0
  6810  0B5F  02BD               	subwf	Sensor_Acquisition@retry,f
  6811                           
  6812                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 398:         if(retry == 0)
  6813  0B60  083D               	movf	Sensor_Acquisition@retry,w
  6814  0B61  1D03               	btfss	3,2
  6815  0B62  2B65               	goto	l6278
  6816                           
  6817                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 399:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 400:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  6818  0B63  30FC               	movlw	252
  6819  0B64  0008               	return
  6820  0B65                     l6278:	
  6821                           
  6822                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 395:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  6823  0B65  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6824  0B66  00BC               	movwf	??_Sensor_Acquisition
  6825  0B67  083C               	movf	??_Sensor_Acquisition,w
  6826  0B68  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  6827  0B69  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6828  0B6A  3180  2058  318B   	fcall	_Sensor_Acq_ExecutePacket
  6829  0B6D  3A00               	xorlw	0
  6830  0B6E  1D03               	skipz
  6831  0B6F  2B5D               	goto	l6272
  6832                           
  6833                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 404:     if(sensor_adc1 != ((void*)0))
  6834  0B70  0020               	movlb	0	; select bank0
  6835  0B71  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6836  0B72  1903               	btfsc	3,2
  6837  0B73  2B78               	goto	l6284
  6838                           
  6839                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 405:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 406:         Sensor_postAcquisitionProcess(sensor_adc1);
  6840  0B74  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6841  0B75  3189  21DB  318B   	fcall	_Sensor_postAcquisitionProcess
  6842  0B78                     l6284:	
  6843                           
  6844                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:     if(sensor_adc2 !=((void*)0))
  6845  0B78  0020               	movlb	0	; select bank0
  6846  0B79  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6847  0B7A  1903               	btfsc	3,2
  6848  0B7B  2B80               	goto	l6288
  6849                           
  6850                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 411:         Sensor_postAcquisitionProcess(sensor_adc2);
  6851  0B7C  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6852  0B7D  3189  21DB  318B   	fcall	_Sensor_postAcquisitionProcess
  6853  0B80                     l6288:	
  6854                           
  6855                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 414:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  6856  0B80  0020               	movlb	0	; select bank0
  6857  0B81  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6858  0B82  3194  24F7  318B   	fcall	_Sensor_isActive
  6859  0B85  3A00               	xorlw	0
  6860  0B86  1903               	skipnz
  6861  0B87  2B90               	goto	l6292
  6862  0B88  0020               	movlb	0	; select bank0
  6863  0B89  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6864  0B8A  3194  24B9  318B   	fcall	_Sensor_isCalibrated
  6865  0B8D  3A00               	xorlw	0
  6866  0B8E  1D03               	skipz
  6867  0B8F  2BA0               	goto	l6296
  6868  0B90                     l6292:	
  6869  0B90  0020               	movlb	0	; select bank0
  6870  0B91  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6871  0B92  3194  24F7  318B   	fcall	_Sensor_isActive
  6872  0B95  3A00               	xorlw	0
  6873  0B96  1903               	skipnz
  6874  0B97  2BA9               	goto	l6300
  6875  0B98  0020               	movlb	0	; select bank0
  6876  0B99  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6877  0B9A  3194  24B9  318B   	fcall	_Sensor_isCalibrated
  6878  0B9D  3A00               	xorlw	0
  6879  0B9E  1903               	skipnz
  6880  0B9F  2BA9               	goto	l6300
  6881  0BA0                     l6296:	
  6882                           
  6883                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 416:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 417:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  6884  0BA0  0020               	movlb	0	; select bank0
  6885  0BA1  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6886  0BA2  00BC               	movwf	??_Sensor_Acquisition
  6887  0BA3  083C               	movf	??_Sensor_Acquisition,w
  6888  0BA4  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  6889  0BA5  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6890  0BA6  318C  2413         	fcall	_Sensor_Scanfrequency_Evaluation
  6891  0BA8  0008               	return
  6892  0BA9                     l6300:	
  6893                           
  6894                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     return MTOUCH_SENSOR_ERROR_none;
  6895  0BA9  3000               	movlw	0
  6896  0BAA  0008               	return
  6897  0BAB                     __end_of_Sensor_Acquisition:	
  6898                           
  6899                           	psect	text32
  6900  09DB                     __ptext32:	
  6901 ;; *************** function _Sensor_postAcquisitionProcess *****************
  6902 ;; Defined at:
  6903 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;  sensor          1    wreg     PTR struct .
  6906 ;;		 -> mtouch_sensor(36), 
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;  sensor          1    9[COMMON] PTR struct .
  6909 ;;		 -> mtouch_sensor(36), 
  6910 ;;  deviation       2    6[COMMON] unsigned short 
  6911 ;;  adcIndex        1    8[COMMON] unsigned char 
  6912 ;; Return value:  Size  Location     Type
  6913 ;;                  1    wreg      void 
  6914 ;; Registers used:
  6915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6916 ;; Tracked objects:
  6917 ;;		On entry : 0/0
  6918 ;;		On exit  : 0/0
  6919 ;;		Unchanged: 0/0
  6920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6921 ;;      Params:         0       0       0       0       0       0       0       0
  6922 ;;      Locals:         4       0       0       0       0       0       0       0
  6923 ;;      Temps:          1       0       0       0       0       0       0       0
  6924 ;;      Totals:         5       0       0       0       0       0       0       0
  6925 ;;Total ram usage:        5 bytes
  6926 ;; Hardware stack levels used:    1
  6927 ;; Hardware stack levels required when called:    5
  6928 ;; This function calls:
  6929 ;;		_Sensor_getScanGroupIndex
  6930 ;;		_Sensor_isEnabled
  6931 ;;		_Sensor_setActive
  6932 ;;		_Sensor_setInactive
  6933 ;;		_abs
  6934 ;; This function is called by:
  6935 ;;		_Sensor_Acquisition
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           
  6940                           ;psect for function _Sensor_postAcquisitionProcess
  6941  09DB                     _Sensor_postAcquisitionProcess:	
  6942                           
  6943                           ;incstack = 0
  6944                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6945                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  6946  09DB  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  6947                           
  6948                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 424: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 425:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 426:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  6949  09DC  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6950  09DD  3188  2025  3189   	fcall	_Sensor_getScanGroupIndex
  6951  09E0  00F5               	movwf	??_Sensor_postAcquisitionProcess
  6952  09E1  0875               	movf	??_Sensor_postAcquisitionProcess,w
  6953  09E2  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  6954                           
  6955                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     if(Sensor_isEnabled(sensor))
  6956  09E3  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6957  09E4  3195  2573  3189   	fcall	_Sensor_isEnabled
  6958  09E7  3A00               	xorlw	0
  6959  09E8  1903               	skipnz
  6960  09E9  2A02               	goto	l4552
  6961                           
  6962                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  6963  09EA  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6964  09EB  3E06               	addlw	6
  6965  09EC  0086               	movwf	6
  6966  09ED  3001               	movlw	1	; select bank2/3
  6967  09EE  0087               	movwf	7
  6968  09EF  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  6969  09F0  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  6970  09F1  0084               	movwf	4
  6971  09F2  0185               	clrf	5
  6972  09F3  3F40               	moviw [0]fsr1
  6973  09F4  0200               	subwf	0,w
  6974  09F5  00F1               	movwf	abs@a
  6975  09F6  3101               	addfsr 0,1
  6976  09F7  3F41               	moviw [1]fsr1
  6977  09F8  3B00               	subwfb	0,w
  6978  09F9  00F2               	movwf	abs@a+1
  6979  09FA  3196  263B  3189   	fcall	_abs
  6980  09FD  0872               	movf	?_abs+1,w
  6981  09FE  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  6982  09FF  0871               	movf	?_abs,w
  6983  0A00  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  6984  0A01  2A04               	goto	l4554
  6985  0A02                     l4552:	
  6986                           
  6987                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 431:         deviation = 0;
  6988  0A02  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  6989  0A03  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  6990  0A04                     l4554:	
  6991                           
  6992                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     if(deviation > 100u)
  6993  0A04  3000               	movlw	0
  6994  0A05  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  6995  0A06  3065               	movlw	101
  6996  0A07  1903               	skipnz
  6997  0A08  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  6998  0A09  1C03               	skipc
  6999  0A0A  2A0F               	goto	l4558
  7000                           
  7001                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 434:         Sensor_setActive(sensor);
  7002  0A0B  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  7003  0A0C  3194  2488         	fcall	_Sensor_setActive
  7004  0A0E  0008               	return
  7005  0A0F                     l4558:	
  7006                           
  7007                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:         Sensor_setInactive(sensor);
  7008  0A0F  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  7009  0A10  3194  2490         	fcall	_Sensor_setInactive
  7010  0A12  0008               	return
  7011  0A13                     __end_of_Sensor_postAcquisitionProcess:	
  7012                           
  7013                           	psect	text33
  7014  1490                     __ptext33:	
  7015 ;; *************** function _Sensor_setInactive *****************
  7016 ;; Defined at:
  7017 ;;		line 885 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  sensor          1    wreg     PTR struct .
  7020 ;;		 -> mtouch_sensor(36), 
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;  sensor          1    1[COMMON] PTR struct .
  7023 ;;		 -> mtouch_sensor(36), 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  1    wreg      void 
  7026 ;; Registers used:
  7027 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7033 ;;      Params:         0       0       0       0       0       0       0       0
  7034 ;;      Locals:         1       0       0       0       0       0       0       0
  7035 ;;      Temps:          0       0       0       0       0       0       0       0
  7036 ;;      Totals:         1       0       0       0       0       0       0       0
  7037 ;;Total ram usage:        1 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:    4
  7040 ;; This function calls:
  7041 ;;		Nothing
  7042 ;; This function is called by:
  7043 ;;		_Sensor_postAcquisitionProcess
  7044 ;; This function uses a non-reentrant model
  7045 ;;
  7046                           
  7047                           
  7048                           ;psect for function _Sensor_setInactive
  7049  1490                     _Sensor_setInactive:	
  7050                           
  7051                           ;incstack = 0
  7052                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7053                           ;Sensor_setInactive@sensor stored from wreg
  7054  1490  00F1               	movwf	Sensor_setInactive@sensor
  7055                           
  7056                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 88
      +                          6: {;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     sensor->active = 0;
  7057  1491  0871               	movf	Sensor_setInactive@sensor,w
  7058  1492  3E08               	addlw	8
  7059  1493  0086               	movwf	6
  7060  1494  3001               	movlw	1	; select bank2/3
  7061  1495  0087               	movwf	7
  7062  1496  1081               	bcf	1,1
  7063  1497  0008               	return
  7064  1498                     __end_of_Sensor_setInactive:	
  7065                           
  7066                           	psect	text34
  7067  1488                     __ptext34:	
  7068 ;; *************** function _Sensor_setActive *****************
  7069 ;; Defined at:
  7070 ;;		line 880 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;  sensor          1    wreg     PTR struct .
  7073 ;;		 -> mtouch_sensor(36), 
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;  sensor          1    1[COMMON] PTR struct .
  7076 ;;		 -> mtouch_sensor(36), 
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  1    wreg      void 
  7079 ;; Registers used:
  7080 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7086 ;;      Params:         0       0       0       0       0       0       0       0
  7087 ;;      Locals:         1       0       0       0       0       0       0       0
  7088 ;;      Temps:          0       0       0       0       0       0       0       0
  7089 ;;      Totals:         1       0       0       0       0       0       0       0
  7090 ;;Total ram usage:        1 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    4
  7093 ;; This function calls:
  7094 ;;		Nothing
  7095 ;; This function is called by:
  7096 ;;		_Sensor_postAcquisitionProcess
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           
  7101                           ;psect for function _Sensor_setActive
  7102  1488                     _Sensor_setActive:	
  7103                           
  7104                           ;incstack = 0
  7105                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7106                           ;Sensor_setActive@sensor stored from wreg
  7107  1488  00F1               	movwf	Sensor_setActive@sensor
  7108                           
  7109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 880: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 881:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 882:     sensor->active = 1;
  7110  1489  0871               	movf	Sensor_setActive@sensor,w
  7111  148A  3E08               	addlw	8
  7112  148B  0086               	movwf	6
  7113  148C  3001               	movlw	1	; select bank2/3
  7114  148D  0087               	movwf	7
  7115  148E  1481               	bsf	1,1
  7116  148F  0008               	return
  7117  1490                     __end_of_Sensor_setActive:	
  7118                           
  7119                           	psect	text35
  7120  0C13                     __ptext35:	
  7121 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  7122 ;; Defined at:
  7123 ;;		line 741 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;  sensor_adc1     1    wreg     PTR struct .
  7126 ;;		 -> mtouch_sensor(36), 
  7127 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  7128 ;;		 -> mtouch_sensor(36), 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  7131 ;;		 -> mtouch_sensor(36), 
  7132 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  7133 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  7134 ;;  i               1   26[BANK0 ] unsigned char 
  7135 ;;  retry           1   21[BANK0 ] unsigned char 
  7136 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  7137 ;; Return value:  Size  Location     Type
  7138 ;;                  1    wreg      enum E2859
  7139 ;; Registers used:
  7140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7141 ;; Tracked objects:
  7142 ;;		On entry : 0/0
  7143 ;;		On exit  : 0/0
  7144 ;;		Unchanged: 0/0
  7145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7146 ;;      Params:         0       1       0       0       0       0       0       0
  7147 ;;      Locals:         0      10       0       0       0       0       0       0
  7148 ;;      Temps:          0       2       0       0       0       0       0       0
  7149 ;;      Totals:         0      13       0       0       0       0       0       0
  7150 ;;Total ram usage:       13 bytes
  7151 ;; Hardware stack levels used:    1
  7152 ;; Hardware stack levels required when called:    7
  7153 ;; This function calls:
  7154 ;;		_Sensor_Acq_ExecutePacket
  7155 ;; This function is called by:
  7156 ;;		_Sensor_Acquisition
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           
  7161                           ;psect for function _Sensor_Scanfrequency_Evaluation
  7162  0C13                     _Sensor_Scanfrequency_Evaluation:	
  7163                           
  7164                           ;incstack = 0
  7165                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  7166                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  7167  0C13  0020               	movlb	0	; select bank0
  7168  0C14  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  7169                           
  7170                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 741: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 742: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 743:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 745:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 746:     mtouch_sensor_sampleperiod_t best_sample_period;
  7171  0C15  0861               	movf	_packet_noise+1,w
  7172  0C16  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  7173  0C17  0860               	movf	_packet_noise,w
  7174  0C18  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7175  0C19  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  7176  0C1A  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  7177  0C1B  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  7178  0C1C  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  7179  0C1D  0860               	movf	_packet_noise,w
  7180  0C1E  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  7181  0C1F  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  7182  0C20  0861               	movf	_packet_noise+1,w
  7183  0C21  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  7184  0C22  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  7185                           
  7186                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 751:     best_sample_period = sample_period
      +                          ;
  7187  0C23  086E               	movf	_sample_period,w
  7188  0C24  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7189  0C25  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7190  0C26  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  7191                           
  7192                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 752:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  7193  0C27  085D               	movf	_packet_sample+1,w
  7194  0C28  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  7195  0C29  085C               	movf	_packet_sample,w
  7196  0C2A  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  7197                           
  7198                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 753:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  7199  0C2B  085F               	movf	_packet_sample+3,w
  7200  0C2C  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  7201  0C2D  085E               	movf	_packet_sample+2,w
  7202  0C2E  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  7203                           
  7204                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  7205  0C2F  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  7206  0C30                     l6204:	
  7207                           
  7208                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 757:         sample_period += frequency_hop[i];
  7209  0C30  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  7210  0C31  3E09               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  7211  0C32  0084               	movwf	4
  7212  0C33  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  7213  0C34  1803               	skipnc
  7214  0C35  3E01               	addlw	1
  7215  0C36  0085               	movwf	5
  7216  0C37  0800               	movf	0,w	;code access
  7217  0C38  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7218  0C39  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7219  0C3A  07EE               	addwf	_sample_period,f
  7220                           
  7221                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  7222  0C3B  30AE               	movlw	174
  7223  0C3C  026E               	subwf	_sample_period,w
  7224  0C3D  1803               	skipnc
  7225  0C3E  2C43               	goto	l6212
  7226                           
  7227                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 765:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  7228  0C3F  30AE               	movlw	174
  7229  0C40  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7230  0C41  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7231  0C42  07EE               	addwf	_sample_period,f
  7232  0C43                     l6212:	
  7233                           
  7234                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 768:         retry = (uint8_t)5;
  7235  0C43  3005               	movlw	5
  7236  0C44  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7237  0C45  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7238  0C46  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  7239  0C47                     l6220:	
  7240                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  7241                           
  7242                           
  7243                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  7244  0C47  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  7245  0C48  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7246  0C49  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7247  0C4A  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  7248  0C4B  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  7249  0C4C  3180  2058  318C   	fcall	_Sensor_Acq_ExecutePacket
  7250  0C4F  3A00               	xorlw	0
  7251  0C50  1903               	btfsc	3,2
  7252  0C51  2C5A               	goto	l6222
  7253                           
  7254                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 772:             retry--;
  7255  0C52  3001               	movlw	1
  7256  0C53  0020               	movlb	0	; select bank0
  7257  0C54  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  7258                           
  7259                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 773:             if(retry == 0)
  7260  0C55  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  7261  0C56  1D03               	btfss	3,2
  7262  0C57  2C47               	goto	l6220
  7263                           
  7264                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 775:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  7265  0C58  30FC               	movlw	252
  7266  0C59  0008               	return
  7267  0C5A                     l6222:	
  7268                           
  7269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 779:         if(packet_noise_Max < packet_n
      +                          oise)
  7270  0C5A  0020               	movlb	0	; select bank0
  7271  0C5B  0861               	movf	_packet_noise+1,w
  7272  0C5C  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  7273  0C5D  1D03               	skipz
  7274  0C5E  2C61               	goto	u4725
  7275  0C5F  0860               	movf	_packet_noise,w
  7276  0C60  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  7277  0C61                     u4725:	
  7278  0C61  1803               	skipnc
  7279  0C62  2C73               	goto	l6226
  7280                           
  7281                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 781:             packet_noise_Max = packet_noise;
  7282  0C63  0861               	movf	_packet_noise+1,w
  7283  0C64  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  7284  0C65  0860               	movf	_packet_noise,w
  7285  0C66  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  7286                           
  7287                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:             best_sample_period = sampl
      +                          e_period;
  7288  0C67  086E               	movf	_sample_period,w
  7289  0C68  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7290  0C69  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7291  0C6A  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  7292                           
  7293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 783:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  7294  0C6B  085D               	movf	_packet_sample+1,w
  7295  0C6C  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  7296  0C6D  085C               	movf	_packet_sample,w
  7297  0C6E  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  7298                           
  7299                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  7300  0C6F  085F               	movf	_packet_sample+3,w
  7301  0C70  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  7302  0C71  085E               	movf	_packet_sample+2,w
  7303  0C72  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  7304  0C73                     l6226:	
  7305                           
  7306                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 786:     }
  7307  0C73  3001               	movlw	1
  7308  0C74  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7309  0C75  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7310  0C76  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  7311  0C77  3005               	movlw	5
  7312  0C78  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  7313  0C79  1C03               	skipc
  7314  0C7A  2C30               	goto	l6204
  7315                           
  7316                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 788:     sample_period = best_sample_period
      +                          ;
  7317  0C7B  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  7318  0C7C  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7319  0C7D  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7320  0C7E  00EE               	movwf	_sample_period
  7321                           
  7322                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  7323  0C7F  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  7324  0C80  00DD               	movwf	_packet_sample+1
  7325  0C81  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  7326  0C82  00DC               	movwf	_packet_sample
  7327                           
  7328                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  7329  0C83  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  7330  0C84  00DF               	movwf	_packet_sample+3
  7331  0C85  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  7332  0C86  00DE               	movwf	_packet_sample+2
  7333                           
  7334                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792:     return MTOUCH_SENSOR_ERROR_none;
  7335  0C87  3000               	movlw	0
  7336  0C88  0008               	return
  7337  0C89                     __end_of_Sensor_Scanfrequency_Evaluation:	
  7338                           
  7339                           	psect	text36
  7340  0058                     __ptext36:	
  7341 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  7342 ;; Defined at:
  7343 ;;		line 479 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;  sensor_adc1     1    wreg     PTR struct .
  7346 ;;		 -> mtouch_sensor(36), 
  7347 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  7348 ;;		 -> mtouch_sensor(36), 
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  7351 ;;		 -> mtouch_sensor(36), 
  7352 ;;  last_b          2   10[BANK0 ] unsigned short 
  7353 ;;  last_a          2    8[BANK0 ] unsigned short 
  7354 ;;  packet_count    1   12[BANK0 ] unsigned char 
  7355 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  7356 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  7357 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  7358 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  7359 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  7360 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  7361 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      enum E2859
  7364 ;; Registers used:
  7365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7371 ;;      Params:         1       0       0       0       0       0       0       0
  7372 ;;      Locals:         0      13       0       0       0       0       0       0
  7373 ;;      Temps:          0       1       0       0       0       0       0       0
  7374 ;;      Totals:         1      14       0       0       0       0       0       0
  7375 ;;Total ram usage:       15 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    6
  7378 ;; This function calls:
  7379 ;;		_MTOUCH_Sensor_Scan_Initialize
  7380 ;;		_Sensor_autoCalibration
  7381 ;;		_Sensor_isActive
  7382 ;;		_Sensor_isCalibrated
  7383 ;;		_Sensor_isEnabled
  7384 ;;		_Sensor_loadADCSettings
  7385 ;;		_TMR2_LoadPeriodRegister
  7386 ;;		_TMR2_StartTimer
  7387 ;;		_TMR2_StopTimer
  7388 ;;		_abs
  7389 ;; This function is called by:
  7390 ;;		_Sensor_Acquisition
  7391 ;;		_Sensor_Scanfrequency_Evaluation
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           
  7396                           ;psect for function _Sensor_Acq_ExecutePacket
  7397  0058                     _Sensor_Acq_ExecutePacket:	
  7398                           
  7399                           ;incstack = 0
  7400                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7401                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  7402  0058  0020               	movlb	0	; select bank0
  7403  0059  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  7404                           
  7405                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 484:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  7406  005A  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  7407  005B  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  7408                           
  7409                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  7410  005C  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  7411  005D  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  7412                           
  7413                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 486:     uint8_t activeSensor = 0;
  7414  005E  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7415                           
  7416                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 489:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 495:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  7417  005F  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7418  0060  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7419                           
  7420                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  7421  0061  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7422  0062  1903               	btfsc	3,2
  7423  0063  289E               	goto	l5992
  7424  0064  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7425  0065  1903               	btfsc	3,2
  7426  0066  289E               	goto	l5992
  7427                           
  7428                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 497:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 498:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  7429  0067  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7430  0068  3E08               	addlw	8
  7431  0069  0086               	movwf	6
  7432  006A  3001               	movlw	1	; select bank2/3
  7433  006B  0087               	movwf	7
  7434  006C  1981               	btfsc	1,3
  7435  006D  287E               	goto	l5974
  7436  006E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7437  006F  3E08               	addlw	8
  7438  0070  0086               	movwf	6
  7439  0071  3001               	movlw	1	; select bank2/3
  7440  0072  0087               	movwf	7
  7441  0073  1D81               	btfss	1,3
  7442  0074  287E               	goto	l5974
  7443                           
  7444                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 500:             sensor_adc1->enabled = 1;
  7445  0075  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7446  0076  3E08               	addlw	8
  7447  0077  0086               	movwf	6
  7448  0078  3001               	movlw	1	; select bank2/3
  7449  0079  0087               	movwf	7
  7450  007A  1581               	bsf	1,3
  7451                           
  7452                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:             sensor1ForceEnabled = 1;
  7453  007B  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7454  007C  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  7455                           
  7456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 502:         }
  7457  007D  28B3               	goto	l6016
  7458  007E                     l5974:	
  7459  007E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7460  007F  3E08               	addlw	8
  7461  0080  0086               	movwf	6
  7462  0081  3001               	movlw	1	; select bank2/3
  7463  0082  0087               	movwf	7
  7464  0083  1981               	btfsc	1,3
  7465  0084  2895               	goto	l5982
  7466  0085  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7467  0086  3E08               	addlw	8
  7468  0087  0086               	movwf	6
  7469  0088  3001               	movlw	1	; select bank2/3
  7470  0089  0087               	movwf	7
  7471  008A  1D81               	btfss	1,3
  7472  008B  2895               	goto	l5982
  7473                           
  7474                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 504:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 505:             sensor_adc2->enabled = 1;
  7475  008C  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7476  008D  3E08               	addlw	8
  7477  008E  0086               	movwf	6
  7478  008F  3001               	movlw	1	; select bank2/3
  7479  0090  0087               	movwf	7
  7480  0091  1581               	bsf	1,3
  7481                           
  7482                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 506:             sensor2ForceEnabled = 1;
  7483  0092  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7484  0093  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  7485                           
  7486                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:         }
  7487  0094  28B3               	goto	l6016
  7488  0095                     l5982:	
  7489  0095  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7490  0096  3E08               	addlw	8
  7491  0097  0086               	movwf	6
  7492  0098  3001               	movlw	1	; select bank2/3
  7493  0099  0087               	movwf	7
  7494  009A  1981               	btfsc	1,3
  7495  009B  28B3               	goto	l6016
  7496  009C                     l5984:	
  7497  009C  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7498  009D  28AB               	goto	L4
  7499  009E                     l5992:	
  7500                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 515:     }
  7501                           
  7502  009E  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7503  009F  1D03               	btfss	3,2
  7504  00A0  28A4               	goto	l6004
  7505  00A1  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7506  00A2  1D03               	btfss	3,2
  7507  00A3  289C               	goto	l5984
  7508  00A4                     l6004:	
  7509                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 517:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 518:         if(sensor_adc2->enabled == 0)
  7510                           
  7511  00A4  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7512  00A5  1903               	btfsc	3,2
  7513  00A6  28B3               	goto	l6016
  7514  00A7  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7515  00A8  1D03               	btfss	3,2
  7516  00A9  28B3               	goto	l6016
  7517                           
  7518                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 527:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 528:         if(sensor_adc1->enabled == 0)
  7519  00AA  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7520  00AB                     L4:	
  7521  00AB  3E08               	addlw	8
  7522  00AC  0086               	movwf	6
  7523  00AD  3001               	movlw	1	; select bank2/3
  7524  00AE  0087               	movwf	7
  7525  00AF  1981               	btfsc	1,3
  7526  00B0  28B3               	goto	l6016
  7527  00B1                     l5986:	
  7528                           
  7529                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 510:             return MTOUCH_SENSOR_ERROR_none;
  7530  00B1  3000               	movlw	0
  7531  00B2  0008               	return
  7532  00B3                     l6016:	
  7533                           
  7534                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     if(Sensor_isActive(sensor_adc2))
  7535  00B3  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7536  00B4  3194  24F7  3180   	fcall	_Sensor_isActive
  7537  00B7  3A00               	xorlw	0
  7538  00B8  1903               	skipnz
  7539  00B9  28BD               	goto	l6020
  7540                           
  7541                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         activeSensor = 1;
  7542  00BA  0020               	movlb	0	; select bank0
  7543  00BB  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7544  00BC  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  7545  00BD                     l6020:	
  7546                           
  7547                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     ADCOMCON_temp = ADCOMCON;
  7548  00BD  002E               	movlb	14	; select bank14
  7549  00BE  0812               	movf	18,w	;volatile
  7550  00BF  0020               	movlb	0	; select bank0
  7551  00C0  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7552  00C1  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7553  00C2  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  7554                           
  7555                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:     AD1CON2_temp = AD1CON2;
  7556  00C3  002E               	movlb	14	; select bank14
  7557  00C4  0813               	movf	19,w	;volatile
  7558  00C5  0020               	movlb	0	; select bank0
  7559  00C6  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7560  00C7  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7561  00C8  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  7562                           
  7563                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:     AD2CON2_temp = AD2CON2;
  7564  00C9  002F               	movlb	15	; select bank15
  7565  00CA  0813               	movf	19,w	;volatile
  7566  00CB  0020               	movlb	0	; select bank0
  7567  00CC  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7568  00CD  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7569  00CE  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  7570                           
  7571                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     MTOUCH_Sensor_Scan_Initialize();
  7572  00CF  3195  2541  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  7573                           
  7574                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     if(sensor_adc1!=((void*)0))
  7575  00D2  0020               	movlb	0	; select bank0
  7576  00D3  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7577  00D4  1903               	btfsc	3,2
  7578  00D5  28E9               	goto	l6036
  7579                           
  7580                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7581  00D6  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7582  00D7  3E04               	addlw	4
  7583  00D8  0086               	movwf	6
  7584  00D9  3001               	movlw	1	; select bank2/3
  7585  00DA  0087               	movwf	7
  7586  00DB  0801               	movf	1,w
  7587  00DC  3EFF               	addlw	255
  7588  00DD  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7589  00DE  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7590  00DF  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7591                           
  7592                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 0;
  7593  00E0  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7594                           
  7595                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b01000000;
  7596  00E1  3040               	movlw	64
  7597  00E2  002E               	movlb	14	; select bank14
  7598  00E3  0098               	movwf	24	;volatile
  7599                           
  7600                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b00000000;
  7601  00E4  002F               	movlb	15	; select bank15
  7602  00E5  0198               	clrf	24	;volatile
  7603                           
  7604                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  7605  00E6  0022               	movlb	2	; select bank2
  7606  00E7  101D               	bcf	29,0	;volatile
  7607                           
  7608                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 561:     }
  7609  00E8  28FC               	goto	l6046
  7610  00E9                     l6036:	
  7611                           
  7612                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 564:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7613  00E9  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7614  00EA  3E04               	addlw	4
  7615  00EB  0086               	movwf	6
  7616  00EC  3001               	movlw	1	; select bank2/3
  7617  00ED  0087               	movwf	7
  7618  00EE  0801               	movf	1,w
  7619  00EF  3EFF               	addlw	255
  7620  00F0  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7621  00F1  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7622  00F2  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7623                           
  7624                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         ADxIF_flag = 1;
  7625  00F3  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7626  00F4  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  7627                           
  7628                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         AAD1GRD = 0b00000000;
  7629  00F5  002E               	movlb	14	; select bank14
  7630  00F6  0198               	clrf	24	;volatile
  7631                           
  7632                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:         AAD2GRD = 0b01000000;
  7633  00F7  3040               	movlw	64
  7634  00F8  002F               	movlb	15	; select bank15
  7635  00F9  0098               	movwf	24	;volatile
  7636                           
  7637                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:         APFCONbits.GRDASEL = 0x1;
  7638  00FA  0022               	movlb	2	; select bank2
  7639  00FB  141D               	bsf	29,0	;volatile
  7640  00FC                     l6046:	
  7641                           
  7642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  7643  00FC  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7644  00FD  0020               	movlb	0	; select bank0
  7645  00FE  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7646  00FF  3184  24F5  3180   	fcall	_Sensor_loadADCSettings
  7647                           
  7648                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  7649  0102  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7650  0103  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  7651  0104  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7652  0105  3184  24F5  3180   	fcall	_Sensor_loadADCSettings
  7653                           
  7654                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:     sensor_globalFlags.done = 0;
  7655  0108  0020               	movlb	0	; select bank0
  7656  0109  1064               	bcf	_sensor_globalFlags,0	;volatile
  7657                           
  7658                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     sensor_globalFlags.error = 0;
  7659  010A  1164               	bcf	_sensor_globalFlags,2	;volatile
  7660                           
  7661                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 576:     sensor_globalFlags.interrupted = 0
      +                          ;
  7662  010B  11E4               	bcf	_sensor_globalFlags,3	;volatile
  7663                           
  7664                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  7665  010C  086E               	movf	_sample_period,w
  7666  010D  3194  2445  3180   	fcall	_TMR2_LoadPeriodRegister
  7667                           
  7668                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 579:     TMR2_StartTimer();
  7669  0110  3194  2432  3180   	fcall	_TMR2_StartTimer
  7670                           
  7671                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:     packet_noise = 0;
  7672  0113  0020               	movlb	0	; select bank0
  7673  0114  01E0               	clrf	_packet_noise
  7674  0115  01E1               	clrf	_packet_noise+1
  7675  0116                     l6062:	
  7676                           
  7677                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 584:         if(ADxIF_flag == 0)
  7678  0116  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  7679  0117  1D03               	btfss	3,2
  7680  0118  291F               	goto	l874
  7681                           
  7682                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 586:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7683  0119  1F11               	btfss	17,6	;volatile
  7684  011A  10E4               	bcf	_sensor_globalFlags,1	;volatile
  7685  011B                     l876:	
  7686  011B  1F11               	btfss	17,6	;volatile
  7687  011C  291B               	goto	l876
  7688                           
  7689                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588:             PIR1bits.AD1IF = 0;
  7690  011D  1311               	bcf	17,6	;volatile
  7691                           
  7692                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         }
  7693  011E  2925               	goto	l6070
  7694  011F                     l874:	
  7695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         else
  7696                           
  7697                           
  7698                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 592:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7699  011F  1B12               	btfsc	18,6	;volatile
  7700  0120  2922               	goto	l881
  7701  0121  10E4               	bcf	_sensor_globalFlags,1	;volatile
  7702  0122                     l881:	
  7703  0122  1F12               	btfss	18,6	;volatile
  7704  0123  2922               	goto	l881
  7705                           
  7706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:             PIR2bits.AD2IF = 0;
  7707  0124  1312               	bcf	18,6	;volatile
  7708  0125                     l6070:	
  7709                           
  7710                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:         AAD1GRD ^= 0b00100001;
  7711  0125  3021               	movlw	33
  7712  0126  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7713  0127  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7714  0128  002E               	movlb	14	; select bank14
  7715  0129  0698               	xorwf	24,f	;volatile
  7716                           
  7717                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:         AAD2GRD ^= 0b00100001;
  7718  012A  3021               	movlw	33
  7719  012B  0020               	movlb	0	; select bank0
  7720  012C  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7721  012D  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7722  012E  002F               	movlb	15	; select bank15
  7723  012F  0698               	xorwf	24,f	;volatile
  7724                           
  7725                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:         AAD1CON3 ^= 0b11000000;
  7726  0130  30C0               	movlw	192
  7727  0131  0020               	movlb	0	; select bank0
  7728  0132  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7729  0133  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7730  0134  002E               	movlb	14	; select bank14
  7731  0135  0694               	xorwf	20,f	;volatile
  7732                           
  7733                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:         AAD2CON3 ^= 0b11000000;
  7734  0136  30C0               	movlw	192
  7735  0137  0020               	movlb	0	; select bank0
  7736  0138  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7737  0139  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7738  013A  002F               	movlb	15	; select bank15
  7739  013B  0694               	xorwf	20,f	;volatile
  7740                           
  7741                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:         if ((packet_counter & 0x01) ==
      +                           0)
  7742  013C  0020               	movlb	0	; select bank0
  7743  013D  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  7744  013E  2985               	goto	l6086
  7745                           
  7746                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 603:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 604:             packet_sample[0] += AAD1RES0;
  7747  013F  002E               	movlb	14	; select bank14
  7748  0140  081A               	movf	26,w	;volatile
  7749  0141  0020               	movlb	0	; select bank0
  7750  0142  07DC               	addwf	_packet_sample,f
  7751  0143  002E               	movlb	14	; select bank14
  7752  0144  081B               	movf	27,w	;volatile
  7753  0145  0020               	movlb	0	; select bank0
  7754  0146  3DDD               	addwfc	_packet_sample+1,f
  7755                           
  7756                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 605:             packet_sample[1] += AAD2RE
      +                          S0;
  7757  0147  002F               	movlb	15	; select bank15
  7758  0148  081A               	movf	26,w	;volatile
  7759  0149  0020               	movlb	0	; select bank0
  7760  014A  07DE               	addwf	_packet_sample+2,f
  7761  014B  002F               	movlb	15	; select bank15
  7762  014C  081B               	movf	27,w	;volatile
  7763  014D  0020               	movlb	0	; select bank0
  7764  014E  3DDF               	addwfc	_packet_sample+3,f
  7765                           
  7766                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:             if(activeSensor ==0)
  7767  014F  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7768  0150  1D03               	btfss	3,2
  7769  0151  296A               	goto	l6082
  7770                           
  7771                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 607:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 608:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  7772  0152  002E               	movlb	14	; select bank14
  7773  0153  081A               	movf	26,w	;volatile
  7774  0154  0020               	movlb	0	; select bank0
  7775  0155  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7776  0156  00F1               	movwf	abs@a
  7777  0157  002E               	movlb	14	; select bank14
  7778  0158  081B               	movf	27,w	;volatile
  7779  0159  0020               	movlb	0	; select bank0
  7780  015A  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7781  015B  00F2               	movwf	abs@a+1
  7782  015C  3196  263B  3180   	fcall	_abs
  7783  015F  0871               	movf	?_abs,w
  7784  0160  0020               	movlb	0	; select bank0
  7785  0161  07E0               	addwf	_packet_noise,f
  7786  0162  0872               	movf	?_abs+1,w
  7787  0163  3DE1               	addwfc	_packet_noise+1,f
  7788                           
  7789                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 609:                 last_b = AAD1RES0;
  7790  0164  002E               	movlb	14	; select bank14
  7791  0165  081B               	movf	27,w	;volatile
  7792  0166  0020               	movlb	0	; select bank0
  7793  0167  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7794  0168  002E               	movlb	14	; select bank14
  7795  0169  2981               	goto	L3
  7796  016A                     l6082:	
  7797                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:             }
  7798                           
  7799                           
  7800                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 613:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  7801  016A  002F               	movlb	15	; select bank15
  7802  016B  081A               	movf	26,w	;volatile
  7803  016C  0020               	movlb	0	; select bank0
  7804  016D  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7805  016E  00F1               	movwf	abs@a
  7806  016F  002F               	movlb	15	; select bank15
  7807  0170  081B               	movf	27,w	;volatile
  7808  0171  0020               	movlb	0	; select bank0
  7809  0172  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7810  0173  00F2               	movwf	abs@a+1
  7811  0174  3196  263B  3180   	fcall	_abs
  7812  0177  0871               	movf	?_abs,w
  7813  0178  0020               	movlb	0	; select bank0
  7814  0179  07E0               	addwf	_packet_noise,f
  7815  017A  0872               	movf	?_abs+1,w
  7816  017B  3DE1               	addwfc	_packet_noise+1,f
  7817                           
  7818                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:                 last_b = AAD2RES0;
  7819  017C  002F               	movlb	15	; select bank15
  7820  017D  081B               	movf	27,w	;volatile
  7821  017E  0020               	movlb	0	; select bank0
  7822  017F  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7823  0180  002F               	movlb	15	; select bank15
  7824  0181                     L3:	
  7825  0181  081A               	movf	26,w	;volatile
  7826  0182  0020               	movlb	0	; select bank0
  7827  0183  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  7828  0184  29B9               	goto	l6098
  7829  0185                     l6086:	
  7830                           
  7831                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 618:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 619:             packet_sample[0] -= AAD1RES0;
  7832  0185  002E               	movlb	14	; select bank14
  7833  0186  081A               	movf	26,w	;volatile
  7834  0187  0020               	movlb	0	; select bank0
  7835  0188  02DC               	subwf	_packet_sample,f
  7836  0189  002E               	movlb	14	; select bank14
  7837  018A  081B               	movf	27,w	;volatile
  7838  018B  0020               	movlb	0	; select bank0
  7839  018C  3BDD               	subwfb	_packet_sample+1,f
  7840                           
  7841                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:             packet_sample[1] -= AAD2RE
      +                          S0;
  7842  018D  002F               	movlb	15	; select bank15
  7843  018E  081A               	movf	26,w	;volatile
  7844  018F  0020               	movlb	0	; select bank0
  7845  0190  02DE               	subwf	_packet_sample+2,f
  7846  0191  002F               	movlb	15	; select bank15
  7847  0192  081B               	movf	27,w	;volatile
  7848  0193  0020               	movlb	0	; select bank0
  7849  0194  3BDF               	subwfb	_packet_sample+3,f
  7850                           
  7851                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:             if(activeSensor ==0)
  7852  0195  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7853  0196  1D03               	btfss	3,2
  7854  0197  299F               	goto	l6094
  7855                           
  7856                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 623:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  7857  0198  002E               	movlb	14	; select bank14
  7858  0199  081A               	movf	26,w	;volatile
  7859  019A  0020               	movlb	0	; select bank0
  7860  019B  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7861  019C  00F1               	movwf	abs@a
  7862  019D  002E               	movlb	14	; select bank14
  7863  019E  29A5               	goto	L6
  7864  019F                     l6094:	
  7865                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:             }
  7866                           
  7867                           
  7868                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 628:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  7869  019F  002F               	movlb	15	; select bank15
  7870  01A0  081A               	movf	26,w	;volatile
  7871  01A1  0020               	movlb	0	; select bank0
  7872  01A2  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7873  01A3  00F1               	movwf	abs@a
  7874  01A4  002F               	movlb	15	; select bank15
  7875  01A5                     L6:	
  7876  01A5  081B               	movf	27,w	;volatile
  7877  01A6  0020               	movlb	0	; select bank0
  7878  01A7  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  7879  01A8  00F2               	movwf	abs@a+1
  7880  01A9  3196  263B  3180   	fcall	_abs
  7881  01AC  0871               	movf	?_abs,w
  7882  01AD  0020               	movlb	0	; select bank0
  7883  01AE  07E0               	addwf	_packet_noise,f
  7884  01AF  0872               	movf	?_abs+1,w
  7885  01B0  3DE1               	addwfc	_packet_noise+1,f
  7886                           
  7887                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 624:                 last_a = AAD1RES0;
  7888  01B1  002E               	movlb	14	; select bank14
  7889  01B2  081B               	movf	27,w	;volatile
  7890  01B3  0020               	movlb	0	; select bank0
  7891  01B4  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  7892  01B5  002E               	movlb	14	; select bank14
  7893  01B6  081A               	movf	26,w	;volatile
  7894  01B7  0020               	movlb	0	; select bank0
  7895  01B8  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  7896  01B9                     l6098:	
  7897                           
  7898                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         if (packet_counter == 0)
  7899  01B9  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  7900  01BA  1903               	btfsc	3,2
  7901                           
  7902                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 637:             sensor_globalFlags.done = (uint8_t)1;
  7903  01BB  1464               	bsf	_sensor_globalFlags,0	;volatile
  7904                           
  7905                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:         packet_counter--;
  7906  01BC  3001               	movlw	1
  7907  01BD  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  7908                           
  7909                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:         if (sensor_globalFlags.check !
      +                          = 0)
  7910  01BE  1CE4               	btfss	_sensor_globalFlags,1	;volatile
  7911  01BF  29C2               	goto	l891
  7912                           
  7913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 643:             sensor_globalFlags.error = 1;
  7914  01C0  1564               	bsf	_sensor_globalFlags,2	;volatile
  7915                           
  7916                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:             sensor_globalFlags.done = 
      +                          1;
  7917  01C1  1464               	bsf	_sensor_globalFlags,0	;volatile
  7918  01C2                     l891:	
  7919                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 645:         }
  7920                           
  7921                           
  7922                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:         sensor_globalFlags.check = 1;
  7923  01C2  14E4               	bsf	_sensor_globalFlags,1	;volatile
  7924                           
  7925                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     } while(sensor_globalFlags.done ==
      +                           0);
  7926  01C3  1C64               	btfss	_sensor_globalFlags,0	;volatile
  7927  01C4  2916               	goto	l6062
  7928                           
  7929                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     TMR2_StopTimer();
  7930  01C5  3194  2435  3180   	fcall	_TMR2_StopTimer
  7931                           
  7932                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 650:     ADCOMCON = ADCOMCON_temp;
  7933  01C8  0020               	movlb	0	; select bank0
  7934  01C9  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  7935  01CA  002E               	movlb	14	; select bank14
  7936  01CB  0092               	movwf	18	;volatile
  7937                           
  7938                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     AD1CON2 = AD1CON2_temp;
  7939  01CC  0020               	movlb	0	; select bank0
  7940  01CD  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  7941  01CE  002E               	movlb	14	; select bank14
  7942  01CF  0093               	movwf	19	;volatile
  7943                           
  7944                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     AD2CON2 = AD2CON2_temp;
  7945  01D0  0020               	movlb	0	; select bank0
  7946  01D1  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  7947  01D2  002F               	movlb	15	; select bank15
  7948  01D3  0093               	movwf	19	;volatile
  7949                           
  7950                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     if(sensor_globalFlags.error)
  7951  01D4  0020               	movlb	0	; select bank0
  7952  01D5  1D64               	btfss	_sensor_globalFlags,2	;volatile
  7953  01D6  29D9               	goto	l893
  7954                           
  7955                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 656:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  7956  01D7  30FB               	movlw	251
  7957  01D8  0008               	return
  7958  01D9                     l893:	
  7959                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     }
  7960                           
  7961                           
  7962                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 659:     if(sensor_globalFlags.interrupted)
  7963  01D9  1DE4               	btfss	_sensor_globalFlags,3	;volatile
  7964  01DA  29DD               	goto	l6126
  7965                           
  7966                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 661:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  7967  01DB  30FA               	movlw	250
  7968  01DC  0008               	return
  7969  01DD                     l6126:	
  7970                           
  7971                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:     if (sensor1ForceEnabled)
  7972  01DD  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  7973  01DE  1903               	btfsc	3,2
  7974  01DF  29E6               	goto	l6130
  7975                           
  7976                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 666:         sensor_adc1->enabled = 0;
  7977  01E0  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7978  01E1  3E08               	addlw	8
  7979  01E2  0086               	movwf	6
  7980  01E3  3001               	movlw	1	; select bank2/3
  7981  01E4  0087               	movwf	7
  7982  01E5  1181               	bcf	1,3
  7983  01E6                     l6130:	
  7984                           
  7985                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:     if (sensor2ForceEnabled)
  7986  01E6  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  7987  01E7  1903               	btfsc	3,2
  7988  01E8  29EF               	goto	l6134
  7989                           
  7990                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 669:         sensor_adc2->enabled = 0;
  7991  01E9  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7992  01EA  3E08               	addlw	8
  7993  01EB  0086               	movwf	6
  7994  01EC  3001               	movlw	1	; select bank2/3
  7995  01ED  0087               	movwf	7
  7996  01EE  1181               	bcf	1,3
  7997  01EF                     l6134:	
  7998                           
  7999                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  8000  01EF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8001  01F0  3195  2573  3180   	fcall	_Sensor_isEnabled
  8002  01F3  3A00               	xorlw	0
  8003  01F4  1903               	skipnz
  8004  01F5  2A03               	goto	l6140
  8005  01F6  0020               	movlb	0	; select bank0
  8006  01F7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8007  01F8  3194  24B9  3180   	fcall	_Sensor_isCalibrated
  8008  01FB  3A00               	xorlw	0
  8009  01FC  1D03               	skipz
  8010  01FD  2A03               	goto	l6140
  8011                           
  8012                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:         Sensor_autoCalibration(sensor_
      +                          adc1);
  8013  01FE  0020               	movlb	0	; select bank0
  8014  01FF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8015  0200  318D  259F  3180   	fcall	_Sensor_autoCalibration
  8016  0203                     l6140:	
  8017                           
  8018                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  8019  0203  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8020  0204  3195  2573  3180   	fcall	_Sensor_isEnabled
  8021  0207  3A00               	xorlw	0
  8022  0208  1903               	skipnz
  8023  0209  2A15               	goto	l6146
  8024  020A  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8025  020B  3194  24B9  3180   	fcall	_Sensor_isCalibrated
  8026  020E  3A00               	xorlw	0
  8027  020F  1D03               	skipz
  8028  0210  2A15               	goto	l6146
  8029                           
  8030                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:         Sensor_autoCalibration(sensor_
      +                          adc2);
  8031  0211  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8032  0212  318D  259F  3180   	fcall	_Sensor_autoCalibration
  8033  0215                     l6146:	
  8034                           
  8035                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 678:     AD1PRECON = 0;
  8036  0215  002E               	movlb	14	; select bank14
  8037  0216  0196               	clrf	22	;volatile
  8038                           
  8039                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 679:     AD2PRECON = 0;
  8040  0217  002F               	movlb	15	; select bank15
  8041  0218  0196               	clrf	22	;volatile
  8042                           
  8043                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 680:     AD1ACQCON = 0;
  8044  0219  002E               	movlb	14	; select bank14
  8045  021A  0197               	clrf	23	;volatile
  8046                           
  8047                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 681:     AD2ACQCON = 0;
  8048  021B  002F               	movlb	15	; select bank15
  8049  021C  0197               	clrf	23	;volatile
  8050                           
  8051                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 682:     AD1CON0bits.ADON = 0;
  8052  021D  002E               	movlb	14	; select bank14
  8053  021E  1011               	bcf	17,0	;volatile
  8054                           
  8055                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 683:     AD2CON0bits.ADON = 0;
  8056  021F  002F               	movlb	15	; select bank15
  8057  0220  1011               	bcf	17,0	;volatile
  8058  0221  28B1               	goto	l5986
  8059  0222                     __end_of_Sensor_Acq_ExecutePacket:	
  8060                           
  8061                           	psect	text37
  8062  1435                     __ptext37:	
  8063 ;; *************** function _TMR2_StopTimer *****************
  8064 ;; Defined at:
  8065 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;		None
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;		None
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  1    wreg      void 
  8072 ;; Registers used:
  8073 ;;		None
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8079 ;;      Params:         0       0       0       0       0       0       0       0
  8080 ;;      Locals:         0       0       0       0       0       0       0       0
  8081 ;;      Temps:          0       0       0       0       0       0       0       0
  8082 ;;      Totals:         0       0       0       0       0       0       0       0
  8083 ;;Total ram usage:        0 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    4
  8086 ;; This function calls:
  8087 ;;		Nothing
  8088 ;; This function is called by:
  8089 ;;		_Sensor_Acq_ExecutePacket
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           
  8094                           ;psect for function _TMR2_StopTimer
  8095  1435                     _TMR2_StopTimer:	
  8096                           
  8097                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  8098                           
  8099                           ;incstack = 0
  8100                           ; Regs used in _TMR2_StopTimer: []
  8101  1435  0020               	movlb	0	; select bank0
  8102  1436  111C               	bcf	28,2	;volatile
  8103  1437  0008               	return
  8104  1438                     __end_of_TMR2_StopTimer:	
  8105                           
  8106                           	psect	text38
  8107  1432                     __ptext38:	
  8108 ;; *************** function _TMR2_StartTimer *****************
  8109 ;; Defined at:
  8110 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;		None
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;		None
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		None
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8124 ;;      Params:         0       0       0       0       0       0       0       0
  8125 ;;      Locals:         0       0       0       0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0       0
  8127 ;;      Totals:         0       0       0       0       0       0       0       0
  8128 ;;Total ram usage:        0 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    4
  8131 ;; This function calls:
  8132 ;;		Nothing
  8133 ;; This function is called by:
  8134 ;;		_Sensor_Acq_ExecutePacket
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           
  8139                           ;psect for function _TMR2_StartTimer
  8140  1432                     _TMR2_StartTimer:	
  8141                           
  8142                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  8143                           
  8144                           ;incstack = 0
  8145                           ; Regs used in _TMR2_StartTimer: []
  8146  1432  0020               	movlb	0	; select bank0
  8147  1433  151C               	bsf	28,2	;volatile
  8148  1434  0008               	return
  8149  1435                     __end_of_TMR2_StartTimer:	
  8150                           
  8151                           	psect	text39
  8152  1445                     __ptext39:	
  8153 ;; *************** function _TMR2_LoadPeriodRegister *****************
  8154 ;; Defined at:
  8155 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;  periodVal       1    wreg     unsigned char 
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;  periodVal       1    1[COMMON] unsigned char 
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      void 
  8162 ;; Registers used:
  8163 ;;		wreg
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8169 ;;      Params:         0       0       0       0       0       0       0       0
  8170 ;;      Locals:         1       0       0       0       0       0       0       0
  8171 ;;      Temps:          0       0       0       0       0       0       0       0
  8172 ;;      Totals:         1       0       0       0       0       0       0       0
  8173 ;;Total ram usage:        1 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    4
  8176 ;; This function calls:
  8177 ;;		Nothing
  8178 ;; This function is called by:
  8179 ;;		_Sensor_Acq_ExecutePacket
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           
  8184                           ;psect for function _TMR2_LoadPeriodRegister
  8185  1445                     _TMR2_LoadPeriodRegister:	
  8186                           
  8187                           ;incstack = 0
  8188                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  8189                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  8190  1445  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  8191                           
  8192                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  8193  1446  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  8194  1447  0020               	movlb	0	; select bank0
  8195  1448  009B               	movwf	27	;volatile
  8196  1449  0008               	return
  8197  144A                     __end_of_TMR2_LoadPeriodRegister:	
  8198                           
  8199                           	psect	text40
  8200  04F5                     __ptext40:	
  8201 ;; *************** function _Sensor_loadADCSettings *****************
  8202 ;; Defined at:
  8203 ;;		line 445 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  sensor          1    wreg     PTR struct .
  8206 ;;		 -> mtouch_sensor(36), 
  8207 ;;  adc_index       1    2[COMMON] unsigned char 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  sensor          1    9[COMMON] PTR struct .
  8210 ;;		 -> mtouch_sensor(36), 
  8211 ;;  addressOffse    1    8[COMMON] unsigned char 
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      void 
  8214 ;; Registers used:
  8215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8221 ;;      Params:         1       0       0       0       0       0       0       0
  8222 ;;      Locals:         4       0       0       0       0       0       0       0
  8223 ;;      Temps:          3       0       0       0       0       0       0       0
  8224 ;;      Totals:         8       0       0       0       0       0       0       0
  8225 ;;Total ram usage:        8 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    5
  8228 ;; This function calls:
  8229 ;;		_Sensor_isCalibrated
  8230 ;;		_Sensor_isCalibratingAcqTime
  8231 ;; This function is called by:
  8232 ;;		_Sensor_Acq_ExecutePacket
  8233 ;; This function uses a non-reentrant model
  8234 ;;
  8235                           
  8236                           
  8237                           ;psect for function _Sensor_loadADCSettings
  8238  04F5                     _Sensor_loadADCSettings:	
  8239                           
  8240                           ;incstack = 0
  8241                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8242                           ;Sensor_loadADCSettings@sensor stored from wreg
  8243  04F5  00F9               	movwf	Sensor_loadADCSettings@sensor
  8244                           
  8245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 446
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     if (sensor == ((void*)0))
  8246  04F6  0879               	movf	Sensor_loadADCSettings@sensor,w
  8247  04F7  1903               	btfsc	3,2
  8248  04F8  0008               	return
  8249                           
  8250                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  8251  04F9  0872               	movf	Sensor_loadADCSettings@adc_index,w
  8252  04FA  1D03               	btfss	3,2
  8253  04FB  2CFF               	goto	l4148
  8254  04FC  01F6               	clrf	_Sensor_loadADCSettings$1228
  8255  04FD  01F7               	clrf	_Sensor_loadADCSettings$1228+1
  8256  04FE  2D03               	goto	l845
  8257  04FF                     l4148:	
  8258  04FF  3080               	movlw	128
  8259  0500  00F6               	movwf	_Sensor_loadADCSettings$1228
  8260  0501  3000               	movlw	0
  8261  0502  00F7               	movwf	_Sensor_loadADCSettings$1228+1
  8262  0503                     l845:	
  8263  0503  0876               	movf	_Sensor_loadADCSettings$1228,w
  8264  0504  00F3               	movwf	??_Sensor_loadADCSettings
  8265  0505  0873               	movf	??_Sensor_loadADCSettings,w
  8266  0506  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  8267                           
  8268                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  8269  0507  0A79               	incf	Sensor_loadADCSettings@sensor,w
  8270  0508  0086               	movwf	6
  8271  0509  3001               	movlw	1	; select bank2/3
  8272  050A  0087               	movwf	7
  8273  050B  0801               	movf	1,w
  8274  050C  00F3               	movwf	??_Sensor_loadADCSettings
  8275  050D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8276  050E  3E11               	addlw	17
  8277  050F  00F4               	movwf	??_Sensor_loadADCSettings+1
  8278  0510  01F5               	clrf	??_Sensor_loadADCSettings+2
  8279  0511  3007               	movlw	7
  8280  0512  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8281  0513  0874               	movf	??_Sensor_loadADCSettings+1,w
  8282  0514  0086               	movwf	6
  8283  0515  0875               	movf	??_Sensor_loadADCSettings+2,w
  8284  0516  0087               	movwf	7
  8285  0517  0873               	movf	??_Sensor_loadADCSettings,w
  8286  0518  0081               	movwf	1
  8287                           
  8288                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  8289  0519  0879               	movf	Sensor_loadADCSettings@sensor,w
  8290  051A  3E05               	addlw	5
  8291  051B  0086               	movwf	6
  8292  051C  3001               	movlw	1	; select bank2/3
  8293  051D  0087               	movwf	7
  8294  051E  0801               	movf	1,w
  8295  051F  00F3               	movwf	??_Sensor_loadADCSettings
  8296  0520  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8297  0521  3E19               	addlw	25
  8298  0522  00F4               	movwf	??_Sensor_loadADCSettings+1
  8299  0523  01F5               	clrf	??_Sensor_loadADCSettings+2
  8300  0524  3007               	movlw	7
  8301  0525  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8302  0526  0874               	movf	??_Sensor_loadADCSettings+1,w
  8303  0527  0086               	movwf	6
  8304  0528  0875               	movf	??_Sensor_loadADCSettings+2,w
  8305  0529  0087               	movwf	7
  8306  052A  0873               	movf	??_Sensor_loadADCSettings,w
  8307  052B  0081               	movwf	1
  8308                           
  8309                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 454:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  8310  052C  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8311  052D  3E13               	addlw	19
  8312  052E  00F3               	movwf	??_Sensor_loadADCSettings
  8313  052F  01F4               	clrf	??_Sensor_loadADCSettings+1
  8314  0530  3007               	movlw	7
  8315  0531  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8316  0532  0873               	movf	??_Sensor_loadADCSettings,w
  8317  0533  0086               	movwf	6
  8318  0534  0874               	movf	??_Sensor_loadADCSettings+1,w
  8319  0535  0087               	movwf	7
  8320  0536  3050               	movlw	80
  8321  0537  0081               	movwf	1
  8322                           
  8323                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  8324  0538  30FE               	movlw	254
  8325  0539  00F3               	movwf	??_Sensor_loadADCSettings
  8326  053A  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8327  053B  3E18               	addlw	24
  8328  053C  0086               	movwf	6
  8329  053D  0187               	clrf	7
  8330  053E  3007               	movlw	7
  8331  053F  3D87               	addwfc	7,f
  8332  0540  0873               	movf	??_Sensor_loadADCSettings,w
  8333  0541  0581               	andwf	1,f
  8334                           
  8335                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:     if (Sensor_isCalibrated(sensor))
  8336  0542  0879               	movf	Sensor_loadADCSettings@sensor,w
  8337  0543  3194  24B9  3184   	fcall	_Sensor_isCalibrated
  8338  0546  3A00               	xorlw	0
  8339  0547  1903               	skipnz
  8340  0548  2D5D               	goto	l4162
  8341                           
  8342                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 459:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  8343  0549  0879               	movf	Sensor_loadADCSettings@sensor,w
  8344  054A  3E02               	addlw	2
  8345  054B  0086               	movwf	6
  8346  054C  3001               	movlw	1	; select bank2/3
  8347  054D  0087               	movwf	7
  8348  054E  0801               	movf	1,w
  8349  054F  00F3               	movwf	??_Sensor_loadADCSettings
  8350  0550  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8351  0551  3E16               	addlw	22
  8352  0552  00F4               	movwf	??_Sensor_loadADCSettings+1
  8353  0553  01F5               	clrf	??_Sensor_loadADCSettings+2
  8354  0554  3007               	movlw	7
  8355  0555  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8356  0556  0874               	movf	??_Sensor_loadADCSettings+1,w
  8357  0557  0086               	movwf	6
  8358  0558  0875               	movf	??_Sensor_loadADCSettings+2,w
  8359  0559  0087               	movwf	7
  8360  055A  0873               	movf	??_Sensor_loadADCSettings,w
  8361  055B  0081               	movwf	1
  8362  055C  2D70               	goto	l4166
  8363  055D                     l4162:	
  8364                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  8365                           
  8366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  8367                           
  8368                           
  8369                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 464:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  8370  055D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8371  055E  3E16               	addlw	22
  8372  055F  00F3               	movwf	??_Sensor_loadADCSettings
  8373  0560  01F4               	clrf	??_Sensor_loadADCSettings+1
  8374  0561  3007               	movlw	7
  8375  0562  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8376  0563  0873               	movf	??_Sensor_loadADCSettings,w
  8377  0564  0086               	movwf	6
  8378  0565  0874               	movf	??_Sensor_loadADCSettings+1,w
  8379  0566  0087               	movwf	7
  8380  0567  3020               	movlw	32
  8381  0568  0081               	movwf	1
  8382                           
  8383                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 465:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  8384  0569  0879               	movf	Sensor_loadADCSettings@sensor,w
  8385  056A  3194  24B0  3184   	fcall	_Sensor_isCalibratingAcqTime
  8386  056D  3A00               	xorlw	0
  8387  056E  1903               	skipnz
  8388  056F  2D83               	goto	l4168
  8389  0570                     l4166:	
  8390                           
  8391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 466:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  8392  0570  0879               	movf	Sensor_loadADCSettings@sensor,w
  8393  0571  3E03               	addlw	3
  8394  0572  0086               	movwf	6
  8395  0573  3001               	movlw	1	; select bank2/3
  8396  0574  0087               	movwf	7
  8397  0575  0801               	movf	1,w
  8398  0576  00F3               	movwf	??_Sensor_loadADCSettings
  8399  0577  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8400  0578  3E17               	addlw	23
  8401  0579  00F4               	movwf	??_Sensor_loadADCSettings+1
  8402  057A  01F5               	clrf	??_Sensor_loadADCSettings+2
  8403  057B  3007               	movlw	7
  8404  057C  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8405  057D  0874               	movf	??_Sensor_loadADCSettings+1,w
  8406  057E  0086               	movwf	6
  8407  057F  0875               	movf	??_Sensor_loadADCSettings+2,w
  8408  0580  0087               	movwf	7
  8409  0581  0873               	movf	??_Sensor_loadADCSettings,w
  8410  0582  2D8E               	goto	L7
  8411  0583                     l4168:	
  8412                           
  8413                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 468:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  8414  0583  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8415  0584  3E17               	addlw	23
  8416  0585  00F3               	movwf	??_Sensor_loadADCSettings
  8417  0586  01F4               	clrf	??_Sensor_loadADCSettings+1
  8418  0587  3007               	movlw	7
  8419  0588  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8420  0589  0873               	movf	??_Sensor_loadADCSettings,w
  8421  058A  0086               	movwf	6
  8422  058B  0874               	movf	??_Sensor_loadADCSettings+1,w
  8423  058C  0087               	movwf	7
  8424  058D  3020               	movlw	32
  8425  058E                     L7:	
  8426  058E  0081               	movwf	1
  8427                           
  8428                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  8429                           
  8430                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 469:     }
  8431  058F  0879               	movf	Sensor_loadADCSettings@sensor,w
  8432  0590  3E04               	addlw	4
  8433  0591  0086               	movwf	6
  8434  0592  3001               	movlw	1	; select bank2/3
  8435  0593  0087               	movwf	7
  8436  0594  0801               	movf	1,w
  8437  0595  00F3               	movwf	??_Sensor_loadADCSettings
  8438  0596  01F4               	clrf	??_Sensor_loadADCSettings+1
  8439  0597  3009               	movlw	9
  8440  0598                     u2365:	
  8441  0598  35F3               	lslf	??_Sensor_loadADCSettings,f
  8442  0599  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  8443  059A  0B89               	decfsz	9,f
  8444  059B  2D98               	goto	u2365
  8445  059C  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  8446  059D  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  8447  059E  0086               	movwf	6
  8448  059F  0187               	clrf	7
  8449  05A0  0873               	movf	??_Sensor_loadADCSettings,w
  8450  05A1  3FC0               	movwi [0]fsr1
  8451  05A2  0874               	movf	??_Sensor_loadADCSettings+1,w
  8452  05A3  3FC1               	movwi [1]fsr1
  8453  05A4  0008               	return
  8454  05A5                     __end_of_Sensor_loadADCSettings:	
  8455                           
  8456                           	psect	text41
  8457  14B9                     __ptext41:	
  8458 ;; *************** function _Sensor_isCalibrated *****************
  8459 ;; Defined at:
  8460 ;;		line 928 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8461 ;; Parameters:    Size  Location     Type
  8462 ;;  sensor          1    wreg     PTR struct .
  8463 ;;		 -> mtouch_sensor(36), 
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;  sensor          1    1[COMMON] PTR struct .
  8466 ;;		 -> mtouch_sensor(36), 
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      _Bool 
  8469 ;; Registers used:
  8470 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8476 ;;      Params:         0       0       0       0       0       0       0       0
  8477 ;;      Locals:         1       0       0       0       0       0       0       0
  8478 ;;      Temps:          0       0       0       0       0       0       0       0
  8479 ;;      Totals:         1       0       0       0       0       0       0       0
  8480 ;;Total ram usage:        1 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    4
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_Sensor_Acquisition
  8487 ;;		_Sensor_loadADCSettings
  8488 ;;		_Sensor_Acq_ExecutePacket
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           
  8493                           ;psect for function _Sensor_isCalibrated
  8494  14B9                     _Sensor_isCalibrated:	
  8495                           
  8496                           ;incstack = 0
  8497                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8498                           ;Sensor_isCalibrated@sensor stored from wreg
  8499  14B9  00F1               	movwf	Sensor_isCalibrated@sensor
  8500                           
  8501                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          929: {;mcc_generated_files/mtouch/mtouch_sensor.c: 930:     return (_Bool)sensor->calibr
      +                          ated;
  8502  14BA  0871               	movf	Sensor_isCalibrated@sensor,w
  8503  14BB  3E08               	addlw	8
  8504  14BC  0086               	movwf	6
  8505  14BD  3001               	movlw	1	; select bank2/3
  8506  14BE  0087               	movwf	7
  8507  14BF  0C01               	rrf	1,w
  8508  14C0  0C89               	rrf	9,f
  8509  14C1  3901               	andlw	1
  8510  14C2  0008               	return
  8511  14C3                     __end_of_Sensor_isCalibrated:	
  8512                           
  8513                           	psect	text42
  8514  1573                     __ptext42:	
  8515 ;; *************** function _Sensor_isEnabled *****************
  8516 ;; Defined at:
  8517 ;;		line 863 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;  sensor          1    wreg     PTR struct .
  8520 ;;		 -> mtouch_sensor(36), 
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;  sensor          1    2[COMMON] PTR struct .
  8523 ;;		 -> mtouch_sensor(36), 
  8524 ;; Return value:  Size  Location     Type
  8525 ;;                  1    wreg      _Bool 
  8526 ;; Registers used:
  8527 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8528 ;; Tracked objects:
  8529 ;;		On entry : 0/0
  8530 ;;		On exit  : 0/0
  8531 ;;		Unchanged: 0/0
  8532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8533 ;;      Params:         0       0       0       0       0       0       0       0
  8534 ;;      Locals:         1       0       0       0       0       0       0       0
  8535 ;;      Temps:          1       0       0       0       0       0       0       0
  8536 ;;      Totals:         2       0       0       0       0       0       0       0
  8537 ;;Total ram usage:        2 bytes
  8538 ;; Hardware stack levels used:    1
  8539 ;; Hardware stack levels required when called:    4
  8540 ;; This function calls:
  8541 ;;		Nothing
  8542 ;; This function is called by:
  8543 ;;		_Sensor_Service
  8544 ;;		_Sensor_postAcquisitionProcess
  8545 ;;		_Sensor_Acq_ExecutePacket
  8546 ;; This function uses a non-reentrant model
  8547 ;;
  8548                           
  8549                           
  8550                           ;psect for function _Sensor_isEnabled
  8551  1573                     _Sensor_isEnabled:	
  8552                           
  8553                           ;incstack = 0
  8554                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8555                           ;Sensor_isEnabled@sensor stored from wreg
  8556  1573  00F2               	movwf	Sensor_isEnabled@sensor
  8557                           
  8558                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 863: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 864: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 865:     if(sensor!=((void*)0))
  8559  1574  0872               	movf	Sensor_isEnabled@sensor,w
  8560  1575  1903               	btfsc	3,2
  8561  1576  2D82               	goto	l4126
  8562                           
  8563                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 866:         return (_Bool)sensor->enabled;
  8564  1577  0872               	movf	Sensor_isEnabled@sensor,w
  8565  1578  3E08               	addlw	8
  8566  1579  0086               	movwf	6
  8567  157A  3001               	movlw	1	; select bank2/3
  8568  157B  0087               	movwf	7
  8569  157C  0C01               	rrf	1,w
  8570  157D  00F1               	movwf	??_Sensor_isEnabled
  8571  157E  0CF1               	rrf	??_Sensor_isEnabled,f
  8572  157F  0C71               	rrf	??_Sensor_isEnabled,w
  8573  1580  3901               	andlw	1
  8574  1581  0008               	return
  8575  1582                     l4126:	
  8576                           
  8577                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868:         return 0;
  8578  1582  3000               	movlw	0
  8579  1583  0008               	return
  8580  1584                     __end_of_Sensor_isEnabled:	
  8581                           
  8582                           	psect	text43
  8583  14F7                     __ptext43:	
  8584 ;; *************** function _Sensor_isActive *****************
  8585 ;; Defined at:
  8586 ;;		line 890 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;  sensor          1    wreg     PTR struct .
  8589 ;;		 -> mtouch_sensor(36), 
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;  sensor          1    1[COMMON] PTR struct .
  8592 ;;		 -> mtouch_sensor(36), 
  8593 ;; Return value:  Size  Location     Type
  8594 ;;                  1    wreg      _Bool 
  8595 ;; Registers used:
  8596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8597 ;; Tracked objects:
  8598 ;;		On entry : 0/0
  8599 ;;		On exit  : 0/0
  8600 ;;		Unchanged: 0/0
  8601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8602 ;;      Params:         0       0       0       0       0       0       0       0
  8603 ;;      Locals:         1       0       0       0       0       0       0       0
  8604 ;;      Temps:          0       0       0       0       0       0       0       0
  8605 ;;      Totals:         1       0       0       0       0       0       0       0
  8606 ;;Total ram usage:        1 bytes
  8607 ;; Hardware stack levels used:    1
  8608 ;; Hardware stack levels required when called:    4
  8609 ;; This function calls:
  8610 ;;		Nothing
  8611 ;; This function is called by:
  8612 ;;		_Sensor_Acquisition
  8613 ;;		_Sensor_Acq_ExecutePacket
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           
  8618                           ;psect for function _Sensor_isActive
  8619  14F7                     _Sensor_isActive:	
  8620                           
  8621                           ;incstack = 0
  8622                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8623                           ;Sensor_isActive@sensor stored from wreg
  8624  14F7  00F1               	movwf	Sensor_isActive@sensor
  8625                           
  8626                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 890: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 891:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 892:     if(sensor == ((void*)0))
  8627  14F8  0871               	movf	Sensor_isActive@sensor,w
  8628  14F9  1D03               	btfss	3,2
  8629  14FA  2CFD               	goto	l4136
  8630                           
  8631                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 893:         return 0;
  8632  14FB  3000               	movlw	0
  8633  14FC  0008               	return
  8634  14FD                     l4136:	
  8635                           
  8636                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 895:     return (_Bool)sensor->active;
  8637  14FD  0871               	movf	Sensor_isActive@sensor,w
  8638  14FE  3E08               	addlw	8
  8639  14FF  0086               	movwf	6
  8640  1500  3001               	movlw	1	; select bank2/3
  8641  1501  0087               	movwf	7
  8642  1502  0C01               	rrf	1,w
  8643  1503  3901               	andlw	1
  8644  1504  0008               	return
  8645  1505                     __end_of_Sensor_isActive:	
  8646                           
  8647                           	psect	text44
  8648  0D9F                     __ptext44:	
  8649 ;; *************** function _Sensor_autoCalibration *****************
  8650 ;; Defined at:
  8651 ;;		line 696 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;  sensor          1    wreg     PTR struct .
  8654 ;;		 -> mtouch_sensor(36), 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  sensor          1   10[COMMON] PTR struct .
  8657 ;;		 -> mtouch_sensor(36), 
  8658 ;;  adcIndex        1    9[COMMON] unsigned char 
  8659 ;; Return value:  Size  Location     Type
  8660 ;;                  1    wreg      void 
  8661 ;; Registers used:
  8662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8668 ;;      Params:         0       0       0       0       0       0       0       0
  8669 ;;      Locals:         2       0       0       0       0       0       0       0
  8670 ;;      Temps:          4       0       0       0       0       0       0       0
  8671 ;;      Totals:         6       0       0       0       0       0       0       0
  8672 ;;Total ram usage:        6 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    5
  8675 ;; This function calls:
  8676 ;;		_Sensor_getScanGroupIndex
  8677 ;;		_Sensor_isCalibratingAcqTime
  8678 ;;		_Sensor_setCalibratAcqTime
  8679 ;;		_Sensor_setCalibrated
  8680 ;;		_abs
  8681 ;; This function is called by:
  8682 ;;		_Sensor_Acq_ExecutePacket
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           
  8687                           ;psect for function _Sensor_autoCalibration
  8688  0D9F                     _Sensor_autoCalibration:	
  8689                           
  8690                           ;incstack = 0
  8691                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8692                           ;Sensor_autoCalibration@sensor stored from wreg
  8693  0D9F  00FA               	movwf	Sensor_autoCalibration@sensor
  8694                           
  8695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 696: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 697: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 698:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  8696  0DA0  087A               	movf	Sensor_autoCalibration@sensor,w
  8697  0DA1  3188  2025  318D   	fcall	_Sensor_getScanGroupIndex
  8698  0DA4  00F5               	movwf	??_Sensor_autoCalibration
  8699  0DA5  0875               	movf	??_Sensor_autoCalibration,w
  8700  0DA6  00F9               	movwf	Sensor_autoCalibration@adcIndex
  8701                           
  8702                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  8703  0DA7  087A               	movf	Sensor_autoCalibration@sensor,w
  8704  0DA8  3194  24B0  318D   	fcall	_Sensor_isCalibratingAcqTime
  8705  0DAB  3A00               	xorlw	0
  8706  0DAC  1D03               	skipz
  8707  0DAD  2DE0               	goto	l4182
  8708                           
  8709                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 702:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  8710  0DAE  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  8711  0DAF  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  8712  0DB0  0086               	movwf	6
  8713  0DB1  0187               	clrf	7
  8714  0DB2  3F40               	moviw [0]fsr1
  8715  0DB3  00F5               	movwf	??_Sensor_autoCalibration
  8716  0DB4  3F41               	moviw [1]fsr1
  8717  0DB5  00F6               	movwf	??_Sensor_autoCalibration+1
  8718  0DB6  087A               	movf	Sensor_autoCalibration@sensor,w
  8719  0DB7  3E04               	addlw	4
  8720  0DB8  0086               	movwf	6
  8721  0DB9  3001               	movlw	1	; select bank2/3
  8722  0DBA  0087               	movwf	7
  8723  0DBB  0801               	movf	1,w
  8724  0DBC  00F7               	movwf	??_Sensor_autoCalibration+2
  8725  0DBD  01F8               	clrf	??_Sensor_autoCalibration+3
  8726  0DBE  3009               	movlw	9
  8727  0DBF                     u2385:	
  8728  0DBF  35F7               	lslf	??_Sensor_autoCalibration+2,f
  8729  0DC0  0DF8               	rlf	??_Sensor_autoCalibration+3,f
  8730  0DC1  0B89               	decfsz	9,f
  8731  0DC2  2DBF               	goto	u2385
  8732  0DC3  0876               	movf	??_Sensor_autoCalibration+1,w
  8733  0DC4  0278               	subwf	??_Sensor_autoCalibration+3,w
  8734  0DC5  1D03               	skipz
  8735  0DC6  2DC9               	goto	u2395
  8736  0DC7  0875               	movf	??_Sensor_autoCalibration,w
  8737  0DC8  0277               	subwf	??_Sensor_autoCalibration+2,w
  8738  0DC9                     u2395:	
  8739  0DC9  1803               	skipnc
  8740  0DCA  2DDC               	goto	l4180
  8741                           
  8742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 703:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 704:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  8743  0DCB  3001               	movlw	1
  8744  0DCC  00F5               	movwf	??_Sensor_autoCalibration
  8745  0DCD  087A               	movf	Sensor_autoCalibration@sensor,w
  8746  0DCE  3E05               	addlw	5
  8747  0DCF  0086               	movwf	6
  8748  0DD0  3001               	movlw	1	; select bank2/3
  8749  0DD1  0087               	movwf	7
  8750  0DD2  0875               	movf	??_Sensor_autoCalibration,w
  8751  0DD3  0781               	addwf	1,f
  8752  0DD4  300F               	movlw	15
  8753  0DD5  0201               	subwf	1,w
  8754  0DD6  1C03               	skipc
  8755  0DD7  0008               	return
  8756                           
  8757                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  8758  0DD8  087A               	movf	Sensor_autoCalibration@sensor,w
  8759  0DD9  3195  2522         	fcall	_Sensor_setCalibratAcqTime
  8760  0DDB  0008               	return
  8761  0DDC                     l4180:	
  8762                           
  8763                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 708:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 709:              Sensor_setCalibratAcqTime(sensor);
  8764  0DDC  087A               	movf	Sensor_autoCalibration@sensor,w
  8765  0DDD  3195  2522         	fcall	_Sensor_setCalibratAcqTime
  8766  0DDF  0008               	return
  8767  0DE0                     l4182:	
  8768                           
  8769                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 713:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 714:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  8770  0DE0  087A               	movf	Sensor_autoCalibration@sensor,w
  8771  0DE1  3E04               	addlw	4
  8772  0DE2  0086               	movwf	6
  8773  0DE3  3001               	movlw	1	; select bank2/3
  8774  0DE4  0087               	movwf	7
  8775  0DE5  0801               	movf	1,w
  8776  0DE6  00F5               	movwf	??_Sensor_autoCalibration
  8777  0DE7  01F6               	clrf	??_Sensor_autoCalibration+1
  8778  0DE8  35F5               	lslf	??_Sensor_autoCalibration,f
  8779  0DE9  0DF6               	rlf	??_Sensor_autoCalibration+1,f
  8780  0DEA  087A               	movf	Sensor_autoCalibration@sensor,w
  8781  0DEB  3E06               	addlw	6
  8782  0DEC  0086               	movwf	6
  8783  0DED  3001               	movlw	1	; select bank2/3
  8784  0DEE  0087               	movwf	7
  8785  0DEF  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  8786  0DF0  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  8787  0DF1  0084               	movwf	4
  8788  0DF2  0185               	clrf	5
  8789  0DF3  3F40               	moviw [0]fsr1
  8790  0DF4  0200               	subwf	0,w
  8791  0DF5  00F1               	movwf	abs@a
  8792  0DF6  3101               	addfsr 0,1
  8793  0DF7  3F41               	moviw [1]fsr1
  8794  0DF8  3B00               	subwfb	0,w
  8795  0DF9  00F2               	movwf	abs@a+1
  8796  0DFA  3196  263B  318D   	fcall	_abs
  8797  0DFD  0876               	movf	??_Sensor_autoCalibration+1,w
  8798  0DFE  0272               	subwf	?_abs+1,w
  8799  0DFF  1D03               	skipz
  8800  0E00  2E03               	goto	u2415
  8801  0E01  0875               	movf	??_Sensor_autoCalibration,w
  8802  0E02  0271               	subwf	?_abs,w
  8803  0E03                     u2415:	
  8804  0E03  1803               	skipnc
  8805  0E04  2E12               	goto	l4188
  8806                           
  8807                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 715:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  8808  0E05  3020               	movlw	32
  8809  0E06  00F5               	movwf	??_Sensor_autoCalibration
  8810  0E07  087A               	movf	Sensor_autoCalibration@sensor,w
  8811  0E08  3E02               	addlw	2
  8812  0E09  0086               	movwf	6
  8813  0E0A  3001               	movlw	1	; select bank2/3
  8814  0E0B  0087               	movwf	7
  8815  0E0C  0875               	movf	??_Sensor_autoCalibration,w
  8816  0E0D  0081               	movwf	1
  8817                           
  8818                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             Sensor_setCalibrated(senso
      +                          r);
  8819  0E0E  087A               	movf	Sensor_autoCalibration@sensor,w
  8820  0E0F  3194  24E9         	fcall	_Sensor_setCalibrated
  8821                           
  8822                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:         }
  8823  0E11  0008               	return
  8824  0E12                     l4188:	
  8825                           
  8826                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 724:             sensor->acquisition_time += (uint8_t)2;
  8827  0E12  3002               	movlw	2
  8828  0E13  00F5               	movwf	??_Sensor_autoCalibration
  8829  0E14  087A               	movf	Sensor_autoCalibration@sensor,w
  8830  0E15  3E03               	addlw	3
  8831  0E16  0086               	movwf	6
  8832  0E17  3001               	movlw	1	; select bank2/3
  8833  0E18  0087               	movwf	7
  8834  0E19  0875               	movf	??_Sensor_autoCalibration,w
  8835  0E1A  0781               	addwf	1,f
  8836                           
  8837                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 725:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  8838  0E1B  087A               	movf	Sensor_autoCalibration@sensor,w
  8839  0E1C  3E03               	addlw	3
  8840  0E1D  0086               	movwf	6
  8841  0E1E  3001               	movlw	1	; select bank2/3
  8842  0E1F  0087               	movwf	7
  8843  0E20  3020               	movlw	32
  8844  0E21  0201               	subwf	1,w
  8845  0E22  1C03               	skipc
  8846  0E23  0008               	return
  8847                           
  8848                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 726:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 727:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  8849  0E24  3020               	movlw	32
  8850  0E25  00F5               	movwf	??_Sensor_autoCalibration
  8851  0E26  087A               	movf	Sensor_autoCalibration@sensor,w
  8852  0E27  3E02               	addlw	2
  8853  0E28  0086               	movwf	6
  8854  0E29  3001               	movlw	1	; select bank2/3
  8855  0E2A  0087               	movwf	7
  8856  0E2B  0875               	movf	??_Sensor_autoCalibration,w
  8857  0E2C  0081               	movwf	1
  8858                           
  8859                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:                 Sensor_setCalibrated(s
      +                          ensor);
  8860  0E2D  087A               	movf	Sensor_autoCalibration@sensor,w
  8861  0E2E  3194  24E9         	fcall	_Sensor_setCalibrated
  8862  0E30  0008               	return
  8863  0E31                     __end_of_Sensor_autoCalibration:	
  8864                           
  8865                           	psect	text45
  8866  163B                     __ptext45:	
  8867 ;; *************** function _abs *****************
  8868 ;; Defined at:
  8869 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;  a               2    1[COMMON] int 
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;		None
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  2    1[COMMON] int 
  8876 ;; Registers used:
  8877 ;;		wreg, status,2, status,0
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8883 ;;      Params:         2       0       0       0       0       0       0       0
  8884 ;;      Locals:         0       0       0       0       0       0       0       0
  8885 ;;      Temps:          2       0       0       0       0       0       0       0
  8886 ;;      Totals:         4       0       0       0       0       0       0       0
  8887 ;;Total ram usage:        4 bytes
  8888 ;; Hardware stack levels used:    1
  8889 ;; Hardware stack levels required when called:    4
  8890 ;; This function calls:
  8891 ;;		Nothing
  8892 ;; This function is called by:
  8893 ;;		_Sensor_postAcquisitionProcess
  8894 ;;		_Sensor_Acq_ExecutePacket
  8895 ;;		_Sensor_autoCalibration
  8896 ;; This function uses a non-reentrant model
  8897 ;;
  8898                           
  8899                           
  8900                           ;psect for function _abs
  8901  163B                     _abs:	
  8902                           
  8903                           ;incstack = 0
  8904                           ; Regs used in _abs: [wreg+status,2+status,0]
  8905  163B  0872               	movf	abs@a+1,w
  8906  163C  3A80               	xorlw	128
  8907  163D  00F3               	movwf	??_abs
  8908  163E  3080               	movlw	128
  8909  163F  0273               	subwf	??_abs,w
  8910  1640  1D03               	skipz
  8911  1641  2E44               	goto	u2285
  8912  1642  3001               	movlw	1
  8913  1643  0271               	subwf	abs@a,w
  8914  1644                     u2285:	
  8915  1644  1803               	skipnc
  8916  1645  0008               	return
  8917  1646  0971               	comf	abs@a,w
  8918  1647  00F3               	movwf	??_abs
  8919  1648  0972               	comf	abs@a+1,w
  8920  1649  00F4               	movwf	??_abs+1
  8921  164A  0AF3               	incf	??_abs,f
  8922  164B  1903               	skipnz
  8923  164C  0AF4               	incf	??_abs+1,f
  8924  164D  0873               	movf	??_abs,w
  8925  164E  00F1               	movwf	?_abs
  8926  164F  0874               	movf	??_abs+1,w
  8927  1650  00F2               	movwf	?_abs+1
  8928  1651  0008               	return
  8929  1652                     __end_of_abs:	
  8930                           
  8931                           	psect	text46
  8932  14E9                     __ptext46:	
  8933 ;; *************** function _Sensor_setCalibrated *****************
  8934 ;; Defined at:
  8935 ;;		line 933 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  sensor          1    wreg     PTR struct .
  8938 ;;		 -> mtouch_sensor(36), 
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;  sensor          1    1[COMMON] PTR struct .
  8941 ;;		 -> mtouch_sensor(36), 
  8942 ;; Return value:  Size  Location     Type
  8943 ;;                  1    wreg      void 
  8944 ;; Registers used:
  8945 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8946 ;; Tracked objects:
  8947 ;;		On entry : 0/0
  8948 ;;		On exit  : 0/0
  8949 ;;		Unchanged: 0/0
  8950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8951 ;;      Params:         0       0       0       0       0       0       0       0
  8952 ;;      Locals:         1       0       0       0       0       0       0       0
  8953 ;;      Temps:          0       0       0       0       0       0       0       0
  8954 ;;      Totals:         1       0       0       0       0       0       0       0
  8955 ;;Total ram usage:        1 bytes
  8956 ;; Hardware stack levels used:    1
  8957 ;; Hardware stack levels required when called:    4
  8958 ;; This function calls:
  8959 ;;		Nothing
  8960 ;; This function is called by:
  8961 ;;		_Sensor_autoCalibration
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           
  8966                           ;psect for function _Sensor_setCalibrated
  8967  14E9                     _Sensor_setCalibrated:	
  8968                           
  8969                           ;incstack = 0
  8970                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8971                           ;Sensor_setCalibrated@sensor stored from wreg
  8972  14E9  00F1               	movwf	Sensor_setCalibrated@sensor
  8973                           
  8974                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 933: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          934: {;mcc_generated_files/mtouch/mtouch_sensor.c: 935:     sensor->calibrated = 1;
  8975  14EA  0871               	movf	Sensor_setCalibrated@sensor,w
  8976  14EB  3E08               	addlw	8
  8977  14EC  0086               	movwf	6
  8978  14ED  3001               	movlw	1	; select bank2/3
  8979  14EE  0087               	movwf	7
  8980  14EF  1501               	bsf	1,2
  8981                           
  8982                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 936:     sensor->acqTime_cal = 0;
  8983  14F0  0871               	movf	Sensor_setCalibrated@sensor,w
  8984  14F1  3E08               	addlw	8
  8985  14F2  0086               	movwf	6
  8986  14F3  3001               	movlw	1	; select bank2/3
  8987  14F4  0087               	movwf	7
  8988  14F5  1201               	bcf	1,4
  8989  14F6  0008               	return
  8990  14F7                     __end_of_Sensor_setCalibrated:	
  8991                           
  8992                           	psect	text47
  8993  1522                     __ptext47:	
  8994 ;; *************** function _Sensor_setCalibratAcqTime *****************
  8995 ;; Defined at:
  8996 ;;		line 939 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;  sensor          1    wreg     PTR struct .
  8999 ;;		 -> mtouch_sensor(36), 
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;  sensor          1    1[COMMON] PTR struct .
  9002 ;;		 -> mtouch_sensor(36), 
  9003 ;; Return value:  Size  Location     Type
  9004 ;;                  1    wreg      void 
  9005 ;; Registers used:
  9006 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9012 ;;      Params:         0       0       0       0       0       0       0       0
  9013 ;;      Locals:         1       0       0       0       0       0       0       0
  9014 ;;      Temps:          0       0       0       0       0       0       0       0
  9015 ;;      Totals:         1       0       0       0       0       0       0       0
  9016 ;;Total ram usage:        1 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; Hardware stack levels required when called:    4
  9019 ;; This function calls:
  9020 ;;		Nothing
  9021 ;; This function is called by:
  9022 ;;		_Sensor_autoCalibration
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           
  9027                           ;psect for function _Sensor_setCalibratAcqTime
  9028  1522                     _Sensor_setCalibratAcqTime:	
  9029                           
  9030                           ;incstack = 0
  9031                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  9032                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  9033  1522  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
  9034                           
  9035                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 939: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 940: {;mcc_generated_files/mtouch/mtouch_sensor.c: 941:     sensor->acqTime_cal = 1
      +                          ;
  9036  1523  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  9037  1524  3E08               	addlw	8
  9038  1525  0086               	movwf	6
  9039  1526  3001               	movlw	1	; select bank2/3
  9040  1527  0087               	movwf	7
  9041  1528  1601               	bsf	1,4
  9042                           
  9043                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 942:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  9044  1529  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  9045  152A  3E03               	addlw	3
  9046  152B  0086               	movwf	6
  9047  152C  3001               	movlw	1	; select bank2/3
  9048  152D  0087               	movwf	7
  9049  152E  0181               	clrf	1
  9050  152F  0A81               	incf	1,f
  9051  1530  0008               	return
  9052  1531                     __end_of_Sensor_setCalibratAcqTime:	
  9053                           
  9054                           	psect	text48
  9055  14B0                     __ptext48:	
  9056 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  9057 ;; Defined at:
  9058 ;;		line 945 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;  sensor          1    wreg     PTR struct .
  9061 ;;		 -> mtouch_sensor(36), 
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;  sensor          1    1[COMMON] PTR struct .
  9064 ;;		 -> mtouch_sensor(36), 
  9065 ;; Return value:  Size  Location     Type
  9066 ;;                  1    wreg      _Bool 
  9067 ;; Registers used:
  9068 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9069 ;; Tracked objects:
  9070 ;;		On entry : 0/0
  9071 ;;		On exit  : 0/0
  9072 ;;		Unchanged: 0/0
  9073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9074 ;;      Params:         0       0       0       0       0       0       0       0
  9075 ;;      Locals:         1       0       0       0       0       0       0       0
  9076 ;;      Temps:          0       0       0       0       0       0       0       0
  9077 ;;      Totals:         1       0       0       0       0       0       0       0
  9078 ;;Total ram usage:        1 bytes
  9079 ;; Hardware stack levels used:    1
  9080 ;; Hardware stack levels required when called:    4
  9081 ;; This function calls:
  9082 ;;		Nothing
  9083 ;; This function is called by:
  9084 ;;		_Sensor_loadADCSettings
  9085 ;;		_Sensor_autoCalibration
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           
  9090                           ;psect for function _Sensor_isCalibratingAcqTime
  9091  14B0                     _Sensor_isCalibratingAcqTime:	
  9092                           
  9093                           ;incstack = 0
  9094                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  9095                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  9096  14B0  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
  9097                           
  9098                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 945: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 946: {;mcc_generated_files/mtouch/mtouch_sensor.c: 947:     return (_Bool)sensor
      +                          ->acqTime_cal;
  9099  14B1  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
  9100  14B2  3E08               	addlw	8
  9101  14B3  0086               	movwf	6
  9102  14B4  3001               	movlw	1	; select bank2/3
  9103  14B5  0087               	movwf	7
  9104  14B6  0E01               	swapf	1,w
  9105  14B7  3901               	andlw	1
  9106  14B8  0008               	return
  9107  14B9                     __end_of_Sensor_isCalibratingAcqTime:	
  9108                           
  9109                           	psect	text49
  9110  0825                     __ptext49:	
  9111 ;; *************** function _Sensor_getScanGroupIndex *****************
  9112 ;; Defined at:
  9113 ;;		line 362 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  sensor          1    wreg     PTR struct .
  9116 ;;		 -> mtouch_sensor(36), 
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  sensor          1    3[COMMON] PTR struct .
  9119 ;;		 -> mtouch_sensor(36), 
  9120 ;;  sensorGroup     1    4[COMMON] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  1    wreg      unsigned char 
  9123 ;; Registers used:
  9124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9130 ;;      Params:         0       0       0       0       0       0       0       0
  9131 ;;      Locals:         2       0       0       0       0       0       0       0
  9132 ;;      Temps:          2       0       0       0       0       0       0       0
  9133 ;;      Totals:         4       0       0       0       0       0       0       0
  9134 ;;Total ram usage:        4 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    4
  9137 ;; This function calls:
  9138 ;;		Nothing
  9139 ;; This function is called by:
  9140 ;;		_Sensor_postAcquisitionProcess
  9141 ;;		_Sensor_autoCalibration
  9142 ;;		_Sensor_RawSample_Update
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           
  9147                           ;psect for function _Sensor_getScanGroupIndex
  9148  0825                     _Sensor_getScanGroupIndex:	
  9149                           
  9150                           ;incstack = 0
  9151                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  9152                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  9153  0825  00F3               	movwf	Sensor_getScanGroupIndex@sensor
  9154                           
  9155                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 363: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 364:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 365:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  9156  0826  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
  9157  0827                     l4046:	
  9158                           
  9159                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 366:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 367:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  9160  0827  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  9161  0828  00F1               	movwf	??_Sensor_getScanGroupIndex
  9162  0829  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  9163  082A  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  9164  082B  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  9165  082C  305E               	movlw	low (_sensor_scan_group| (0+32768))
  9166  082D  0771               	addwf	??_Sensor_getScanGroupIndex,w
  9167  082E  0084               	movwf	4
  9168  082F  3098               	movlw	high (_sensor_scan_group| (0+32768))
  9169  0830  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  9170  0831  0085               	movwf	5
  9171  0832  0800               	movf	0,w	;code access
  9172  0833  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  9173  0834  1D03               	skipz
  9174  0835  2838               	goto	l4052
  9175  0836                     l4048:	
  9176                           
  9177                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 368:             return 0;
  9178  0836  3000               	movlw	0
  9179  0837  0008               	return
  9180  0838                     l4052:	
  9181                           
  9182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 369:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  9183  0838  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  9184  0839  00F1               	movwf	??_Sensor_getScanGroupIndex
  9185  083A  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  9186  083B  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  9187  083C  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  9188  083D  305F               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  9189  083E  0771               	addwf	??_Sensor_getScanGroupIndex,w
  9190  083F  0084               	movwf	4
  9191  0840  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  9192  0841  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  9193  0842  0085               	movwf	5
  9194  0843  0800               	movf	0,w	;code access
  9195  0844  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  9196  0845  1D03               	skipz
  9197  0846  2849               	goto	l4058
  9198                           
  9199                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 370:             return 1;
  9200  0847  3001               	movlw	1
  9201  0848  0008               	return
  9202  0849                     l4058:	
  9203                           
  9204                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 371:     }
  9205  0849  3001               	movlw	1
  9206  084A  00F1               	movwf	??_Sensor_getScanGroupIndex
  9207  084B  0871               	movf	??_Sensor_getScanGroupIndex,w
  9208  084C  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  9209  084D  3002               	movlw	2
  9210  084E  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  9211  084F  1803               	btfsc	3,0
  9212  0850  2836               	goto	l4048
  9213  0851  2827               	goto	l4046
  9214  0852                     __end_of_Sensor_getScanGroupIndex:	
  9215                           
  9216                           	psect	text50
  9217  1541                     __ptext50:	
  9218 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  9219 ;; Defined at:
  9220 ;;		line 247 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;		None
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;		None
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  1    wreg      void 
  9227 ;; Registers used:
  9228 ;;		wreg, status,2, status,0
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9234 ;;      Params:         0       0       0       0       0       0       0       0
  9235 ;;      Locals:         0       0       0       0       0       0       0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0       0
  9237 ;;      Totals:         0       0       0       0       0       0       0       0
  9238 ;;Total ram usage:        0 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    4
  9241 ;; This function calls:
  9242 ;;		Nothing
  9243 ;; This function is called by:
  9244 ;;		_MTOUCH_Initialize
  9245 ;;		_Sensor_Acq_ExecutePacket
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           
  9250                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  9251  1541                     _MTOUCH_Sensor_Scan_Initialize:	
  9252                           
  9253                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 249:     T2CONbits.T2CKPS = 0x0;
  9254                           
  9255                           ;incstack = 0
  9256                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  9257  1541  30FC               	movlw	-4
  9258  1542  0020               	movlb	0	; select bank0
  9259  1543  059C               	andwf	28,f	;volatile
  9260                           
  9261                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 251:     AD1CON0 = (uint8_t)0;
  9262  1544  002E               	movlb	14	; select bank14
  9263  1545  0191               	clrf	17	;volatile
  9264                           
  9265                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 252:     AD2CON0 = (uint8_t)0;
  9266  1546  002F               	movlb	15	; select bank15
  9267  1547  0191               	clrf	17	;volatile
  9268                           
  9269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 253:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  9270  1548  3090               	movlw	144
  9271  1549  002E               	movlb	14	; select bank14
  9272  154A  0092               	movwf	18	;volatile
  9273                           
  9274                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 254:     AD1CON3 = (uint8_t)0b01000000;
  9275  154B  3040               	movlw	64
  9276  154C  0094               	movwf	20	;volatile
  9277                           
  9278                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 255:     AD2CON3 = (uint8_t)0b01000000;
  9279  154D  3040               	movlw	64
  9280  154E  002F               	movlb	15	; select bank15
  9281  154F  0094               	movwf	20	;volatile
  9282  1550  0008               	return
  9283  1551                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  9284                           
  9285                           	psect	text51
  9286  1531                     __ptext51:	
  9287 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  9288 ;; Defined at:
  9289 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;		None
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;  button          1   58[BANK0 ] enum E3070
  9294 ;; Return value:  Size  Location     Type
  9295 ;;                  1    wreg      void 
  9296 ;; Registers used:
  9297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9298 ;; Tracked objects:
  9299 ;;		On entry : 0/0
  9300 ;;		On exit  : 0/0
  9301 ;;		Unchanged: 0/0
  9302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9303 ;;      Params:         0       0       0       0       0       0       0       0
  9304 ;;      Locals:         0       1       0       0       0       0       0       0
  9305 ;;      Temps:          0       1       0       0       0       0       0       0
  9306 ;;      Totals:         0       2       0       0       0       0       0       0
  9307 ;;Total ram usage:        2 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:   17
  9310 ;; This function calls:
  9311 ;;		_Button_Service
  9312 ;; This function is called by:
  9313 ;;		_MTOUCH_Service_Mainloop
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           
  9318                           ;psect for function _MTOUCH_Button_ServiceAll
  9319  1531                     _MTOUCH_Button_ServiceAll:	
  9320                           
  9321                           ;mcc_generated_files/mtouch/mtouch_button.c: 199:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 202:     for (button = 0; button < 4u; button
      +                          ++)
  9322                           
  9323                           ;incstack = 0
  9324 ;; hardware stack exceeded
  9325                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9326  1531  0020               	movlb	0	; select bank0
  9327  1532  01DA               	clrf	MTOUCH_Button_ServiceAll@button
  9328  1533                     l6500:	
  9329                           
  9330                           ;mcc_generated_files/mtouch/mtouch_button.c: 203:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 204:         Button_Service(button);
  9331  1533  085A               	movf	MTOUCH_Button_ServiceAll@button,w
  9332  1534  318A  22FA  3195   	fcall	_Button_Service
  9333                           
  9334                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     }
  9335  1537  3001               	movlw	1
  9336  1538  0020               	movlb	0	; select bank0
  9337  1539  00D9               	movwf	??_MTOUCH_Button_ServiceAll
  9338  153A  0859               	movf	??_MTOUCH_Button_ServiceAll,w
  9339  153B  07DA               	addwf	MTOUCH_Button_ServiceAll@button,f
  9340  153C  3004               	movlw	4
  9341  153D  025A               	subwf	MTOUCH_Button_ServiceAll@button,w
  9342  153E  1803               	btfsc	3,0
  9343  153F  0008               	return
  9344  1540  2D33               	goto	l6500
  9345  1541                     __end_of_MTOUCH_Button_ServiceAll:	
  9346                           
  9347                           	psect	text52
  9348  0AFA                     __ptext52:	
  9349 ;; *************** function _Button_Service *****************
  9350 ;; Defined at:
  9351 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;  name            1    wreg     enum E3070
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;  name            1   55[BANK0 ] enum E3070
  9356 ;;  button          1   56[BANK0 ] PTR struct .
  9357 ;;		 -> mtouch_button(64), 
  9358 ;; Return value:  Size  Location     Type
  9359 ;;                  1    wreg      void 
  9360 ;; Registers used:
  9361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9367 ;;      Params:         0       0       0       0       0       0       0       0
  9368 ;;      Locals:         0       2       0       0       0       0       0       0
  9369 ;;      Temps:          0       2       0       0       0       0       0       0
  9370 ;;      Totals:         0       4       0       0       0       0       0       0
  9371 ;;Total ram usage:        4 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:   16
  9374 ;; This function calls:
  9375 ;;		_Button_Deviation_Update
  9376 ;;		_Button_Reading_Update
  9377 ;;		_Button_State_Initializing
  9378 ;;		_Button_State_NotPressed
  9379 ;;		_Button_State_Pressed
  9380 ;;		_MTOUCH_Button_Initialize
  9381 ;;		_MTOUCH_Sensor_isCalibrated
  9382 ;;		_MTOUCH_Sensor_wasSampled
  9383 ;; This function is called by:
  9384 ;;		_MTOUCH_Button_ServiceAll
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           
  9389                           ;psect for function _Button_Service
  9390  0AFA                     _Button_Service:	
  9391                           
  9392                           ;incstack = 0
  9393 ;; hardware stack exceeded
  9394                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9395                           ;Button_Service@name stored from wreg
  9396  0AFA  0020               	movlb	0	; select bank0
  9397  0AFB  00D7               	movwf	Button_Service@name
  9398                           
  9399                           ;mcc_generated_files/mtouch/mtouch_button.c: 208: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 209: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 210:     mtouch_button_t* button = &mtouch_button[name];
  9400  0AFC  0857               	movf	Button_Service@name,w
  9401  0AFD  00D5               	movwf	??_Button_Service
  9402  0AFE  3003               	movlw	3
  9403  0AFF                     u5055:	
  9404  0AFF  35D5               	lslf	??_Button_Service,f
  9405  0B00  3EFF               	addlw	-1
  9406  0B01  1D03               	skipz
  9407  0B02  2AFF               	goto	u5055
  9408  0B03  3555               	lslf	??_Button_Service,w
  9409  0B04  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  9410  0B05  00D6               	movwf	??_Button_Service+1
  9411  0B06  0856               	movf	??_Button_Service+1,w
  9412  0B07  00D8               	movwf	Button_Service@button
  9413                           
  9414                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  9415  0B08  0A58               	incf	Button_Service@button,w
  9416  0B09  0086               	movwf	6
  9417  0B0A  3001               	movlw	1	; select bank2/3
  9418  0B0B  0087               	movwf	7
  9419  0B0C  0801               	movf	1,w
  9420  0B0D  3195  2513  318A   	fcall	_MTOUCH_Sensor_wasSampled
  9421  0B10  3A00               	xorlw	0
  9422  0B11  1903               	skipnz
  9423  0B12  0008               	return
  9424  0B13  0020               	movlb	0	; select bank0
  9425  0B14  0A58               	incf	Button_Service@button,w
  9426  0B15  0086               	movwf	6
  9427  0B16  3001               	movlw	1	; select bank2/3
  9428  0B17  0087               	movwf	7
  9429  0B18  0801               	movf	1,w
  9430  0B19  3195  25E2  318A   	fcall	_MTOUCH_Sensor_isCalibrated
  9431  0B1C  3A00               	xorlw	0
  9432  0B1D  1903               	skipnz
  9433  0B1E  0008               	return
  9434                           
  9435                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 214:         Button_Reading_Update(button);
  9436  0B1F  0020               	movlb	0	; select bank0
  9437  0B20  0858               	movf	Button_Service@button,w
  9438  0B21  3194  24DB  318A   	fcall	_Button_Reading_Update
  9439                           
  9440                           ;mcc_generated_files/mtouch/mtouch_button.c: 215:         Button_Deviation_Update(button
      +                          );
  9441  0B24  0020               	movlb	0	; select bank0
  9442  0B25  0858               	movf	Button_Service@button,w
  9443  0B26  318C  2489  318A   	fcall	_Button_Deviation_Update
  9444                           
  9445                           ;mcc_generated_files/mtouch/mtouch_button.c: 217:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  9446  0B29  0020               	movlb	0	; select bank0
  9447  0B2A  0858               	movf	Button_Service@button,w
  9448  0B2B  3E02               	addlw	2
  9449  0B2C  0086               	movwf	6
  9450  0B2D  3001               	movlw	1	; select bank2/3
  9451  0B2E  0087               	movwf	7
  9452  0B2F  3003               	movlw	3
  9453  0B30  0201               	subwf	1,w
  9454  0B31  1C03               	skipc
  9455  0B32  2B3B               	goto	l6464
  9456                           
  9457                           ;mcc_generated_files/mtouch/mtouch_button.c: 218:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 219:             MTOUCH_Button_Initialize(button->name);
  9458  0B33  0858               	movf	Button_Service@button,w
  9459  0B34  0086               	movwf	6
  9460  0B35  3001               	movlw	1	; select bank2/3
  9461  0B36  0087               	movwf	7
  9462  0B37  0801               	movf	1,w
  9463  0B38  3189  21A5  318A   	fcall	_MTOUCH_Button_Initialize
  9464  0B3B                     l6464:	
  9465                           
  9466                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  9467  0B3B  0020               	movlb	0	; select bank0
  9468  0B3C  0858               	movf	Button_Service@button,w
  9469  0B3D  00D5               	movwf	??_Button_Service
  9470  0B3E  0855               	movf	??_Button_Service,w
  9471  0B3F  00D0               	movwf	Button_State_Pressed@button
  9472  0B40  0858               	movf	Button_Service@button,w
  9473  0B41  3E02               	addlw	2
  9474  0B42  0086               	movwf	6
  9475  0B43  3001               	movlw	1	; select bank2/3
  9476  0B44  0087               	movwf	7
  9477  0B45  3501               	lslf	1,w
  9478  0B46  3EBE               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  9479  0B47  0086               	movwf	6
  9480  0B48  0187               	clrf	7
  9481  0B49  3F41               	moviw [1]fsr1
  9482  0B4A  008A               	movwf	10
  9483  0B4B  3F40               	moviw [0]fsr1
  9484  0B4C  000A               	callw
  9485  0B4D  318A               	pagesel	$
  9486  0B4E  0008               	return
  9487  0B4F                     __end_of_Button_Service:	
  9488                           
  9489                           	psect	text53
  9490  1513                     __ptext53:	
  9491 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  9492 ;; Defined at:
  9493 ;;		line 967 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;  sensor          1    wreg     enum E2854
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;  sensor          1    6[COMMON] enum E2854
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  1    wreg      _Bool 
  9500 ;; Registers used:
  9501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9502 ;; Tracked objects:
  9503 ;;		On entry : 0/0
  9504 ;;		On exit  : 0/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9507 ;;      Params:         0       0       0       0       0       0       0       0
  9508 ;;      Locals:         1       0       0       0       0       0       0       0
  9509 ;;      Temps:          1       0       0       0       0       0       0       0
  9510 ;;      Totals:         2       0       0       0       0       0       0       0
  9511 ;;Total ram usage:        2 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    5
  9514 ;; This function calls:
  9515 ;;		___bmul
  9516 ;; This function is called by:
  9517 ;;		_Button_Service
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           
  9522                           ;psect for function _MTOUCH_Sensor_wasSampled
  9523  1513                     _MTOUCH_Sensor_wasSampled:	
  9524                           
  9525                           ;incstack = 0
  9526                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9527                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9528  1513  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
  9529                           
  9530                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 967: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 968: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 969:     return (_Bool)mtouch_sensor[sensor].sampled;
  9531  1514  3009               	movlw	9
  9532  1515  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
  9533  1516  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
  9534  1517  00F1               	movwf	___bmul@multiplicand
  9535  1518  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  9536  1519  3195  2562         	fcall	___bmul
  9537  151B  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9538  151C  0086               	movwf	6
  9539  151D  3001               	movlw	1	; select bank2/3
  9540  151E  0087               	movwf	7
  9541  151F  0801               	movf	1,w
  9542  1520  3901               	andlw	1
  9543  1521  0008               	return
  9544  1522                     __end_of_MTOUCH_Sensor_wasSampled:	
  9545                           
  9546                           	psect	text54
  9547  15E2                     __ptext54:	
  9548 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9549 ;; Defined at:
  9550 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;  sensor          1    wreg     enum E2854
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;  sensor          1    6[COMMON] enum E2854
  9555 ;; Return value:  Size  Location     Type
  9556 ;;                  1    wreg      _Bool 
  9557 ;; Registers used:
  9558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9564 ;;      Params:         0       0       0       0       0       0       0       0
  9565 ;;      Locals:         1       0       0       0       0       0       0       0
  9566 ;;      Temps:          1       0       0       0       0       0       0       0
  9567 ;;      Totals:         2       0       0       0       0       0       0       0
  9568 ;;Total ram usage:        2 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    5
  9571 ;; This function calls:
  9572 ;;		___bmul
  9573 ;; This function is called by:
  9574 ;;		_Button_Service
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           
  9579                           ;psect for function _MTOUCH_Sensor_isCalibrated
  9580  15E2                     _MTOUCH_Sensor_isCalibrated:	
  9581                           
  9582                           ;incstack = 0
  9583                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9584                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9585  15E2  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  9586                           
  9587                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 921: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 922:     if(sensor < 4u)
  9588  15E3  3004               	movlw	4
  9589  15E4  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  9590  15E5  1803               	skipnc
  9591  15E6  2DF6               	goto	l6312
  9592                           
  9593                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 923:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  9594  15E7  3009               	movlw	9
  9595  15E8  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
  9596  15E9  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
  9597  15EA  00F1               	movwf	___bmul@multiplicand
  9598  15EB  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  9599  15EC  3195  2562         	fcall	___bmul
  9600  15EE  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9601  15EF  0086               	movwf	6
  9602  15F0  3001               	movlw	1	; select bank2/3
  9603  15F1  0087               	movwf	7
  9604  15F2  0C01               	rrf	1,w
  9605  15F3  0C89               	rrf	9,f
  9606  15F4  3901               	andlw	1
  9607  15F5  0008               	return
  9608  15F6                     l6312:	
  9609                           
  9610                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925:         return 0;
  9611  15F6  3000               	movlw	0
  9612  15F7  0008               	return
  9613  15F8                     __end_of_MTOUCH_Sensor_isCalibrated:	
  9614                           
  9615                           	psect	text55
  9616  06F7                     __ptext55:	
  9617 ;; *************** function _Button_State_NotPressed *****************
  9618 ;; Defined at:
  9619 ;;		line 245 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;  button          1   48[BANK0 ] PTR struct .
  9622 ;;		 -> mtouch_button(64), 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;		None
  9625 ;; Return value:  Size  Location     Type
  9626 ;;                  1    wreg      void 
  9627 ;; Registers used:
  9628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9634 ;;      Params:         0       1       0       0       0       0       0       0
  9635 ;;      Locals:         0       0       0       0       0       0       0       0
  9636 ;;      Temps:          0       2       0       0       0       0       0       0
  9637 ;;      Totals:         0       3       0       0       0       0       0       0
  9638 ;;Total ram usage:        3 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:    7
  9641 ;; This function calls:
  9642 ;;		_Button_Baseline_Update
  9643 ;;		_Button_DefaultCallback
  9644 ;;		_MTOUCH_Button_Initialize
  9645 ;;		_myButtonPressedCallback
  9646 ;; This function is called by:
  9647 ;;		_Button_Service
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           
  9652                           ;psect for function _Button_State_NotPressed
  9653  06F7                     _Button_State_NotPressed:	
  9654                           
  9655                           ;mcc_generated_files/mtouch/mtouch_button.c: 245: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 246: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 248:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  9656                           
  9657                           ;incstack = 0
  9658                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9659  06F7  0020               	movlb	0	; select bank0
  9660  06F8  0850               	movf	Button_State_NotPressed@button,w
  9661  06F9  3E09               	addlw	9
  9662  06FA  0086               	movwf	6
  9663  06FB  3001               	movlw	1	; select bank2/3
  9664  06FC  0087               	movwf	7
  9665  06FD  0801               	movf	1,w
  9666  06FE  3A80               	xorlw	128
  9667  06FF  00D1               	movwf	??_Button_State_NotPressed
  9668  0700  0850               	movf	Button_State_NotPressed@button,w
  9669  0701  3E0E               	addlw	14
  9670  0702  0086               	movwf	6
  9671  0703  3001               	movlw	1	; select bank2/3
  9672  0704  0087               	movwf	7
  9673  0705  0301               	decf	1,w
  9674  0706  3AFF               	xorlw	255
  9675  0707  3A80               	xorlw	128
  9676  0708  02D1               	subwf	??_Button_State_NotPressed,f
  9677  0709  1803               	skipnc
  9678  070A  2F36               	goto	l6362
  9679                           
  9680                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 250:         (button->counter)++;
  9681  070B  0850               	movf	Button_State_NotPressed@button,w
  9682  070C  3E0A               	addlw	10
  9683  070D  0086               	movwf	6
  9684  070E  3001               	movlw	1	; select bank2/3
  9685  070F  0087               	movwf	7
  9686  0710  3001               	movlw	1
  9687  0711  0781               	addwf	1,f
  9688  0712  3141               	addfsr 1,1
  9689  0713  1803               	skipnc
  9690  0714  0A81               	incf	1,f
  9691                           
  9692                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  9693  0715  0850               	movf	Button_State_NotPressed@button,w
  9694  0716  3E0A               	addlw	10
  9695  0717  0086               	movwf	6
  9696  0718  3001               	movlw	1	; select bank2/3
  9697  0719  0087               	movwf	7
  9698  071A  3F40               	moviw [0]fsr1
  9699  071B  00D1               	movwf	??_Button_State_NotPressed
  9700  071C  3F41               	moviw [1]fsr1
  9701  071D  00D2               	movwf	??_Button_State_NotPressed+1
  9702  071E  3000               	movlw	0
  9703  071F  0252               	subwf	??_Button_State_NotPressed+1,w
  9704  0720  3041               	movlw	65
  9705  0721  1903               	skipnz
  9706  0722  0251               	subwf	??_Button_State_NotPressed,w
  9707  0723  1C03               	skipc
  9708  0724  2F78               	goto	l1110
  9709                           
  9710                           ;mcc_generated_files/mtouch/mtouch_button.c: 252:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 253:             button->counter = (mtouch_button_statecounter_t)0;
  9711  0725  0850               	movf	Button_State_NotPressed@button,w
  9712  0726  3E0A               	addlw	10
  9713  0727  0086               	movwf	6
  9714  0728  3001               	movlw	1	; select bank2/3
  9715  0729  0087               	movwf	7
  9716  072A  3000               	movlw	0
  9717  072B  3FC0               	movwi [0]fsr1
  9718  072C  3FC1               	movwi [1]fsr1
  9719                           
  9720                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  9721  072D  0850               	movf	Button_State_NotPressed@button,w
  9722  072E  0086               	movwf	6
  9723  072F  3001               	movlw	1	; select bank2/3
  9724  0730  0087               	movwf	7
  9725  0731  0801               	movf	1,w
  9726  0732  3189  21A5  3186   	fcall	_MTOUCH_Button_Initialize
  9727  0735  2F78               	goto	l1110
  9728  0736                     l6362:	
  9729  0736  0850               	movf	Button_State_NotPressed@button,w
  9730  0737  3E09               	addlw	9
  9731  0738  0086               	movwf	6
  9732  0739  3001               	movlw	1	; select bank2/3
  9733  073A  0087               	movwf	7
  9734  073B  0801               	movf	1,w
  9735  073C  00D1               	movwf	??_Button_State_NotPressed
  9736  073D  01D2               	clrf	??_Button_State_NotPressed+1
  9737  073E  1BD1               	btfsc	??_Button_State_NotPressed,7
  9738  073F  03D2               	decf	??_Button_State_NotPressed+1,f
  9739  0740  0850               	movf	Button_State_NotPressed@button,w
  9740  0741  3E0E               	addlw	14
  9741  0742  0086               	movwf	6
  9742  0743  3001               	movlw	1	; select bank2/3
  9743  0744  0087               	movwf	7
  9744  0745  0852               	movf	??_Button_State_NotPressed+1,w
  9745  0746  3A80               	xorlw	128
  9746  0747  3C80               	sublw	128
  9747  0748  1D03               	skipz
  9748  0749  2F4C               	goto	u4955
  9749  074A  0851               	movf	??_Button_State_NotPressed,w
  9750  074B  0201               	subwf	1,w
  9751  074C                     u4955:	
  9752  074C  1803               	skipnc
  9753  074D  2F6F               	goto	l6368
  9754                           
  9755                           ;mcc_generated_files/mtouch/mtouch_button.c: 259:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 261:         button->state = MTOUCH_BUTTON_STATE_pressed;
  9756  074E  3002               	movlw	2
  9757  074F  0020               	movlb	0	; select bank0
  9758  0750  00D1               	movwf	??_Button_State_NotPressed
  9759  0751  0850               	movf	Button_State_NotPressed@button,w
  9760  0752  3E02               	addlw	2
  9761  0753  0086               	movwf	6
  9762  0754  3001               	movlw	1	; select bank2/3
  9763  0755  0087               	movwf	7
  9764  0756  0851               	movf	??_Button_State_NotPressed,w
  9765  0757  0081               	movwf	1
  9766                           
  9767                           ;mcc_generated_files/mtouch/mtouch_button.c: 262:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9768  0758  0850               	movf	Button_State_NotPressed@button,w
  9769  0759  3E0A               	addlw	10
  9770  075A  0086               	movwf	6
  9771  075B  3001               	movlw	1	; select bank2/3
  9772  075C  0087               	movwf	7
  9773  075D  3000               	movlw	0
  9774  075E  3FC0               	movwi [0]fsr1
  9775  075F  3FC1               	movwi [1]fsr1
  9776                           
  9777                           ;mcc_generated_files/mtouch/mtouch_button.c: 263:         callback_pressed(button->name)
      +                          ;
  9778  0760  0850               	movf	Button_State_NotPressed@button,w
  9779  0761  0086               	movwf	6
  9780  0762  3001               	movlw	1	; select bank2/3
  9781  0763  0087               	movwf	7
  9782  0764  0801               	movf	1,w
  9783  0765  00D1               	movwf	??_Button_State_NotPressed
  9784  0766  0851               	movf	??_Button_State_NotPressed,w
  9785  0767  00CF               	movwf	Button_DefaultCallback@button
  9786  0768  0021               	movlb	1	; select bank1
  9787  0769  0847               	movf	(_callback_pressed+1)^(0+128),w
  9788  076A  008A               	movwf	10
  9789  076B  0846               	movf	_callback_pressed^(0+128),w
  9790  076C  000A               	callw
  9791  076D  3186               	pagesel	$
  9792                           
  9793                           ;mcc_generated_files/mtouch/mtouch_button.c: 264:     }
  9794  076E  2F78               	goto	l1110
  9795  076F                     l6368:	
  9796                           
  9797                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->counter = (mtouch_button_statecounter_t)0;
  9798  076F  0020               	movlb	0	; select bank0
  9799  0770  0850               	movf	Button_State_NotPressed@button,w
  9800  0771  3E0A               	addlw	10
  9801  0772  0086               	movwf	6
  9802  0773  3001               	movlw	1	; select bank2/3
  9803  0774  0087               	movwf	7
  9804  0775  3000               	movlw	0
  9805  0776  3FC0               	movwi [0]fsr1
  9806  0777  3FC1               	movwi [1]fsr1
  9807  0778                     l1110:	
  9808                           
  9809                           ;mcc_generated_files/mtouch/mtouch_button.c: 273:     (button->baseline_count)++;
  9810  0778  0020               	movlb	0	; select bank0
  9811  0779  0850               	movf	Button_State_NotPressed@button,w
  9812  077A  3E0C               	addlw	12
  9813  077B  0086               	movwf	6
  9814  077C  3001               	movlw	1	; select bank2/3
  9815  077D  0087               	movwf	7
  9816  077E  3001               	movlw	1
  9817  077F  0781               	addwf	1,f
  9818  0780  3141               	addfsr 1,1
  9819  0781  1803               	skipnc
  9820  0782  0A81               	incf	1,f
  9821                           
  9822                           ;mcc_generated_files/mtouch/mtouch_button.c: 274:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
  9823  0783  0850               	movf	Button_State_NotPressed@button,w
  9824  0784  3E0C               	addlw	12
  9825  0785  0086               	movwf	6
  9826  0786  3001               	movlw	1	; select bank2/3
  9827  0787  0087               	movwf	7
  9828  0788  0016               	moviw fsr1++
  9829  0789  3A40               	xorlw	64
  9830  078A  00D1               	movwf	??_Button_State_NotPressed
  9831  078B  0016               	moviw fsr1++
  9832  078C  04D1               	iorwf	??_Button_State_NotPressed,f
  9833  078D  1D03               	btfss	3,2
  9834  078E  0008               	return
  9835                           
  9836                           ;mcc_generated_files/mtouch/mtouch_button.c: 275:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 276:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9837  078F  0850               	movf	Button_State_NotPressed@button,w
  9838  0790  3E0C               	addlw	12
  9839  0791  0086               	movwf	6
  9840  0792  3001               	movlw	1	; select bank2/3
  9841  0793  0087               	movwf	7
  9842  0794  3000               	movlw	0
  9843  0795  3FC0               	movwi [0]fsr1
  9844  0796  3FC1               	movwi [1]fsr1
  9845                           
  9846                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:         Button_Baseline_Update(button)
      +                          ;
  9847  0797  0850               	movf	Button_State_NotPressed@button,w
  9848  0798  318D  2510         	fcall	_Button_Baseline_Update
  9849  079A  0008               	return
  9850  079B                     __end_of_Button_State_NotPressed:	
  9851                           
  9852                           	psect	text56
  9853  079B                     __ptext56:	
  9854 ;; *************** function _Button_State_Initializing *****************
  9855 ;; Defined at:
  9856 ;;		line 225 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9857 ;; Parameters:    Size  Location     Type
  9858 ;;  button          1   48[BANK0 ] PTR struct .
  9859 ;;		 -> mtouch_button(64), 
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;		None
  9862 ;; Return value:  Size  Location     Type
  9863 ;;                  1    wreg      void 
  9864 ;; Registers used:
  9865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9871 ;;      Params:         0       1       0       0       0       0       0       0
  9872 ;;      Locals:         0       0       0       0       0       0       0       0
  9873 ;;      Temps:          0       4       0       0       0       0       0       0
  9874 ;;      Totals:         0       5       0       0       0       0       0       0
  9875 ;;Total ram usage:        5 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:    7
  9878 ;; This function calls:
  9879 ;;		_Button_Baseline_Initialize
  9880 ;;		_Button_Baseline_Update
  9881 ;; This function is called by:
  9882 ;;		_Button_Service
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           
  9887                           ;psect for function _Button_State_Initializing
  9888  079B                     _Button_State_Initializing:	
  9889                           
  9890                           ;mcc_generated_files/mtouch/mtouch_button.c: 225: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 226: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 228:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  9891                           
  9892                           ;incstack = 0
  9893                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9894  079B  0020               	movlb	0	; select bank0
  9895  079C  0850               	movf	Button_State_Initializing@button,w
  9896  079D  3E0A               	addlw	10
  9897  079E  0086               	movwf	6
  9898  079F  3001               	movlw	1	; select bank2/3
  9899  07A0  0087               	movwf	7
  9900  07A1  3F40               	moviw [0]fsr1
  9901  07A2  00D1               	movwf	??_Button_State_Initializing
  9902  07A3  3F41               	moviw [1]fsr1
  9903  07A4  00D2               	movwf	??_Button_State_Initializing+1
  9904  07A5  3000               	movlw	0
  9905  07A6  0252               	subwf	??_Button_State_Initializing+1,w
  9906  07A7  3009               	movlw	9
  9907  07A8  1903               	skipnz
  9908  07A9  0251               	subwf	??_Button_State_Initializing,w
  9909  07AA  1803               	skipnc
  9910  07AB  2FB1               	goto	l6346
  9911                           
  9912                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 230:         Button_Baseline_Initialize(button);
  9913  07AC  0850               	movf	Button_State_Initializing@button,w
  9914  07AD  3188  2052  3187   	fcall	_Button_Baseline_Initialize
  9915                           
  9916                           ;mcc_generated_files/mtouch/mtouch_button.c: 231:     } else {
  9917  07B0  2FB5               	goto	l6348
  9918  07B1                     l6346:	
  9919                           
  9920                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         Button_Baseline_Update(button)
      +                          ;
  9921  07B1  0850               	movf	Button_State_Initializing@button,w
  9922  07B2  318D  2510  3187   	fcall	_Button_Baseline_Update
  9923  07B5                     l6348:	
  9924                           
  9925                           ;mcc_generated_files/mtouch/mtouch_button.c: 236:     (button->counter)++;
  9926  07B5  0020               	movlb	0	; select bank0
  9927  07B6  0850               	movf	Button_State_Initializing@button,w
  9928  07B7  3E0A               	addlw	10
  9929  07B8  0086               	movwf	6
  9930  07B9  3001               	movlw	1	; select bank2/3
  9931  07BA  0087               	movwf	7
  9932  07BB  3001               	movlw	1
  9933  07BC  0781               	addwf	1,f
  9934  07BD  3141               	addfsr 1,1
  9935  07BE  1803               	skipnc
  9936  07BF  0A81               	incf	1,f
  9937                           
  9938                           ;mcc_generated_files/mtouch/mtouch_button.c: 237:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  9939  07C0  0850               	movf	Button_State_Initializing@button,w
  9940  07C1  3E0A               	addlw	10
  9941  07C2  0086               	movwf	6
  9942  07C3  3001               	movlw	1	; select bank2/3
  9943  07C4  0087               	movwf	7
  9944  07C5  3F40               	moviw [0]fsr1
  9945  07C6  00D1               	movwf	??_Button_State_Initializing
  9946  07C7  3F41               	moviw [1]fsr1
  9947  07C8  00D2               	movwf	??_Button_State_Initializing+1
  9948  07C9  3000               	movlw	0
  9949  07CA  0252               	subwf	??_Button_State_Initializing+1,w
  9950  07CB  3010               	movlw	16
  9951  07CC  1903               	skipnz
  9952  07CD  0251               	subwf	??_Button_State_Initializing,w
  9953  07CE  1C03               	skipc
  9954  07CF  0008               	return
  9955                           
  9956                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 239:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
  9957  07D0  0850               	movf	Button_State_Initializing@button,w
  9958  07D1  3E05               	addlw	5
  9959  07D2  0086               	movwf	6
  9960  07D3  3001               	movlw	1	; select bank2/3
  9961  07D4  0087               	movwf	7
  9962  07D5  3F40               	moviw [0]fsr1
  9963  07D6  00D1               	movwf	??_Button_State_Initializing
  9964  07D7  3F41               	moviw [1]fsr1
  9965  07D8  00D2               	movwf	??_Button_State_Initializing+1
  9966  07D9  3F42               	moviw [2]fsr1
  9967  07DA  00D3               	movwf	??_Button_State_Initializing+2
  9968  07DB  3F43               	moviw [3]fsr1
  9969  07DC  00D4               	movwf	??_Button_State_Initializing+3
  9970  07DD  3004               	movlw	4
  9971  07DE                     u4925:	
  9972  07DE  36D4               	lsrf	??_Button_State_Initializing+3,f
  9973  07DF  0CD3               	rrf	??_Button_State_Initializing+2,f
  9974  07E0  0CD2               	rrf	??_Button_State_Initializing+1,f
  9975  07E1  0CD1               	rrf	??_Button_State_Initializing,f
  9976  07E2  0B89               	decfsz	9,f
  9977  07E3  2FDE               	goto	u4925
  9978  07E4  0850               	movf	Button_State_Initializing@button,w
  9979  07E5  3E03               	addlw	3
  9980  07E6  0086               	movwf	6
  9981  07E7  3001               	movlw	1	; select bank2/3
  9982  07E8  0087               	movwf	7
  9983  07E9  0851               	movf	??_Button_State_Initializing,w
  9984  07EA  3FC0               	movwi [0]fsr1
  9985  07EB  0852               	movf	??_Button_State_Initializing+1,w
  9986  07EC  3FC1               	movwi [1]fsr1
  9987                           
  9988                           ;mcc_generated_files/mtouch/mtouch_button.c: 240:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
  9989  07ED  0850               	movf	Button_State_Initializing@button,w
  9990  07EE  3E02               	addlw	2
  9991  07EF  0086               	movwf	6
  9992  07F0  3001               	movlw	1	; select bank2/3
  9993  07F1  0087               	movwf	7
  9994  07F2  0181               	clrf	1
  9995  07F3  0A81               	incf	1,f
  9996                           
  9997                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9998  07F4  0850               	movf	Button_State_Initializing@button,w
  9999  07F5  3E0A               	addlw	10
 10000  07F6  0086               	movwf	6
 10001  07F7  3001               	movlw	1	; select bank2/3
 10002  07F8  0087               	movwf	7
 10003  07F9  3000               	movlw	0
 10004  07FA  3FC0               	movwi [0]fsr1
 10005  07FB  3FC1               	movwi [1]fsr1
 10006  07FC  0008               	return
 10007  07FD                     __end_of_Button_State_Initializing:	
 10008                           
 10009                           	psect	text57
 10010  0BAB                     __ptext57:	
 10011 ;; *************** function _Button_State_Pressed *****************
 10012 ;; Defined at:
 10013 ;;		line 281 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;  button          1   48[BANK0 ] PTR struct .
 10016 ;;		 -> mtouch_button(64), 
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;		None
 10019 ;; Return value:  Size  Location     Type
 10020 ;;                  1    wreg      void 
 10021 ;; Registers used:
 10022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10023 ;; Tracked objects:
 10024 ;;		On entry : 0/0
 10025 ;;		On exit  : 0/0
 10026 ;;		Unchanged: 0/0
 10027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10028 ;;      Params:         0       1       0       0       0       0       0       0
 10029 ;;      Locals:         0       0       0       0       0       0       0       0
 10030 ;;      Temps:          0       2       0       0       0       0       0       0
 10031 ;;      Totals:         0       3       0       0       0       0       0       0
 10032 ;;Total ram usage:        3 bytes
 10033 ;; Hardware stack levels used:    1
 10034 ;; Hardware stack levels required when called:   15
 10035 ;; This function calls:
 10036 ;;		_Button_DefaultCallback
 10037 ;;		_MTOUCH_Button_Initialize
 10038 ;;		_myButtonReleasedCallback
 10039 ;; This function is called by:
 10040 ;;		_Button_Service
 10041 ;; This function uses a non-reentrant model
 10042 ;;
 10043                           
 10044                           
 10045                           ;psect for function _Button_State_Pressed
 10046  0BAB                     _Button_State_Pressed:	
 10047                           
 10048                           ;mcc_generated_files/mtouch/mtouch_button.c: 281: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 282: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 284:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 10049                           
 10050                           ;incstack = 0
 10051 ;; hardware stack exceeded
 10052                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10053  0BAB  0020               	movlb	0	; select bank0
 10054  0BAC  0850               	movf	Button_State_Pressed@button,w
 10055  0BAD  3E0A               	addlw	10
 10056  0BAE  0086               	movwf	6
 10057  0BAF  3001               	movlw	1	; select bank2/3
 10058  0BB0  0087               	movwf	7
 10059  0BB1  3F40               	moviw [0]fsr1
 10060  0BB2  00D1               	movwf	??_Button_State_Pressed
 10061  0BB3  3F41               	moviw [1]fsr1
 10062  0BB4  00D2               	movwf	??_Button_State_Pressed+1
 10063  0BB5  3007               	movlw	7
 10064  0BB6  0252               	subwf	??_Button_State_Pressed+1,w
 10065  0BB7  30D0               	movlw	208
 10066  0BB8  1903               	skipnz
 10067  0BB9  0251               	subwf	??_Button_State_Pressed,w
 10068  0BBA  1C03               	skipc
 10069  0BBB  2BD4               	goto	l6380
 10070                           
 10071                           ;mcc_generated_files/mtouch/mtouch_button.c: 285:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 286:         MTOUCH_Button_Initialize(button->name);
 10072  0BBC  0850               	movf	Button_State_Pressed@button,w
 10073  0BBD  0086               	movwf	6
 10074  0BBE  3001               	movlw	1	; select bank2/3
 10075  0BBF  0087               	movwf	7
 10076  0BC0  0801               	movf	1,w
 10077  0BC1  3189  21A5  318B   	fcall	_MTOUCH_Button_Initialize
 10078                           
 10079                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         callback_notPressed(button->na
      +                          me);
 10080  0BC4  0020               	movlb	0	; select bank0
 10081  0BC5  0850               	movf	Button_State_Pressed@button,w
 10082  0BC6  0086               	movwf	6
 10083  0BC7  3001               	movlw	1	; select bank2/3
 10084  0BC8  0087               	movwf	7
 10085  0BC9  0801               	movf	1,w
 10086  0BCA  00D1               	movwf	??_Button_State_Pressed
 10087  0BCB  0851               	movf	??_Button_State_Pressed,w
 10088  0BCC  00CF               	movwf	Button_DefaultCallback@button
 10089  0BCD  0021               	movlb	1	; select bank1
 10090  0BCE  0845               	movf	(_callback_notPressed+1)^(0+128),w
 10091  0BCF  008A               	movwf	10
 10092  0BD0  0844               	movf	_callback_notPressed^(0+128),w
 10093  0BD1  000A               	callw
 10094  0BD2  318B               	pagesel	$
 10095                           
 10096                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:     }
 10097  0BD3  0008               	return
 10098  0BD4                     l6380:	
 10099  0BD4  0850               	movf	Button_State_Pressed@button,w
 10100  0BD5  3E09               	addlw	9
 10101  0BD6  0086               	movwf	6
 10102  0BD7  3001               	movlw	1	; select bank2/3
 10103  0BD8  0087               	movwf	7
 10104  0BD9  0801               	movf	1,w
 10105  0BDA  3A80               	xorlw	128
 10106  0BDB  00D1               	movwf	??_Button_State_Pressed
 10107  0BDC  0850               	movf	Button_State_Pressed@button,w
 10108  0BDD  3E0E               	addlw	14
 10109  0BDE  0086               	movwf	6
 10110  0BDF  3001               	movlw	1	; select bank2/3
 10111  0BE0  0087               	movwf	7
 10112  0BE1  0850               	movf	Button_State_Pressed@button,w
 10113  0BE2  3E0E               	addlw	14
 10114  0BE3  0084               	movwf	4
 10115  0BE4  3001               	movlw	1	; select bank2/3
 10116  0BE5  0085               	movwf	5
 10117  0BE6  3600               	lsrf	0,w
 10118  0BE7  0201               	subwf	1,w
 10119  0BE8  3A80               	xorlw	128
 10120  0BE9  02D1               	subwf	??_Button_State_Pressed,f
 10121  0BEA  1803               	skipnc
 10122  0BEB  0008               	return
 10123                           
 10124                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 293:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 10125  0BEC  0850               	movf	Button_State_Pressed@button,w
 10126  0BED  3E02               	addlw	2
 10127  0BEE  0086               	movwf	6
 10128  0BEF  3001               	movlw	1	; select bank2/3
 10129  0BF0  0087               	movwf	7
 10130  0BF1  0181               	clrf	1
 10131  0BF2  0A81               	incf	1,f
 10132                           
 10133                           ;mcc_generated_files/mtouch/mtouch_button.c: 294:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10134  0BF3  0850               	movf	Button_State_Pressed@button,w
 10135  0BF4  3E0A               	addlw	10
 10136  0BF5  0086               	movwf	6
 10137  0BF6  3001               	movlw	1	; select bank2/3
 10138  0BF7  0087               	movwf	7
 10139  0BF8  3000               	movlw	0
 10140  0BF9  3FC0               	movwi [0]fsr1
 10141  0BFA  3FC1               	movwi [1]fsr1
 10142                           
 10143                           ;mcc_generated_files/mtouch/mtouch_button.c: 295:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 10144  0BFB  0850               	movf	Button_State_Pressed@button,w
 10145  0BFC  3E0C               	addlw	12
 10146  0BFD  0086               	movwf	6
 10147  0BFE  3001               	movlw	1	; select bank2/3
 10148  0BFF  0087               	movwf	7
 10149  0C00  30FF               	movlw	255
 10150  0C01  3FC0               	movwi [0]fsr1
 10151  0C02  30FB               	movlw	251
 10152  0C03  3FC1               	movwi [1]fsr1
 10153                           
 10154                           ;mcc_generated_files/mtouch/mtouch_button.c: 296:         callback_notPressed(button->na
      +                          me);
 10155  0C04  0850               	movf	Button_State_Pressed@button,w
 10156  0C05  0086               	movwf	6
 10157  0C06  3001               	movlw	1	; select bank2/3
 10158  0C07  0087               	movwf	7
 10159  0C08  0801               	movf	1,w
 10160  0C09  00D1               	movwf	??_Button_State_Pressed
 10161  0C0A  0851               	movf	??_Button_State_Pressed,w
 10162  0C0B  00CF               	movwf	Button_DefaultCallback@button
 10163  0C0C  0021               	movlb	1	; select bank1
 10164  0C0D  0845               	movf	(_callback_notPressed+1)^(0+128),w
 10165  0C0E  008A               	movwf	10
 10166  0C0F  0844               	movf	_callback_notPressed^(0+128),w
 10167  0C10  000A               	callw
 10168  0C11  318B               	pagesel	$
 10169  0C12  0008               	return
 10170  0C13                     __end_of_Button_State_Pressed:	
 10171                           
 10172                           	psect	text58
 10173  0880                     __ptext58:	
 10174 ;; *************** function _myButtonPressedCallback *****************
 10175 ;; Defined at:
 10176 ;;		line 158 in file "main.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;  button          1   47[BANK0 ] enum E2914
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;		None
 10181 ;; Return value:  Size  Location     Type
 10182 ;;                  1    wreg      void 
 10183 ;; Registers used:
 10184 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 0/0
 10187 ;;		On exit  : 0/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10190 ;;      Params:         0       1       0       0       0       0       0       0
 10191 ;;      Locals:         0       0       0       0       0       0       0       0
 10192 ;;      Temps:          0       0       0       0       0       0       0       0
 10193 ;;      Totals:         0       1       0       0       0       0       0       0
 10194 ;;Total ram usage:        1 bytes
 10195 ;; Hardware stack levels used:    1
 10196 ;; Hardware stack levels required when called:    5
 10197 ;; This function calls:
 10198 ;;		_LED_PROCESS
 10199 ;;		_RELAY_PROCESS
 10200 ;; This function is called by:
 10201 ;;		_main
 10202 ;;		_Button_State_NotPressed
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206                           
 10207                           ;psect for function _myButtonPressedCallback
 10208  0880                     _myButtonPressedCallback:	
 10209                           
 10210                           ;main.c: 158: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 159:
      +                           {;main.c: 160:     count_conf = 0;
 10211                           
 10212                           ;incstack = 0
 10213                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10214  0880  0021               	movlb	1	; select bank1
 10215  0881  01BA               	clrf	_count_conf^(0+128)
 10216  0882  01BB               	clrf	(_count_conf+1)^(0+128)
 10217                           
 10218                           ;main.c: 161:     if(config_status == 0)
 10219  0883  0020               	movlb	0	; select bank0
 10220  0884  0869               	movf	_config_status,w
 10221  0885  1D03               	btfss	3,2
 10222  0886  0008               	return
 10223                           
 10224                           ;main.c: 162:     {;main.c: 163:         if(button == 0) last_touch_status.full_status ^
      +                          = 0b00000001;
 10225  0887  084F               	movf	myButtonPressedCallback@button,w
 10226  0888  1D03               	btfss	3,2
 10227  0889  288E               	goto	l4512
 10228  088A  3001               	movlw	1
 10229  088B  06E2               	xorwf	_last_touch_status,f
 10230  088C  3000               	movlw	0
 10231  088D  06E3               	xorwf	_last_touch_status+1,f
 10232  088E                     l4512:	
 10233                           
 10234                           ;main.c: 164:         if(button == 1) last_touch_status.full_status ^= 0b00000010;
 10235  088E  034F               	decf	myButtonPressedCallback@button,w
 10236  088F  1D03               	btfss	3,2
 10237  0890  2895               	goto	l4516
 10238  0891  3002               	movlw	2
 10239  0892  06E2               	xorwf	_last_touch_status,f
 10240  0893  3000               	movlw	0
 10241  0894  06E3               	xorwf	_last_touch_status+1,f
 10242  0895                     l4516:	
 10243                           
 10244                           ;main.c: 165:         if(button == 2) last_touch_status.full_status ^= 0b00000100;
 10245  0895  3002               	movlw	2
 10246  0896  064F               	xorwf	myButtonPressedCallback@button,w
 10247  0897  1D03               	btfss	3,2
 10248  0898  289D               	goto	l4520
 10249  0899  3004               	movlw	4
 10250  089A  06E2               	xorwf	_last_touch_status,f
 10251  089B  3000               	movlw	0
 10252  089C  06E3               	xorwf	_last_touch_status+1,f
 10253  089D                     l4520:	
 10254                           
 10255                           ;main.c: 166:         if(button == 3) last_touch_status.full_status ^= 0b00001000;
 10256  089D  3003               	movlw	3
 10257  089E  064F               	xorwf	myButtonPressedCallback@button,w
 10258  089F  1D03               	btfss	3,2
 10259  08A0  28A5               	goto	l4524
 10260  08A1  3008               	movlw	8
 10261  08A2  06E2               	xorwf	_last_touch_status,f
 10262  08A3  3000               	movlw	0
 10263  08A4  06E3               	xorwf	_last_touch_status+1,f
 10264  08A5                     l4524:	
 10265                           
 10266                           ;main.c: 168:         LED_PROCESS(last_touch_status.full_status);
 10267  08A5  0862               	movf	_last_touch_status,w
 10268  08A6  318E  26C6  3188   	fcall	_LED_PROCESS
 10269                           
 10270                           ;main.c: 169:         RELAY_PROCESS(last_touch_status.full_status);
 10271  08A9  0020               	movlb	0	; select bank0
 10272  08AA  0862               	movf	_last_touch_status,w
 10273  08AB  318F  2763         	fcall	_RELAY_PROCESS
 10274  08AD  0008               	return
 10275  08AE                     __end_of_myButtonPressedCallback:	
 10276                           
 10277                           	psect	text59
 10278  142A                     __ptext59:	
 10279 ;; *************** function _Button_DefaultCallback *****************
 10280 ;; Defined at:
 10281 ;;		line 535 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;  button          1   47[BANK0 ] enum E3070
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;		None
 10286 ;; Return value:  Size  Location     Type
 10287 ;;                  1    wreg      void 
 10288 ;; Registers used:
 10289 ;;		None
 10290 ;; Tracked objects:
 10291 ;;		On entry : 0/0
 10292 ;;		On exit  : 0/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10295 ;;      Params:         0       1       0       0       0       0       0       0
 10296 ;;      Locals:         0       0       0       0       0       0       0       0
 10297 ;;      Temps:          0       0       0       0       0       0       0       0
 10298 ;;      Totals:         0       1       0       0       0       0       0       0
 10299 ;;Total ram usage:        1 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:    4
 10302 ;; This function calls:
 10303 ;;		Nothing
 10304 ;; This function is called by:
 10305 ;;		_Button_State_NotPressed
 10306 ;;		_Button_State_Pressed
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           
 10311                           ;psect for function _Button_DefaultCallback
 10312  142A                     _Button_DefaultCallback:	
 10313                           
 10314                           ;incstack = 0
 10315                           ; Regs used in _Button_DefaultCallback: []
 10316  142A  0008               	return
 10317  142B                     __end_of_Button_DefaultCallback:	
 10318                           
 10319                           	psect	text60
 10320  16F3                     __ptext60:	
 10321 ;; *************** function _myButtonReleasedCallback *****************
 10322 ;; Defined at:
 10323 ;;		line 172 in file "main.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;  button          1   47[BANK0 ] enum E2914
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;		None
 10328 ;; Return value:  Size  Location     Type
 10329 ;;                  1    wreg      void 
 10330 ;; Registers used:
 10331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10332 ;; Tracked objects:
 10333 ;;		On entry : 0/0
 10334 ;;		On exit  : 0/0
 10335 ;;		Unchanged: 0/0
 10336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10337 ;;      Params:         0       1       0       0       0       0       0       0
 10338 ;;      Locals:         0       0       0       0       0       0       0       0
 10339 ;;      Temps:          0       0       0       0       0       0       0       0
 10340 ;;      Totals:         0       1       0       0       0       0       0       0
 10341 ;;Total ram usage:        1 bytes
 10342 ;; Hardware stack levels used:    1
 10343 ;; Hardware stack levels required when called:   14
 10344 ;; This function calls:
 10345 ;;		_MTOUCH_Button_isPressed
 10346 ;;		_update_state
 10347 ;; This function is called by:
 10348 ;;		_main
 10349 ;;		_Button_State_Pressed
 10350 ;; This function uses a non-reentrant model
 10351 ;;
 10352                           
 10353                           
 10354                           ;psect for function _myButtonReleasedCallback
 10355  16F3                     _myButtonReleasedCallback:	
 10356                           
 10357                           ;main.c: 172: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 173
      +                          : {;main.c: 174:     count_conf = 0;
 10358                           
 10359                           ;incstack = 0
 10360 ;; hardware stack exceeded
 10361                           ; Regs used in _myButtonReleasedCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10362  16F3  0021               	movlb	1	; select bank1
 10363  16F4  01BA               	clrf	_count_conf^(0+128)
 10364  16F5  01BB               	clrf	(_count_conf+1)^(0+128)
 10365                           
 10366                           ;main.c: 175:     if(config_status == 0)
 10367  16F6  0020               	movlb	0	; select bank0
 10368  16F7  0869               	movf	_config_status,w
 10369  16F8  1D03               	btfss	3,2
 10370  16F9  0008               	return
 10371                           
 10372                           ;main.c: 176:     {;main.c: 178:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0&&MTOUCH_Button_isPressed(2)==0)
 10373  16FA  3000               	movlw	0
 10374  16FB  3196  2682  3196   	fcall	_MTOUCH_Button_isPressed
 10375  16FE  3A00               	xorlw	0
 10376  16FF  1D03               	skipz
 10377  1700  0008               	return
 10378  1701  3001               	movlw	1
 10379  1702  3196  2682  3196   	fcall	_MTOUCH_Button_isPressed
 10380  1705  3A00               	xorlw	0
 10381  1706  1D03               	skipz
 10382  1707  0008               	return
 10383  1708  3002               	movlw	2
 10384  1709  3196  2682  3196   	fcall	_MTOUCH_Button_isPressed
 10385  170C  3A00               	xorlw	0
 10386  170D  1D03               	skipz
 10387  170E  0008               	return
 10388                           
 10389                           ;main.c: 179:         {;main.c: 180:             update_state();
 10390  170F  3185  25A5         	fcall	_update_state
 10391  1711  0008               	return
 10392  1712                     __end_of_myButtonReleasedCallback:	
 10393                           
 10394                           	psect	text61
 10395  1682                     __ptext61:	
 10396 ;; *************** function _MTOUCH_Button_isPressed *****************
 10397 ;; Defined at:
 10398 ;;		line 382 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10399 ;; Parameters:    Size  Location     Type
 10400 ;;  name            1    wreg     enum E3070
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;  name            1    2[COMMON] enum E3070
 10403 ;; Return value:  Size  Location     Type
 10404 ;;                  1    wreg      _Bool 
 10405 ;; Registers used:
 10406 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10407 ;; Tracked objects:
 10408 ;;		On entry : 0/0
 10409 ;;		On exit  : 0/0
 10410 ;;		Unchanged: 0/0
 10411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10412 ;;      Params:         0       0       0       0       0       0       0       0
 10413 ;;      Locals:         1       0       0       0       0       0       0       0
 10414 ;;      Temps:          1       0       0       0       0       0       0       0
 10415 ;;      Totals:         2       0       0       0       0       0       0       0
 10416 ;;Total ram usage:        2 bytes
 10417 ;; Hardware stack levels used:    1
 10418 ;; Hardware stack levels required when called:    4
 10419 ;; This function calls:
 10420 ;;		Nothing
 10421 ;; This function is called by:
 10422 ;;		_main
 10423 ;;		_myButtonReleasedCallback
 10424 ;;		_touch_example
 10425 ;;		_MTOUCH_Button_Buttonmask_Get
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           
 10430                           ;psect for function _MTOUCH_Button_isPressed
 10431  1682                     _MTOUCH_Button_isPressed:	
 10432                           
 10433                           ;incstack = 0
 10434                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 10435                           ;MTOUCH_Button_isPressed@name stored from wreg
 10436  1682  00F2               	movwf	MTOUCH_Button_isPressed@name
 10437                           
 10438                           ;mcc_generated_files/mtouch/mtouch_button.c: 382: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 383: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 384:     if(name < 4u)
 10439  1683  3004               	movlw	4
 10440  1684  0272               	subwf	MTOUCH_Button_isPressed@name,w
 10441  1685  1803               	skipnc
 10442  1686  2E9B               	goto	l4226
 10443                           
 10444                           ;mcc_generated_files/mtouch/mtouch_button.c: 385:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 10445  1687  0872               	movf	MTOUCH_Button_isPressed@name,w
 10446  1688  00F1               	movwf	??_MTOUCH_Button_isPressed
 10447  1689  3003               	movlw	3
 10448  168A                     u2465:	
 10449  168A  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 10450  168B  3EFF               	addlw	-1
 10451  168C  1D03               	skipz
 10452  168D  2E8A               	goto	u2465
 10453  168E  3571               	lslf	??_MTOUCH_Button_isPressed,w
 10454  168F  3EA2               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 10455  1690  0086               	movwf	6
 10456  1691  3001               	movlw	1	; select bank3/4
 10457  1692  0087               	movwf	7
 10458  1693  3002               	movlw	2
 10459  1694  0601               	xorwf	1,w
 10460  1695  1D03               	btfss	3,2
 10461  1696  2E99               	goto	u2470
 10462  1697  3001               	movlw	1
 10463  1698  0008               	return
 10464  1699                     u2470:	
 10465  1699  3000               	movlw	0
 10466  169A  0008               	return
 10467  169B                     l4226:	
 10468                           
 10469                           ;mcc_generated_files/mtouch/mtouch_button.c: 387:         return 0;
 10470  169B  3000               	movlw	0
 10471  169C  0008               	return
 10472  169D                     __end_of_MTOUCH_Button_isPressed:	
 10473                           
 10474                           	psect	text62
 10475  09A5                     __ptext62:	
 10476 ;; *************** function _MTOUCH_Button_Initialize *****************
 10477 ;; Defined at:
 10478 ;;		line 167 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  name            1    wreg     enum E3070
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;  name            1    9[COMMON] enum E3070
 10483 ;;  button          1   10[COMMON] PTR struct .
 10484 ;;		 -> mtouch_button(64), 
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  1    wreg      void 
 10487 ;; Registers used:
 10488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10494 ;;      Params:         0       0       0       0       0       0       0       0
 10495 ;;      Locals:         2       0       0       0       0       0       0       0
 10496 ;;      Temps:          2       0       0       0       0       0       0       0
 10497 ;;      Totals:         4       0       0       0       0       0       0       0
 10498 ;;Total ram usage:        4 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    6
 10501 ;; This function calls:
 10502 ;;		_MTOUCH_Sensor_Calibrate
 10503 ;; This function is called by:
 10504 ;;		_MTOUCH_Button_InitializeAll
 10505 ;;		_Button_Service
 10506 ;;		_Button_State_NotPressed
 10507 ;;		_Button_State_Pressed
 10508 ;; This function uses a non-reentrant model
 10509 ;;
 10510                           
 10511                           
 10512                           ;psect for function _MTOUCH_Button_Initialize
 10513  09A5                     _MTOUCH_Button_Initialize:	
 10514                           
 10515                           ;incstack = 0
 10516                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10517                           ;MTOUCH_Button_Initialize@name stored from wreg
 10518  09A5  00F9               	movwf	MTOUCH_Button_Initialize@name
 10519                           
 10520                           ;mcc_generated_files/mtouch/mtouch_button.c: 167: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 168: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 169:     mtouch_button_t* button = &mtouch_button[name];
 10521  09A6  0879               	movf	MTOUCH_Button_Initialize@name,w
 10522  09A7  00F7               	movwf	??_MTOUCH_Button_Initialize
 10523  09A8  3003               	movlw	3
 10524  09A9                     u4745:	
 10525  09A9  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 10526  09AA  3EFF               	addlw	-1
 10527  09AB  1D03               	skipz
 10528  09AC  29A9               	goto	u4745
 10529  09AD  3577               	lslf	??_MTOUCH_Button_Initialize,w
 10530  09AE  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10531  09AF  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 10532  09B0  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 10533  09B1  00FA               	movwf	MTOUCH_Button_Initialize@button
 10534                           
 10535                           ;mcc_generated_files/mtouch/mtouch_button.c: 171:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 10536  09B2  087A               	movf	MTOUCH_Button_Initialize@button,w
 10537  09B3  3E02               	addlw	2
 10538  09B4  0086               	movwf	6
 10539  09B5  3001               	movlw	1	; select bank2/3
 10540  09B6  0087               	movwf	7
 10541  09B7  0181               	clrf	1
 10542                           
 10543                           ;mcc_generated_files/mtouch/mtouch_button.c: 172:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 10544  09B8  087A               	movf	MTOUCH_Button_Initialize@button,w
 10545  09B9  3E05               	addlw	5
 10546  09BA  0086               	movwf	6
 10547  09BB  3001               	movlw	1	; select bank2/3
 10548  09BC  0087               	movwf	7
 10549  09BD  3000               	movlw	0
 10550  09BE  3FC0               	movwi [0]fsr1
 10551  09BF  3000               	movlw	0
 10552  09C0  3FC1               	movwi [1]fsr1
 10553  09C1  3FC2               	movwi [2]fsr1
 10554  09C2  3FC3               	movwi [3]fsr1
 10555                           
 10556                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 10557  09C3  087A               	movf	MTOUCH_Button_Initialize@button,w
 10558  09C4  3E0A               	addlw	10
 10559  09C5  0086               	movwf	6
 10560  09C6  3001               	movlw	1	; select bank2/3
 10561  09C7  0087               	movwf	7
 10562  09C8  3000               	movlw	0
 10563  09C9  3FC0               	movwi [0]fsr1
 10564  09CA  3FC1               	movwi [1]fsr1
 10565                           
 10566                           ;mcc_generated_files/mtouch/mtouch_button.c: 174:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 10567  09CB  087A               	movf	MTOUCH_Button_Initialize@button,w
 10568  09CC  3E0C               	addlw	12
 10569  09CD  0086               	movwf	6
 10570  09CE  3001               	movlw	1	; select bank2/3
 10571  09CF  0087               	movwf	7
 10572  09D0  3000               	movlw	0
 10573  09D1  3FC0               	movwi [0]fsr1
 10574  09D2  3FC1               	movwi [1]fsr1
 10575                           
 10576                           ;mcc_generated_files/mtouch/mtouch_button.c: 176:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 10577  09D3  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 10578  09D4  0086               	movwf	6
 10579  09D5  3001               	movlw	1	; select bank2/3
 10580  09D6  0087               	movwf	7
 10581  09D7  0801               	movf	1,w
 10582  09D8  3195  2584         	fcall	_MTOUCH_Sensor_Calibrate
 10583  09DA  0008               	return
 10584  09DB                     __end_of_MTOUCH_Button_Initialize:	
 10585                           
 10586                           	psect	text63
 10587  1584                     __ptext63:	
 10588 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10589 ;; Defined at:
 10590 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;  sensor          1    wreg     enum E2854
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;  sensor          1    6[COMMON] enum E2854
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  1    wreg      void 
 10597 ;; Registers used:
 10598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10604 ;;      Params:         0       0       0       0       0       0       0       0
 10605 ;;      Locals:         1       0       0       0       0       0       0       0
 10606 ;;      Temps:          1       0       0       0       0       0       0       0
 10607 ;;      Totals:         2       0       0       0       0       0       0       0
 10608 ;;Total ram usage:        2 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    5
 10611 ;; This function calls:
 10612 ;;		___bmul
 10613 ;; This function is called by:
 10614 ;;		_MTOUCH_Sensor_Initialize
 10615 ;;		_MTOUCH_Button_Initialize
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           
 10620                           ;psect for function _MTOUCH_Sensor_Calibrate
 10621  1584                     _MTOUCH_Sensor_Calibrate:	
 10622                           
 10623                           ;incstack = 0
 10624                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10625                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 10626  1584  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 10627                           
 10628                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 914:     if(sensor < 4u)
 10629  1585  3004               	movlw	4
 10630  1586  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 10631  1587  1803               	skipnc
 10632  1588  0008               	return
 10633                           
 10634                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 916:         mtouch_sensor[sensor].calibrated = 0;
 10635  1589  3009               	movlw	9
 10636  158A  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 10637  158B  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 10638  158C  00F1               	movwf	___bmul@multiplicand
 10639  158D  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 10640  158E  3195  2562         	fcall	___bmul
 10641  1590  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 10642  1591  0086               	movwf	6
 10643  1592  3001               	movlw	1	; select bank2/3
 10644  1593  0087               	movwf	7
 10645  1594  1101               	bcf	1,2
 10646  1595  0008               	return
 10647  1596                     __end_of_MTOUCH_Sensor_Calibrate:	
 10648                           
 10649                           	psect	text64
 10650  0D10                     __ptext64:	
 10651 ;; *************** function _Button_Baseline_Update *****************
 10652 ;; Defined at:
 10653 ;;		line 489 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10654 ;; Parameters:    Size  Location     Type
 10655 ;;  button          1    wreg     PTR struct .
 10656 ;;		 -> mtouch_button(64), 
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;  button          1    7[COMMON] PTR struct .
 10659 ;;		 -> mtouch_button(64), 
 10660 ;; Return value:  Size  Location     Type
 10661 ;;                  1    wreg      void 
 10662 ;; Registers used:
 10663 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10664 ;; Tracked objects:
 10665 ;;		On entry : 0/0
 10666 ;;		On exit  : 0/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10669 ;;      Params:         0       0       0       0       0       0       0       0
 10670 ;;      Locals:         1       0       0       0       0       0       0       0
 10671 ;;      Temps:          6       0       0       0       0       0       0       0
 10672 ;;      Totals:         7       0       0       0       0       0       0       0
 10673 ;;Total ram usage:        7 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; Hardware stack levels required when called:    4
 10676 ;; This function calls:
 10677 ;;		Nothing
 10678 ;; This function is called by:
 10679 ;;		_Button_State_Initializing
 10680 ;;		_Button_State_NotPressed
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           
 10685                           ;psect for function _Button_Baseline_Update
 10686  0D10                     _Button_Baseline_Update:	
 10687                           
 10688                           ;incstack = 0
 10689                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10690                           ;Button_Baseline_Update@button stored from wreg
 10691  0D10  00F7               	movwf	Button_Baseline_Update@button
 10692                           
 10693                           ;mcc_generated_files/mtouch/mtouch_button.c: 489: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 490: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 491:     if (GIE == (uint8_t)1)
 10694  0D11  1F8B               	btfss	11,7	;volatile
 10695  0D12  2D5A               	goto	l4628
 10696                           
 10697                           ;mcc_generated_files/mtouch/mtouch_button.c: 492:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 493:         GIE = (uint8_t)0;
 10698  0D13  138B               	bcf	11,7	;volatile
 10699                           
 10700                           ;mcc_generated_files/mtouch/mtouch_button.c: 494:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 10701  0D14  0877               	movf	Button_Baseline_Update@button,w
 10702  0D15  3E05               	addlw	5
 10703  0D16  0086               	movwf	6
 10704  0D17  3001               	movlw	1	; select bank2/3
 10705  0D18  0087               	movwf	7
 10706  0D19  3F40               	moviw [0]fsr1
 10707  0D1A  00F1               	movwf	??_Button_Baseline_Update
 10708  0D1B  3F41               	moviw [1]fsr1
 10709  0D1C  00F2               	movwf	??_Button_Baseline_Update+1
 10710  0D1D  3F42               	moviw [2]fsr1
 10711  0D1E  00F3               	movwf	??_Button_Baseline_Update+2
 10712  0D1F  3F43               	moviw [3]fsr1
 10713  0D20  00F4               	movwf	??_Button_Baseline_Update+3
 10714  0D21  3004               	movlw	4
 10715  0D22                     u3065:	
 10716  0D22  36F4               	lsrf	??_Button_Baseline_Update+3,f
 10717  0D23  0CF3               	rrf	??_Button_Baseline_Update+2,f
 10718  0D24  0CF2               	rrf	??_Button_Baseline_Update+1,f
 10719  0D25  0CF1               	rrf	??_Button_Baseline_Update,f
 10720  0D26  0B89               	decfsz	9,f
 10721  0D27  2D22               	goto	u3065
 10722  0D28  0877               	movf	Button_Baseline_Update@button,w
 10723  0D29  3E05               	addlw	5
 10724  0D2A  0086               	movwf	6
 10725  0D2B  3001               	movlw	1	; select bank2/3
 10726  0D2C  0087               	movwf	7
 10727  0D2D  0871               	movf	??_Button_Baseline_Update,w
 10728  0D2E  0281               	subwf	1,f
 10729  0D2F  3141               	addfsr 1,1
 10730  0D30  0872               	movf	??_Button_Baseline_Update+1,w
 10731  0D31  3B81               	subwfb	1,f
 10732  0D32  3141               	addfsr 1,1
 10733  0D33  0873               	movf	??_Button_Baseline_Update+2,w
 10734  0D34  3B81               	subwfb	1,f
 10735  0D35  3141               	addfsr 1,1
 10736  0D36  0874               	movf	??_Button_Baseline_Update+3,w
 10737  0D37  3B81               	subwfb	1,f
 10738  0D38  317D               	addfsr 1,-3
 10739                           
 10740                           ;mcc_generated_files/mtouch/mtouch_button.c: 495:         button->baseline += button->re
      +                          ading;
 10741  0D39  0877               	movf	Button_Baseline_Update@button,w
 10742  0D3A  3E03               	addlw	3
 10743  0D3B  0086               	movwf	6
 10744  0D3C  3001               	movlw	1	; select bank2/3
 10745  0D3D  0087               	movwf	7
 10746  0D3E  3F40               	moviw [0]fsr1
 10747  0D3F  00F1               	movwf	??_Button_Baseline_Update
 10748  0D40  3F41               	moviw [1]fsr1
 10749  0D41  00F2               	movwf	??_Button_Baseline_Update+1
 10750  0D42  0871               	movf	??_Button_Baseline_Update,w
 10751  0D43  00F3               	movwf	??_Button_Baseline_Update+2
 10752  0D44  0872               	movf	??_Button_Baseline_Update+1,w
 10753  0D45  00F4               	movwf	??_Button_Baseline_Update+3
 10754  0D46  01F5               	clrf	??_Button_Baseline_Update+4
 10755  0D47  01F6               	clrf	??_Button_Baseline_Update+5
 10756  0D48  0877               	movf	Button_Baseline_Update@button,w
 10757  0D49  3E05               	addlw	5
 10758  0D4A  0086               	movwf	6
 10759  0D4B  3001               	movlw	1	; select bank2/3
 10760  0D4C  0087               	movwf	7
 10761  0D4D  0873               	movf	??_Button_Baseline_Update+2,w
 10762  0D4E  0781               	addwf	1,f
 10763  0D4F  3141               	addfsr 1,1
 10764  0D50  0874               	movf	??_Button_Baseline_Update+3,w
 10765  0D51  3D81               	addwfc	1,f
 10766  0D52  3141               	addfsr 1,1
 10767  0D53  0875               	movf	??_Button_Baseline_Update+4,w
 10768  0D54  3D81               	addwfc	1,f
 10769  0D55  3141               	addfsr 1,1
 10770  0D56  0876               	movf	??_Button_Baseline_Update+5,w
 10771  0D57  3D81               	addwfc	1,f
 10772                           
 10773                           ;mcc_generated_files/mtouch/mtouch_button.c: 496:         GIE = (uint8_t)1;
 10774  0D58  178B               	bsf	11,7	;volatile
 10775                           
 10776                           ;mcc_generated_files/mtouch/mtouch_button.c: 497:     }
 10777  0D59  0008               	return
 10778  0D5A                     l4628:	
 10779                           
 10780                           ;mcc_generated_files/mtouch/mtouch_button.c: 499:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 500:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 10781  0D5A  0877               	movf	Button_Baseline_Update@button,w
 10782  0D5B  3E05               	addlw	5
 10783  0D5C  0086               	movwf	6
 10784  0D5D  3001               	movlw	1	; select bank2/3
 10785  0D5E  0087               	movwf	7
 10786  0D5F  3F40               	moviw [0]fsr1
 10787  0D60  00F1               	movwf	??_Button_Baseline_Update
 10788  0D61  3F41               	moviw [1]fsr1
 10789  0D62  00F2               	movwf	??_Button_Baseline_Update+1
 10790  0D63  3F42               	moviw [2]fsr1
 10791  0D64  00F3               	movwf	??_Button_Baseline_Update+2
 10792  0D65  3F43               	moviw [3]fsr1
 10793  0D66  00F4               	movwf	??_Button_Baseline_Update+3
 10794  0D67  3004               	movlw	4
 10795  0D68                     u3075:	
 10796  0D68  36F4               	lsrf	??_Button_Baseline_Update+3,f
 10797  0D69  0CF3               	rrf	??_Button_Baseline_Update+2,f
 10798  0D6A  0CF2               	rrf	??_Button_Baseline_Update+1,f
 10799  0D6B  0CF1               	rrf	??_Button_Baseline_Update,f
 10800  0D6C  0B89               	decfsz	9,f
 10801  0D6D  2D68               	goto	u3075
 10802  0D6E  0877               	movf	Button_Baseline_Update@button,w
 10803  0D6F  3E05               	addlw	5
 10804  0D70  0086               	movwf	6
 10805  0D71  3001               	movlw	1	; select bank2/3
 10806  0D72  0087               	movwf	7
 10807  0D73  0871               	movf	??_Button_Baseline_Update,w
 10808  0D74  0281               	subwf	1,f
 10809  0D75  3141               	addfsr 1,1
 10810  0D76  0872               	movf	??_Button_Baseline_Update+1,w
 10811  0D77  3B81               	subwfb	1,f
 10812  0D78  3141               	addfsr 1,1
 10813  0D79  0873               	movf	??_Button_Baseline_Update+2,w
 10814  0D7A  3B81               	subwfb	1,f
 10815  0D7B  3141               	addfsr 1,1
 10816  0D7C  0874               	movf	??_Button_Baseline_Update+3,w
 10817  0D7D  3B81               	subwfb	1,f
 10818  0D7E  317D               	addfsr 1,-3
 10819                           
 10820                           ;mcc_generated_files/mtouch/mtouch_button.c: 501:         button->baseline += button->re
      +                          ading;
 10821  0D7F  0877               	movf	Button_Baseline_Update@button,w
 10822  0D80  3E03               	addlw	3
 10823  0D81  0086               	movwf	6
 10824  0D82  3001               	movlw	1	; select bank2/3
 10825  0D83  0087               	movwf	7
 10826  0D84  3F40               	moviw [0]fsr1
 10827  0D85  00F1               	movwf	??_Button_Baseline_Update
 10828  0D86  3F41               	moviw [1]fsr1
 10829  0D87  00F2               	movwf	??_Button_Baseline_Update+1
 10830  0D88  0871               	movf	??_Button_Baseline_Update,w
 10831  0D89  00F3               	movwf	??_Button_Baseline_Update+2
 10832  0D8A  0872               	movf	??_Button_Baseline_Update+1,w
 10833  0D8B  00F4               	movwf	??_Button_Baseline_Update+3
 10834  0D8C  01F5               	clrf	??_Button_Baseline_Update+4
 10835  0D8D  01F6               	clrf	??_Button_Baseline_Update+5
 10836  0D8E  0877               	movf	Button_Baseline_Update@button,w
 10837  0D8F  3E05               	addlw	5
 10838  0D90  0086               	movwf	6
 10839  0D91  3001               	movlw	1	; select bank2/3
 10840  0D92  0087               	movwf	7
 10841  0D93  0873               	movf	??_Button_Baseline_Update+2,w
 10842  0D94  0781               	addwf	1,f
 10843  0D95  3141               	addfsr 1,1
 10844  0D96  0874               	movf	??_Button_Baseline_Update+3,w
 10845  0D97  3D81               	addwfc	1,f
 10846  0D98  3141               	addfsr 1,1
 10847  0D99  0875               	movf	??_Button_Baseline_Update+4,w
 10848  0D9A  3D81               	addwfc	1,f
 10849  0D9B  3141               	addfsr 1,1
 10850  0D9C  0876               	movf	??_Button_Baseline_Update+5,w
 10851  0D9D  3D81               	addwfc	1,f
 10852  0D9E  0008               	return
 10853  0D9F                     __end_of_Button_Baseline_Update:	
 10854                           
 10855                           	psect	text65
 10856  0852                     __ptext65:	
 10857 ;; *************** function _Button_Baseline_Initialize *****************
 10858 ;; Defined at:
 10859 ;;		line 483 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10860 ;; Parameters:    Size  Location     Type
 10861 ;;  button          1    wreg     PTR struct .
 10862 ;;		 -> mtouch_button(64), 
 10863 ;; Auto vars:     Size  Location     Type
 10864 ;;  button          1    9[COMMON] PTR struct .
 10865 ;;		 -> mtouch_button(64), 
 10866 ;; Return value:  Size  Location     Type
 10867 ;;                  1    wreg      void 
 10868 ;; Registers used:
 10869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10870 ;; Tracked objects:
 10871 ;;		On entry : 0/0
 10872 ;;		On exit  : 0/0
 10873 ;;		Unchanged: 0/0
 10874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10875 ;;      Params:         0       0       0       0       0       0       0       0
 10876 ;;      Locals:         1       0       0       0       0       0       0       0
 10877 ;;      Temps:          0       4       0       0       0       0       0       0
 10878 ;;      Totals:         1       4       0       0       0       0       0       0
 10879 ;;Total ram usage:        5 bytes
 10880 ;; Hardware stack levels used:    1
 10881 ;; Hardware stack levels required when called:    6
 10882 ;; This function calls:
 10883 ;;		_MTOUCH_Sensor_RawSample_Get
 10884 ;; This function is called by:
 10885 ;;		_Button_State_Initializing
 10886 ;; This function uses a non-reentrant model
 10887 ;;
 10888                           
 10889                           
 10890                           ;psect for function _Button_Baseline_Initialize
 10891  0852                     _Button_Baseline_Initialize:	
 10892                           
 10893                           ;incstack = 0
 10894                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10895                           ;Button_Baseline_Initialize@button stored from wreg
 10896  0852  00F9               	movwf	Button_Baseline_Initialize@button
 10897                           
 10898                           ;mcc_generated_files/mtouch/mtouch_button.c: 483: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 484: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 485:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 10899  0853  0A79               	incf	Button_Baseline_Initialize@button,w
 10900  0854  0086               	movwf	6
 10901  0855  3001               	movlw	1	; select bank2/3
 10902  0856  0087               	movwf	7
 10903  0857  0801               	movf	1,w
 10904  0858  3196  266A  3188   	fcall	_MTOUCH_Sensor_RawSample_Get
 10905  085B  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10906  085C  0020               	movlb	0	; select bank0
 10907  085D  00A0               	movwf	??_Button_Baseline_Initialize
 10908  085E  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10909  085F  00A1               	movwf	??_Button_Baseline_Initialize+1
 10910  0860  01A2               	clrf	??_Button_Baseline_Initialize+2
 10911  0861  01A3               	clrf	??_Button_Baseline_Initialize+3
 10912  0862  0879               	movf	Button_Baseline_Initialize@button,w
 10913  0863  3E05               	addlw	5
 10914  0864  0086               	movwf	6
 10915  0865  3001               	movlw	1	; select bank2/3
 10916  0866  0087               	movwf	7
 10917  0867  0820               	movf	??_Button_Baseline_Initialize,w
 10918  0868  3FC0               	movwi [0]fsr1
 10919  0869  0821               	movf	??_Button_Baseline_Initialize+1,w
 10920  086A  3FC1               	movwi [1]fsr1
 10921  086B  0822               	movf	??_Button_Baseline_Initialize+2,w
 10922  086C  3FC2               	movwi [2]fsr1
 10923  086D  0823               	movf	??_Button_Baseline_Initialize+3,w
 10924  086E  3FC3               	movwi [3]fsr1
 10925                           
 10926                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 10927  086F  0879               	movf	Button_Baseline_Initialize@button,w
 10928  0870  3E05               	addlw	5
 10929  0871  0086               	movwf	6
 10930  0872  3001               	movlw	1	; select bank2/3
 10931  0873  0087               	movwf	7
 10932  0874  3004               	movlw	4
 10933  0875                     u4755:	
 10934  0875  3581               	lslf	1,f
 10935  0876  3141               	addfsr 1,1
 10936  0877  0D81               	rlf	1,f
 10937  0878  3141               	addfsr 1,1
 10938  0879  0D81               	rlf	1,f
 10939  087A  3141               	addfsr 1,1
 10940  087B  0D81               	rlf	1,f
 10941  087C  317D               	addfsr 1,-3
 10942  087D  0B89               	decfsz	9,f
 10943  087E  2875               	goto	u4755
 10944  087F  0008               	return
 10945  0880                     __end_of_Button_Baseline_Initialize:	
 10946                           
 10947                           	psect	text66
 10948  14DB                     __ptext66:	
 10949 ;; *************** function _Button_Reading_Update *****************
 10950 ;; Defined at:
 10951 ;;		line 456 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10952 ;; Parameters:    Size  Location     Type
 10953 ;;  button          1    wreg     PTR struct .
 10954 ;;		 -> mtouch_button(64), 
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;  button          1    0[BANK0 ] PTR struct .
 10957 ;;		 -> mtouch_button(64), 
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  1    wreg      void 
 10960 ;; Registers used:
 10961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10967 ;;      Params:         0       0       0       0       0       0       0       0
 10968 ;;      Locals:         0       1       0       0       0       0       0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0       0
 10970 ;;      Totals:         0       1       0       0       0       0       0       0
 10971 ;;Total ram usage:        1 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    7
 10974 ;; This function calls:
 10975 ;;		_Button_Reading_Update_Helper
 10976 ;; This function is called by:
 10977 ;;		_Button_Service
 10978 ;; This function uses a non-reentrant model
 10979 ;;
 10980                           
 10981                           
 10982                           ;psect for function _Button_Reading_Update
 10983  14DB                     _Button_Reading_Update:	
 10984                           
 10985                           ;incstack = 0
 10986                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10987                           ;Button_Reading_Update@button stored from wreg
 10988  14DB  0020               	movlb	0	; select bank0
 10989  14DC  00A0               	movwf	Button_Reading_Update@button
 10990                           
 10991                           ;mcc_generated_files/mtouch/mtouch_button.c: 456: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 457: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 458:     if (GIE == (uint8_t) 1)
 10992  14DD  1F8B               	btfss	11,7	;volatile
 10993  14DE  2CE5               	goto	l6340
 10994                           
 10995                           ;mcc_generated_files/mtouch/mtouch_button.c: 459:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 460:         GIE = (uint8_t) 0;
 10996  14DF  138B               	bcf	11,7	;volatile
 10997                           
 10998                           ;mcc_generated_files/mtouch/mtouch_button.c: 461:         Button_Reading_Update_Helper(b
      +                          utton);
 10999  14E0  0820               	movf	Button_Reading_Update@button,w
 11000  14E1  318A  225D         	fcall	_Button_Reading_Update_Helper
 11001                           
 11002                           ;mcc_generated_files/mtouch/mtouch_button.c: 462:         GIE = (uint8_t) 1;
 11003  14E3  178B               	bsf	11,7	;volatile
 11004                           
 11005                           ;mcc_generated_files/mtouch/mtouch_button.c: 463:     }
 11006  14E4  0008               	return
 11007  14E5                     l6340:	
 11008                           
 11009                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         Button_Reading_Update_Helper(button);
 11010  14E5  0820               	movf	Button_Reading_Update@button,w
 11011  14E6  318A  225D         	fcall	_Button_Reading_Update_Helper
 11012  14E8  0008               	return
 11013  14E9                     __end_of_Button_Reading_Update:	
 11014                           
 11015                           	psect	text67
 11016  0A5D                     __ptext67:	
 11017 ;; *************** function _Button_Reading_Update_Helper *****************
 11018 ;; Defined at:
 11019 ;;		line 470 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11020 ;; Parameters:    Size  Location     Type
 11021 ;;  button          1    wreg     PTR struct .
 11022 ;;		 -> mtouch_button(64), 
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;  button          1   11[COMMON] PTR struct .
 11025 ;;		 -> mtouch_button(64), 
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      void 
 11028 ;; Registers used:
 11029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11030 ;; Tracked objects:
 11031 ;;		On entry : 0/0
 11032 ;;		On exit  : 0/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11035 ;;      Params:         0       0       0       0       0       0       0       0
 11036 ;;      Locals:         1       0       0       0       0       0       0       0
 11037 ;;      Temps:          2       0       0       0       0       0       0       0
 11038 ;;      Totals:         3       0       0       0       0       0       0       0
 11039 ;;Total ram usage:        3 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; Hardware stack levels required when called:    6
 11042 ;; This function calls:
 11043 ;;		_MTOUCH_Sensor_RawSample_Get
 11044 ;; This function is called by:
 11045 ;;		_Button_Reading_Update
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           
 11050                           ;psect for function _Button_Reading_Update_Helper
 11051  0A5D                     _Button_Reading_Update_Helper:	
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11055                           ;Button_Reading_Update_Helper@button stored from wreg
 11056  0A5D  00FB               	movwf	Button_Reading_Update_Helper@button
 11057                           
 11058                           ;mcc_generated_files/mtouch/mtouch_button.c: 470: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 471: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 472:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 11059  0A5E  087B               	movf	Button_Reading_Update_Helper@button,w
 11060  0A5F  3E02               	addlw	2
 11061  0A60  0086               	movwf	6
 11062  0A61  3001               	movlw	1	; select bank2/3
 11063  0A62  0087               	movwf	7
 11064  0A63  0801               	movf	1,w
 11065  0A64  1903               	btfsc	3,2
 11066  0A65  2A99               	goto	l6256
 11067                           
 11068                           ;mcc_generated_files/mtouch/mtouch_button.c: 473:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 474:         button->reading -= button->reading>>((uint8_t)2u);
 11069  0A66  087B               	movf	Button_Reading_Update_Helper@button,w
 11070  0A67  3E03               	addlw	3
 11071  0A68  0086               	movwf	6
 11072  0A69  3001               	movlw	1	; select bank2/3
 11073  0A6A  0087               	movwf	7
 11074  0A6B  3F40               	moviw [0]fsr1
 11075  0A6C  00F9               	movwf	??_Button_Reading_Update_Helper
 11076  0A6D  3F41               	moviw [1]fsr1
 11077  0A6E  00FA               	movwf	??_Button_Reading_Update_Helper+1
 11078  0A6F  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11079  0A70  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11080  0A71  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11081  0A72  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11082  0A73  087B               	movf	Button_Reading_Update_Helper@button,w
 11083  0A74  3E03               	addlw	3
 11084  0A75  0086               	movwf	6
 11085  0A76  3001               	movlw	1	; select bank2/3
 11086  0A77  0087               	movwf	7
 11087  0A78  0879               	movf	??_Button_Reading_Update_Helper,w
 11088  0A79  0281               	subwf	1,f
 11089  0A7A  3141               	addfsr 1,1
 11090  0A7B  087A               	movf	??_Button_Reading_Update_Helper+1,w
 11091  0A7C  3B81               	subwfb	1,f
 11092  0A7D  317F               	addfsr 1,-1
 11093                           
 11094                           ;mcc_generated_files/mtouch/mtouch_button.c: 475:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 11095  0A7E  0A7B               	incf	Button_Reading_Update_Helper@button,w
 11096  0A7F  0086               	movwf	6
 11097  0A80  3001               	movlw	1	; select bank2/3
 11098  0A81  0087               	movwf	7
 11099  0A82  0801               	movf	1,w
 11100  0A83  3196  266A         	fcall	_MTOUCH_Sensor_RawSample_Get
 11101  0A85  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11102  0A86  00F9               	movwf	??_Button_Reading_Update_Helper
 11103  0A87  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11104  0A88  00FA               	movwf	??_Button_Reading_Update_Helper+1
 11105  0A89  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11106  0A8A  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11107  0A8B  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11108  0A8C  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11109  0A8D  087B               	movf	Button_Reading_Update_Helper@button,w
 11110  0A8E  3E03               	addlw	3
 11111  0A8F  0086               	movwf	6
 11112  0A90  3001               	movlw	1	; select bank2/3
 11113  0A91  0087               	movwf	7
 11114  0A92  0879               	movf	??_Button_Reading_Update_Helper,w
 11115  0A93  0781               	addwf	1,f
 11116  0A94  3141               	addfsr 1,1
 11117  0A95  087A               	movf	??_Button_Reading_Update_Helper+1,w
 11118  0A96  3D81               	addwfc	1,f
 11119  0A97  317F               	addfsr 1,-1
 11120                           
 11121                           ;mcc_generated_files/mtouch/mtouch_button.c: 476:     }
 11122  0A98  0008               	return
 11123  0A99                     l6256:	
 11124                           
 11125                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 479:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11126  0A99  0A7B               	incf	Button_Reading_Update_Helper@button,w
 11127  0A9A  0086               	movwf	6
 11128  0A9B  3001               	movlw	1	; select bank2/3
 11129  0A9C  0087               	movwf	7
 11130  0A9D  0801               	movf	1,w
 11131  0A9E  3196  266A         	fcall	_MTOUCH_Sensor_RawSample_Get
 11132  0AA0  087B               	movf	Button_Reading_Update_Helper@button,w
 11133  0AA1  3E03               	addlw	3
 11134  0AA2  0086               	movwf	6
 11135  0AA3  3001               	movlw	1	; select bank2/3
 11136  0AA4  0087               	movwf	7
 11137  0AA5  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11138  0AA6  3FC0               	movwi [0]fsr1
 11139  0AA7  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11140  0AA8  3FC1               	movwi [1]fsr1
 11141  0AA9  0008               	return
 11142  0AAA                     __end_of_Button_Reading_Update_Helper:	
 11143                           
 11144                           	psect	text68
 11145  166A                     __ptext68:	
 11146 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 11147 ;; Defined at:
 11148 ;;		line 800 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;  name            1    wreg     enum E2854
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  name            1    8[COMMON] enum E2854
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  2    5[COMMON] unsigned short 
 11155 ;; Registers used:
 11156 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11162 ;;      Params:         2       0       0       0       0       0       0       0
 11163 ;;      Locals:         1       0       0       0       0       0       0       0
 11164 ;;      Temps:          1       0       0       0       0       0       0       0
 11165 ;;      Totals:         4       0       0       0       0       0       0       0
 11166 ;;Total ram usage:        4 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:    5
 11169 ;; This function calls:
 11170 ;;		___bmul
 11171 ;; This function is called by:
 11172 ;;		_Button_Reading_Update_Helper
 11173 ;;		_Button_Baseline_Initialize
 11174 ;; This function uses a non-reentrant model
 11175 ;;
 11176                           
 11177                           
 11178                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 11179  166A                     _MTOUCH_Sensor_RawSample_Get:	
 11180                           
 11181                           ;incstack = 0
 11182                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11183                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 11184  166A  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 11185                           
 11186                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 800: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          801: {;mcc_generated_files/mtouch/mtouch_sensor.c: 802:     if (name < 4u)
 11187  166B  3004               	movlw	4
 11188  166C  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 11189  166D  1803               	skipnc
 11190  166E  2E7F               	goto	l6170
 11191                           
 11192                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 803:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 804:         return mtouch_sensor[name].rawSample;
 11193  166F  3009               	movlw	9
 11194  1670  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 11195  1671  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 11196  1672  00F1               	movwf	___bmul@multiplicand
 11197  1673  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 11198  1674  3195  2562         	fcall	___bmul
 11199  1676  3E26               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 11200  1677  0086               	movwf	6
 11201  1678  3001               	movlw	1	; select bank2/3
 11202  1679  0087               	movwf	7
 11203  167A  3F40               	moviw [0]fsr1
 11204  167B  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 11205  167C  3F41               	moviw [1]fsr1
 11206  167D  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 11207  167E  0008               	return
 11208  167F                     l6170:	
 11209                           
 11210                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:         return (mtouch_sensor_sample_t
      +                          )0;
 11211  167F  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 11212  1680  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 11213  1681  0008               	return
 11214  1682                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 11215                           
 11216                           	psect	text69
 11217  1562                     __ptext69:	
 11218 ;; *************** function ___bmul *****************
 11219 ;; Defined at:
 11220 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;  multiplier      1    wreg     unsigned char 
 11223 ;;  multiplicand    1    1[COMMON] unsigned char 
 11224 ;; Auto vars:     Size  Location     Type
 11225 ;;  multiplier      1    4[COMMON] unsigned char 
 11226 ;;  product         1    3[COMMON] unsigned char 
 11227 ;; Return value:  Size  Location     Type
 11228 ;;                  1    wreg      unsigned char 
 11229 ;; Registers used:
 11230 ;;		wreg, status,2, status,0
 11231 ;; Tracked objects:
 11232 ;;		On entry : 0/0
 11233 ;;		On exit  : 0/0
 11234 ;;		Unchanged: 0/0
 11235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11236 ;;      Params:         1       0       0       0       0       0       0       0
 11237 ;;      Locals:         2       0       0       0       0       0       0       0
 11238 ;;      Temps:          1       0       0       0       0       0       0       0
 11239 ;;      Totals:         4       0       0       0       0       0       0       0
 11240 ;;Total ram usage:        4 bytes
 11241 ;; Hardware stack levels used:    1
 11242 ;; Hardware stack levels required when called:    4
 11243 ;; This function calls:
 11244 ;;		Nothing
 11245 ;; This function is called by:
 11246 ;;		_MTOUCH_Sensor_Initialize
 11247 ;;		_MTOUCH_Sensor_RawSample_Get
 11248 ;;		_MTOUCH_Sensor_Enable
 11249 ;;		_MTOUCH_Sensor_Calibrate
 11250 ;;		_MTOUCH_Sensor_isCalibrated
 11251 ;;		_MTOUCH_Sensor_wasSampled
 11252 ;;		_MTOUCH_Sensor_isAnySensorActive
 11253 ;;		_MTOUCH_Sensor_Disable
 11254 ;;		_MTOUCH_Sensor_isEnabled
 11255 ;;		_MTOUCH_Sensor_isActive
 11256 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 11257 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 11258 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 11259 ;;		_MTOUCH_Sensor_Oversampling_Get
 11260 ;;		_MTOUCH_Sensor_Oversampling_Set
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264                           
 11265                           ;psect for function ___bmul
 11266  1562                     ___bmul:	
 11267                           
 11268                           ;incstack = 0
 11269                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11270                           ;___bmul@multiplier stored from wreg
 11271  1562  00F4               	movwf	___bmul@multiplier
 11272  1563  01F3               	clrf	___bmul@product
 11273  1564                     l5902:	
 11274  1564  1C74               	btfss	___bmul@multiplier,0
 11275  1565  2D6A               	goto	l5906
 11276  1566  0871               	movf	___bmul@multiplicand,w
 11277  1567  00F2               	movwf	??___bmul
 11278  1568  0872               	movf	??___bmul,w
 11279  1569  07F3               	addwf	___bmul@product,f
 11280  156A                     l5906:	
 11281  156A  1003               	clrc
 11282  156B  0DF1               	rlf	___bmul@multiplicand,f
 11283  156C  1003               	clrc
 11284  156D  0CF4               	rrf	___bmul@multiplier,f
 11285  156E  0874               	movf	___bmul@multiplier,w
 11286  156F  1D03               	btfss	3,2
 11287  1570  2D64               	goto	l5902
 11288  1571  0873               	movf	___bmul@product,w
 11289  1572  0008               	return
 11290  1573                     __end_of___bmul:	
 11291                           
 11292                           	psect	text70
 11293  0C89                     __ptext70:	
 11294 ;; *************** function _Button_Deviation_Update *****************
 11295 ;; Defined at:
 11296 ;;		line 407 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;  button          1    wreg     PTR struct .
 11299 ;;		 -> mtouch_button(64), 
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  button          1    0[BANK0 ] PTR struct .
 11302 ;;		 -> mtouch_button(64), 
 11303 ;;  deviation       4    1[BANK0 ] long 
 11304 ;; Return value:  Size  Location     Type
 11305 ;;                  1    wreg      void 
 11306 ;; Registers used:
 11307 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11308 ;; Tracked objects:
 11309 ;;		On entry : 0/0
 11310 ;;		On exit  : 0/0
 11311 ;;		Unchanged: 0/0
 11312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11313 ;;      Params:         0       0       0       0       0       0       0       0
 11314 ;;      Locals:         0       5       0       0       0       0       0       0
 11315 ;;      Temps:         10       0       0       0       0       0       0       0
 11316 ;;      Totals:        10       5       0       0       0       0       0       0
 11317 ;;Total ram usage:       15 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; Hardware stack levels required when called:    4
 11320 ;; This function calls:
 11321 ;;		Nothing
 11322 ;; This function is called by:
 11323 ;;		_Button_Service
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           
 11328                           ;psect for function _Button_Deviation_Update
 11329  0C89                     _Button_Deviation_Update:	
 11330                           
 11331                           ;incstack = 0
 11332                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 11333                           ;Button_Deviation_Update@button stored from wreg
 11334  0C89  0020               	movlb	0	; select bank0
 11335  0C8A  00A0               	movwf	Button_Deviation_Update@button
 11336                           
 11337                           ;mcc_generated_files/mtouch/mtouch_button.c: 407: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 408: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 409:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 411:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 11338  0C8B  0820               	movf	Button_Deviation_Update@button,w
 11339  0C8C  3E05               	addlw	5
 11340  0C8D  0086               	movwf	6
 11341  0C8E  3001               	movlw	1	; select bank2/3
 11342  0C8F  0087               	movwf	7
 11343  0C90  3F40               	moviw [0]fsr1
 11344  0C91  00F1               	movwf	??_Button_Deviation_Update
 11345  0C92  3F41               	moviw [1]fsr1
 11346  0C93  00F2               	movwf	??_Button_Deviation_Update+1
 11347  0C94  3F42               	moviw [2]fsr1
 11348  0C95  00F3               	movwf	??_Button_Deviation_Update+2
 11349  0C96  3F43               	moviw [3]fsr1
 11350  0C97  00F4               	movwf	??_Button_Deviation_Update+3
 11351  0C98  3004               	movlw	4
 11352  0C99                     u3235:	
 11353  0C99  36F4               	lsrf	??_Button_Deviation_Update+3,f
 11354  0C9A  0CF3               	rrf	??_Button_Deviation_Update+2,f
 11355  0C9B  0CF2               	rrf	??_Button_Deviation_Update+1,f
 11356  0C9C  0CF1               	rrf	??_Button_Deviation_Update,f
 11357  0C9D  0B89               	decfsz	9,f
 11358  0C9E  2C99               	goto	u3235
 11359  0C9F  0820               	movf	Button_Deviation_Update@button,w
 11360  0CA0  3E03               	addlw	3
 11361  0CA1  0086               	movwf	6
 11362  0CA2  3001               	movlw	1	; select bank2/3
 11363  0CA3  0087               	movwf	7
 11364  0CA4  3F40               	moviw [0]fsr1
 11365  0CA5  00F5               	movwf	??_Button_Deviation_Update+4
 11366  0CA6  3F41               	moviw [1]fsr1
 11367  0CA7  00F6               	movwf	??_Button_Deviation_Update+5
 11368  0CA8  0875               	movf	??_Button_Deviation_Update+4,w
 11369  0CA9  00F7               	movwf	??_Button_Deviation_Update+6
 11370  0CAA  0876               	movf	??_Button_Deviation_Update+5,w
 11371  0CAB  00F8               	movwf	??_Button_Deviation_Update+7
 11372  0CAC  01F9               	clrf	??_Button_Deviation_Update+8
 11373  0CAD  01FA               	clrf	??_Button_Deviation_Update+9
 11374  0CAE  0871               	movf	??_Button_Deviation_Update,w
 11375  0CAF  02F7               	subwf	??_Button_Deviation_Update+6,f
 11376  0CB0  0872               	movf	??_Button_Deviation_Update+1,w
 11377  0CB1  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 11378  0CB2  0873               	movf	??_Button_Deviation_Update+2,w
 11379  0CB3  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 11380  0CB4  0874               	movf	??_Button_Deviation_Update+3,w
 11381  0CB5  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 11382  0CB6  087A               	movf	??_Button_Deviation_Update+9,w
 11383  0CB7  00A4               	movwf	Button_Deviation_Update@deviation+3
 11384  0CB8  0879               	movf	??_Button_Deviation_Update+8,w
 11385  0CB9  00A3               	movwf	Button_Deviation_Update@deviation+2
 11386  0CBA  0878               	movf	??_Button_Deviation_Update+7,w
 11387  0CBB  00A2               	movwf	Button_Deviation_Update@deviation+1
 11388  0CBC  0877               	movf	??_Button_Deviation_Update+6,w
 11389  0CBD  00A1               	movwf	Button_Deviation_Update@deviation
 11390                           
 11391                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     deviation = deviation >> (button->
      +                          scaling);
 11392  0CBE  0821               	movf	Button_Deviation_Update@deviation,w
 11393  0CBF  00F1               	movwf	??_Button_Deviation_Update
 11394  0CC0  0822               	movf	Button_Deviation_Update@deviation+1,w
 11395  0CC1  00F2               	movwf	??_Button_Deviation_Update+1
 11396  0CC2  0823               	movf	Button_Deviation_Update@deviation+2,w
 11397  0CC3  00F3               	movwf	??_Button_Deviation_Update+2
 11398  0CC4  0824               	movf	Button_Deviation_Update@deviation+3,w
 11399  0CC5  00F4               	movwf	??_Button_Deviation_Update+3
 11400  0CC6  0820               	movf	Button_Deviation_Update@button,w
 11401  0CC7  3E0F               	addlw	15
 11402  0CC8  0086               	movwf	6
 11403  0CC9  3001               	movlw	1	; select bank2/3
 11404  0CCA  0087               	movwf	7
 11405  0CCB  0A01               	incf	1,w
 11406  0CCC  2CD1               	goto	u3240
 11407  0CCD                     u3245:	
 11408  0CCD  37F4               	asrf	??_Button_Deviation_Update+3,f
 11409  0CCE  0CF3               	rrf	??_Button_Deviation_Update+2,f
 11410  0CCF  0CF2               	rrf	??_Button_Deviation_Update+1,f
 11411  0CD0  0CF1               	rrf	??_Button_Deviation_Update,f
 11412  0CD1                     u3240:	
 11413  0CD1  0B89               	decfsz	9,f
 11414  0CD2  2CCD               	goto	u3245
 11415  0CD3  0874               	movf	??_Button_Deviation_Update+3,w
 11416  0CD4  00A4               	movwf	Button_Deviation_Update@deviation+3
 11417  0CD5  0873               	movf	??_Button_Deviation_Update+2,w
 11418  0CD6  00A3               	movwf	Button_Deviation_Update@deviation+2
 11419  0CD7  0872               	movf	??_Button_Deviation_Update+1,w
 11420  0CD8  00A2               	movwf	Button_Deviation_Update@deviation+1
 11421  0CD9  0871               	movf	??_Button_Deviation_Update,w
 11422  0CDA  00A1               	movwf	Button_Deviation_Update@deviation
 11423                           
 11424                           ;mcc_generated_files/mtouch/mtouch_button.c: 417:     if (deviation > ((0x7f)))
 11425  0CDB  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 11426  0CDC  2CF2               	goto	l4742
 11427  0CDD  0824               	movf	Button_Deviation_Update@deviation+3,w
 11428  0CDE  1D03               	btfss	3,2
 11429  0CDF  2CEA               	goto	l4740
 11430  0CE0  0823               	movf	Button_Deviation_Update@deviation+2,w
 11431  0CE1  1D03               	btfss	3,2
 11432  0CE2  2CEA               	goto	l4740
 11433  0CE3  0822               	movf	Button_Deviation_Update@deviation+1,w
 11434  0CE4  1D03               	btfss	3,2
 11435  0CE5  2CEA               	goto	l4740
 11436  0CE6  3080               	movlw	128
 11437  0CE7  0221               	subwf	Button_Deviation_Update@deviation,w
 11438  0CE8  1C03               	btfss	3,0
 11439  0CE9  2CF2               	goto	l4742
 11440  0CEA                     l4740:	
 11441                           
 11442                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 419:         deviation = ((0x7f));
 11443  0CEA  3000               	movlw	0
 11444  0CEB  00A4               	movwf	Button_Deviation_Update@deviation+3
 11445  0CEC  3000               	movlw	0
 11446  0CED  00A3               	movwf	Button_Deviation_Update@deviation+2
 11447  0CEE  3000               	movlw	0
 11448  0CEF  00A2               	movwf	Button_Deviation_Update@deviation+1
 11449  0CF0  307F               	movlw	127
 11450  0CF1  00A1               	movwf	Button_Deviation_Update@deviation
 11451  0CF2                     l4742:	
 11452                           
 11453                           ;mcc_generated_files/mtouch/mtouch_button.c: 421:     if (deviation < ((-1-0x7f)))
 11454  0CF2  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 11455  0CF3  2D06               	goto	l4746
 11456  0CF4  3080               	movlw	128
 11457  0CF5  0221               	subwf	Button_Deviation_Update@deviation,w
 11458  0CF6  30FF               	movlw	255
 11459  0CF7  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 11460  0CF8  30FF               	movlw	255
 11461  0CF9  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 11462  0CFA  30FF               	movlw	255
 11463  0CFB  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 11464  0CFC  1803               	btfsc	3,0
 11465  0CFD  2D06               	goto	l4746
 11466                           
 11467                           ;mcc_generated_files/mtouch/mtouch_button.c: 422:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 423:         deviation = ((-1-0x7f));
 11468  0CFE  30FF               	movlw	255
 11469  0CFF  00A4               	movwf	Button_Deviation_Update@deviation+3
 11470  0D00  30FF               	movlw	255
 11471  0D01  00A3               	movwf	Button_Deviation_Update@deviation+2
 11472  0D02  30FF               	movlw	255
 11473  0D03  00A2               	movwf	Button_Deviation_Update@deviation+1
 11474  0D04  3080               	movlw	128
 11475  0D05  00A1               	movwf	Button_Deviation_Update@deviation
 11476  0D06                     l4746:	
 11477                           
 11478                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 11479  0D06  0821               	movf	Button_Deviation_Update@deviation,w
 11480  0D07  00F1               	movwf	??_Button_Deviation_Update
 11481  0D08  0820               	movf	Button_Deviation_Update@button,w
 11482  0D09  3E09               	addlw	9
 11483  0D0A  0086               	movwf	6
 11484  0D0B  3001               	movlw	1	; select bank2/3
 11485  0D0C  0087               	movwf	7
 11486  0D0D  0871               	movf	??_Button_Deviation_Update,w
 11487  0D0E  0081               	movwf	1
 11488  0D0F  0008               	return
 11489  0D10                     __end_of_Button_Deviation_Update:	
 11490                           
 11491                           	psect	text71
 11492  1450                     __ptext71:	
 11493 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 11494 ;; Defined at:
 11495 ;;		line 536 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
 11498 ;;		 -> myButtonPressedCallback(1), 
 11499 ;; Auto vars:     Size  Location     Type
 11500 ;;		None
 11501 ;; Return value:  Size  Location     Type
 11502 ;;                  1    wreg      void 
 11503 ;; Registers used:
 11504 ;;		wreg
 11505 ;; Tracked objects:
 11506 ;;		On entry : 0/0
 11507 ;;		On exit  : 0/0
 11508 ;;		Unchanged: 0/0
 11509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11510 ;;      Params:         2       0       0       0       0       0       0       0
 11511 ;;      Locals:         0       0       0       0       0       0       0       0
 11512 ;;      Temps:          0       0       0       0       0       0       0       0
 11513 ;;      Totals:         2       0       0       0       0       0       0       0
 11514 ;;Total ram usage:        2 bytes
 11515 ;; Hardware stack levels used:    1
 11516 ;; Hardware stack levels required when called:    4
 11517 ;; This function calls:
 11518 ;;		Nothing
 11519 ;; This function is called by:
 11520 ;;		_main
 11521 ;; This function uses a non-reentrant model
 11522 ;;
 11523                           
 11524                           
 11525                           ;psect for function _MTOUCH_Button_SetPressedCallback
 11526  1450                     _MTOUCH_Button_SetPressedCallback:	
 11527                           
 11528                           ;mcc_generated_files/mtouch/mtouch_button.c: 536: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          537: {;mcc_generated_files/mtouch/mtouch_button.c: 538:     callback_pressed = callback;
 11529                           
 11530                           ;incstack = 0
 11531                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 11532  1450  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 11533  1451  0021               	movlb	1	; select bank1
 11534  1452  00C7               	movwf	(_callback_pressed+1)^(0+128)
 11535  1453  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 11536  1454  00C6               	movwf	_callback_pressed^(0+128)
 11537  1455  0008               	return
 11538  1456                     __end_of_MTOUCH_Button_SetPressedCallback:	
 11539                           
 11540                           	psect	text72
 11541  144A                     __ptext72:	
 11542 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 11543 ;; Defined at:
 11544 ;;		line 540 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
 11547 ;;		 -> myButtonReleasedCallback(1), 
 11548 ;; Auto vars:     Size  Location     Type
 11549 ;;		None
 11550 ;; Return value:  Size  Location     Type
 11551 ;;                  1    wreg      void 
 11552 ;; Registers used:
 11553 ;;		wreg
 11554 ;; Tracked objects:
 11555 ;;		On entry : 0/0
 11556 ;;		On exit  : 0/0
 11557 ;;		Unchanged: 0/0
 11558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11559 ;;      Params:         2       0       0       0       0       0       0       0
 11560 ;;      Locals:         0       0       0       0       0       0       0       0
 11561 ;;      Temps:          0       0       0       0       0       0       0       0
 11562 ;;      Totals:         2       0       0       0       0       0       0       0
 11563 ;;Total ram usage:        2 bytes
 11564 ;; Hardware stack levels used:    1
 11565 ;; Hardware stack levels required when called:    4
 11566 ;; This function calls:
 11567 ;;		Nothing
 11568 ;; This function is called by:
 11569 ;;		_main
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           
 11574                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 11575  144A                     _MTOUCH_Button_SetNotPressedCallback:	
 11576                           
 11577                           ;mcc_generated_files/mtouch/mtouch_button.c: 540: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 541: {;mcc_generated_files/mtouch/mtouch_button.c: 542:     callback_notPressed = cal
      +                          lback;
 11578                           
 11579                           ;incstack = 0
 11580                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 11581  144A  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 11582  144B  0021               	movlb	1	; select bank1
 11583  144C  00C5               	movwf	(_callback_notPressed+1)^(0+128)
 11584  144D  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 11585  144E  00C4               	movwf	_callback_notPressed^(0+128)
 11586  144F  0008               	return
 11587  1450                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 11588                           
 11589                           	psect	text73
 11590  142F                     __ptext73:	
 11591 ;; *************** function _EUSART_is_rx_ready *****************
 11592 ;; Defined at:
 11593 ;;		line 124 in file "mcc_generated_files/eusart.c"
 11594 ;; Parameters:    Size  Location     Type
 11595 ;;		None
 11596 ;; Auto vars:     Size  Location     Type
 11597 ;;		None
 11598 ;; Return value:  Size  Location     Type
 11599 ;;                  1    wreg      unsigned char 
 11600 ;; Registers used:
 11601 ;;		wreg
 11602 ;; Tracked objects:
 11603 ;;		On entry : 0/0
 11604 ;;		On exit  : 0/0
 11605 ;;		Unchanged: 0/0
 11606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11607 ;;      Params:         0       0       0       0       0       0       0       0
 11608 ;;      Locals:         0       0       0       0       0       0       0       0
 11609 ;;      Temps:          0       0       0       0       0       0       0       0
 11610 ;;      Totals:         0       0       0       0       0       0       0       0
 11611 ;;Total ram usage:        0 bytes
 11612 ;; Hardware stack levels used:    1
 11613 ;; Hardware stack levels required when called:    4
 11614 ;; This function calls:
 11615 ;;		Nothing
 11616 ;; This function is called by:
 11617 ;;		_main
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           
 11622                           ;psect for function _EUSART_is_rx_ready
 11623  142F                     _EUSART_is_rx_ready:	
 11624                           
 11625                           ;mcc_generated_files/eusart.c: 126:     return eusartRxCount;
 11626                           
 11627                           ;incstack = 0
 11628                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 11629  142F  0020               	movlb	0	; select bank0
 11630  1430  086C               	movf	_eusartRxCount,w	;volatile
 11631  1431  0008               	return
 11632  1432                     __end_of_EUSART_is_rx_ready:	
 11633                           
 11634                           	psect	text74
 11635  1738                     __ptext74:	
 11636 ;; *************** function _EUSART_Read *****************
 11637 ;; Defined at:
 11638 ;;		line 138 in file "mcc_generated_files/eusart.c"
 11639 ;; Parameters:    Size  Location     Type
 11640 ;;		None
 11641 ;; Auto vars:     Size  Location     Type
 11642 ;;  readValue       1    2[COMMON] unsigned char 
 11643 ;; Return value:  Size  Location     Type
 11644 ;;                  1    wreg      unsigned char 
 11645 ;; Registers used:
 11646 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11647 ;; Tracked objects:
 11648 ;;		On entry : 0/0
 11649 ;;		On exit  : 0/0
 11650 ;;		Unchanged: 0/0
 11651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11652 ;;      Params:         0       0       0       0       0       0       0       0
 11653 ;;      Locals:         1       0       0       0       0       0       0       0
 11654 ;;      Temps:          1       0       0       0       0       0       0       0
 11655 ;;      Totals:         2       0       0       0       0       0       0       0
 11656 ;;Total ram usage:        2 bytes
 11657 ;; Hardware stack levels used:    1
 11658 ;; Hardware stack levels required when called:    4
 11659 ;; This function calls:
 11660 ;;		Nothing
 11661 ;; This function is called by:
 11662 ;;		_main
 11663 ;;		_getch
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667                           
 11668                           ;psect for function _EUSART_Read
 11669  1738                     _EUSART_Read:	
 11670  1738                     l5030:	
 11671                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 11672                           
 11673                           ;incstack = 0
 11674                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 11675                           
 11676                           
 11677                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 11678  1738  0020               	movlb	0	; select bank0
 11679  1739  086C               	movf	_eusartRxCount,w	;volatile
 11680  173A  1903               	btfsc	3,2
 11681  173B  2F38               	goto	l5030
 11682                           
 11683                           ;mcc_generated_files/eusart.c: 146:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 11684  173C  086D               	movf	_eusartRxTail,w	;volatile
 11685  173D  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 11686  173E  0086               	movwf	6
 11687  173F  0187               	clrf	7
 11688  1740  0801               	movf	1,w
 11689  1741  00F1               	movwf	??_EUSART_Read
 11690  1742  0871               	movf	??_EUSART_Read,w
 11691  1743  0021               	movlb	1	; select bank1
 11692  1744  00BD               	movwf	_eusartRxLastError^(0+128)	;volatile
 11693                           
 11694                           ;mcc_generated_files/eusart.c: 148:     readValue = eusartRxBuffer[eusartRxTail++];
 11695  1745  0020               	movlb	0	; select bank0
 11696  1746  086D               	movf	_eusartRxTail,w
 11697  1747  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 11698  1748  0086               	movwf	6
 11699  1749  0187               	clrf	7
 11700  174A  0801               	movf	1,w
 11701  174B  00F1               	movwf	??_EUSART_Read
 11702  174C  0871               	movf	??_EUSART_Read,w
 11703  174D  00F2               	movwf	EUSART_Read@readValue
 11704  174E  3001               	movlw	1
 11705  174F  00F1               	movwf	??_EUSART_Read
 11706  1750  0871               	movf	??_EUSART_Read,w
 11707  1751  07ED               	addwf	_eusartRxTail,f	;volatile
 11708                           
 11709                           ;mcc_generated_files/eusart.c: 149:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 11710  1752  3008               	movlw	8
 11711  1753  026D               	subwf	_eusartRxTail,w	;volatile
 11712  1754  1803               	btfsc	3,0
 11713                           
 11714                           ;mcc_generated_files/eusart.c: 150:     {;mcc_generated_files/eusart.c: 151:         eus
      +                          artRxTail = 0;
 11715  1755  01ED               	clrf	_eusartRxTail	;volatile
 11716                           
 11717                           ;mcc_generated_files/eusart.c: 153:     PIE1bits.RCIE = 0;
 11718  1756  0021               	movlb	1	; select bank1
 11719  1757  1291               	bcf	17,5	;volatile
 11720                           
 11721                           ;mcc_generated_files/eusart.c: 154:     eusartRxCount--;
 11722  1758  3001               	movlw	1
 11723  1759  0020               	movlb	0	; select bank0
 11724  175A  02EC               	subwf	_eusartRxCount,f	;volatile
 11725                           
 11726                           ;mcc_generated_files/eusart.c: 155:     PIE1bits.RCIE = 1;
 11727  175B  0021               	movlb	1	; select bank1
 11728  175C  1691               	bsf	17,5	;volatile
 11729                           
 11730                           ;mcc_generated_files/eusart.c: 157:     return readValue;
 11731  175D  0872               	movf	EUSART_Read@readValue,w
 11732  175E  0008               	return
 11733  175F                     __end_of_EUSART_Read:	
 11734                           
 11735                           	psect	text75
 11736  03D1                     __ptext75:	
 11737 ;; *************** function _DATA_PROCESS *****************
 11738 ;; Defined at:
 11739 ;;		line 206 in file "main.c"
 11740 ;; Parameters:    Size  Location     Type
 11741 ;;  x               1    wreg     unsigned char 
 11742 ;; Auto vars:     Size  Location     Type
 11743 ;;  x               1   49[BANK0 ] unsigned char 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  1    wreg      void 
 11746 ;; Registers used:
 11747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11753 ;;      Params:         0       0       0       0       0       0       0       0
 11754 ;;      Locals:         0       1       0       0       0       0       0       0
 11755 ;;      Temps:          0       2       0       0       0       0       0       0
 11756 ;;      Totals:         0       3       0       0       0       0       0       0
 11757 ;;Total ram usage:        3 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:   14
 11760 ;; This function calls:
 11761 ;;		_LED_PROCESS
 11762 ;;		_RELAY_PROCESS
 11763 ;;		_update_state
 11764 ;; This function is called by:
 11765 ;;		_main
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           
 11770                           ;psect for function _DATA_PROCESS
 11771  03D1                     _DATA_PROCESS:	
 11772                           
 11773                           ;incstack = 0
 11774                           ; Regs used in _DATA_PROCESS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11775                           ;DATA_PROCESS@x stored from wreg
 11776  03D1  0020               	movlb	0	; select bank0
 11777  03D2  00D1               	movwf	DATA_PROCESS@x
 11778                           
 11779                           ;main.c: 206: void DATA_PROCESS(char x);main.c: 207: {;main.c: 208:     switch(x)
 11780  03D3  2CB7               	goto	l6634
 11781  03D4                     l6532:	
 11782                           
 11783                           ;main.c: 211:         {;main.c: 212:             LED_PROCESS(0);
 11784  03D4  3000               	movlw	0
 11785  03D5  318E  26C6  3183   	fcall	_LED_PROCESS
 11786                           
 11787                           ;main.c: 213:             RELAY_PROCESS(0);
 11788  03D8  3000               	movlw	0
 11789  03D9  318F  2763         	fcall	_RELAY_PROCESS
 11790                           
 11791                           ;main.c: 214:             check_request = 0;
 11792  03DB  0020               	movlb	0	; select bank0
 11793  03DC  01E8               	clrf	_check_request
 11794                           
 11795                           ;main.c: 215:             last_touch_status.full_status = 0;
 11796  03DD  01E2               	clrf	_last_touch_status
 11797  03DE  01E3               	clrf	_last_touch_status+1
 11798                           
 11799                           ;main.c: 216:             break;
 11800  03DF  0008               	return
 11801  03E0                     l6538:	
 11802                           
 11803                           ;main.c: 219:         {;main.c: 220:             LED_PROCESS(1);
 11804  03E0  3001               	movlw	1
 11805  03E1  318E  26C6  3183   	fcall	_LED_PROCESS
 11806                           
 11807                           ;main.c: 221:             RELAY_PROCESS(1);
 11808  03E4  3001               	movlw	1
 11809  03E5  318F  2763         	fcall	_RELAY_PROCESS
 11810                           
 11811                           ;main.c: 222:             check_request = 0;
 11812  03E7  0020               	movlb	0	; select bank0
 11813  03E8  01E8               	clrf	_check_request
 11814                           
 11815                           ;main.c: 223:             last_touch_status.full_status = 1;
 11816  03E9  3001               	movlw	1
 11817  03EA  00E2               	movwf	_last_touch_status
 11818  03EB  3000               	movlw	0
 11819  03EC  00E3               	movwf	_last_touch_status+1
 11820                           
 11821                           ;main.c: 224:             break;
 11822  03ED  0008               	return
 11823  03EE                     l6544:	
 11824                           
 11825                           ;main.c: 227:         {;main.c: 228:             LED_PROCESS(2);
 11826  03EE  3002               	movlw	2
 11827  03EF  318E  26C6  3183   	fcall	_LED_PROCESS
 11828                           
 11829                           ;main.c: 229:             RELAY_PROCESS(2);
 11830  03F2  3002               	movlw	2
 11831  03F3  318F  2763         	fcall	_RELAY_PROCESS
 11832                           
 11833                           ;main.c: 230:             check_request = 0;
 11834  03F5  0020               	movlb	0	; select bank0
 11835  03F6  01E8               	clrf	_check_request
 11836                           
 11837                           ;main.c: 231:             last_touch_status.full_status = 2;
 11838  03F7  3002               	movlw	2
 11839  03F8  00E2               	movwf	_last_touch_status
 11840  03F9  3000               	movlw	0
 11841  03FA  00E3               	movwf	_last_touch_status+1
 11842                           
 11843                           ;main.c: 232:             break;
 11844  03FB  0008               	return
 11845  03FC                     l6550:	
 11846                           
 11847                           ;main.c: 235:         {;main.c: 236:             LED_PROCESS(3);
 11848  03FC  3003               	movlw	3
 11849  03FD  318E  26C6  3183   	fcall	_LED_PROCESS
 11850                           
 11851                           ;main.c: 237:             RELAY_PROCESS(3);
 11852  0400  3003               	movlw	3
 11853  0401  318F  2763         	fcall	_RELAY_PROCESS
 11854                           
 11855                           ;main.c: 238:             check_request = 0;
 11856  0403  0020               	movlb	0	; select bank0
 11857  0404  01E8               	clrf	_check_request
 11858                           
 11859                           ;main.c: 239:             last_touch_status.full_status = 3;
 11860  0405  3003               	movlw	3
 11861  0406  00E2               	movwf	_last_touch_status
 11862  0407  3000               	movlw	0
 11863  0408  00E3               	movwf	_last_touch_status+1
 11864                           
 11865                           ;main.c: 240:             break;
 11866  0409  0008               	return
 11867  040A                     l6556:	
 11868                           
 11869                           ;main.c: 243:         {;main.c: 244:             LED_PROCESS(4);
 11870  040A  3004               	movlw	4
 11871  040B  318E  26C6  3183   	fcall	_LED_PROCESS
 11872                           
 11873                           ;main.c: 245:             RELAY_PROCESS(4);
 11874  040E  3004               	movlw	4
 11875  040F  318F  2763         	fcall	_RELAY_PROCESS
 11876                           
 11877                           ;main.c: 246:             check_request = 0;
 11878  0411  0020               	movlb	0	; select bank0
 11879  0412  01E8               	clrf	_check_request
 11880                           
 11881                           ;main.c: 247:             last_touch_status.full_status = 4;
 11882  0413  3004               	movlw	4
 11883  0414  00E2               	movwf	_last_touch_status
 11884  0415  3000               	movlw	0
 11885  0416  00E3               	movwf	_last_touch_status+1
 11886                           
 11887                           ;main.c: 248:             break;
 11888  0417  0008               	return
 11889  0418                     l6562:	
 11890                           
 11891                           ;main.c: 251:         {;main.c: 252:             LED_PROCESS(5);
 11892  0418  3005               	movlw	5
 11893  0419  318E  26C6  3183   	fcall	_LED_PROCESS
 11894                           
 11895                           ;main.c: 253:             RELAY_PROCESS(5);
 11896  041C  3005               	movlw	5
 11897  041D  318F  2763         	fcall	_RELAY_PROCESS
 11898                           
 11899                           ;main.c: 254:             check_request = 0;
 11900  041F  0020               	movlb	0	; select bank0
 11901  0420  01E8               	clrf	_check_request
 11902                           
 11903                           ;main.c: 255:             last_touch_status.full_status = 5;
 11904  0421  3005               	movlw	5
 11905  0422  00E2               	movwf	_last_touch_status
 11906  0423  3000               	movlw	0
 11907  0424  00E3               	movwf	_last_touch_status+1
 11908                           
 11909                           ;main.c: 256:             break;
 11910  0425  0008               	return
 11911  0426                     l6568:	
 11912                           
 11913                           ;main.c: 259:         {;main.c: 260:             LED_PROCESS(6);
 11914  0426  3006               	movlw	6
 11915  0427  318E  26C6  3183   	fcall	_LED_PROCESS
 11916                           
 11917                           ;main.c: 261:             RELAY_PROCESS(6);
 11918  042A  3006               	movlw	6
 11919  042B  318F  2763         	fcall	_RELAY_PROCESS
 11920                           
 11921                           ;main.c: 262:             check_request = 0;
 11922  042D  0020               	movlb	0	; select bank0
 11923  042E  01E8               	clrf	_check_request
 11924                           
 11925                           ;main.c: 263:             last_touch_status.full_status = 6;
 11926  042F  3006               	movlw	6
 11927  0430  00E2               	movwf	_last_touch_status
 11928  0431  3000               	movlw	0
 11929  0432  00E3               	movwf	_last_touch_status+1
 11930                           
 11931                           ;main.c: 264:             break;
 11932  0433  0008               	return
 11933  0434                     l6574:	
 11934                           
 11935                           ;main.c: 267:         {;main.c: 268:             LED_PROCESS(7);
 11936  0434  3007               	movlw	7
 11937  0435  318E  26C6  3183   	fcall	_LED_PROCESS
 11938                           
 11939                           ;main.c: 269:             RELAY_PROCESS(7);
 11940  0438  3007               	movlw	7
 11941  0439  318F  2763         	fcall	_RELAY_PROCESS
 11942                           
 11943                           ;main.c: 270:             check_request = 0;
 11944  043B  0020               	movlb	0	; select bank0
 11945  043C  01E8               	clrf	_check_request
 11946                           
 11947                           ;main.c: 271:             last_touch_status.full_status = 7;
 11948  043D  3007               	movlw	7
 11949  043E  00E2               	movwf	_last_touch_status
 11950  043F  3000               	movlw	0
 11951  0440  00E3               	movwf	_last_touch_status+1
 11952                           
 11953                           ;main.c: 272:             break;
 11954  0441  0008               	return
 11955  0442                     l6580:	
 11956                           
 11957                           ;main.c: 275:         {;main.c: 276:             LED_PROCESS(8);
 11958  0442  3008               	movlw	8
 11959  0443  318E  26C6  3183   	fcall	_LED_PROCESS
 11960                           
 11961                           ;main.c: 277:             RELAY_PROCESS(8);
 11962  0446  3008               	movlw	8
 11963  0447  318F  2763         	fcall	_RELAY_PROCESS
 11964                           
 11965                           ;main.c: 278:             check_request = 0;
 11966  0449  0020               	movlb	0	; select bank0
 11967  044A  01E8               	clrf	_check_request
 11968                           
 11969                           ;main.c: 279:             last_touch_status.full_status = 8;
 11970  044B  3008               	movlw	8
 11971  044C  00E2               	movwf	_last_touch_status
 11972  044D  3000               	movlw	0
 11973  044E  00E3               	movwf	_last_touch_status+1
 11974                           
 11975                           ;main.c: 280:             break;
 11976  044F  0008               	return
 11977  0450                     l6586:	
 11978                           
 11979                           ;main.c: 283:         {;main.c: 284:             LED_PROCESS(9);
 11980  0450  3009               	movlw	9
 11981  0451  318E  26C6  3183   	fcall	_LED_PROCESS
 11982                           
 11983                           ;main.c: 285:             RELAY_PROCESS(9);
 11984  0454  3009               	movlw	9
 11985  0455  318F  2763         	fcall	_RELAY_PROCESS
 11986                           
 11987                           ;main.c: 286:             check_request = 0;
 11988  0457  0020               	movlb	0	; select bank0
 11989  0458  01E8               	clrf	_check_request
 11990                           
 11991                           ;main.c: 287:             last_touch_status.full_status = 9;
 11992  0459  3009               	movlw	9
 11993  045A  00E2               	movwf	_last_touch_status
 11994  045B  3000               	movlw	0
 11995  045C  00E3               	movwf	_last_touch_status+1
 11996                           
 11997                           ;main.c: 288:             break;
 11998  045D  0008               	return
 11999  045E                     l6592:	
 12000                           
 12001                           ;main.c: 291:         {;main.c: 292:             LED_PROCESS(10);
 12002  045E  300A               	movlw	10
 12003  045F  318E  26C6  3183   	fcall	_LED_PROCESS
 12004                           
 12005                           ;main.c: 293:             RELAY_PROCESS(10);
 12006  0462  300A               	movlw	10
 12007  0463  318F  2763         	fcall	_RELAY_PROCESS
 12008                           
 12009                           ;main.c: 294:             check_request = 0;
 12010  0465  0020               	movlb	0	; select bank0
 12011  0466  01E8               	clrf	_check_request
 12012                           
 12013                           ;main.c: 295:             last_touch_status.full_status = 10;
 12014  0467  300A               	movlw	10
 12015  0468  00E2               	movwf	_last_touch_status
 12016  0469  3000               	movlw	0
 12017  046A  00E3               	movwf	_last_touch_status+1
 12018                           
 12019                           ;main.c: 296:             break;
 12020  046B  0008               	return
 12021  046C                     l6598:	
 12022                           
 12023                           ;main.c: 299:         {;main.c: 300:             LED_PROCESS(11);
 12024  046C  300B               	movlw	11
 12025  046D  318E  26C6  3183   	fcall	_LED_PROCESS
 12026                           
 12027                           ;main.c: 301:             RELAY_PROCESS(11);
 12028  0470  300B               	movlw	11
 12029  0471  318F  2763         	fcall	_RELAY_PROCESS
 12030                           
 12031                           ;main.c: 302:             check_request = 0;
 12032  0473  0020               	movlb	0	; select bank0
 12033  0474  01E8               	clrf	_check_request
 12034                           
 12035                           ;main.c: 303:             last_touch_status.full_status = 11;
 12036  0475  300B               	movlw	11
 12037  0476  00E2               	movwf	_last_touch_status
 12038  0477  3000               	movlw	0
 12039  0478  00E3               	movwf	_last_touch_status+1
 12040                           
 12041                           ;main.c: 304:             break;
 12042  0479  0008               	return
 12043  047A                     l6604:	
 12044                           
 12045                           ;main.c: 307:         {;main.c: 308:             LED_PROCESS(12);
 12046  047A  300C               	movlw	12
 12047  047B  318E  26C6  3183   	fcall	_LED_PROCESS
 12048                           
 12049                           ;main.c: 309:             RELAY_PROCESS(12);
 12050  047E  300C               	movlw	12
 12051  047F  318F  2763         	fcall	_RELAY_PROCESS
 12052                           
 12053                           ;main.c: 310:             check_request = 0;
 12054  0481  0020               	movlb	0	; select bank0
 12055  0482  01E8               	clrf	_check_request
 12056                           
 12057                           ;main.c: 311:             last_touch_status.full_status = 12;
 12058  0483  300C               	movlw	12
 12059  0484  00E2               	movwf	_last_touch_status
 12060  0485  3000               	movlw	0
 12061  0486  00E3               	movwf	_last_touch_status+1
 12062                           
 12063                           ;main.c: 312:             break;
 12064  0487  0008               	return
 12065  0488                     l6610:	
 12066                           
 12067                           ;main.c: 315:         {;main.c: 316:             LED_PROCESS(13);
 12068  0488  300D               	movlw	13
 12069  0489  318E  26C6  3183   	fcall	_LED_PROCESS
 12070                           
 12071                           ;main.c: 317:             RELAY_PROCESS(13);
 12072  048C  300D               	movlw	13
 12073  048D  318F  2763         	fcall	_RELAY_PROCESS
 12074                           
 12075                           ;main.c: 318:             check_request = 0;
 12076  048F  0020               	movlb	0	; select bank0
 12077  0490  01E8               	clrf	_check_request
 12078                           
 12079                           ;main.c: 319:             last_touch_status.full_status = 13;
 12080  0491  300D               	movlw	13
 12081  0492  00E2               	movwf	_last_touch_status
 12082  0493  3000               	movlw	0
 12083  0494  00E3               	movwf	_last_touch_status+1
 12084                           
 12085                           ;main.c: 320:             break;
 12086  0495  0008               	return
 12087  0496                     l6616:	
 12088                           
 12089                           ;main.c: 323:         {;main.c: 324:             LED_PROCESS(14);
 12090  0496  300E               	movlw	14
 12091  0497  318E  26C6  3183   	fcall	_LED_PROCESS
 12092                           
 12093                           ;main.c: 325:             RELAY_PROCESS(14);
 12094  049A  300E               	movlw	14
 12095  049B  318F  2763         	fcall	_RELAY_PROCESS
 12096                           
 12097                           ;main.c: 326:             check_request = 0;
 12098  049D  0020               	movlb	0	; select bank0
 12099  049E  01E8               	clrf	_check_request
 12100                           
 12101                           ;main.c: 327:             last_touch_status.full_status = 14;
 12102  049F  300E               	movlw	14
 12103  04A0  00E2               	movwf	_last_touch_status
 12104  04A1  3000               	movlw	0
 12105  04A2  00E3               	movwf	_last_touch_status+1
 12106                           
 12107                           ;main.c: 328:             break;
 12108  04A3  0008               	return
 12109  04A4                     l6622:	
 12110                           
 12111                           ;main.c: 331:         {;main.c: 332:             LED_PROCESS(15);
 12112  04A4  300F               	movlw	15
 12113  04A5  318E  26C6  3183   	fcall	_LED_PROCESS
 12114                           
 12115                           ;main.c: 333:             RELAY_PROCESS(15);
 12116  04A8  300F               	movlw	15
 12117  04A9  318F  2763         	fcall	_RELAY_PROCESS
 12118                           
 12119                           ;main.c: 334:             check_request = 0;
 12120  04AB  0020               	movlb	0	; select bank0
 12121  04AC  01E8               	clrf	_check_request
 12122                           
 12123                           ;main.c: 335:             last_touch_status.full_status = 15;
 12124  04AD  300F               	movlw	15
 12125  04AE  00E2               	movwf	_last_touch_status
 12126  04AF  3000               	movlw	0
 12127  04B0  00E3               	movwf	_last_touch_status+1
 12128                           
 12129                           ;main.c: 336:             break;
 12130  04B1  0008               	return
 12131  04B2                     l6628:	
 12132                           
 12133                           ;main.c: 339:         {;main.c: 340:             update_state();
 12134  04B2  3185  25A5         	fcall	_update_state
 12135                           
 12136                           ;main.c: 341:             break;
 12137  04B4  0008               	return
 12138  04B5                     l6630:	
 12139                           
 12140                           ;main.c: 344:         {;main.c: 345:             check_request = 0;
 12141  04B5  01E8               	clrf	_check_request
 12142                           
 12143                           ;main.c: 346:             break;
 12144  04B6  0008               	return
 12145  04B7                     l6634:	
 12146  04B7  0851               	movf	DATA_PROCESS@x,w
 12147  04B8  00CF               	movwf	??_DATA_PROCESS
 12148  04B9  01D0               	clrf	??_DATA_PROCESS+1
 12149                           
 12150                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12151                           ; Switch size 1, requested type "simple"
 12152                           ; Number of cases is 1, Range of values is 0 to 0
 12153                           ; switch strategies available:
 12154                           ; Name         Instructions Cycles
 12155                           ; simple_byte            4     3 (average)
 12156                           ; direct_byte            8     6 (fixed)
 12157                           ; jumptable            260     6 (fixed)
 12158                           ;	Chosen strategy is simple_byte
 12159  04BA  0850               	movf	??_DATA_PROCESS+1,w
 12160  04BB  3A00               	xorlw	0	; case 0
 12161  04BC  1903               	skipnz
 12162  04BD  2CBF               	goto	l7098
 12163  04BE  2CB5               	goto	l6630
 12164  04BF                     l7098:	
 12165                           
 12166                           ; Switch size 1, requested type "simple"
 12167                           ; Number of cases is 17, Range of values is 48 to 85
 12168                           ; switch strategies available:
 12169                           ; Name         Instructions Cycles
 12170                           ; simple_byte           52    27 (average)
 12171                           ; direct_byte           85     9 (fixed)
 12172                           ; jumptable            263     9 (fixed)
 12173                           ;	Chosen strategy is simple_byte
 12174  04BF  084F               	movf	??_DATA_PROCESS,w
 12175  04C0  3A30               	xorlw	48	; case 48
 12176  04C1  1903               	skipnz
 12177  04C2  2BD4               	goto	l6532
 12178  04C3  3A01               	xorlw	1	; case 49
 12179  04C4  1903               	skipnz
 12180  04C5  2BE0               	goto	l6538
 12181  04C6  3A03               	xorlw	3	; case 50
 12182  04C7  1903               	skipnz
 12183  04C8  2BEE               	goto	l6544
 12184  04C9  3A01               	xorlw	1	; case 51
 12185  04CA  1903               	skipnz
 12186  04CB  2BFC               	goto	l6550
 12187  04CC  3A07               	xorlw	7	; case 52
 12188  04CD  1903               	skipnz
 12189  04CE  2C0A               	goto	l6556
 12190  04CF  3A01               	xorlw	1	; case 53
 12191  04D0  1903               	skipnz
 12192  04D1  2C18               	goto	l6562
 12193  04D2  3A03               	xorlw	3	; case 54
 12194  04D3  1903               	skipnz
 12195  04D4  2C26               	goto	l6568
 12196  04D5  3A01               	xorlw	1	; case 55
 12197  04D6  1903               	skipnz
 12198  04D7  2C34               	goto	l6574
 12199  04D8  3A0F               	xorlw	15	; case 56
 12200  04D9  1903               	skipnz
 12201  04DA  2C42               	goto	l6580
 12202  04DB  3A01               	xorlw	1	; case 57
 12203  04DC  1903               	skipnz
 12204  04DD  2C50               	goto	l6586
 12205  04DE  3A78               	xorlw	120	; case 65
 12206  04DF  1903               	skipnz
 12207  04E0  2C5E               	goto	l6592
 12208  04E1  3A03               	xorlw	3	; case 66
 12209  04E2  1903               	skipnz
 12210  04E3  2C6C               	goto	l6598
 12211  04E4  3A01               	xorlw	1	; case 67
 12212  04E5  1903               	skipnz
 12213  04E6  2C7A               	goto	l6604
 12214  04E7  3A07               	xorlw	7	; case 68
 12215  04E8  1903               	skipnz
 12216  04E9  2C88               	goto	l6610
 12217  04EA  3A01               	xorlw	1	; case 69
 12218  04EB  1903               	skipnz
 12219  04EC  2C96               	goto	l6616
 12220  04ED  3A02               	xorlw	2	; case 71
 12221  04EE  1903               	skipnz
 12222  04EF  2CA4               	goto	l6622
 12223  04F0  3A12               	xorlw	18	; case 85
 12224  04F1  1903               	skipnz
 12225  04F2  2CB2               	goto	l6628
 12226  04F3  2CB5               	goto	l6630
 12227  04F4  0008               	return
 12228  04F5                     __end_of_DATA_PROCESS:	
 12229                           
 12230                           	psect	text76
 12231  05A5                     __ptext76:	
 12232 ;; *************** function _update_state *****************
 12233 ;; Defined at:
 12234 ;;		line 184 in file "main.c"
 12235 ;; Parameters:    Size  Location     Type
 12236 ;;		None
 12237 ;; Auto vars:     Size  Location     Type
 12238 ;;		None
 12239 ;; Return value:  Size  Location     Type
 12240 ;;                  1    wreg      void 
 12241 ;; Registers used:
 12242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12243 ;; Tracked objects:
 12244 ;;		On entry : 0/0
 12245 ;;		On exit  : 0/0
 12246 ;;		Unchanged: 0/0
 12247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12248 ;;      Params:         0       0       0       0       0       0       0       0
 12249 ;;      Locals:         0       0       0       0       0       0       0       0
 12250 ;;      Temps:          0       0       0       0       0       0       0       0
 12251 ;;      Totals:         0       0       0       0       0       0       0       0
 12252 ;;Total ram usage:        0 bytes
 12253 ;; Hardware stack levels used:    1
 12254 ;; Hardware stack levels required when called:   13
 12255 ;; This function calls:
 12256 ;;		_printf
 12257 ;; This function is called by:
 12258 ;;		_myButtonReleasedCallback
 12259 ;;		_DATA_PROCESS
 12260 ;; This function uses a non-reentrant model
 12261 ;;
 12262                           
 12263                           
 12264                           ;psect for function _update_state
 12265  05A5                     _update_state:	
 12266                           
 12267                           ;main.c: 186:     switch(last_touch_status.full_status)
 12268                           
 12269                           ;incstack = 0
 12270 ;; hardware stack exceeded
 12271                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12272  05A5  2E16               	goto	l5950
 12273  05A6                     l5916:	
 12274  05A6  300E               	movlw	low (STR_2| (0+32768))
 12275  05A7  00C7               	movwf	printf@fmt
 12276  05A8  3098               	movlw	high (STR_2| (0+32768))
 12277  05A9  00C8               	movwf	printf@fmt+1
 12278  05AA  3195  2551         	fcall	_printf
 12279  05AC  0008               	return
 12280  05AD                     l5918:	
 12281  05AD  3013               	movlw	low (STR_3| (0+32768))
 12282  05AE  00C7               	movwf	printf@fmt
 12283  05AF  3098               	movlw	high (STR_3| (0+32768))
 12284  05B0  00C8               	movwf	printf@fmt+1
 12285  05B1  3195  2551         	fcall	_printf
 12286  05B3  0008               	return
 12287  05B4                     l5920:	
 12288  05B4  3018               	movlw	low (STR_4| (0+32768))
 12289  05B5  00C7               	movwf	printf@fmt
 12290  05B6  3098               	movlw	high (STR_4| (0+32768))
 12291  05B7  00C8               	movwf	printf@fmt+1
 12292  05B8  3195  2551         	fcall	_printf
 12293  05BA  0008               	return
 12294  05BB                     l5922:	
 12295  05BB  301D               	movlw	low (STR_5| (0+32768))
 12296  05BC  00C7               	movwf	printf@fmt
 12297  05BD  3098               	movlw	high (STR_5| (0+32768))
 12298  05BE  00C8               	movwf	printf@fmt+1
 12299  05BF  3195  2551         	fcall	_printf
 12300  05C1  0008               	return
 12301  05C2                     l5924:	
 12302  05C2  3022               	movlw	low (STR_6| (0+32768))
 12303  05C3  00C7               	movwf	printf@fmt
 12304  05C4  3098               	movlw	high (STR_6| (0+32768))
 12305  05C5  00C8               	movwf	printf@fmt+1
 12306  05C6  3195  2551         	fcall	_printf
 12307  05C8  0008               	return
 12308  05C9                     l5926:	
 12309  05C9  3027               	movlw	low (STR_7| (0+32768))
 12310  05CA  00C7               	movwf	printf@fmt
 12311  05CB  3098               	movlw	high (STR_7| (0+32768))
 12312  05CC  00C8               	movwf	printf@fmt+1
 12313  05CD  3195  2551         	fcall	_printf
 12314  05CF  0008               	return
 12315  05D0                     l5928:	
 12316  05D0  302C               	movlw	low (STR_8| (0+32768))
 12317  05D1  00C7               	movwf	printf@fmt
 12318  05D2  3098               	movlw	high (STR_8| (0+32768))
 12319  05D3  00C8               	movwf	printf@fmt+1
 12320  05D4  3195  2551         	fcall	_printf
 12321  05D6  0008               	return
 12322  05D7                     l5930:	
 12323  05D7  3031               	movlw	low (STR_9| (0+32768))
 12324  05D8  00C7               	movwf	printf@fmt
 12325  05D9  3098               	movlw	high (STR_9| (0+32768))
 12326  05DA  00C8               	movwf	printf@fmt+1
 12327  05DB  3195  2551         	fcall	_printf
 12328  05DD  0008               	return
 12329  05DE                     l5932:	
 12330  05DE  3036               	movlw	low (STR_10| (0+32768))
 12331  05DF  00C7               	movwf	printf@fmt
 12332  05E0  3098               	movlw	high (STR_10| (0+32768))
 12333  05E1  00C8               	movwf	printf@fmt+1
 12334  05E2  3195  2551         	fcall	_printf
 12335  05E4  0008               	return
 12336  05E5                     l5934:	
 12337  05E5  303B               	movlw	low (STR_11| (0+32768))
 12338  05E6  00C7               	movwf	printf@fmt
 12339  05E7  3098               	movlw	high (STR_11| (0+32768))
 12340  05E8  00C8               	movwf	printf@fmt+1
 12341  05E9  3195  2551         	fcall	_printf
 12342  05EB  0008               	return
 12343  05EC                     l5936:	
 12344  05EC  3040               	movlw	low (STR_12| (0+32768))
 12345  05ED  00C7               	movwf	printf@fmt
 12346  05EE  3098               	movlw	high (STR_12| (0+32768))
 12347  05EF  00C8               	movwf	printf@fmt+1
 12348  05F0  3195  2551         	fcall	_printf
 12349  05F2  0008               	return
 12350  05F3                     l5938:	
 12351  05F3  3045               	movlw	low (STR_13| (0+32768))
 12352  05F4  00C7               	movwf	printf@fmt
 12353  05F5  3098               	movlw	high (STR_13| (0+32768))
 12354  05F6  00C8               	movwf	printf@fmt+1
 12355  05F7  3195  2551         	fcall	_printf
 12356  05F9  0008               	return
 12357  05FA                     l5940:	
 12358  05FA  304A               	movlw	low (STR_14| (0+32768))
 12359  05FB  00C7               	movwf	printf@fmt
 12360  05FC  3098               	movlw	high (STR_14| (0+32768))
 12361  05FD  00C8               	movwf	printf@fmt+1
 12362  05FE  3195  2551         	fcall	_printf
 12363  0600  0008               	return
 12364  0601                     l5942:	
 12365  0601  304F               	movlw	low (STR_15| (0+32768))
 12366  0602  00C7               	movwf	printf@fmt
 12367  0603  3098               	movlw	high (STR_15| (0+32768))
 12368  0604  00C8               	movwf	printf@fmt+1
 12369  0605  3195  2551         	fcall	_printf
 12370  0607  0008               	return
 12371  0608                     l5944:	
 12372  0608  3054               	movlw	low (STR_16| (0+32768))
 12373  0609  00C7               	movwf	printf@fmt
 12374  060A  3098               	movlw	high (STR_16| (0+32768))
 12375  060B  00C8               	movwf	printf@fmt+1
 12376  060C  3195  2551         	fcall	_printf
 12377  060E  0008               	return
 12378  060F                     l5946:	
 12379  060F  3059               	movlw	low (STR_17| (0+32768))
 12380  0610  00C7               	movwf	printf@fmt
 12381  0611  3098               	movlw	high (STR_17| (0+32768))
 12382  0612  00C8               	movwf	printf@fmt+1
 12383  0613  3195  2551         	fcall	_printf
 12384  0615  0008               	return
 12385  0616                     l5950:	
 12386                           
 12387                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12388                           ; Switch size 1, requested type "simple"
 12389                           ; Number of cases is 1, Range of values is 0 to 0
 12390                           ; switch strategies available:
 12391                           ; Name         Instructions Cycles
 12392                           ; simple_byte            4     3 (average)
 12393                           ; direct_byte            8     6 (fixed)
 12394                           ; jumptable            260     6 (fixed)
 12395                           ;	Chosen strategy is simple_byte
 12396  0616  0020               	movlb	0	; select bank0
 12397  0617  0863               	movf	_last_touch_status+1,w
 12398  0618  3A00               	xorlw	0	; case 0
 12399  0619  1903               	skipnz
 12400  061A  2E1C               	goto	l7100
 12401  061B  2E4E               	goto	l333
 12402  061C                     l7100:	
 12403                           
 12404                           ; Switch size 1, requested type "simple"
 12405                           ; Number of cases is 16, Range of values is 0 to 15
 12406                           ; switch strategies available:
 12407                           ; Name         Instructions Cycles
 12408                           ; direct_byte           38     6 (fixed)
 12409                           ; simple_byte           49    25 (average)
 12410                           ; jumptable            260     6 (fixed)
 12411                           ;	Chosen strategy is simple_byte
 12412  061C  0862               	movf	_last_touch_status,w
 12413  061D  3A00               	xorlw	0	; case 0
 12414  061E  1903               	skipnz
 12415  061F  2DA6               	goto	l5916
 12416  0620  3A01               	xorlw	1	; case 1
 12417  0621  1903               	skipnz
 12418  0622  2DAD               	goto	l5918
 12419  0623  3A03               	xorlw	3	; case 2
 12420  0624  1903               	skipnz
 12421  0625  2DB4               	goto	l5920
 12422  0626  3A01               	xorlw	1	; case 3
 12423  0627  1903               	skipnz
 12424  0628  2DBB               	goto	l5922
 12425  0629  3A07               	xorlw	7	; case 4
 12426  062A  1903               	skipnz
 12427  062B  2DC2               	goto	l5924
 12428  062C  3A01               	xorlw	1	; case 5
 12429  062D  1903               	skipnz
 12430  062E  2DC9               	goto	l5926
 12431  062F  3A03               	xorlw	3	; case 6
 12432  0630  1903               	skipnz
 12433  0631  2DD0               	goto	l5928
 12434  0632  3A01               	xorlw	1	; case 7
 12435  0633  1903               	skipnz
 12436  0634  2DD7               	goto	l5930
 12437  0635  3A0F               	xorlw	15	; case 8
 12438  0636  1903               	skipnz
 12439  0637  2DDE               	goto	l5932
 12440  0638  3A01               	xorlw	1	; case 9
 12441  0639  1903               	skipnz
 12442  063A  2DE5               	goto	l5934
 12443  063B  3A03               	xorlw	3	; case 10
 12444  063C  1903               	skipnz
 12445  063D  2DEC               	goto	l5936
 12446  063E  3A01               	xorlw	1	; case 11
 12447  063F  1903               	skipnz
 12448  0640  2DF3               	goto	l5938
 12449  0641  3A07               	xorlw	7	; case 12
 12450  0642  1903               	skipnz
 12451  0643  2DFA               	goto	l5940
 12452  0644  3A01               	xorlw	1	; case 13
 12453  0645  1903               	skipnz
 12454  0646  2E01               	goto	l5942
 12455  0647  3A03               	xorlw	3	; case 14
 12456  0648  1903               	skipnz
 12457  0649  2E08               	goto	l5944
 12458  064A  3A01               	xorlw	1	; case 15
 12459  064B  1903               	skipnz
 12460  064C  2E0F               	goto	l5946
 12461  064D  2E4E               	goto	l333
 12462  064E                     l333:	
 12463  064E  0008               	return
 12464  064F                     __end_of_update_state:	
 12465                           
 12466                           	psect	text77
 12467  1551                     __ptext77:	
 12468 ;; *************** function _printf *****************
 12469 ;; Defined at:
 12470 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
 12471 ;; Parameters:    Size  Location     Type
 12472 ;;  fmt             2   39[BANK0 ] PTR const unsigned char 
 12473 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
 12474 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
 12475 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
 12476 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 12477 ;;		 -> STR_2(5), STR_1(9), 
 12478 ;; Auto vars:     Size  Location     Type
 12479 ;;  ret             2    0        int 
 12480 ;;  ap              1   46[BANK0 ] PTR void [1]
 12481 ;;		 -> ?_printf(2), 
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  2   39[BANK0 ] int 
 12484 ;; Registers used:
 12485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12491 ;;      Params:         0       4       0       0       0       0       0       0
 12492 ;;      Locals:         0       3       0       0       0       0       0       0
 12493 ;;      Temps:          0       1       0       0       0       0       0       0
 12494 ;;      Totals:         0       8       0       0       0       0       0       0
 12495 ;;Total ram usage:        8 bytes
 12496 ;; Hardware stack levels used:    1
 12497 ;; Hardware stack levels required when called:   12
 12498 ;; This function calls:
 12499 ;;		_vfprintf
 12500 ;; This function is called by:
 12501 ;;		_main
 12502 ;;		_update_state
 12503 ;;		_check_message
 12504 ;; This function uses a non-reentrant model
 12505 ;;
 12506                           
 12507                           
 12508                           ;psect for function _printf
 12509  1551                     _printf:	
 12510                           
 12511                           ;incstack = 0
 12512                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12513  1551  3049               	movlw	(low ((?_printf| 0+2)))& (0+255)
 12514  1552  0020               	movlb	0	; select bank0
 12515  1553  00CB               	movwf	??_printf
 12516  1554  084B               	movf	??_printf,w
 12517  1555  00CE               	movwf	printf@ap
 12518  1556  0848               	movf	printf@fmt+1,w
 12519  1557  00C0               	movwf	vfprintf@fmt+1
 12520  1558  0847               	movf	printf@fmt,w
 12521  1559  00BF               	movwf	vfprintf@fmt
 12522  155A  304E               	movlw	(low (printf@ap| 0))& (0+255)
 12523  155B  00CB               	movwf	??_printf
 12524  155C  084B               	movf	??_printf,w
 12525  155D  00C1               	movwf	vfprintf@ap
 12526  155E  3000               	movlw	0
 12527  155F  3188  20AE         	fcall	_vfprintf
 12528  1561  0008               	return
 12529  1562                     __end_of_printf:	
 12530                           
 12531                           	psect	text78
 12532  08AE                     __ptext78:	
 12533 ;; *************** function _vfprintf *****************
 12534 ;; Defined at:
 12535 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12536 ;; Parameters:    Size  Location     Type
 12537 ;;  fp              1    wreg     PTR struct _IO_FILE
 12538 ;;		 -> NULL(0), 
 12539 ;;  fmt             2   31[BANK0 ] PTR const unsigned char 
 12540 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
 12541 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
 12542 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
 12543 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 12544 ;;		 -> STR_2(5), STR_1(9), 
 12545 ;;  ap              1   33[BANK0 ] PTR PTR void 
 12546 ;;		 -> printf@ap(1), 
 12547 ;; Auto vars:     Size  Location     Type
 12548 ;;  fp              1   36[BANK0 ] PTR struct _IO_FILE
 12549 ;;		 -> NULL(0), 
 12550 ;;  cfmt            2   37[BANK0 ] PTR unsigned char 
 12551 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
 12552 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
 12553 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
 12554 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 12555 ;;		 -> STR_2(5), STR_1(9), 
 12556 ;; Return value:  Size  Location     Type
 12557 ;;                  2   31[BANK0 ] int 
 12558 ;; Registers used:
 12559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12560 ;; Tracked objects:
 12561 ;;		On entry : 0/0
 12562 ;;		On exit  : 0/0
 12563 ;;		Unchanged: 0/0
 12564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12565 ;;      Params:         0       3       0       0       0       0       0       0
 12566 ;;      Locals:         0       3       0       0       0       0       0       0
 12567 ;;      Temps:          0       2       0       0       0       0       0       0
 12568 ;;      Totals:         0       8       0       0       0       0       0       0
 12569 ;;Total ram usage:        8 bytes
 12570 ;; Hardware stack levels used:    1
 12571 ;; Hardware stack levels required when called:   11
 12572 ;; This function calls:
 12573 ;;		_vfpfcnvrt
 12574 ;; This function is called by:
 12575 ;;		_printf
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579                           
 12580                           ;psect for function _vfprintf
 12581  08AE                     _vfprintf:	
 12582                           
 12583                           ;incstack = 0
 12584                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12585                           ;vfprintf@fp stored from wreg
 12586  08AE  0020               	movlb	0	; select bank0
 12587  08AF  00C4               	movwf	vfprintf@fp
 12588                           
 12589                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 12590  08B0  0840               	movf	vfprintf@fmt+1,w
 12591  08B1  00C6               	movwf	vfprintf@cfmt+1
 12592  08B2  083F               	movf	vfprintf@fmt,w
 12593  08B3  00C5               	movwf	vfprintf@cfmt
 12594                           
 12595                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 12596  08B4  0021               	movlb	1	; select bank1
 12597  08B5  01B0               	clrf	_nout^(0+128)
 12598  08B6  01B1               	clrf	(_nout+1)^(0+128)
 12599  08B7                     l5888:	
 12600                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12601                           
 12602                           
 12603                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12604  08B7  0020               	movlb	0	; select bank0
 12605  08B8  0845               	movf	vfprintf@cfmt,w
 12606  08B9  0084               	movwf	4
 12607  08BA  0846               	movf	vfprintf@cfmt+1,w
 12608  08BB  0085               	movwf	5
 12609  08BC  0012               	moviw fsr0++
 12610  08BD  1903               	btfsc	3,2
 12611  08BE  28D4               	goto	l5890
 12612                           
 12613                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 12614  08BF  3045               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 12615  08C0  00C2               	movwf	??_vfprintf
 12616  08C1  0842               	movf	??_vfprintf,w
 12617  08C2  00B6               	movwf	vfpfcnvrt@fmt
 12618  08C3  0841               	movf	vfprintf@ap,w
 12619  08C4  00C3               	movwf	??_vfprintf+1
 12620  08C5  0843               	movf	??_vfprintf+1,w
 12621  08C6  00B7               	movwf	vfpfcnvrt@ap
 12622  08C7  0844               	movf	vfprintf@fp,w
 12623  08C8  3186  264F  3188   	fcall	_vfpfcnvrt
 12624  08CB  0020               	movlb	0	; select bank0
 12625  08CC  0836               	movf	?_vfpfcnvrt,w
 12626  08CD  0021               	movlb	1	; select bank1
 12627  08CE  07B0               	addwf	_nout^(0+128),f
 12628  08CF  0020               	movlb	0	; select bank0
 12629  08D0  0837               	movf	?_vfpfcnvrt+1,w
 12630  08D1  0021               	movlb	1	; select bank1
 12631  08D2  3DB1               	addwfc	(_nout+1)^(0+128),f
 12632  08D3  28B7               	goto	l5888
 12633  08D4                     l5890:	
 12634                           
 12635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 12636  08D4  0021               	movlb	1	; select bank1
 12637  08D5  0831               	movf	(_nout+1)^(0+128),w
 12638  08D6  0020               	movlb	0	; select bank0
 12639  08D7  00C0               	movwf	?_vfprintf+1
 12640  08D8  0021               	movlb	1	; select bank1
 12641  08D9  0830               	movf	_nout^(0+128),w
 12642  08DA  0020               	movlb	0	; select bank0
 12643  08DB  00BF               	movwf	?_vfprintf
 12644  08DC  0008               	return
 12645  08DD                     __end_of_vfprintf:	
 12646                           
 12647                           	psect	text79
 12648  064F                     __ptext79:	
 12649 ;; *************** function _vfpfcnvrt *****************
 12650 ;; Defined at:
 12651 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12652 ;; Parameters:    Size  Location     Type
 12653 ;;  fp              1    wreg     PTR struct _IO_FILE
 12654 ;;		 -> NULL(0), 
 12655 ;;  fmt             1   22[BANK0 ] PTR PTR unsigned char 
 12656 ;;		 -> vfprintf@cfmt(2), 
 12657 ;;  ap              1   23[BANK0 ] PTR PTR void 
 12658 ;;		 -> printf@ap(1), 
 12659 ;; Auto vars:     Size  Location     Type
 12660 ;;  fp              1   30[BANK0 ] PTR struct _IO_FILE
 12661 ;;		 -> NULL(0), 
 12662 ;;  llu             8    0        unsigned long long 
 12663 ;;  ll              8    0        long long 
 12664 ;;  f               4    0        long long 
 12665 ;;  ct              3    0        unsigned char [3]
 12666 ;;  vp              2    0        PTR void 
 12667 ;;  i               2    0        int 
 12668 ;;  done            2    0        int 
 12669 ;;  cp              2    0        PTR unsigned char 
 12670 ;;  c               1   29[BANK0 ] unsigned char 
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  2   22[BANK0 ] int 
 12673 ;; Registers used:
 12674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12675 ;; Tracked objects:
 12676 ;;		On entry : 0/0
 12677 ;;		On exit  : 0/0
 12678 ;;		Unchanged: 0/0
 12679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12680 ;;      Params:         0       2       0       0       0       0       0       0
 12681 ;;      Locals:         0       2       0       0       0       0       0       0
 12682 ;;      Temps:          0       5       0       0       0       0       0       0
 12683 ;;      Totals:         0       9       0       0       0       0       0       0
 12684 ;;Total ram usage:        9 bytes
 12685 ;; Hardware stack levels used:    1
 12686 ;; Hardware stack levels required when called:   10
 12687 ;; This function calls:
 12688 ;;		_ctoa
 12689 ;;		_fputc
 12690 ;; This function is called by:
 12691 ;;		_vfprintf
 12692 ;; This function uses a non-reentrant model
 12693 ;;
 12694                           
 12695                           
 12696                           ;psect for function _vfpfcnvrt
 12697  064F                     _vfpfcnvrt:	
 12698                           
 12699                           ;incstack = 0
 12700                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12701                           ;vfpfcnvrt@fp stored from wreg
 12702  064F  0020               	movlb	0	; select bank0
 12703  0650  00BE               	movwf	vfpfcnvrt@fp
 12704                           
 12705                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 12706  0651  0836               	movf	vfpfcnvrt@fmt,w
 12707  0652  0086               	movwf	6
 12708  0653  0187               	clrf	7
 12709  0654  3F40               	moviw [0]fsr1
 12710  0655  00B8               	movwf	??_vfpfcnvrt
 12711  0656  3F41               	moviw [1]fsr1
 12712  0657  00B9               	movwf	??_vfpfcnvrt+1
 12713  0658  0838               	movf	??_vfpfcnvrt,w
 12714  0659  0084               	movwf	4
 12715  065A  0839               	movf	??_vfpfcnvrt+1,w
 12716  065B  0085               	movwf	5
 12717  065C  0012               	moviw fsr0++
 12718  065D  3A25               	xorlw	37
 12719  065E  1D03               	btfss	3,2
 12720  065F  2ED4               	goto	l5874
 12721                           
 12722                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 12723  0660  0836               	movf	vfpfcnvrt@fmt,w
 12724  0661  0086               	movwf	6
 12725  0662  0187               	clrf	7
 12726  0663  3001               	movlw	1
 12727  0664  0781               	addwf	1,f
 12728  0665  3141               	addfsr 1,1
 12729  0666  1803               	skipnc
 12730  0667  0A81               	incf	1,f
 12731                           
 12732                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 12733  0668  0021               	movlb	1	; select bank1
 12734  0669  01B2               	clrf	_width^(0+128)
 12735  066A  01B3               	clrf	(_width+1)^(0+128)
 12736  066B  01B6               	clrf	_flags^(0+128)
 12737  066C  01B7               	clrf	(_flags+1)^(0+128)
 12738                           
 12739                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 12740  066D  30FF               	movlw	255
 12741  066E  00B4               	movwf	_prec^(0+128)
 12742  066F  30FF               	movlw	255
 12743  0670  00B5               	movwf	(_prec^(0+128)+1)
 12744                           
 12745                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
 12746  0671  0020               	movlb	0	; select bank0
 12747  0672  0836               	movf	vfpfcnvrt@fmt,w
 12748  0673  0086               	movwf	6
 12749  0674  0187               	clrf	7
 12750  0675  3F40               	moviw [0]fsr1
 12751  0676  00B8               	movwf	??_vfpfcnvrt
 12752  0677  3F41               	moviw [1]fsr1
 12753  0678  00B9               	movwf	??_vfpfcnvrt+1
 12754  0679  0838               	movf	??_vfpfcnvrt,w
 12755  067A  0084               	movwf	4
 12756  067B  0839               	movf	??_vfpfcnvrt+1,w
 12757  067C  0085               	movwf	5
 12758  067D  0012               	moviw fsr0++
 12759  067E  3A63               	xorlw	99
 12760  067F  1D03               	btfss	3,2
 12761  0680  2EA2               	goto	l5858
 12762                           
 12763                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
 12764  0681  0836               	movf	vfpfcnvrt@fmt,w
 12765  0682  0086               	movwf	6
 12766  0683  0187               	clrf	7
 12767  0684  3001               	movlw	1
 12768  0685  0781               	addwf	1,f
 12769  0686  3141               	addfsr 1,1
 12770  0687  1803               	skipnc
 12771  0688  0A81               	incf	1,f
 12772                           
 12773                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
 12774  0689  0837               	movf	vfpfcnvrt@ap,w
 12775  068A  0086               	movwf	6
 12776  068B  0187               	clrf	7
 12777  068C  0801               	movf	1,w
 12778  068D  0084               	movwf	4
 12779  068E  0185               	clrf	5
 12780  068F  3002               	movlw	2
 12781  0690  0781               	addwf	1,f
 12782  0691  0800               	movf	0,w
 12783  0692  00B8               	movwf	??_vfpfcnvrt
 12784  0693  0838               	movf	??_vfpfcnvrt,w
 12785  0694  00BD               	movwf	vfpfcnvrt@c
 12786                           
 12787                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
 12788  0695  083D               	movf	vfpfcnvrt@c,w
 12789  0696  00B8               	movwf	??_vfpfcnvrt
 12790  0697  0838               	movf	??_vfpfcnvrt,w
 12791  0698  00B0               	movwf	ctoa@c
 12792  0699  083E               	movf	vfpfcnvrt@fp,w
 12793  069A  3188  20DD         	fcall	_ctoa
 12794  069C  0020               	movlb	0	; select bank0
 12795  069D  0831               	movf	?_ctoa+1,w
 12796  069E  00B7               	movwf	?_vfpfcnvrt+1
 12797  069F  0830               	movf	?_ctoa,w
 12798  06A0  00B6               	movwf	?_vfpfcnvrt
 12799  06A1  0008               	return
 12800  06A2                     l5858:	
 12801                           
 12802                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 12803  06A2  0836               	movf	vfpfcnvrt@fmt,w
 12804  06A3  0086               	movwf	6
 12805  06A4  0187               	clrf	7
 12806  06A5  3F40               	moviw [0]fsr1
 12807  06A6  00B8               	movwf	??_vfpfcnvrt
 12808  06A7  3F41               	moviw [1]fsr1
 12809  06A8  00B9               	movwf	??_vfpfcnvrt+1
 12810  06A9  0838               	movf	??_vfpfcnvrt,w
 12811  06AA  0084               	movwf	4
 12812  06AB  0839               	movf	??_vfpfcnvrt+1,w
 12813  06AC  0085               	movwf	5
 12814  06AD  0012               	moviw fsr0++
 12815  06AE  3A25               	xorlw	37
 12816  06AF  1D03               	btfss	3,2
 12817  06B0  2EC9               	goto	l5868
 12818                           
 12819                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 12820  06B1  0836               	movf	vfpfcnvrt@fmt,w
 12821  06B2  0086               	movwf	6
 12822  06B3  0187               	clrf	7
 12823  06B4  3001               	movlw	1
 12824  06B5  0781               	addwf	1,f
 12825  06B6  3141               	addfsr 1,1
 12826  06B7  1803               	skipnc
 12827  06B8  0A81               	incf	1,f
 12828                           
 12829                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 12830  06B9  3025               	movlw	37
 12831  06BA  00F3               	movwf	fputc@c
 12832  06BB  3000               	movlw	0
 12833  06BC  00F4               	movwf	fputc@c+1
 12834  06BD  083E               	movf	vfpfcnvrt@fp,w
 12835  06BE  00B8               	movwf	??_vfpfcnvrt
 12836  06BF  0838               	movf	??_vfpfcnvrt,w
 12837  06C0  00F5               	movwf	fputc@fp
 12838  06C1  3189  2170         	fcall	_fputc
 12839  06C3                     l5864:	
 12840                           
 12841                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 12842  06C3  3001               	movlw	1
 12843  06C4  0020               	movlb	0	; select bank0
 12844  06C5  00B6               	movwf	?_vfpfcnvrt
 12845  06C6  3000               	movlw	0
 12846  06C7  00B7               	movwf	?_vfpfcnvrt+1
 12847  06C8  0008               	return
 12848  06C9                     l5868:	
 12849                           
 12850                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 12851  06C9  0836               	movf	vfpfcnvrt@fmt,w
 12852  06CA  0086               	movwf	6
 12853  06CB  0187               	clrf	7
 12854  06CC  3001               	movlw	1
 12855  06CD  0781               	addwf	1,f
 12856  06CE  3141               	addfsr 1,1
 12857  06CF  1803               	skipnc
 12858  06D0  0A81               	incf	1,f
 12859                           
 12860                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 12861  06D1  01B6               	clrf	?_vfpfcnvrt
 12862  06D2  01B7               	clrf	?_vfpfcnvrt+1
 12863  06D3  0008               	return
 12864  06D4                     l5874:	
 12865                           
 12866                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 12867  06D4  0836               	movf	vfpfcnvrt@fmt,w
 12868  06D5  0086               	movwf	6
 12869  06D6  0187               	clrf	7
 12870  06D7  3F40               	moviw [0]fsr1
 12871  06D8  00B8               	movwf	??_vfpfcnvrt
 12872  06D9  3F41               	moviw [1]fsr1
 12873  06DA  00B9               	movwf	??_vfpfcnvrt+1
 12874  06DB  0838               	movf	??_vfpfcnvrt,w
 12875  06DC  0084               	movwf	4
 12876  06DD  0839               	movf	??_vfpfcnvrt+1,w
 12877  06DE  0085               	movwf	5
 12878  06DF  0800               	movf	0,w	;code access
 12879  06E0  00BA               	movwf	??_vfpfcnvrt+2
 12880  06E1  01BB               	clrf	??_vfpfcnvrt+3
 12881  06E2  083A               	movf	??_vfpfcnvrt+2,w
 12882  06E3  00F3               	movwf	fputc@c
 12883  06E4  083B               	movf	??_vfpfcnvrt+3,w
 12884  06E5  00F4               	movwf	fputc@c+1
 12885  06E6  083E               	movf	vfpfcnvrt@fp,w
 12886  06E7  00BC               	movwf	??_vfpfcnvrt+4
 12887  06E8  083C               	movf	??_vfpfcnvrt+4,w
 12888  06E9  00F5               	movwf	fputc@fp
 12889  06EA  3189  2170  3186   	fcall	_fputc
 12890                           
 12891                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 12892  06ED  0020               	movlb	0	; select bank0
 12893  06EE  0836               	movf	vfpfcnvrt@fmt,w
 12894  06EF  0086               	movwf	6
 12895  06F0  0187               	clrf	7
 12896  06F1  3001               	movlw	1
 12897  06F2  0781               	addwf	1,f
 12898  06F3  3141               	addfsr 1,1
 12899  06F4  1803               	skipnc
 12900  06F5  0A81               	incf	1,f
 12901  06F6  2EC3               	goto	l5864
 12902  06F7                     __end_of_vfpfcnvrt:	
 12903                           
 12904                           	psect	text80
 12905  08DD                     __ptext80:	
 12906 ;; *************** function _ctoa *****************
 12907 ;; Defined at:
 12908 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12909 ;; Parameters:    Size  Location     Type
 12910 ;;  fp              1    wreg     PTR struct _IO_FILE
 12911 ;;		 -> NULL(0), 
 12912 ;;  c               1   16[BANK0 ] unsigned char 
 12913 ;; Auto vars:     Size  Location     Type
 12914 ;;  fp              1   21[BANK0 ] PTR struct _IO_FILE
 12915 ;;		 -> NULL(0), 
 12916 ;;  w               2   19[BANK0 ] int 
 12917 ;;  l               2    0        int 
 12918 ;; Return value:  Size  Location     Type
 12919 ;;                  2   16[BANK0 ] int 
 12920 ;; Registers used:
 12921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12922 ;; Tracked objects:
 12923 ;;		On entry : 0/0
 12924 ;;		On exit  : 0/0
 12925 ;;		Unchanged: 0/0
 12926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12927 ;;      Params:         0       2       0       0       0       0       0       0
 12928 ;;      Locals:         0       3       0       0       0       0       0       0
 12929 ;;      Temps:          0       1       0       0       0       0       0       0
 12930 ;;      Totals:         0       6       0       0       0       0       0       0
 12931 ;;Total ram usage:        6 bytes
 12932 ;; Hardware stack levels used:    1
 12933 ;; Hardware stack levels required when called:    9
 12934 ;; This function calls:
 12935 ;;		_pad
 12936 ;; This function is called by:
 12937 ;;		_vfpfcnvrt
 12938 ;; This function uses a non-reentrant model
 12939 ;;
 12940                           
 12941                           
 12942                           ;psect for function _ctoa
 12943  08DD                     _ctoa:	
 12944                           
 12945                           ;incstack = 0
 12946                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12947                           ;ctoa@fp stored from wreg
 12948  08DD  0020               	movlb	0	; select bank0
 12949  08DE  00B5               	movwf	ctoa@fp
 12950                           
 12951                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
 12952  08DF  0021               	movlb	1	; select bank1
 12953  08E0  0832               	movf	_width^(0+128),w
 12954  08E1  0433               	iorwf	(_width+1)^(0+128),w
 12955  08E2  1D03               	btfss	3,2
 12956  08E3  28EC               	goto	l5830
 12957  08E4  0833               	movf	(_width+1)^(0+128),w
 12958  08E5  0020               	movlb	0	; select bank0
 12959  08E6  00B4               	movwf	ctoa@w+1
 12960  08E7  0021               	movlb	1	; select bank1
 12961  08E8  0832               	movf	_width^(0+128),w
 12962  08E9  0020               	movlb	0	; select bank0
 12963  08EA  00B3               	movwf	ctoa@w
 12964  08EB  28F5               	goto	l5832
 12965  08EC                     l5830:	
 12966  08EC  0832               	movf	_width^(0+128),w
 12967  08ED  3EFF               	addlw	255
 12968  08EE  0020               	movlb	0	; select bank0
 12969  08EF  00B3               	movwf	ctoa@w
 12970  08F0  30FF               	movlw	255
 12971  08F1  0021               	movlb	1	; select bank1
 12972  08F2  3D33               	addwfc	(_width+1)^(0+128),w
 12973  08F3  0020               	movlb	0	; select bank0
 12974  08F4  00B4               	movwf	ctoa@w+1
 12975  08F5                     l5832:	
 12976                           
 12977                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
 12978  08F5  0830               	movf	ctoa@c,w
 12979  08F6  00B2               	movwf	??_ctoa
 12980  08F7  0832               	movf	??_ctoa,w
 12981  08F8  0022               	movlb	2	; select bank2
 12982  08F9  00C4               	movwf	_dbuf^(0+256)
 12983                           
 12984                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
 12985  08FA  01C5               	clrf	(_dbuf^(0+256)+1)
 12986                           
 12987                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
 12988  08FB  3044               	movlw	(low (_dbuf| (0+256)))& (0+255)
 12989  08FC  0020               	movlb	0	; select bank0
 12990  08FD  00B2               	movwf	??_ctoa
 12991  08FE  0832               	movf	??_ctoa,w
 12992  08FF  00A7               	movwf	pad@buf
 12993  0900  0834               	movf	ctoa@w+1,w
 12994  0901  00A9               	movwf	pad@p+1
 12995  0902  0833               	movf	ctoa@w,w
 12996  0903  00A8               	movwf	pad@p
 12997  0904  0835               	movf	ctoa@fp,w
 12998  0905  318A  22AA         	fcall	_pad
 12999  0907  0020               	movlb	0	; select bank0
 13000  0908  0828               	movf	?_pad+1,w
 13001  0909  00B1               	movwf	?_ctoa+1
 13002  090A  0827               	movf	?_pad,w
 13003  090B  00B0               	movwf	?_ctoa
 13004  090C  0008               	return
 13005  090D                     __end_of_ctoa:	
 13006                           
 13007                           	psect	text81
 13008  0AAA                     __ptext81:	
 13009 ;; *************** function _pad *****************
 13010 ;; Defined at:
 13011 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 13012 ;; Parameters:    Size  Location     Type
 13013 ;;  fp              1    wreg     PTR struct _IO_FILE
 13014 ;;		 -> NULL(0), 
 13015 ;;  buf             1    7[BANK0 ] PTR unsigned char 
 13016 ;;		 -> dbuf(32), 
 13017 ;;  p               2    8[BANK0 ] int 
 13018 ;; Auto vars:     Size  Location     Type
 13019 ;;  fp              1   15[BANK0 ] PTR struct _IO_FILE
 13020 ;;		 -> NULL(0), 
 13021 ;;  w               2   13[BANK0 ] int 
 13022 ;;  i               2   11[BANK0 ] int 
 13023 ;; Return value:  Size  Location     Type
 13024 ;;                  2    7[BANK0 ] int 
 13025 ;; Registers used:
 13026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13027 ;; Tracked objects:
 13028 ;;		On entry : 0/0
 13029 ;;		On exit  : 0/0
 13030 ;;		Unchanged: 0/0
 13031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13032 ;;      Params:         0       3       0       0       0       0       0       0
 13033 ;;      Locals:         0       5       0       0       0       0       0       0
 13034 ;;      Temps:          0       1       0       0       0       0       0       0
 13035 ;;      Totals:         0       9       0       0       0       0       0       0
 13036 ;;Total ram usage:        9 bytes
 13037 ;; Hardware stack levels used:    1
 13038 ;; Hardware stack levels required when called:    8
 13039 ;; This function calls:
 13040 ;;		_fputc
 13041 ;;		_fputs
 13042 ;;		_strlen
 13043 ;; This function is called by:
 13044 ;;		_ctoa
 13045 ;; This function uses a non-reentrant model
 13046 ;;
 13047                           
 13048                           
 13049                           ;psect for function _pad
 13050  0AAA                     _pad:	
 13051                           
 13052                           ;incstack = 0
 13053                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13054                           ;pad@fp stored from wreg
 13055  0AAA  0020               	movlb	0	; select bank0
 13056  0AAB  00AF               	movwf	pad@fp
 13057                           
 13058                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 13059  0AAC  0021               	movlb	1	; select bank1
 13060  0AAD  1C36               	btfss	_flags^(0+128),0
 13061  0AAE  2AB8               	goto	l5810
 13062                           
 13063                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 13064  0AAF  0020               	movlb	0	; select bank0
 13065  0AB0  082F               	movf	pad@fp,w
 13066  0AB1  00AA               	movwf	??_pad
 13067  0AB2  082A               	movf	??_pad,w
 13068  0AB3  00FB               	movwf	fputs@fp
 13069  0AB4  0827               	movf	pad@buf,w
 13070  0AB5  3197  2712  318A   	fcall	_fputs
 13071  0AB8                     l5810:	
 13072                           
 13073                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 13074  0AB8  0020               	movlb	0	; select bank0
 13075  0AB9  1BA9               	btfsc	pad@p+1,7
 13076  0ABA  2AC0               	goto	l5814
 13077  0ABB  0829               	movf	pad@p+1,w
 13078  0ABC  00AE               	movwf	pad@w+1
 13079  0ABD  0828               	movf	pad@p,w
 13080  0ABE  00AD               	movwf	pad@w
 13081  0ABF  2AC2               	goto	l1474
 13082  0AC0                     l5814:	
 13083  0AC0  01AD               	clrf	pad@w
 13084  0AC1  01AE               	clrf	pad@w+1
 13085  0AC2                     l1474:	
 13086                           
 13087                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 13088  0AC2  01AB               	clrf	pad@i
 13089  0AC3  01AC               	clrf	pad@i+1
 13090  0AC4                     l5820:	
 13091                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 13092                           
 13093                           
 13094                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 13095  0AC4  082C               	movf	pad@i+1,w
 13096  0AC5  3A80               	xorlw	128
 13097  0AC6  00AA               	movwf	??_pad
 13098  0AC7  082E               	movf	pad@w+1,w
 13099  0AC8  3A80               	xorlw	128
 13100  0AC9  022A               	subwf	??_pad,w
 13101  0ACA  1D03               	skipz
 13102  0ACB  2ACE               	goto	u4185
 13103  0ACC  082D               	movf	pad@w,w
 13104  0ACD  022B               	subwf	pad@i,w
 13105  0ACE                     u4185:	
 13106  0ACE  1803               	btfsc	3,0
 13107  0ACF  2AE2               	goto	l1477
 13108                           
 13109                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 13110  0AD0  3020               	movlw	32
 13111  0AD1  00F3               	movwf	fputc@c
 13112  0AD2  3000               	movlw	0
 13113  0AD3  00F4               	movwf	fputc@c+1
 13114  0AD4  0020               	movlb	0	; select bank0
 13115  0AD5  082F               	movf	pad@fp,w
 13116  0AD6  00AA               	movwf	??_pad
 13117  0AD7  082A               	movf	??_pad,w
 13118  0AD8  00F5               	movwf	fputc@fp
 13119  0AD9  3189  2170  318A   	fcall	_fputc
 13120                           
 13121                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 13122  0ADC  3001               	movlw	1
 13123  0ADD  0020               	movlb	0	; select bank0
 13124  0ADE  07AB               	addwf	pad@i,f
 13125  0ADF  3000               	movlw	0
 13126  0AE0  3DAC               	addwfc	pad@i+1,f
 13127  0AE1  2AC4               	goto	l5820
 13128  0AE2                     l1477:	
 13129                           
 13130                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 13131  0AE2  0021               	movlb	1	; select bank1
 13132  0AE3  1836               	btfsc	_flags^(0+128),0
 13133  0AE4  2AEE               	goto	l1478
 13134                           
 13135                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 13136  0AE5  0020               	movlb	0	; select bank0
 13137  0AE6  082F               	movf	pad@fp,w
 13138  0AE7  00AA               	movwf	??_pad
 13139  0AE8  082A               	movf	??_pad,w
 13140  0AE9  00FB               	movwf	fputs@fp
 13141  0AEA  0827               	movf	pad@buf,w
 13142  0AEB  3197  2712  318A   	fcall	_fputs
 13143  0AEE                     l1478:	
 13144                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
 13145                           
 13146                           
 13147                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 13148  0AEE  0020               	movlb	0	; select bank0
 13149  0AEF  0827               	movf	pad@buf,w
 13150  0AF0  3196  2652         	fcall	_strlen
 13151  0AF2  0020               	movlb	0	; select bank0
 13152  0AF3  082D               	movf	pad@w,w
 13153  0AF4  0771               	addwf	?_strlen,w
 13154  0AF5  00A7               	movwf	?_pad
 13155  0AF6  082E               	movf	pad@w+1,w
 13156  0AF7  3D72               	addwfc	?_strlen+1,w
 13157  0AF8  00A8               	movwf	?_pad+1
 13158  0AF9  0008               	return
 13159  0AFA                     __end_of_pad:	
 13160                           
 13161                           	psect	text82
 13162  1652                     __ptext82:	
 13163 ;; *************** function _strlen *****************
 13164 ;; Defined at:
 13165 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 13166 ;; Parameters:    Size  Location     Type
 13167 ;;  s               1    wreg     PTR const unsigned char 
 13168 ;;		 -> dbuf(32), 
 13169 ;; Auto vars:     Size  Location     Type
 13170 ;;  s               1    5[COMMON] PTR const unsigned char 
 13171 ;;		 -> dbuf(32), 
 13172 ;;  a               1    4[COMMON] PTR const unsigned char 
 13173 ;;		 -> dbuf(32), 
 13174 ;; Return value:  Size  Location     Type
 13175 ;;                  2    1[COMMON] unsigned int 
 13176 ;; Registers used:
 13177 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13178 ;; Tracked objects:
 13179 ;;		On entry : 0/0
 13180 ;;		On exit  : 0/0
 13181 ;;		Unchanged: 0/0
 13182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13183 ;;      Params:         2       0       0       0       0       0       0       0
 13184 ;;      Locals:         2       0       0       0       0       0       0       0
 13185 ;;      Temps:          1       0       0       0       0       0       0       0
 13186 ;;      Totals:         5       0       0       0       0       0       0       0
 13187 ;;Total ram usage:        5 bytes
 13188 ;; Hardware stack levels used:    1
 13189 ;; Hardware stack levels required when called:    4
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		_pad
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           
 13198                           ;psect for function _strlen
 13199  1652                     _strlen:	
 13200                           
 13201                           ;incstack = 0
 13202                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 13203                           ;strlen@s stored from wreg
 13204  1652  00F5               	movwf	strlen@s
 13205  1653  0875               	movf	strlen@s,w
 13206  1654  00F3               	movwf	??_strlen
 13207  1655  0873               	movf	??_strlen,w
 13208  1656  00F4               	movwf	strlen@a
 13209  1657                     l3958:	
 13210  1657  0875               	movf	strlen@s,w
 13211  1658  0086               	movwf	6
 13212  1659  3001               	movlw	1	; select bank2/3
 13213  165A  0087               	movwf	7
 13214  165B  0801               	movf	1,w
 13215  165C  1903               	btfsc	3,2
 13216  165D  2E63               	goto	l3960
 13217  165E  3001               	movlw	1
 13218  165F  00F3               	movwf	??_strlen
 13219  1660  0873               	movf	??_strlen,w
 13220  1661  07F5               	addwf	strlen@s,f
 13221  1662  2E57               	goto	l3958
 13222  1663                     l3960:	
 13223  1663  0874               	movf	strlen@a,w
 13224  1664  0275               	subwf	strlen@s,w
 13225  1665  00F1               	movwf	?_strlen
 13226  1666  01F2               	clrf	?_strlen+1
 13227  1667  1BF1               	btfsc	?_strlen,7
 13228  1668  03F2               	decf	?_strlen+1,f
 13229  1669  0008               	return
 13230  166A                     __end_of_strlen:	
 13231                           
 13232                           	psect	text83
 13233  1712                     __ptext83:	
 13234 ;; *************** function _fputs *****************
 13235 ;; Defined at:
 13236 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 13237 ;; Parameters:    Size  Location     Type
 13238 ;;  s               1    wreg     PTR const unsigned char 
 13239 ;;		 -> dbuf(32), 
 13240 ;;  fp              1   11[COMMON] PTR struct _IO_FILE
 13241 ;;		 -> NULL(0), 
 13242 ;; Auto vars:     Size  Location     Type
 13243 ;;  s               1    6[BANK0 ] PTR const unsigned char 
 13244 ;;		 -> dbuf(32), 
 13245 ;;  i               2    4[BANK0 ] int 
 13246 ;;  c               1    3[BANK0 ] unsigned char 
 13247 ;; Return value:  Size  Location     Type
 13248 ;;                  2   11[COMMON] int 
 13249 ;; Registers used:
 13250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13251 ;; Tracked objects:
 13252 ;;		On entry : 0/0
 13253 ;;		On exit  : 0/0
 13254 ;;		Unchanged: 0/0
 13255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13256 ;;      Params:         1       0       0       0       0       0       0       0
 13257 ;;      Locals:         0       4       0       0       0       0       0       0
 13258 ;;      Temps:          0       3       0       0       0       0       0       0
 13259 ;;      Totals:         1       7       0       0       0       0       0       0
 13260 ;;Total ram usage:        8 bytes
 13261 ;; Hardware stack levels used:    1
 13262 ;; Hardware stack levels required when called:    7
 13263 ;; This function calls:
 13264 ;;		_fputc
 13265 ;; This function is called by:
 13266 ;;		_pad
 13267 ;; This function uses a non-reentrant model
 13268 ;;
 13269                           
 13270                           
 13271                           ;psect for function _fputs
 13272  1712                     _fputs:	
 13273                           
 13274                           ;incstack = 0
 13275                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13276                           ;fputs@s stored from wreg
 13277  1712  0020               	movlb	0	; select bank0
 13278  1713  00A6               	movwf	fputs@s
 13279  1714  01A4               	clrf	fputs@i
 13280  1715  01A5               	clrf	fputs@i+1
 13281  1716                     l3952:	
 13282  1716  0824               	movf	fputs@i,w
 13283  1717  0726               	addwf	fputs@s,w
 13284  1718  00A0               	movwf	??_fputs
 13285  1719  0820               	movf	??_fputs,w
 13286  171A  0086               	movwf	6
 13287  171B  3001               	movlw	1	; select bank2/3
 13288  171C  0087               	movwf	7
 13289  171D  0801               	movf	1,w
 13290  171E  00A1               	movwf	??_fputs+1
 13291  171F  0821               	movf	??_fputs+1,w
 13292  1720  00A3               	movwf	fputs@c
 13293  1721  0823               	movf	fputs@c,w
 13294  1722  1903               	btfsc	3,2
 13295  1723  0008               	return
 13296  1724  0823               	movf	fputs@c,w
 13297  1725  00A0               	movwf	??_fputs
 13298  1726  01A1               	clrf	??_fputs+1
 13299  1727  0820               	movf	??_fputs,w
 13300  1728  00F3               	movwf	fputc@c
 13301  1729  0821               	movf	??_fputs+1,w
 13302  172A  00F4               	movwf	fputc@c+1
 13303  172B  087B               	movf	fputs@fp,w
 13304  172C  00A2               	movwf	??_fputs+2
 13305  172D  0822               	movf	??_fputs+2,w
 13306  172E  00F5               	movwf	fputc@fp
 13307  172F  3189  2170  3197   	fcall	_fputc
 13308  1732  3001               	movlw	1
 13309  1733  0020               	movlb	0	; select bank0
 13310  1734  07A4               	addwf	fputs@i,f
 13311  1735  3000               	movlw	0
 13312  1736  3DA5               	addwfc	fputs@i+1,f
 13313  1737  2F16               	goto	l3952
 13314  1738                     __end_of_fputs:	
 13315                           
 13316                           	psect	text84
 13317  0970                     __ptext84:	
 13318 ;; *************** function _fputc *****************
 13319 ;; Defined at:
 13320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;  c               2    3[COMMON] int 
 13323 ;;  fp              1    5[COMMON] PTR struct _IO_FILE
 13324 ;;		 -> NULL(0), 
 13325 ;; Auto vars:     Size  Location     Type
 13326 ;;		None
 13327 ;; Return value:  Size  Location     Type
 13328 ;;                  2    3[COMMON] int 
 13329 ;; Registers used:
 13330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13331 ;; Tracked objects:
 13332 ;;		On entry : 0/0
 13333 ;;		On exit  : 0/0
 13334 ;;		Unchanged: 0/0
 13335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13336 ;;      Params:         3       0       0       0       0       0       0       0
 13337 ;;      Locals:         0       0       0       0       0       0       0       0
 13338 ;;      Temps:          5       0       0       0       0       0       0       0
 13339 ;;      Totals:         8       0       0       0       0       0       0       0
 13340 ;;Total ram usage:        8 bytes
 13341 ;; Hardware stack levels used:    1
 13342 ;; Hardware stack levels required when called:    6
 13343 ;; This function calls:
 13344 ;;		_putch
 13345 ;; This function is called by:
 13346 ;;		_pad
 13347 ;;		_vfpfcnvrt
 13348 ;;		_fputs
 13349 ;; This function uses a non-reentrant model
 13350 ;;
 13351                           
 13352                           
 13353                           ;psect for function _fputc
 13354  0970                     _fputc:	
 13355                           
 13356                           ;incstack = 0
 13357                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13358  0970  0875               	movf	fputc@fp,w
 13359  0971  1D03               	btfss	3,2
 13360  0972  0875               	movf	fputc@fp,w
 13361  0973  1D03               	btfss	3,2
 13362  0974  2979               	goto	l3938
 13363  0975  0873               	movf	fputc@c,w
 13364  0976  3194  2440         	fcall	_putch
 13365  0978  0008               	return
 13366  0979                     l3938:	
 13367  0979  0875               	movf	fputc@fp,w
 13368  097A  3E03               	addlw	3
 13369  097B  0086               	movwf	6
 13370  097C  0187               	clrf	7
 13371  097D  0016               	moviw fsr1++
 13372  097E  0401               	iorwf	1,w
 13373  097F  1903               	btfsc	3,2
 13374  0980  299C               	goto	l3942
 13375  0981  0875               	movf	fputc@fp,w
 13376  0982  3E03               	addlw	3
 13377  0983  0086               	movwf	6
 13378  0984  0187               	clrf	7
 13379  0985  3F40               	moviw [0]fsr1
 13380  0986  00F6               	movwf	??_fputc
 13381  0987  3F41               	moviw [1]fsr1
 13382  0988  00F7               	movwf	??_fputc+1
 13383  0989  0A75               	incf	fputc@fp,w
 13384  098A  0086               	movwf	6
 13385  098B  0187               	clrf	7
 13386  098C  3F40               	moviw [0]fsr1
 13387  098D  00F8               	movwf	??_fputc+2
 13388  098E  3F41               	moviw [1]fsr1
 13389  098F  00F9               	movwf	??_fputc+3
 13390  0990  0879               	movf	??_fputc+3,w
 13391  0991  3A80               	xorlw	128
 13392  0992  00FA               	movwf	??_fputc+4
 13393  0993  0877               	movf	??_fputc+1,w
 13394  0994  3A80               	xorlw	128
 13395  0995  027A               	subwf	??_fputc+4,w
 13396  0996  1D03               	skipz
 13397  0997  299A               	goto	u2145
 13398  0998  0876               	movf	??_fputc,w
 13399  0999  0278               	subwf	??_fputc+2,w
 13400  099A                     u2145:	
 13401  099A  1803               	skipnc
 13402  099B  0008               	return
 13403  099C                     l3942:	
 13404  099C  0A75               	incf	fputc@fp,w
 13405  099D  0086               	movwf	6
 13406  099E  0187               	clrf	7
 13407  099F  3001               	movlw	1
 13408  09A0  0781               	addwf	1,f
 13409  09A1  3141               	addfsr 1,1
 13410  09A2  1803               	skipnc
 13411  09A3  0A81               	incf	1,f
 13412  09A4  0008               	return
 13413  09A5                     __end_of_fputc:	
 13414                           
 13415                           	psect	text85
 13416  1440                     __ptext85:	
 13417 ;; *************** function _putch *****************
 13418 ;; Defined at:
 13419 ;;		line 174 in file "mcc_generated_files/eusart.c"
 13420 ;; Parameters:    Size  Location     Type
 13421 ;;  txData          1    wreg     unsigned char 
 13422 ;; Auto vars:     Size  Location     Type
 13423 ;;  txData          1    2[COMMON] unsigned char 
 13424 ;; Return value:  Size  Location     Type
 13425 ;;                  1    wreg      void 
 13426 ;; Registers used:
 13427 ;;		wreg, status,2, status,0, pclath, cstack
 13428 ;; Tracked objects:
 13429 ;;		On entry : 0/0
 13430 ;;		On exit  : 0/0
 13431 ;;		Unchanged: 0/0
 13432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13433 ;;      Params:         0       0       0       0       0       0       0       0
 13434 ;;      Locals:         1       0       0       0       0       0       0       0
 13435 ;;      Temps:          0       0       0       0       0       0       0       0
 13436 ;;      Totals:         1       0       0       0       0       0       0       0
 13437 ;;Total ram usage:        1 bytes
 13438 ;; Hardware stack levels used:    1
 13439 ;; Hardware stack levels required when called:    5
 13440 ;; This function calls:
 13441 ;;		_EUSART_Write
 13442 ;; This function is called by:
 13443 ;;		_fputc
 13444 ;; This function uses a non-reentrant model
 13445 ;;
 13446                           
 13447                           
 13448                           ;psect for function _putch
 13449  1440                     _putch:	
 13450                           
 13451                           ;incstack = 0
 13452                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
 13453                           ;putch@txData stored from wreg
 13454  1440  00F2               	movwf	putch@txData
 13455                           
 13456                           ;mcc_generated_files/eusart.c: 174: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 175: {;mcc_generated_files/eusart.c: 176:     EUSART_Write(txData);
 13457  1441  0872               	movf	putch@txData,w
 13458  1442  3194  2480         	fcall	_EUSART_Write
 13459  1444  0008               	return
 13460  1445                     __end_of_putch:	
 13461                           
 13462                           	psect	text86
 13463  1480                     __ptext86:	
 13464 ;; *************** function _EUSART_Write *****************
 13465 ;; Defined at:
 13466 ;;		line 160 in file "mcc_generated_files/eusart.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;  txData          1    wreg     unsigned char 
 13469 ;; Auto vars:     Size  Location     Type
 13470 ;;  txData          1    1[COMMON] unsigned char 
 13471 ;; Return value:  Size  Location     Type
 13472 ;;                  1    wreg      void 
 13473 ;; Registers used:
 13474 ;;		wreg
 13475 ;; Tracked objects:
 13476 ;;		On entry : 0/0
 13477 ;;		On exit  : 0/0
 13478 ;;		Unchanged: 0/0
 13479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13480 ;;      Params:         0       0       0       0       0       0       0       0
 13481 ;;      Locals:         1       0       0       0       0       0       0       0
 13482 ;;      Temps:          0       0       0       0       0       0       0       0
 13483 ;;      Totals:         1       0       0       0       0       0       0       0
 13484 ;;Total ram usage:        1 bytes
 13485 ;; Hardware stack levels used:    1
 13486 ;; Hardware stack levels required when called:    4
 13487 ;; This function calls:
 13488 ;;		Nothing
 13489 ;; This function is called by:
 13490 ;;		_putch
 13491 ;; This function uses a non-reentrant model
 13492 ;;
 13493                           
 13494                           
 13495                           ;psect for function _EUSART_Write
 13496  1480                     _EUSART_Write:	
 13497                           
 13498                           ;incstack = 0
 13499                           ; Regs used in _EUSART_Write: [wreg]
 13500                           ;EUSART_Write@txData stored from wreg
 13501  1480  00F1               	movwf	EUSART_Write@txData
 13502  1481                     l87:	
 13503                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:     }
 13504                           
 13505                           
 13506                           ;mcc_generated_files/eusart.c: 162:     while(0 == PIR1bits.TXIF)
 13507  1481  0020               	movlb	0	; select bank0
 13508  1482  1E11               	btfss	17,4	;volatile
 13509  1483  2C81               	goto	l87
 13510                           
 13511                           ;mcc_generated_files/eusart.c: 166:     TXREG = txData;
 13512  1484  0871               	movf	EUSART_Write@txData,w
 13513  1485  0023               	movlb	3	; select bank3
 13514  1486  009A               	movwf	26	;volatile
 13515  1487  0008               	return
 13516  1488                     __end_of_EUSART_Write:	
 13517                           
 13518                           	psect	text87
 13519  0F63                     __ptext87:	
 13520 ;; *************** function _RELAY_PROCESS *****************
 13521 ;; Defined at:
 13522 ;;		line 5 in file "relay.c"
 13523 ;; Parameters:    Size  Location     Type
 13524 ;;  x               1    wreg     unsigned char 
 13525 ;; Auto vars:     Size  Location     Type
 13526 ;;  x               1    3[COMMON] unsigned char 
 13527 ;; Return value:  Size  Location     Type
 13528 ;;                  1    wreg      void 
 13529 ;; Registers used:
 13530 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13531 ;; Tracked objects:
 13532 ;;		On entry : 0/0
 13533 ;;		On exit  : 0/0
 13534 ;;		Unchanged: 0/0
 13535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13536 ;;      Params:         0       0       0       0       0       0       0       0
 13537 ;;      Locals:         1       0       0       0       0       0       0       0
 13538 ;;      Temps:          2       0       0       0       0       0       0       0
 13539 ;;      Totals:         3       0       0       0       0       0       0       0
 13540 ;;Total ram usage:        3 bytes
 13541 ;; Hardware stack levels used:    1
 13542 ;; Hardware stack levels required when called:    4
 13543 ;; This function calls:
 13544 ;;		Nothing
 13545 ;; This function is called by:
 13546 ;;		_myButtonPressedCallback
 13547 ;;		_DATA_PROCESS
 13548 ;; This function uses a non-reentrant model
 13549 ;;
 13550                           
 13551                           
 13552                           ;psect for function _RELAY_PROCESS
 13553  0F63                     _RELAY_PROCESS:	
 13554                           
 13555                           ;incstack = 0
 13556                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 13557                           ;RELAY_PROCESS@x stored from wreg
 13558  0F63  00F3               	movwf	RELAY_PROCESS@x
 13559                           
 13560                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 13561  0F64  2FC5               	goto	l4234
 13562  0F65                     l1241:	
 13563                           ;relay.c: 10:         {;relay.c: 11:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13564                           
 13565  0F65  0022               	movlb	2	; select bank2
 13566  0F66  170D               	bsf	13,6	;volatile
 13567  0F67  168E               	bsf	14,5	;volatile
 13568  0F68  168C               	bsf	12,5	;volatile
 13569  0F69  160C               	bsf	12,4	;volatile
 13570  0F6A  0008               	return
 13571  0F6B                     l1251:	
 13572                           ;relay.c: 15:         {;relay.c: 16:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13573                           
 13574  0F6B  0022               	movlb	2	; select bank2
 13575  0F6C  170D               	bsf	13,6	;volatile
 13576  0F6D  168E               	bsf	14,5	;volatile
 13577  0F6E  168C               	bsf	12,5	;volatile
 13578  0F6F  120C               	bcf	12,4	;volatile
 13579  0F70  0008               	return
 13580  0F71                     l1260:	
 13581                           ;relay.c: 20:         {;relay.c: 21:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13582                           
 13583  0F71  0022               	movlb	2	; select bank2
 13584  0F72  170D               	bsf	13,6	;volatile
 13585  0F73  168E               	bsf	14,5	;volatile
 13586  0F74  128C               	bcf	12,5	;volatile
 13587  0F75  160C               	bsf	12,4	;volatile
 13588  0F76  0008               	return
 13589  0F77                     l1269:	
 13590                           ;relay.c: 25:         {;relay.c: 26:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13591                           
 13592  0F77  0022               	movlb	2	; select bank2
 13593  0F78  170D               	bsf	13,6	;volatile
 13594  0F79  168E               	bsf	14,5	;volatile
 13595  0F7A  128C               	bcf	12,5	;volatile
 13596  0F7B  120C               	bcf	12,4	;volatile
 13597  0F7C  0008               	return
 13598  0F7D                     l1278:	
 13599                           ;relay.c: 30:         {;relay.c: 31:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13600                           
 13601  0F7D  0022               	movlb	2	; select bank2
 13602  0F7E  170D               	bsf	13,6	;volatile
 13603  0F7F  128E               	bcf	14,5	;volatile
 13604  0F80  168C               	bsf	12,5	;volatile
 13605  0F81  160C               	bsf	12,4	;volatile
 13606  0F82  0008               	return
 13607  0F83                     l1287:	
 13608                           ;relay.c: 35:         {;relay.c: 36:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13609                           
 13610  0F83  0022               	movlb	2	; select bank2
 13611  0F84  170D               	bsf	13,6	;volatile
 13612  0F85  128E               	bcf	14,5	;volatile
 13613  0F86  168C               	bsf	12,5	;volatile
 13614  0F87  120C               	bcf	12,4	;volatile
 13615  0F88  0008               	return
 13616  0F89                     l1296:	
 13617                           ;relay.c: 40:         {;relay.c: 41:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13618                           
 13619  0F89  0022               	movlb	2	; select bank2
 13620  0F8A  170D               	bsf	13,6	;volatile
 13621  0F8B  128E               	bcf	14,5	;volatile
 13622  0F8C  128C               	bcf	12,5	;volatile
 13623  0F8D  160C               	bsf	12,4	;volatile
 13624  0F8E  0008               	return
 13625  0F8F                     l1305:	
 13626                           ;relay.c: 45:         {;relay.c: 46:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13627                           
 13628  0F8F  0022               	movlb	2	; select bank2
 13629  0F90  170D               	bsf	13,6	;volatile
 13630  0F91  128E               	bcf	14,5	;volatile
 13631  0F92  128C               	bcf	12,5	;volatile
 13632  0F93  120C               	bcf	12,4	;volatile
 13633  0F94  0008               	return
 13634  0F95                     l1314:	
 13635                           ;relay.c: 50:         {;relay.c: 51:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13636                           
 13637  0F95  0022               	movlb	2	; select bank2
 13638  0F96  130D               	bcf	13,6	;volatile
 13639  0F97  168E               	bsf	14,5	;volatile
 13640  0F98  168C               	bsf	12,5	;volatile
 13641  0F99  160C               	bsf	12,4	;volatile
 13642  0F9A  0008               	return
 13643  0F9B                     l1323:	
 13644                           ;relay.c: 55:         {;relay.c: 56:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13645                           
 13646  0F9B  0022               	movlb	2	; select bank2
 13647  0F9C  130D               	bcf	13,6	;volatile
 13648  0F9D  168E               	bsf	14,5	;volatile
 13649  0F9E  168C               	bsf	12,5	;volatile
 13650  0F9F  120C               	bcf	12,4	;volatile
 13651  0FA0  0008               	return
 13652  0FA1                     l1332:	
 13653                           ;relay.c: 60:         {;relay.c: 61:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13654                           
 13655  0FA1  0022               	movlb	2	; select bank2
 13656  0FA2  130D               	bcf	13,6	;volatile
 13657  0FA3  168E               	bsf	14,5	;volatile
 13658  0FA4  128C               	bcf	12,5	;volatile
 13659  0FA5  160C               	bsf	12,4	;volatile
 13660  0FA6  0008               	return
 13661  0FA7                     l1341:	
 13662                           ;relay.c: 65:         {;relay.c: 66:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13663                           
 13664  0FA7  0022               	movlb	2	; select bank2
 13665  0FA8  130D               	bcf	13,6	;volatile
 13666  0FA9  168E               	bsf	14,5	;volatile
 13667  0FAA  128C               	bcf	12,5	;volatile
 13668  0FAB  120C               	bcf	12,4	;volatile
 13669  0FAC  0008               	return
 13670  0FAD                     l1350:	
 13671                           ;relay.c: 70:         {;relay.c: 71:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13672                           
 13673  0FAD  0022               	movlb	2	; select bank2
 13674  0FAE  130D               	bcf	13,6	;volatile
 13675  0FAF  128E               	bcf	14,5	;volatile
 13676  0FB0  168C               	bsf	12,5	;volatile
 13677  0FB1  160C               	bsf	12,4	;volatile
 13678  0FB2  0008               	return
 13679  0FB3                     l1359:	
 13680                           ;relay.c: 75:         {;relay.c: 76:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13681                           
 13682  0FB3  0022               	movlb	2	; select bank2
 13683  0FB4  130D               	bcf	13,6	;volatile
 13684  0FB5  128E               	bcf	14,5	;volatile
 13685  0FB6  168C               	bsf	12,5	;volatile
 13686  0FB7  120C               	bcf	12,4	;volatile
 13687  0FB8  0008               	return
 13688  0FB9                     l1368:	
 13689                           ;relay.c: 80:         {;relay.c: 81:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13690                           
 13691  0FB9  0022               	movlb	2	; select bank2
 13692  0FBA  130D               	bcf	13,6	;volatile
 13693  0FBB  128E               	bcf	14,5	;volatile
 13694  0FBC  128C               	bcf	12,5	;volatile
 13695  0FBD  160C               	bsf	12,4	;volatile
 13696  0FBE  0008               	return
 13697  0FBF                     l1377:	
 13698                           ;relay.c: 85:         {;relay.c: 86:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13699                           
 13700  0FBF  0022               	movlb	2	; select bank2
 13701  0FC0  130D               	bcf	13,6	;volatile
 13702  0FC1  128E               	bcf	14,5	;volatile
 13703  0FC2  128C               	bcf	12,5	;volatile
 13704  0FC3  120C               	bcf	12,4	;volatile
 13705  0FC4  0008               	return
 13706  0FC5                     l4234:	
 13707  0FC5  0873               	movf	RELAY_PROCESS@x,w
 13708  0FC6  00F1               	movwf	??_RELAY_PROCESS
 13709  0FC7  01F2               	clrf	??_RELAY_PROCESS+1
 13710                           
 13711                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13712                           ; Switch size 1, requested type "simple"
 13713                           ; Number of cases is 1, Range of values is 0 to 0
 13714                           ; switch strategies available:
 13715                           ; Name         Instructions Cycles
 13716                           ; simple_byte            4     3 (average)
 13717                           ; direct_byte            8     6 (fixed)
 13718                           ; jumptable            260     6 (fixed)
 13719                           ;	Chosen strategy is simple_byte
 13720  0FC8  0872               	movf	??_RELAY_PROCESS+1,w
 13721  0FC9  3A00               	xorlw	0	; case 0
 13722  0FCA  1903               	skipnz
 13723  0FCB  2FCD               	goto	l7102
 13724  0FCC  2FFF               	goto	l1385
 13725  0FCD                     l7102:	
 13726                           
 13727                           ; Switch size 1, requested type "simple"
 13728                           ; Number of cases is 16, Range of values is 0 to 15
 13729                           ; switch strategies available:
 13730                           ; Name         Instructions Cycles
 13731                           ; direct_byte           38     6 (fixed)
 13732                           ; simple_byte           49    25 (average)
 13733                           ; jumptable            260     6 (fixed)
 13734                           ;	Chosen strategy is simple_byte
 13735  0FCD  0871               	movf	??_RELAY_PROCESS,w
 13736  0FCE  3A00               	xorlw	0	; case 0
 13737  0FCF  1903               	skipnz
 13738  0FD0  2F65               	goto	l1241
 13739  0FD1  3A01               	xorlw	1	; case 1
 13740  0FD2  1903               	skipnz
 13741  0FD3  2F6B               	goto	l1251
 13742  0FD4  3A03               	xorlw	3	; case 2
 13743  0FD5  1903               	skipnz
 13744  0FD6  2F71               	goto	l1260
 13745  0FD7  3A01               	xorlw	1	; case 3
 13746  0FD8  1903               	skipnz
 13747  0FD9  2F77               	goto	l1269
 13748  0FDA  3A07               	xorlw	7	; case 4
 13749  0FDB  1903               	skipnz
 13750  0FDC  2F7D               	goto	l1278
 13751  0FDD  3A01               	xorlw	1	; case 5
 13752  0FDE  1903               	skipnz
 13753  0FDF  2F83               	goto	l1287
 13754  0FE0  3A03               	xorlw	3	; case 6
 13755  0FE1  1903               	skipnz
 13756  0FE2  2F89               	goto	l1296
 13757  0FE3  3A01               	xorlw	1	; case 7
 13758  0FE4  1903               	skipnz
 13759  0FE5  2F8F               	goto	l1305
 13760  0FE6  3A0F               	xorlw	15	; case 8
 13761  0FE7  1903               	skipnz
 13762  0FE8  2F95               	goto	l1314
 13763  0FE9  3A01               	xorlw	1	; case 9
 13764  0FEA  1903               	skipnz
 13765  0FEB  2F9B               	goto	l1323
 13766  0FEC  3A03               	xorlw	3	; case 10
 13767  0FED  1903               	skipnz
 13768  0FEE  2FA1               	goto	l1332
 13769  0FEF  3A01               	xorlw	1	; case 11
 13770  0FF0  1903               	skipnz
 13771  0FF1  2FA7               	goto	l1341
 13772  0FF2  3A07               	xorlw	7	; case 12
 13773  0FF3  1903               	skipnz
 13774  0FF4  2FAD               	goto	l1350
 13775  0FF5  3A01               	xorlw	1	; case 13
 13776  0FF6  1903               	skipnz
 13777  0FF7  2FB3               	goto	l1359
 13778  0FF8  3A03               	xorlw	3	; case 14
 13779  0FF9  1903               	skipnz
 13780  0FFA  2FB9               	goto	l1368
 13781  0FFB  3A01               	xorlw	1	; case 15
 13782  0FFC  1903               	skipnz
 13783  0FFD  2FBF               	goto	l1377
 13784  0FFE  2FFF               	goto	l1385
 13785  0FFF                     l1385:	
 13786  0FFF  0008               	return
 13787  1000                     __end_of_RELAY_PROCESS:	
 13788                           
 13789                           	psect	text88
 13790  0EC6                     __ptext88:	
 13791 ;; *************** function _LED_PROCESS *****************
 13792 ;; Defined at:
 13793 ;;		line 10 in file "led.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;  x               1    wreg     unsigned char 
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;  x               1    3[COMMON] unsigned char 
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  1    wreg      void 
 13800 ;; Registers used:
 13801 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13807 ;;      Params:         0       0       0       0       0       0       0       0
 13808 ;;      Locals:         1       0       0       0       0       0       0       0
 13809 ;;      Temps:          2       0       0       0       0       0       0       0
 13810 ;;      Totals:         3       0       0       0       0       0       0       0
 13811 ;;Total ram usage:        3 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    4
 13814 ;; This function calls:
 13815 ;;		Nothing
 13816 ;; This function is called by:
 13817 ;;		_main
 13818 ;;		_myButtonPressedCallback
 13819 ;;		_DATA_PROCESS
 13820 ;; This function uses a non-reentrant model
 13821 ;;
 13822                           
 13823                           
 13824                           ;psect for function _LED_PROCESS
 13825  0EC6                     _LED_PROCESS:	
 13826                           
 13827                           ;incstack = 0
 13828                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0]
 13829                           ;LED_PROCESS@x stored from wreg
 13830  0EC6  00F3               	movwf	LED_PROCESS@x
 13831                           
 13832                           ;led.c: 10: void LED_PROCESS(uint8_t x);led.c: 11: {;led.c: 12:     switch(x)
 13833  0EC7  2F28               	goto	l4212
 13834  0EC8                     l398:	
 13835                           ;led.c: 15:         {;led.c: 16:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13836                           
 13837  0EC8  0022               	movlb	2	; select bank2
 13838  0EC9  140C               	bsf	12,0	;volatile
 13839  0ECA  178E               	bsf	14,7	;volatile
 13840  0ECB  148C               	bsf	12,1	;volatile
 13841  0ECC  158E               	bsf	14,3	;volatile
 13842  0ECD  0008               	return
 13843  0ECE                     l408:	
 13844                           ;led.c: 20:         {;led.c: 21:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13845                           
 13846  0ECE  0022               	movlb	2	; select bank2
 13847  0ECF  140C               	bsf	12,0	;volatile
 13848  0ED0  178E               	bsf	14,7	;volatile
 13849  0ED1  148C               	bsf	12,1	;volatile
 13850  0ED2  118E               	bcf	14,3	;volatile
 13851  0ED3  0008               	return
 13852  0ED4                     l417:	
 13853                           ;led.c: 25:         {;led.c: 26:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13854                           
 13855  0ED4  0022               	movlb	2	; select bank2
 13856  0ED5  140C               	bsf	12,0	;volatile
 13857  0ED6  178E               	bsf	14,7	;volatile
 13858  0ED7  108C               	bcf	12,1	;volatile
 13859  0ED8  158E               	bsf	14,3	;volatile
 13860  0ED9  0008               	return
 13861  0EDA                     l426:	
 13862                           ;led.c: 30:         {;led.c: 31:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13863                           
 13864  0EDA  0022               	movlb	2	; select bank2
 13865  0EDB  140C               	bsf	12,0	;volatile
 13866  0EDC  178E               	bsf	14,7	;volatile
 13867  0EDD  108C               	bcf	12,1	;volatile
 13868  0EDE  118E               	bcf	14,3	;volatile
 13869  0EDF  0008               	return
 13870  0EE0                     l435:	
 13871                           ;led.c: 35:         {;led.c: 36:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13872                           
 13873  0EE0  0022               	movlb	2	; select bank2
 13874  0EE1  140C               	bsf	12,0	;volatile
 13875  0EE2  138E               	bcf	14,7	;volatile
 13876  0EE3  148C               	bsf	12,1	;volatile
 13877  0EE4  158E               	bsf	14,3	;volatile
 13878  0EE5  0008               	return
 13879  0EE6                     l444:	
 13880                           ;led.c: 40:         {;led.c: 41:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13881                           
 13882  0EE6  0022               	movlb	2	; select bank2
 13883  0EE7  140C               	bsf	12,0	;volatile
 13884  0EE8  138E               	bcf	14,7	;volatile
 13885  0EE9  148C               	bsf	12,1	;volatile
 13886  0EEA  118E               	bcf	14,3	;volatile
 13887  0EEB  0008               	return
 13888  0EEC                     l453:	
 13889                           ;led.c: 45:         {;led.c: 46:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13890                           
 13891  0EEC  0022               	movlb	2	; select bank2
 13892  0EED  140C               	bsf	12,0	;volatile
 13893  0EEE  138E               	bcf	14,7	;volatile
 13894  0EEF  108C               	bcf	12,1	;volatile
 13895  0EF0  158E               	bsf	14,3	;volatile
 13896  0EF1  0008               	return
 13897  0EF2                     l462:	
 13898                           ;led.c: 50:         {;led.c: 51:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13899                           
 13900  0EF2  0022               	movlb	2	; select bank2
 13901  0EF3  140C               	bsf	12,0	;volatile
 13902  0EF4  138E               	bcf	14,7	;volatile
 13903  0EF5  108C               	bcf	12,1	;volatile
 13904  0EF6  118E               	bcf	14,3	;volatile
 13905  0EF7  0008               	return
 13906  0EF8                     l471:	
 13907                           ;led.c: 55:         {;led.c: 56:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13908                           
 13909  0EF8  0022               	movlb	2	; select bank2
 13910  0EF9  100C               	bcf	12,0	;volatile
 13911  0EFA  178E               	bsf	14,7	;volatile
 13912  0EFB  148C               	bsf	12,1	;volatile
 13913  0EFC  158E               	bsf	14,3	;volatile
 13914  0EFD  0008               	return
 13915  0EFE                     l480:	
 13916                           ;led.c: 60:         {;led.c: 61:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13917                           
 13918  0EFE  0022               	movlb	2	; select bank2
 13919  0EFF  100C               	bcf	12,0	;volatile
 13920  0F00  178E               	bsf	14,7	;volatile
 13921  0F01  148C               	bsf	12,1	;volatile
 13922  0F02  118E               	bcf	14,3	;volatile
 13923  0F03  0008               	return
 13924  0F04                     l489:	
 13925                           ;led.c: 65:         {;led.c: 66:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13926                           
 13927  0F04  0022               	movlb	2	; select bank2
 13928  0F05  100C               	bcf	12,0	;volatile
 13929  0F06  178E               	bsf	14,7	;volatile
 13930  0F07  108C               	bcf	12,1	;volatile
 13931  0F08  158E               	bsf	14,3	;volatile
 13932  0F09  0008               	return
 13933  0F0A                     l498:	
 13934                           ;led.c: 70:         {;led.c: 71:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13935                           
 13936  0F0A  0022               	movlb	2	; select bank2
 13937  0F0B  100C               	bcf	12,0	;volatile
 13938  0F0C  178E               	bsf	14,7	;volatile
 13939  0F0D  108C               	bcf	12,1	;volatile
 13940  0F0E  118E               	bcf	14,3	;volatile
 13941  0F0F  0008               	return
 13942  0F10                     l507:	
 13943                           ;led.c: 75:         {;led.c: 76:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13944                           
 13945  0F10  0022               	movlb	2	; select bank2
 13946  0F11  100C               	bcf	12,0	;volatile
 13947  0F12  138E               	bcf	14,7	;volatile
 13948  0F13  148C               	bsf	12,1	;volatile
 13949  0F14  158E               	bsf	14,3	;volatile
 13950  0F15  0008               	return
 13951  0F16                     l516:	
 13952                           ;led.c: 80:         {;led.c: 81:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13953                           
 13954  0F16  0022               	movlb	2	; select bank2
 13955  0F17  100C               	bcf	12,0	;volatile
 13956  0F18  138E               	bcf	14,7	;volatile
 13957  0F19  148C               	bsf	12,1	;volatile
 13958  0F1A  118E               	bcf	14,3	;volatile
 13959  0F1B  0008               	return
 13960  0F1C                     l525:	
 13961                           ;led.c: 85:         {;led.c: 86:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13962                           
 13963  0F1C  0022               	movlb	2	; select bank2
 13964  0F1D  100C               	bcf	12,0	;volatile
 13965  0F1E  138E               	bcf	14,7	;volatile
 13966  0F1F  108C               	bcf	12,1	;volatile
 13967  0F20  158E               	bsf	14,3	;volatile
 13968  0F21  0008               	return
 13969  0F22                     l534:	
 13970                           ;led.c: 90:         {;led.c: 91:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13971                           
 13972  0F22  0022               	movlb	2	; select bank2
 13973  0F23  100C               	bcf	12,0	;volatile
 13974  0F24  138E               	bcf	14,7	;volatile
 13975  0F25  108C               	bcf	12,1	;volatile
 13976  0F26  118E               	bcf	14,3	;volatile
 13977  0F27  0008               	return
 13978  0F28                     l4212:	
 13979  0F28  0873               	movf	LED_PROCESS@x,w
 13980  0F29  00F1               	movwf	??_LED_PROCESS
 13981  0F2A  01F2               	clrf	??_LED_PROCESS+1
 13982                           
 13983                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13984                           ; Switch size 1, requested type "simple"
 13985                           ; Number of cases is 1, Range of values is 0 to 0
 13986                           ; switch strategies available:
 13987                           ; Name         Instructions Cycles
 13988                           ; simple_byte            4     3 (average)
 13989                           ; direct_byte            8     6 (fixed)
 13990                           ; jumptable            260     6 (fixed)
 13991                           ;	Chosen strategy is simple_byte
 13992  0F2B  0872               	movf	??_LED_PROCESS+1,w
 13993  0F2C  3A00               	xorlw	0	; case 0
 13994  0F2D  1903               	skipnz
 13995  0F2E  2F30               	goto	l7104
 13996  0F2F  2F62               	goto	l542
 13997  0F30                     l7104:	
 13998                           
 13999                           ; Switch size 1, requested type "simple"
 14000                           ; Number of cases is 16, Range of values is 0 to 15
 14001                           ; switch strategies available:
 14002                           ; Name         Instructions Cycles
 14003                           ; direct_byte           38     6 (fixed)
 14004                           ; simple_byte           49    25 (average)
 14005                           ; jumptable            260     6 (fixed)
 14006                           ;	Chosen strategy is simple_byte
 14007  0F30  0871               	movf	??_LED_PROCESS,w
 14008  0F31  3A00               	xorlw	0	; case 0
 14009  0F32  1903               	skipnz
 14010  0F33  2EC8               	goto	l398
 14011  0F34  3A01               	xorlw	1	; case 1
 14012  0F35  1903               	skipnz
 14013  0F36  2ECE               	goto	l408
 14014  0F37  3A03               	xorlw	3	; case 2
 14015  0F38  1903               	skipnz
 14016  0F39  2ED4               	goto	l417
 14017  0F3A  3A01               	xorlw	1	; case 3
 14018  0F3B  1903               	skipnz
 14019  0F3C  2EDA               	goto	l426
 14020  0F3D  3A07               	xorlw	7	; case 4
 14021  0F3E  1903               	skipnz
 14022  0F3F  2EE0               	goto	l435
 14023  0F40  3A01               	xorlw	1	; case 5
 14024  0F41  1903               	skipnz
 14025  0F42  2EE6               	goto	l444
 14026  0F43  3A03               	xorlw	3	; case 6
 14027  0F44  1903               	skipnz
 14028  0F45  2EEC               	goto	l453
 14029  0F46  3A01               	xorlw	1	; case 7
 14030  0F47  1903               	skipnz
 14031  0F48  2EF2               	goto	l462
 14032  0F49  3A0F               	xorlw	15	; case 8
 14033  0F4A  1903               	skipnz
 14034  0F4B  2EF8               	goto	l471
 14035  0F4C  3A01               	xorlw	1	; case 9
 14036  0F4D  1903               	skipnz
 14037  0F4E  2EFE               	goto	l480
 14038  0F4F  3A03               	xorlw	3	; case 10
 14039  0F50  1903               	skipnz
 14040  0F51  2F04               	goto	l489
 14041  0F52  3A01               	xorlw	1	; case 11
 14042  0F53  1903               	skipnz
 14043  0F54  2F0A               	goto	l498
 14044  0F55  3A07               	xorlw	7	; case 12
 14045  0F56  1903               	skipnz
 14046  0F57  2F10               	goto	l507
 14047  0F58  3A01               	xorlw	1	; case 13
 14048  0F59  1903               	skipnz
 14049  0F5A  2F16               	goto	l516
 14050  0F5B  3A03               	xorlw	3	; case 14
 14051  0F5C  1903               	skipnz
 14052  0F5D  2F1C               	goto	l525
 14053  0F5E  3A01               	xorlw	1	; case 15
 14054  0F5F  1903               	skipnz
 14055  0F60  2F22               	goto	l534
 14056  0F61  2F62               	goto	l542
 14057  0F62                     l542:	
 14058  0F62  0008               	return
 14059  0F63                     __end_of_LED_PROCESS:	
 14060                           
 14061                           	psect	intentry
 14062  0004                     __pintentry:	
 14063 ;; *************** function _INTERRUPT_InterruptManager *****************
 14064 ;; Defined at:
 14065 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14066 ;; Parameters:    Size  Location     Type
 14067 ;;		None
 14068 ;; Auto vars:     Size  Location     Type
 14069 ;;		None
 14070 ;; Return value:  Size  Location     Type
 14071 ;;                  1    wreg      void 
 14072 ;; Registers used:
 14073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14074 ;; Tracked objects:
 14075 ;;		On entry : 0/0
 14076 ;;		On exit  : 0/0
 14077 ;;		Unchanged: 0/0
 14078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14079 ;;      Params:         0       0       0       0       0       0       0       0
 14080 ;;      Locals:         0       0       0       0       0       0       0       0
 14081 ;;      Temps:          0       0       0       0       0       0       0       0
 14082 ;;      Totals:         0       0       0       0       0       0       0       0
 14083 ;;Total ram usage:        0 bytes
 14084 ;; Hardware stack levels used:    1
 14085 ;; Hardware stack levels required when called:    3
 14086 ;; This function calls:
 14087 ;;		Absolute function
 14088 ;;		_EUSART_Receive_ISR
 14089 ;; This function is called by:
 14090 ;;		Interrupt level 1
 14091 ;; This function uses a non-reentrant model
 14092 ;;
 14093                           
 14094  0004                     _INTERRUPT_InterruptManager:	
 14095                           
 14096                           ;incstack = 0
 14097 ;; hardware stack exceeded
 14098  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14099                           
 14100                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14101  0005  3180               	pagesel	$
 14102                           
 14103                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 14104  0006  1F0B               	btfss	11,6	;volatile
 14105  0007  2814               	goto	i1l145
 14106                           
 14107                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 14108  0008  0021               	movlb	1	; select bank1
 14109  0009  1E91               	btfss	17,5	;volatile
 14110  000A  2814               	goto	i1l145
 14111  000B  0020               	movlb	0	; select bank0
 14112  000C  1E91               	btfss	17,5	;volatile
 14113  000D  2814               	goto	i1l145
 14114                           
 14115                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_RxDefaultInterruptHandler();
 14116  000E  0021               	movlb	1	; select bank1
 14117  000F  0851               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14118  0010  008A               	movwf	10
 14119  0011  0850               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14120  0012  000A               	callw
 14121  0013  3180               	pagesel	$
 14122  0014                     i1l145:	
 14123                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 14124                           
 14125  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14126  0015  0009               	retfie
 14127  0016                     __end_of_INTERRUPT_InterruptManager:	
 14128                           
 14129                           	psect	text90
 14130  093E                     __ptext90:	
 14131 ;; *************** function _EUSART_Receive_ISR *****************
 14132 ;; Defined at:
 14133 ;;		line 180 in file "mcc_generated_files/eusart.c"
 14134 ;; Parameters:    Size  Location     Type
 14135 ;;		None
 14136 ;; Auto vars:     Size  Location     Type
 14137 ;;		None
 14138 ;; Return value:  Size  Location     Type
 14139 ;;                  1    wreg      void 
 14140 ;; Registers used:
 14141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14142 ;; Tracked objects:
 14143 ;;		On entry : 0/0
 14144 ;;		On exit  : 0/0
 14145 ;;		Unchanged: 0/0
 14146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14147 ;;      Params:         0       0       0       0       0       0       0       0
 14148 ;;      Locals:         0       0       0       0       0       0       0       0
 14149 ;;      Temps:          0       0       0       0       0       0       0       0
 14150 ;;      Totals:         0       0       0       0       0       0       0       0
 14151 ;;Total ram usage:        0 bytes
 14152 ;; Hardware stack levels used:    1
 14153 ;; Hardware stack levels required when called:    2
 14154 ;; This function calls:
 14155 ;;		Absolute function
 14156 ;;		_EUSART_DefaultErrorHandler
 14157 ;;		_EUSART_DefaultFramingErrorHandler
 14158 ;;		_EUSART_DefaultOverrunErrorHandler
 14159 ;;		_EUSART_RxDataHandler
 14160 ;; This function is called by:
 14161 ;;		_EUSART_Initialize
 14162 ;;		_INTERRUPT_InterruptManager
 14163 ;; This function uses a non-reentrant model
 14164 ;;
 14165                           
 14166                           
 14167                           ;psect for function _EUSART_Receive_ISR
 14168  093E                     _EUSART_Receive_ISR:	
 14169                           
 14170                           ;mcc_generated_files/eusart.c: 183:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 14171                           
 14172                           ;incstack = 0
 14173 ;; hardware stack exceeded
 14174                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14175  093E  087C               	movf	_eusartRxHead,w	;volatile
 14176  093F  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14177  0940  0086               	movwf	6
 14178  0941  0187               	clrf	7
 14179  0942  0181               	clrf	1
 14180                           
 14181                           ;mcc_generated_files/eusart.c: 185:     if(RCSTAbits.FERR){
 14182  0943  0023               	movlb	3	; select bank3
 14183  0944  1D1D               	btfss	29,2	;volatile
 14184  0945  2951               	goto	i1l5058
 14185                           
 14186                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14187  0946  087C               	movf	_eusartRxHead,w	;volatile
 14188  0947  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14189  0948  0086               	movwf	6
 14190  0949  0187               	clrf	7
 14191  094A  1481               	bsf	1,1
 14192                           
 14193                           ;mcc_generated_files/eusart.c: 187:         EUSART_FramingErrorHandler();
 14194  094B  0021               	movlb	1	; select bank1
 14195  094C  084F               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 14196  094D  008A               	movwf	10
 14197  094E  084E               	movf	_EUSART_FramingErrorHandler^(0+128),w
 14198  094F  000A               	callw
 14199  0950  3189               	pagesel	$
 14200  0951                     i1l5058:	
 14201                           
 14202                           ;mcc_generated_files/eusart.c: 190:     if(RCSTAbits.OERR){
 14203  0951  0023               	movlb	3	; select bank3
 14204  0952  1C9D               	btfss	29,1	;volatile
 14205  0953  295F               	goto	i1l5064
 14206                           
 14207                           ;mcc_generated_files/eusart.c: 191:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14208  0954  087C               	movf	_eusartRxHead,w	;volatile
 14209  0955  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14210  0956  0086               	movwf	6
 14211  0957  0187               	clrf	7
 14212  0958  1501               	bsf	1,2
 14213                           
 14214                           ;mcc_generated_files/eusart.c: 192:         EUSART_OverrunErrorHandler();
 14215  0959  0021               	movlb	1	; select bank1
 14216  095A  084D               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 14217  095B  008A               	movwf	10
 14218  095C  084C               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 14219  095D  000A               	callw
 14220  095E  3189               	pagesel	$
 14221  095F                     i1l5064:	
 14222                           
 14223                           ;mcc_generated_files/eusart.c: 195:     if(eusartRxStatusBuffer[eusartRxHead].status){
 14224  095F  087C               	movf	_eusartRxHead,w	;volatile
 14225  0960  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14226  0961  0086               	movwf	6
 14227  0962  0187               	clrf	7
 14228  0963  0801               	movf	1,w
 14229  0964  1903               	btfsc	3,2
 14230  0965  296D               	goto	i1l5068
 14231                           
 14232                           ;mcc_generated_files/eusart.c: 196:         EUSART_ErrorHandler();
 14233  0966  0021               	movlb	1	; select bank1
 14234  0967  084B               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14235  0968  008A               	movwf	10
 14236  0969  084A               	movf	_EUSART_ErrorHandler^(0+128),w
 14237  096A  000A               	callw
 14238  096B  3189               	pagesel	$
 14239                           
 14240                           ;mcc_generated_files/eusart.c: 197:     } else {
 14241  096C  0008               	return
 14242  096D                     i1l5068:	
 14243                           
 14244                           ;mcc_generated_files/eusart.c: 198:         EUSART_RxDataHandler();
 14245  096D  3196  2624         	fcall	_EUSART_RxDataHandler
 14246  096F  0008               	return
 14247  0970                     __end_of_EUSART_Receive_ISR:	
 14248                           
 14249                           	psect	text91
 14250  1438                     __ptext91:	
 14251 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14252 ;; Defined at:
 14253 ;;		line 216 in file "mcc_generated_files/eusart.c"
 14254 ;; Parameters:    Size  Location     Type
 14255 ;;		None
 14256 ;; Auto vars:     Size  Location     Type
 14257 ;;		None
 14258 ;; Return value:  Size  Location     Type
 14259 ;;                  1    wreg      void 
 14260 ;; Registers used:
 14261 ;;		None
 14262 ;; Tracked objects:
 14263 ;;		On entry : 0/0
 14264 ;;		On exit  : 0/0
 14265 ;;		Unchanged: 0/0
 14266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14267 ;;      Params:         0       0       0       0       0       0       0       0
 14268 ;;      Locals:         0       0       0       0       0       0       0       0
 14269 ;;      Temps:          0       0       0       0       0       0       0       0
 14270 ;;      Totals:         0       0       0       0       0       0       0       0
 14271 ;;Total ram usage:        0 bytes
 14272 ;; Hardware stack levels used:    1
 14273 ;; This function calls:
 14274 ;;		Nothing
 14275 ;; This function is called by:
 14276 ;;		_EUSART_Initialize
 14277 ;;		_EUSART_Receive_ISR
 14278 ;; This function uses a non-reentrant model
 14279 ;;
 14280                           
 14281                           
 14282                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 14283  1438                     _EUSART_DefaultOverrunErrorHandler:	
 14284                           
 14285                           ;mcc_generated_files/eusart.c: 219:     RCSTAbits.CREN = 0;
 14286                           
 14287                           ;incstack = 0
 14288 ;; hardware stack exceeded
 14289                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 14290  1438  0023               	movlb	3	; select bank3
 14291  1439  121D               	bcf	29,4	;volatile
 14292                           
 14293                           ;mcc_generated_files/eusart.c: 220:     RCSTAbits.CREN = 1;
 14294  143A  161D               	bsf	29,4	;volatile
 14295  143B  0008               	return
 14296  143C                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 14297                           
 14298                           	psect	text92
 14299  1429                     __ptext92:	
 14300 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 14301 ;; Defined at:
 14302 ;;		line 214 in file "mcc_generated_files/eusart.c"
 14303 ;; Parameters:    Size  Location     Type
 14304 ;;		None
 14305 ;; Auto vars:     Size  Location     Type
 14306 ;;		None
 14307 ;; Return value:  Size  Location     Type
 14308 ;;                  1    wreg      void 
 14309 ;; Registers used:
 14310 ;;		None
 14311 ;; Tracked objects:
 14312 ;;		On entry : 0/0
 14313 ;;		On exit  : 0/0
 14314 ;;		Unchanged: 0/0
 14315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14316 ;;      Params:         0       0       0       0       0       0       0       0
 14317 ;;      Locals:         0       0       0       0       0       0       0       0
 14318 ;;      Temps:          0       0       0       0       0       0       0       0
 14319 ;;      Totals:         0       0       0       0       0       0       0       0
 14320 ;;Total ram usage:        0 bytes
 14321 ;; Hardware stack levels used:    1
 14322 ;; This function calls:
 14323 ;;		Nothing
 14324 ;; This function is called by:
 14325 ;;		_EUSART_Initialize
 14326 ;;		_EUSART_Receive_ISR
 14327 ;; This function uses a non-reentrant model
 14328 ;;
 14329                           
 14330                           
 14331                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14332  1429                     _EUSART_DefaultFramingErrorHandler:	
 14333                           
 14334                           ;incstack = 0
 14335 ;; hardware stack exceeded
 14336                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14337  1429  0008               	return
 14338  142A                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14339                           
 14340                           	psect	text93
 14341  142C                     __ptext93:	
 14342 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14343 ;; Defined at:
 14344 ;;		line 224 in file "mcc_generated_files/eusart.c"
 14345 ;; Parameters:    Size  Location     Type
 14346 ;;		None
 14347 ;; Auto vars:     Size  Location     Type
 14348 ;;		None
 14349 ;; Return value:  Size  Location     Type
 14350 ;;                  1    wreg      void 
 14351 ;; Registers used:
 14352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14353 ;; Tracked objects:
 14354 ;;		On entry : 0/0
 14355 ;;		On exit  : 0/0
 14356 ;;		Unchanged: 0/0
 14357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14358 ;;      Params:         0       0       0       0       0       0       0       0
 14359 ;;      Locals:         0       0       0       0       0       0       0       0
 14360 ;;      Temps:          0       0       0       0       0       0       0       0
 14361 ;;      Totals:         0       0       0       0       0       0       0       0
 14362 ;;Total ram usage:        0 bytes
 14363 ;; Hardware stack levels used:    1
 14364 ;; Hardware stack levels required when called:    1
 14365 ;; This function calls:
 14366 ;;		_EUSART_RxDataHandler
 14367 ;; This function is called by:
 14368 ;;		_EUSART_Initialize
 14369 ;;		_EUSART_Receive_ISR
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           
 14374                           ;psect for function _EUSART_DefaultErrorHandler
 14375  142C                     _EUSART_DefaultErrorHandler:	
 14376                           
 14377                           ;mcc_generated_files/eusart.c: 225:     EUSART_RxDataHandler();
 14378                           
 14379                           ;incstack = 0
 14380 ;; hardware stack exceeded
 14381                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14382  142C  3196  2624         	fcall	_EUSART_RxDataHandler
 14383  142E  0008               	return
 14384  142F                     __end_of_EUSART_DefaultErrorHandler:	
 14385                           
 14386                           	psect	text94
 14387  1624                     __ptext94:	
 14388 ;; *************** function _EUSART_RxDataHandler *****************
 14389 ;; Defined at:
 14390 ;;		line 204 in file "mcc_generated_files/eusart.c"
 14391 ;; Parameters:    Size  Location     Type
 14392 ;;		None
 14393 ;; Auto vars:     Size  Location     Type
 14394 ;;		None
 14395 ;; Return value:  Size  Location     Type
 14396 ;;                  1    wreg      void 
 14397 ;; Registers used:
 14398 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14399 ;; Tracked objects:
 14400 ;;		On entry : 0/0
 14401 ;;		On exit  : 0/0
 14402 ;;		Unchanged: 0/0
 14403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14404 ;;      Params:         0       0       0       0       0       0       0       0
 14405 ;;      Locals:         0       0       0       0       0       0       0       0
 14406 ;;      Temps:          1       0       0       0       0       0       0       0
 14407 ;;      Totals:         1       0       0       0       0       0       0       0
 14408 ;;Total ram usage:        1 bytes
 14409 ;; Hardware stack levels used:    1
 14410 ;; This function calls:
 14411 ;;		Nothing
 14412 ;; This function is called by:
 14413 ;;		_EUSART_Receive_ISR
 14414 ;;		_EUSART_DefaultErrorHandler
 14415 ;; This function uses a non-reentrant model
 14416 ;;
 14417                           
 14418                           
 14419                           ;psect for function _EUSART_RxDataHandler
 14420  1624                     _EUSART_RxDataHandler:	
 14421                           
 14422                           ;mcc_generated_files/eusart.c: 206:     eusartRxBuffer[eusartRxHead++] = RCREG;
 14423                           
 14424                           ;incstack = 0
 14425 ;; hardware stack exceeded
 14426                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14427  1624  0023               	movlb	3	; select bank3
 14428  1625  0819               	movf	25,w	;volatile
 14429  1626  00F0               	movwf	??_EUSART_RxDataHandler
 14430  1627  087C               	movf	_eusartRxHead,w
 14431  1628  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14432  1629  0086               	movwf	6
 14433  162A  0187               	clrf	7
 14434  162B  0870               	movf	??_EUSART_RxDataHandler,w
 14435  162C  0081               	movwf	1
 14436  162D  3001               	movlw	1
 14437  162E  00F0               	movwf	??_EUSART_RxDataHandler
 14438  162F  0870               	movf	??_EUSART_RxDataHandler,w
 14439  1630  07FC               	addwf	_eusartRxHead,f	;volatile
 14440                           
 14441                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14442  1631  3008               	movlw	8
 14443  1632  027C               	subwf	_eusartRxHead,w	;volatile
 14444  1633  1803               	btfsc	3,0
 14445                           
 14446                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         eus
      +                          artRxHead = 0;
 14447  1634  01FC               	clrf	_eusartRxHead	;volatile
 14448                           
 14449                           ;mcc_generated_files/eusart.c: 211:     eusartRxCount++;
 14450  1635  3001               	movlw	1
 14451  1636  00F0               	movwf	??_EUSART_RxDataHandler
 14452  1637  0870               	movf	??_EUSART_RxDataHandler,w
 14453  1638  0020               	movlb	0	; select bank0
 14454  1639  07EC               	addwf	_eusartRxCount,f	;volatile
 14455  163A  0008               	return
 14456  163B                     __end_of_EUSART_RxDataHandler:	
 14457  007E                     btemp	set	126	;btemp
 14458  007E                     int$flags	set	126
 14459  007E                     wtemp0	set	126


Data Sizes:
    Strings     92
    Constant    73
    Data        49
    BSS         145
    Persistent  40
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     60      79
    BANK1            80      2      52
    BANK2            80      0      68
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2588$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Service$2588	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2280_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Service@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    sp__memcpy	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonReleasedCallback(), 

    callback_pressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonPressedCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    S831$sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    S831$sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _check_message->_printf
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Pressed->_Button_DefaultCallback
    _Button_State_Pressed->_myButtonReleasedCallback
    _Button_State_NotPressed->_Button_DefaultCallback
    _Button_State_NotPressed->_myButtonPressedCallback
    _update_state->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   54646
                                              0 BANK1      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    6576
                                             47 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4370
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   30289
                                             59 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0   15395
                                             57 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0   15296
                                             53 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    8004
                                             48 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1    6558
                                             47 BANK0      1     0      1
            _MTOUCH_Button_isPressed
                       _update_state
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1959
                                             48 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     132
                                             47 BANK0      1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                             47 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                             48 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0    6589
                                             47 BANK0      3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
                       _update_state
 ---------------------------------------------------------------------------------
 (6) _update_state                                         0     0      0    6514
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    6514
                                             39 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    4813
                                             31 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    4378
                                             22 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 8     6      2    2894
                                             16 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2650
                                              7 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1127
                                             11 COMMON     1     0      1
                                              0 BANK0      7     7      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     812
                                              3 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      44
                                              2 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
 ---------------------------------------------------------------------------------
 (17) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (18) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (18) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (18) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
     _RELAY_PROCESS
     _update_state
       _printf
         _vfprintf
           _vfpfcnvrt
             _ctoa
               _pad
                 _fputc
                   _putch
                     _EUSART_Write
                 _fputs
                   _fputc
                     _putch
                       _EUSART_Write
                 _strlen
             _fputc
               _putch
                 _EUSART_Write
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
             _update_state
               _printf
                 _vfprintf
                   _vfpfcnvrt
                     _ctoa
                       _pad
                         _fputc
                           _putch
                             _EUSART_Write
                         _fputs
                           _fputc
                             _putch
                               _EUSART_Write
                         _strlen
                     _fputc
                       _putch
                         _EUSART_Write
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     114       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      34       8       65.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      44      10       85.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     114      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jul 05 17:18:46 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                          _update_state 05A5  
                                      ___bmul@product 0073                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                                                  l87 1481                            __end_of_Sensor_setInactive 1498  
                           _Sensor_setCalibratAcqTime 1522                                           __CFG_LVP$ON 0000  
                                                 l333 064E                                                   l408 0ECE  
                                                 l417 0ED4                                                   l426 0EDA  
                                                 l507 0F10                                                   l435 0EE0  
                                                 l516 0F16                                                   l444 0EE6  
                                                 l525 0F1C                                                   l453 0EEC  
                                                 l534 0F22                                                   l462 0EF2  
                                                 l542 0F62                                                   l471 0EF8  
                                                 l480 0EFE                                                   l398 0EC8  
                                                 l489 0F04                                                   l498 0F0A  
                                                 l845 0503                                                   l881 0122  
                                                 l874 011F                                                   l891 01C2  
                                                 l876 011B                                                   l893 01D9  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 _abs 163B                                ??_EUSART_RxDataHandler 0070  
                                                 _pad 0AAA                        ?_EUSART_SetFramingErrorHandler 0071  
                             ?_Sensor_loadADCSettings 0072                                       _TMR2_Initialize 14A8  
                                        __CFG_BORV$LO 0000                                         DATA_PROCESS@x 0051  
                                                 wreg 0009                      ??_MTOUCH_Sensor_Sampled_ResetAll 0072  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      __size_of_MTOUCH_Sensor_SampleAll 0016  
                      Sensor_getScanGroupIndex@sensor 0073                     __size_of_MTOUCH_Sensor_Initialize 0015  
                           ?_MTOUCH_Sensor_Initialize 0070                                          ?_EUSART_Read 0070  
                                                l1110 0778                                                  ?_abs 0071  
                                                l1305 0F8F                                                  l1241 0F65  
                                                l1314 0F95                                                  l1323 0F9B  
                                                l1251 0F6B                                                  l1332 0FA1  
                                                l1260 0F71                                                  l1341 0FA7  
                                                l1350 0FAD                                                  l1269 0F77  
                                                l1278 0F7D                                                  l1359 0FB3  
                                                l1287 0F83                                                  l1368 0FB9  
                                                l1296 0F89                                                  l1377 0FBF  
                                                l1385 0FFF                                                  l1474 0AC2  
                                                l4212 0F28                                                  l4052 0838  
                                                l1477 0AE2                                                  l1478 0AEE  
                                                l5030 1738                                                  l4046 0827  
                                                l4126 1582                                                  l4048 0836  
                                                l4136 14FD                                                  l4234 0FC5  
                                                l4226 169B                                                  l4058 0849  
                                                l4162 055D                                                  l4180 0DDC  
                                                l4148 04FF                                                  l6020 00BD  
                                                l6004 00A4                                                  l4182 0DE0  
                                                l4166 0570                                                  l4520 089D  
                                                l4512 088E                                                  l4168 0583  
                                                l6016 00B3                                                  l5080 0A15  
                                                l6130 01E6                                                  l5162 0A19  
                                                l7100 061C                                                  l4524 08A5  
                                                l4516 0895                                                  l4188 0E12  
                                                l6140 0203                                                  l6036 00E9  
                                                l6220 0C47                                                  l6212 0C43  
                                                l6204 0C30                                                  l6300 0BA9  
                                                l5156 0A17                                                  l7102 0FCD  
                                                l6134 01EF                                                  l6126 01DD  
                                                l6070 0125                                                  l6062 0116  
                                                l6046 00FC                                                  l6222 0C5A  
                                                ?_pad 0027                                                  l7104 0F30  
                                                l6312 15F6                                                  l4552 0A02  
                                                l6170 167F                                                  l6146 0215  
                                                l6082 016A                                                  l6226 0C73  
                                                l4554 0A04                                                  l6330 17DE  
                                                l4740 0CEA                                                  l6340 14E5  
                                                l4628 0D5A                                                  l6500 1533  
                                                l3942 099C                                                  l4742 0CF2  
                                                l6094 019F                                                  l6086 0185  
                                                l4558 0A0F                                                  l6422 0E6D  
                                                l6406 16AB                                                  l3952 1716  
                                                l3960 1663                                                  l6256 0A99  
                                                l6272 0B5D                                                  l6432 0E8E  
                                                l6440 0EC3                                                  l6416 0E5E  
                                                l6512 1789                                                  l3938 0979  
                                                l5810 0AB8                                                  l6610 0488  
                                                l4746 0D06                                                  l6346 07B1  
                                                l6362 0736                                                  l6098 01B9  
                                                l6426 0E7E                                                  l7090 17A4  
                                                l6522 179C                                                  l5820 0AC4  
                                                l6604 047A                                                  l6532 03D4  
                                                l6380 0BD4                                                  l6348 07B5  
                                                l6292 0B90                                                  l6284 0B78  
                                                l7092 0A21                                                  l6516 178B  
                                                l6700 023A                                                  l3958 1657  
                                                l5814 0AC0                                                  l5830 08EC  
                                                l6630 04B5                                                  l6622 04A4  
                                                l6550 03FC                                                  l5902 1564  
                                                l6278 0B65                                                  l4694 17C7  
                                                l7094 0EAD                                                  l6438 0EA0  
                                                l5832 08F5                                                  l5920 05B4  
                                                l6616 0496                                                  l6544 03EE  
                                                l6368 076F                                                  l6464 0B3B  
                                                l6296 0BA0                                                  l6288 0B80  
                                                l7096 0EB2                                                  l6480 15FA  
                                                l6392 1506                                                  l6800 0385  
                                                l6712 025E                                                  l5930 05D7  
                                                l5922 05BB                                                  l7098 04BF  
                                                l6562 0418                                                  l6538 03E0  
                                                l6634 04B7                                                  l5906 156A  
                                                l4858 160F                                                  l6802 0389  
                                                l5940 05FA                                                  l5932 05DE  
                                                l5924 05C2                                                  l5916 05A6  
                                                l6628 04B2                                                  l6580 0442  
                                                l6556 040A                                                  l6652 16C4  
                                                l5942 0601                                                  l5934 05E5  
                                                l5926 05C9                                                  l5918 05AD  
                                                l5950 0616                                                  l6574 0434  
                                                l6486 1603                                                  l6830 03C5  
                                                l6734 02BE                                                  l5864 06C3  
                                                l5944 0608                                                  l5936 05EC  
                                                l5928 05D0                                                  l6592 045E  
                                                l6568 0426                                                  l5858 06A2  
                                                l5874 06D4                                                  l5890 08D4  
                                                l5946 060F                                                  l5938 05F3  
                                                l6586 0450                                                  l6818 03AF  
                                                l6754 031D                                                  l6762 032A  
                                                l5868 06C9                                                  l6598 046C  
                                                l5982 0095                                                  l5974 007E  
                                                l6774 0345                                                  l6758 0325  
                                                l5888 08B7                                                  l5984 009C  
                                                l5992 009E                                                  l5986 00B1  
                                                STR_1 1800                                                  STR_2 180E  
                                                STR_3 1813                                                  STR_4 1818  
                                                STR_5 181D                                                  STR_6 1822  
                                                STR_7 1827                                                  STR_8 182C  
                                                STR_9 1831                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u2145 099A  
                                                u2415 0E03                                                  u3240 0CD1  
                                                u3065 0D22                                                  u3235 0C99  
                                                u3075 0D68                                                  u3245 0CCD  
                                                u2285 1644                                                  u2365 0598  
                                                u2470 1699                                                  u2465 168A  
                                                u2385 0DBF                                                  u2395 0DC9  
                                                u3435 1612                                                  u5055 0AFF  
                                                u4185 0ACE                                                  u4725 0C61  
                                                u5517 026F                                                  u5607 02F4  
                                                u5527 027C                                                  u4745 09A9  
                                                u5617 0301                                                  u5537 0289  
                                                u4755 0875                                                  u5627 030E  
                                                u5547 0296                                                  u4925 07DE  
                                                u5557 02A3                                                  u5567 02B0  
                                                u5577 02CD                                                  u4955 074C  
                                                u5587 02DA                                                  u5597 02E7  
                          Button_State_Pressed@button 0050                                                  _TMR2 001A  
                               __end_of_check_message 17AD                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01CA  
                            _Sensor_getScanGroupIndex 0825                             ?_Sensor_Acq_ExecutePacket 007B  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0071                                                  _dbuf 0144  
                                                _ctoa 08DD                                                  _main 0222  
                __size_of_MTOUCH_Button_InitializeAll 001C                                                  _prec 00B4  
                                                _nout 00B0                                                  pad@i 002B  
                                                pad@p 0028                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 002D  
                __size_of_MTOUCH_Sensor_InitializeAll 000E                                                  btemp 007E  
                                                start 0016                                     ___bmul@multiplier 0074  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                      __end_of_Sensor_autoCalibration 0E31  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 180E  
        Sensor_Scanfrequency_Evaluation@frequency_hop 1809                              _myButtonReleasedCallback 16F3  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 001B  
                       __size_of_Button_State_Pressed 0068                                                 ??_abs 0073  
                                               ??_pad 002A                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 0078                         ??_MTOUCH_Sensor_RawSample_Get 0077  
                       Sensor_RawSample_Update@sensor 0077                         myButtonPressedCallback@button 004F  
                           __size_of_Sensor_isEnabled 0011                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 1474  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0036                   __end_of_Sensor_isCalibratingAcqTime 14B9  
                         _Sensor_isCalibratingAcqTime 14B0                                                 ?_ctoa 0030  
                                               ?_main 0070                                                 STR_10 1836  
                                               STR_11 183B                                                 STR_12 1840  
                                               STR_13 1845                                                 STR_14 184A  
                                               STR_15 184F                                                 STR_16 1854  
                                               STR_17 1859                                         __CFG_WDTE$OFF 0000  
                                               STR_18 1862                        __end_of_Sensor_loadADCSettings 05A5  
                                               _T2CON 001C                               __size_of_Button_Service 0055  
                                               i1l145 0014                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0036  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 _TXREG 019A  
                                               _TXSTA 019E                       __size_of_Button_DefaultCallback 0001  
                                ??_MTOUCH_needReburst 0071                       __size_of_Sensor_DefaultCallback 0001  
                                               _blink 0067                                                 _flags 00B6  
                             __size_of_Sensor_Service 0095                 __end_of_MTOUCH_Sensor_Scan_Initialize 1551  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 1541  
                                      _WDT_Initialize 143C                               Sensor_setSampled@sensor 0071  
                                               _fputc 0970                                                 _fputs 1712  
                                        LED_PROCESS@x 0073                                                 pad@fp 002F  
                                               _width 00B2                                                 ctoa@c 0030  
                                               _putch 1440                                                 ctoa@w 0033  
                    __size_of_Button_State_NotPressed 00A4                                                 pclath 000A  
                                _Sensor_Sampled_Reset 14A0                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 1432  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0008  
                              Sensor_isEnabled@sensor 0072                                       __initialization 0018  
                                        __end_of_ctoa 090D                                          __end_of_main 03D1  
                                _Sensor_setCalibrated 14E9                                 __size_of_DATA_PROCESS 0124  
                                      ??_EUSART_Write 0071                               __end_of_TMR2_Initialize 14B0  
                                      __CFG_LPBOR$OFF 0000                           ?_INTERRUPT_InterruptManager 0070  
                      ??_EUSART_SetRxInterruptHandler 0073                      __end_of_MTOUCH_Button_Initialize 09DB  
                                              ??_ctoa 0032                                                ??_main 00D2  
                             _MTOUCH_Sensor_Calibrate 1584                             Sensor_Service@sensor_adc1 0044  
                           Sensor_Service@sensor_adc2 0045                               ??_Button_Reading_Update 007C  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0073                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 1440                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0077             __end_of_EUSART_DefaultFramingErrorHandler 142A  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 1429  
                          _EUSART_OverrunErrorHandler 00CC                  __size_of_MTOUCH_Sensor_RawSample_Get 0018  
                                              ?_fputc 0073                                                ?_fputs 007B  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              ?_putch 0070                                                _ANSELB 018D  
                                              _ANSELC 018E                            __end_of_EUSART_is_rx_ready 1432  
                                              _BORCON 0116                                                i1l5064 095F  
                                              i1l5058 0951                                                i1l5068 096D  
                               ?_Sensor_Sampled_Reset 0070                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                     MTOUCH_Button_InitializeAll@button 0020  
                                        _DATA_PROCESS 03D1                        ??_Button_Reading_Update_Helper 0079  
                              _Button_DefaultCallback 142A                       __end_of_MTOUCH_Service_Mainloop 16D6  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 14B9  
                              _Sensor_DefaultCallback 142B                                          vfprintf@cfmt 0045  
                                       _packet_sample 005C                                                ___bmul 1562  
                               ?_Sensor_setCalibrated 0070                          Sensor_DefaultCallback@sensor 0071  
                                      __CFG_STVREN$ON 0000                      __size_of_myButtonPressedCallback 002E  
                                              _memcpy 17D5                                                _rxData 006B  
                    __end_of_MTOUCH_Button_ServiceAll 1541                                                _printf 1551  
                                              pad@buf 0027                                  __size_of_LED_PROCESS 009D  
                                              ctoa@fp 0035                          Sensor_autoCalibration@sensor 007A  
                                              _strlen 1652                                                fputc@c 0073  
                                              fputs@c 0023                                                fputs@i 0024  
                                              fputs@s 0026                               _MTOUCH_Sensor_SampleAll 15F8  
                        Button_DefaultCallback@button 004F                                  ?_Sensor_isCalibrated 0070  
                                     ?_WDT_Initialize 0070                              ?_Sensor_RawSample_Update 0070  
                          __end_of_Sensor_Acquisition 0BAB                                __size_of_RELAY_PROCESS 009D  
                             ?_Button_Baseline_Update 0070                                      __end_of_vfprintf 08DD  
                 Sensor_postAcquisitionProcess@sensor 0079                               __end_of_TMR2_StartTimer 1435  
                  __size_of_Sensor_setCalibratAcqTime 000F              __end_of_MTOUCH_Button_SetPressedCallback 1456  
           __size_of_MTOUCH_Button_SetPressedCallback 0006                    ??_MTOUCH_Button_SetPressedCallback 0073  
                   ?_MTOUCH_Button_SetPressedCallback 0071                      _MTOUCH_Button_SetPressedCallback 1450  
                            __size_of_Sensor_isActive 000E                       MTOUCH_Sensor_RawSample_Get@name 0078  
                 Sensor_getScanGroupIndex@sensorGroup 0074                                  __size_of_EUSART_Read 0027  
                                   _SYSTEM_Initialize 15A8                               __end_of__initialization 0054  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0075                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00BE                            __end_of_Button_Tick_helper 1786  
                       MTOUCH_Sensor_Calibrate@sensor 0076           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024  
                                 ___bmul@multiplicand 0071                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 1682                                          __pidataBANK0 0800  
                                        __pidataBANK1 14CF                                          __pidataBANK2 0801  
         __end_of_MTOUCH_Button_SetNotPressedCallback 1450          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 144A                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 1624                                         __end_of_fputc 09A5  
                                       __end_of_fputs 1738                      __end_of_MTOUCH_Sensor_Initialize 15E2  
                                       __end_of_putch 1445                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 1573                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0D10                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 0AFA                      __end_of_Sensor_Acq_ExecutePacket 0222  
                          ?_Button_State_Initializing 0050                                  Button_Service@button 0058  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 0D9F                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 09A5  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0E31  
                             _Button_State_NotPressed 06F7                         __size_of_MTOUCH_Sensor_Enable 0012  
                                  _Sensor_setInactive 1490                                     _sensor_scan_group 185E  
                                             ??_fputc 0076                             __end_of_SYSTEM_Initialize 15BA  
                                   _lowpowerActivated 0065                                               ??_fputs 0020  
                    MTOUCH_Sensor_isCalibrated@sensor 0076                                ??_Sensor_Sampled_Reset 0071  
                                             ??_putch 0072                                            __pbssBANK0 005C  
                                          __pbssBANK1 00A0                                            __pbssBANK2 0144  
                                          __pbssBANK3 01A0                                            _check_data 0A13  
                                __end_of_EUSART_Write 1488                               _TMR2_LoadPeriodRegister 1445  
                          ??_myButtonReleasedCallback 007C                          Sensor_loadADCSettings@sensor 0079  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 1488  
                         __size_of_EUSART_Receive_ISR 0032                            __end_of_mtouch_button_init 1040  
                                   _last_touch_status 0062           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025  
                              ??_Sensor_setCalibrated 0071                                            __pmaintext 0222  
                                       _RELAY_PROCESS 0F63                                               ?___bmul 0071  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                        MTOUCH_Sensor_wasSampled@sensor 0076  
                                          __pintentry 0004                                __end_of_Button_Service 0B4F  
                                             ?_memcpy 0071                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 16B9  
                         _MTOUCH_Button_InitializeAll 169D                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0071                   __end_of_MTOUCH_Sensor_InitializeAll 1513  
                         _MTOUCH_Sensor_InitializeAll 1505                             ??_MTOUCH_Sensor_SampleAll 0046  
                                             ?_printf 0047                       __end_of_Sensor_RawSample_Update 17D5  
                                ??_Sensor_setInactive 0071                                               ?_strlen 0071  
                   __size_of_MTOUCH_Sensor_wasSampled 000F                             ?_MTOUCH_Sensor_wasSampled 0070  
                                       _eusartRxCount 006C                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 0071                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 07FD                                __end_of_Sensor_Service 0EC6  
                             Sensor_Service@scanGroup 0042                              _MTOUCH_Button_ServiceAll 1531  
                           __end_of_sensor_scan_group 1862                                    __size_of_vfpfcnvrt 00A8  
                       __size_of_EUSART_RxDataHandler 0017                      __size_of_MTOUCH_Service_Mainloop 001D  
                        __end_of_Button_State_Pressed 0C13                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 0073                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 0079                       Sensor_setCalibratAcqTime@sensor 0071  
                                __size_of_MTOUCH_Tick 0003                   Sensor_loadADCSettings@addressOffset 0078  
                __size_of_Sensor_isCalibratingAcqTime 0009                 Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021  
                           ??_MTOUCH_Button_isPressed 0071                                            _count_conf 00BA  
                                   ??_Sensor_isActive 0071                   __size_of_EUSART_DefaultErrorHandler 0003  
                                      ?_RELAY_PROCESS 0070                 __end_of_Sensor_postAcquisitionProcess 0A13  
              __size_of_Sensor_postAcquisitionProcess 0038                         _Sensor_postAcquisitionProcess 09DB  
                             _myButtonPressedCallback 0880                               Sensor_Acquisition@retry 003D  
                                     __size_of___bmul 0011                                           _AD1CON0bits 0711  
                      MTOUCH_Button_Initialize@button 007A                                           _AD2CON0bits 0791  
                                           ?_vfprintf 003F                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 1786  
                                             __ptext2 0A13                                               __ptext3 15A8  
                                             __ptext4 143C                                               __ptext5 14A8  
                                             __ptext6 16D6                                               __ptext7 146E  
                                             __ptext8 14C3                                               __ptext9 1505  
                              __size_of_check_message 0027                                       __size_of_printf 0011  
                         Button_Reading_Update@button 0020                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 15CD                                 _OSCILLATOR_Initialize 146E  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 0051  
                                             _prcData 006A                                       ?_Sensor_Service 0070  
                            ??_PIN_MANAGER_Initialize 0071                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 14E9  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 0058  
                                    _callback_sampled 00C8                             ??_TMR2_LoadPeriodRegister 0071  
                     Sensor_RawSample_Update@adcIndex 0076                            __size_of_SYSTEM_Initialize 0012  
                                             clrloop0 1475                                      _callback_pressed 00C6  
                      MTOUCH_Sensor_Initialize@sensor 0078                                  end_of_initialization 0054  
                                         ?_check_data 0070                               ?_Button_DefaultCallback 004F  
               __end_of_EUSART_SetOverrunErrorHandler 1468                __size_of_EUSART_SetOverrunErrorHandler 0006  
                       _EUSART_SetOverrunErrorHandler 1462                                               memcpy@d 007A  
                                             memcpy@n 0073                                               memcpy@s 0077  
                                             fputc@fp 0075                                               init_ram 147A  
                                             fputs@fp 007B                                               initloop 147B  
                             ?_Sensor_DefaultCallback 0071                         Sensor_Acquisition@sensor_adc1 003E  
                       Sensor_Acquisition@sensor_adc2 003B                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 090D                          ??_MTOUCH_Sensor_isCalibrated 0075  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 06F7  
                 __end_of_MTOUCH_Sensor_RawSample_Get 1682                           _MTOUCH_Sensor_RawSample_Get 166A  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 142F  
                                          ??_vfprintf 0042                                               strlen@a 0074  
                                             strlen@s 0075                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                                   ?_EUSART_is_rx_ready 0070  
                              Sensor_setActive@sensor 0071                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0034                         Button_Deviation_Update@button 0020  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0022                                 __size_of_EUSART_Write 0008  
            MTOUCH_Button_SetPressedCallback@callback 0071                            MTOUCH_Sensor_Enable@sensor 0076  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0023                                   _callback_notPressed 00C4  
                 __size_of_MTOUCH_Sensor_isCalibrated 0016                        __end_of_Button_DefaultCallback 142B  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032  
                                  _sensor_globalFlags 0064                              __end_of_Sensor_isEnabled 1584  
                          Sensor_setCalibrated@sensor 0071                        __end_of_Sensor_DefaultCallback 142C  
                    __end_of_myButtonReleasedCallback 1712                             __end_of_EUSART_Initialize 093E  
                                ??_EUSART_is_rx_ready 0071                                         _check_message 1786  
                            ??_Sensor_autoCalibration 0075                                             _TXSTAbits 019E  
                                       _check_request 0068                                       ??_RELAY_PROCESS 0071  
                           ??_myButtonPressedCallback 0074                      __size_of_Sensor_RawSample_Update 0028  
                                  _Sensor_Acquisition 0B4F                              ??_Sensor_loadADCSettings 0073  
                                       ?_update_state 0070                                         ??_LED_PROCESS 0071  
                                _Button_State_Pressed 0BAB                                        __end_of___bmul 1573  
                  __end_of_EUSART_DefaultErrorHandler 142F                            _EUSART_DefaultErrorHandler 142C  
                                 ?_Sensor_Acquisition 003B                                           vfpfcnvrt@ap 0037  
                                         vfpfcnvrt@fp 003E                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                          _EUSART_Write 1480  
                                 __size_of_check_data 004A                                    _Button_Tick_helper 175F  
                                      __end_of_memcpy 1800                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 1490  
                    TMR2_LoadPeriodRegister@periodVal 0071                                        __end_of_printf 1562  
                         ??_Button_State_Initializing 0051                                        __end_of_strlen 166A  
                                 start_initialization 0018                               _MTOUCH_Service_Mainloop 16B9  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 160E  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 1652  
                                         __end_of_pad 0AFA                                        _TMR2_StopTimer 1435  
                                       ??_EUSART_Read 0071          EUSART_SetRxInterruptHandler@interruptHandler 0071  
                                         putch@txData 0072                                  ??_Sensor_Acquisition 003C  
                                      ?_check_message 0070                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 0050                        Sensor_autoCalibration@adcIndex 0079  
                      ?_EUSART_SetOverrunErrorHandler 0071                      __end_of_MTOUCH_Sensor_wasSampled 1522  
                                ??_Button_Tick_helper 0071                          __end_of_MTOUCH_Sensor_Enable 15A8  
                                         vfprintf@fmt 003F                                          _packet_noise 0060  
                                      ??_update_state 007C                            _EUSART_FramingErrorHandler 00CE  
                                            ??___bmul 0072                                 ?_Button_State_Pressed 0050  
                              _EUSART_SetErrorHandler 1456                            ??_MTOUCH_Button_ServiceAll 0059  
                                         __pdataBANK0 006E                                           __pdataBANK1 00BE  
                                         __pdataBANK2 0120                                        check_message@x 0051  
                                            ??_memcpy 0075                           __end_of_Sensor_isCalibrated 14C3  
                        ??_Button_Baseline_Initialize 0020                                         _sample_period 006E  
                                ??_MTOUCH_Button_Tick 0074                                    _mtouch_button_init 1000  
                          Sensor_Sampled_Reset@sensor 0071                                              ??_printf 004B  
                                            ??_strlen 0073                          ?_Sensor_isCalibratingAcqTime 0070  
                     __end_of_myButtonPressedCallback 08AE                                   __end_of_LED_PROCESS 0F63  
                              __end_of_TMR2_StopTimer 1438                                           __pbssCOMMON 007C  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00D2                           _Sensor_loadADCSettings$1228 0076  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 14F7  
                      MTOUCH_Button_ServiceAll@button 005A                                   Sensor_Service@error 0043  
                          __end_of_EUSART_Receive_ISR 0970                         __size_of_Sensor_Sampled_Reset 0008  
                          __size_of_EUSART_Initialize 0031                               _Button_Deviation_Update 0C89  
                          ?_Sensor_setCalibratAcqTime 0070                      _EUSART_RxDefaultInterruptHandler 00D0  
                                 __end_of_EUSART_Read 175F                             _Button_State_Initializing 079B  
                  __end_of_MTOUCH_Sensor_isCalibrated 15F8                            _MTOUCH_Sensor_isCalibrated 15E2  
                                           __pnvBANK1 00CA                       __size_of_Sensor_autoCalibration 0092  
                   __size_of_Sensor_getScanGroupIndex 002D                                     _Sensor_setSampled 1498  
                           ?_Sensor_getScanGroupIndex 0070                          __end_of_EUSART_RxDataHandler 163B  
                              _PIN_MANAGER_Initialize 16D6                                      ??_Button_Service 0055  
                            ?_MTOUCH_Sensor_Calibrate 0070                                  EUSART_Read@readValue 0072  
                                  ?_Sensor_setSampled 0070                    Button_Reading_Update_Helper@button 007B  
                          ??_MTOUCH_Sensor_Initialize 0077                         __size_of_Sensor_setCalibrated 000E  
                     __size_of_Sensor_loadADCSettings 00B0                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 007C  
                                            _AAD2RES0 079A                                          _eusartRxTail 006D  
                                    ??_Sensor_Service 003F                            ??_Sensor_Acq_ExecutePacket 0020  
                        ??_INTERRUPT_InterruptManager 0071                                   ??_Sensor_setSampled 0071  
                   __size_of_myButtonReleasedCallback 001F                                           _blink_count 0066  
                           ?_myButtonReleasedCallback 004F                             ??_MTOUCH_Service_Mainloop 005B  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                         __size_of_Sensor_setInactive 0008                        Sensor_Acq_ExecutePacket@last_a 0028  
                      Sensor_Acq_ExecutePacket@last_b 002A                                       ?_TMR2_StopTimer 0070  
                       ??_Sensor_isCalibratingAcqTime 0071                                         ??_MTOUCH_Tick 0076  
                                     ??_check_message 004F                                        __size_of_fputc 0035  
                                      __size_of_fputs 0026                                        __size_of_putch 0005  
                                        ??_check_data 0071                                        _eusartRxBuffer 00A8  
                           __end_of_Sensor_setSampled 14A0                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0071                                              _LATBbits 010D  
                                            _LATCbits 010E                                         ?_DATA_PROCESS 0070  
                             _Sensor_RawSample_Update 17AD                     __end_of_Sensor_setCalibratAcqTime 1531  
                                           clear_ram0 1474                                              _PIE1bits 0091  
                                   _eusartRxLastError 00BD                              __size_of_TMR2_StartTimer 0003  
                 __size_of_INTERRUPT_InterruptManager 0012                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0073                Sensor_Acq_ExecutePacket@packet_counter 002C  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0051  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 15CD               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 15BA                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 143C            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 1438                    Sensor_Acq_ExecutePacket@ADxIF_flag 0026  
                                         _LED_PROCESS 0EC6                              _MTOUCH_Sensor_wasSampled 1513  
                                  _mtouch_time_toScan 00BC                                             _vfpfcnvrt 064F  
                            ??_Button_Baseline_Update 0071                                    __end_of_check_data 0A5D  
                             __end_of_Sensor_isActive 1505                                _Sensor_autoCalibration 0D9F  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 004F  
                              _Sensor_loadADCSettings 04F5                                  _MTOUCH_Sensor_Enable 1596  
                                         _EUSART_Read 1738                                  __end_of_update_state 064F  
                                          vfpfcnvrt@c 003D                              Button_Tick_helper@button 0073  
                           ??_Button_Deviation_Update 0071                                 _Button_Reading_Update 14DB  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                      ??_DATA_PROCESS 004F                                     ??_TMR2_Initialize 0071  
                                 __end_of_MTOUCH_Tick 0800                                     _MTOUCH_Initialize 14C3  
                     __end_of_MTOUCH_Sensor_Calibrate 1596                                    ??_Sensor_isEnabled 0071  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0076  
                                           memcpy@tmp 0076                                            vfprintf@ap 0041  
                                          vfprintf@fp 0044                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 0071                    __end_of_Button_Baseline_Initialize 0880  
                          _Button_Baseline_Initialize 0852                                   _EUSART_ErrorHandler 00CA  
                                 ??_MTOUCH_Initialize 007C                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 0036                              ?_Button_State_NotPressed 0050  
                                         check_data@x 0073                                    Button_Service@name 0057  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0071                  Sensor_Scanfrequency_Evaluation@retry 0035  
                                  ??_Sensor_setActive 0071                                  _EUSART_RxDataHandler 1624  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 15CD  
                                            __ptext11 1596                                              __ptext20 0002  
                                            __ptext12 169D                                              __ptext21 07FD  
                                            __ptext13 17D5                                              __ptext30 142B  
                                            __ptext22 160E                                              __ptext14 090D  
                                            __ptext31 0B4F                                              __ptext23 175F  
                                            __ptext15 1468                                              __ptext40 04F5  
                                            __ptext32 09DB                                              __ptext24 15BA  
                                            __ptext16 1462                                              __ptext41 14B9  
                                            __ptext33 1490                                              __ptext25 14A0  
                                            __ptext17 145C                                              __ptext50 1541  
                                            __ptext42 1573                                              __ptext34 1488  
                                            __ptext26 15F8                                              __ptext18 1456  
                                            __ptext51 1531                                              __ptext43 14F7  
                                            __ptext35 0C13                                              __ptext27 0E31  
                                            __ptext19 16B9                                              __ptext60 16F3  
                                            __ptext52 0AFA                                              __ptext44 0D9F  
                                            __ptext36 0058                                              __ptext28 1498  
                                            __ptext61 1682                                              __ptext53 1513  
                                            __ptext45 163B                                              __ptext37 1435  
                                            __ptext29 17AD                                              __ptext70 0C89  
                                            __ptext62 09A5                                              __ptext54 15E2  
                                            __ptext46 14E9                                              __ptext38 1432  
                                            __ptext71 1450                                              __ptext63 1584  
                                            __ptext55 06F7                                              __ptext47 1522  
                                            __ptext39 1445                                              __ptext80 08DD  
                                            __ptext72 144A                                              __ptext64 0D10  
                                            __ptext56 079B                                              __ptext48 14B0  
                                            __ptext81 0AAA                                              __ptext73 142F  
                                            __ptext65 0852                                              __ptext57 0BAB  
                                            __ptext49 0825                                              __ptext90 093E  
                                            __ptext82 1652                                              __ptext74 1738  
                                            __ptext66 14DB                                              __ptext58 0880  
                                            __ptext91 1438                                              __ptext83 1712  
                                            __ptext75 03D1                                              __ptext67 0A5D  
                                            __ptext59 142A                                              __ptext92 1429  
                                            __ptext84 0970                                              __ptext76 05A5  
                                            __ptext68 166A                                              __ptext93 142C  
                                            __ptext85 1440                                              __ptext77 1551  
                                            __ptext69 1562                                              __ptext94 1624  
                                            __ptext86 1480                                              __ptext78 08AE  
                                            __ptext87 0F63                                              __ptext79 064F  
                                            __ptext88 0EC6                             __end_of_MTOUCH_Initialize 14CF  
                           ??_Sensor_RawSample_Update 0075                            __size_of_Sensor_setSampled 0008  
                         __size_of_EUSART_is_rx_ready 0003                                         __size_of_ctoa 0030  
                                       __size_of_main 01AF                       __end_of_MTOUCH_Sensor_SampleAll 160E  
                    Sensor_Scanfrequency_Evaluation@i 003A                               ?_EUSART_SetErrorHandler 0071  
                               __end_of_RELAY_PROCESS 1000         EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                                            int$flags 007E                                              _vfprintf 08AE  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0071  
                  __end_of_INTERRUPT_InterruptManager 0016                            _INTERRUPT_InterruptManager 0004  
                                           printf@fmt 0047                 __end_of_EUSART_SetFramingErrorHandler 1462  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 145C  
                                      RELAY_PROCESS@x 0073                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 0047  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 01A0                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 0120  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                     __end_of_MTOUCH_Button_isPressed 169D                      __end_of_Sensor_getScanGroupIndex 0852  
                                   __CFG_BOREN$NSLEEP 0000                                        __pstringtext10 1827  
                                      __pstringtext11 182C                                        __pstringtext20 1859  
                                      __pstringtext12 1831                                        __pstringtext21 1862  
                                      __pstringtext13 1836                                        __pstringtext22 0000  
                                      __pstringtext14 183B                                        __pstringtext15 1840  
                                      __pstringtext16 1845                                        __pstringtext17 184A  
                                      __pstringtext18 184F                                        __pstringtext19 1854  
                                         _MTOUCH_Tick 07FD                                ?_Button_Reading_Update 0070  
                    Button_Deviation_Update@deviation 0021                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 0079                     __size_of_MTOUCH_Button_Initialize 0036  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 004F  
             __end_of_Sensor_Scanfrequency_Evaluation 0C89              __size_of_Sensor_Scanfrequency_Evaluation 0076  
                   ??_Sensor_Scanfrequency_Evaluation 002F                      ?_Sensor_Scanfrequency_Evaluation 002E  
                     _Sensor_Scanfrequency_Evaluation 0C13                               ?_PIN_MANAGER_Initialize 0070  
                                       _timeout_count 00B8                           ??_Sensor_setCalibratAcqTime 0071  
                      __end_of_EUSART_SetErrorHandler 145C                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 146E  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 1468  
                                       _config_status 0069                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 079B                                              printf@ap 004E  
                                  _EUSART_Receive_ISR 093E         EUSART_SetFramingErrorHandler@interruptHandler 0071  
                        __end_of_Sensor_Sampled_Reset 14A8                                           ??_vfpfcnvrt 0038  
                                    ??_TMR2_StopTimer 0071                       __end_of_TMR2_LoadPeriodRegister 144A  
                         __size_of_MTOUCH_Button_Tick 0016                                         __pstringtext1 1809  
                                       __pstringtext2 185E                                         __pstringtext3 1000  
                                       __pstringtext4 1800                                         __pstringtext5 180E  
                                       __pstringtext6 1813                                         __pstringtext7 1818  
                                       __pstringtext8 181D                                         __pstringtext9 1822  
                                __end_of_DATA_PROCESS 04F5                                   ?_EUSART_Receive_ISR 0070  
                               __size_of_update_state 00AA                         ??_MTOUCH_Button_InitializeAll 007B  
                            ??_Button_DefaultCallback 007C                         ??_MTOUCH_Sensor_InitializeAll 0079  
                Sensor_Acq_ExecutePacket@activeSensor 0027                      __size_of_MTOUCH_Sensor_Calibrate 0012  
                              ??_MTOUCH_Sensor_Enable 0075                     Sensor_isCalibratingAcqTime@sensor 0071  
                        __size_of_Sensor_isCalibrated 000A                              ??_Sensor_DefaultCallback 0072  
                        __end_of_Sensor_setCalibrated 14F7                  __end_of_Button_Reading_Update_Helper 0AAA  
               __size_of_Button_Reading_Update_Helper 004D                          _Button_Reading_Update_Helper 0A5D  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0050                                    EUSART_Write@txData 0071  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 16F3  
                              _Button_Baseline_Update 0D10                           MTOUCH_Button_isPressed@name 0072  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0075  
