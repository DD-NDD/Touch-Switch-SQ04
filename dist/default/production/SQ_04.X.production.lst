

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jul 05 15:54:49 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	cinit,global,class=CODE,merge=1,delta=2
    30                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    33                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    36                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    37                           	psect	inittext,global,class=CODE,delta=2
    38                           	psect	clrtext,global,class=CODE,delta=2
    39                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    40                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    41                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    42                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    43                           	psect	text1,local,class=CODE,merge=1,delta=2
    44                           	psect	text2,local,class=CODE,merge=1,delta=2
    45                           	psect	text3,local,class=CODE,merge=1,delta=2
    46                           	psect	text4,local,class=CODE,merge=1,delta=2
    47                           	psect	text5,local,class=CODE,merge=1,delta=2
    48                           	psect	text6,local,class=CODE,merge=1,delta=2
    49                           	psect	text7,local,class=CODE,merge=1,delta=2
    50                           	psect	text8,local,class=CODE,merge=1,delta=2
    51                           	psect	text9,local,class=CODE,merge=1,delta=2
    52                           	psect	text10,local,class=CODE,merge=1,delta=2
    53                           	psect	text11,local,class=CODE,merge=1,delta=2
    54                           	psect	text12,local,class=CODE,merge=1,delta=2
    55                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text14,local,class=CODE,merge=1,delta=2
    57                           	psect	text15,local,class=CODE,merge=1,delta=2
    58                           	psect	text16,local,class=CODE,merge=1,delta=2
    59                           	psect	text17,local,class=CODE,merge=1,delta=2
    60                           	psect	text18,local,class=CODE,merge=1,delta=2
    61                           	psect	text19,local,class=CODE,merge=1,delta=2
    62                           	psect	text20,local,class=CODE,merge=1,delta=2
    63                           	psect	text21,local,class=CODE,merge=1,delta=2
    64                           	psect	text22,local,class=CODE,merge=1,delta=2
    65                           	psect	text23,local,class=CODE,merge=1,delta=2
    66                           	psect	text24,local,class=CODE,merge=1,delta=2
    67                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text26,local,class=CODE,merge=1,delta=2
    69                           	psect	text27,local,class=CODE,merge=1,delta=2
    70                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text29,local,class=CODE,merge=1,delta=2
    72                           	psect	text30,local,class=CODE,merge=1,delta=2
    73                           	psect	text31,local,class=CODE,merge=1,delta=2
    74                           	psect	text32,local,class=CODE,merge=1,delta=2
    75                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text35,local,class=CODE,merge=1,delta=2
    78                           	psect	text36,local,class=CODE,merge=1,delta=2
    79                           	psect	text37,local,class=CODE,merge=1,delta=2
    80                           	psect	text38,local,class=CODE,merge=1,delta=2
    81                           	psect	text39,local,class=CODE,merge=1,delta=2
    82                           	psect	text40,local,class=CODE,merge=1,delta=2
    83                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text42,local,class=CODE,merge=1,delta=2
    85                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text44,local,class=CODE,merge=1,delta=2
    87                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text49,local,class=CODE,merge=1,delta=2
    92                           	psect	text50,local,class=CODE,merge=1,delta=2
    93                           	psect	text51,local,class=CODE,merge=1,delta=2
    94                           	psect	text52,local,class=CODE,merge=1,delta=2
    95                           	psect	text53,local,class=CODE,merge=1,delta=2
    96                           	psect	text54,local,class=CODE,merge=1,delta=2
    97                           	psect	text55,local,class=CODE,merge=1,delta=2
    98                           	psect	text56,local,class=CODE,merge=1,delta=2
    99                           	psect	text57,local,class=CODE,merge=1,delta=2
   100                           	psect	text58,local,class=CODE,merge=1,delta=2
   101                           	psect	text59,local,class=CODE,merge=1,delta=2
   102                           	psect	text60,local,class=CODE,merge=1,delta=2
   103                           	psect	text61,local,class=CODE,merge=1,delta=2
   104                           	psect	text62,local,class=CODE,merge=1,delta=2
   105                           	psect	text63,local,class=CODE,merge=1,delta=2
   106                           	psect	text64,local,class=CODE,merge=1,delta=2
   107                           	psect	text65,local,class=CODE,merge=1,delta=2
   108                           	psect	text66,local,class=CODE,merge=1,delta=2
   109                           	psect	text67,local,class=CODE,merge=1,delta=2
   110                           	psect	text68,local,class=CODE,merge=1,delta=2,group=1
   111                           	psect	text69,local,class=CODE,merge=1,delta=2
   112                           	psect	text70,local,class=CODE,merge=1,delta=2
   113                           	psect	text71,local,class=CODE,merge=1,delta=2
   114                           	psect	text72,local,class=CODE,merge=1,delta=2
   115                           	psect	text73,local,class=CODE,merge=1,delta=2
   116                           	psect	text74,local,class=CODE,merge=1,delta=2
   117                           	psect	text75,local,class=CODE,merge=1,delta=2
   118                           	psect	text76,local,class=CODE,merge=1,delta=2
   119                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
   120                           	psect	text78,local,class=CODE,merge=1,delta=2
   121                           	psect	text79,local,class=CODE,merge=1,delta=2
   122                           	psect	text80,local,class=CODE,merge=1,delta=2
   123                           	psect	text81,local,class=CODE,merge=1,delta=2
   124                           	psect	text82,local,class=CODE,merge=1,delta=2,group=2
   125                           	psect	text83,local,class=CODE,merge=1,delta=2,group=2
   126                           	psect	text84,local,class=CODE,merge=1,delta=2,group=2
   127                           	psect	text85,local,class=CODE,merge=1,delta=2
   128                           	psect	text86,local,class=CODE,merge=1,delta=2
   129                           	psect	text87,local,class=CODE,merge=1,delta=2
   130                           	psect	text88,local,class=CODE,merge=1,delta=2
   131                           	psect	intentry,global,class=CODE,delta=2
   132                           	psect	text90,local,class=CODE,merge=1,delta=2
   133                           	psect	text91,local,class=CODE,merge=1,delta=2
   134                           	psect	text92,local,class=CODE,merge=1,delta=2
   135                           	psect	text93,local,class=CODE,merge=1,delta=2
   136                           	psect	text94,local,class=CODE,merge=1,delta=2
   137                           	dabs	1,0x7E,2
   138  0000                     
   139                           ; Version 2.05
   140                           ; Generated 20/12/2018 GMT
   141                           ; 
   142                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   143                           ; All rights reserved.
   144                           ; 
   145                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   146                           ; 
   147                           ; Redistribution and use in source and binary forms, with or without modification, are
   148                           ; permitted provided that the following conditions are met:
   149                           ; 
   150                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   151                           ;        conditions and the following disclaimer.
   152                           ; 
   153                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   154                           ;        of conditions and the following disclaimer in the documentation and/or other
   155                           ;        materials provided with the distribution.
   156                           ; 
   157                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   158                           ;        software without specific prior written permission.
   159                           ; 
   160                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   161                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   162                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   163                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   164                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   165                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   166                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   167                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   168                           ; 
   169                           ; 
   170                           ; Code-generator required, PIC16LF1559 Definitions
   171                           ; 
   172                           ; SFR Addresses
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  0007                     	;# 
   181  0008                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  0011                     	;# 
   189  0012                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001C                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0095                     	;# 
   205  0096                     	;# 
   206  0097                     	;# 
   207  0099                     	;# 
   208  009A                     	;# 
   209  009B                     	;# 
   210  009B                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  009F                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  0116                     	;# 
   219  0117                     	;# 
   220  011D                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  018E                     	;# 
   224  0191                     	;# 
   225  0191                     	;# 
   226  0192                     	;# 
   227  0193                     	;# 
   228  0193                     	;# 
   229  0194                     	;# 
   230  0195                     	;# 
   231  0196                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020C                     	;# 
   241  020D                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0391                     	;# 
   258  0392                     	;# 
   259  0393                     	;# 
   260  0394                     	;# 
   261  0395                     	;# 
   262  0396                     	;# 
   263  0611                     	;# 
   264  0612                     	;# 
   265  0613                     	;# 
   266  0613                     	;# 
   267  0614                     	;# 
   268  0615                     	;# 
   269  0616                     	;# 
   270  0616                     	;# 
   271  0711                     	;# 
   272  0711                     	;# 
   273  0711                     	;# 
   274  0712                     	;# 
   275  0712                     	;# 
   276  0713                     	;# 
   277  0713                     	;# 
   278  0713                     	;# 
   279  0714                     	;# 
   280  0714                     	;# 
   281  0714                     	;# 
   282  0715                     	;# 
   283  0715                     	;# 
   284  0716                     	;# 
   285  0716                     	;# 
   286  0716                     	;# 
   287  0716                     	;# 
   288  0717                     	;# 
   289  0717                     	;# 
   290  0717                     	;# 
   291  0717                     	;# 
   292  0718                     	;# 
   293  0718                     	;# 
   294  0718                     	;# 
   295  0719                     	;# 
   296  0719                     	;# 
   297  0719                     	;# 
   298  0719                     	;# 
   299  071A                     	;# 
   300  071A                     	;# 
   301  071A                     	;# 
   302  071A                     	;# 
   303  071A                     	;# 
   304  071B                     	;# 
   305  071B                     	;# 
   306  071C                     	;# 
   307  071C                     	;# 
   308  071C                     	;# 
   309  071C                     	;# 
   310  071C                     	;# 
   311  071D                     	;# 
   312  071D                     	;# 
   313  071E                     	;# 
   314  071E                     	;# 
   315  0791                     	;# 
   316  0791                     	;# 
   317  0793                     	;# 
   318  0793                     	;# 
   319  0794                     	;# 
   320  0794                     	;# 
   321  0796                     	;# 
   322  0796                     	;# 
   323  0796                     	;# 
   324  0797                     	;# 
   325  0797                     	;# 
   326  0797                     	;# 
   327  0798                     	;# 
   328  0798                     	;# 
   329  0799                     	;# 
   330  0799                     	;# 
   331  0799                     	;# 
   332  079A                     	;# 
   333  079A                     	;# 
   334  079A                     	;# 
   335  079B                     	;# 
   336  079C                     	;# 
   337  079C                     	;# 
   338  079C                     	;# 
   339  079D                     	;# 
   340  079E                     	;# 
   341  079E                     	;# 
   342  0F8C                     	;# 
   343  0F8D                     	;# 
   344  0F91                     	;# 
   345  0F96                     	;# 
   346  0F97                     	;# 
   347  0F9C                     	;# 
   348  0F9D                     	;# 
   349  0F9E                     	;# 
   350  0FE3                     	;# 
   351  0FE4                     	;# 
   352  0FE5                     	;# 
   353  0FE6                     	;# 
   354  0FE7                     	;# 
   355  0FE8                     	;# 
   356  0FE9                     	;# 
   357  0FEA                     	;# 
   358  0FEB                     	;# 
   359  0FED                     	;# 
   360  0FEE                     	;# 
   361  0FEF                     	;# 
   362  0000                     	;# 
   363  0001                     	;# 
   364  0002                     	;# 
   365  0003                     	;# 
   366  0004                     	;# 
   367  0005                     	;# 
   368  0006                     	;# 
   369  0007                     	;# 
   370  0008                     	;# 
   371  0009                     	;# 
   372  000A                     	;# 
   373  000B                     	;# 
   374  000C                     	;# 
   375  000D                     	;# 
   376  000E                     	;# 
   377  0011                     	;# 
   378  0012                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0016                     	;# 
   382  0017                     	;# 
   383  0018                     	;# 
   384  0019                     	;# 
   385  001A                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  008C                     	;# 
   389  008D                     	;# 
   390  008E                     	;# 
   391  0091                     	;# 
   392  0092                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0099                     	;# 
   397  009A                     	;# 
   398  009B                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  009F                     	;# 
   404  010C                     	;# 
   405  010D                     	;# 
   406  010E                     	;# 
   407  0116                     	;# 
   408  0117                     	;# 
   409  011D                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  018E                     	;# 
   413  0191                     	;# 
   414  0191                     	;# 
   415  0192                     	;# 
   416  0193                     	;# 
   417  0193                     	;# 
   418  0194                     	;# 
   419  0195                     	;# 
   420  0196                     	;# 
   421  0199                     	;# 
   422  019A                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019D                     	;# 
   427  019E                     	;# 
   428  019F                     	;# 
   429  020C                     	;# 
   430  020D                     	;# 
   431  0211                     	;# 
   432  0211                     	;# 
   433  0212                     	;# 
   434  0212                     	;# 
   435  0213                     	;# 
   436  0213                     	;# 
   437  0214                     	;# 
   438  0214                     	;# 
   439  0215                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0216                     	;# 
   443  0216                     	;# 
   444  0217                     	;# 
   445  0217                     	;# 
   446  0391                     	;# 
   447  0392                     	;# 
   448  0393                     	;# 
   449  0394                     	;# 
   450  0395                     	;# 
   451  0396                     	;# 
   452  0611                     	;# 
   453  0612                     	;# 
   454  0613                     	;# 
   455  0613                     	;# 
   456  0614                     	;# 
   457  0615                     	;# 
   458  0616                     	;# 
   459  0616                     	;# 
   460  0711                     	;# 
   461  0711                     	;# 
   462  0711                     	;# 
   463  0712                     	;# 
   464  0712                     	;# 
   465  0713                     	;# 
   466  0713                     	;# 
   467  0713                     	;# 
   468  0714                     	;# 
   469  0714                     	;# 
   470  0714                     	;# 
   471  0715                     	;# 
   472  0715                     	;# 
   473  0716                     	;# 
   474  0716                     	;# 
   475  0716                     	;# 
   476  0716                     	;# 
   477  0717                     	;# 
   478  0717                     	;# 
   479  0717                     	;# 
   480  0717                     	;# 
   481  0718                     	;# 
   482  0718                     	;# 
   483  0718                     	;# 
   484  0719                     	;# 
   485  0719                     	;# 
   486  0719                     	;# 
   487  0719                     	;# 
   488  071A                     	;# 
   489  071A                     	;# 
   490  071A                     	;# 
   491  071A                     	;# 
   492  071A                     	;# 
   493  071B                     	;# 
   494  071B                     	;# 
   495  071C                     	;# 
   496  071C                     	;# 
   497  071C                     	;# 
   498  071C                     	;# 
   499  071C                     	;# 
   500  071D                     	;# 
   501  071D                     	;# 
   502  071E                     	;# 
   503  071E                     	;# 
   504  0791                     	;# 
   505  0791                     	;# 
   506  0793                     	;# 
   507  0793                     	;# 
   508  0794                     	;# 
   509  0794                     	;# 
   510  0796                     	;# 
   511  0796                     	;# 
   512  0796                     	;# 
   513  0797                     	;# 
   514  0797                     	;# 
   515  0797                     	;# 
   516  0798                     	;# 
   517  0798                     	;# 
   518  0799                     	;# 
   519  0799                     	;# 
   520  0799                     	;# 
   521  079A                     	;# 
   522  079A                     	;# 
   523  079A                     	;# 
   524  079B                     	;# 
   525  079C                     	;# 
   526  079C                     	;# 
   527  079C                     	;# 
   528  079D                     	;# 
   529  079E                     	;# 
   530  079E                     	;# 
   531  0F8C                     	;# 
   532  0F8D                     	;# 
   533  0F91                     	;# 
   534  0F96                     	;# 
   535  0F97                     	;# 
   536  0F9C                     	;# 
   537  0F9D                     	;# 
   538  0F9E                     	;# 
   539  0FE3                     	;# 
   540  0FE4                     	;# 
   541  0FE5                     	;# 
   542  0FE6                     	;# 
   543  0FE7                     	;# 
   544  0FE8                     	;# 
   545  0FE9                     	;# 
   546  0FEA                     	;# 
   547  0FEB                     	;# 
   548  0FED                     	;# 
   549  0FEE                     	;# 
   550  0FEF                     	;# 
   551  0000                     	;# 
   552  0001                     	;# 
   553  0002                     	;# 
   554  0003                     	;# 
   555  0004                     	;# 
   556  0005                     	;# 
   557  0006                     	;# 
   558  0007                     	;# 
   559  0008                     	;# 
   560  0009                     	;# 
   561  000A                     	;# 
   562  000B                     	;# 
   563  000C                     	;# 
   564  000D                     	;# 
   565  000E                     	;# 
   566  0011                     	;# 
   567  0012                     	;# 
   568  0015                     	;# 
   569  0016                     	;# 
   570  0016                     	;# 
   571  0017                     	;# 
   572  0018                     	;# 
   573  0019                     	;# 
   574  001A                     	;# 
   575  001B                     	;# 
   576  001C                     	;# 
   577  008C                     	;# 
   578  008D                     	;# 
   579  008E                     	;# 
   580  0091                     	;# 
   581  0092                     	;# 
   582  0095                     	;# 
   583  0096                     	;# 
   584  0097                     	;# 
   585  0099                     	;# 
   586  009A                     	;# 
   587  009B                     	;# 
   588  009B                     	;# 
   589  009C                     	;# 
   590  009D                     	;# 
   591  009E                     	;# 
   592  009F                     	;# 
   593  010C                     	;# 
   594  010D                     	;# 
   595  010E                     	;# 
   596  0116                     	;# 
   597  0117                     	;# 
   598  011D                     	;# 
   599  018C                     	;# 
   600  018D                     	;# 
   601  018E                     	;# 
   602  0191                     	;# 
   603  0191                     	;# 
   604  0192                     	;# 
   605  0193                     	;# 
   606  0193                     	;# 
   607  0194                     	;# 
   608  0195                     	;# 
   609  0196                     	;# 
   610  0199                     	;# 
   611  019A                     	;# 
   612  019B                     	;# 
   613  019B                     	;# 
   614  019C                     	;# 
   615  019D                     	;# 
   616  019E                     	;# 
   617  019F                     	;# 
   618  020C                     	;# 
   619  020D                     	;# 
   620  0211                     	;# 
   621  0211                     	;# 
   622  0212                     	;# 
   623  0212                     	;# 
   624  0213                     	;# 
   625  0213                     	;# 
   626  0214                     	;# 
   627  0214                     	;# 
   628  0215                     	;# 
   629  0215                     	;# 
   630  0215                     	;# 
   631  0216                     	;# 
   632  0216                     	;# 
   633  0217                     	;# 
   634  0217                     	;# 
   635  0391                     	;# 
   636  0392                     	;# 
   637  0393                     	;# 
   638  0394                     	;# 
   639  0395                     	;# 
   640  0396                     	;# 
   641  0611                     	;# 
   642  0612                     	;# 
   643  0613                     	;# 
   644  0613                     	;# 
   645  0614                     	;# 
   646  0615                     	;# 
   647  0616                     	;# 
   648  0616                     	;# 
   649  0711                     	;# 
   650  0711                     	;# 
   651  0711                     	;# 
   652  0712                     	;# 
   653  0712                     	;# 
   654  0713                     	;# 
   655  0713                     	;# 
   656  0713                     	;# 
   657  0714                     	;# 
   658  0714                     	;# 
   659  0714                     	;# 
   660  0715                     	;# 
   661  0715                     	;# 
   662  0716                     	;# 
   663  0716                     	;# 
   664  0716                     	;# 
   665  0716                     	;# 
   666  0717                     	;# 
   667  0717                     	;# 
   668  0717                     	;# 
   669  0717                     	;# 
   670  0718                     	;# 
   671  0718                     	;# 
   672  0718                     	;# 
   673  0719                     	;# 
   674  0719                     	;# 
   675  0719                     	;# 
   676  0719                     	;# 
   677  071A                     	;# 
   678  071A                     	;# 
   679  071A                     	;# 
   680  071A                     	;# 
   681  071A                     	;# 
   682  071B                     	;# 
   683  071B                     	;# 
   684  071C                     	;# 
   685  071C                     	;# 
   686  071C                     	;# 
   687  071C                     	;# 
   688  071C                     	;# 
   689  071D                     	;# 
   690  071D                     	;# 
   691  071E                     	;# 
   692  071E                     	;# 
   693  0791                     	;# 
   694  0791                     	;# 
   695  0793                     	;# 
   696  0793                     	;# 
   697  0794                     	;# 
   698  0794                     	;# 
   699  0796                     	;# 
   700  0796                     	;# 
   701  0796                     	;# 
   702  0797                     	;# 
   703  0797                     	;# 
   704  0797                     	;# 
   705  0798                     	;# 
   706  0798                     	;# 
   707  0799                     	;# 
   708  0799                     	;# 
   709  0799                     	;# 
   710  079A                     	;# 
   711  079A                     	;# 
   712  079A                     	;# 
   713  079B                     	;# 
   714  079C                     	;# 
   715  079C                     	;# 
   716  079C                     	;# 
   717  079D                     	;# 
   718  079E                     	;# 
   719  079E                     	;# 
   720  0F8C                     	;# 
   721  0F8D                     	;# 
   722  0F91                     	;# 
   723  0F96                     	;# 
   724  0F97                     	;# 
   725  0F9C                     	;# 
   726  0F9D                     	;# 
   727  0F9E                     	;# 
   728  0FE3                     	;# 
   729  0FE4                     	;# 
   730  0FE5                     	;# 
   731  0FE6                     	;# 
   732  0FE7                     	;# 
   733  0FE8                     	;# 
   734  0FE9                     	;# 
   735  0FEA                     	;# 
   736  0FEB                     	;# 
   737  0FED                     	;# 
   738  0FEE                     	;# 
   739  0FEF                     	;# 
   740  0000                     	;# 
   741  0001                     	;# 
   742  0002                     	;# 
   743  0003                     	;# 
   744  0004                     	;# 
   745  0005                     	;# 
   746  0006                     	;# 
   747  0007                     	;# 
   748  0008                     	;# 
   749  0009                     	;# 
   750  000A                     	;# 
   751  000B                     	;# 
   752  000C                     	;# 
   753  000D                     	;# 
   754  000E                     	;# 
   755  0011                     	;# 
   756  0012                     	;# 
   757  0015                     	;# 
   758  0016                     	;# 
   759  0016                     	;# 
   760  0017                     	;# 
   761  0018                     	;# 
   762  0019                     	;# 
   763  001A                     	;# 
   764  001B                     	;# 
   765  001C                     	;# 
   766  008C                     	;# 
   767  008D                     	;# 
   768  008E                     	;# 
   769  0091                     	;# 
   770  0092                     	;# 
   771  0095                     	;# 
   772  0096                     	;# 
   773  0097                     	;# 
   774  0099                     	;# 
   775  009A                     	;# 
   776  009B                     	;# 
   777  009B                     	;# 
   778  009C                     	;# 
   779  009D                     	;# 
   780  009E                     	;# 
   781  009F                     	;# 
   782  010C                     	;# 
   783  010D                     	;# 
   784  010E                     	;# 
   785  0116                     	;# 
   786  0117                     	;# 
   787  011D                     	;# 
   788  018C                     	;# 
   789  018D                     	;# 
   790  018E                     	;# 
   791  0191                     	;# 
   792  0191                     	;# 
   793  0192                     	;# 
   794  0193                     	;# 
   795  0193                     	;# 
   796  0194                     	;# 
   797  0195                     	;# 
   798  0196                     	;# 
   799  0199                     	;# 
   800  019A                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019C                     	;# 
   804  019D                     	;# 
   805  019E                     	;# 
   806  019F                     	;# 
   807  020C                     	;# 
   808  020D                     	;# 
   809  0211                     	;# 
   810  0211                     	;# 
   811  0212                     	;# 
   812  0212                     	;# 
   813  0213                     	;# 
   814  0213                     	;# 
   815  0214                     	;# 
   816  0214                     	;# 
   817  0215                     	;# 
   818  0215                     	;# 
   819  0215                     	;# 
   820  0216                     	;# 
   821  0216                     	;# 
   822  0217                     	;# 
   823  0217                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  0393                     	;# 
   827  0394                     	;# 
   828  0395                     	;# 
   829  0396                     	;# 
   830  0611                     	;# 
   831  0612                     	;# 
   832  0613                     	;# 
   833  0613                     	;# 
   834  0614                     	;# 
   835  0615                     	;# 
   836  0616                     	;# 
   837  0616                     	;# 
   838  0711                     	;# 
   839  0711                     	;# 
   840  0711                     	;# 
   841  0712                     	;# 
   842  0712                     	;# 
   843  0713                     	;# 
   844  0713                     	;# 
   845  0713                     	;# 
   846  0714                     	;# 
   847  0714                     	;# 
   848  0714                     	;# 
   849  0715                     	;# 
   850  0715                     	;# 
   851  0716                     	;# 
   852  0716                     	;# 
   853  0716                     	;# 
   854  0716                     	;# 
   855  0717                     	;# 
   856  0717                     	;# 
   857  0717                     	;# 
   858  0717                     	;# 
   859  0718                     	;# 
   860  0718                     	;# 
   861  0718                     	;# 
   862  0719                     	;# 
   863  0719                     	;# 
   864  0719                     	;# 
   865  0719                     	;# 
   866  071A                     	;# 
   867  071A                     	;# 
   868  071A                     	;# 
   869  071A                     	;# 
   870  071A                     	;# 
   871  071B                     	;# 
   872  071B                     	;# 
   873  071C                     	;# 
   874  071C                     	;# 
   875  071C                     	;# 
   876  071C                     	;# 
   877  071C                     	;# 
   878  071D                     	;# 
   879  071D                     	;# 
   880  071E                     	;# 
   881  071E                     	;# 
   882  0791                     	;# 
   883  0791                     	;# 
   884  0793                     	;# 
   885  0793                     	;# 
   886  0794                     	;# 
   887  0794                     	;# 
   888  0796                     	;# 
   889  0796                     	;# 
   890  0796                     	;# 
   891  0797                     	;# 
   892  0797                     	;# 
   893  0797                     	;# 
   894  0798                     	;# 
   895  0798                     	;# 
   896  0799                     	;# 
   897  0799                     	;# 
   898  0799                     	;# 
   899  079A                     	;# 
   900  079A                     	;# 
   901  079A                     	;# 
   902  079B                     	;# 
   903  079C                     	;# 
   904  079C                     	;# 
   905  079C                     	;# 
   906  079D                     	;# 
   907  079E                     	;# 
   908  079E                     	;# 
   909  0F8C                     	;# 
   910  0F8D                     	;# 
   911  0F91                     	;# 
   912  0F96                     	;# 
   913  0F97                     	;# 
   914  0F9C                     	;# 
   915  0F9D                     	;# 
   916  0F9E                     	;# 
   917  0FE3                     	;# 
   918  0FE4                     	;# 
   919  0FE5                     	;# 
   920  0FE6                     	;# 
   921  0FE7                     	;# 
   922  0FE8                     	;# 
   923  0FE9                     	;# 
   924  0FEA                     	;# 
   925  0FEB                     	;# 
   926  0FED                     	;# 
   927  0FEE                     	;# 
   928  0FEF                     	;# 
   929  0000                     	;# 
   930  0001                     	;# 
   931  0002                     	;# 
   932  0003                     	;# 
   933  0004                     	;# 
   934  0005                     	;# 
   935  0006                     	;# 
   936  0007                     	;# 
   937  0008                     	;# 
   938  0009                     	;# 
   939  000A                     	;# 
   940  000B                     	;# 
   941  000C                     	;# 
   942  000D                     	;# 
   943  000E                     	;# 
   944  0011                     	;# 
   945  0012                     	;# 
   946  0015                     	;# 
   947  0016                     	;# 
   948  0016                     	;# 
   949  0017                     	;# 
   950  0018                     	;# 
   951  0019                     	;# 
   952  001A                     	;# 
   953  001B                     	;# 
   954  001C                     	;# 
   955  008C                     	;# 
   956  008D                     	;# 
   957  008E                     	;# 
   958  0091                     	;# 
   959  0092                     	;# 
   960  0095                     	;# 
   961  0096                     	;# 
   962  0097                     	;# 
   963  0099                     	;# 
   964  009A                     	;# 
   965  009B                     	;# 
   966  009B                     	;# 
   967  009C                     	;# 
   968  009D                     	;# 
   969  009E                     	;# 
   970  009F                     	;# 
   971  010C                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  0116                     	;# 
   975  0117                     	;# 
   976  011D                     	;# 
   977  018C                     	;# 
   978  018D                     	;# 
   979  018E                     	;# 
   980  0191                     	;# 
   981  0191                     	;# 
   982  0192                     	;# 
   983  0193                     	;# 
   984  0193                     	;# 
   985  0194                     	;# 
   986  0195                     	;# 
   987  0196                     	;# 
   988  0199                     	;# 
   989  019A                     	;# 
   990  019B                     	;# 
   991  019B                     	;# 
   992  019C                     	;# 
   993  019D                     	;# 
   994  019E                     	;# 
   995  019F                     	;# 
   996  020C                     	;# 
   997  020D                     	;# 
   998  0211                     	;# 
   999  0211                     	;# 
  1000  0212                     	;# 
  1001  0212                     	;# 
  1002  0213                     	;# 
  1003  0213                     	;# 
  1004  0214                     	;# 
  1005  0214                     	;# 
  1006  0215                     	;# 
  1007  0215                     	;# 
  1008  0215                     	;# 
  1009  0216                     	;# 
  1010  0216                     	;# 
  1011  0217                     	;# 
  1012  0217                     	;# 
  1013  0391                     	;# 
  1014  0392                     	;# 
  1015  0393                     	;# 
  1016  0394                     	;# 
  1017  0395                     	;# 
  1018  0396                     	;# 
  1019  0611                     	;# 
  1020  0612                     	;# 
  1021  0613                     	;# 
  1022  0613                     	;# 
  1023  0614                     	;# 
  1024  0615                     	;# 
  1025  0616                     	;# 
  1026  0616                     	;# 
  1027  0711                     	;# 
  1028  0711                     	;# 
  1029  0711                     	;# 
  1030  0712                     	;# 
  1031  0712                     	;# 
  1032  0713                     	;# 
  1033  0713                     	;# 
  1034  0713                     	;# 
  1035  0714                     	;# 
  1036  0714                     	;# 
  1037  0714                     	;# 
  1038  0715                     	;# 
  1039  0715                     	;# 
  1040  0716                     	;# 
  1041  0716                     	;# 
  1042  0716                     	;# 
  1043  0716                     	;# 
  1044  0717                     	;# 
  1045  0717                     	;# 
  1046  0717                     	;# 
  1047  0717                     	;# 
  1048  0718                     	;# 
  1049  0718                     	;# 
  1050  0718                     	;# 
  1051  0719                     	;# 
  1052  0719                     	;# 
  1053  0719                     	;# 
  1054  0719                     	;# 
  1055  071A                     	;# 
  1056  071A                     	;# 
  1057  071A                     	;# 
  1058  071A                     	;# 
  1059  071A                     	;# 
  1060  071B                     	;# 
  1061  071B                     	;# 
  1062  071C                     	;# 
  1063  071C                     	;# 
  1064  071C                     	;# 
  1065  071C                     	;# 
  1066  071C                     	;# 
  1067  071D                     	;# 
  1068  071D                     	;# 
  1069  071E                     	;# 
  1070  071E                     	;# 
  1071  0791                     	;# 
  1072  0791                     	;# 
  1073  0793                     	;# 
  1074  0793                     	;# 
  1075  0794                     	;# 
  1076  0794                     	;# 
  1077  0796                     	;# 
  1078  0796                     	;# 
  1079  0796                     	;# 
  1080  0797                     	;# 
  1081  0797                     	;# 
  1082  0797                     	;# 
  1083  0798                     	;# 
  1084  0798                     	;# 
  1085  0799                     	;# 
  1086  0799                     	;# 
  1087  0799                     	;# 
  1088  079A                     	;# 
  1089  079A                     	;# 
  1090  079A                     	;# 
  1091  079B                     	;# 
  1092  079C                     	;# 
  1093  079C                     	;# 
  1094  079C                     	;# 
  1095  079D                     	;# 
  1096  079E                     	;# 
  1097  079E                     	;# 
  1098  0F8C                     	;# 
  1099  0F8D                     	;# 
  1100  0F91                     	;# 
  1101  0F96                     	;# 
  1102  0F97                     	;# 
  1103  0F9C                     	;# 
  1104  0F9D                     	;# 
  1105  0F9E                     	;# 
  1106  0FE3                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000D                     	;# 
  1132  000E                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  008C                     	;# 
  1145  008D                     	;# 
  1146  008E                     	;# 
  1147  0091                     	;# 
  1148  0092                     	;# 
  1149  0095                     	;# 
  1150  0096                     	;# 
  1151  0097                     	;# 
  1152  0099                     	;# 
  1153  009A                     	;# 
  1154  009B                     	;# 
  1155  009B                     	;# 
  1156  009C                     	;# 
  1157  009D                     	;# 
  1158  009E                     	;# 
  1159  009F                     	;# 
  1160  010C                     	;# 
  1161  010D                     	;# 
  1162  010E                     	;# 
  1163  0116                     	;# 
  1164  0117                     	;# 
  1165  011D                     	;# 
  1166  018C                     	;# 
  1167  018D                     	;# 
  1168  018E                     	;# 
  1169  0191                     	;# 
  1170  0191                     	;# 
  1171  0192                     	;# 
  1172  0193                     	;# 
  1173  0193                     	;# 
  1174  0194                     	;# 
  1175  0195                     	;# 
  1176  0196                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019C                     	;# 
  1182  019D                     	;# 
  1183  019E                     	;# 
  1184  019F                     	;# 
  1185  020C                     	;# 
  1186  020D                     	;# 
  1187  0211                     	;# 
  1188  0211                     	;# 
  1189  0212                     	;# 
  1190  0212                     	;# 
  1191  0213                     	;# 
  1192  0213                     	;# 
  1193  0214                     	;# 
  1194  0214                     	;# 
  1195  0215                     	;# 
  1196  0215                     	;# 
  1197  0215                     	;# 
  1198  0216                     	;# 
  1199  0216                     	;# 
  1200  0217                     	;# 
  1201  0217                     	;# 
  1202  0391                     	;# 
  1203  0392                     	;# 
  1204  0393                     	;# 
  1205  0394                     	;# 
  1206  0395                     	;# 
  1207  0396                     	;# 
  1208  0611                     	;# 
  1209  0612                     	;# 
  1210  0613                     	;# 
  1211  0613                     	;# 
  1212  0614                     	;# 
  1213  0615                     	;# 
  1214  0616                     	;# 
  1215  0616                     	;# 
  1216  0711                     	;# 
  1217  0711                     	;# 
  1218  0711                     	;# 
  1219  0712                     	;# 
  1220  0712                     	;# 
  1221  0713                     	;# 
  1222  0713                     	;# 
  1223  0713                     	;# 
  1224  0714                     	;# 
  1225  0714                     	;# 
  1226  0714                     	;# 
  1227  0715                     	;# 
  1228  0715                     	;# 
  1229  0716                     	;# 
  1230  0716                     	;# 
  1231  0716                     	;# 
  1232  0716                     	;# 
  1233  0717                     	;# 
  1234  0717                     	;# 
  1235  0717                     	;# 
  1236  0717                     	;# 
  1237  0718                     	;# 
  1238  0718                     	;# 
  1239  0718                     	;# 
  1240  0719                     	;# 
  1241  0719                     	;# 
  1242  0719                     	;# 
  1243  0719                     	;# 
  1244  071A                     	;# 
  1245  071A                     	;# 
  1246  071A                     	;# 
  1247  071A                     	;# 
  1248  071A                     	;# 
  1249  071B                     	;# 
  1250  071B                     	;# 
  1251  071C                     	;# 
  1252  071C                     	;# 
  1253  071C                     	;# 
  1254  071C                     	;# 
  1255  071C                     	;# 
  1256  071D                     	;# 
  1257  071D                     	;# 
  1258  071E                     	;# 
  1259  071E                     	;# 
  1260  0791                     	;# 
  1261  0791                     	;# 
  1262  0793                     	;# 
  1263  0793                     	;# 
  1264  0794                     	;# 
  1265  0794                     	;# 
  1266  0796                     	;# 
  1267  0796                     	;# 
  1268  0796                     	;# 
  1269  0797                     	;# 
  1270  0797                     	;# 
  1271  0797                     	;# 
  1272  0798                     	;# 
  1273  0798                     	;# 
  1274  0799                     	;# 
  1275  0799                     	;# 
  1276  0799                     	;# 
  1277  079A                     	;# 
  1278  079A                     	;# 
  1279  079A                     	;# 
  1280  079B                     	;# 
  1281  079C                     	;# 
  1282  079C                     	;# 
  1283  079C                     	;# 
  1284  079D                     	;# 
  1285  079E                     	;# 
  1286  079E                     	;# 
  1287  0F8C                     	;# 
  1288  0F8D                     	;# 
  1289  0F91                     	;# 
  1290  0F96                     	;# 
  1291  0F97                     	;# 
  1292  0F9C                     	;# 
  1293  0F9D                     	;# 
  1294  0F9E                     	;# 
  1295  0FE3                     	;# 
  1296  0FE4                     	;# 
  1297  0FE5                     	;# 
  1298  0FE6                     	;# 
  1299  0FE7                     	;# 
  1300  0FE8                     	;# 
  1301  0FE9                     	;# 
  1302  0FEA                     	;# 
  1303  0FEB                     	;# 
  1304  0FED                     	;# 
  1305  0FEE                     	;# 
  1306  0FEF                     	;# 
  1307  0000                     	;# 
  1308  0001                     	;# 
  1309  0002                     	;# 
  1310  0003                     	;# 
  1311  0004                     	;# 
  1312  0005                     	;# 
  1313  0006                     	;# 
  1314  0007                     	;# 
  1315  0008                     	;# 
  1316  0009                     	;# 
  1317  000A                     	;# 
  1318  000B                     	;# 
  1319  000C                     	;# 
  1320  000D                     	;# 
  1321  000E                     	;# 
  1322  0011                     	;# 
  1323  0012                     	;# 
  1324  0015                     	;# 
  1325  0016                     	;# 
  1326  0016                     	;# 
  1327  0017                     	;# 
  1328  0018                     	;# 
  1329  0019                     	;# 
  1330  001A                     	;# 
  1331  001B                     	;# 
  1332  001C                     	;# 
  1333  008C                     	;# 
  1334  008D                     	;# 
  1335  008E                     	;# 
  1336  0091                     	;# 
  1337  0092                     	;# 
  1338  0095                     	;# 
  1339  0096                     	;# 
  1340  0097                     	;# 
  1341  0099                     	;# 
  1342  009A                     	;# 
  1343  009B                     	;# 
  1344  009B                     	;# 
  1345  009C                     	;# 
  1346  009D                     	;# 
  1347  009E                     	;# 
  1348  009F                     	;# 
  1349  010C                     	;# 
  1350  010D                     	;# 
  1351  010E                     	;# 
  1352  0116                     	;# 
  1353  0117                     	;# 
  1354  011D                     	;# 
  1355  018C                     	;# 
  1356  018D                     	;# 
  1357  018E                     	;# 
  1358  0191                     	;# 
  1359  0191                     	;# 
  1360  0192                     	;# 
  1361  0193                     	;# 
  1362  0193                     	;# 
  1363  0194                     	;# 
  1364  0195                     	;# 
  1365  0196                     	;# 
  1366  0199                     	;# 
  1367  019A                     	;# 
  1368  019B                     	;# 
  1369  019B                     	;# 
  1370  019C                     	;# 
  1371  019D                     	;# 
  1372  019E                     	;# 
  1373  019F                     	;# 
  1374  020C                     	;# 
  1375  020D                     	;# 
  1376  0211                     	;# 
  1377  0211                     	;# 
  1378  0212                     	;# 
  1379  0212                     	;# 
  1380  0213                     	;# 
  1381  0213                     	;# 
  1382  0214                     	;# 
  1383  0214                     	;# 
  1384  0215                     	;# 
  1385  0215                     	;# 
  1386  0215                     	;# 
  1387  0216                     	;# 
  1388  0216                     	;# 
  1389  0217                     	;# 
  1390  0217                     	;# 
  1391  0391                     	;# 
  1392  0392                     	;# 
  1393  0393                     	;# 
  1394  0394                     	;# 
  1395  0395                     	;# 
  1396  0396                     	;# 
  1397  0611                     	;# 
  1398  0612                     	;# 
  1399  0613                     	;# 
  1400  0613                     	;# 
  1401  0614                     	;# 
  1402  0615                     	;# 
  1403  0616                     	;# 
  1404  0616                     	;# 
  1405  0711                     	;# 
  1406  0711                     	;# 
  1407  0711                     	;# 
  1408  0712                     	;# 
  1409  0712                     	;# 
  1410  0713                     	;# 
  1411  0713                     	;# 
  1412  0713                     	;# 
  1413  0714                     	;# 
  1414  0714                     	;# 
  1415  0714                     	;# 
  1416  0715                     	;# 
  1417  0715                     	;# 
  1418  0716                     	;# 
  1419  0716                     	;# 
  1420  0716                     	;# 
  1421  0716                     	;# 
  1422  0717                     	;# 
  1423  0717                     	;# 
  1424  0717                     	;# 
  1425  0717                     	;# 
  1426  0718                     	;# 
  1427  0718                     	;# 
  1428  0718                     	;# 
  1429  0719                     	;# 
  1430  0719                     	;# 
  1431  0719                     	;# 
  1432  0719                     	;# 
  1433  071A                     	;# 
  1434  071A                     	;# 
  1435  071A                     	;# 
  1436  071A                     	;# 
  1437  071A                     	;# 
  1438  071B                     	;# 
  1439  071B                     	;# 
  1440  071C                     	;# 
  1441  071C                     	;# 
  1442  071C                     	;# 
  1443  071C                     	;# 
  1444  071C                     	;# 
  1445  071D                     	;# 
  1446  071D                     	;# 
  1447  071E                     	;# 
  1448  071E                     	;# 
  1449  0791                     	;# 
  1450  0791                     	;# 
  1451  0793                     	;# 
  1452  0793                     	;# 
  1453  0794                     	;# 
  1454  0794                     	;# 
  1455  0796                     	;# 
  1456  0796                     	;# 
  1457  0796                     	;# 
  1458  0797                     	;# 
  1459  0797                     	;# 
  1460  0797                     	;# 
  1461  0798                     	;# 
  1462  0798                     	;# 
  1463  0799                     	;# 
  1464  0799                     	;# 
  1465  0799                     	;# 
  1466  079A                     	;# 
  1467  079A                     	;# 
  1468  079A                     	;# 
  1469  079B                     	;# 
  1470  079C                     	;# 
  1471  079C                     	;# 
  1472  079C                     	;# 
  1473  079D                     	;# 
  1474  079E                     	;# 
  1475  079E                     	;# 
  1476  0F8C                     	;# 
  1477  0F8D                     	;# 
  1478  0F91                     	;# 
  1479  0F96                     	;# 
  1480  0F97                     	;# 
  1481  0F9C                     	;# 
  1482  0F9D                     	;# 
  1483  0F9E                     	;# 
  1484  0FE3                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0011                     	;# 
  1512  0012                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  008C                     	;# 
  1523  008D                     	;# 
  1524  008E                     	;# 
  1525  0091                     	;# 
  1526  0092                     	;# 
  1527  0095                     	;# 
  1528  0096                     	;# 
  1529  0097                     	;# 
  1530  0099                     	;# 
  1531  009A                     	;# 
  1532  009B                     	;# 
  1533  009B                     	;# 
  1534  009C                     	;# 
  1535  009D                     	;# 
  1536  009E                     	;# 
  1537  009F                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0116                     	;# 
  1542  0117                     	;# 
  1543  011D                     	;# 
  1544  018C                     	;# 
  1545  018D                     	;# 
  1546  018E                     	;# 
  1547  0191                     	;# 
  1548  0191                     	;# 
  1549  0192                     	;# 
  1550  0193                     	;# 
  1551  0193                     	;# 
  1552  0194                     	;# 
  1553  0195                     	;# 
  1554  0196                     	;# 
  1555  0199                     	;# 
  1556  019A                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020C                     	;# 
  1564  020D                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0391                     	;# 
  1581  0392                     	;# 
  1582  0393                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  0611                     	;# 
  1587  0612                     	;# 
  1588  0613                     	;# 
  1589  0613                     	;# 
  1590  0614                     	;# 
  1591  0615                     	;# 
  1592  0616                     	;# 
  1593  0616                     	;# 
  1594  0711                     	;# 
  1595  0711                     	;# 
  1596  0711                     	;# 
  1597  0712                     	;# 
  1598  0712                     	;# 
  1599  0713                     	;# 
  1600  0713                     	;# 
  1601  0713                     	;# 
  1602  0714                     	;# 
  1603  0714                     	;# 
  1604  0714                     	;# 
  1605  0715                     	;# 
  1606  0715                     	;# 
  1607  0716                     	;# 
  1608  0716                     	;# 
  1609  0716                     	;# 
  1610  0716                     	;# 
  1611  0717                     	;# 
  1612  0717                     	;# 
  1613  0717                     	;# 
  1614  0717                     	;# 
  1615  0718                     	;# 
  1616  0718                     	;# 
  1617  0718                     	;# 
  1618  0719                     	;# 
  1619  0719                     	;# 
  1620  0719                     	;# 
  1621  0719                     	;# 
  1622  071A                     	;# 
  1623  071A                     	;# 
  1624  071A                     	;# 
  1625  071A                     	;# 
  1626  071A                     	;# 
  1627  071B                     	;# 
  1628  071B                     	;# 
  1629  071C                     	;# 
  1630  071C                     	;# 
  1631  071C                     	;# 
  1632  071C                     	;# 
  1633  071C                     	;# 
  1634  071D                     	;# 
  1635  071D                     	;# 
  1636  071E                     	;# 
  1637  071E                     	;# 
  1638  0791                     	;# 
  1639  0791                     	;# 
  1640  0793                     	;# 
  1641  0793                     	;# 
  1642  0794                     	;# 
  1643  0794                     	;# 
  1644  0796                     	;# 
  1645  0796                     	;# 
  1646  0796                     	;# 
  1647  0797                     	;# 
  1648  0797                     	;# 
  1649  0797                     	;# 
  1650  0798                     	;# 
  1651  0798                     	;# 
  1652  0799                     	;# 
  1653  0799                     	;# 
  1654  0799                     	;# 
  1655  079A                     	;# 
  1656  079A                     	;# 
  1657  079A                     	;# 
  1658  079B                     	;# 
  1659  079C                     	;# 
  1660  079C                     	;# 
  1661  079C                     	;# 
  1662  079D                     	;# 
  1663  079E                     	;# 
  1664  079E                     	;# 
  1665  0F8C                     	;# 
  1666  0F8D                     	;# 
  1667  0F91                     	;# 
  1668  0F96                     	;# 
  1669  0F97                     	;# 
  1670  0F9C                     	;# 
  1671  0F9D                     	;# 
  1672  0F9E                     	;# 
  1673  0FE3                     	;# 
  1674  0FE4                     	;# 
  1675  0FE5                     	;# 
  1676  0FE6                     	;# 
  1677  0FE7                     	;# 
  1678  0FE8                     	;# 
  1679  0FE9                     	;# 
  1680  0FEA                     	;# 
  1681  0FEB                     	;# 
  1682  0FED                     	;# 
  1683  0FEE                     	;# 
  1684  0FEF                     	;# 
  1685  0000                     	;# 
  1686  0001                     	;# 
  1687  0002                     	;# 
  1688  0003                     	;# 
  1689  0004                     	;# 
  1690  0005                     	;# 
  1691  0006                     	;# 
  1692  0007                     	;# 
  1693  0008                     	;# 
  1694  0009                     	;# 
  1695  000A                     	;# 
  1696  000B                     	;# 
  1697  000C                     	;# 
  1698  000D                     	;# 
  1699  000E                     	;# 
  1700  0011                     	;# 
  1701  0012                     	;# 
  1702  0015                     	;# 
  1703  0016                     	;# 
  1704  0016                     	;# 
  1705  0017                     	;# 
  1706  0018                     	;# 
  1707  0019                     	;# 
  1708  001A                     	;# 
  1709  001B                     	;# 
  1710  001C                     	;# 
  1711  008C                     	;# 
  1712  008D                     	;# 
  1713  008E                     	;# 
  1714  0091                     	;# 
  1715  0092                     	;# 
  1716  0095                     	;# 
  1717  0096                     	;# 
  1718  0097                     	;# 
  1719  0099                     	;# 
  1720  009A                     	;# 
  1721  009B                     	;# 
  1722  009B                     	;# 
  1723  009C                     	;# 
  1724  009D                     	;# 
  1725  009E                     	;# 
  1726  009F                     	;# 
  1727  010C                     	;# 
  1728  010D                     	;# 
  1729  010E                     	;# 
  1730  0116                     	;# 
  1731  0117                     	;# 
  1732  011D                     	;# 
  1733  018C                     	;# 
  1734  018D                     	;# 
  1735  018E                     	;# 
  1736  0191                     	;# 
  1737  0191                     	;# 
  1738  0192                     	;# 
  1739  0193                     	;# 
  1740  0193                     	;# 
  1741  0194                     	;# 
  1742  0195                     	;# 
  1743  0196                     	;# 
  1744  0199                     	;# 
  1745  019A                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019C                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019F                     	;# 
  1752  020C                     	;# 
  1753  020D                     	;# 
  1754  0211                     	;# 
  1755  0211                     	;# 
  1756  0212                     	;# 
  1757  0212                     	;# 
  1758  0213                     	;# 
  1759  0213                     	;# 
  1760  0214                     	;# 
  1761  0214                     	;# 
  1762  0215                     	;# 
  1763  0215                     	;# 
  1764  0215                     	;# 
  1765  0216                     	;# 
  1766  0216                     	;# 
  1767  0217                     	;# 
  1768  0217                     	;# 
  1769  0391                     	;# 
  1770  0392                     	;# 
  1771  0393                     	;# 
  1772  0394                     	;# 
  1773  0395                     	;# 
  1774  0396                     	;# 
  1775  0611                     	;# 
  1776  0612                     	;# 
  1777  0613                     	;# 
  1778  0613                     	;# 
  1779  0614                     	;# 
  1780  0615                     	;# 
  1781  0616                     	;# 
  1782  0616                     	;# 
  1783  0711                     	;# 
  1784  0711                     	;# 
  1785  0711                     	;# 
  1786  0712                     	;# 
  1787  0712                     	;# 
  1788  0713                     	;# 
  1789  0713                     	;# 
  1790  0713                     	;# 
  1791  0714                     	;# 
  1792  0714                     	;# 
  1793  0714                     	;# 
  1794  0715                     	;# 
  1795  0715                     	;# 
  1796  0716                     	;# 
  1797  0716                     	;# 
  1798  0716                     	;# 
  1799  0716                     	;# 
  1800  0717                     	;# 
  1801  0717                     	;# 
  1802  0717                     	;# 
  1803  0717                     	;# 
  1804  0718                     	;# 
  1805  0718                     	;# 
  1806  0718                     	;# 
  1807  0719                     	;# 
  1808  0719                     	;# 
  1809  0719                     	;# 
  1810  0719                     	;# 
  1811  071A                     	;# 
  1812  071A                     	;# 
  1813  071A                     	;# 
  1814  071A                     	;# 
  1815  071A                     	;# 
  1816  071B                     	;# 
  1817  071B                     	;# 
  1818  071C                     	;# 
  1819  071C                     	;# 
  1820  071C                     	;# 
  1821  071C                     	;# 
  1822  071C                     	;# 
  1823  071D                     	;# 
  1824  071D                     	;# 
  1825  071E                     	;# 
  1826  071E                     	;# 
  1827  0791                     	;# 
  1828  0791                     	;# 
  1829  0793                     	;# 
  1830  0793                     	;# 
  1831  0794                     	;# 
  1832  0794                     	;# 
  1833  0796                     	;# 
  1834  0796                     	;# 
  1835  0796                     	;# 
  1836  0797                     	;# 
  1837  0797                     	;# 
  1838  0797                     	;# 
  1839  0798                     	;# 
  1840  0798                     	;# 
  1841  0799                     	;# 
  1842  0799                     	;# 
  1843  0799                     	;# 
  1844  079A                     	;# 
  1845  079A                     	;# 
  1846  079A                     	;# 
  1847  079B                     	;# 
  1848  079C                     	;# 
  1849  079C                     	;# 
  1850  079C                     	;# 
  1851  079D                     	;# 
  1852  079E                     	;# 
  1853  079E                     	;# 
  1854  0F8C                     	;# 
  1855  0F8D                     	;# 
  1856  0F91                     	;# 
  1857  0F96                     	;# 
  1858  0F97                     	;# 
  1859  0F9C                     	;# 
  1860  0F9D                     	;# 
  1861  0F9E                     	;# 
  1862  0FE3                     	;# 
  1863  0FE4                     	;# 
  1864  0FE5                     	;# 
  1865  0FE6                     	;# 
  1866  0FE7                     	;# 
  1867  0FE8                     	;# 
  1868  0FE9                     	;# 
  1869  0FEA                     	;# 
  1870  0FEB                     	;# 
  1871  0FED                     	;# 
  1872  0FEE                     	;# 
  1873  0FEF                     	;# 
  1874  0000                     	;# 
  1875  0001                     	;# 
  1876  0002                     	;# 
  1877  0003                     	;# 
  1878  0004                     	;# 
  1879  0005                     	;# 
  1880  0006                     	;# 
  1881  0007                     	;# 
  1882  0008                     	;# 
  1883  0009                     	;# 
  1884  000A                     	;# 
  1885  000B                     	;# 
  1886  000C                     	;# 
  1887  000D                     	;# 
  1888  000E                     	;# 
  1889  0011                     	;# 
  1890  0012                     	;# 
  1891  0015                     	;# 
  1892  0016                     	;# 
  1893  0016                     	;# 
  1894  0017                     	;# 
  1895  0018                     	;# 
  1896  0019                     	;# 
  1897  001A                     	;# 
  1898  001B                     	;# 
  1899  001C                     	;# 
  1900  008C                     	;# 
  1901  008D                     	;# 
  1902  008E                     	;# 
  1903  0091                     	;# 
  1904  0092                     	;# 
  1905  0095                     	;# 
  1906  0096                     	;# 
  1907  0097                     	;# 
  1908  0099                     	;# 
  1909  009A                     	;# 
  1910  009B                     	;# 
  1911  009B                     	;# 
  1912  009C                     	;# 
  1913  009D                     	;# 
  1914  009E                     	;# 
  1915  009F                     	;# 
  1916  010C                     	;# 
  1917  010D                     	;# 
  1918  010E                     	;# 
  1919  0116                     	;# 
  1920  0117                     	;# 
  1921  011D                     	;# 
  1922  018C                     	;# 
  1923  018D                     	;# 
  1924  018E                     	;# 
  1925  0191                     	;# 
  1926  0191                     	;# 
  1927  0192                     	;# 
  1928  0193                     	;# 
  1929  0193                     	;# 
  1930  0194                     	;# 
  1931  0195                     	;# 
  1932  0196                     	;# 
  1933  0199                     	;# 
  1934  019A                     	;# 
  1935  019B                     	;# 
  1936  019B                     	;# 
  1937  019C                     	;# 
  1938  019D                     	;# 
  1939  019E                     	;# 
  1940  019F                     	;# 
  1941  020C                     	;# 
  1942  020D                     	;# 
  1943  0211                     	;# 
  1944  0211                     	;# 
  1945  0212                     	;# 
  1946  0212                     	;# 
  1947  0213                     	;# 
  1948  0213                     	;# 
  1949  0214                     	;# 
  1950  0214                     	;# 
  1951  0215                     	;# 
  1952  0215                     	;# 
  1953  0215                     	;# 
  1954  0216                     	;# 
  1955  0216                     	;# 
  1956  0217                     	;# 
  1957  0217                     	;# 
  1958  0391                     	;# 
  1959  0392                     	;# 
  1960  0393                     	;# 
  1961  0394                     	;# 
  1962  0395                     	;# 
  1963  0396                     	;# 
  1964  0611                     	;# 
  1965  0612                     	;# 
  1966  0613                     	;# 
  1967  0613                     	;# 
  1968  0614                     	;# 
  1969  0615                     	;# 
  1970  0616                     	;# 
  1971  0616                     	;# 
  1972  0711                     	;# 
  1973  0711                     	;# 
  1974  0711                     	;# 
  1975  0712                     	;# 
  1976  0712                     	;# 
  1977  0713                     	;# 
  1978  0713                     	;# 
  1979  0713                     	;# 
  1980  0714                     	;# 
  1981  0714                     	;# 
  1982  0714                     	;# 
  1983  0715                     	;# 
  1984  0715                     	;# 
  1985  0716                     	;# 
  1986  0716                     	;# 
  1987  0716                     	;# 
  1988  0716                     	;# 
  1989  0717                     	;# 
  1990  0717                     	;# 
  1991  0717                     	;# 
  1992  0717                     	;# 
  1993  0718                     	;# 
  1994  0718                     	;# 
  1995  0718                     	;# 
  1996  0719                     	;# 
  1997  0719                     	;# 
  1998  0719                     	;# 
  1999  0719                     	;# 
  2000  071A                     	;# 
  2001  071A                     	;# 
  2002  071A                     	;# 
  2003  071A                     	;# 
  2004  071A                     	;# 
  2005  071B                     	;# 
  2006  071B                     	;# 
  2007  071C                     	;# 
  2008  071C                     	;# 
  2009  071C                     	;# 
  2010  071C                     	;# 
  2011  071C                     	;# 
  2012  071D                     	;# 
  2013  071D                     	;# 
  2014  071E                     	;# 
  2015  071E                     	;# 
  2016  0791                     	;# 
  2017  0791                     	;# 
  2018  0793                     	;# 
  2019  0793                     	;# 
  2020  0794                     	;# 
  2021  0794                     	;# 
  2022  0796                     	;# 
  2023  0796                     	;# 
  2024  0796                     	;# 
  2025  0797                     	;# 
  2026  0797                     	;# 
  2027  0797                     	;# 
  2028  0798                     	;# 
  2029  0798                     	;# 
  2030  0799                     	;# 
  2031  0799                     	;# 
  2032  0799                     	;# 
  2033  079A                     	;# 
  2034  079A                     	;# 
  2035  079A                     	;# 
  2036  079B                     	;# 
  2037  079C                     	;# 
  2038  079C                     	;# 
  2039  079C                     	;# 
  2040  079D                     	;# 
  2041  079E                     	;# 
  2042  079E                     	;# 
  2043  0F8C                     	;# 
  2044  0F8D                     	;# 
  2045  0F91                     	;# 
  2046  0F96                     	;# 
  2047  0F97                     	;# 
  2048  0F9C                     	;# 
  2049  0F9D                     	;# 
  2050  0F9E                     	;# 
  2051  0FE3                     	;# 
  2052  0FE4                     	;# 
  2053  0FE5                     	;# 
  2054  0FE6                     	;# 
  2055  0FE7                     	;# 
  2056  0FE8                     	;# 
  2057  0FE9                     	;# 
  2058  0FEA                     	;# 
  2059  0FEB                     	;# 
  2060  0FED                     	;# 
  2061  0FEE                     	;# 
  2062  0FEF                     	;# 
  2063  0000                     	;# 
  2064  0001                     	;# 
  2065  0002                     	;# 
  2066  0003                     	;# 
  2067  0004                     	;# 
  2068  0005                     	;# 
  2069  0006                     	;# 
  2070  0007                     	;# 
  2071  0008                     	;# 
  2072  0009                     	;# 
  2073  000A                     	;# 
  2074  000B                     	;# 
  2075  000C                     	;# 
  2076  000D                     	;# 
  2077  000E                     	;# 
  2078  0011                     	;# 
  2079  0012                     	;# 
  2080  0015                     	;# 
  2081  0016                     	;# 
  2082  0016                     	;# 
  2083  0017                     	;# 
  2084  0018                     	;# 
  2085  0019                     	;# 
  2086  001A                     	;# 
  2087  001B                     	;# 
  2088  001C                     	;# 
  2089  008C                     	;# 
  2090  008D                     	;# 
  2091  008E                     	;# 
  2092  0091                     	;# 
  2093  0092                     	;# 
  2094  0095                     	;# 
  2095  0096                     	;# 
  2096  0097                     	;# 
  2097  0099                     	;# 
  2098  009A                     	;# 
  2099  009B                     	;# 
  2100  009B                     	;# 
  2101  009C                     	;# 
  2102  009D                     	;# 
  2103  009E                     	;# 
  2104  009F                     	;# 
  2105  010C                     	;# 
  2106  010D                     	;# 
  2107  010E                     	;# 
  2108  0116                     	;# 
  2109  0117                     	;# 
  2110  011D                     	;# 
  2111  018C                     	;# 
  2112  018D                     	;# 
  2113  018E                     	;# 
  2114  0191                     	;# 
  2115  0191                     	;# 
  2116  0192                     	;# 
  2117  0193                     	;# 
  2118  0193                     	;# 
  2119  0194                     	;# 
  2120  0195                     	;# 
  2121  0196                     	;# 
  2122  0199                     	;# 
  2123  019A                     	;# 
  2124  019B                     	;# 
  2125  019B                     	;# 
  2126  019C                     	;# 
  2127  019D                     	;# 
  2128  019E                     	;# 
  2129  019F                     	;# 
  2130  020C                     	;# 
  2131  020D                     	;# 
  2132  0211                     	;# 
  2133  0211                     	;# 
  2134  0212                     	;# 
  2135  0212                     	;# 
  2136  0213                     	;# 
  2137  0213                     	;# 
  2138  0214                     	;# 
  2139  0214                     	;# 
  2140  0215                     	;# 
  2141  0215                     	;# 
  2142  0215                     	;# 
  2143  0216                     	;# 
  2144  0216                     	;# 
  2145  0217                     	;# 
  2146  0217                     	;# 
  2147  0391                     	;# 
  2148  0392                     	;# 
  2149  0393                     	;# 
  2150  0394                     	;# 
  2151  0395                     	;# 
  2152  0396                     	;# 
  2153  0611                     	;# 
  2154  0612                     	;# 
  2155  0613                     	;# 
  2156  0613                     	;# 
  2157  0614                     	;# 
  2158  0615                     	;# 
  2159  0616                     	;# 
  2160  0616                     	;# 
  2161  0711                     	;# 
  2162  0711                     	;# 
  2163  0711                     	;# 
  2164  0712                     	;# 
  2165  0712                     	;# 
  2166  0713                     	;# 
  2167  0713                     	;# 
  2168  0713                     	;# 
  2169  0714                     	;# 
  2170  0714                     	;# 
  2171  0714                     	;# 
  2172  0715                     	;# 
  2173  0715                     	;# 
  2174  0716                     	;# 
  2175  0716                     	;# 
  2176  0716                     	;# 
  2177  0716                     	;# 
  2178  0717                     	;# 
  2179  0717                     	;# 
  2180  0717                     	;# 
  2181  0717                     	;# 
  2182  0718                     	;# 
  2183  0718                     	;# 
  2184  0718                     	;# 
  2185  0719                     	;# 
  2186  0719                     	;# 
  2187  0719                     	;# 
  2188  0719                     	;# 
  2189  071A                     	;# 
  2190  071A                     	;# 
  2191  071A                     	;# 
  2192  071A                     	;# 
  2193  071A                     	;# 
  2194  071B                     	;# 
  2195  071B                     	;# 
  2196  071C                     	;# 
  2197  071C                     	;# 
  2198  071C                     	;# 
  2199  071C                     	;# 
  2200  071C                     	;# 
  2201  071D                     	;# 
  2202  071D                     	;# 
  2203  071E                     	;# 
  2204  071E                     	;# 
  2205  0791                     	;# 
  2206  0791                     	;# 
  2207  0793                     	;# 
  2208  0793                     	;# 
  2209  0794                     	;# 
  2210  0794                     	;# 
  2211  0796                     	;# 
  2212  0796                     	;# 
  2213  0796                     	;# 
  2214  0797                     	;# 
  2215  0797                     	;# 
  2216  0797                     	;# 
  2217  0798                     	;# 
  2218  0798                     	;# 
  2219  0799                     	;# 
  2220  0799                     	;# 
  2221  0799                     	;# 
  2222  079A                     	;# 
  2223  079A                     	;# 
  2224  079A                     	;# 
  2225  079B                     	;# 
  2226  079C                     	;# 
  2227  079C                     	;# 
  2228  079C                     	;# 
  2229  079D                     	;# 
  2230  079E                     	;# 
  2231  079E                     	;# 
  2232  0F8C                     	;# 
  2233  0F8D                     	;# 
  2234  0F91                     	;# 
  2235  0F96                     	;# 
  2236  0F97                     	;# 
  2237  0F9C                     	;# 
  2238  0F9D                     	;# 
  2239  0F9E                     	;# 
  2240  0FE3                     	;# 
  2241  0FE4                     	;# 
  2242  0FE5                     	;# 
  2243  0FE6                     	;# 
  2244  0FE7                     	;# 
  2245  0FE8                     	;# 
  2246  0FE9                     	;# 
  2247  0FEA                     	;# 
  2248  0FEB                     	;# 
  2249  0FED                     	;# 
  2250  0FEE                     	;# 
  2251  0FEF                     	;# 
  2252                           
  2253                           	psect	idataBANK0
  2254  15D6                     __pidataBANK0:	
  2255                           
  2256                           ;initializer for _callback_notPressed
  2257  15D6  34C6               	retlw	low _Button_DefaultCallback
  2258  15D7  3415               	retlw	high _Button_DefaultCallback
  2259                           
  2260                           ;initializer for _sample_period
  2261  15D8  34AE               	retlw	174
  2262                           
  2263                           	psect	idataBANK1
  2264  0A0F                     __pidataBANK1:	
  2265                           
  2266                           ;initializer for _Button_StateMachine
  2267  0A0F  3405               	retlw	low _Button_State_Initializing
  2268  0A10  340D               	retlw	high _Button_State_Initializing
  2269  0A11  34AB               	retlw	low _Button_State_NotPressed
  2270  0A12  3405               	retlw	high _Button_State_NotPressed
  2271  0A13  3467               	retlw	low _Button_State_Pressed
  2272  0A14  340D               	retlw	high _Button_State_Pressed
  2273                           
  2274                           ;initializer for _callback_pressed
  2275  0A15  34C6               	retlw	low _Button_DefaultCallback
  2276  0A16  3415               	retlw	high _Button_DefaultCallback
  2277                           
  2278                           ;initializer for _callback_sampled
  2279  0A17  34FF               	retlw	low _Sensor_DefaultCallback
  2280  0A18  3407               	retlw	high _Sensor_DefaultCallback
  2281                           
  2282                           ;initializer for _mtouch_sensor
  2283  0A19  3400               	retlw	0
  2284  0A1A  3469               	retlw	105
  2285  0A1B  3430               	retlw	48
  2286  0A1C  3410               	retlw	16
  2287  0A1D  3420               	retlw	32
  2288  0A1E  3400               	retlw	0
  2289  0A1F  3400               	retlw	0
  2290  0A20  3400               	retlw	0
  2291  0A21  3400               	retlw	0
  2292  0A22  3401               	retlw	1
  2293  0A23  3431               	retlw	49
  2294  0A24  3430               	retlw	48
  2295  0A25  3410               	retlw	16
  2296  0A26  3420               	retlw	32
  2297  0A27  3400               	retlw	0
  2298  0A28  3400               	retlw	0
  2299  0A29  3400               	retlw	0
  2300  0A2A  3400               	retlw	0
  2301  0A2B  3402               	retlw	2
  2302  0A2C  345D               	retlw	93
  2303  0A2D  3430               	retlw	48
  2304  0A2E  3410               	retlw	16
  2305  0A2F  3420               	retlw	32
  2306  0A30  3400               	retlw	0
  2307  0A31  3400               	retlw	0
  2308  0A32  3400               	retlw	0
  2309  0A33  3400               	retlw	0
  2310  0A34  3403               	retlw	3
  2311  0A35  3435               	retlw	53
  2312  0A36  3430               	retlw	48
  2313  0A37  3410               	retlw	16
  2314  0A38  3420               	retlw	32
  2315  0A39  3400               	retlw	0
  2316  0A3A  3400               	retlw	0
  2317  0A3B  3400               	retlw	0
  2318  0A3C  3400               	retlw	0
  2319                           
  2320                           	psect	stringtext1
  2321  1809                     __pstringtext1:	
  2322  1809                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2323  1809  3400               	retlw	0
  2324  180A  340D               	retlw	13
  2325  180B  341C               	retlw	28
  2326  180C  341E               	retlw	30
  2327  180D  3417               	retlw	23
  2328  180E                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2329                           
  2330                           	psect	stringtext2
  2331  185E                     __pstringtext2:	
  2332  185E                     _sensor_scan_group:	
  2333  185E  34B3               	retlw	low ((_mtouch_sensor| 0+9))
  2334  185F  34AA               	retlw	low (_mtouch_sensor| 0)
  2335  1860  34C5               	retlw	low ((_mtouch_sensor| 0+27))
  2336  1861  34BC               	retlw	low ((_mtouch_sensor| 0+18))
  2337  1862                     __end_of_sensor_scan_group:	
  2338                           
  2339                           	psect	stringtext3
  2340  1000                     __pstringtext3:	
  2341  1000                     _mtouch_button_init:	
  2342  1000  3400               	retlw	0
  2343  1001  3401               	retlw	1
  2344  1002  3400               	retlw	0
  2345  1003  3400               	retlw	0
  2346  1004  3400               	retlw	0
  2347  1005  3400               	retlw	0
  2348  1006  3400               	retlw	0
  2349  1007  3400               	retlw	0
  2350  1008  3400               	retlw	0
  2351  1009  3400               	retlw	0
  2352  100A  3400               	retlw	0
  2353  100B  3400               	retlw	0
  2354  100C  3400               	retlw	0
  2355  100D  3400               	retlw	0
  2356  100E  3464               	retlw	100
  2357  100F  3401               	retlw	1
  2358  1010  3401               	retlw	1
  2359  1011  3400               	retlw	0
  2360  1012  3400               	retlw	0
  2361  1013  3400               	retlw	0
  2362  1014  3400               	retlw	0
  2363  1015  3400               	retlw	0
  2364  1016  3400               	retlw	0
  2365  1017  3400               	retlw	0
  2366  1018  3400               	retlw	0
  2367  1019  3400               	retlw	0
  2368  101A  3400               	retlw	0
  2369  101B  3400               	retlw	0
  2370  101C  3400               	retlw	0
  2371  101D  3400               	retlw	0
  2372  101E  3464               	retlw	100
  2373  101F  3401               	retlw	1
  2374  1020  3402               	retlw	2
  2375  1021  3403               	retlw	3
  2376  1022  3400               	retlw	0
  2377  1023  3400               	retlw	0
  2378  1024  3400               	retlw	0
  2379  1025  3400               	retlw	0
  2380  1026  3400               	retlw	0
  2381  1027  3400               	retlw	0
  2382  1028  3400               	retlw	0
  2383  1029  3400               	retlw	0
  2384  102A  3400               	retlw	0
  2385  102B  3400               	retlw	0
  2386  102C  3400               	retlw	0
  2387  102D  3400               	retlw	0
  2388  102E  3464               	retlw	100
  2389  102F  3401               	retlw	1
  2390  1030  3403               	retlw	3
  2391  1031  3402               	retlw	2
  2392  1032  3400               	retlw	0
  2393  1033  3400               	retlw	0
  2394  1034  3400               	retlw	0
  2395  1035  3400               	retlw	0
  2396  1036  3400               	retlw	0
  2397  1037  3400               	retlw	0
  2398  1038  3400               	retlw	0
  2399  1039  3400               	retlw	0
  2400  103A  3400               	retlw	0
  2401  103B  3400               	retlw	0
  2402  103C  3400               	retlw	0
  2403  103D  3400               	retlw	0
  2404  103E  3464               	retlw	100
  2405  103F  3401               	retlw	1
  2406  1040                     __end_of_mtouch_button_init:	
  2407                           
  2408                           	psect	nvBANK1
  2409  00E2                     __pnvBANK1:	
  2410  00E2                     _EUSART_ErrorHandler:	
  2411  00E2                     	ds	2
  2412  00E4                     _EUSART_OverrunErrorHandler:	
  2413  00E4                     	ds	2
  2414  00E6                     _EUSART_FramingErrorHandler:	
  2415  00E6                     	ds	2
  2416  00E8                     _EUSART_RxDefaultInterruptHandler:	
  2417  00E8                     	ds	2
  2418  0012                     _PIR2bits	set	18
  2419  001C                     _T2CONbits	set	28
  2420  001C                     _T2CON	set	28
  2421  001A                     _TMR2	set	26
  2422  001B                     _PR2	set	27
  2423  000B                     _INTCONbits	set	11
  2424  0011                     _PIR1bits	set	17
  2425  005F                     _GIE	set	95
  2426  0095                     _OPTION_REGbits	set	149
  2427  008E                     _TRISC	set	142
  2428  008D                     _TRISB	set	141
  2429  008C                     _TRISA	set	140
  2430  0097                     _WDTCON	set	151
  2431  0099                     _OSCCON	set	153
  2432  0091                     _PIE1bits	set	145
  2433  010D                     _LATBbits	set	269
  2434  011D                     _APFCONbits	set	285
  2435  010E                     _LATCbits	set	270
  2436  010C                     _LATAbits	set	268
  2437  011D                     _APFCON	set	285
  2438  010E                     _LATC	set	270
  2439  010D                     _LATB	set	269
  2440  010C                     _LATA	set	268
  2441  0116                     _BORCON	set	278
  2442  018C                     _ANSELA	set	396
  2443  018D                     _ANSELB	set	397
  2444  018E                     _ANSELC	set	398
  2445  0199                     _RCREG	set	409
  2446  019D                     _RCSTAbits	set	413
  2447  019A                     _TXREG	set	410
  2448  019E                     _TXSTAbits	set	414
  2449  019C                     _SPBRGH	set	412
  2450  019B                     _SPBRGL	set	411
  2451  019E                     _TXSTA	set	414
  2452  019D                     _RCSTA	set	413
  2453  019F                     _BAUDCON	set	415
  2454  020C                     _WPUA	set	524
  2455  020D                     _WPUB	set	525
  2456  071A                     _AAD1RES0	set	1818
  2457  0711                     _AD1CON0bits	set	1809
  2458  0714                     _AAD1CON3	set	1812
  2459  0713                     _AD1CON2	set	1811
  2460  0717                     _AD1ACQCON	set	1815
  2461  0716                     _AD1PRECON	set	1814
  2462  0718                     _AAD1GRD	set	1816
  2463  0713                     _AAD1CON2	set	1811
  2464  0719                     _AAD1CAP	set	1817
  2465  0714                     _AD1CON3	set	1812
  2466  0712                     _ADCOMCON	set	1810
  2467  0711                     _AD1CON0	set	1809
  2468  079A                     _AAD2RES0	set	1946
  2469  0791                     _AD2CON0bits	set	1937
  2470  0797                     _AD2ACQCON	set	1943
  2471  0796                     _AD2PRECON	set	1942
  2472  0794                     _AAD2CON3	set	1940
  2473  0798                     _AAD2GRD	set	1944
  2474  0793                     _AD2CON2	set	1939
  2475  0794                     _AD2CON3	set	1940
  2476  0791                     _AD2CON0	set	1937
  2477                           
  2478                           	psect	stringtext4
  2479  1800                     __pstringtext4:	
  2480  1800                     STR_1:	
  2481  1800  3450               	retlw	80	;'P'
  2482  1801  3449               	retlw	73	;'I'
  2483  1802  3443               	retlw	67	;'C'
  2484  1803  3453               	retlw	83	;'S'
  2485  1804  344D               	retlw	77	;'M'
  2486  1805  3441               	retlw	65	;'A'
  2487  1806  3452               	retlw	82	;'R'
  2488  1807  3454               	retlw	84	;'T'
  2489  1808  3400               	retlw	0
  2490                           
  2491                           	psect	stringtext5
  2492  180E                     __pstringtext5:	
  2493  180E                     STR_2:	
  2494  180E  3450               	retlw	80	;'P'
  2495  180F  3449               	retlw	73	;'I'
  2496  1810  3443               	retlw	67	;'C'
  2497  1811  3430               	retlw	48	;'0'
  2498  1812  3400               	retlw	0
  2499                           
  2500                           	psect	stringtext6
  2501  1813                     __pstringtext6:	
  2502  1813                     STR_3:	
  2503  1813  3450               	retlw	80	;'P'
  2504  1814  3449               	retlw	73	;'I'
  2505  1815  3443               	retlw	67	;'C'
  2506  1816  3431               	retlw	49	;'1'
  2507  1817  3400               	retlw	0
  2508                           
  2509                           	psect	stringtext7
  2510  1818                     __pstringtext7:	
  2511  1818                     STR_4:	
  2512  1818  3450               	retlw	80	;'P'
  2513  1819  3449               	retlw	73	;'I'
  2514  181A  3443               	retlw	67	;'C'
  2515  181B  3432               	retlw	50	;'2'
  2516  181C  3400               	retlw	0
  2517                           
  2518                           	psect	stringtext8
  2519  181D                     __pstringtext8:	
  2520  181D                     STR_5:	
  2521  181D  3450               	retlw	80	;'P'
  2522  181E  3449               	retlw	73	;'I'
  2523  181F  3443               	retlw	67	;'C'
  2524  1820  3433               	retlw	51	;'3'
  2525  1821  3400               	retlw	0
  2526                           
  2527                           	psect	stringtext9
  2528  1822                     __pstringtext9:	
  2529  1822                     STR_6:	
  2530  1822  3450               	retlw	80	;'P'
  2531  1823  3449               	retlw	73	;'I'
  2532  1824  3443               	retlw	67	;'C'
  2533  1825  3434               	retlw	52	;'4'
  2534  1826  3400               	retlw	0
  2535                           
  2536                           	psect	stringtext10
  2537  1827                     __pstringtext10:	
  2538  1827                     STR_7:	
  2539  1827  3450               	retlw	80	;'P'
  2540  1828  3449               	retlw	73	;'I'
  2541  1829  3443               	retlw	67	;'C'
  2542  182A  3435               	retlw	53	;'5'
  2543  182B  3400               	retlw	0
  2544                           
  2545                           	psect	stringtext11
  2546  182C                     __pstringtext11:	
  2547  182C                     STR_8:	
  2548  182C  3450               	retlw	80	;'P'
  2549  182D  3449               	retlw	73	;'I'
  2550  182E  3443               	retlw	67	;'C'
  2551  182F  3436               	retlw	54	;'6'
  2552  1830  3400               	retlw	0
  2553                           
  2554                           	psect	stringtext12
  2555  1831                     __pstringtext12:	
  2556  1831                     STR_9:	
  2557  1831  3450               	retlw	80	;'P'
  2558  1832  3449               	retlw	73	;'I'
  2559  1833  3443               	retlw	67	;'C'
  2560  1834  3437               	retlw	55	;'7'
  2561  1835  3400               	retlw	0
  2562                           
  2563                           	psect	stringtext13
  2564  1836                     __pstringtext13:	
  2565  1836                     STR_10:	
  2566  1836  3450               	retlw	80	;'P'
  2567  1837  3449               	retlw	73	;'I'
  2568  1838  3443               	retlw	67	;'C'
  2569  1839  3438               	retlw	56	;'8'
  2570  183A  3400               	retlw	0
  2571                           
  2572                           	psect	stringtext14
  2573  183B                     __pstringtext14:	
  2574  183B                     STR_11:	
  2575  183B  3450               	retlw	80	;'P'
  2576  183C  3449               	retlw	73	;'I'
  2577  183D  3443               	retlw	67	;'C'
  2578  183E  3439               	retlw	57	;'9'
  2579  183F  3400               	retlw	0
  2580                           
  2581                           	psect	stringtext15
  2582  1840                     __pstringtext15:	
  2583  1840                     STR_12:	
  2584  1840  3450               	retlw	80	;'P'
  2585  1841  3449               	retlw	73	;'I'
  2586  1842  3443               	retlw	67	;'C'
  2587  1843  3441               	retlw	65	;'A'
  2588  1844  3400               	retlw	0
  2589                           
  2590                           	psect	stringtext16
  2591  1845                     __pstringtext16:	
  2592  1845                     STR_13:	
  2593  1845  3450               	retlw	80	;'P'
  2594  1846  3449               	retlw	73	;'I'
  2595  1847  3443               	retlw	67	;'C'
  2596  1848  3442               	retlw	66	;'B'
  2597  1849  3400               	retlw	0
  2598                           
  2599                           	psect	stringtext17
  2600  184A                     __pstringtext17:	
  2601  184A                     STR_14:	
  2602  184A  3450               	retlw	80	;'P'
  2603  184B  3449               	retlw	73	;'I'
  2604  184C  3443               	retlw	67	;'C'
  2605  184D  3443               	retlw	67	;'C'
  2606  184E  3400               	retlw	0
  2607                           
  2608                           	psect	stringtext18
  2609  184F                     __pstringtext18:	
  2610  184F                     STR_15:	
  2611  184F  3450               	retlw	80	;'P'
  2612  1850  3449               	retlw	73	;'I'
  2613  1851  3443               	retlw	67	;'C'
  2614  1852  3444               	retlw	68	;'D'
  2615  1853  3400               	retlw	0
  2616                           
  2617                           	psect	stringtext19
  2618  1854                     __pstringtext19:	
  2619  1854                     STR_16:	
  2620  1854  3450               	retlw	80	;'P'
  2621  1855  3449               	retlw	73	;'I'
  2622  1856  3443               	retlw	67	;'C'
  2623  1857  3445               	retlw	69	;'E'
  2624  1858  3400               	retlw	0
  2625                           
  2626                           	psect	stringtext20
  2627  1859                     __pstringtext20:	
  2628  1859                     STR_17:	
  2629  1859  3450               	retlw	80	;'P'
  2630  185A  3449               	retlw	73	;'I'
  2631  185B  3443               	retlw	67	;'C'
  2632  185C  3447               	retlw	71	;'G'
  2633  185D  3400               	retlw	0
  2634                           
  2635                           	psect	stringtext21
  2636  1862                     __pstringtext21:	
  2637  1862                     STR_18:	
  2638  1862  3425               	retlw	37	;'%'
  2639  1863  3463               	retlw	99	;'c'
  2640  1864  3400               	retlw	0
  2641                           
  2642                           	psect	stringtext22
  2643  0000                     __pstringtext22:	
  2644                           
  2645                           ; #config settings
  2646  0000                     
  2647                           	psect	cinit
  2648  0018                     start_initialization:	
  2649  0018                     __initialization:	
  2650                           
  2651                           ; Initialize objects allocated to BANK0
  2652  0018  30D6               	movlw	low __pidataBANK0
  2653  0019  0084               	movwf	4
  2654  001A  3095               	movlw	(high __pidataBANK0)| (0+128)
  2655  001B  0085               	movwf	5
  2656  001C  306C               	movlw	low __pdataBANK0
  2657  001D  0086               	movwf	6
  2658  001E  3000               	movlw	high __pdataBANK0
  2659  001F  0087               	movwf	7
  2660  0020  3003               	movlw	3
  2661  0021  3188  2000  3180   	fcall	init_ram
  2662                           
  2663                           ; Initialize objects allocated to BANK1
  2664  0024  300F               	movlw	low __pidataBANK1
  2665  0025  0084               	movwf	4
  2666  0026  308A               	movlw	(high __pidataBANK1)| (0+128)
  2667  0027  0085               	movwf	5
  2668  0028  30A0               	movlw	low __pdataBANK1
  2669  0029  0086               	movwf	6
  2670  002A  3000               	movlw	high __pdataBANK1
  2671  002B  0087               	movwf	7
  2672  002C  302E               	movlw	46
  2673  002D  3188  2000  3180   	fcall	init_ram
  2674                           
  2675                           ; Clear objects allocated to COMMON
  2676  0030  01FC               	clrf	__pbssCOMMON& (0+127)
  2677                           
  2678                           ; Clear objects allocated to BANK0
  2679  0031  3052               	movlw	low __pbssBANK0
  2680  0032  0084               	movwf	4
  2681  0033  3000               	movlw	high __pbssBANK0
  2682  0034  0085               	movwf	5
  2683  0035  301A               	movlw	26
  2684  0036  3196  2615  3180   	fcall	clear_ram0
  2685                           
  2686                           ; Clear objects allocated to BANK1
  2687  0039  30CE               	movlw	low __pbssBANK1
  2688  003A  0084               	movwf	4
  2689  003B  3000               	movlw	high __pbssBANK1
  2690  003C  0085               	movwf	5
  2691  003D  3014               	movlw	20
  2692  003E  3196  2615  3180   	fcall	clear_ram0
  2693                           
  2694                           ; Clear objects allocated to BANK2
  2695  0041  3020               	movlw	low __pbssBANK2
  2696  0042  0084               	movwf	4
  2697  0043  3001               	movlw	high __pbssBANK2
  2698  0044  0085               	movwf	5
  2699  0045  3040               	movlw	64
  2700  0046  3196  2615  3180   	fcall	clear_ram0
  2701                           
  2702                           ; Clear objects allocated to BANK3
  2703  0049  30A0               	movlw	low __pbssBANK3
  2704  004A  0084               	movwf	4
  2705  004B  3001               	movlw	high __pbssBANK3
  2706  004C  0085               	movwf	5
  2707  004D  3020               	movlw	32
  2708  004E  3196  2615         	fcall	clear_ram0
  2709  0050                     end_of_initialization:	
  2710                           ;End of C runtime variable initialization code
  2711                           
  2712  0050                     __end_of__initialization:	
  2713  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2714  0051  0020               	movlb	0
  2715  0052  3182  2A12         	ljmp	_main	;jump to C main() function
  2716                           
  2717                           	psect	bssCOMMON
  2718  007C                     __pbssCOMMON:	
  2719  007C                     _eusartRxHead:	
  2720  007C                     	ds	1
  2721                           
  2722                           	psect	bssBANK0
  2723  0052                     __pbssBANK0:	
  2724  0052                     _packet_sample:	
  2725  0052                     	ds	4
  2726  0056                     _width:	
  2727  0056                     	ds	2
  2728  0058                     _flags:	
  2729  0058                     	ds	2
  2730  005A                     _packet_noise:	
  2731  005A                     	ds	2
  2732  005C                     _last_touch_status:	
  2733  005C                     	ds	2
  2734  005E                     _count_conf:	
  2735  005E                     	ds	2
  2736  0060                     _sensor_globalFlags:	
  2737  0060                     	ds	1
  2738  0061                     _lowpowerActivated:	
  2739  0061                     	ds	1
  2740  0062                     _mtouch_time_toScan:	
  2741  0062                     	ds	1
  2742  0063                     _blink:	
  2743  0063                     	ds	1
  2744  0064                     _check_request:	
  2745  0064                     	ds	1
  2746  0065                     _config_status:	
  2747  0065                     	ds	1
  2748  0066                     _rest:	
  2749  0066                     	ds	1
  2750  0067                     _prcData:	
  2751  0067                     	ds	1
  2752  0068                     _rxData:	
  2753  0068                     	ds	1
  2754  0069                     _eusartRxLastError:	
  2755  0069                     	ds	1
  2756  006A                     _eusartRxCount:	
  2757  006A                     	ds	1
  2758  006B                     _eusartRxTail:	
  2759  006B                     	ds	1
  2760                           
  2761                           	psect	dataBANK0
  2762  006C                     __pdataBANK0:	
  2763  006C                     _callback_notPressed:	
  2764  006C                     	ds	2
  2765  006E                     _sample_period:	
  2766  006E                     	ds	1
  2767                           
  2768                           	psect	bssBANK1
  2769  00CE                     __pbssBANK1:	
  2770  00CE                     _eusartRxStatusBuffer:	
  2771  00CE                     	ds	8
  2772  00D6                     _eusartRxBuffer:	
  2773  00D6                     	ds	8
  2774  00DE                     _nout:	
  2775  00DE                     	ds	2
  2776  00E0                     _prec:	
  2777  00E0                     	ds	2
  2778                           
  2779                           	psect	dataBANK1
  2780  00A0                     __pdataBANK1:	
  2781  00A0                     _Button_StateMachine:	
  2782  00A0                     	ds	6
  2783  00A6                     _callback_pressed:	
  2784  00A6                     	ds	2
  2785  00A8                     _callback_sampled:	
  2786  00A8                     	ds	2
  2787  00AA                     _mtouch_sensor:	
  2788  00AA                     	ds	36
  2789                           
  2790                           	psect	bssBANK2
  2791  0120                     __pbssBANK2:	
  2792  0120                     _mtouch_button:	
  2793  0120                     	ds	64
  2794                           
  2795                           	psect	bssBANK3
  2796  01A0                     __pbssBANK3:	
  2797  01A0                     _dbuf:	
  2798  01A0                     	ds	32
  2799                           
  2800                           	psect	inittext
  2801  0800                     init_ram:	
  2802  0800  00FE               	movwf	126
  2803  0801                     initloop:	
  2804  0801  0012               	moviw fsr0++
  2805  0802  001E               	movwi fsr1++
  2806  0803  0BFE               	decfsz	126,f
  2807  0804  2801               	goto	initloop
  2808  0805  3400               	retlw	0
  2809                           
  2810                           	psect	clrtext
  2811  1615                     clear_ram0:	
  2812                           ;	Called with FSR0 containing the base address, and
  2813                           ;	WREG with the size to clear
  2814                           
  2815  1615  0064               	clrwdt	;clear the watchdog before getting into this loop
  2816  1616                     clrloop0:	
  2817  1616  0180               	clrf	0	;clear RAM location pointed to by FSR
  2818  1617  3101               	addfsr 0,1
  2819  1618  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2820  1619  2E16               	goto	clrloop0	;have we reached the end yet?
  2821  161A  3400               	retlw	0	;all done for this memory range, return
  2822                           
  2823                           	psect	cstackBANK1
  2824  00EA                     __pcstackBANK1:	
  2825  00EA                     ??_main:	
  2826                           
  2827                           ; 1 bytes @ 0x0
  2828  00EA                     	ds	2
  2829                           
  2830                           	psect	cstackCOMMON
  2831  0070                     __pcstackCOMMON:	
  2832  0070                     ?_EUSART_Receive_ISR:	
  2833  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2834                           ; 1 bytes @ 0x0
  2835                           
  2836  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2837                           ; 1 bytes @ 0x0
  2838                           
  2839  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2840                           ; 1 bytes @ 0x0
  2841                           
  2842  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2843                           ; 1 bytes @ 0x0
  2844                           
  2845  0070                     ?_EUSART_DefaultErrorHandler:	
  2846                           ; 1 bytes @ 0x0
  2847                           
  2848  0070                     ?_EUSART_RxDataHandler:	
  2849                           ; 1 bytes @ 0x0
  2850                           
  2851  0070                     ??_EUSART_RxDataHandler:	
  2852                           ; 1 bytes @ 0x0
  2853                           
  2854  0070                     ?_PIN_MANAGER_Initialize:	
  2855                           ; 1 bytes @ 0x0
  2856                           
  2857  0070                     ?_OSCILLATOR_Initialize:	
  2858                           ; 1 bytes @ 0x0
  2859                           
  2860  0070                     ?_WDT_Initialize:	
  2861                           ; 1 bytes @ 0x0
  2862                           
  2863  0070                     ?_TMR2_Initialize:	
  2864                           ; 1 bytes @ 0x0
  2865                           
  2866  0070                     ?_MTOUCH_Initialize:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0070                     ?_check_data:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0070                     ?_check_message:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0070                     ?_LED_PROCESS:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0070                     ?_DATA_PROCESS:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0070                     ?_MTOUCH_Service_Mainloop:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_MTOUCH_Button_isPressed:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_RELAY_PROCESS:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_MTOUCH_Button_InitializeAll:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_MTOUCH_Button_ServiceAll:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_MTOUCH_needReburst:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_MTOUCH_Tick:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_MTOUCH_Button_Tick:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_MTOUCH_Sensor_Enable:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_Sensor_Sampled_Reset:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_Sensor_Service:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_Sensor_isEnabled:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_Sensor_RawSample_Update:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_Sensor_setSampled:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_Sensor_postAcquisitionProcess:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_Sensor_isActive:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_Sensor_isCalibrated:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_Sensor_setActive:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_Sensor_setInactive:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_Sensor_isCalibratingAcqTime:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?_Sensor_autoCalibration:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ?_Sensor_setCalibratAcqTime:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ?_Sensor_setCalibrated:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ?_Button_Service:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ?_Button_Reading_Update:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0070                     ?_Button_Deviation_Update:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0070                     ?_Button_Baseline_Initialize:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0070                     ?_Button_Baseline_Update:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0070                     ?_Button_Tick_helper:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0070                     ?_Button_Reading_Update_Helper:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986  0070                     ?_EUSART_Initialize:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0070                     ?_EUSART_is_rx_ready:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992  0070                     ?_EUSART_Read:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995  0070                     ?_EUSART_Write:	
  2996                           ; 1 bytes @ 0x0
  2997                           
  2998  0070                     ?_putch:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0070                     ?_INTERRUPT_InterruptManager:	
  3002                           ; 1 bytes @ 0x0
  3003                           
  3004  0070                     ?_SYSTEM_Initialize:	
  3005                           ; 1 bytes @ 0x0
  3006                           
  3007  0070                     ?_main:	
  3008                           ; 1 bytes @ 0x0
  3009                           
  3010  0070                     ?_update_state:	
  3011                           ; 1 bytes @ 0x0
  3012                           
  3013  0070                     ?_TMR2_StartTimer:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016  0070                     ?_TMR2_StopTimer:	
  3017                           ; 1 bytes @ 0x0
  3018                           
  3019  0070                     ?_TMR2_LoadPeriodRegister:	
  3020                           ; 1 bytes @ 0x0
  3021                           
  3022  0070                     ?_MTOUCH_Sensor_Initialize:	
  3023                           ; 1 bytes @ 0x0
  3024                           
  3025  0070                     ?_Sensor_getScanGroupIndex:	
  3026                           ; 1 bytes @ 0x0
  3027                           
  3028  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  3029                           ; 1 bytes @ 0x0
  3030                           
  3031  0070                     ?_MTOUCH_Sensor_wasSampled:	
  3032                           ; 1 bytes @ 0x0
  3033                           
  3034  0070                     ?_MTOUCH_Button_Initialize:	
  3035                           ; 1 bytes @ 0x0
  3036                           
  3037                           
  3038                           ; 1 bytes @ 0x0
  3039  0070                     	ds	1
  3040  0071                     ?_EUSART_SetRxInterruptHandler:	
  3041  0071                     ??_EUSART_Receive_ISR:	
  3042                           ; 1 bytes @ 0x1
  3043                           
  3044  0071                     ?_EUSART_SetFramingErrorHandler:	
  3045                           ; 1 bytes @ 0x1
  3046                           
  3047  0071                     ?_EUSART_SetOverrunErrorHandler:	
  3048                           ; 1 bytes @ 0x1
  3049                           
  3050  0071                     ?_EUSART_SetErrorHandler:	
  3051                           ; 1 bytes @ 0x1
  3052                           
  3053  0071                     ??_EUSART_DefaultErrorHandler:	
  3054                           ; 1 bytes @ 0x1
  3055                           
  3056  0071                     ??_PIN_MANAGER_Initialize:	
  3057                           ; 1 bytes @ 0x1
  3058                           
  3059  0071                     ??_OSCILLATOR_Initialize:	
  3060                           ; 1 bytes @ 0x1
  3061                           
  3062  0071                     ??_WDT_Initialize:	
  3063                           ; 1 bytes @ 0x1
  3064                           
  3065  0071                     ??_TMR2_Initialize:	
  3066                           ; 1 bytes @ 0x1
  3067                           
  3068  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  3069                           ; 1 bytes @ 0x1
  3070                           
  3071  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3072                           ; 1 bytes @ 0x1
  3073                           
  3074  0071                     ??_check_data:	
  3075                           ; 1 bytes @ 0x1
  3076                           
  3077  0071                     ??_LED_PROCESS:	
  3078                           ; 1 bytes @ 0x1
  3079                           
  3080  0071                     ??_MTOUCH_Button_isPressed:	
  3081                           ; 1 bytes @ 0x1
  3082                           
  3083  0071                     ??_RELAY_PROCESS:	
  3084                           ; 1 bytes @ 0x1
  3085                           
  3086  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3087                           ; 1 bytes @ 0x1
  3088                           
  3089  0071                     ??_MTOUCH_needReburst:	
  3090                           ; 1 bytes @ 0x1
  3091                           
  3092  0071                     ?_Sensor_DefaultCallback:	
  3093                           ; 1 bytes @ 0x1
  3094                           
  3095  0071                     ??_Sensor_Sampled_Reset:	
  3096                           ; 1 bytes @ 0x1
  3097                           
  3098  0071                     ??_Sensor_isEnabled:	
  3099                           ; 1 bytes @ 0x1
  3100                           
  3101  0071                     ??_Sensor_setSampled:	
  3102                           ; 1 bytes @ 0x1
  3103                           
  3104  0071                     ??_Sensor_isActive:	
  3105                           ; 1 bytes @ 0x1
  3106                           
  3107  0071                     ??_Sensor_isCalibrated:	
  3108                           ; 1 bytes @ 0x1
  3109                           
  3110  0071                     ??_Sensor_setActive:	
  3111                           ; 1 bytes @ 0x1
  3112                           
  3113  0071                     ??_Sensor_setInactive:	
  3114                           ; 1 bytes @ 0x1
  3115                           
  3116  0071                     ??_Sensor_isCalibratingAcqTime:	
  3117                           ; 1 bytes @ 0x1
  3118                           
  3119  0071                     ??_Sensor_setCalibratAcqTime:	
  3120                           ; 1 bytes @ 0x1
  3121                           
  3122  0071                     ??_Sensor_setCalibrated:	
  3123                           ; 1 bytes @ 0x1
  3124                           
  3125  0071                     ?_memcpy:	
  3126                           ; 1 bytes @ 0x1
  3127                           
  3128  0071                     ??_Button_Deviation_Update:	
  3129                           ; 1 bytes @ 0x1
  3130                           
  3131  0071                     ??_Button_Baseline_Update:	
  3132                           ; 1 bytes @ 0x1
  3133                           
  3134  0071                     ??_Button_Tick_helper:	
  3135                           ; 1 bytes @ 0x1
  3136                           
  3137  0071                     ??_EUSART_is_rx_ready:	
  3138                           ; 1 bytes @ 0x1
  3139                           
  3140  0071                     ??_EUSART_Read:	
  3141                           ; 1 bytes @ 0x1
  3142                           
  3143  0071                     ??_EUSART_Write:	
  3144                           ; 1 bytes @ 0x1
  3145                           
  3146  0071                     ??_INTERRUPT_InterruptManager:	
  3147                           ; 1 bytes @ 0x1
  3148                           
  3149  0071                     ??_TMR2_StartTimer:	
  3150                           ; 1 bytes @ 0x1
  3151                           
  3152  0071                     ??_TMR2_StopTimer:	
  3153                           ; 1 bytes @ 0x1
  3154                           
  3155  0071                     ??_TMR2_LoadPeriodRegister:	
  3156                           ; 1 bytes @ 0x1
  3157                           
  3158  0071                     ??_Sensor_getScanGroupIndex:	
  3159                           ; 1 bytes @ 0x1
  3160                           
  3161  0071                     ?___bmul:	
  3162                           ; 1 bytes @ 0x1
  3163                           
  3164  0071                     ?_abs:	
  3165                           ; 1 bytes @ 0x1
  3166                           
  3167  0071                     ?_strlen:	
  3168                           ; 2 bytes @ 0x1
  3169                           
  3170  0071                     EUSART_Write@txData:	
  3171                           ; 2 bytes @ 0x1
  3172                           
  3173  0071                     TMR2_LoadPeriodRegister@periodVal:	
  3174                           ; 1 bytes @ 0x1
  3175                           
  3176  0071                     Sensor_DefaultCallback@sensor:	
  3177                           ; 1 bytes @ 0x1
  3178                           
  3179  0071                     Sensor_setActive@sensor:	
  3180                           ; 1 bytes @ 0x1
  3181                           
  3182  0071                     Sensor_setInactive@sensor:	
  3183                           ; 1 bytes @ 0x1
  3184                           
  3185  0071                     Sensor_isActive@sensor:	
  3186                           ; 1 bytes @ 0x1
  3187                           
  3188  0071                     Sensor_isCalibrated@sensor:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  0071                     Sensor_setCalibrated@sensor:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  0071                     Sensor_setCalibratAcqTime@sensor:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  0071                     Sensor_isCalibratingAcqTime@sensor:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  0071                     Sensor_Sampled_Reset@sensor:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203  0071                     Sensor_setSampled@sensor:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  0071                     ___bmul@multiplicand:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3210                           ; 1 bytes @ 0x1
  3211                           
  3212  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3213                           ; 2 bytes @ 0x1
  3214                           
  3215  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3216                           ; 2 bytes @ 0x1
  3217                           
  3218  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3219                           ; 2 bytes @ 0x1
  3220                           
  3221  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  3222                           ; 2 bytes @ 0x1
  3223                           
  3224  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3225                           ; 2 bytes @ 0x1
  3226                           
  3227  0071                     abs@a:	
  3228                           ; 2 bytes @ 0x1
  3229                           
  3230  0071                     memcpy@s1:	
  3231                           ; 2 bytes @ 0x1
  3232                           
  3233                           
  3234                           ; 2 bytes @ 0x1
  3235  0071                     	ds	1
  3236  0072                     ??_myButtonReleasedCallback:	
  3237  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3238                           ; 1 bytes @ 0x2
  3239                           
  3240  0072                     ??_Sensor_DefaultCallback:	
  3241                           ; 1 bytes @ 0x2
  3242                           
  3243  0072                     ??_putch:	
  3244                           ; 1 bytes @ 0x2
  3245                           
  3246  0072                     ?_Sensor_loadADCSettings:	
  3247                           ; 1 bytes @ 0x2
  3248                           
  3249  0072                     ??___bmul:	
  3250                           ; 1 bytes @ 0x2
  3251                           
  3252  0072                     EUSART_Read@readValue:	
  3253                           ; 1 bytes @ 0x2
  3254                           
  3255  0072                     putch@txData:	
  3256                           ; 1 bytes @ 0x2
  3257                           
  3258  0072                     Sensor_loadADCSettings@adc_index:	
  3259                           ; 1 bytes @ 0x2
  3260                           
  3261  0072                     Sensor_isEnabled@sensor:	
  3262                           ; 1 bytes @ 0x2
  3263                           
  3264  0072                     MTOUCH_Button_isPressed@name:	
  3265                           ; 1 bytes @ 0x2
  3266                           
  3267                           
  3268                           ; 1 bytes @ 0x2
  3269  0072                     	ds	1
  3270  0073                     ??_EUSART_SetRxInterruptHandler:	
  3271  0073                     ??_EUSART_SetFramingErrorHandler:	
  3272                           ; 1 bytes @ 0x3
  3273                           
  3274  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3275                           ; 1 bytes @ 0x3
  3276                           
  3277  0073                     ??_EUSART_SetErrorHandler:	
  3278                           ; 1 bytes @ 0x3
  3279                           
  3280  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3281                           ; 1 bytes @ 0x3
  3282                           
  3283  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3284                           ; 1 bytes @ 0x3
  3285                           
  3286  0073                     ??_abs:	
  3287                           ; 1 bytes @ 0x3
  3288                           
  3289  0073                     ??_strlen:	
  3290                           ; 1 bytes @ 0x3
  3291                           
  3292  0073                     ??_EUSART_Initialize:	
  3293                           ; 1 bytes @ 0x3
  3294                           
  3295  0073                     ??_Sensor_loadADCSettings:	
  3296                           ; 1 bytes @ 0x3
  3297                           
  3298  0073                     ?_fputc:	
  3299                           ; 1 bytes @ 0x3
  3300                           
  3301  0073                     check_data@x:	
  3302                           ; 2 bytes @ 0x3
  3303                           
  3304  0073                     LED_PROCESS@x:	
  3305                           ; 1 bytes @ 0x3
  3306                           
  3307  0073                     Sensor_getScanGroupIndex@sensor:	
  3308                           ; 1 bytes @ 0x3
  3309                           
  3310  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3311                           ; 1 bytes @ 0x3
  3312                           
  3313  0073                     Button_Tick_helper@button:	
  3314                           ; 1 bytes @ 0x3
  3315                           
  3316  0073                     RELAY_PROCESS@x:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  0073                     ___bmul@product:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  0073                     memcpy@n:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  0073                     fputc@c:	
  3326                           ; 2 bytes @ 0x3
  3327                           
  3328                           
  3329                           ; 2 bytes @ 0x3
  3330  0073                     	ds	1
  3331  0074                     ?_myButtonPressedCallback:	
  3332  0074                     ?_myButtonReleasedCallback:	
  3333                           ; 1 bytes @ 0x4
  3334                           
  3335  0074                     ??_MTOUCH_Button_Tick:	
  3336                           ; 1 bytes @ 0x4
  3337                           
  3338  0074                     ?_Button_DefaultCallback:	
  3339                           ; 1 bytes @ 0x4
  3340                           
  3341  0074                     myButtonPressedCallback@button:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0074                     myButtonReleasedCallback@button:	
  3345                           ; 1 bytes @ 0x4
  3346                           
  3347  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3348                           ; 1 bytes @ 0x4
  3349                           
  3350  0074                     Button_DefaultCallback@button:	
  3351                           ; 1 bytes @ 0x4
  3352                           
  3353  0074                     ___bmul@multiplier:	
  3354                           ; 1 bytes @ 0x4
  3355                           
  3356  0074                     strlen@a:	
  3357                           ; 1 bytes @ 0x4
  3358                           
  3359                           
  3360                           ; 1 bytes @ 0x4
  3361  0074                     	ds	1
  3362  0075                     ??_myButtonPressedCallback:	
  3363  0075                     ??_MTOUCH_Sensor_Enable:	
  3364                           ; 1 bytes @ 0x5
  3365                           
  3366  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3367                           ; 1 bytes @ 0x5
  3368                           
  3369  0075                     ??_Sensor_RawSample_Update:	
  3370                           ; 1 bytes @ 0x5
  3371                           
  3372  0075                     ??_Sensor_postAcquisitionProcess:	
  3373                           ; 1 bytes @ 0x5
  3374                           
  3375  0075                     ??_Sensor_autoCalibration:	
  3376                           ; 1 bytes @ 0x5
  3377                           
  3378  0075                     ??_Button_DefaultCallback:	
  3379                           ; 1 bytes @ 0x5
  3380                           
  3381  0075                     ??_memcpy:	
  3382                           ; 1 bytes @ 0x5
  3383                           
  3384  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3385                           ; 1 bytes @ 0x5
  3386                           
  3387  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3388                           ; 1 bytes @ 0x5
  3389                           
  3390  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3391                           ; 1 bytes @ 0x5
  3392                           
  3393  0075                     MTOUCH_Button_Tick@i:	
  3394                           ; 2 bytes @ 0x5
  3395                           
  3396  0075                     fputc@fp:	
  3397                           ; 1 bytes @ 0x5
  3398                           
  3399  0075                     strlen@s:	
  3400                           ; 1 bytes @ 0x5
  3401                           
  3402                           
  3403                           ; 1 bytes @ 0x5
  3404  0075                     	ds	1
  3405  0076                     ??_MTOUCH_Tick:	
  3406  0076                     ??_fputc:	
  3407                           ; 1 bytes @ 0x6
  3408                           
  3409  0076                     Sensor_RawSample_Update@adcIndex:	
  3410                           ; 1 bytes @ 0x6
  3411                           
  3412  0076                     MTOUCH_Sensor_Enable@sensor:	
  3413                           ; 1 bytes @ 0x6
  3414                           
  3415  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3416                           ; 1 bytes @ 0x6
  3417                           
  3418  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3419                           ; 1 bytes @ 0x6
  3420                           
  3421  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3422                           ; 1 bytes @ 0x6
  3423                           
  3424  0076                     memcpy@tmp:	
  3425                           ; 1 bytes @ 0x6
  3426                           
  3427  0076                     Sensor_postAcquisitionProcess@deviation:	
  3428                           ; 1 bytes @ 0x6
  3429                           
  3430  0076                     _Sensor_loadADCSettings$1223:	
  3431                           ; 2 bytes @ 0x6
  3432                           
  3433                           
  3434                           ; 2 bytes @ 0x6
  3435  0076                     	ds	1
  3436  0077                     ??_MTOUCH_Sensor_Initialize:	
  3437  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3438                           ; 1 bytes @ 0x7
  3439                           
  3440  0077                     ??_MTOUCH_Button_Initialize:	
  3441                           ; 1 bytes @ 0x7
  3442                           
  3443  0077                     Sensor_RawSample_Update@sensor:	
  3444                           ; 1 bytes @ 0x7
  3445                           
  3446  0077                     Button_Baseline_Update@button:	
  3447                           ; 1 bytes @ 0x7
  3448                           
  3449  0077                     memcpy@s:	
  3450                           ; 1 bytes @ 0x7
  3451                           
  3452                           
  3453                           ; 2 bytes @ 0x7
  3454  0077                     	ds	1
  3455  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3456  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3457                           ; 1 bytes @ 0x8
  3458                           
  3459  0078                     Sensor_loadADCSettings@addressOffset:	
  3460                           ; 1 bytes @ 0x8
  3461                           
  3462  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3463                           ; 1 bytes @ 0x8
  3464                           
  3465                           
  3466                           ; 1 bytes @ 0x8
  3467  0078                     	ds	1
  3468  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3469  0079                     ??_Button_Reading_Update_Helper:	
  3470                           ; 1 bytes @ 0x9
  3471                           
  3472  0079                     Sensor_postAcquisitionProcess@sensor:	
  3473                           ; 1 bytes @ 0x9
  3474                           
  3475  0079                     Sensor_loadADCSettings@sensor:	
  3476                           ; 1 bytes @ 0x9
  3477                           
  3478  0079                     Sensor_autoCalibration@adcIndex:	
  3479                           ; 1 bytes @ 0x9
  3480                           
  3481  0079                     MTOUCH_Button_Initialize@name:	
  3482                           ; 1 bytes @ 0x9
  3483                           
  3484  0079                     Button_Baseline_Initialize@button:	
  3485                           ; 1 bytes @ 0x9
  3486                           
  3487  0079                     memcpy@d1:	
  3488                           ; 1 bytes @ 0x9
  3489                           
  3490                           
  3491                           ; 1 bytes @ 0x9
  3492  0079                     	ds	1
  3493  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3494  007A                     Sensor_autoCalibration@sensor:	
  3495                           ; 1 bytes @ 0xA
  3496                           
  3497  007A                     MTOUCH_Button_Initialize@button:	
  3498                           ; 1 bytes @ 0xA
  3499                           
  3500  007A                     memcpy@d:	
  3501                           ; 1 bytes @ 0xA
  3502                           
  3503                           
  3504                           ; 1 bytes @ 0xA
  3505  007A                     	ds	1
  3506  007B                     ??_MTOUCH_Button_InitializeAll:	
  3507  007B                     ?_Sensor_Acq_ExecutePacket:	
  3508                           ; 1 bytes @ 0xB
  3509                           
  3510  007B                     ?_fputs:	
  3511                           ; 1 bytes @ 0xB
  3512                           
  3513  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3514                           ; 2 bytes @ 0xB
  3515                           
  3516  007B                     Button_Reading_Update_Helper@button:	
  3517                           ; 1 bytes @ 0xB
  3518                           
  3519  007B                     fputs@fp:	
  3520                           ; 1 bytes @ 0xB
  3521                           
  3522                           
  3523                           ; 1 bytes @ 0xB
  3524  007B                     	ds	1
  3525  007C                     ??_MTOUCH_Initialize:	
  3526  007C                     ??_Button_Reading_Update:	
  3527                           ; 1 bytes @ 0xC
  3528                           
  3529  007C                     ??_SYSTEM_Initialize:	
  3530                           ; 1 bytes @ 0xC
  3531                           
  3532  007C                     ??_update_state:	
  3533                           ; 1 bytes @ 0xC
  3534                           
  3535                           
  3536                           	psect	cstackBANK0
  3537  0020                     __pcstackBANK0:	
  3538                           ; 1 bytes @ 0xC
  3539                           
  3540  0020                     ??_Sensor_Acq_ExecutePacket:	
  3541  0020                     ??_Button_Baseline_Initialize:	
  3542                           ; 1 bytes @ 0x0
  3543                           
  3544  0020                     ??_fputs:	
  3545                           ; 1 bytes @ 0x0
  3546                           
  3547  0020                     MTOUCH_Button_InitializeAll@button:	
  3548                           ; 1 bytes @ 0x0
  3549                           
  3550  0020                     Button_Deviation_Update@button:	
  3551                           ; 1 bytes @ 0x0
  3552                           
  3553  0020                     Button_Reading_Update@button:	
  3554                           ; 1 bytes @ 0x0
  3555                           
  3556                           
  3557                           ; 1 bytes @ 0x0
  3558  0020                     	ds	1
  3559  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3560  0021                     Button_Deviation_Update@deviation:	
  3561                           ; 1 bytes @ 0x1
  3562                           
  3563                           
  3564                           ; 4 bytes @ 0x1
  3565  0021                     	ds	1
  3566  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3567                           
  3568                           ; 1 bytes @ 0x2
  3569  0022                     	ds	1
  3570  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3571  0023                     fputs@c:	
  3572                           ; 1 bytes @ 0x3
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0x3
  3576  0023                     	ds	1
  3577  0024                     ?_Button_State_Initializing:	
  3578  0024                     ?_Button_State_NotPressed:	
  3579                           ; 1 bytes @ 0x4
  3580                           
  3581  0024                     ?_Button_State_Pressed:	
  3582                           ; 1 bytes @ 0x4
  3583                           
  3584  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3585                           ; 1 bytes @ 0x4
  3586                           
  3587  0024                     Button_State_Initializing@button:	
  3588                           ; 1 bytes @ 0x4
  3589                           
  3590  0024                     Button_State_NotPressed@button:	
  3591                           ; 1 bytes @ 0x4
  3592                           
  3593  0024                     Button_State_Pressed@button:	
  3594                           ; 1 bytes @ 0x4
  3595                           
  3596  0024                     fputs@i:	
  3597                           ; 1 bytes @ 0x4
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x4
  3601  0024                     	ds	1
  3602  0025                     ??_Button_State_Initializing:	
  3603  0025                     ??_Button_State_NotPressed:	
  3604                           ; 1 bytes @ 0x5
  3605                           
  3606  0025                     ??_Button_State_Pressed:	
  3607                           ; 1 bytes @ 0x5
  3608                           
  3609  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3610                           ; 1 bytes @ 0x5
  3611                           
  3612                           
  3613                           ; 1 bytes @ 0x5
  3614  0025                     	ds	1
  3615  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3616  0026                     fputs@s:	
  3617                           ; 1 bytes @ 0x6
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0x6
  3621  0026                     	ds	1
  3622  0027                     ?_pad:	
  3623  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3624                           ; 2 bytes @ 0x7
  3625                           
  3626  0027                     pad@buf:	
  3627                           ; 1 bytes @ 0x7
  3628                           
  3629                           
  3630                           ; 1 bytes @ 0x7
  3631  0027                     	ds	1
  3632  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3633  0028                     pad@p:	
  3634                           ; 2 bytes @ 0x8
  3635                           
  3636                           
  3637                           ; 2 bytes @ 0x8
  3638  0028                     	ds	1
  3639  0029                     ??_Button_Service:	
  3640                           
  3641                           ; 1 bytes @ 0x9
  3642  0029                     	ds	1
  3643  002A                     ??_pad:	
  3644  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3645                           ; 1 bytes @ 0xA
  3646                           
  3647                           
  3648                           ; 2 bytes @ 0xA
  3649  002A                     	ds	1
  3650  002B                     Button_Service@name:	
  3651  002B                     pad@i:	
  3652                           ; 1 bytes @ 0xB
  3653                           
  3654                           
  3655                           ; 2 bytes @ 0xB
  3656  002B                     	ds	1
  3657  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3658  002C                     Button_Service@button:	
  3659                           ; 1 bytes @ 0xC
  3660                           
  3661                           
  3662                           ; 1 bytes @ 0xC
  3663  002C                     	ds	1
  3664  002D                     ??_MTOUCH_Button_ServiceAll:	
  3665  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3666                           ; 1 bytes @ 0xD
  3667                           
  3668  002D                     pad@w:	
  3669                           ; 1 bytes @ 0xD
  3670                           
  3671                           
  3672                           ; 2 bytes @ 0xD
  3673  002D                     	ds	1
  3674  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3675  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3676                           ; 1 bytes @ 0xE
  3677                           
  3678  002E                     MTOUCH_Button_ServiceAll@button:	
  3679                           ; 1 bytes @ 0xE
  3680                           
  3681                           
  3682                           ; 1 bytes @ 0xE
  3683  002E                     	ds	1
  3684  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3685  002F                     pad@fp:	
  3686                           ; 1 bytes @ 0xF
  3687                           
  3688                           
  3689                           ; 1 bytes @ 0xF
  3690  002F                     	ds	1
  3691  0030                     ?_ctoa:	
  3692  0030                     ctoa@c:	
  3693                           ; 2 bytes @ 0x10
  3694                           
  3695                           
  3696                           ; 1 bytes @ 0x10
  3697  0030                     	ds	1
  3698  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3699                           
  3700                           ; 1 bytes @ 0x11
  3701  0031                     	ds	1
  3702  0032                     ??_ctoa:	
  3703  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3704                           ; 1 bytes @ 0x12
  3705                           
  3706                           
  3707                           ; 2 bytes @ 0x12
  3708  0032                     	ds	1
  3709  0033                     ctoa@w:	
  3710                           
  3711                           ; 2 bytes @ 0x13
  3712  0033                     	ds	1
  3713  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3714                           
  3715                           ; 1 bytes @ 0x14
  3716  0034                     	ds	1
  3717  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3718  0035                     ctoa@fp:	
  3719                           ; 1 bytes @ 0x15
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x15
  3723  0035                     	ds	1
  3724  0036                     ?_vfpfcnvrt:	
  3725  0036                     vfpfcnvrt@fmt:	
  3726                           ; 2 bytes @ 0x16
  3727                           
  3728  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3729                           ; 1 bytes @ 0x16
  3730                           
  3731                           
  3732                           ; 4 bytes @ 0x16
  3733  0036                     	ds	1
  3734  0037                     vfpfcnvrt@ap:	
  3735                           
  3736                           ; 1 bytes @ 0x17
  3737  0037                     	ds	1
  3738  0038                     ??_vfpfcnvrt:	
  3739                           
  3740                           ; 1 bytes @ 0x18
  3741  0038                     	ds	2
  3742  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3743                           
  3744                           ; 1 bytes @ 0x1A
  3745  003A                     	ds	1
  3746  003B                     ?_Sensor_Acquisition:	
  3747  003B                     Sensor_Acquisition@sensor_adc2:	
  3748                           ; 1 bytes @ 0x1B
  3749                           
  3750                           
  3751                           ; 1 bytes @ 0x1B
  3752  003B                     	ds	1
  3753  003C                     ??_Sensor_Acquisition:	
  3754                           
  3755                           ; 1 bytes @ 0x1C
  3756  003C                     	ds	1
  3757  003D                     Sensor_Acquisition@retry:	
  3758  003D                     vfpfcnvrt@c:	
  3759                           ; 1 bytes @ 0x1D
  3760                           
  3761                           
  3762                           ; 1 bytes @ 0x1D
  3763  003D                     	ds	1
  3764  003E                     Sensor_Acquisition@sensor_adc1:	
  3765  003E                     vfpfcnvrt@fp:	
  3766                           ; 1 bytes @ 0x1E
  3767                           
  3768                           
  3769                           ; 1 bytes @ 0x1E
  3770  003E                     	ds	1
  3771  003F                     ??_Sensor_Service:	
  3772  003F                     ?_vfprintf:	
  3773                           ; 1 bytes @ 0x1F
  3774                           
  3775  003F                     vfprintf@fmt:	
  3776                           ; 2 bytes @ 0x1F
  3777                           
  3778                           
  3779                           ; 2 bytes @ 0x1F
  3780  003F                     	ds	2
  3781  0041                     vfprintf@ap:	
  3782                           
  3783                           ; 1 bytes @ 0x21
  3784  0041                     	ds	1
  3785  0042                     ??_vfprintf:	
  3786  0042                     Sensor_Service@scanGroup:	
  3787                           ; 1 bytes @ 0x22
  3788                           
  3789                           
  3790                           ; 1 bytes @ 0x22
  3791  0042                     	ds	1
  3792  0043                     Sensor_Service@error:	
  3793                           
  3794                           ; 1 bytes @ 0x23
  3795  0043                     	ds	1
  3796  0044                     Sensor_Service@sensor_adc1:	
  3797  0044                     vfprintf@fp:	
  3798                           ; 1 bytes @ 0x24
  3799                           
  3800                           
  3801                           ; 1 bytes @ 0x24
  3802  0044                     	ds	1
  3803  0045                     Sensor_Service@sensor_adc2:	
  3804  0045                     vfprintf@cfmt:	
  3805                           ; 1 bytes @ 0x25
  3806                           
  3807                           
  3808                           ; 2 bytes @ 0x25
  3809  0045                     	ds	1
  3810  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3811                           
  3812                           ; 1 bytes @ 0x26
  3813  0046                     	ds	1
  3814  0047                     ?_printf:	
  3815  0047                     MTOUCH_Sensor_SampleAll@group:	
  3816                           ; 2 bytes @ 0x27
  3817                           
  3818  0047                     printf@fmt:	
  3819                           ; 1 bytes @ 0x27
  3820                           
  3821                           
  3822                           ; 2 bytes @ 0x27
  3823  0047                     	ds	1
  3824  0048                     ??_MTOUCH_Service_Mainloop:	
  3825                           
  3826                           ; 1 bytes @ 0x28
  3827  0048                     	ds	3
  3828  004B                     ??_printf:	
  3829                           
  3830                           ; 1 bytes @ 0x2B
  3831  004B                     	ds	3
  3832  004E                     printf@ap:	
  3833                           
  3834                           ; 1 bytes @ 0x2E
  3835  004E                     	ds	1
  3836  004F                     ??_check_message:	
  3837  004F                     ??_DATA_PROCESS:	
  3838                           ; 1 bytes @ 0x2F
  3839                           
  3840                           
  3841                           ; 1 bytes @ 0x2F
  3842  004F                     	ds	2
  3843  0051                     DATA_PROCESS@x:	
  3844  0051                     check_message@x:	
  3845                           ; 1 bytes @ 0x31
  3846                           
  3847                           
  3848                           ; 1 bytes @ 0x31
  3849  0051                     	ds	1
  3850                           
  3851                           	psect	maintext
  3852  0212                     __pmaintext:	
  3853 ;;
  3854 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3855 ;;
  3856 ;; *************** function _main *****************
  3857 ;; Defined at:
  3858 ;;		line 18 in file "main.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;		None
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : B1F/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3872 ;;      Params:         0       0       0       0       0       0       0       0
  3873 ;;      Locals:         0       0       0       0       0       0       0       0
  3874 ;;      Temps:          0       0       2       0       0       0       0       0
  3875 ;;      Totals:         0       0       2       0       0       0       0       0
  3876 ;;Total ram usage:        2 bytes
  3877 ;; Hardware stack levels required when called:   15
  3878 ;; This function calls:
  3879 ;;		_DATA_PROCESS
  3880 ;;		_EUSART_Read
  3881 ;;		_EUSART_is_rx_ready
  3882 ;;		_LED_PROCESS
  3883 ;;		_MTOUCH_Button_SetNotPressedCallback
  3884 ;;		_MTOUCH_Button_SetPressedCallback
  3885 ;;		_MTOUCH_Button_isPressed
  3886 ;;		_MTOUCH_Service_Mainloop
  3887 ;;		_SYSTEM_Initialize
  3888 ;;		_check_data
  3889 ;;		_check_message
  3890 ;;		_printf
  3891 ;; This function is called by:
  3892 ;;		Startup code after reset
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           
  3897                           ;psect for function _main
  3898  0212                     _main:	
  3899                           
  3900                           ;main.c: 20:     SYSTEM_Initialize();
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3904  0212  3197  2728  3182   	fcall	_SYSTEM_Initialize
  3905                           
  3906                           ;main.c: 21:     (INTCONbits.GIE = 1);
  3907  0215  178B               	bsf	11,7	;volatile
  3908                           
  3909                           ;main.c: 22:     (INTCONbits.PEIE = 1);
  3910  0216  170B               	bsf	11,6	;volatile
  3911                           
  3912                           ;main.c: 23:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3913  0217  305E               	movlw	low _myButtonPressedCallback
  3914  0218  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3915  0219  3009               	movlw	high _myButtonPressedCallback
  3916  021A  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3917  021B  3195  25F1  3182   	fcall	_MTOUCH_Button_SetPressedCallback
  3918                           
  3919                           ;main.c: 24:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3920  021E  30C5               	movlw	low _myButtonReleasedCallback
  3921  021F  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3922  0220  3015               	movlw	high _myButtonReleasedCallback
  3923  0221  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3924  0222  3195  25EB  3182   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3925  0225  0022               	movlb	2	; select bank2
  3926  0226  110C               	bcf	12,2	;volatile
  3927                           
  3928                           ;main.c: 26:     last_touch_status.full_status = 0x00;
  3929  0227  0020               	movlb	0	; select bank0
  3930  0228  01DC               	clrf	_last_touch_status
  3931  0229  01DD               	clrf	_last_touch_status+1
  3932  022A                     l6440:	
  3933                           
  3934                           ;main.c: 28:     {;main.c: 29:         if(EUSART_is_rx_ready())
  3935  022A  3195  25CA  3182   	fcall	_EUSART_is_rx_ready
  3936  022D  3A00               	xorlw	0
  3937  022E  1903               	skipnz
  3938  022F  2A8F               	goto	l6478
  3939                           
  3940                           ;main.c: 30:         {;main.c: 31:             rxData = EUSART_Read();
  3941  0230  3188  2076  3182   	fcall	_EUSART_Read
  3942  0233  0021               	movlb	1	; select bank1
  3943  0234  00EA               	movwf	??_main^(0+128)
  3944  0235  086A               	movf	??_main^(0+128),w
  3945  0236  0020               	movlb	0	; select bank0
  3946  0237  00E8               	movwf	_rxData
  3947                           
  3948                           ;main.c: 32:             if(check_data(rxData))
  3949  0238  0868               	movf	_rxData,w
  3950  0239  318B  2370  3182   	fcall	_check_data
  3951  023C  3A00               	xorlw	0
  3952  023D  1903               	skipnz
  3953  023E  2A8F               	goto	l6478
  3954                           
  3955                           ;main.c: 33:             {;main.c: 34:                 if(check_request == 0)
  3956  023F  0020               	movlb	0	; select bank0
  3957  0240  0864               	movf	_check_request,w
  3958  0241  1D03               	btfss	3,2
  3959  0242  2A4E               	goto	l6452
  3960                           
  3961                           ;main.c: 35:                 {;main.c: 36:                     prcData = rxData;
  3962  0243  0868               	movf	_rxData,w
  3963  0244  0021               	movlb	1	; select bank1
  3964  0245  00EA               	movwf	??_main^(0+128)
  3965  0246  086A               	movf	??_main^(0+128),w
  3966  0247  0020               	movlb	0	; select bank0
  3967  0248  00E7               	movwf	_prcData
  3968                           
  3969                           ;main.c: 37:                     check_message(rxData);
  3970  0249  0868               	movf	_rxData,w
  3971  024A  3189  210E  3182   	fcall	_check_message
  3972                           
  3973                           ;main.c: 38:                 }
  3974  024D  2A8F               	goto	l6478
  3975  024E                     l6452:	
  3976                           
  3977                           ;main.c: 40:                 {;main.c: 41:                     if(config_status == 1)
  3978  024E  0365               	decf	_config_status,w
  3979  024F  1D03               	btfss	3,2
  3980  0250  2A82               	goto	l6470
  3981                           
  3982                           ;main.c: 42:                     {;main.c: 43:                         if(rxData == 'T')
  3983  0251  3054               	movlw	84
  3984  0252  0668               	xorwf	_rxData,w
  3985  0253  1D03               	btfss	3,2
  3986  0254  2A69               	goto	l6462
  3987                           
  3988                           ;main.c: 44:                         {;main.c: 45:                             LED_PROCE
      +                          SS(15);
  3989  0255  300F               	movlw	15
  3990  0256  3186  26EC  3182   	fcall	_LED_PROCESS
  3991                           
  3992                           ;main.c: 46:                             _delay((unsigned long)((2000)*(32000000/4000.0)
      +                          ));
  3993  0259  3052               	movlw	82
  3994  025A  0021               	movlb	1	; select bank1
  3995  025B  00EB               	movwf	(??_main^(0+128)+1)
  3996  025C  302B               	movlw	43
  3997  025D  00EA               	movwf	??_main^(0+128)
  3998  025E  3000               	movlw	0
  3999  025F                     u5187:	
  4000  025F  0B89               	decfsz	9,f
  4001  0260  2A5F               	goto	u5187
  4002  0261  0BEA               	decfsz	??_main^(0+128),f
  4003  0262  2A5F               	goto	u5187
  4004  0263  0BEB               	decfsz	(??_main^(0+128)+1),f
  4005  0264  2A5F               	goto	u5187
  4006  0265  0000               	nop
  4007                           
  4008                           ;main.c: 48:                             rest = 1;
  4009  0266  0020               	movlb	0	; select bank0
  4010  0267  01E6               	clrf	_rest
  4011  0268  0AE6               	incf	_rest,f
  4012  0269                     l6462:	
  4013                           
  4014                           ;main.c: 50:                         if(rxData == 'F')
  4015  0269  3046               	movlw	70
  4016  026A  0668               	xorwf	_rxData,w
  4017  026B  1D03               	btfss	3,2
  4018  026C  2A8F               	goto	l6478
  4019                           
  4020                           ;main.c: 51:                         {;main.c: 52:                             LED_PROCE
      +                          SS(0);
  4021  026D  3000               	movlw	0
  4022  026E  3186  26EC  3182   	fcall	_LED_PROCESS
  4023                           
  4024                           ;main.c: 53:                             _delay((unsigned long)((2000)*(32000000/4000.0)
      +                          ));
  4025  0271  3052               	movlw	82
  4026  0272  0021               	movlb	1	; select bank1
  4027  0273  00EB               	movwf	(??_main^(0+128)+1)
  4028  0274  302B               	movlw	43
  4029  0275  00EA               	movwf	??_main^(0+128)
  4030  0276  3000               	movlw	0
  4031  0277                     u5197:	
  4032  0277  0B89               	decfsz	9,f
  4033  0278  2A77               	goto	u5197
  4034  0279  0BEA               	decfsz	??_main^(0+128),f
  4035  027A  2A77               	goto	u5197
  4036  027B  0BEB               	decfsz	(??_main^(0+128)+1),f
  4037  027C  2A77               	goto	u5197
  4038  027D  0000               	nop
  4039                           
  4040                           ;main.c: 55:                             rest = 1;
  4041  027E  0020               	movlb	0	; select bank0
  4042  027F  01E6               	clrf	_rest
  4043  0280  0AE6               	incf	_rest,f
  4044  0281  2A8F               	goto	l6478
  4045  0282                     l6470:	
  4046                           
  4047                           ;main.c: 59:                     {;main.c: 60:                         if(rxData == 'T')
  4048  0282  3054               	movlw	84
  4049  0283  0668               	xorwf	_rxData,w
  4050  0284  1D03               	btfss	3,2
  4051  0285  2A8A               	goto	l6474
  4052                           
  4053                           ;main.c: 61:                         {;main.c: 62:                             DATA_PROC
      +                          ESS(prcData);
  4054  0286  0867               	movf	_prcData,w
  4055  0287  3184  245B  3182   	fcall	_DATA_PROCESS
  4056  028A                     l6474:	
  4057                           
  4058                           ;main.c: 64:                         if(rxData == 'F')
  4059  028A  3046               	movlw	70
  4060  028B  0020               	movlb	0	; select bank0
  4061  028C  0668               	xorwf	_rxData,w
  4062  028D  1903               	btfsc	3,2
  4063                           
  4064                           ;main.c: 65:                         {;main.c: 66:                             check_req
      +                          uest = 0;
  4065  028E  01E4               	clrf	_check_request
  4066  028F                     l6478:	
  4067                           ;main.c: 70:             }
  4068                           
  4069                           
  4070                           ;main.c: 72:         if(MTOUCH_Service_Mainloop())
  4071  028F  3188  2021  3182   	fcall	_MTOUCH_Service_Mainloop
  4072  0292  3A00               	xorlw	0
  4073  0293  1903               	skipnz
  4074  0294  2A2A               	goto	l6440
  4075                           
  4076                           ;main.c: 73:         {;main.c: 74:             if(config_status == 0)
  4077  0295  0020               	movlb	0	; select bank0
  4078  0296  0865               	movf	_config_status,w
  4079  0297  1D03               	btfss	3,2
  4080  0298  2ADA               	goto	l6508
  4081                           
  4082                           ;main.c: 75:             {;main.c: 76:                 if(MTOUCH_Button_isPressed(0) == 
      +                          1 && MTOUCH_Button_isPressed(1) == 0 && MTOUCH_Button_isPressed(2) == 0&& MTOUCH_Button_
      +                          isPressed(3) == 1)
  4083  0299  3000               	movlw	0
  4084  029A  3188  2006  3182   	fcall	_MTOUCH_Button_isPressed
  4085  029D  3A01               	xorlw	1
  4086  029E  1D03               	skipz
  4087  029F  2AD6               	goto	l6506
  4088  02A0  3001               	movlw	1
  4089  02A1  3188  2006  3182   	fcall	_MTOUCH_Button_isPressed
  4090  02A4  3A00               	xorlw	0
  4091  02A5  1D03               	skipz
  4092  02A6  2AD6               	goto	l6506
  4093  02A7  3002               	movlw	2
  4094  02A8  3188  2006  3182   	fcall	_MTOUCH_Button_isPressed
  4095  02AB  3A00               	xorlw	0
  4096  02AC  1D03               	skipz
  4097  02AD  2AD6               	goto	l6506
  4098  02AE  3003               	movlw	3
  4099  02AF  3188  2006  3182   	fcall	_MTOUCH_Button_isPressed
  4100  02B2  3A01               	xorlw	1
  4101  02B3  1D03               	skipz
  4102  02B4  2AD6               	goto	l6506
  4103                           
  4104                           ;main.c: 77:                 {;main.c: 78:                     count_conf++;
  4105  02B5  3001               	movlw	1
  4106  02B6  0020               	movlb	0	; select bank0
  4107  02B7  07DE               	addwf	_count_conf,f
  4108  02B8  3000               	movlw	0
  4109  02B9  3DDF               	addwfc	_count_conf+1,f
  4110                           
  4111                           ;main.c: 79:                     if(count_conf == 800)
  4112  02BA  3020               	movlw	32
  4113  02BB  065E               	xorwf	_count_conf,w
  4114  02BC  3003               	movlw	3
  4115  02BD  1903               	skipnz
  4116  02BE  065F               	xorwf	_count_conf+1,w
  4117  02BF  1D03               	btfss	3,2
  4118  02C0  2A2A               	goto	l6440
  4119                           
  4120                           ;main.c: 80:                     {;main.c: 81:                         count_conf = 0;
  4121  02C1  01DE               	clrf	_count_conf
  4122  02C2  01DF               	clrf	_count_conf+1
  4123                           
  4124                           ;main.c: 82:                         printf("PICSMART");
  4125  02C3  3000               	movlw	low (STR_1| (0+32768))
  4126  02C4  00C7               	movwf	printf@fmt
  4127  02C5  3098               	movlw	high (STR_1| (0+32768))
  4128  02C6  00C8               	movwf	printf@fmt+1
  4129  02C7  3196  26E4  3182   	fcall	_printf
  4130                           
  4131                           ;main.c: 83:                         config_status = 1;
  4132  02CA  0020               	movlb	0	; select bank0
  4133  02CB  01E5               	clrf	_config_status
  4134  02CC  0AE5               	incf	_config_status,f
  4135                           
  4136                           ;main.c: 84:                         check_request = 1;
  4137  02CD  01E4               	clrf	_check_request
  4138  02CE  0AE4               	incf	_check_request,f
  4139                           
  4140                           ;main.c: 85:                         LED_PROCESS(0);
  4141  02CF  3000               	movlw	0
  4142  02D0  3186  26EC  3182   	fcall	_LED_PROCESS
  4143                           
  4144                           ;main.c: 86:                         blink = 0;
  4145  02D3  0020               	movlb	0	; select bank0
  4146  02D4  01E3               	clrf	_blink
  4147  02D5  2A2A               	goto	l6440
  4148  02D6                     l6506:	
  4149                           
  4150                           ;main.c: 90:                 {;main.c: 91:                     count_conf = 0;
  4151  02D6  0020               	movlb	0	; select bank0
  4152  02D7  01DE               	clrf	_count_conf
  4153  02D8  01DF               	clrf	_count_conf+1
  4154  02D9  2A2A               	goto	l6440
  4155  02DA                     l6508:	
  4156                           
  4157                           ;main.c: 95:             {;main.c: 96:                 if(blink == 0)
  4158  02DA  0863               	movf	_blink,w
  4159  02DB  1D03               	btfss	3,2
  4160  02DC  2AF2               	goto	l6516
  4161                           
  4162                           ;main.c: 97:                 {;main.c: 98:                     LED_PROCESS(15);
  4163  02DD  300F               	movlw	15
  4164  02DE  3186  26EC  3182   	fcall	_LED_PROCESS
  4165                           
  4166                           ;main.c: 99:                     blink = 1;
  4167  02E1  0020               	movlb	0	; select bank0
  4168  02E2  01E3               	clrf	_blink
  4169  02E3  0AE3               	incf	_blink,f
  4170                           
  4171                           ;main.c: 100:                     _delay((unsigned long)((300)*(32000000/4000.0)));
  4172  02E4  300D               	movlw	13
  4173  02E5  0021               	movlb	1	; select bank1
  4174  02E6  00EB               	movwf	(??_main^(0+128)+1)
  4175  02E7  302D               	movlw	45
  4176  02E8  00EA               	movwf	??_main^(0+128)
  4177  02E9  30D7               	movlw	215
  4178  02EA                     u5207:	
  4179  02EA  0B89               	decfsz	9,f
  4180  02EB  2AEA               	goto	u5207
  4181  02EC  0BEA               	decfsz	??_main^(0+128),f
  4182  02ED  2AEA               	goto	u5207
  4183  02EE  0BEB               	decfsz	(??_main^(0+128)+1),f
  4184  02EF  2AEA               	goto	u5207
  4185  02F0  3200               	nop2
  4186                           
  4187                           ;main.c: 101:                 }
  4188  02F1  2A2A               	goto	l6440
  4189  02F2                     l6516:	
  4190                           
  4191                           ;main.c: 103:                 {;main.c: 104:                     LED_PROCESS(0);
  4192  02F2  3000               	movlw	0
  4193  02F3  3186  26EC  3182   	fcall	_LED_PROCESS
  4194                           
  4195                           ;main.c: 105:                     blink = 0;
  4196  02F6  0020               	movlb	0	; select bank0
  4197  02F7  01E3               	clrf	_blink
  4198                           
  4199                           ;main.c: 106:                     _delay((unsigned long)((500)*(32000000/4000.0)));
  4200  02F8  3015               	movlw	21
  4201  02F9  0021               	movlb	1	; select bank1
  4202  02FA  00EB               	movwf	(??_main^(0+128)+1)
  4203  02FB  304B               	movlw	75
  4204  02FC  00EA               	movwf	??_main^(0+128)
  4205  02FD  30BE               	movlw	190
  4206  02FE                     u5217:	
  4207  02FE  0B89               	decfsz	9,f
  4208  02FF  2AFE               	goto	u5217
  4209  0300  0BEA               	decfsz	??_main^(0+128),f
  4210  0301  2AFE               	goto	u5217
  4211  0302  0BEB               	decfsz	(??_main^(0+128)+1),f
  4212  0303  2AFE               	goto	u5217
  4213  0304  0000               	nop
  4214                           
  4215                           ;main.c: 109:         }
  4216  0305  2A2A               	goto	l6440
  4217  0306                     __end_of_main:	
  4218                           
  4219                           	psect	text1
  4220  090E                     __ptext1:	
  4221 ;; *************** function _check_message *****************
  4222 ;; Defined at:
  4223 ;;		line 284 in file "main.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  x               1    wreg     unsigned char 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  x               1   49[BANK0 ] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4237 ;;      Params:         0       0       0       0       0       0       0       0
  4238 ;;      Locals:         0       1       0       0       0       0       0       0
  4239 ;;      Temps:          0       2       0       0       0       0       0       0
  4240 ;;      Totals:         0       3       0       0       0       0       0       0
  4241 ;;Total ram usage:        3 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:   13
  4244 ;; This function calls:
  4245 ;;		_printf
  4246 ;; This function is called by:
  4247 ;;		_main
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           
  4252                           ;psect for function _check_message
  4253  090E                     _check_message:	
  4254                           
  4255                           ;incstack = 0
  4256                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4257                           ;check_message@x stored from wreg
  4258  090E  0020               	movlb	0	; select bank0
  4259  090F  00D1               	movwf	check_message@x
  4260                           
  4261                           ;main.c: 284: void check_message(uint8_t x);main.c: 285: {;main.c: 286:     switch (x)
  4262  0910  2924               	goto	l6294
  4263  0911                     l6284:	
  4264                           
  4265                           ;main.c: 289:         {;main.c: 290:             check_request = 0;
  4266  0911  01E4               	clrf	_check_request
  4267                           
  4268                           ;main.c: 291:             break;
  4269  0912  0008               	return
  4270  0913                     l6288:	
  4271                           
  4272                           ;main.c: 299:         {;main.c: 300:             printf("%c",x);
  4273  0913  3062               	movlw	low (STR_18| (0+32768))
  4274  0914  00C7               	movwf	printf@fmt
  4275  0915  3098               	movlw	high (STR_18| (0+32768))
  4276  0916  00C8               	movwf	printf@fmt+1
  4277  0917  0851               	movf	check_message@x,w
  4278  0918  00CF               	movwf	??_check_message
  4279  0919  01D0               	clrf	??_check_message+1
  4280  091A  084F               	movf	??_check_message,w
  4281  091B  00C9               	movwf	?_printf+2
  4282  091C  0850               	movf	??_check_message+1,w
  4283  091D  00CA               	movwf	?_printf+3
  4284  091E  3196  26E4         	fcall	_printf
  4285                           
  4286                           ;main.c: 301:             check_request = 1;
  4287  0920  0020               	movlb	0	; select bank0
  4288  0921  01E4               	clrf	_check_request
  4289  0922  0AE4               	incf	_check_request,f
  4290                           
  4291                           ;main.c: 302:             break;
  4292  0923  0008               	return
  4293  0924                     l6294:	
  4294  0924  0851               	movf	check_message@x,w
  4295  0925  00CF               	movwf	??_check_message
  4296  0926  01D0               	clrf	??_check_message+1
  4297                           
  4298                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4299                           ; Switch size 1, requested type "simple"
  4300                           ; Number of cases is 1, Range of values is 0 to 0
  4301                           ; switch strategies available:
  4302                           ; Name         Instructions Cycles
  4303                           ; simple_byte            4     3 (average)
  4304                           ; direct_byte            8     6 (fixed)
  4305                           ; jumptable            260     6 (fixed)
  4306                           ;	Chosen strategy is simple_byte
  4307  0927  0850               	movf	??_check_message+1,w
  4308  0928  3A00               	xorlw	0	; case 0
  4309  0929  1903               	skipnz
  4310  092A  292C               	goto	l6776
  4311  092B  2913               	goto	l6288
  4312  092C                     l6776:	
  4313                           
  4314                           ; Switch size 1, requested type "simple"
  4315                           ; Number of cases is 2, Range of values is 70 to 84
  4316                           ; switch strategies available:
  4317                           ; Name         Instructions Cycles
  4318                           ; simple_byte            7     4 (average)
  4319                           ; direct_byte           39     9 (fixed)
  4320                           ; jumptable            263     9 (fixed)
  4321                           ;	Chosen strategy is simple_byte
  4322  092C  084F               	movf	??_check_message,w
  4323  092D  3A46               	xorlw	70	; case 70
  4324  092E  1903               	skipnz
  4325  092F  2911               	goto	l6284
  4326  0930  3A12               	xorlw	18	; case 84
  4327  0931  1903               	skipnz
  4328  0932  2911               	goto	l6284
  4329  0933  2913               	goto	l6288
  4330  0934  0008               	return
  4331  0935                     __end_of_check_message:	
  4332                           
  4333                           	psect	text2
  4334  0B70                     __ptext2:	
  4335 ;; *************** function _check_data *****************
  4336 ;; Defined at:
  4337 ;;		line 306 in file "main.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;  x               1    wreg     unsigned char 
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  x               1    3[COMMON] unsigned char 
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      _Bool 
  4344 ;; Registers used:
  4345 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4351 ;;      Params:         0       0       0       0       0       0       0       0
  4352 ;;      Locals:         1       0       0       0       0       0       0       0
  4353 ;;      Temps:          2       0       0       0       0       0       0       0
  4354 ;;      Totals:         3       0       0       0       0       0       0       0
  4355 ;;Total ram usage:        3 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    4
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_main
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function _check_data
  4367  0B70                     _check_data:	
  4368                           
  4369                           ;incstack = 0
  4370                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  4371                           ;check_data@x stored from wreg
  4372  0B70  00F3               	movwf	check_data@x
  4373                           
  4374                           ;main.c: 306: _Bool check_data(uint8_t x);main.c: 307: {;main.c: 308:     switch(x)
  4375  0B71  2B76               	goto	l5022
  4376  0B72                     l4940:	
  4377  0B72  3001               	movlw	1
  4378  0B73  0008               	return
  4379  0B74                     l5016:	
  4380  0B74  3000               	movlw	0
  4381  0B75  0008               	return
  4382  0B76                     l5022:	
  4383  0B76  0873               	movf	check_data@x,w
  4384  0B77  00F1               	movwf	??_check_data
  4385  0B78  01F2               	clrf	??_check_data+1
  4386                           
  4387                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4388                           ; Switch size 1, requested type "simple"
  4389                           ; Number of cases is 1, Range of values is 0 to 0
  4390                           ; switch strategies available:
  4391                           ; Name         Instructions Cycles
  4392                           ; simple_byte            4     3 (average)
  4393                           ; direct_byte            8     6 (fixed)
  4394                           ; jumptable            260     6 (fixed)
  4395                           ;	Chosen strategy is simple_byte
  4396  0B79  0872               	movf	??_check_data+1,w
  4397  0B7A  3A00               	xorlw	0	; case 0
  4398  0B7B  1903               	skipnz
  4399  0B7C  2B7E               	goto	l6778
  4400  0B7D  2B74               	goto	l5016
  4401  0B7E                     l6778:	
  4402                           
  4403                           ; Switch size 1, requested type "simple"
  4404                           ; Number of cases is 19, Range of values is 48 to 85
  4405                           ; switch strategies available:
  4406                           ; Name         Instructions Cycles
  4407                           ; simple_byte           58    30 (average)
  4408                           ; direct_byte           85     9 (fixed)
  4409                           ; jumptable            263     9 (fixed)
  4410                           ;	Chosen strategy is simple_byte
  4411  0B7E  0871               	movf	??_check_data,w
  4412  0B7F  3A30               	xorlw	48	; case 48
  4413  0B80  1903               	skipnz
  4414  0B81  2B72               	goto	l4940
  4415  0B82  3A01               	xorlw	1	; case 49
  4416  0B83  1903               	skipnz
  4417  0B84  2B72               	goto	l4940
  4418  0B85  3A03               	xorlw	3	; case 50
  4419  0B86  1903               	skipnz
  4420  0B87  2B72               	goto	l4940
  4421  0B88  3A01               	xorlw	1	; case 51
  4422  0B89  1903               	skipnz
  4423  0B8A  2B72               	goto	l4940
  4424  0B8B  3A07               	xorlw	7	; case 52
  4425  0B8C  1903               	skipnz
  4426  0B8D  2B72               	goto	l4940
  4427  0B8E  3A01               	xorlw	1	; case 53
  4428  0B8F  1903               	skipnz
  4429  0B90  2B72               	goto	l4940
  4430  0B91  3A03               	xorlw	3	; case 54
  4431  0B92  1903               	skipnz
  4432  0B93  2B72               	goto	l4940
  4433  0B94  3A01               	xorlw	1	; case 55
  4434  0B95  1903               	skipnz
  4435  0B96  2B72               	goto	l4940
  4436  0B97  3A0F               	xorlw	15	; case 56
  4437  0B98  1903               	skipnz
  4438  0B99  2B72               	goto	l4940
  4439  0B9A  3A01               	xorlw	1	; case 57
  4440  0B9B  1903               	skipnz
  4441  0B9C  2B72               	goto	l4940
  4442  0B9D  3A78               	xorlw	120	; case 65
  4443  0B9E  1903               	skipnz
  4444  0B9F  2B72               	goto	l4940
  4445  0BA0  3A03               	xorlw	3	; case 66
  4446  0BA1  1903               	skipnz
  4447  0BA2  2B72               	goto	l4940
  4448  0BA3  3A01               	xorlw	1	; case 67
  4449  0BA4  1903               	skipnz
  4450  0BA5  2B72               	goto	l4940
  4451  0BA6  3A07               	xorlw	7	; case 68
  4452  0BA7  1903               	skipnz
  4453  0BA8  2B72               	goto	l4940
  4454  0BA9  3A01               	xorlw	1	; case 69
  4455  0BAA  1903               	skipnz
  4456  0BAB  2B72               	goto	l4940
  4457  0BAC  3A03               	xorlw	3	; case 70
  4458  0BAD  1903               	skipnz
  4459  0BAE  2B72               	goto	l4940
  4460  0BAF  3A01               	xorlw	1	; case 71
  4461  0BB0  1903               	skipnz
  4462  0BB1  2B72               	goto	l4940
  4463  0BB2  3A13               	xorlw	19	; case 84
  4464  0BB3  1903               	skipnz
  4465  0BB4  2B72               	goto	l4940
  4466  0BB5  3A01               	xorlw	1	; case 85
  4467  0BB6  1903               	skipnz
  4468  0BB7  2B72               	goto	l4940
  4469  0BB8  2B74               	goto	l5016
  4470  0BB9  0008               	return
  4471  0BBA                     __end_of_check_data:	
  4472                           
  4473                           	psect	text3
  4474  1728                     __ptext3:	
  4475 ;; *************** function _SYSTEM_Initialize *****************
  4476 ;; Defined at:
  4477 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;		None
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;		None
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      void 
  4484 ;; Registers used:
  4485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4491 ;;      Params:         0       0       0       0       0       0       0       0
  4492 ;;      Locals:         0       0       0       0       0       0       0       0
  4493 ;;      Temps:          0       0       0       0       0       0       0       0
  4494 ;;      Totals:         0       0       0       0       0       0       0       0
  4495 ;;Total ram usage:        0 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    9
  4498 ;; This function calls:
  4499 ;;		_EUSART_Initialize
  4500 ;;		_MTOUCH_Initialize
  4501 ;;		_OSCILLATOR_Initialize
  4502 ;;		_PIN_MANAGER_Initialize
  4503 ;;		_TMR2_Initialize
  4504 ;;		_WDT_Initialize
  4505 ;; This function is called by:
  4506 ;;		_main
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           
  4511                           ;psect for function _SYSTEM_Initialize
  4512  1728                     _SYSTEM_Initialize:	
  4513                           
  4514                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4515                           
  4516                           ;incstack = 0
  4517                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4518  1728  3188  2059  3197   	fcall	_PIN_MANAGER_Initialize
  4519                           
  4520                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4521  172B  3196  260F  3197   	fcall	_OSCILLATOR_Initialize
  4522                           
  4523                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4524  172E  3195  25DD  3197   	fcall	_WDT_Initialize
  4525                           
  4526                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  4527  1731  3196  2647  3197   	fcall	_TMR2_Initialize
  4528                           
  4529                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  4530  1734  318A  226C  3197   	fcall	_EUSART_Initialize
  4531                           
  4532                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  4533  1737  3196  2664         	fcall	_MTOUCH_Initialize
  4534  1739  0008               	return
  4535  173A                     __end_of_SYSTEM_Initialize:	
  4536                           
  4537                           	psect	text4
  4538  15DD                     __ptext4:	
  4539 ;; *************** function _WDT_Initialize *****************
  4540 ;; Defined at:
  4541 ;;		line 69 in file "mcc_generated_files/mcc.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;		None
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4555 ;;      Params:         0       0       0       0       0       0       0       0
  4556 ;;      Locals:         0       0       0       0       0       0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0       0
  4558 ;;      Totals:         0       0       0       0       0       0       0       0
  4559 ;;Total ram usage:        0 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    4
  4562 ;; This function calls:
  4563 ;;		Nothing
  4564 ;; This function is called by:
  4565 ;;		_SYSTEM_Initialize
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           
  4570                           ;psect for function _WDT_Initialize
  4571  15DD                     _WDT_Initialize:	
  4572                           
  4573                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  4574                           
  4575                           ;incstack = 0
  4576                           ; Regs used in _WDT_Initialize: [wreg]
  4577  15DD  3016               	movlw	22
  4578  15DE  0021               	movlb	1	; select bank1
  4579  15DF  0097               	movwf	23	;volatile
  4580  15E0  0008               	return
  4581  15E1                     __end_of_WDT_Initialize:	
  4582                           
  4583                           	psect	text5
  4584  1647                     __ptext5:	
  4585 ;; *************** function _TMR2_Initialize *****************
  4586 ;; Defined at:
  4587 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4601 ;;      Params:         0       0       0       0       0       0       0       0
  4602 ;;      Locals:         0       0       0       0       0       0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0       0
  4604 ;;      Totals:         0       0       0       0       0       0       0       0
  4605 ;;Total ram usage:        0 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    4
  4608 ;; This function calls:
  4609 ;;		Nothing
  4610 ;; This function is called by:
  4611 ;;		_SYSTEM_Initialize
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           
  4616                           ;psect for function _TMR2_Initialize
  4617  1647                     _TMR2_Initialize:	
  4618                           
  4619                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4620                           
  4621                           ;incstack = 0
  4622                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4623  1647  30FF               	movlw	255
  4624  1648  0020               	movlb	0	; select bank0
  4625  1649  009B               	movwf	27	;volatile
  4626                           
  4627                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4628  164A  019A               	clrf	26	;volatile
  4629                           
  4630                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4631  164B  1091               	bcf	17,1	;volatile
  4632                           
  4633                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4634  164C  3004               	movlw	4
  4635  164D  009C               	movwf	28	;volatile
  4636  164E  0008               	return
  4637  164F                     __end_of_TMR2_Initialize:	
  4638                           
  4639                           	psect	text6
  4640  0859                     __ptext6:	
  4641 ;; *************** function _PIN_MANAGER_Initialize *****************
  4642 ;; Defined at:
  4643 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4657 ;;      Params:         0       0       0       0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0       0       0
  4659 ;;      Temps:          0       0       0       0       0       0       0       0
  4660 ;;      Totals:         0       0       0       0       0       0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    4
  4664 ;; This function calls:
  4665 ;;		Nothing
  4666 ;; This function is called by:
  4667 ;;		_SYSTEM_Initialize
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           
  4672                           ;psect for function _PIN_MANAGER_Initialize
  4673  0859                     _PIN_MANAGER_Initialize:	
  4674                           
  4675                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  4676                           
  4677                           ;incstack = 0
  4678                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4679  0859  3037               	movlw	55
  4680  085A  0022               	movlb	2	; select bank2
  4681  085B  008C               	movwf	12	;volatile
  4682                           
  4683                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0xC0;
  4684  085C  30C0               	movlw	192
  4685  085D  008D               	movwf	13	;volatile
  4686                           
  4687                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xBF;
  4688  085E  30BF               	movlw	191
  4689  085F  008E               	movwf	14	;volatile
  4690                           
  4691                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  4692  0860  3008               	movlw	8
  4693  0861  0021               	movlb	1	; select bank1
  4694  0862  008C               	movwf	12	;volatile
  4695                           
  4696                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  4697  0863  3020               	movlw	32
  4698  0864  008D               	movwf	13	;volatile
  4699                           
  4700                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  4701  0865  3040               	movlw	64
  4702  0866  008E               	movwf	14	;volatile
  4703                           
  4704                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE8;
  4705  0867  30E8               	movlw	232
  4706  0868  0023               	movlb	3	; select bank3
  4707  0869  008E               	movwf	14	;volatile
  4708                           
  4709                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  4710  086A  3040               	movlw	64
  4711  086B  008D               	movwf	13	;volatile
  4712                           
  4713                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  4714  086C  3037               	movlw	55
  4715  086D  008C               	movwf	12	;volatile
  4716                           
  4717                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4718  086E  0024               	movlb	4	; select bank4
  4719  086F  018D               	clrf	13	;volatile
  4720                           
  4721                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4722  0870  018C               	clrf	12	;volatile
  4723                           
  4724                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4725  0871  0021               	movlb	1	; select bank1
  4726  0872  1795               	bsf	21,7	;volatile
  4727                           
  4728                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  4729  0873  0022               	movlb	2	; select bank2
  4730  0874  019D               	clrf	29	;volatile
  4731  0875  0008               	return
  4732  0876                     __end_of_PIN_MANAGER_Initialize:	
  4733                           
  4734                           	psect	text7
  4735  160F                     __ptext7:	
  4736 ;; *************** function _OSCILLATOR_Initialize *****************
  4737 ;; Defined at:
  4738 ;;		line 61 in file "mcc_generated_files/mcc.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4752 ;;      Params:         0       0       0       0       0       0       0       0
  4753 ;;      Locals:         0       0       0       0       0       0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0
  4755 ;;      Totals:         0       0       0       0       0       0       0       0
  4756 ;;Total ram usage:        0 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    4
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_SYSTEM_Initialize
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           
  4767                           ;psect for function _OSCILLATOR_Initialize
  4768  160F                     _OSCILLATOR_Initialize:	
  4769                           
  4770                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4774  160F  30F0               	movlw	240
  4775  1610  0021               	movlb	1	; select bank1
  4776  1611  0099               	movwf	25	;volatile
  4777                           
  4778                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  4779  1612  0022               	movlb	2	; select bank2
  4780  1613  0196               	clrf	22	;volatile
  4781  1614  0008               	return
  4782  1615                     __end_of_OSCILLATOR_Initialize:	
  4783                           
  4784                           	psect	text8
  4785  1664                     __ptext8:	
  4786 ;; *************** function _MTOUCH_Initialize *****************
  4787 ;; Defined at:
  4788 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;		None
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  1    wreg      void 
  4795 ;; Registers used:
  4796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4802 ;;      Params:         0       0       0       0       0       0       0       0
  4803 ;;      Locals:         0       0       0       0       0       0       0       0
  4804 ;;      Temps:          0       0       0       0       0       0       0       0
  4805 ;;      Totals:         0       0       0       0       0       0       0       0
  4806 ;;Total ram usage:        0 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    8
  4809 ;; This function calls:
  4810 ;;		_MTOUCH_Button_InitializeAll
  4811 ;;		_MTOUCH_Sensor_InitializeAll
  4812 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4813 ;;		_MTOUCH_Sensor_Scan_Initialize
  4814 ;; This function is called by:
  4815 ;;		_SYSTEM_Initialize
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           
  4820                           ;psect for function _MTOUCH_Initialize
  4821  1664                     _MTOUCH_Initialize:	
  4822                           
  4823                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  4824                           
  4825                           ;incstack = 0
  4826                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4827  1664  3196  26A6  3196   	fcall	_MTOUCH_Sensor_InitializeAll
  4828                           
  4829                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  4830  1667  3188  203D  3196   	fcall	_MTOUCH_Button_InitializeAll
  4831                           
  4832                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  4833  166A  3197  273A  3196   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4834                           
  4835                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  4836  166D  3196  26C4         	fcall	_MTOUCH_Sensor_Scan_Initialize
  4837  166F  0008               	return
  4838  1670                     __end_of_MTOUCH_Initialize:	
  4839                           
  4840                           	psect	text9
  4841  16A6                     __ptext9:	
  4842 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  4843 ;; Defined at:
  4844 ;;		line 231 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;		None
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  sensor          1   10[COMMON] enum E2854
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4858 ;;      Params:         0       0       0       0       0       0       0       0
  4859 ;;      Locals:         1       0       0       0       0       0       0       0
  4860 ;;      Temps:          1       0       0       0       0       0       0       0
  4861 ;;      Totals:         2       0       0       0       0       0       0       0
  4862 ;;Total ram usage:        2 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    7
  4865 ;; This function calls:
  4866 ;;		_MTOUCH_Sensor_Initialize
  4867 ;; This function is called by:
  4868 ;;		_MTOUCH_Initialize
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           
  4873                           ;psect for function _MTOUCH_Sensor_InitializeAll
  4874  16A6                     _MTOUCH_Sensor_InitializeAll:	
  4875                           
  4876                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 233:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 235:     for (sensor = 0; sensor < 4u; sensor
      +                          ++)
  4877                           
  4878                           ;incstack = 0
  4879                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  4880  16A6  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  4881  16A7                     l6122:	
  4882                           
  4883                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 236:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 237:         MTOUCH_Sensor_Initialize(sensor);
  4884  16A7  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  4885  16A8  3197  2762  3196   	fcall	_MTOUCH_Sensor_Initialize
  4886                           
  4887                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 238:     }
  4888  16AB  3001               	movlw	1
  4889  16AC  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  4890  16AD  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  4891  16AE  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  4892  16AF  3004               	movlw	4
  4893  16B0  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  4894  16B1  1803               	btfsc	3,0
  4895  16B2  0008               	return
  4896  16B3  2EA7               	goto	l6122
  4897  16B4                     __end_of_MTOUCH_Sensor_InitializeAll:	
  4898                           
  4899                           	psect	text10
  4900  1762                     __ptext10:	
  4901 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  4902 ;; Defined at:
  4903 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;  sensor          1    wreg     enum E2854
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  sensor          1    8[COMMON] enum E2854
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      enum E2859
  4910 ;; Registers used:
  4911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4917 ;;      Params:         0       0       0       0       0       0       0       0
  4918 ;;      Locals:         1       0       0       0       0       0       0       0
  4919 ;;      Temps:          1       0       0       0       0       0       0       0
  4920 ;;      Totals:         2       0       0       0       0       0       0       0
  4921 ;;Total ram usage:        2 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    6
  4924 ;; This function calls:
  4925 ;;		_MTOUCH_Sensor_Calibrate
  4926 ;;		_MTOUCH_Sensor_Enable
  4927 ;;		_Sensor_Sampled_Reset
  4928 ;;		___bmul
  4929 ;; This function is called by:
  4930 ;;		_MTOUCH_Sensor_InitializeAll
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           
  4935                           ;psect for function _MTOUCH_Sensor_Initialize
  4936  1762                     _MTOUCH_Sensor_Initialize:	
  4937                           
  4938                           ;incstack = 0
  4939                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  4940                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  4941  1762  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  4942                           
  4943                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 216: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           217: {;mcc_generated_files/mtouch/mtouch_sensor.c: 219:     MTOUCH_Sensor_Enable(sensor
      +                          );
  4944  1763  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4945  1764  3197  2717  3197   	fcall	_MTOUCH_Sensor_Enable
  4946                           
  4947                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 220:     MTOUCH_Sensor_Calibrate(sensor);
  4948  1767  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4949  1768  3197  2706  3197   	fcall	_MTOUCH_Sensor_Calibrate
  4950                           
  4951                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 221:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  4952  176B  3009               	movlw	9
  4953  176C  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  4954  176D  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  4955  176E  00F1               	movwf	___bmul@multiplicand
  4956  176F  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4957  1770  3196  26F5  3197   	fcall	___bmul
  4958  1773  3EAA               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  4959  1774  3196  2630         	fcall	_Sensor_Sampled_Reset
  4960  1776  0008               	return
  4961  1777                     __end_of_MTOUCH_Sensor_Initialize:	
  4962                           
  4963                           	psect	text11
  4964  1717                     __ptext11:	
  4965 ;; *************** function _MTOUCH_Sensor_Enable *****************
  4966 ;; Defined at:
  4967 ;;		line 849 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  sensor          1    wreg     enum E2854
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  sensor          1    6[COMMON] enum E2854
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  1    wreg      void 
  4974 ;; Registers used:
  4975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4981 ;;      Params:         0       0       0       0       0       0       0       0
  4982 ;;      Locals:         1       0       0       0       0       0       0       0
  4983 ;;      Temps:          1       0       0       0       0       0       0       0
  4984 ;;      Totals:         2       0       0       0       0       0       0       0
  4985 ;;Total ram usage:        2 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    5
  4988 ;; This function calls:
  4989 ;;		___bmul
  4990 ;; This function is called by:
  4991 ;;		_MTOUCH_Sensor_Initialize
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           
  4996                           ;psect for function _MTOUCH_Sensor_Enable
  4997  1717                     _MTOUCH_Sensor_Enable:	
  4998                           
  4999                           ;incstack = 0
  5000                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5001                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  5002  1717  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  5003                           
  5004                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 849: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 850: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 851:     if(sensor < 4u)
  5005  1718  3004               	movlw	4
  5006  1719  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  5007  171A  1803               	skipnc
  5008  171B  0008               	return
  5009                           
  5010                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 852:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  5011  171C  3009               	movlw	9
  5012  171D  00F5               	movwf	??_MTOUCH_Sensor_Enable
  5013  171E  0875               	movf	??_MTOUCH_Sensor_Enable,w
  5014  171F  00F1               	movwf	___bmul@multiplicand
  5015  1720  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  5016  1721  3196  26F5         	fcall	___bmul
  5017  1723  3EB2               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  5018  1724  0086               	movwf	6
  5019  1725  0187               	clrf	7
  5020  1726  1581               	bsf	1,3
  5021  1727  0008               	return
  5022  1728                     __end_of_MTOUCH_Sensor_Enable:	
  5023                           
  5024                           	psect	text12
  5025  083D                     __ptext12:	
  5026 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  5027 ;; Defined at:
  5028 ;;		line 179 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  button          1    0[BANK0 ] enum E3070
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5042 ;;      Params:         0       0       0       0       0       0       0       0
  5043 ;;      Locals:         0       1       0       0       0       0       0       0
  5044 ;;      Temps:          1       0       0       0       0       0       0       0
  5045 ;;      Totals:         1       1       0       0       0       0       0       0
  5046 ;;Total ram usage:        2 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    7
  5049 ;; This function calls:
  5050 ;;		_MTOUCH_Button_Initialize
  5051 ;;		_memcpy
  5052 ;; This function is called by:
  5053 ;;		_MTOUCH_Initialize
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           
  5058                           ;psect for function _MTOUCH_Button_InitializeAll
  5059  083D                     _MTOUCH_Button_InitializeAll:	
  5060                           
  5061                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 183:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  5062                           
  5063                           ;incstack = 0
  5064                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5065  083D  3000               	movlw	low (_mtouch_button_init| (0+32768))
  5066  083E  00F1               	movwf	memcpy@s1
  5067  083F  3090               	movlw	high (_mtouch_button_init| (0+32768))
  5068  0840  00F2               	movwf	memcpy@s1+1
  5069  0841  3040               	movlw	64
  5070  0842  00F3               	movwf	memcpy@n
  5071  0843  3000               	movlw	0
  5072  0844  00F4               	movwf	memcpy@n+1
  5073  0845  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  5074  0846  3189  2189  3188   	fcall	_memcpy
  5075                           
  5076                           ;mcc_generated_files/mtouch/mtouch_button.c: 185:     for (button = 0; button < 4u; butt
      +                          on++)
  5077  0849  0020               	movlb	0	; select bank0
  5078  084A  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  5079  084B                     l6136:	
  5080                           
  5081                           ;mcc_generated_files/mtouch/mtouch_button.c: 186:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 187:         MTOUCH_Button_Initialize(button);
  5082  084B  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  5083  084C  318B  2303  3188   	fcall	_MTOUCH_Button_Initialize
  5084                           
  5085                           ;mcc_generated_files/mtouch/mtouch_button.c: 188:     }
  5086  084F  3001               	movlw	1
  5087  0850  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  5088  0851  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  5089  0852  0020               	movlb	0	; select bank0
  5090  0853  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  5091  0854  3004               	movlw	4
  5092  0855  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  5093  0856  1803               	btfsc	3,0
  5094  0857  0008               	return
  5095  0858  284B               	goto	l6136
  5096  0859                     __end_of_MTOUCH_Button_InitializeAll:	
  5097                           
  5098                           	psect	text13
  5099  0989                     __ptext13:	
  5100 ;; *************** function _memcpy *****************
  5101 ;; Defined at:
  5102 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  d1              1    wreg     PTR void 
  5105 ;;		 -> mtouch_button(64), 
  5106 ;;  s1              2    1[COMMON] PTR const void 
  5107 ;;		 -> mtouch_button_init(64), 
  5108 ;;  n               2    3[COMMON] unsigned int 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  d1              1    9[COMMON] PTR void 
  5111 ;;		 -> mtouch_button(64), 
  5112 ;;  s               2    7[COMMON] PTR const unsigned char 
  5113 ;;		 -> mtouch_button_init(64), 
  5114 ;;  d               1   10[COMMON] PTR unsigned char 
  5115 ;;		 -> mtouch_button(64), 
  5116 ;;  tmp             1    6[COMMON] unsigned char 
  5117 ;; Return value:  Size  Location     Type
  5118 ;;                  1    wreg      PTR void 
  5119 ;; Registers used:
  5120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5126 ;;      Params:         4       0       0       0       0       0       0       0
  5127 ;;      Locals:         5       0       0       0       0       0       0       0
  5128 ;;      Temps:          1       0       0       0       0       0       0       0
  5129 ;;      Totals:        10       0       0       0       0       0       0       0
  5130 ;;Total ram usage:       10 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:    4
  5133 ;; This function calls:
  5134 ;;		Nothing
  5135 ;; This function is called by:
  5136 ;;		_MTOUCH_Button_InitializeAll
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           
  5141                           ;psect for function _memcpy
  5142  0989                     _memcpy:	
  5143                           
  5144                           ;incstack = 0
  5145                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  5146                           ;memcpy@d1 stored from wreg
  5147  0989  00F9               	movwf	memcpy@d1
  5148  098A  0872               	movf	memcpy@s1+1,w
  5149  098B  00F8               	movwf	memcpy@s+1
  5150  098C  0871               	movf	memcpy@s1,w
  5151  098D  00F7               	movwf	memcpy@s
  5152  098E  0879               	movf	memcpy@d1,w
  5153  098F  00F5               	movwf	??_memcpy
  5154  0990  0875               	movf	??_memcpy,w
  5155  0991  00FA               	movwf	memcpy@d
  5156  0992                     l6044:	
  5157  0992  3001               	movlw	1
  5158  0993  02F3               	subwf	memcpy@n,f
  5159  0994  3000               	movlw	0
  5160  0995  3BF4               	subwfb	memcpy@n+1,f
  5161  0996  0A73               	incf	memcpy@n,w
  5162  0997  1903               	btfsc	3,2
  5163  0998  0A74               	incf	memcpy@n+1,w
  5164  0999  1903               	btfsc	3,2
  5165  099A  0008               	return
  5166  099B  0877               	movf	memcpy@s,w
  5167  099C  0084               	movwf	4
  5168  099D  0878               	movf	memcpy@s+1,w
  5169  099E  0085               	movwf	5
  5170  099F  0800               	movf	0,w	;code access
  5171  09A0  00F5               	movwf	??_memcpy
  5172  09A1  0875               	movf	??_memcpy,w
  5173  09A2  00F6               	movwf	memcpy@tmp
  5174  09A3  3001               	movlw	1
  5175  09A4  07F7               	addwf	memcpy@s,f
  5176  09A5  3000               	movlw	0
  5177  09A6  3DF8               	addwfc	memcpy@s+1,f
  5178  09A7  0876               	movf	memcpy@tmp,w
  5179  09A8  00F5               	movwf	??_memcpy
  5180  09A9  087A               	movf	memcpy@d,w
  5181  09AA  0086               	movwf	6
  5182  09AB  3001               	movlw	1	; select bank2/3
  5183  09AC  0087               	movwf	7
  5184  09AD  0875               	movf	??_memcpy,w
  5185  09AE  0081               	movwf	1
  5186  09AF  3001               	movlw	1
  5187  09B0  00F5               	movwf	??_memcpy
  5188  09B1  0875               	movf	??_memcpy,w
  5189  09B2  07FA               	addwf	memcpy@d,f
  5190  09B3  2992               	goto	l6044
  5191  09B4                     __end_of_memcpy:	
  5192                           
  5193                           	psect	text14
  5194  0A6C                     __ptext14:	
  5195 ;; *************** function _EUSART_Initialize *****************
  5196 ;; Defined at:
  5197 ;;		line 81 in file "mcc_generated_files/eusart.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;		None
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;		None
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		wreg, status,2, status,0, pclath, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5211 ;;      Params:         0       0       0       0       0       0       0       0
  5212 ;;      Locals:         0       0       0       0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0       0
  5214 ;;      Totals:         0       0       0       0       0       0       0       0
  5215 ;;Total ram usage:        0 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    5
  5218 ;; This function calls:
  5219 ;;		_EUSART_SetErrorHandler
  5220 ;;		_EUSART_SetFramingErrorHandler
  5221 ;;		_EUSART_SetOverrunErrorHandler
  5222 ;;		_EUSART_SetRxInterruptHandler
  5223 ;; This function is called by:
  5224 ;;		_SYSTEM_Initialize
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           
  5229                           ;psect for function _EUSART_Initialize
  5230  0A6C                     _EUSART_Initialize:	
  5231                           
  5232                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  5233                           
  5234                           ;incstack = 0
  5235                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5236  0A6C  0021               	movlb	1	; select bank1
  5237  0A6D  1291               	bcf	17,5	;volatile
  5238                           
  5239                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5240  0A6E  309C               	movlw	low _EUSART_Receive_ISR
  5241  0A6F  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5242  0A70  300A               	movlw	high _EUSART_Receive_ISR
  5243  0A71  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5244  0A72  3196  2609  318A   	fcall	_EUSART_SetRxInterruptHandler
  5245                           
  5246                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  5247  0A75  3008               	movlw	8
  5248  0A76  0023               	movlb	3	; select bank3
  5249  0A77  009F               	movwf	31	;volatile
  5250                           
  5251                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  5252  0A78  3090               	movlw	144
  5253  0A79  009D               	movwf	29	;volatile
  5254                           
  5255                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  5256  0A7A  3024               	movlw	36
  5257  0A7B  009E               	movwf	30	;volatile
  5258                           
  5259                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  5260  0A7C  3040               	movlw	64
  5261  0A7D  009B               	movwf	27	;volatile
  5262                           
  5263                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  5264  0A7E  3003               	movlw	3
  5265  0A7F  009C               	movwf	28	;volatile
  5266                           
  5267                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5268  0A80  30C4               	movlw	low _EUSART_DefaultFramingErrorHandler
  5269  0A81  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5270  0A82  3015               	movlw	high _EUSART_DefaultFramingErrorHandler
  5271  0A83  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  5272  0A84  3195  25FD  318A   	fcall	_EUSART_SetFramingErrorHandler
  5273                           
  5274                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5275  0A87  30D9               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5276  0A88  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5277  0A89  3015               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5278  0A8A  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  5279  0A8B  3196  2603  318A   	fcall	_EUSART_SetOverrunErrorHandler
  5280                           
  5281                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5282  0A8E  30C7               	movlw	low _EUSART_DefaultErrorHandler
  5283  0A8F  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  5284  0A90  3015               	movlw	high _EUSART_DefaultErrorHandler
  5285  0A91  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  5286  0A92  3195  25F7         	fcall	_EUSART_SetErrorHandler
  5287                           
  5288                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  5289  0A94  0020               	movlb	0	; select bank0
  5290  0A95  01E9               	clrf	_eusartRxLastError	;volatile
  5291                           
  5292                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  5293  0A96  01FC               	clrf	_eusartRxHead	;volatile
  5294                           
  5295                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  5296  0A97  01EB               	clrf	_eusartRxTail	;volatile
  5297                           
  5298                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  5299  0A98  01EA               	clrf	_eusartRxCount	;volatile
  5300                           
  5301                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  5302  0A99  0021               	movlb	1	; select bank1
  5303  0A9A  1691               	bsf	17,5	;volatile
  5304  0A9B  0008               	return
  5305  0A9C                     __end_of_EUSART_Initialize:	
  5306                           
  5307                           	psect	text15
  5308  1609                     __ptext15:	
  5309 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5310 ;; Defined at:
  5311 ;;		line 241 in file "mcc_generated_files/eusart.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5314 ;;		 -> EUSART_Receive_ISR(1), 
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  1    wreg      void 
  5319 ;; Registers used:
  5320 ;;		wreg
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5326 ;;      Params:         2       0       0       0       0       0       0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0
  5329 ;;      Totals:         2       0       0       0       0       0       0       0
  5330 ;;Total ram usage:        2 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    4
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		_EUSART_Initialize
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _EUSART_SetRxInterruptHandler
  5342  1609                     _EUSART_SetRxInterruptHandler:	
  5343                           
  5344                           ;mcc_generated_files/eusart.c: 242:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5348  1609  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  5349  160A  0021               	movlb	1	; select bank1
  5350  160B  00E9               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5351  160C  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  5352  160D  00E8               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5353  160E  0008               	return
  5354  160F                     __end_of_EUSART_SetRxInterruptHandler:	
  5355                           
  5356                           	psect	text16
  5357  1603                     __ptext16:	
  5358 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5359 ;; Defined at:
  5360 ;;		line 232 in file "mcc_generated_files/eusart.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5363 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;		None
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1    wreg      void 
  5368 ;; Registers used:
  5369 ;;		wreg
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5375 ;;      Params:         2       0       0       0       0       0       0       0
  5376 ;;      Locals:         0       0       0       0       0       0       0       0
  5377 ;;      Temps:          0       0       0       0       0       0       0       0
  5378 ;;      Totals:         2       0       0       0       0       0       0       0
  5379 ;;Total ram usage:        2 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    4
  5382 ;; This function calls:
  5383 ;;		Nothing
  5384 ;; This function is called by:
  5385 ;;		_EUSART_Initialize
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           
  5390                           ;psect for function _EUSART_SetOverrunErrorHandler
  5391  1603                     _EUSART_SetOverrunErrorHandler:	
  5392                           
  5393                           ;mcc_generated_files/eusart.c: 233:     EUSART_OverrunErrorHandler = interruptHandler;
  5394                           
  5395                           ;incstack = 0
  5396                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5397  1603  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  5398  1604  0021               	movlb	1	; select bank1
  5399  1605  00E5               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5400  1606  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  5401  1607  00E4               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5402  1608  0008               	return
  5403  1609                     __end_of_EUSART_SetOverrunErrorHandler:	
  5404                           
  5405                           	psect	text17
  5406  15FD                     __ptext17:	
  5407 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5408 ;; Defined at:
  5409 ;;		line 228 in file "mcc_generated_files/eusart.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5412 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;		None
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      void 
  5417 ;; Registers used:
  5418 ;;		wreg
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5424 ;;      Params:         2       0       0       0       0       0       0       0
  5425 ;;      Locals:         0       0       0       0       0       0       0       0
  5426 ;;      Temps:          0       0       0       0       0       0       0       0
  5427 ;;      Totals:         2       0       0       0       0       0       0       0
  5428 ;;Total ram usage:        2 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    4
  5431 ;; This function calls:
  5432 ;;		Nothing
  5433 ;; This function is called by:
  5434 ;;		_EUSART_Initialize
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           
  5439                           ;psect for function _EUSART_SetFramingErrorHandler
  5440  15FD                     _EUSART_SetFramingErrorHandler:	
  5441                           
  5442                           ;mcc_generated_files/eusart.c: 229:     EUSART_FramingErrorHandler = interruptHandler;
  5443                           
  5444                           ;incstack = 0
  5445                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5446  15FD  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  5447  15FE  0021               	movlb	1	; select bank1
  5448  15FF  00E7               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5449  1600  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5450  1601  00E6               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5451  1602  0008               	return
  5452  1603                     __end_of_EUSART_SetFramingErrorHandler:	
  5453                           
  5454                           	psect	text18
  5455  15F7                     __ptext18:	
  5456 ;; *************** function _EUSART_SetErrorHandler *****************
  5457 ;; Defined at:
  5458 ;;		line 236 in file "mcc_generated_files/eusart.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5461 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;		None
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  1    wreg      void 
  5466 ;; Registers used:
  5467 ;;		wreg
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5473 ;;      Params:         2       0       0       0       0       0       0       0
  5474 ;;      Locals:         0       0       0       0       0       0       0       0
  5475 ;;      Temps:          0       0       0       0       0       0       0       0
  5476 ;;      Totals:         2       0       0       0       0       0       0       0
  5477 ;;Total ram usage:        2 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    4
  5480 ;; This function calls:
  5481 ;;		Nothing
  5482 ;; This function is called by:
  5483 ;;		_EUSART_Initialize
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           
  5488                           ;psect for function _EUSART_SetErrorHandler
  5489  15F7                     _EUSART_SetErrorHandler:	
  5490                           
  5491                           ;mcc_generated_files/eusart.c: 237:     EUSART_ErrorHandler = interruptHandler;
  5492                           
  5493                           ;incstack = 0
  5494                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5495  15F7  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  5496  15F8  0021               	movlb	1	; select bank1
  5497  15F9  00E3               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5498  15FA  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5499  15FB  00E2               	movwf	_EUSART_ErrorHandler^(0+128)
  5500  15FC  0008               	return
  5501  15FD                     __end_of_EUSART_SetErrorHandler:	
  5502                           
  5503                           	psect	text19
  5504  0821                     __ptext19:	
  5505 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5506 ;; Defined at:
  5507 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;		None
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;		None
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  1    wreg      _Bool 
  5514 ;; Registers used:
  5515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5521 ;;      Params:         0       0       0       0       0       0       0       0
  5522 ;;      Locals:         0       0       0       0       0       0       0       0
  5523 ;;      Temps:          0       1       0       0       0       0       0       0
  5524 ;;      Totals:         0       1       0       0       0       0       0       0
  5525 ;;Total ram usage:        1 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:   11
  5528 ;; This function calls:
  5529 ;;		_MTOUCH_Button_ServiceAll
  5530 ;;		_MTOUCH_Sensor_SampleAll
  5531 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5532 ;;		_MTOUCH_Tick
  5533 ;;		_MTOUCH_needReburst
  5534 ;; This function is called by:
  5535 ;;		_main
  5536 ;;		_touch_example
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           
  5541                           ;psect for function _MTOUCH_Service_Mainloop
  5542  0821                     _MTOUCH_Service_Mainloop:	
  5543                           
  5544                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  5545                           
  5546                           ;incstack = 0
  5547                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5548  0821  0020               	movlb	0	; select bank0
  5549  0822  01E2               	clrf	_mtouch_time_toScan
  5550  0823  0AE2               	incf	_mtouch_time_toScan,f
  5551                           
  5552                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  5553                           
  5554                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  5555  0824  3197  2777  3188   	fcall	_MTOUCH_Sensor_SampleAll
  5556  0827  3A00               	xorlw	0
  5557  0828  1D03               	skipz
  5558  0829  282C               	goto	l6392
  5559                           
  5560                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  5561  082A  3000               	movlw	0
  5562  082B  0008               	return
  5563  082C                     l6392:	
  5564                           
  5565                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  5566  082C  3196  26B4  3188   	fcall	_MTOUCH_Button_ServiceAll
  5567                           
  5568                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  5569  082F  3180  2002  3188   	fcall	_MTOUCH_needReburst
  5570  0832  0020               	movlb	0	; select bank0
  5571  0833  00C8               	movwf	??_MTOUCH_Service_Mainloop
  5572  0834  0848               	movf	??_MTOUCH_Service_Mainloop,w
  5573  0835  00E2               	movwf	_mtouch_time_toScan
  5574                           
  5575                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  5576  0836  3197  273A  3188   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5577                           
  5578                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  5579  0839  3195  25D3         	fcall	_MTOUCH_Tick
  5580                           
  5581                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  5582  083B  3001               	movlw	1
  5583  083C  0008               	return
  5584  083D                     __end_of_MTOUCH_Service_Mainloop:	
  5585                           
  5586                           	psect	text20
  5587  0002                     __ptext20:	
  5588 ;; *************** function _MTOUCH_needReburst *****************
  5589 ;; Defined at:
  5590 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;		None
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;  needReburst     1    0        _Bool 
  5595 ;; Return value:  Size  Location     Type
  5596 ;;                  1    wreg      _Bool 
  5597 ;; Registers used:
  5598 ;;		wreg, status,2
  5599 ;; Tracked objects:
  5600 ;;		On entry : 0/0
  5601 ;;		On exit  : 0/0
  5602 ;;		Unchanged: 0/0
  5603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5604 ;;      Params:         0       0       0       0       0       0       0       0
  5605 ;;      Locals:         1       0       0       0       0       0       0       0
  5606 ;;      Temps:          0       0       0       0       0       0       0       0
  5607 ;;      Totals:         1       0       0       0       0       0       0       0
  5608 ;;Total ram usage:        1 bytes
  5609 ;; Hardware stack levels used:    1
  5610 ;; Hardware stack levels required when called:    4
  5611 ;; This function calls:
  5612 ;;		Nothing
  5613 ;; This function is called by:
  5614 ;;		_MTOUCH_Service_Mainloop
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function _MTOUCH_needReburst
  5620  0002                     _MTOUCH_needReburst:	
  5621                           
  5622                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  5626  0002  3000               	movlw	0
  5627  0003  0008               	return
  5628  0004                     __end_of_MTOUCH_needReburst:	
  5629                           
  5630                           	psect	text21
  5631  15D3                     __ptext21:	
  5632 ;; *************** function _MTOUCH_Tick *****************
  5633 ;; Defined at:
  5634 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;		None
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;		None
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  1    wreg      void 
  5641 ;; Registers used:
  5642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5648 ;;      Params:         0       0       0       0       0       0       0       0
  5649 ;;      Locals:         0       0       0       0       0       0       0       0
  5650 ;;      Temps:          0       0       0       0       0       0       0       0
  5651 ;;      Totals:         0       0       0       0       0       0       0       0
  5652 ;;Total ram usage:        0 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    6
  5655 ;; This function calls:
  5656 ;;		_MTOUCH_Button_Tick
  5657 ;; This function is called by:
  5658 ;;		_MTOUCH_Service_Mainloop
  5659 ;; This function uses a non-reentrant model
  5660 ;;
  5661                           
  5662                           
  5663                           ;psect for function _MTOUCH_Tick
  5664  15D3                     _MTOUCH_Tick:	
  5665                           
  5666                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  5667                           
  5668                           ;incstack = 0
  5669                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5670  15D3  3197  278D         	fcall	_MTOUCH_Button_Tick
  5671  15D5  0008               	return
  5672  15D6                     __end_of_MTOUCH_Tick:	
  5673                           
  5674                           	psect	text22
  5675  178D                     __ptext22:	
  5676 ;; *************** function _MTOUCH_Button_Tick *****************
  5677 ;; Defined at:
  5678 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  i               1    5[COMMON] unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5692 ;;      Params:         0       0       0       0       0       0       0       0
  5693 ;;      Locals:         1       0       0       0       0       0       0       0
  5694 ;;      Temps:          1       0       0       0       0       0       0       0
  5695 ;;      Totals:         2       0       0       0       0       0       0       0
  5696 ;;Total ram usage:        2 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    5
  5699 ;; This function calls:
  5700 ;;		_Button_Tick_helper
  5701 ;; This function is called by:
  5702 ;;		_MTOUCH_Tick
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           
  5707                           ;psect for function _MTOUCH_Button_Tick
  5708  178D                     _MTOUCH_Button_Tick:	
  5709                           
  5710                           ;mcc_generated_files/mtouch/mtouch_button.c: 307:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 308:     for (i = 0; i < 4u; i++)
  5711                           
  5712                           ;incstack = 0
  5713                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5714  178D  01F5               	clrf	MTOUCH_Button_Tick@i
  5715  178E                     l4676:	
  5716                           
  5717                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         Button_Tick_helper(&mtouch_button[i]);
  5718  178E  0875               	movf	MTOUCH_Button_Tick@i,w
  5719  178F  00F4               	movwf	??_MTOUCH_Button_Tick
  5720  1790  3003               	movlw	3
  5721  1791                     u3245:	
  5722  1791  35F4               	lslf	??_MTOUCH_Button_Tick,f
  5723  1792  3EFF               	addlw	-1
  5724  1793  1D03               	skipz
  5725  1794  2F91               	goto	u3245
  5726  1795  3574               	lslf	??_MTOUCH_Button_Tick,w
  5727  1796  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  5728  1797  3188  20E7  3197   	fcall	_Button_Tick_helper
  5729                           
  5730                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:     }
  5731  179A  3001               	movlw	1
  5732  179B  00F4               	movwf	??_MTOUCH_Button_Tick
  5733  179C  0874               	movf	??_MTOUCH_Button_Tick,w
  5734  179D  07F5               	addwf	MTOUCH_Button_Tick@i,f
  5735  179E  3004               	movlw	4
  5736  179F  0275               	subwf	MTOUCH_Button_Tick@i,w
  5737  17A0  1803               	btfsc	3,0
  5738  17A1  0008               	return
  5739  17A2  2F8E               	goto	l4676
  5740  17A3                     __end_of_MTOUCH_Button_Tick:	
  5741                           
  5742                           	psect	text23
  5743  08E7                     __ptext23:	
  5744 ;; *************** function _Button_Tick_helper *****************
  5745 ;; Defined at:
  5746 ;;		line 313 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  button          1    wreg     PTR struct .
  5749 ;;		 -> mtouch_button(64), 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;  button          1    3[COMMON] PTR struct .
  5752 ;;		 -> mtouch_button(64), 
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      void 
  5755 ;; Registers used:
  5756 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5762 ;;      Params:         0       0       0       0       0       0       0       0
  5763 ;;      Locals:         1       0       0       0       0       0       0       0
  5764 ;;      Temps:          2       0       0       0       0       0       0       0
  5765 ;;      Totals:         3       0       0       0       0       0       0       0
  5766 ;;Total ram usage:        3 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    4
  5769 ;; This function calls:
  5770 ;;		Nothing
  5771 ;; This function is called by:
  5772 ;;		_MTOUCH_Button_Tick
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           
  5777                           ;psect for function _Button_Tick_helper
  5778  08E7                     _Button_Tick_helper:	
  5779                           
  5780                           ;incstack = 0
  5781                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  5782                           ;Button_Tick_helper@button stored from wreg
  5783  08E7  00F3               	movwf	Button_Tick_helper@button
  5784                           
  5785                           ;mcc_generated_files/mtouch/mtouch_button.c: 313: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 314: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 316:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  5786  08E8  0873               	movf	Button_Tick_helper@button,w
  5787  08E9  3E02               	addlw	2
  5788  08EA  0086               	movwf	6
  5789  08EB  3001               	movlw	1	; select bank2/3
  5790  08EC  0087               	movwf	7
  5791  08ED  3002               	movlw	2
  5792  08EE  0601               	xorwf	1,w
  5793  08EF  1D03               	btfss	3,2
  5794  08F0  0008               	return
  5795                           
  5796                           ;mcc_generated_files/mtouch/mtouch_button.c: 317:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 318:         (button->counter)++;
  5797  08F1  0873               	movf	Button_Tick_helper@button,w
  5798  08F2  3E0A               	addlw	10
  5799  08F3  0086               	movwf	6
  5800  08F4  3001               	movlw	1	; select bank2/3
  5801  08F5  0087               	movwf	7
  5802  08F6  3001               	movlw	1
  5803  08F7  0781               	addwf	1,f
  5804  08F8  3141               	addfsr 1,1
  5805  08F9  1803               	skipnc
  5806  08FA  0A81               	incf	1,f
  5807                           
  5808                           ;mcc_generated_files/mtouch/mtouch_button.c: 319:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  5809  08FB  0873               	movf	Button_Tick_helper@button,w
  5810  08FC  3E0A               	addlw	10
  5811  08FD  0086               	movwf	6
  5812  08FE  3001               	movlw	1	; select bank2/3
  5813  08FF  0087               	movwf	7
  5814  0900  0016               	moviw fsr1++
  5815  0901  0401               	iorwf	1,w
  5816  0902  1D03               	btfss	3,2
  5817  0903  0008               	return
  5818                           
  5819                           ;mcc_generated_files/mtouch/mtouch_button.c: 320:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 321:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  5820  0904  0873               	movf	Button_Tick_helper@button,w
  5821  0905  3E0A               	addlw	10
  5822  0906  0086               	movwf	6
  5823  0907  3001               	movlw	1	; select bank2/3
  5824  0908  0087               	movwf	7
  5825  0909  30FF               	movlw	255
  5826  090A  3FC0               	movwi [0]fsr1
  5827  090B  30FF               	movlw	255
  5828  090C  3FC1               	movwi [1]fsr1
  5829  090D  0008               	return
  5830  090E                     __end_of_Button_Tick_helper:	
  5831                           
  5832                           	psect	text24
  5833  173A                     __ptext24:	
  5834 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  5835 ;; Defined at:
  5836 ;;		line 958 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;		None
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;  sensor          1    3[COMMON] PTR struct .
  5841 ;;		 -> mtouch_sensor(36), 
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  1    wreg      void 
  5844 ;; Registers used:
  5845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5851 ;;      Params:         0       0       0       0       0       0       0       0
  5852 ;;      Locals:         1       0       0       0       0       0       0       0
  5853 ;;      Temps:          1       0       0       0       0       0       0       0
  5854 ;;      Totals:         2       0       0       0       0       0       0       0
  5855 ;;Total ram usage:        2 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; Hardware stack levels required when called:    5
  5858 ;; This function calls:
  5859 ;;		_Sensor_Sampled_Reset
  5860 ;; This function is called by:
  5861 ;;		_MTOUCH_Initialize
  5862 ;;		_MTOUCH_Service_Mainloop
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           
  5867                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  5868  173A                     _MTOUCH_Sensor_Sampled_ResetAll:	
  5869                           
  5870                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 960:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 961:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[4u -1];sensor++)
  5871                           
  5872                           ;incstack = 0
  5873                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  5874  173A  30AA               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  5875  173B  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5876  173C  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5877  173D  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  5878  173E                     L1:	
  5879  173E  30C5               	movlw	(low ((_mtouch_sensor| 0+27)))& (0+255)
  5880  173F  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5881  1740  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  5882  1741  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5883  1742  1C03               	btfss	3,0
  5884  1743  0008               	return
  5885                           
  5886                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 962:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 963:         Sensor_Sampled_Reset(sensor);
  5887  1744  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  5888  1745  3196  2630  3197   	fcall	_Sensor_Sampled_Reset
  5889                           
  5890                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964:     }
  5891  1748  3009               	movlw	9
  5892  1749  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5893  174A  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5894  174B  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  5895  174C  2F3E               	goto	L1
  5896  174D                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  5897                           
  5898                           	psect	text25
  5899  1630                     __ptext25:	
  5900 ;; *************** function _Sensor_Sampled_Reset *****************
  5901 ;; Defined at:
  5902 ;;		line 972 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  sensor          1    wreg     PTR struct .
  5905 ;;		 -> mtouch_sensor(36), 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  sensor          1    1[COMMON] PTR struct .
  5908 ;;		 -> mtouch_sensor(36), 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5918 ;;      Params:         0       0       0       0       0       0       0       0
  5919 ;;      Locals:         1       0       0       0       0       0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0
  5921 ;;      Totals:         1       0       0       0       0       0       0       0
  5922 ;;Total ram usage:        1 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    4
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_MTOUCH_Sensor_Initialize
  5929 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           
  5934                           ;psect for function _Sensor_Sampled_Reset
  5935  1630                     _Sensor_Sampled_Reset:	
  5936                           
  5937                           ;incstack = 0
  5938                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5939                           ;Sensor_Sampled_Reset@sensor stored from wreg
  5940  1630  00F1               	movwf	Sensor_Sampled_Reset@sensor
  5941                           
  5942                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 972: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          973: {;mcc_generated_files/mtouch/mtouch_sensor.c: 974:     sensor->sampled = 0;
  5943  1631  0871               	movf	Sensor_Sampled_Reset@sensor,w
  5944  1632  3E08               	addlw	8
  5945  1633  0086               	movwf	6
  5946  1634  0187               	clrf	7
  5947  1635  1001               	bcf	1,0
  5948  1636  0008               	return
  5949  1637                     __end_of_Sensor_Sampled_Reset:	
  5950                           
  5951                           	psect	text26
  5952  1777                     __ptext26:	
  5953 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  5954 ;; Defined at:
  5955 ;;		line 266 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;		None
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  group           1   39[BANK0 ] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      _Bool 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5969 ;;      Params:         0       0       0       0       0       0       0       0
  5970 ;;      Locals:         0       1       0       0       0       0       0       0
  5971 ;;      Temps:          0       1       0       0       0       0       0       0
  5972 ;;      Totals:         0       2       0       0       0       0       0       0
  5973 ;;Total ram usage:        2 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:   10
  5976 ;; This function calls:
  5977 ;;		_Sensor_Service
  5978 ;; This function is called by:
  5979 ;;		_MTOUCH_Service_Mainloop
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           
  5984                           ;psect for function _MTOUCH_Sensor_SampleAll
  5985  1777                     _MTOUCH_Sensor_SampleAll:	
  5986                           
  5987                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 268:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 269:     for (group = 0; group < 2u; group++)
  5988                           
  5989                           ;incstack = 0
  5990                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5991  1777  0020               	movlb	0	; select bank0
  5992  1778  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  5993  1779                     l6252:	
  5994                           
  5995                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 270:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 271:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  5996  1779  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  5997  177A  318F  276D  3197   	fcall	_Sensor_Service
  5998  177D  3A00               	xorlw	0
  5999  177E  1903               	skipnz
  6000  177F  2F82               	goto	l6258
  6001                           
  6002                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 272:             return 0;
  6003  1780  3000               	movlw	0
  6004  1781  0008               	return
  6005  1782                     l6258:	
  6006                           
  6007                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 273:     }
  6008  1782  3001               	movlw	1
  6009  1783  0020               	movlb	0	; select bank0
  6010  1784  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  6011  1785  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  6012  1786  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  6013  1787  3002               	movlw	2
  6014  1788  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  6015  1789  1C03               	skipc
  6016  178A  2F79               	goto	l6252
  6017                           
  6018                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 274:     return 1;
  6019  178B  3001               	movlw	1
  6020  178C  0008               	return
  6021  178D                     __end_of_MTOUCH_Sensor_SampleAll:	
  6022                           
  6023                           	psect	text27
  6024  0F6D                     __ptext27:	
  6025 ;; *************** function _Sensor_Service *****************
  6026 ;; Defined at:
  6027 ;;		line 311 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;  scanGroup       1    wreg     unsigned char 
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  6032 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  6033 ;;		 -> mtouch_sensor(36), 
  6034 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  6035 ;;		 -> mtouch_sensor(36), 
  6036 ;;  error           1   35[BANK0 ] enum E2859
  6037 ;; Return value:  Size  Location     Type
  6038 ;;                  1    wreg      enum E2859
  6039 ;; Registers used:
  6040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6046 ;;      Params:         0       0       0       0       0       0       0       0
  6047 ;;      Locals:         0       4       0       0       0       0       0       0
  6048 ;;      Temps:          0       3       0       0       0       0       0       0
  6049 ;;      Totals:         0       7       0       0       0       0       0       0
  6050 ;;Total ram usage:        7 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; Hardware stack levels required when called:    9
  6053 ;; This function calls:
  6054 ;;		_Sensor_Acquisition
  6055 ;;		_Sensor_DefaultCallback
  6056 ;;		_Sensor_RawSample_Update
  6057 ;;		_Sensor_isEnabled
  6058 ;;		_Sensor_setSampled
  6059 ;; This function is called by:
  6060 ;;		_MTOUCH_Sensor_SampleAll
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064                           
  6065                           ;psect for function _Sensor_Service
  6066  0F6D                     _Sensor_Service:	
  6067                           
  6068                           ;incstack = 0
  6069                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6070                           ;Sensor_Service@scanGroup stored from wreg
  6071  0F6D  0020               	movlb	0	; select bank0
  6072  0F6E  00C2               	movwf	Sensor_Service@scanGroup
  6073                           
  6074                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 312: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 313:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 314:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 316:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  6075  0F6F  0842               	movf	Sensor_Service@scanGroup,w
  6076  0F70  00BF               	movwf	??_Sensor_Service
  6077  0F71  01C0               	clrf	??_Sensor_Service+1
  6078  0F72  35BF               	lslf	??_Sensor_Service,f
  6079  0F73  0DC0               	rlf	??_Sensor_Service+1,f
  6080  0F74  305E               	movlw	low (_sensor_scan_group| (0+32768))
  6081  0F75  073F               	addwf	??_Sensor_Service,w
  6082  0F76  0084               	movwf	4
  6083  0F77  3098               	movlw	high (_sensor_scan_group| (0+32768))
  6084  0F78  3D40               	addwfc	??_Sensor_Service+1,w
  6085  0F79  0085               	movwf	5
  6086  0F7A  0800               	movf	0,w	;code access
  6087  0F7B  00C1               	movwf	??_Sensor_Service+2
  6088  0F7C  0841               	movf	??_Sensor_Service+2,w
  6089  0F7D  00C4               	movwf	Sensor_Service@sensor_adc1
  6090                           
  6091                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  6092  0F7E  0842               	movf	Sensor_Service@scanGroup,w
  6093  0F7F  00BF               	movwf	??_Sensor_Service
  6094  0F80  01C0               	clrf	??_Sensor_Service+1
  6095  0F81  35BF               	lslf	??_Sensor_Service,f
  6096  0F82  0DC0               	rlf	??_Sensor_Service+1,f
  6097  0F83  305F               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  6098  0F84  073F               	addwf	??_Sensor_Service,w
  6099  0F85  0084               	movwf	4
  6100  0F86  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  6101  0F87  3D40               	addwfc	??_Sensor_Service+1,w
  6102  0F88  0085               	movwf	5
  6103  0F89  0800               	movf	0,w	;code access
  6104  0F8A  00C1               	movwf	??_Sensor_Service+2
  6105  0F8B  0841               	movf	??_Sensor_Service+2,w
  6106  0F8C  00C5               	movwf	Sensor_Service@sensor_adc2
  6107                           
  6108                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  6109  0F8D  0845               	movf	Sensor_Service@sensor_adc2,w
  6110  0F8E  00BF               	movwf	??_Sensor_Service
  6111  0F8F  083F               	movf	??_Sensor_Service,w
  6112  0F90  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  6113  0F91  0844               	movf	Sensor_Service@sensor_adc1,w
  6114  0F92  318C  24A9  318F   	fcall	_Sensor_Acquisition
  6115  0F95  0020               	movlb	0	; select bank0
  6116  0F96  00C0               	movwf	??_Sensor_Service+1
  6117  0F97  0840               	movf	??_Sensor_Service+1,w
  6118  0F98  00C3               	movwf	Sensor_Service@error
  6119                           
  6120                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 322:     switch(error)
  6121  0F99  2FDA               	goto	l6168
  6122  0F9A                     l6146:	
  6123                           
  6124                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 326:             if(Sensor_isEnabled(sensor_adc1))
  6125  0F9A  0844               	movf	Sensor_Service@sensor_adc1,w
  6126  0F9B  3196  26D4  318F   	fcall	_Sensor_isEnabled
  6127  0F9E  3A00               	xorlw	0
  6128  0F9F  1903               	skipnz
  6129  0FA0  2FB9               	goto	l6156
  6130                           
  6131                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 327:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 332:                 if(!lowpowerActivated)
  6132  0FA1  0020               	movlb	0	; select bank0
  6133  0FA2  0861               	movf	_lowpowerActivated,w
  6134  0FA3  1D03               	btfss	3,2
  6135  0FA4  2FA9               	goto	l6152
  6136                           
  6137                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 333:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 334:                     Sensor_RawSample_Update(sensor_adc1);
  6138  0FA5  0844               	movf	Sensor_Service@sensor_adc1,w
  6139  0FA6  3188  20C1  318F   	fcall	_Sensor_RawSample_Update
  6140  0FA9                     l6152:	
  6141                           
  6142                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 336:                 Sensor_setSampled(sens
      +                          or_adc1);
  6143  0FA9  0020               	movlb	0	; select bank0
  6144  0FAA  0844               	movf	Sensor_Service@sensor_adc1,w
  6145  0FAB  3196  2629  318F   	fcall	_Sensor_setSampled
  6146                           
  6147                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 callback_sampled(senso
      +                          r_adc1->sensor);
  6148  0FAE  0020               	movlb	0	; select bank0
  6149  0FAF  0844               	movf	Sensor_Service@sensor_adc1,w
  6150  0FB0  0086               	movwf	6
  6151  0FB1  0187               	clrf	7
  6152  0FB2  0801               	movf	1,w
  6153  0FB3  00BF               	movwf	??_Sensor_Service
  6154  0FB4  083F               	movf	??_Sensor_Service,w
  6155  0FB5  00F1               	movwf	Sensor_DefaultCallback@sensor
  6156  0FB6  3187  27FF  318F   	fcall	_Sensor_DefaultCallback
  6157  0FB9                     l6156:	
  6158                           
  6159                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 339:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  6160  0FB9  0020               	movlb	0	; select bank0
  6161  0FBA  0845               	movf	Sensor_Service@sensor_adc2,w
  6162  0FBB  3196  26D4  318F   	fcall	_Sensor_isEnabled
  6163  0FBE  3A00               	xorlw	0
  6164  0FBF  1903               	skipnz
  6165  0FC0  2FFD               	goto	l6170
  6166                           
  6167                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 340:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 341:                 if(!lowpowerActivated)
  6168  0FC1  0020               	movlb	0	; select bank0
  6169  0FC2  0861               	movf	_lowpowerActivated,w
  6170  0FC3  1D03               	btfss	3,2
  6171  0FC4  2FC9               	goto	l6162
  6172                           
  6173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 343:                     Sensor_RawSample_Update(sensor_adc2);
  6174  0FC5  0845               	movf	Sensor_Service@sensor_adc2,w
  6175  0FC6  3188  20C1  318F   	fcall	_Sensor_RawSample_Update
  6176  0FC9                     l6162:	
  6177                           
  6178                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345:                 Sensor_setSampled(sens
      +                          or_adc2);
  6179  0FC9  0020               	movlb	0	; select bank0
  6180  0FCA  0845               	movf	Sensor_Service@sensor_adc2,w
  6181  0FCB  3196  2629  318F   	fcall	_Sensor_setSampled
  6182                           
  6183                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:                 callback_sampled(senso
      +                          r_adc2->sensor);
  6184  0FCE  0020               	movlb	0	; select bank0
  6185  0FCF  0845               	movf	Sensor_Service@sensor_adc2,w
  6186  0FD0  0086               	movwf	6
  6187  0FD1  0187               	clrf	7
  6188  0FD2  0801               	movf	1,w
  6189  0FD3  00BF               	movwf	??_Sensor_Service
  6190  0FD4  083F               	movf	??_Sensor_Service,w
  6191  0FD5  00F1               	movwf	Sensor_DefaultCallback@sensor
  6192  0FD6  3187  27FF  318F   	fcall	_Sensor_DefaultCallback
  6193  0FD9  2FFD               	goto	l6170
  6194  0FDA                     l6168:	
  6195  0FDA  0843               	movf	Sensor_Service@error,w
  6196  0FDB  00BF               	movwf	??_Sensor_Service
  6197  0FDC  01C0               	clrf	??_Sensor_Service+1
  6198  0FDD  1BBF               	btfsc	??_Sensor_Service,7
  6199  0FDE  03C0               	decf	??_Sensor_Service+1,f
  6200                           
  6201                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6202                           ; Switch size 1, requested type "simple"
  6203                           ; Number of cases is 2, Range of values is 0 to 255
  6204                           ; switch strategies available:
  6205                           ; Name         Instructions Cycles
  6206                           ; simple_byte            7     4 (average)
  6207                           ; jumptable            260     6 (fixed)
  6208                           ;	Chosen strategy is simple_byte
  6209  0FDF  0840               	movf	??_Sensor_Service+1,w
  6210  0FE0  3A00               	xorlw	0	; case 0
  6211  0FE1  1903               	skipnz
  6212  0FE2  2FE7               	goto	l6780
  6213  0FE3  3AFF               	xorlw	255	; case 255
  6214  0FE4  1903               	skipnz
  6215  0FE5  2FEC               	goto	l6782
  6216  0FE6  2FFD               	goto	l6170
  6217  0FE7                     l6780:	
  6218                           
  6219                           ; Switch size 1, requested type "simple"
  6220                           ; Number of cases is 1, Range of values is 0 to 0
  6221                           ; switch strategies available:
  6222                           ; Name         Instructions Cycles
  6223                           ; simple_byte            4     3 (average)
  6224                           ; direct_byte            8     6 (fixed)
  6225                           ; jumptable            260     6 (fixed)
  6226                           ;	Chosen strategy is simple_byte
  6227  0FE7  083F               	movf	??_Sensor_Service,w
  6228  0FE8  3A00               	xorlw	0	; case 0
  6229  0FE9  1903               	skipnz
  6230  0FEA  2F9A               	goto	l6146
  6231  0FEB  2FFD               	goto	l6170
  6232  0FEC                     l6782:	
  6233                           
  6234                           ; Switch size 1, requested type "simple"
  6235                           ; Number of cases is 5, Range of values is 251 to 255
  6236                           ; switch strategies available:
  6237                           ; Name         Instructions Cycles
  6238                           ; direct_byte           15     5 (fixed)
  6239                           ; simple_byte           16     9 (average)
  6240                           ; jumptable            263     9 (fixed)
  6241                           ;	Chosen strategy is simple_byte
  6242  0FEC  083F               	movf	??_Sensor_Service,w
  6243  0FED  3AFB               	xorlw	251	; case 251
  6244  0FEE  1903               	skipnz
  6245  0FEF  2FFD               	goto	l6170
  6246  0FF0  3A07               	xorlw	7	; case 252
  6247  0FF1  1903               	skipnz
  6248  0FF2  2FFD               	goto	l6170
  6249  0FF3  3A01               	xorlw	1	; case 253
  6250  0FF4  1903               	skipnz
  6251  0FF5  2FFD               	goto	l6170
  6252  0FF6  3A03               	xorlw	3	; case 254
  6253  0FF7  1903               	skipnz
  6254  0FF8  2FFD               	goto	l6170
  6255  0FF9  3A01               	xorlw	1	; case 255
  6256  0FFA  1903               	skipnz
  6257  0FFB  2FFD               	goto	l6170
  6258  0FFC  2FFD               	goto	l6170
  6259  0FFD                     l6170:	
  6260                           
  6261                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 359:     return error;
  6262  0FFD  0020               	movlb	0	; select bank0
  6263  0FFE  0843               	movf	Sensor_Service@error,w
  6264  0FFF  0008               	return
  6265  1000                     __end_of_Sensor_Service:	
  6266                           
  6267                           	psect	text28
  6268  1629                     __ptext28:	
  6269 ;; *************** function _Sensor_setSampled *****************
  6270 ;; Defined at:
  6271 ;;		line 977 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;  sensor          1    wreg     PTR struct .
  6274 ;;		 -> mtouch_sensor(36), 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  sensor          1    1[COMMON] PTR struct .
  6277 ;;		 -> mtouch_sensor(36), 
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  1    wreg      void 
  6280 ;; Registers used:
  6281 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6287 ;;      Params:         0       0       0       0       0       0       0       0
  6288 ;;      Locals:         1       0       0       0       0       0       0       0
  6289 ;;      Temps:          0       0       0       0       0       0       0       0
  6290 ;;      Totals:         1       0       0       0       0       0       0       0
  6291 ;;Total ram usage:        1 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    4
  6294 ;; This function calls:
  6295 ;;		Nothing
  6296 ;; This function is called by:
  6297 ;;		_Sensor_Service
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           
  6302                           ;psect for function _Sensor_setSampled
  6303  1629                     _Sensor_setSampled:	
  6304                           
  6305                           ;incstack = 0
  6306                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  6307                           ;Sensor_setSampled@sensor stored from wreg
  6308  1629  00F1               	movwf	Sensor_setSampled@sensor
  6309                           
  6310                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 977: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 978
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 979:     sensor->sampled = 1;
  6311  162A  0871               	movf	Sensor_setSampled@sensor,w
  6312  162B  3E08               	addlw	8
  6313  162C  0086               	movwf	6
  6314  162D  0187               	clrf	7
  6315  162E  1401               	bsf	1,0
  6316  162F  0008               	return
  6317  1630                     __end_of_Sensor_setSampled:	
  6318                           
  6319                           	psect	text29
  6320  08C1                     __ptext29:	
  6321 ;; *************** function _Sensor_RawSample_Update *****************
  6322 ;; Defined at:
  6323 ;;		line 810 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;  sensor          1    wreg     PTR struct .
  6326 ;;		 -> mtouch_sensor(36), 
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  sensor          1    7[COMMON] PTR struct .
  6329 ;;		 -> mtouch_sensor(36), 
  6330 ;;  adcIndex        1    6[COMMON] unsigned char 
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      void 
  6333 ;; Registers used:
  6334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6340 ;;      Params:         0       0       0       0       0       0       0       0
  6341 ;;      Locals:         2       0       0       0       0       0       0       0
  6342 ;;      Temps:          1       0       0       0       0       0       0       0
  6343 ;;      Totals:         3       0       0       0       0       0       0       0
  6344 ;;Total ram usage:        3 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    5
  6347 ;; This function calls:
  6348 ;;		_Sensor_getScanGroupIndex
  6349 ;; This function is called by:
  6350 ;;		_Sensor_Service
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           
  6355                           ;psect for function _Sensor_RawSample_Update
  6356  08C1                     _Sensor_RawSample_Update:	
  6357                           
  6358                           ;incstack = 0
  6359                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6360                           ;Sensor_RawSample_Update@sensor stored from wreg
  6361  08C1  00F7               	movwf	Sensor_RawSample_Update@sensor
  6362                           
  6363                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 811: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 812:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  6364  08C2  0877               	movf	Sensor_RawSample_Update@sensor,w
  6365  08C3  3189  21B4  3188   	fcall	_Sensor_getScanGroupIndex
  6366  08C6  00F5               	movwf	??_Sensor_RawSample_Update
  6367  08C7  0875               	movf	??_Sensor_RawSample_Update,w
  6368  08C8  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  6369                           
  6370                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 814:     if (INTCONbits.GIE == (uint8_t)1)
  6371  08C9  1F8B               	btfss	11,7	;volatile
  6372  08CA  28DA               	goto	l4496
  6373                           
  6374                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 815:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 816:         INTCONbits.GIE = (uint8_t)0;
  6375  08CB  138B               	bcf	11,7	;volatile
  6376                           
  6377                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 817:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  6378  08CC  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6379  08CD  3E52               	addlw	(low (_packet_sample| 0))& (0+255)
  6380  08CE  0086               	movwf	6
  6381  08CF  0187               	clrf	7
  6382  08D0  0877               	movf	Sensor_RawSample_Update@sensor,w
  6383  08D1  3E06               	addlw	6
  6384  08D2  0084               	movwf	4
  6385  08D3  0185               	clrf	5
  6386  08D4  3F40               	moviw [0]fsr1
  6387  08D5  3F80               	movwi [0]fsr0
  6388  08D6  3F41               	moviw [1]fsr1
  6389  08D7  3F81               	movwi [1]fsr0
  6390                           
  6391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 818:         INTCONbits.GIE = (uint8_t)1;
  6392  08D8  178B               	bsf	11,7	;volatile
  6393                           
  6394                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 819:     }
  6395  08D9  0008               	return
  6396  08DA                     l4496:	
  6397                           
  6398                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 821:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 822:         sensor->rawSample = packet_sample[adcIndex];
  6399  08DA  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6400  08DB  3E52               	addlw	(low (_packet_sample| 0))& (0+255)
  6401  08DC  0086               	movwf	6
  6402  08DD  0187               	clrf	7
  6403  08DE  0877               	movf	Sensor_RawSample_Update@sensor,w
  6404  08DF  3E06               	addlw	6
  6405  08E0  0084               	movwf	4
  6406  08E1  0185               	clrf	5
  6407  08E2  3F40               	moviw [0]fsr1
  6408  08E3  3F80               	movwi [0]fsr0
  6409  08E4  3F41               	moviw [1]fsr1
  6410  08E5  3F81               	movwi [1]fsr0
  6411  08E6  0008               	return
  6412  08E7                     __end_of_Sensor_RawSample_Update:	
  6413                           
  6414                           	psect	text30
  6415  07FF                     __ptext30:	
  6416 ;; *************** function _Sensor_DefaultCallback *****************
  6417 ;; Defined at:
  6418 ;;		line 831 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;  sensor          1    1[COMMON] enum E2854
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;		None
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		None
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6432 ;;      Params:         1       0       0       0       0       0       0       0
  6433 ;;      Locals:         0       0       0       0       0       0       0       0
  6434 ;;      Temps:          0       0       0       0       0       0       0       0
  6435 ;;      Totals:         1       0       0       0       0       0       0       0
  6436 ;;Total ram usage:        1 bytes
  6437 ;; Hardware stack levels used:    1
  6438 ;; Hardware stack levels required when called:    4
  6439 ;; This function calls:
  6440 ;;		Nothing
  6441 ;; This function is called by:
  6442 ;;		_Sensor_Service
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           
  6447                           ;psect for function _Sensor_DefaultCallback
  6448  07FF                     _Sensor_DefaultCallback:	
  6449                           
  6450                           ;incstack = 0
  6451                           ; Regs used in _Sensor_DefaultCallback: []
  6452  07FF  0008               	return
  6453  0800                     __end_of_Sensor_DefaultCallback:	
  6454                           
  6455                           	psect	text31
  6456  0CA9                     __ptext31:	
  6457 ;; *************** function _Sensor_Acquisition *****************
  6458 ;; Defined at:
  6459 ;;		line 380 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  sensor_adc1     1    wreg     PTR struct .
  6462 ;;		 -> mtouch_sensor(36), 
  6463 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  6464 ;;		 -> mtouch_sensor(36), 
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  6467 ;;		 -> mtouch_sensor(36), 
  6468 ;;  retry           1   29[BANK0 ] unsigned char 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  1    wreg      enum E2859
  6471 ;; Registers used:
  6472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6478 ;;      Params:         0       1       0       0       0       0       0       0
  6479 ;;      Locals:         0       2       0       0       0       0       0       0
  6480 ;;      Temps:          0       1       0       0       0       0       0       0
  6481 ;;      Totals:         0       4       0       0       0       0       0       0
  6482 ;;Total ram usage:        4 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    8
  6485 ;; This function calls:
  6486 ;;		_Sensor_Acq_ExecutePacket
  6487 ;;		_Sensor_Scanfrequency_Evaluation
  6488 ;;		_Sensor_isActive
  6489 ;;		_Sensor_isCalibrated
  6490 ;;		_Sensor_postAcquisitionProcess
  6491 ;; This function is called by:
  6492 ;;		_Sensor_Service
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _Sensor_Acquisition
  6498  0CA9                     _Sensor_Acquisition:	
  6499                           
  6500                           ;incstack = 0
  6501                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6502                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  6503  0CA9  0020               	movlb	0	; select bank0
  6504  0CAA  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  6505                           
  6506                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 380: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 381: {;mcc_generated_files/mtouch/mtouch_sensor.c: 382:     
      +                          uint8_t retry = (uint8_t)5;
  6507  0CAB  3005               	movlw	5
  6508  0CAC  00BC               	movwf	??_Sensor_Acquisition
  6509  0CAD  083C               	movf	??_Sensor_Acquisition,w
  6510  0CAE  00BD               	movwf	Sensor_Acquisition@retry
  6511                           
  6512                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  6513  0CAF  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6514  0CB0  1D03               	btfss	3,2
  6515  0CB1  2CBF               	goto	l5992
  6516  0CB2  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6517  0CB3  1D03               	btfss	3,2
  6518  0CB4  2CBF               	goto	l5992
  6519                           
  6520                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 386:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 387:         return MTOUCH_SENSOR_ERROR_invalid_index;
  6521  0CB5  30FF               	movlw	255
  6522  0CB6  0008               	return
  6523  0CB7                     l5986:	
  6524                           
  6525                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 397:         retry--;
  6526  0CB7  3001               	movlw	1
  6527  0CB8  0020               	movlb	0	; select bank0
  6528  0CB9  02BD               	subwf	Sensor_Acquisition@retry,f
  6529                           
  6530                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 398:         if(retry == 0)
  6531  0CBA  083D               	movf	Sensor_Acquisition@retry,w
  6532  0CBB  1D03               	btfss	3,2
  6533  0CBC  2CBF               	goto	l5992
  6534                           
  6535                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 399:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 400:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  6536  0CBD  30FC               	movlw	252
  6537  0CBE  0008               	return
  6538  0CBF                     l5992:	
  6539                           
  6540                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 395:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  6541  0CBF  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6542  0CC0  00BC               	movwf	??_Sensor_Acquisition
  6543  0CC1  083C               	movf	??_Sensor_Acquisition,w
  6544  0CC2  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  6545  0CC3  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6546  0CC4  3180  2054  318C   	fcall	_Sensor_Acq_ExecutePacket
  6547  0CC7  3A00               	xorlw	0
  6548  0CC8  1D03               	skipz
  6549  0CC9  2CB7               	goto	l5986
  6550                           
  6551                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 404:     if(sensor_adc1 != ((void*)0))
  6552  0CCA  0020               	movlb	0	; select bank0
  6553  0CCB  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6554  0CCC  1903               	btfsc	3,2
  6555  0CCD  2CD2               	goto	l5998
  6556                           
  6557                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 405:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 406:         Sensor_postAcquisitionProcess(sensor_adc1);
  6558  0CCE  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6559  0CCF  318B  2339  318C   	fcall	_Sensor_postAcquisitionProcess
  6560  0CD2                     l5998:	
  6561                           
  6562                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:     if(sensor_adc2 !=((void*)0))
  6563  0CD2  0020               	movlb	0	; select bank0
  6564  0CD3  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6565  0CD4  1903               	btfsc	3,2
  6566  0CD5  2CDA               	goto	l6002
  6567                           
  6568                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 411:         Sensor_postAcquisitionProcess(sensor_adc2);
  6569  0CD6  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6570  0CD7  318B  2339  318C   	fcall	_Sensor_postAcquisitionProcess
  6571  0CDA                     l6002:	
  6572                           
  6573                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 414:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  6574  0CDA  0020               	movlb	0	; select bank0
  6575  0CDB  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6576  0CDC  3196  267D  318C   	fcall	_Sensor_isActive
  6577  0CDF  3A00               	xorlw	0
  6578  0CE0  1903               	skipnz
  6579  0CE1  2CEA               	goto	l6006
  6580  0CE2  0020               	movlb	0	; select bank0
  6581  0CE3  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6582  0CE4  3196  264F  318C   	fcall	_Sensor_isCalibrated
  6583  0CE7  3A00               	xorlw	0
  6584  0CE8  1D03               	skipz
  6585  0CE9  2CFA               	goto	l6010
  6586  0CEA                     l6006:	
  6587  0CEA  0020               	movlb	0	; select bank0
  6588  0CEB  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6589  0CEC  3196  267D  318C   	fcall	_Sensor_isActive
  6590  0CEF  3A00               	xorlw	0
  6591  0CF0  1903               	skipnz
  6592  0CF1  2D03               	goto	l6014
  6593  0CF2  0020               	movlb	0	; select bank0
  6594  0CF3  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6595  0CF4  3196  264F  318C   	fcall	_Sensor_isCalibrated
  6596  0CF7  3A00               	xorlw	0
  6597  0CF8  1903               	skipnz
  6598  0CF9  2D03               	goto	l6014
  6599  0CFA                     l6010:	
  6600                           
  6601                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 416:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 417:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  6602  0CFA  0020               	movlb	0	; select bank0
  6603  0CFB  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6604  0CFC  00BC               	movwf	??_Sensor_Acquisition
  6605  0CFD  083C               	movf	??_Sensor_Acquisition,w
  6606  0CFE  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  6607  0CFF  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6608  0D00  3187  2789         	fcall	_Sensor_Scanfrequency_Evaluation
  6609  0D02  0008               	return
  6610  0D03                     l6014:	
  6611                           
  6612                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     return MTOUCH_SENSOR_ERROR_none;
  6613  0D03  3000               	movlw	0
  6614  0D04  0008               	return
  6615  0D05                     __end_of_Sensor_Acquisition:	
  6616                           
  6617                           	psect	text32
  6618  0B39                     __ptext32:	
  6619 ;; *************** function _Sensor_postAcquisitionProcess *****************
  6620 ;; Defined at:
  6621 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;  sensor          1    wreg     PTR struct .
  6624 ;;		 -> mtouch_sensor(36), 
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;  sensor          1    9[COMMON] PTR struct .
  6627 ;;		 -> mtouch_sensor(36), 
  6628 ;;  deviation       2    6[COMMON] unsigned short 
  6629 ;;  adcIndex        1    8[COMMON] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      void 
  6632 ;; Registers used:
  6633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6639 ;;      Params:         0       0       0       0       0       0       0       0
  6640 ;;      Locals:         4       0       0       0       0       0       0       0
  6641 ;;      Temps:          1       0       0       0       0       0       0       0
  6642 ;;      Totals:         5       0       0       0       0       0       0       0
  6643 ;;Total ram usage:        5 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    5
  6646 ;; This function calls:
  6647 ;;		_Sensor_getScanGroupIndex
  6648 ;;		_Sensor_isEnabled
  6649 ;;		_Sensor_setActive
  6650 ;;		_Sensor_setInactive
  6651 ;;		_abs
  6652 ;; This function is called by:
  6653 ;;		_Sensor_Acquisition
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           
  6658                           ;psect for function _Sensor_postAcquisitionProcess
  6659  0B39                     _Sensor_postAcquisitionProcess:	
  6660                           
  6661                           ;incstack = 0
  6662                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6663                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  6664  0B39  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  6665                           
  6666                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 424: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 425:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 426:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  6667  0B3A  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6668  0B3B  3189  21B4  318B   	fcall	_Sensor_getScanGroupIndex
  6669  0B3E  00F5               	movwf	??_Sensor_postAcquisitionProcess
  6670  0B3F  0875               	movf	??_Sensor_postAcquisitionProcess,w
  6671  0B40  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  6672                           
  6673                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     if(Sensor_isEnabled(sensor))
  6674  0B41  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6675  0B42  3196  26D4  318B   	fcall	_Sensor_isEnabled
  6676  0B45  3A00               	xorlw	0
  6677  0B46  1903               	skipnz
  6678  0B47  2B5F               	goto	l4312
  6679                           
  6680                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  6681  0B48  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6682  0B49  3E06               	addlw	6
  6683  0B4A  0086               	movwf	6
  6684  0B4B  0187               	clrf	7
  6685  0B4C  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  6686  0B4D  3E52               	addlw	(low (_packet_sample| 0))& (0+255)
  6687  0B4E  0084               	movwf	4
  6688  0B4F  0185               	clrf	5
  6689  0B50  3F40               	moviw [0]fsr1
  6690  0B51  0200               	subwf	0,w
  6691  0B52  00F1               	movwf	abs@a
  6692  0B53  3101               	addfsr 0,1
  6693  0B54  3F41               	moviw [1]fsr1
  6694  0B55  3B00               	subwfb	0,w
  6695  0B56  00F2               	movwf	abs@a+1
  6696  0B57  3197  27D1  318B   	fcall	_abs
  6697  0B5A  0872               	movf	?_abs+1,w
  6698  0B5B  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  6699  0B5C  0871               	movf	?_abs,w
  6700  0B5D  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  6701  0B5E  2B61               	goto	l4314
  6702  0B5F                     l4312:	
  6703                           
  6704                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 431:         deviation = 0;
  6705  0B5F  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  6706  0B60  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  6707  0B61                     l4314:	
  6708                           
  6709                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     if(deviation > 100u)
  6710  0B61  3000               	movlw	0
  6711  0B62  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  6712  0B63  3065               	movlw	101
  6713  0B64  1903               	skipnz
  6714  0B65  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  6715  0B66  1C03               	skipc
  6716  0B67  2B6C               	goto	l4318
  6717                           
  6718                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 434:         Sensor_setActive(sensor);
  6719  0B68  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6720  0B69  3196  261B         	fcall	_Sensor_setActive
  6721  0B6B  0008               	return
  6722  0B6C                     l4318:	
  6723                           
  6724                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:         Sensor_setInactive(sensor);
  6725  0B6C  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6726  0B6D  3196  2622         	fcall	_Sensor_setInactive
  6727  0B6F  0008               	return
  6728  0B70                     __end_of_Sensor_postAcquisitionProcess:	
  6729                           
  6730                           	psect	text33
  6731  1622                     __ptext33:	
  6732 ;; *************** function _Sensor_setInactive *****************
  6733 ;; Defined at:
  6734 ;;		line 885 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;  sensor          1    wreg     PTR struct .
  6737 ;;		 -> mtouch_sensor(36), 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;  sensor          1    1[COMMON] PTR struct .
  6740 ;;		 -> mtouch_sensor(36), 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  1    wreg      void 
  6743 ;; Registers used:
  6744 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6750 ;;      Params:         0       0       0       0       0       0       0       0
  6751 ;;      Locals:         1       0       0       0       0       0       0       0
  6752 ;;      Temps:          0       0       0       0       0       0       0       0
  6753 ;;      Totals:         1       0       0       0       0       0       0       0
  6754 ;;Total ram usage:        1 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    4
  6757 ;; This function calls:
  6758 ;;		Nothing
  6759 ;; This function is called by:
  6760 ;;		_Sensor_postAcquisitionProcess
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           
  6765                           ;psect for function _Sensor_setInactive
  6766  1622                     _Sensor_setInactive:	
  6767                           
  6768                           ;incstack = 0
  6769                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  6770                           ;Sensor_setInactive@sensor stored from wreg
  6771  1622  00F1               	movwf	Sensor_setInactive@sensor
  6772                           
  6773                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 88
      +                          6: {;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     sensor->active = 0;
  6774  1623  0871               	movf	Sensor_setInactive@sensor,w
  6775  1624  3E08               	addlw	8
  6776  1625  0086               	movwf	6
  6777  1626  0187               	clrf	7
  6778  1627  1081               	bcf	1,1
  6779  1628  0008               	return
  6780  1629                     __end_of_Sensor_setInactive:	
  6781                           
  6782                           	psect	text34
  6783  161B                     __ptext34:	
  6784 ;; *************** function _Sensor_setActive *****************
  6785 ;; Defined at:
  6786 ;;		line 880 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6787 ;; Parameters:    Size  Location     Type
  6788 ;;  sensor          1    wreg     PTR struct .
  6789 ;;		 -> mtouch_sensor(36), 
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;  sensor          1    1[COMMON] PTR struct .
  6792 ;;		 -> mtouch_sensor(36), 
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      void 
  6795 ;; Registers used:
  6796 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6802 ;;      Params:         0       0       0       0       0       0       0       0
  6803 ;;      Locals:         1       0       0       0       0       0       0       0
  6804 ;;      Temps:          0       0       0       0       0       0       0       0
  6805 ;;      Totals:         1       0       0       0       0       0       0       0
  6806 ;;Total ram usage:        1 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    4
  6809 ;; This function calls:
  6810 ;;		Nothing
  6811 ;; This function is called by:
  6812 ;;		_Sensor_postAcquisitionProcess
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           
  6817                           ;psect for function _Sensor_setActive
  6818  161B                     _Sensor_setActive:	
  6819                           
  6820                           ;incstack = 0
  6821                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  6822                           ;Sensor_setActive@sensor stored from wreg
  6823  161B  00F1               	movwf	Sensor_setActive@sensor
  6824                           
  6825                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 880: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 881:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 882:     sensor->active = 1;
  6826  161C  0871               	movf	Sensor_setActive@sensor,w
  6827  161D  3E08               	addlw	8
  6828  161E  0086               	movwf	6
  6829  161F  0187               	clrf	7
  6830  1620  1481               	bsf	1,1
  6831  1621  0008               	return
  6832  1622                     __end_of_Sensor_setActive:	
  6833                           
  6834                           	psect	text35
  6835  0789                     __ptext35:	
  6836 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  6837 ;; Defined at:
  6838 ;;		line 741 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  sensor_adc1     1    wreg     PTR struct .
  6841 ;;		 -> mtouch_sensor(36), 
  6842 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  6843 ;;		 -> mtouch_sensor(36), 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  6846 ;;		 -> mtouch_sensor(36), 
  6847 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  6848 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  6849 ;;  i               1   26[BANK0 ] unsigned char 
  6850 ;;  retry           1   21[BANK0 ] unsigned char 
  6851 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      enum E2859
  6854 ;; Registers used:
  6855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/0
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6861 ;;      Params:         0       1       0       0       0       0       0       0
  6862 ;;      Locals:         0      10       0       0       0       0       0       0
  6863 ;;      Temps:          0       2       0       0       0       0       0       0
  6864 ;;      Totals:         0      13       0       0       0       0       0       0
  6865 ;;Total ram usage:       13 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    7
  6868 ;; This function calls:
  6869 ;;		_Sensor_Acq_ExecutePacket
  6870 ;; This function is called by:
  6871 ;;		_Sensor_Acquisition
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           
  6876                           ;psect for function _Sensor_Scanfrequency_Evaluation
  6877  0789                     _Sensor_Scanfrequency_Evaluation:	
  6878                           
  6879                           ;incstack = 0
  6880                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6881                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  6882  0789  0020               	movlb	0	; select bank0
  6883  078A  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  6884                           
  6885                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 741: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 742: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 743:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 745:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 746:     mtouch_sensor_sampleperiod_t best_sample_period;
  6886  078B  085B               	movf	_packet_noise+1,w
  6887  078C  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  6888  078D  085A               	movf	_packet_noise,w
  6889  078E  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  6890  078F  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  6891  0790  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  6892  0791  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  6893  0792  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  6894  0793  085A               	movf	_packet_noise,w
  6895  0794  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  6896  0795  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  6897  0796  085B               	movf	_packet_noise+1,w
  6898  0797  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  6899  0798  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  6900                           
  6901                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 751:     best_sample_period = sample_period
      +                          ;
  6902  0799  086E               	movf	_sample_period,w
  6903  079A  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  6904  079B  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6905  079C  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  6906                           
  6907                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 752:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  6908  079D  0853               	movf	_packet_sample+1,w
  6909  079E  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  6910  079F  0852               	movf	_packet_sample,w
  6911  07A0  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  6912                           
  6913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 753:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  6914  07A1  0855               	movf	_packet_sample+3,w
  6915  07A2  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  6916  07A3  0854               	movf	_packet_sample+2,w
  6917  07A4  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  6918                           
  6919                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  6920  07A5  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  6921  07A6                     l5876:	
  6922                           
  6923                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 757:         sample_period += frequency_hop[i];
  6924  07A6  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  6925  07A7  3E09               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  6926  07A8  0084               	movwf	4
  6927  07A9  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  6928  07AA  1803               	skipnc
  6929  07AB  3E01               	addlw	1
  6930  07AC  0085               	movwf	5
  6931  07AD  0800               	movf	0,w	;code access
  6932  07AE  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  6933  07AF  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6934  07B0  07EE               	addwf	_sample_period,f
  6935                           
  6936                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  6937  07B1  30AE               	movlw	174
  6938  07B2  026E               	subwf	_sample_period,w
  6939  07B3  1803               	skipnc
  6940  07B4  2FB9               	goto	l5884
  6941                           
  6942                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 765:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  6943  07B5  30AE               	movlw	174
  6944  07B6  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  6945  07B7  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6946  07B8  07EE               	addwf	_sample_period,f
  6947  07B9                     l5884:	
  6948                           
  6949                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 768:         retry = (uint8_t)5;
  6950  07B9  3005               	movlw	5
  6951  07BA  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  6952  07BB  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6953  07BC  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  6954  07BD                     l5892:	
  6955                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  6956                           
  6957                           
  6958                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  6959  07BD  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  6960  07BE  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  6961  07BF  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6962  07C0  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  6963  07C1  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  6964  07C2  3180  2054  3187   	fcall	_Sensor_Acq_ExecutePacket
  6965  07C5  3A00               	xorlw	0
  6966  07C6  1903               	btfsc	3,2
  6967  07C7  2FD0               	goto	l5894
  6968                           
  6969                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 772:             retry--;
  6970  07C8  3001               	movlw	1
  6971  07C9  0020               	movlb	0	; select bank0
  6972  07CA  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  6973                           
  6974                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 773:             if(retry == 0)
  6975  07CB  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  6976  07CC  1D03               	btfss	3,2
  6977  07CD  2FBD               	goto	l5892
  6978                           
  6979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 775:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  6980  07CE  30FC               	movlw	252
  6981  07CF  0008               	return
  6982  07D0                     l5894:	
  6983                           
  6984                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 779:         if(packet_noise_Max < packet_n
      +                          oise)
  6985  07D0  0020               	movlb	0	; select bank0
  6986  07D1  085B               	movf	_packet_noise+1,w
  6987  07D2  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  6988  07D3  1D03               	skipz
  6989  07D4  2FD7               	goto	u4425
  6990  07D5  085A               	movf	_packet_noise,w
  6991  07D6  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  6992  07D7                     u4425:	
  6993  07D7  1803               	skipnc
  6994  07D8  2FE9               	goto	l5898
  6995                           
  6996                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 781:             packet_noise_Max = packet_noise;
  6997  07D9  085B               	movf	_packet_noise+1,w
  6998  07DA  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  6999  07DB  085A               	movf	_packet_noise,w
  7000  07DC  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  7001                           
  7002                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:             best_sample_period = sampl
      +                          e_period;
  7003  07DD  086E               	movf	_sample_period,w
  7004  07DE  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7005  07DF  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7006  07E0  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  7007                           
  7008                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 783:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  7009  07E1  0853               	movf	_packet_sample+1,w
  7010  07E2  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  7011  07E3  0852               	movf	_packet_sample,w
  7012  07E4  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  7013                           
  7014                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  7015  07E5  0855               	movf	_packet_sample+3,w
  7016  07E6  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  7017  07E7  0854               	movf	_packet_sample+2,w
  7018  07E8  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  7019  07E9                     l5898:	
  7020                           
  7021                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 786:     }
  7022  07E9  3001               	movlw	1
  7023  07EA  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7024  07EB  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7025  07EC  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  7026  07ED  3005               	movlw	5
  7027  07EE  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  7028  07EF  1C03               	skipc
  7029  07F0  2FA6               	goto	l5876
  7030                           
  7031                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 788:     sample_period = best_sample_period
      +                          ;
  7032  07F1  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  7033  07F2  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7034  07F3  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7035  07F4  00EE               	movwf	_sample_period
  7036                           
  7037                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  7038  07F5  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  7039  07F6  00D3               	movwf	_packet_sample+1
  7040  07F7  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  7041  07F8  00D2               	movwf	_packet_sample
  7042                           
  7043                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  7044  07F9  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  7045  07FA  00D5               	movwf	_packet_sample+3
  7046  07FB  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  7047  07FC  00D4               	movwf	_packet_sample+2
  7048                           
  7049                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792:     return MTOUCH_SENSOR_ERROR_none;
  7050  07FD  3000               	movlw	0
  7051  07FE  0008               	return
  7052  07FF                     __end_of_Sensor_Scanfrequency_Evaluation:	
  7053                           
  7054                           	psect	text36
  7055  0054                     __ptext36:	
  7056 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  7057 ;; Defined at:
  7058 ;;		line 479 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  sensor_adc1     1    wreg     PTR struct .
  7061 ;;		 -> mtouch_sensor(36), 
  7062 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  7063 ;;		 -> mtouch_sensor(36), 
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  7066 ;;		 -> mtouch_sensor(36), 
  7067 ;;  last_b          2   10[BANK0 ] unsigned short 
  7068 ;;  last_a          2    8[BANK0 ] unsigned short 
  7069 ;;  packet_count    1   12[BANK0 ] unsigned char 
  7070 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  7071 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  7072 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  7073 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  7074 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  7075 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  7076 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  1    wreg      enum E2859
  7079 ;; Registers used:
  7080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7086 ;;      Params:         1       0       0       0       0       0       0       0
  7087 ;;      Locals:         0      13       0       0       0       0       0       0
  7088 ;;      Temps:          0       1       0       0       0       0       0       0
  7089 ;;      Totals:         1      14       0       0       0       0       0       0
  7090 ;;Total ram usage:       15 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    6
  7093 ;; This function calls:
  7094 ;;		_MTOUCH_Sensor_Scan_Initialize
  7095 ;;		_Sensor_autoCalibration
  7096 ;;		_Sensor_isActive
  7097 ;;		_Sensor_isCalibrated
  7098 ;;		_Sensor_isEnabled
  7099 ;;		_Sensor_loadADCSettings
  7100 ;;		_TMR2_LoadPeriodRegister
  7101 ;;		_TMR2_StartTimer
  7102 ;;		_TMR2_StopTimer
  7103 ;;		_abs
  7104 ;; This function is called by:
  7105 ;;		_Sensor_Acquisition
  7106 ;;		_Sensor_Scanfrequency_Evaluation
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           
  7111                           ;psect for function _Sensor_Acq_ExecutePacket
  7112  0054                     _Sensor_Acq_ExecutePacket:	
  7113                           
  7114                           ;incstack = 0
  7115                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7116                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  7117  0054  0020               	movlb	0	; select bank0
  7118  0055  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  7119                           
  7120                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 484:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  7121  0056  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  7122  0057  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  7123                           
  7124                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  7125  0058  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  7126  0059  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  7127                           
  7128                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 486:     uint8_t activeSensor = 0;
  7129  005A  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7130                           
  7131                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 489:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 495:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  7132  005B  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7133  005C  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7134                           
  7135                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  7136  005D  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7137  005E  1903               	btfsc	3,2
  7138  005F  2893               	goto	l5662
  7139  0060  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7140  0061  1903               	btfsc	3,2
  7141  0062  2893               	goto	l5662
  7142                           
  7143                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 497:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 498:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  7144  0063  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7145  0064  3E08               	addlw	8
  7146  0065  0086               	movwf	6
  7147  0066  0187               	clrf	7
  7148  0067  1981               	btfsc	1,3
  7149  0068  2877               	goto	l5644
  7150  0069  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7151  006A  3E08               	addlw	8
  7152  006B  0086               	movwf	6
  7153  006C  0187               	clrf	7
  7154  006D  1D81               	btfss	1,3
  7155  006E  2877               	goto	l5644
  7156                           
  7157                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 500:             sensor_adc1->enabled = 1;
  7158  006F  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7159  0070  3E08               	addlw	8
  7160  0071  0086               	movwf	6
  7161  0072  0187               	clrf	7
  7162  0073  1581               	bsf	1,3
  7163                           
  7164                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:             sensor1ForceEnabled = 1;
  7165  0074  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7166  0075  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  7167                           
  7168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 502:         }
  7169  0076  28A7               	goto	l5686
  7170  0077                     l5644:	
  7171  0077  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7172  0078  3E08               	addlw	8
  7173  0079  0086               	movwf	6
  7174  007A  0187               	clrf	7
  7175  007B  1981               	btfsc	1,3
  7176  007C  288B               	goto	l5652
  7177  007D  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7178  007E  3E08               	addlw	8
  7179  007F  0086               	movwf	6
  7180  0080  0187               	clrf	7
  7181  0081  1D81               	btfss	1,3
  7182  0082  288B               	goto	l5652
  7183                           
  7184                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 504:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 505:             sensor_adc2->enabled = 1;
  7185  0083  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7186  0084  3E08               	addlw	8
  7187  0085  0086               	movwf	6
  7188  0086  0187               	clrf	7
  7189  0087  1581               	bsf	1,3
  7190                           
  7191                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 506:             sensor2ForceEnabled = 1;
  7192  0088  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7193  0089  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  7194                           
  7195                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:         }
  7196  008A  28A7               	goto	l5686
  7197  008B                     l5652:	
  7198  008B  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7199  008C  3E08               	addlw	8
  7200  008D  0086               	movwf	6
  7201  008E  0187               	clrf	7
  7202  008F  1981               	btfsc	1,3
  7203  0090  28A7               	goto	l5686
  7204  0091                     l5654:	
  7205  0091  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7206  0092  28A0               	goto	L3
  7207  0093                     l5662:	
  7208                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 515:     }
  7209                           
  7210  0093  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7211  0094  1D03               	btfss	3,2
  7212  0095  2899               	goto	l5674
  7213  0096  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7214  0097  1D03               	btfss	3,2
  7215  0098  2891               	goto	l5654
  7216  0099                     l5674:	
  7217                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 517:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 518:         if(sensor_adc2->enabled == 0)
  7218                           
  7219  0099  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7220  009A  1903               	btfsc	3,2
  7221  009B  28A7               	goto	l5686
  7222  009C  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7223  009D  1D03               	btfss	3,2
  7224  009E  28A7               	goto	l5686
  7225                           
  7226                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 527:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 528:         if(sensor_adc1->enabled == 0)
  7227  009F  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7228  00A0                     L3:	
  7229  00A0  3E08               	addlw	8
  7230  00A1  0086               	movwf	6
  7231  00A2  0187               	clrf	7
  7232  00A3  1981               	btfsc	1,3
  7233  00A4  28A7               	goto	l5686
  7234  00A5                     l5656:	
  7235                           
  7236                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 510:             return MTOUCH_SENSOR_ERROR_none;
  7237  00A5  3000               	movlw	0
  7238  00A6  0008               	return
  7239  00A7                     l5686:	
  7240                           
  7241                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     if(Sensor_isActive(sensor_adc2))
  7242  00A7  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7243  00A8  3196  267D  3180   	fcall	_Sensor_isActive
  7244  00AB  3A00               	xorlw	0
  7245  00AC  1903               	skipnz
  7246  00AD  28B1               	goto	l5690
  7247                           
  7248                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         activeSensor = 1;
  7249  00AE  0020               	movlb	0	; select bank0
  7250  00AF  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7251  00B0  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  7252  00B1                     l5690:	
  7253                           
  7254                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     ADCOMCON_temp = ADCOMCON;
  7255  00B1  002E               	movlb	14	; select bank14
  7256  00B2  0812               	movf	18,w	;volatile
  7257  00B3  0020               	movlb	0	; select bank0
  7258  00B4  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7259  00B5  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7260  00B6  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  7261                           
  7262                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:     AD1CON2_temp = AD1CON2;
  7263  00B7  002E               	movlb	14	; select bank14
  7264  00B8  0813               	movf	19,w	;volatile
  7265  00B9  0020               	movlb	0	; select bank0
  7266  00BA  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7267  00BB  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7268  00BC  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  7269                           
  7270                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:     AD2CON2_temp = AD2CON2;
  7271  00BD  002F               	movlb	15	; select bank15
  7272  00BE  0813               	movf	19,w	;volatile
  7273  00BF  0020               	movlb	0	; select bank0
  7274  00C0  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7275  00C1  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7276  00C2  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  7277                           
  7278                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     MTOUCH_Sensor_Scan_Initialize();
  7279  00C3  3196  26C4  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  7280                           
  7281                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     if(sensor_adc1!=((void*)0))
  7282  00C6  0020               	movlb	0	; select bank0
  7283  00C7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7284  00C8  1903               	btfsc	3,2
  7285  00C9  28DC               	goto	l5706
  7286                           
  7287                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7288  00CA  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7289  00CB  3E04               	addlw	4
  7290  00CC  0086               	movwf	6
  7291  00CD  0187               	clrf	7
  7292  00CE  0801               	movf	1,w
  7293  00CF  3EFF               	addlw	255
  7294  00D0  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7295  00D1  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7296  00D2  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7297                           
  7298                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 0;
  7299  00D3  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7300                           
  7301                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b01000000;
  7302  00D4  3040               	movlw	64
  7303  00D5  002E               	movlb	14	; select bank14
  7304  00D6  0098               	movwf	24	;volatile
  7305                           
  7306                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b00000000;
  7307  00D7  002F               	movlb	15	; select bank15
  7308  00D8  0198               	clrf	24	;volatile
  7309                           
  7310                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  7311  00D9  0022               	movlb	2	; select bank2
  7312  00DA  101D               	bcf	29,0	;volatile
  7313                           
  7314                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 561:     }
  7315  00DB  28EE               	goto	l5716
  7316  00DC                     l5706:	
  7317                           
  7318                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 564:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7319  00DC  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7320  00DD  3E04               	addlw	4
  7321  00DE  0086               	movwf	6
  7322  00DF  0187               	clrf	7
  7323  00E0  0801               	movf	1,w
  7324  00E1  3EFF               	addlw	255
  7325  00E2  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7326  00E3  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7327  00E4  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7328                           
  7329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         ADxIF_flag = 1;
  7330  00E5  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7331  00E6  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  7332                           
  7333                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         AAD1GRD = 0b00000000;
  7334  00E7  002E               	movlb	14	; select bank14
  7335  00E8  0198               	clrf	24	;volatile
  7336                           
  7337                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:         AAD2GRD = 0b01000000;
  7338  00E9  3040               	movlw	64
  7339  00EA  002F               	movlb	15	; select bank15
  7340  00EB  0098               	movwf	24	;volatile
  7341                           
  7342                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:         APFCONbits.GRDASEL = 0x1;
  7343  00EC  0022               	movlb	2	; select bank2
  7344  00ED  141D               	bsf	29,0	;volatile
  7345  00EE                     l5716:	
  7346                           
  7347                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  7348  00EE  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7349  00EF  0020               	movlb	0	; select bank0
  7350  00F0  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7351  00F1  3183  2306  3180   	fcall	_Sensor_loadADCSettings
  7352                           
  7353                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  7354  00F4  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7355  00F5  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  7356  00F6  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7357  00F7  3183  2306  3180   	fcall	_Sensor_loadADCSettings
  7358                           
  7359                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:     sensor_globalFlags.done = 0;
  7360  00FA  0020               	movlb	0	; select bank0
  7361  00FB  1060               	bcf	_sensor_globalFlags,0	;volatile
  7362                           
  7363                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     sensor_globalFlags.error = 0;
  7364  00FC  1160               	bcf	_sensor_globalFlags,2	;volatile
  7365                           
  7366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 576:     sensor_globalFlags.interrupted = 0
      +                          ;
  7367  00FD  11E0               	bcf	_sensor_globalFlags,3	;volatile
  7368                           
  7369                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  7370  00FE  086E               	movf	_sample_period,w
  7371  00FF  3195  25E6  3180   	fcall	_TMR2_LoadPeriodRegister
  7372                           
  7373                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 579:     TMR2_StartTimer();
  7374  0102  3195  25CD  3180   	fcall	_TMR2_StartTimer
  7375                           
  7376                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:     packet_noise = 0;
  7377  0105  0020               	movlb	0	; select bank0
  7378  0106  01DA               	clrf	_packet_noise
  7379  0107  01DB               	clrf	_packet_noise+1
  7380  0108                     l5732:	
  7381                           
  7382                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 584:         if(ADxIF_flag == 0)
  7383  0108  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  7384  0109  1D03               	btfss	3,2
  7385  010A  2911               	goto	l860
  7386                           
  7387                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 586:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7388  010B  1F11               	btfss	17,6	;volatile
  7389  010C  10E0               	bcf	_sensor_globalFlags,1	;volatile
  7390  010D                     l862:	
  7391  010D  1F11               	btfss	17,6	;volatile
  7392  010E  290D               	goto	l862
  7393                           
  7394                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588:             PIR1bits.AD1IF = 0;
  7395  010F  1311               	bcf	17,6	;volatile
  7396                           
  7397                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         }
  7398  0110  2917               	goto	l5740
  7399  0111                     l860:	
  7400                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         else
  7401                           
  7402                           
  7403                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 592:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7404  0111  1B12               	btfsc	18,6	;volatile
  7405  0112  2914               	goto	l867
  7406  0113  10E0               	bcf	_sensor_globalFlags,1	;volatile
  7407  0114                     l867:	
  7408  0114  1F12               	btfss	18,6	;volatile
  7409  0115  2914               	goto	l867
  7410                           
  7411                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:             PIR2bits.AD2IF = 0;
  7412  0116  1312               	bcf	18,6	;volatile
  7413  0117                     l5740:	
  7414                           
  7415                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:         AAD1GRD ^= 0b00100001;
  7416  0117  3021               	movlw	33
  7417  0118  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7418  0119  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7419  011A  002E               	movlb	14	; select bank14
  7420  011B  0698               	xorwf	24,f	;volatile
  7421                           
  7422                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:         AAD2GRD ^= 0b00100001;
  7423  011C  3021               	movlw	33
  7424  011D  0020               	movlb	0	; select bank0
  7425  011E  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7426  011F  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7427  0120  002F               	movlb	15	; select bank15
  7428  0121  0698               	xorwf	24,f	;volatile
  7429                           
  7430                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:         AAD1CON3 ^= 0b11000000;
  7431  0122  30C0               	movlw	192
  7432  0123  0020               	movlb	0	; select bank0
  7433  0124  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7434  0125  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7435  0126  002E               	movlb	14	; select bank14
  7436  0127  0694               	xorwf	20,f	;volatile
  7437                           
  7438                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:         AAD2CON3 ^= 0b11000000;
  7439  0128  30C0               	movlw	192
  7440  0129  0020               	movlb	0	; select bank0
  7441  012A  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7442  012B  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7443  012C  002F               	movlb	15	; select bank15
  7444  012D  0694               	xorwf	20,f	;volatile
  7445                           
  7446                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:         if ((packet_counter & 0x01) ==
      +                           0)
  7447  012E  0020               	movlb	0	; select bank0
  7448  012F  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  7449  0130  2977               	goto	l5756
  7450                           
  7451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 603:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 604:             packet_sample[0] += AAD1RES0;
  7452  0131  002E               	movlb	14	; select bank14
  7453  0132  081A               	movf	26,w	;volatile
  7454  0133  0020               	movlb	0	; select bank0
  7455  0134  07D2               	addwf	_packet_sample,f
  7456  0135  002E               	movlb	14	; select bank14
  7457  0136  081B               	movf	27,w	;volatile
  7458  0137  0020               	movlb	0	; select bank0
  7459  0138  3DD3               	addwfc	_packet_sample+1,f
  7460                           
  7461                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 605:             packet_sample[1] += AAD2RE
      +                          S0;
  7462  0139  002F               	movlb	15	; select bank15
  7463  013A  081A               	movf	26,w	;volatile
  7464  013B  0020               	movlb	0	; select bank0
  7465  013C  07D4               	addwf	_packet_sample+2,f
  7466  013D  002F               	movlb	15	; select bank15
  7467  013E  081B               	movf	27,w	;volatile
  7468  013F  0020               	movlb	0	; select bank0
  7469  0140  3DD5               	addwfc	_packet_sample+3,f
  7470                           
  7471                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:             if(activeSensor ==0)
  7472  0141  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7473  0142  1D03               	btfss	3,2
  7474  0143  295C               	goto	l5752
  7475                           
  7476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 607:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 608:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  7477  0144  002E               	movlb	14	; select bank14
  7478  0145  081A               	movf	26,w	;volatile
  7479  0146  0020               	movlb	0	; select bank0
  7480  0147  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7481  0148  00F1               	movwf	abs@a
  7482  0149  002E               	movlb	14	; select bank14
  7483  014A  081B               	movf	27,w	;volatile
  7484  014B  0020               	movlb	0	; select bank0
  7485  014C  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7486  014D  00F2               	movwf	abs@a+1
  7487  014E  3197  27D1  3180   	fcall	_abs
  7488  0151  0871               	movf	?_abs,w
  7489  0152  0020               	movlb	0	; select bank0
  7490  0153  07DA               	addwf	_packet_noise,f
  7491  0154  0872               	movf	?_abs+1,w
  7492  0155  3DDB               	addwfc	_packet_noise+1,f
  7493                           
  7494                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 609:                 last_b = AAD1RES0;
  7495  0156  002E               	movlb	14	; select bank14
  7496  0157  081B               	movf	27,w	;volatile
  7497  0158  0020               	movlb	0	; select bank0
  7498  0159  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7499  015A  002E               	movlb	14	; select bank14
  7500  015B  2973               	goto	L2
  7501  015C                     l5752:	
  7502                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:             }
  7503                           
  7504                           
  7505                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 613:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  7506  015C  002F               	movlb	15	; select bank15
  7507  015D  081A               	movf	26,w	;volatile
  7508  015E  0020               	movlb	0	; select bank0
  7509  015F  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7510  0160  00F1               	movwf	abs@a
  7511  0161  002F               	movlb	15	; select bank15
  7512  0162  081B               	movf	27,w	;volatile
  7513  0163  0020               	movlb	0	; select bank0
  7514  0164  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7515  0165  00F2               	movwf	abs@a+1
  7516  0166  3197  27D1  3180   	fcall	_abs
  7517  0169  0871               	movf	?_abs,w
  7518  016A  0020               	movlb	0	; select bank0
  7519  016B  07DA               	addwf	_packet_noise,f
  7520  016C  0872               	movf	?_abs+1,w
  7521  016D  3DDB               	addwfc	_packet_noise+1,f
  7522                           
  7523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:                 last_b = AAD2RES0;
  7524  016E  002F               	movlb	15	; select bank15
  7525  016F  081B               	movf	27,w	;volatile
  7526  0170  0020               	movlb	0	; select bank0
  7527  0171  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7528  0172  002F               	movlb	15	; select bank15
  7529  0173                     L2:	
  7530  0173  081A               	movf	26,w	;volatile
  7531  0174  0020               	movlb	0	; select bank0
  7532  0175  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  7533  0176  29AB               	goto	l5768
  7534  0177                     l5756:	
  7535                           
  7536                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 618:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 619:             packet_sample[0] -= AAD1RES0;
  7537  0177  002E               	movlb	14	; select bank14
  7538  0178  081A               	movf	26,w	;volatile
  7539  0179  0020               	movlb	0	; select bank0
  7540  017A  02D2               	subwf	_packet_sample,f
  7541  017B  002E               	movlb	14	; select bank14
  7542  017C  081B               	movf	27,w	;volatile
  7543  017D  0020               	movlb	0	; select bank0
  7544  017E  3BD3               	subwfb	_packet_sample+1,f
  7545                           
  7546                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:             packet_sample[1] -= AAD2RE
      +                          S0;
  7547  017F  002F               	movlb	15	; select bank15
  7548  0180  081A               	movf	26,w	;volatile
  7549  0181  0020               	movlb	0	; select bank0
  7550  0182  02D4               	subwf	_packet_sample+2,f
  7551  0183  002F               	movlb	15	; select bank15
  7552  0184  081B               	movf	27,w	;volatile
  7553  0185  0020               	movlb	0	; select bank0
  7554  0186  3BD5               	subwfb	_packet_sample+3,f
  7555                           
  7556                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:             if(activeSensor ==0)
  7557  0187  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7558  0188  1D03               	btfss	3,2
  7559  0189  2991               	goto	l5764
  7560                           
  7561                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 623:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  7562  018A  002E               	movlb	14	; select bank14
  7563  018B  081A               	movf	26,w	;volatile
  7564  018C  0020               	movlb	0	; select bank0
  7565  018D  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7566  018E  00F1               	movwf	abs@a
  7567  018F  002E               	movlb	14	; select bank14
  7568  0190  2997               	goto	L5
  7569  0191                     l5764:	
  7570                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:             }
  7571                           
  7572                           
  7573                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 628:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  7574  0191  002F               	movlb	15	; select bank15
  7575  0192  081A               	movf	26,w	;volatile
  7576  0193  0020               	movlb	0	; select bank0
  7577  0194  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7578  0195  00F1               	movwf	abs@a
  7579  0196  002F               	movlb	15	; select bank15
  7580  0197                     L5:	
  7581  0197  081B               	movf	27,w	;volatile
  7582  0198  0020               	movlb	0	; select bank0
  7583  0199  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  7584  019A  00F2               	movwf	abs@a+1
  7585  019B  3197  27D1  3180   	fcall	_abs
  7586  019E  0871               	movf	?_abs,w
  7587  019F  0020               	movlb	0	; select bank0
  7588  01A0  07DA               	addwf	_packet_noise,f
  7589  01A1  0872               	movf	?_abs+1,w
  7590  01A2  3DDB               	addwfc	_packet_noise+1,f
  7591                           
  7592                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 624:                 last_a = AAD1RES0;
  7593  01A3  002E               	movlb	14	; select bank14
  7594  01A4  081B               	movf	27,w	;volatile
  7595  01A5  0020               	movlb	0	; select bank0
  7596  01A6  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  7597  01A7  002E               	movlb	14	; select bank14
  7598  01A8  081A               	movf	26,w	;volatile
  7599  01A9  0020               	movlb	0	; select bank0
  7600  01AA  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  7601  01AB                     l5768:	
  7602                           
  7603                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         if (packet_counter == 0)
  7604  01AB  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  7605  01AC  1903               	btfsc	3,2
  7606                           
  7607                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 637:             sensor_globalFlags.done = (uint8_t)1;
  7608  01AD  1460               	bsf	_sensor_globalFlags,0	;volatile
  7609                           
  7610                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:         packet_counter--;
  7611  01AE  3001               	movlw	1
  7612  01AF  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  7613                           
  7614                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:         if (sensor_globalFlags.check !
      +                          = 0)
  7615  01B0  1CE0               	btfss	_sensor_globalFlags,1	;volatile
  7616  01B1  29B4               	goto	l877
  7617                           
  7618                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 643:             sensor_globalFlags.error = 1;
  7619  01B2  1560               	bsf	_sensor_globalFlags,2	;volatile
  7620                           
  7621                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:             sensor_globalFlags.done = 
      +                          1;
  7622  01B3  1460               	bsf	_sensor_globalFlags,0	;volatile
  7623  01B4                     l877:	
  7624                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 645:         }
  7625                           
  7626                           
  7627                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:         sensor_globalFlags.check = 1;
  7628  01B4  14E0               	bsf	_sensor_globalFlags,1	;volatile
  7629                           
  7630                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     } while(sensor_globalFlags.done ==
      +                           0);
  7631  01B5  1C60               	btfss	_sensor_globalFlags,0	;volatile
  7632  01B6  2908               	goto	l5732
  7633                           
  7634                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     TMR2_StopTimer();
  7635  01B7  3195  25D0  3180   	fcall	_TMR2_StopTimer
  7636                           
  7637                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 650:     ADCOMCON = ADCOMCON_temp;
  7638  01BA  0020               	movlb	0	; select bank0
  7639  01BB  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  7640  01BC  002E               	movlb	14	; select bank14
  7641  01BD  0092               	movwf	18	;volatile
  7642                           
  7643                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     AD1CON2 = AD1CON2_temp;
  7644  01BE  0020               	movlb	0	; select bank0
  7645  01BF  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  7646  01C0  002E               	movlb	14	; select bank14
  7647  01C1  0093               	movwf	19	;volatile
  7648                           
  7649                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     AD2CON2 = AD2CON2_temp;
  7650  01C2  0020               	movlb	0	; select bank0
  7651  01C3  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  7652  01C4  002F               	movlb	15	; select bank15
  7653  01C5  0093               	movwf	19	;volatile
  7654                           
  7655                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     if(sensor_globalFlags.error)
  7656  01C6  0020               	movlb	0	; select bank0
  7657  01C7  1D60               	btfss	_sensor_globalFlags,2	;volatile
  7658  01C8  29CB               	goto	l879
  7659                           
  7660                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 656:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  7661  01C9  30FB               	movlw	251
  7662  01CA  0008               	return
  7663  01CB                     l879:	
  7664                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     }
  7665                           
  7666                           
  7667                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 659:     if(sensor_globalFlags.interrupted)
  7668  01CB  1DE0               	btfss	_sensor_globalFlags,3	;volatile
  7669  01CC  29CF               	goto	l5796
  7670                           
  7671                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 661:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  7672  01CD  30FA               	movlw	250
  7673  01CE  0008               	return
  7674  01CF                     l5796:	
  7675                           
  7676                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:     if (sensor1ForceEnabled)
  7677  01CF  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  7678  01D0  1903               	btfsc	3,2
  7679  01D1  29D7               	goto	l5800
  7680                           
  7681                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 666:         sensor_adc1->enabled = 0;
  7682  01D2  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7683  01D3  3E08               	addlw	8
  7684  01D4  0086               	movwf	6
  7685  01D5  0187               	clrf	7
  7686  01D6  1181               	bcf	1,3
  7687  01D7                     l5800:	
  7688                           
  7689                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:     if (sensor2ForceEnabled)
  7690  01D7  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  7691  01D8  1903               	btfsc	3,2
  7692  01D9  29DF               	goto	l5804
  7693                           
  7694                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 669:         sensor_adc2->enabled = 0;
  7695  01DA  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7696  01DB  3E08               	addlw	8
  7697  01DC  0086               	movwf	6
  7698  01DD  0187               	clrf	7
  7699  01DE  1181               	bcf	1,3
  7700  01DF                     l5804:	
  7701                           
  7702                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  7703  01DF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7704  01E0  3196  26D4  3180   	fcall	_Sensor_isEnabled
  7705  01E3  3A00               	xorlw	0
  7706  01E4  1903               	skipnz
  7707  01E5  29F3               	goto	l5810
  7708  01E6  0020               	movlb	0	; select bank0
  7709  01E7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7710  01E8  3196  264F  3180   	fcall	_Sensor_isCalibrated
  7711  01EB  3A00               	xorlw	0
  7712  01EC  1D03               	skipz
  7713  01ED  29F3               	goto	l5810
  7714                           
  7715                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:         Sensor_autoCalibration(sensor_
      +                          adc1);
  7716  01EE  0020               	movlb	0	; select bank0
  7717  01EF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7718  01F0  318E  2654  3180   	fcall	_Sensor_autoCalibration
  7719  01F3                     l5810:	
  7720                           
  7721                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  7722  01F3  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7723  01F4  3196  26D4  3180   	fcall	_Sensor_isEnabled
  7724  01F7  3A00               	xorlw	0
  7725  01F8  1903               	skipnz
  7726  01F9  2A05               	goto	l5816
  7727  01FA  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7728  01FB  3196  264F  3180   	fcall	_Sensor_isCalibrated
  7729  01FE  3A00               	xorlw	0
  7730  01FF  1D03               	skipz
  7731  0200  2A05               	goto	l5816
  7732                           
  7733                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:         Sensor_autoCalibration(sensor_
      +                          adc2);
  7734  0201  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7735  0202  318E  2654  3180   	fcall	_Sensor_autoCalibration
  7736  0205                     l5816:	
  7737                           
  7738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 678:     AD1PRECON = 0;
  7739  0205  002E               	movlb	14	; select bank14
  7740  0206  0196               	clrf	22	;volatile
  7741                           
  7742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 679:     AD2PRECON = 0;
  7743  0207  002F               	movlb	15	; select bank15
  7744  0208  0196               	clrf	22	;volatile
  7745                           
  7746                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 680:     AD1ACQCON = 0;
  7747  0209  002E               	movlb	14	; select bank14
  7748  020A  0197               	clrf	23	;volatile
  7749                           
  7750                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 681:     AD2ACQCON = 0;
  7751  020B  002F               	movlb	15	; select bank15
  7752  020C  0197               	clrf	23	;volatile
  7753                           
  7754                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 682:     AD1CON0bits.ADON = 0;
  7755  020D  002E               	movlb	14	; select bank14
  7756  020E  1011               	bcf	17,0	;volatile
  7757                           
  7758                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 683:     AD2CON0bits.ADON = 0;
  7759  020F  002F               	movlb	15	; select bank15
  7760  0210  1011               	bcf	17,0	;volatile
  7761  0211  28A5               	goto	l5656
  7762  0212                     __end_of_Sensor_Acq_ExecutePacket:	
  7763                           
  7764                           	psect	text37
  7765  15D0                     __ptext37:	
  7766 ;; *************** function _TMR2_StopTimer *****************
  7767 ;; Defined at:
  7768 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;		None
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		None
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7782 ;;      Params:         0       0       0       0       0       0       0       0
  7783 ;;      Locals:         0       0       0       0       0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0       0
  7785 ;;      Totals:         0       0       0       0       0       0       0       0
  7786 ;;Total ram usage:        0 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    4
  7789 ;; This function calls:
  7790 ;;		Nothing
  7791 ;; This function is called by:
  7792 ;;		_Sensor_Acq_ExecutePacket
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           
  7797                           ;psect for function _TMR2_StopTimer
  7798  15D0                     _TMR2_StopTimer:	
  7799                           
  7800                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  7801                           
  7802                           ;incstack = 0
  7803                           ; Regs used in _TMR2_StopTimer: []
  7804  15D0  0020               	movlb	0	; select bank0
  7805  15D1  111C               	bcf	28,2	;volatile
  7806  15D2  0008               	return
  7807  15D3                     __end_of_TMR2_StopTimer:	
  7808                           
  7809                           	psect	text38
  7810  15CD                     __ptext38:	
  7811 ;; *************** function _TMR2_StartTimer *****************
  7812 ;; Defined at:
  7813 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  1    wreg      void 
  7820 ;; Registers used:
  7821 ;;		None
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7827 ;;      Params:         0       0       0       0       0       0       0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0       0
  7830 ;;      Totals:         0       0       0       0       0       0       0       0
  7831 ;;Total ram usage:        0 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    4
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		_Sensor_Acq_ExecutePacket
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           
  7842                           ;psect for function _TMR2_StartTimer
  7843  15CD                     _TMR2_StartTimer:	
  7844                           
  7845                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  7846                           
  7847                           ;incstack = 0
  7848                           ; Regs used in _TMR2_StartTimer: []
  7849  15CD  0020               	movlb	0	; select bank0
  7850  15CE  151C               	bsf	28,2	;volatile
  7851  15CF  0008               	return
  7852  15D0                     __end_of_TMR2_StartTimer:	
  7853                           
  7854                           	psect	text39
  7855  15E6                     __ptext39:	
  7856 ;; *************** function _TMR2_LoadPeriodRegister *****************
  7857 ;; Defined at:
  7858 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;  periodVal       1    wreg     unsigned char 
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;  periodVal       1    1[COMMON] unsigned char 
  7863 ;; Return value:  Size  Location     Type
  7864 ;;                  1    wreg      void 
  7865 ;; Registers used:
  7866 ;;		wreg
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7872 ;;      Params:         0       0       0       0       0       0       0       0
  7873 ;;      Locals:         1       0       0       0       0       0       0       0
  7874 ;;      Temps:          0       0       0       0       0       0       0       0
  7875 ;;      Totals:         1       0       0       0       0       0       0       0
  7876 ;;Total ram usage:        1 bytes
  7877 ;; Hardware stack levels used:    1
  7878 ;; Hardware stack levels required when called:    4
  7879 ;; This function calls:
  7880 ;;		Nothing
  7881 ;; This function is called by:
  7882 ;;		_Sensor_Acq_ExecutePacket
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           
  7887                           ;psect for function _TMR2_LoadPeriodRegister
  7888  15E6                     _TMR2_LoadPeriodRegister:	
  7889                           
  7890                           ;incstack = 0
  7891                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  7892                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  7893  15E6  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  7894                           
  7895                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  7896  15E7  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  7897  15E8  0020               	movlb	0	; select bank0
  7898  15E9  009B               	movwf	27	;volatile
  7899  15EA  0008               	return
  7900  15EB                     __end_of_TMR2_LoadPeriodRegister:	
  7901                           
  7902                           	psect	text40
  7903  0306                     __ptext40:	
  7904 ;; *************** function _Sensor_loadADCSettings *****************
  7905 ;; Defined at:
  7906 ;;		line 445 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;  sensor          1    wreg     PTR struct .
  7909 ;;		 -> mtouch_sensor(36), 
  7910 ;;  adc_index       1    2[COMMON] unsigned char 
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;  sensor          1    9[COMMON] PTR struct .
  7913 ;;		 -> mtouch_sensor(36), 
  7914 ;;  addressOffse    1    8[COMMON] unsigned char 
  7915 ;; Return value:  Size  Location     Type
  7916 ;;                  1    wreg      void 
  7917 ;; Registers used:
  7918 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7924 ;;      Params:         1       0       0       0       0       0       0       0
  7925 ;;      Locals:         4       0       0       0       0       0       0       0
  7926 ;;      Temps:          3       0       0       0       0       0       0       0
  7927 ;;      Totals:         8       0       0       0       0       0       0       0
  7928 ;;Total ram usage:        8 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:    5
  7931 ;; This function calls:
  7932 ;;		_Sensor_isCalibrated
  7933 ;;		_Sensor_isCalibratingAcqTime
  7934 ;; This function is called by:
  7935 ;;		_Sensor_Acq_ExecutePacket
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           
  7940                           ;psect for function _Sensor_loadADCSettings
  7941  0306                     _Sensor_loadADCSettings:	
  7942                           
  7943                           ;incstack = 0
  7944                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7945                           ;Sensor_loadADCSettings@sensor stored from wreg
  7946  0306  00F9               	movwf	Sensor_loadADCSettings@sensor
  7947                           
  7948                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 446
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     if (sensor == ((void*)0))
  7949  0307  0879               	movf	Sensor_loadADCSettings@sensor,w
  7950  0308  1903               	btfsc	3,2
  7951  0309  0008               	return
  7952                           
  7953                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  7954  030A  0872               	movf	Sensor_loadADCSettings@adc_index,w
  7955  030B  1D03               	btfss	3,2
  7956  030C  2B10               	goto	l3940
  7957  030D  01F6               	clrf	_Sensor_loadADCSettings$1223
  7958  030E  01F7               	clrf	_Sensor_loadADCSettings$1223+1
  7959  030F  2B14               	goto	l831
  7960  0310                     l3940:	
  7961  0310  3080               	movlw	128
  7962  0311  00F6               	movwf	_Sensor_loadADCSettings$1223
  7963  0312  3000               	movlw	0
  7964  0313  00F7               	movwf	_Sensor_loadADCSettings$1223+1
  7965  0314                     l831:	
  7966  0314  0876               	movf	_Sensor_loadADCSettings$1223,w
  7967  0315  00F3               	movwf	??_Sensor_loadADCSettings
  7968  0316  0873               	movf	??_Sensor_loadADCSettings,w
  7969  0317  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  7970                           
  7971                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  7972  0318  0A79               	incf	Sensor_loadADCSettings@sensor,w
  7973  0319  0086               	movwf	6
  7974  031A  0187               	clrf	7
  7975  031B  0801               	movf	1,w
  7976  031C  00F3               	movwf	??_Sensor_loadADCSettings
  7977  031D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7978  031E  3E11               	addlw	17
  7979  031F  00F4               	movwf	??_Sensor_loadADCSettings+1
  7980  0320  01F5               	clrf	??_Sensor_loadADCSettings+2
  7981  0321  3007               	movlw	7
  7982  0322  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  7983  0323  0874               	movf	??_Sensor_loadADCSettings+1,w
  7984  0324  0086               	movwf	6
  7985  0325  0875               	movf	??_Sensor_loadADCSettings+2,w
  7986  0326  0087               	movwf	7
  7987  0327  0873               	movf	??_Sensor_loadADCSettings,w
  7988  0328  0081               	movwf	1
  7989                           
  7990                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  7991  0329  0879               	movf	Sensor_loadADCSettings@sensor,w
  7992  032A  3E05               	addlw	5
  7993  032B  0086               	movwf	6
  7994  032C  0187               	clrf	7
  7995  032D  0801               	movf	1,w
  7996  032E  00F3               	movwf	??_Sensor_loadADCSettings
  7997  032F  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7998  0330  3E19               	addlw	25
  7999  0331  00F4               	movwf	??_Sensor_loadADCSettings+1
  8000  0332  01F5               	clrf	??_Sensor_loadADCSettings+2
  8001  0333  3007               	movlw	7
  8002  0334  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8003  0335  0874               	movf	??_Sensor_loadADCSettings+1,w
  8004  0336  0086               	movwf	6
  8005  0337  0875               	movf	??_Sensor_loadADCSettings+2,w
  8006  0338  0087               	movwf	7
  8007  0339  0873               	movf	??_Sensor_loadADCSettings,w
  8008  033A  0081               	movwf	1
  8009                           
  8010                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 454:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  8011  033B  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8012  033C  3E13               	addlw	19
  8013  033D  00F3               	movwf	??_Sensor_loadADCSettings
  8014  033E  01F4               	clrf	??_Sensor_loadADCSettings+1
  8015  033F  3007               	movlw	7
  8016  0340  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8017  0341  0873               	movf	??_Sensor_loadADCSettings,w
  8018  0342  0086               	movwf	6
  8019  0343  0874               	movf	??_Sensor_loadADCSettings+1,w
  8020  0344  0087               	movwf	7
  8021  0345  3050               	movlw	80
  8022  0346  0081               	movwf	1
  8023                           
  8024                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  8025  0347  30FE               	movlw	254
  8026  0348  00F3               	movwf	??_Sensor_loadADCSettings
  8027  0349  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8028  034A  3E18               	addlw	24
  8029  034B  0086               	movwf	6
  8030  034C  0187               	clrf	7
  8031  034D  3007               	movlw	7
  8032  034E  3D87               	addwfc	7,f
  8033  034F  0873               	movf	??_Sensor_loadADCSettings,w
  8034  0350  0581               	andwf	1,f
  8035                           
  8036                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:     if (Sensor_isCalibrated(sensor))
  8037  0351  0879               	movf	Sensor_loadADCSettings@sensor,w
  8038  0352  3196  264F  3183   	fcall	_Sensor_isCalibrated
  8039  0355  3A00               	xorlw	0
  8040  0356  1903               	skipnz
  8041  0357  2B6B               	goto	l3954
  8042                           
  8043                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 459:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  8044  0358  0879               	movf	Sensor_loadADCSettings@sensor,w
  8045  0359  3E02               	addlw	2
  8046  035A  0086               	movwf	6
  8047  035B  0187               	clrf	7
  8048  035C  0801               	movf	1,w
  8049  035D  00F3               	movwf	??_Sensor_loadADCSettings
  8050  035E  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8051  035F  3E16               	addlw	22
  8052  0360  00F4               	movwf	??_Sensor_loadADCSettings+1
  8053  0361  01F5               	clrf	??_Sensor_loadADCSettings+2
  8054  0362  3007               	movlw	7
  8055  0363  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8056  0364  0874               	movf	??_Sensor_loadADCSettings+1,w
  8057  0365  0086               	movwf	6
  8058  0366  0875               	movf	??_Sensor_loadADCSettings+2,w
  8059  0367  0087               	movwf	7
  8060  0368  0873               	movf	??_Sensor_loadADCSettings,w
  8061  0369  0081               	movwf	1
  8062  036A  2B7E               	goto	l3958
  8063  036B                     l3954:	
  8064                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  8065                           
  8066                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  8067                           
  8068                           
  8069                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 464:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  8070  036B  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8071  036C  3E16               	addlw	22
  8072  036D  00F3               	movwf	??_Sensor_loadADCSettings
  8073  036E  01F4               	clrf	??_Sensor_loadADCSettings+1
  8074  036F  3007               	movlw	7
  8075  0370  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8076  0371  0873               	movf	??_Sensor_loadADCSettings,w
  8077  0372  0086               	movwf	6
  8078  0373  0874               	movf	??_Sensor_loadADCSettings+1,w
  8079  0374  0087               	movwf	7
  8080  0375  3020               	movlw	32
  8081  0376  0081               	movwf	1
  8082                           
  8083                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 465:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  8084  0377  0879               	movf	Sensor_loadADCSettings@sensor,w
  8085  0378  3196  263F  3183   	fcall	_Sensor_isCalibratingAcqTime
  8086  037B  3A00               	xorlw	0
  8087  037C  1903               	skipnz
  8088  037D  2B90               	goto	l3960
  8089  037E                     l3958:	
  8090                           
  8091                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 466:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  8092  037E  0879               	movf	Sensor_loadADCSettings@sensor,w
  8093  037F  3E03               	addlw	3
  8094  0380  0086               	movwf	6
  8095  0381  0187               	clrf	7
  8096  0382  0801               	movf	1,w
  8097  0383  00F3               	movwf	??_Sensor_loadADCSettings
  8098  0384  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8099  0385  3E17               	addlw	23
  8100  0386  00F4               	movwf	??_Sensor_loadADCSettings+1
  8101  0387  01F5               	clrf	??_Sensor_loadADCSettings+2
  8102  0388  3007               	movlw	7
  8103  0389  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8104  038A  0874               	movf	??_Sensor_loadADCSettings+1,w
  8105  038B  0086               	movwf	6
  8106  038C  0875               	movf	??_Sensor_loadADCSettings+2,w
  8107  038D  0087               	movwf	7
  8108  038E  0873               	movf	??_Sensor_loadADCSettings,w
  8109  038F  2B9B               	goto	L6
  8110  0390                     l3960:	
  8111                           
  8112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 468:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  8113  0390  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8114  0391  3E17               	addlw	23
  8115  0392  00F3               	movwf	??_Sensor_loadADCSettings
  8116  0393  01F4               	clrf	??_Sensor_loadADCSettings+1
  8117  0394  3007               	movlw	7
  8118  0395  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8119  0396  0873               	movf	??_Sensor_loadADCSettings,w
  8120  0397  0086               	movwf	6
  8121  0398  0874               	movf	??_Sensor_loadADCSettings+1,w
  8122  0399  0087               	movwf	7
  8123  039A  3020               	movlw	32
  8124  039B                     L6:	
  8125  039B  0081               	movwf	1
  8126                           
  8127                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  8128                           
  8129                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 469:     }
  8130  039C  0879               	movf	Sensor_loadADCSettings@sensor,w
  8131  039D  3E04               	addlw	4
  8132  039E  0086               	movwf	6
  8133  039F  0187               	clrf	7
  8134  03A0  0801               	movf	1,w
  8135  03A1  00F3               	movwf	??_Sensor_loadADCSettings
  8136  03A2  01F4               	clrf	??_Sensor_loadADCSettings+1
  8137  03A3  3009               	movlw	9
  8138  03A4                     u2165:	
  8139  03A4  35F3               	lslf	??_Sensor_loadADCSettings,f
  8140  03A5  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  8141  03A6  0B89               	decfsz	9,f
  8142  03A7  2BA4               	goto	u2165
  8143  03A8  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  8144  03A9  3E52               	addlw	(low (_packet_sample| 0))& (0+255)
  8145  03AA  0086               	movwf	6
  8146  03AB  0187               	clrf	7
  8147  03AC  0873               	movf	??_Sensor_loadADCSettings,w
  8148  03AD  3FC0               	movwi [0]fsr1
  8149  03AE  0874               	movf	??_Sensor_loadADCSettings+1,w
  8150  03AF  3FC1               	movwi [1]fsr1
  8151  03B0  0008               	return
  8152  03B1                     __end_of_Sensor_loadADCSettings:	
  8153                           
  8154                           	psect	text41
  8155  164F                     __ptext41:	
  8156 ;; *************** function _Sensor_isCalibrated *****************
  8157 ;; Defined at:
  8158 ;;		line 928 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;  sensor          1    wreg     PTR struct .
  8161 ;;		 -> mtouch_sensor(36), 
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  sensor          1    1[COMMON] PTR struct .
  8164 ;;		 -> mtouch_sensor(36), 
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  1    wreg      _Bool 
  8167 ;; Registers used:
  8168 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8174 ;;      Params:         0       0       0       0       0       0       0       0
  8175 ;;      Locals:         1       0       0       0       0       0       0       0
  8176 ;;      Temps:          0       0       0       0       0       0       0       0
  8177 ;;      Totals:         1       0       0       0       0       0       0       0
  8178 ;;Total ram usage:        1 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    4
  8181 ;; This function calls:
  8182 ;;		Nothing
  8183 ;; This function is called by:
  8184 ;;		_Sensor_Acquisition
  8185 ;;		_Sensor_loadADCSettings
  8186 ;;		_Sensor_Acq_ExecutePacket
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           
  8191                           ;psect for function _Sensor_isCalibrated
  8192  164F                     _Sensor_isCalibrated:	
  8193                           
  8194                           ;incstack = 0
  8195                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8196                           ;Sensor_isCalibrated@sensor stored from wreg
  8197  164F  00F1               	movwf	Sensor_isCalibrated@sensor
  8198                           
  8199                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          929: {;mcc_generated_files/mtouch/mtouch_sensor.c: 930:     return (_Bool)sensor->calibr
      +                          ated;
  8200  1650  0871               	movf	Sensor_isCalibrated@sensor,w
  8201  1651  3E08               	addlw	8
  8202  1652  0086               	movwf	6
  8203  1653  0187               	clrf	7
  8204  1654  0C01               	rrf	1,w
  8205  1655  0C89               	rrf	9,f
  8206  1656  3901               	andlw	1
  8207  1657  0008               	return
  8208  1658                     __end_of_Sensor_isCalibrated:	
  8209                           
  8210                           	psect	text42
  8211  16D4                     __ptext42:	
  8212 ;; *************** function _Sensor_isEnabled *****************
  8213 ;; Defined at:
  8214 ;;		line 863 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;  sensor          1    wreg     PTR struct .
  8217 ;;		 -> mtouch_sensor(36), 
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;  sensor          1    2[COMMON] PTR struct .
  8220 ;;		 -> mtouch_sensor(36), 
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      _Bool 
  8223 ;; Registers used:
  8224 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8230 ;;      Params:         0       0       0       0       0       0       0       0
  8231 ;;      Locals:         1       0       0       0       0       0       0       0
  8232 ;;      Temps:          1       0       0       0       0       0       0       0
  8233 ;;      Totals:         2       0       0       0       0       0       0       0
  8234 ;;Total ram usage:        2 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    4
  8237 ;; This function calls:
  8238 ;;		Nothing
  8239 ;; This function is called by:
  8240 ;;		_Sensor_Service
  8241 ;;		_Sensor_postAcquisitionProcess
  8242 ;;		_Sensor_Acq_ExecutePacket
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           
  8247                           ;psect for function _Sensor_isEnabled
  8248  16D4                     _Sensor_isEnabled:	
  8249                           
  8250                           ;incstack = 0
  8251                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8252                           ;Sensor_isEnabled@sensor stored from wreg
  8253  16D4  00F2               	movwf	Sensor_isEnabled@sensor
  8254                           
  8255                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 863: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 864: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 865:     if(sensor!=((void*)0))
  8256  16D5  0872               	movf	Sensor_isEnabled@sensor,w
  8257  16D6  1903               	btfsc	3,2
  8258  16D7  2EE2               	goto	l3918
  8259                           
  8260                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 866:         return (_Bool)sensor->enabled;
  8261  16D8  0872               	movf	Sensor_isEnabled@sensor,w
  8262  16D9  3E08               	addlw	8
  8263  16DA  0086               	movwf	6
  8264  16DB  0187               	clrf	7
  8265  16DC  0C01               	rrf	1,w
  8266  16DD  00F1               	movwf	??_Sensor_isEnabled
  8267  16DE  0CF1               	rrf	??_Sensor_isEnabled,f
  8268  16DF  0C71               	rrf	??_Sensor_isEnabled,w
  8269  16E0  3901               	andlw	1
  8270  16E1  0008               	return
  8271  16E2                     l3918:	
  8272                           
  8273                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868:         return 0;
  8274  16E2  3000               	movlw	0
  8275  16E3  0008               	return
  8276  16E4                     __end_of_Sensor_isEnabled:	
  8277                           
  8278                           	psect	text43
  8279  167D                     __ptext43:	
  8280 ;; *************** function _Sensor_isActive *****************
  8281 ;; Defined at:
  8282 ;;		line 890 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;  sensor          1    wreg     PTR struct .
  8285 ;;		 -> mtouch_sensor(36), 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  sensor          1    1[COMMON] PTR struct .
  8288 ;;		 -> mtouch_sensor(36), 
  8289 ;; Return value:  Size  Location     Type
  8290 ;;                  1    wreg      _Bool 
  8291 ;; Registers used:
  8292 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8293 ;; Tracked objects:
  8294 ;;		On entry : 0/0
  8295 ;;		On exit  : 0/0
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8298 ;;      Params:         0       0       0       0       0       0       0       0
  8299 ;;      Locals:         1       0       0       0       0       0       0       0
  8300 ;;      Temps:          0       0       0       0       0       0       0       0
  8301 ;;      Totals:         1       0       0       0       0       0       0       0
  8302 ;;Total ram usage:        1 bytes
  8303 ;; Hardware stack levels used:    1
  8304 ;; Hardware stack levels required when called:    4
  8305 ;; This function calls:
  8306 ;;		Nothing
  8307 ;; This function is called by:
  8308 ;;		_Sensor_Acquisition
  8309 ;;		_Sensor_Acq_ExecutePacket
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _Sensor_isActive
  8315  167D                     _Sensor_isActive:	
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8319                           ;Sensor_isActive@sensor stored from wreg
  8320  167D  00F1               	movwf	Sensor_isActive@sensor
  8321                           
  8322                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 890: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 891:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 892:     if(sensor == ((void*)0))
  8323  167E  0871               	movf	Sensor_isActive@sensor,w
  8324  167F  1D03               	btfss	3,2
  8325  1680  2E83               	goto	l3928
  8326                           
  8327                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 893:         return 0;
  8328  1681  3000               	movlw	0
  8329  1682  0008               	return
  8330  1683                     l3928:	
  8331                           
  8332                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 895:     return (_Bool)sensor->active;
  8333  1683  0871               	movf	Sensor_isActive@sensor,w
  8334  1684  3E08               	addlw	8
  8335  1685  0086               	movwf	6
  8336  1686  0187               	clrf	7
  8337  1687  0C01               	rrf	1,w
  8338  1688  3901               	andlw	1
  8339  1689  0008               	return
  8340  168A                     __end_of_Sensor_isActive:	
  8341                           
  8342                           	psect	text44
  8343  0E54                     __ptext44:	
  8344 ;; *************** function _Sensor_autoCalibration *****************
  8345 ;; Defined at:
  8346 ;;		line 696 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;  sensor          1    wreg     PTR struct .
  8349 ;;		 -> mtouch_sensor(36), 
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;  sensor          1   10[COMMON] PTR struct .
  8352 ;;		 -> mtouch_sensor(36), 
  8353 ;;  adcIndex        1    9[COMMON] unsigned char 
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  1    wreg      void 
  8356 ;; Registers used:
  8357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8363 ;;      Params:         0       0       0       0       0       0       0       0
  8364 ;;      Locals:         2       0       0       0       0       0       0       0
  8365 ;;      Temps:          4       0       0       0       0       0       0       0
  8366 ;;      Totals:         6       0       0       0       0       0       0       0
  8367 ;;Total ram usage:        6 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    5
  8370 ;; This function calls:
  8371 ;;		_Sensor_getScanGroupIndex
  8372 ;;		_Sensor_isCalibratingAcqTime
  8373 ;;		_Sensor_setCalibratAcqTime
  8374 ;;		_Sensor_setCalibrated
  8375 ;;		_abs
  8376 ;; This function is called by:
  8377 ;;		_Sensor_Acq_ExecutePacket
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           
  8382                           ;psect for function _Sensor_autoCalibration
  8383  0E54                     _Sensor_autoCalibration:	
  8384                           
  8385                           ;incstack = 0
  8386                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8387                           ;Sensor_autoCalibration@sensor stored from wreg
  8388  0E54  00FA               	movwf	Sensor_autoCalibration@sensor
  8389                           
  8390                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 696: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 697: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 698:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  8391  0E55  087A               	movf	Sensor_autoCalibration@sensor,w
  8392  0E56  3189  21B4  318E   	fcall	_Sensor_getScanGroupIndex
  8393  0E59  00F5               	movwf	??_Sensor_autoCalibration
  8394  0E5A  0875               	movf	??_Sensor_autoCalibration,w
  8395  0E5B  00F9               	movwf	Sensor_autoCalibration@adcIndex
  8396                           
  8397                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  8398  0E5C  087A               	movf	Sensor_autoCalibration@sensor,w
  8399  0E5D  3196  263F  318E   	fcall	_Sensor_isCalibratingAcqTime
  8400  0E60  3A00               	xorlw	0
  8401  0E61  1D03               	skipz
  8402  0E62  2E93               	goto	l3974
  8403                           
  8404                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 702:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  8405  0E63  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  8406  0E64  3E52               	addlw	(low (_packet_sample| 0))& (0+255)
  8407  0E65  0086               	movwf	6
  8408  0E66  0187               	clrf	7
  8409  0E67  3F40               	moviw [0]fsr1
  8410  0E68  00F5               	movwf	??_Sensor_autoCalibration
  8411  0E69  3F41               	moviw [1]fsr1
  8412  0E6A  00F6               	movwf	??_Sensor_autoCalibration+1
  8413  0E6B  087A               	movf	Sensor_autoCalibration@sensor,w
  8414  0E6C  3E04               	addlw	4
  8415  0E6D  0086               	movwf	6
  8416  0E6E  0187               	clrf	7
  8417  0E6F  0801               	movf	1,w
  8418  0E70  00F7               	movwf	??_Sensor_autoCalibration+2
  8419  0E71  01F8               	clrf	??_Sensor_autoCalibration+3
  8420  0E72  3009               	movlw	9
  8421  0E73                     u2185:	
  8422  0E73  35F7               	lslf	??_Sensor_autoCalibration+2,f
  8423  0E74  0DF8               	rlf	??_Sensor_autoCalibration+3,f
  8424  0E75  0B89               	decfsz	9,f
  8425  0E76  2E73               	goto	u2185
  8426  0E77  0876               	movf	??_Sensor_autoCalibration+1,w
  8427  0E78  0278               	subwf	??_Sensor_autoCalibration+3,w
  8428  0E79  1D03               	skipz
  8429  0E7A  2E7D               	goto	u2195
  8430  0E7B  0875               	movf	??_Sensor_autoCalibration,w
  8431  0E7C  0277               	subwf	??_Sensor_autoCalibration+2,w
  8432  0E7D                     u2195:	
  8433  0E7D  1803               	skipnc
  8434  0E7E  2E8F               	goto	l3972
  8435                           
  8436                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 703:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 704:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  8437  0E7F  3001               	movlw	1
  8438  0E80  00F5               	movwf	??_Sensor_autoCalibration
  8439  0E81  087A               	movf	Sensor_autoCalibration@sensor,w
  8440  0E82  3E05               	addlw	5
  8441  0E83  0086               	movwf	6
  8442  0E84  0187               	clrf	7
  8443  0E85  0875               	movf	??_Sensor_autoCalibration,w
  8444  0E86  0781               	addwf	1,f
  8445  0E87  300F               	movlw	15
  8446  0E88  0201               	subwf	1,w
  8447  0E89  1C03               	skipc
  8448  0E8A  0008               	return
  8449                           
  8450                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  8451  0E8B  087A               	movf	Sensor_autoCalibration@sensor,w
  8452  0E8C  3196  2670         	fcall	_Sensor_setCalibratAcqTime
  8453  0E8E  0008               	return
  8454  0E8F                     l3972:	
  8455                           
  8456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 708:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 709:              Sensor_setCalibratAcqTime(sensor);
  8457  0E8F  087A               	movf	Sensor_autoCalibration@sensor,w
  8458  0E90  3196  2670         	fcall	_Sensor_setCalibratAcqTime
  8459  0E92  0008               	return
  8460  0E93                     l3974:	
  8461                           
  8462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 713:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 714:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  8463  0E93  087A               	movf	Sensor_autoCalibration@sensor,w
  8464  0E94  3E04               	addlw	4
  8465  0E95  0086               	movwf	6
  8466  0E96  0187               	clrf	7
  8467  0E97  0801               	movf	1,w
  8468  0E98  00F5               	movwf	??_Sensor_autoCalibration
  8469  0E99  01F6               	clrf	??_Sensor_autoCalibration+1
  8470  0E9A  35F5               	lslf	??_Sensor_autoCalibration,f
  8471  0E9B  0DF6               	rlf	??_Sensor_autoCalibration+1,f
  8472  0E9C  087A               	movf	Sensor_autoCalibration@sensor,w
  8473  0E9D  3E06               	addlw	6
  8474  0E9E  0086               	movwf	6
  8475  0E9F  0187               	clrf	7
  8476  0EA0  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  8477  0EA1  3E52               	addlw	(low (_packet_sample| 0))& (0+255)
  8478  0EA2  0084               	movwf	4
  8479  0EA3  0185               	clrf	5
  8480  0EA4  3F40               	moviw [0]fsr1
  8481  0EA5  0200               	subwf	0,w
  8482  0EA6  00F1               	movwf	abs@a
  8483  0EA7  3101               	addfsr 0,1
  8484  0EA8  3F41               	moviw [1]fsr1
  8485  0EA9  3B00               	subwfb	0,w
  8486  0EAA  00F2               	movwf	abs@a+1
  8487  0EAB  3197  27D1  318E   	fcall	_abs
  8488  0EAE  0876               	movf	??_Sensor_autoCalibration+1,w
  8489  0EAF  0272               	subwf	?_abs+1,w
  8490  0EB0  1D03               	skipz
  8491  0EB1  2EB4               	goto	u2215
  8492  0EB2  0875               	movf	??_Sensor_autoCalibration,w
  8493  0EB3  0271               	subwf	?_abs,w
  8494  0EB4                     u2215:	
  8495  0EB4  1803               	skipnc
  8496  0EB5  2EC2               	goto	l3980
  8497                           
  8498                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 715:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  8499  0EB6  3020               	movlw	32
  8500  0EB7  00F5               	movwf	??_Sensor_autoCalibration
  8501  0EB8  087A               	movf	Sensor_autoCalibration@sensor,w
  8502  0EB9  3E02               	addlw	2
  8503  0EBA  0086               	movwf	6
  8504  0EBB  0187               	clrf	7
  8505  0EBC  0875               	movf	??_Sensor_autoCalibration,w
  8506  0EBD  0081               	movwf	1
  8507                           
  8508                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             Sensor_setCalibrated(senso
      +                          r);
  8509  0EBE  087A               	movf	Sensor_autoCalibration@sensor,w
  8510  0EBF  3196  2658         	fcall	_Sensor_setCalibrated
  8511                           
  8512                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:         }
  8513  0EC1  0008               	return
  8514  0EC2                     l3980:	
  8515                           
  8516                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 724:             sensor->acquisition_time += (uint8_t)2;
  8517  0EC2  3002               	movlw	2
  8518  0EC3  00F5               	movwf	??_Sensor_autoCalibration
  8519  0EC4  087A               	movf	Sensor_autoCalibration@sensor,w
  8520  0EC5  3E03               	addlw	3
  8521  0EC6  0086               	movwf	6
  8522  0EC7  0187               	clrf	7
  8523  0EC8  0875               	movf	??_Sensor_autoCalibration,w
  8524  0EC9  0781               	addwf	1,f
  8525                           
  8526                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 725:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  8527  0ECA  087A               	movf	Sensor_autoCalibration@sensor,w
  8528  0ECB  3E03               	addlw	3
  8529  0ECC  0086               	movwf	6
  8530  0ECD  0187               	clrf	7
  8531  0ECE  3020               	movlw	32
  8532  0ECF  0201               	subwf	1,w
  8533  0ED0  1C03               	skipc
  8534  0ED1  0008               	return
  8535                           
  8536                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 726:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 727:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  8537  0ED2  3020               	movlw	32
  8538  0ED3  00F5               	movwf	??_Sensor_autoCalibration
  8539  0ED4  087A               	movf	Sensor_autoCalibration@sensor,w
  8540  0ED5  3E02               	addlw	2
  8541  0ED6  0086               	movwf	6
  8542  0ED7  0187               	clrf	7
  8543  0ED8  0875               	movf	??_Sensor_autoCalibration,w
  8544  0ED9  0081               	movwf	1
  8545                           
  8546                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:                 Sensor_setCalibrated(s
      +                          ensor);
  8547  0EDA  087A               	movf	Sensor_autoCalibration@sensor,w
  8548  0EDB  3196  2658         	fcall	_Sensor_setCalibrated
  8549  0EDD  0008               	return
  8550  0EDE                     __end_of_Sensor_autoCalibration:	
  8551                           
  8552                           	psect	text45
  8553  17D1                     __ptext45:	
  8554 ;; *************** function _abs *****************
  8555 ;; Defined at:
  8556 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  8557 ;; Parameters:    Size  Location     Type
  8558 ;;  a               2    1[COMMON] int 
  8559 ;; Auto vars:     Size  Location     Type
  8560 ;;		None
  8561 ;; Return value:  Size  Location     Type
  8562 ;;                  2    1[COMMON] int 
  8563 ;; Registers used:
  8564 ;;		wreg, status,2, status,0
  8565 ;; Tracked objects:
  8566 ;;		On entry : 0/0
  8567 ;;		On exit  : 0/0
  8568 ;;		Unchanged: 0/0
  8569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8570 ;;      Params:         2       0       0       0       0       0       0       0
  8571 ;;      Locals:         0       0       0       0       0       0       0       0
  8572 ;;      Temps:          2       0       0       0       0       0       0       0
  8573 ;;      Totals:         4       0       0       0       0       0       0       0
  8574 ;;Total ram usage:        4 bytes
  8575 ;; Hardware stack levels used:    1
  8576 ;; Hardware stack levels required when called:    4
  8577 ;; This function calls:
  8578 ;;		Nothing
  8579 ;; This function is called by:
  8580 ;;		_Sensor_postAcquisitionProcess
  8581 ;;		_Sensor_Acq_ExecutePacket
  8582 ;;		_Sensor_autoCalibration
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           
  8587                           ;psect for function _abs
  8588  17D1                     _abs:	
  8589                           
  8590                           ;incstack = 0
  8591                           ; Regs used in _abs: [wreg+status,2+status,0]
  8592  17D1  0872               	movf	abs@a+1,w
  8593  17D2  3A80               	xorlw	128
  8594  17D3  00F3               	movwf	??_abs
  8595  17D4  3080               	movlw	128
  8596  17D5  0273               	subwf	??_abs,w
  8597  17D6  1D03               	skipz
  8598  17D7  2FDA               	goto	u2075
  8599  17D8  3001               	movlw	1
  8600  17D9  0271               	subwf	abs@a,w
  8601  17DA                     u2075:	
  8602  17DA  1803               	skipnc
  8603  17DB  0008               	return
  8604  17DC  0971               	comf	abs@a,w
  8605  17DD  00F3               	movwf	??_abs
  8606  17DE  0972               	comf	abs@a+1,w
  8607  17DF  00F4               	movwf	??_abs+1
  8608  17E0  0AF3               	incf	??_abs,f
  8609  17E1  1903               	skipnz
  8610  17E2  0AF4               	incf	??_abs+1,f
  8611  17E3  0873               	movf	??_abs,w
  8612  17E4  00F1               	movwf	?_abs
  8613  17E5  0874               	movf	??_abs+1,w
  8614  17E6  00F2               	movwf	?_abs+1
  8615  17E7  0008               	return
  8616  17E8                     __end_of_abs:	
  8617                           
  8618                           	psect	text46
  8619  1658                     __ptext46:	
  8620 ;; *************** function _Sensor_setCalibrated *****************
  8621 ;; Defined at:
  8622 ;;		line 933 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;  sensor          1    wreg     PTR struct .
  8625 ;;		 -> mtouch_sensor(36), 
  8626 ;; Auto vars:     Size  Location     Type
  8627 ;;  sensor          1    1[COMMON] PTR struct .
  8628 ;;		 -> mtouch_sensor(36), 
  8629 ;; Return value:  Size  Location     Type
  8630 ;;                  1    wreg      void 
  8631 ;; Registers used:
  8632 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8633 ;; Tracked objects:
  8634 ;;		On entry : 0/0
  8635 ;;		On exit  : 0/0
  8636 ;;		Unchanged: 0/0
  8637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8638 ;;      Params:         0       0       0       0       0       0       0       0
  8639 ;;      Locals:         1       0       0       0       0       0       0       0
  8640 ;;      Temps:          0       0       0       0       0       0       0       0
  8641 ;;      Totals:         1       0       0       0       0       0       0       0
  8642 ;;Total ram usage:        1 bytes
  8643 ;; Hardware stack levels used:    1
  8644 ;; Hardware stack levels required when called:    4
  8645 ;; This function calls:
  8646 ;;		Nothing
  8647 ;; This function is called by:
  8648 ;;		_Sensor_autoCalibration
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           
  8653                           ;psect for function _Sensor_setCalibrated
  8654  1658                     _Sensor_setCalibrated:	
  8655                           
  8656                           ;incstack = 0
  8657                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8658                           ;Sensor_setCalibrated@sensor stored from wreg
  8659  1658  00F1               	movwf	Sensor_setCalibrated@sensor
  8660                           
  8661                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 933: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          934: {;mcc_generated_files/mtouch/mtouch_sensor.c: 935:     sensor->calibrated = 1;
  8662  1659  0871               	movf	Sensor_setCalibrated@sensor,w
  8663  165A  3E08               	addlw	8
  8664  165B  0086               	movwf	6
  8665  165C  0187               	clrf	7
  8666  165D  1501               	bsf	1,2
  8667                           
  8668                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 936:     sensor->acqTime_cal = 0;
  8669  165E  0871               	movf	Sensor_setCalibrated@sensor,w
  8670  165F  3E08               	addlw	8
  8671  1660  0086               	movwf	6
  8672  1661  0187               	clrf	7
  8673  1662  1201               	bcf	1,4
  8674  1663  0008               	return
  8675  1664                     __end_of_Sensor_setCalibrated:	
  8676                           
  8677                           	psect	text47
  8678  1670                     __ptext47:	
  8679 ;; *************** function _Sensor_setCalibratAcqTime *****************
  8680 ;; Defined at:
  8681 ;;		line 939 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;  sensor          1    wreg     PTR struct .
  8684 ;;		 -> mtouch_sensor(36), 
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;  sensor          1    1[COMMON] PTR struct .
  8687 ;;		 -> mtouch_sensor(36), 
  8688 ;; Return value:  Size  Location     Type
  8689 ;;                  1    wreg      void 
  8690 ;; Registers used:
  8691 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8692 ;; Tracked objects:
  8693 ;;		On entry : 0/0
  8694 ;;		On exit  : 0/0
  8695 ;;		Unchanged: 0/0
  8696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8697 ;;      Params:         0       0       0       0       0       0       0       0
  8698 ;;      Locals:         1       0       0       0       0       0       0       0
  8699 ;;      Temps:          0       0       0       0       0       0       0       0
  8700 ;;      Totals:         1       0       0       0       0       0       0       0
  8701 ;;Total ram usage:        1 bytes
  8702 ;; Hardware stack levels used:    1
  8703 ;; Hardware stack levels required when called:    4
  8704 ;; This function calls:
  8705 ;;		Nothing
  8706 ;; This function is called by:
  8707 ;;		_Sensor_autoCalibration
  8708 ;; This function uses a non-reentrant model
  8709 ;;
  8710                           
  8711                           
  8712                           ;psect for function _Sensor_setCalibratAcqTime
  8713  1670                     _Sensor_setCalibratAcqTime:	
  8714                           
  8715                           ;incstack = 0
  8716                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  8717                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  8718  1670  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
  8719                           
  8720                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 939: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 940: {;mcc_generated_files/mtouch/mtouch_sensor.c: 941:     sensor->acqTime_cal = 1
      +                          ;
  8721  1671  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  8722  1672  3E08               	addlw	8
  8723  1673  0086               	movwf	6
  8724  1674  0187               	clrf	7
  8725  1675  1601               	bsf	1,4
  8726                           
  8727                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 942:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  8728  1676  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  8729  1677  3E03               	addlw	3
  8730  1678  0086               	movwf	6
  8731  1679  0187               	clrf	7
  8732  167A  0181               	clrf	1
  8733  167B  0A81               	incf	1,f
  8734  167C  0008               	return
  8735  167D                     __end_of_Sensor_setCalibratAcqTime:	
  8736                           
  8737                           	psect	text48
  8738  163F                     __ptext48:	
  8739 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  8740 ;; Defined at:
  8741 ;;		line 945 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;  sensor          1    wreg     PTR struct .
  8744 ;;		 -> mtouch_sensor(36), 
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;  sensor          1    1[COMMON] PTR struct .
  8747 ;;		 -> mtouch_sensor(36), 
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1    wreg      _Bool 
  8750 ;; Registers used:
  8751 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8757 ;;      Params:         0       0       0       0       0       0       0       0
  8758 ;;      Locals:         1       0       0       0       0       0       0       0
  8759 ;;      Temps:          0       0       0       0       0       0       0       0
  8760 ;;      Totals:         1       0       0       0       0       0       0       0
  8761 ;;Total ram usage:        1 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; Hardware stack levels required when called:    4
  8764 ;; This function calls:
  8765 ;;		Nothing
  8766 ;; This function is called by:
  8767 ;;		_Sensor_loadADCSettings
  8768 ;;		_Sensor_autoCalibration
  8769 ;; This function uses a non-reentrant model
  8770 ;;
  8771                           
  8772                           
  8773                           ;psect for function _Sensor_isCalibratingAcqTime
  8774  163F                     _Sensor_isCalibratingAcqTime:	
  8775                           
  8776                           ;incstack = 0
  8777                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  8778                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  8779  163F  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
  8780                           
  8781                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 945: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 946: {;mcc_generated_files/mtouch/mtouch_sensor.c: 947:     return (_Bool)sensor
      +                          ->acqTime_cal;
  8782  1640  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
  8783  1641  3E08               	addlw	8
  8784  1642  0086               	movwf	6
  8785  1643  0187               	clrf	7
  8786  1644  0E01               	swapf	1,w
  8787  1645  3901               	andlw	1
  8788  1646  0008               	return
  8789  1647                     __end_of_Sensor_isCalibratingAcqTime:	
  8790                           
  8791                           	psect	text49
  8792  09B4                     __ptext49:	
  8793 ;; *************** function _Sensor_getScanGroupIndex *****************
  8794 ;; Defined at:
  8795 ;;		line 362 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;  sensor          1    wreg     PTR struct .
  8798 ;;		 -> mtouch_sensor(36), 
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;  sensor          1    3[COMMON] PTR struct .
  8801 ;;		 -> mtouch_sensor(36), 
  8802 ;;  sensorGroup     1    4[COMMON] unsigned char 
  8803 ;; Return value:  Size  Location     Type
  8804 ;;                  1    wreg      unsigned char 
  8805 ;; Registers used:
  8806 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8812 ;;      Params:         0       0       0       0       0       0       0       0
  8813 ;;      Locals:         2       0       0       0       0       0       0       0
  8814 ;;      Temps:          2       0       0       0       0       0       0       0
  8815 ;;      Totals:         4       0       0       0       0       0       0       0
  8816 ;;Total ram usage:        4 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    4
  8819 ;; This function calls:
  8820 ;;		Nothing
  8821 ;; This function is called by:
  8822 ;;		_Sensor_postAcquisitionProcess
  8823 ;;		_Sensor_autoCalibration
  8824 ;;		_Sensor_RawSample_Update
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           
  8829                           ;psect for function _Sensor_getScanGroupIndex
  8830  09B4                     _Sensor_getScanGroupIndex:	
  8831                           
  8832                           ;incstack = 0
  8833                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  8834                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  8835  09B4  00F3               	movwf	Sensor_getScanGroupIndex@sensor
  8836                           
  8837                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 363: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 364:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 365:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  8838  09B5  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
  8839  09B6                     l3838:	
  8840                           
  8841                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 366:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 367:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  8842  09B6  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  8843  09B7  00F1               	movwf	??_Sensor_getScanGroupIndex
  8844  09B8  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  8845  09B9  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  8846  09BA  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  8847  09BB  305E               	movlw	low (_sensor_scan_group| (0+32768))
  8848  09BC  0771               	addwf	??_Sensor_getScanGroupIndex,w
  8849  09BD  0084               	movwf	4
  8850  09BE  3098               	movlw	high (_sensor_scan_group| (0+32768))
  8851  09BF  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  8852  09C0  0085               	movwf	5
  8853  09C1  0800               	movf	0,w	;code access
  8854  09C2  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  8855  09C3  1D03               	skipz
  8856  09C4  29C7               	goto	l3844
  8857  09C5                     l3840:	
  8858                           
  8859                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 368:             return 0;
  8860  09C5  3000               	movlw	0
  8861  09C6  0008               	return
  8862  09C7                     l3844:	
  8863                           
  8864                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 369:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  8865  09C7  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  8866  09C8  00F1               	movwf	??_Sensor_getScanGroupIndex
  8867  09C9  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  8868  09CA  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  8869  09CB  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  8870  09CC  305F               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  8871  09CD  0771               	addwf	??_Sensor_getScanGroupIndex,w
  8872  09CE  0084               	movwf	4
  8873  09CF  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  8874  09D0  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  8875  09D1  0085               	movwf	5
  8876  09D2  0800               	movf	0,w	;code access
  8877  09D3  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  8878  09D4  1D03               	skipz
  8879  09D5  29D8               	goto	l3850
  8880                           
  8881                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 370:             return 1;
  8882  09D6  3001               	movlw	1
  8883  09D7  0008               	return
  8884  09D8                     l3850:	
  8885                           
  8886                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 371:     }
  8887  09D8  3001               	movlw	1
  8888  09D9  00F1               	movwf	??_Sensor_getScanGroupIndex
  8889  09DA  0871               	movf	??_Sensor_getScanGroupIndex,w
  8890  09DB  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  8891  09DC  3002               	movlw	2
  8892  09DD  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  8893  09DE  1803               	btfsc	3,0
  8894  09DF  29C5               	goto	l3840
  8895  09E0  29B6               	goto	l3838
  8896  09E1                     __end_of_Sensor_getScanGroupIndex:	
  8897                           
  8898                           	psect	text50
  8899  16C4                     __ptext50:	
  8900 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  8901 ;; Defined at:
  8902 ;;		line 247 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;		None
  8905 ;; Auto vars:     Size  Location     Type
  8906 ;;		None
  8907 ;; Return value:  Size  Location     Type
  8908 ;;                  1    wreg      void 
  8909 ;; Registers used:
  8910 ;;		wreg, status,2, status,0
  8911 ;; Tracked objects:
  8912 ;;		On entry : 0/0
  8913 ;;		On exit  : 0/0
  8914 ;;		Unchanged: 0/0
  8915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8916 ;;      Params:         0       0       0       0       0       0       0       0
  8917 ;;      Locals:         0       0       0       0       0       0       0       0
  8918 ;;      Temps:          0       0       0       0       0       0       0       0
  8919 ;;      Totals:         0       0       0       0       0       0       0       0
  8920 ;;Total ram usage:        0 bytes
  8921 ;; Hardware stack levels used:    1
  8922 ;; Hardware stack levels required when called:    4
  8923 ;; This function calls:
  8924 ;;		Nothing
  8925 ;; This function is called by:
  8926 ;;		_MTOUCH_Initialize
  8927 ;;		_Sensor_Acq_ExecutePacket
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           
  8932                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  8933  16C4                     _MTOUCH_Sensor_Scan_Initialize:	
  8934                           
  8935                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 249:     T2CONbits.T2CKPS = 0x0;
  8936                           
  8937                           ;incstack = 0
  8938                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  8939  16C4  30FC               	movlw	-4
  8940  16C5  0020               	movlb	0	; select bank0
  8941  16C6  059C               	andwf	28,f	;volatile
  8942                           
  8943                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 251:     AD1CON0 = (uint8_t)0;
  8944  16C7  002E               	movlb	14	; select bank14
  8945  16C8  0191               	clrf	17	;volatile
  8946                           
  8947                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 252:     AD2CON0 = (uint8_t)0;
  8948  16C9  002F               	movlb	15	; select bank15
  8949  16CA  0191               	clrf	17	;volatile
  8950                           
  8951                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 253:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  8952  16CB  3090               	movlw	144
  8953  16CC  002E               	movlb	14	; select bank14
  8954  16CD  0092               	movwf	18	;volatile
  8955                           
  8956                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 254:     AD1CON3 = (uint8_t)0b01000000;
  8957  16CE  3040               	movlw	64
  8958  16CF  0094               	movwf	20	;volatile
  8959                           
  8960                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 255:     AD2CON3 = (uint8_t)0b01000000;
  8961  16D0  3040               	movlw	64
  8962  16D1  002F               	movlb	15	; select bank15
  8963  16D2  0094               	movwf	20	;volatile
  8964  16D3  0008               	return
  8965  16D4                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  8966                           
  8967                           	psect	text51
  8968  16B4                     __ptext51:	
  8969 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  8970 ;; Defined at:
  8971 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;		None
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;  button          1   14[BANK0 ] enum E3070
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  1    wreg      void 
  8978 ;; Registers used:
  8979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8985 ;;      Params:         0       0       0       0       0       0       0       0
  8986 ;;      Locals:         0       1       0       0       0       0       0       0
  8987 ;;      Temps:          0       1       0       0       0       0       0       0
  8988 ;;      Totals:         0       2       0       0       0       0       0       0
  8989 ;;Total ram usage:        2 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    9
  8992 ;; This function calls:
  8993 ;;		_Button_Service
  8994 ;; This function is called by:
  8995 ;;		_MTOUCH_Service_Mainloop
  8996 ;; This function uses a non-reentrant model
  8997 ;;
  8998                           
  8999                           
  9000                           ;psect for function _MTOUCH_Button_ServiceAll
  9001  16B4                     _MTOUCH_Button_ServiceAll:	
  9002                           
  9003                           ;mcc_generated_files/mtouch/mtouch_button.c: 199:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 202:     for (button = 0; button < 4u; button
      +                          ++)
  9004                           
  9005                           ;incstack = 0
  9006                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9007  16B4  0020               	movlb	0	; select bank0
  9008  16B5  01AE               	clrf	MTOUCH_Button_ServiceAll@button
  9009  16B6                     l6272:	
  9010                           
  9011                           ;mcc_generated_files/mtouch/mtouch_button.c: 203:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 204:         Button_Service(button);
  9012  16B6  082E               	movf	MTOUCH_Button_ServiceAll@button,w
  9013  16B7  318C  2454  3196   	fcall	_Button_Service
  9014                           
  9015                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     }
  9016  16BA  3001               	movlw	1
  9017  16BB  0020               	movlb	0	; select bank0
  9018  16BC  00AD               	movwf	??_MTOUCH_Button_ServiceAll
  9019  16BD  082D               	movf	??_MTOUCH_Button_ServiceAll,w
  9020  16BE  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
  9021  16BF  3004               	movlw	4
  9022  16C0  022E               	subwf	MTOUCH_Button_ServiceAll@button,w
  9023  16C1  1803               	btfsc	3,0
  9024  16C2  0008               	return
  9025  16C3  2EB6               	goto	l6272
  9026  16C4                     __end_of_MTOUCH_Button_ServiceAll:	
  9027                           
  9028                           	psect	text52
  9029  0C54                     __ptext52:	
  9030 ;; *************** function _Button_Service *****************
  9031 ;; Defined at:
  9032 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;  name            1    wreg     enum E3070
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;  name            1   11[BANK0 ] enum E3070
  9037 ;;  button          1   12[BANK0 ] PTR struct .
  9038 ;;		 -> mtouch_button(64), 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  1    wreg      void 
  9041 ;; Registers used:
  9042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9048 ;;      Params:         0       0       0       0       0       0       0       0
  9049 ;;      Locals:         0       2       0       0       0       0       0       0
  9050 ;;      Temps:          0       2       0       0       0       0       0       0
  9051 ;;      Totals:         0       4       0       0       0       0       0       0
  9052 ;;Total ram usage:        4 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    8
  9055 ;; This function calls:
  9056 ;;		_Button_Deviation_Update
  9057 ;;		_Button_Reading_Update
  9058 ;;		_Button_State_Initializing
  9059 ;;		_Button_State_NotPressed
  9060 ;;		_Button_State_Pressed
  9061 ;;		_MTOUCH_Button_Initialize
  9062 ;;		_MTOUCH_Sensor_isCalibrated
  9063 ;;		_MTOUCH_Sensor_wasSampled
  9064 ;; This function is called by:
  9065 ;;		_MTOUCH_Button_ServiceAll
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function _Button_Service
  9071  0C54                     _Button_Service:	
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9075                           ;Button_Service@name stored from wreg
  9076  0C54  0020               	movlb	0	; select bank0
  9077  0C55  00AB               	movwf	Button_Service@name
  9078                           
  9079                           ;mcc_generated_files/mtouch/mtouch_button.c: 208: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 209: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 210:     mtouch_button_t* button = &mtouch_button[name];
  9080  0C56  082B               	movf	Button_Service@name,w
  9081  0C57  00A9               	movwf	??_Button_Service
  9082  0C58  3003               	movlw	3
  9083  0C59                     u4795:	
  9084  0C59  35A9               	lslf	??_Button_Service,f
  9085  0C5A  3EFF               	addlw	-1
  9086  0C5B  1D03               	skipz
  9087  0C5C  2C59               	goto	u4795
  9088  0C5D  3529               	lslf	??_Button_Service,w
  9089  0C5E  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  9090  0C5F  00AA               	movwf	??_Button_Service+1
  9091  0C60  082A               	movf	??_Button_Service+1,w
  9092  0C61  00AC               	movwf	Button_Service@button
  9093                           
  9094                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  9095  0C62  0A2C               	incf	Button_Service@button,w
  9096  0C63  0086               	movwf	6
  9097  0C64  3001               	movlw	1	; select bank2/3
  9098  0C65  0087               	movwf	7
  9099  0C66  0801               	movf	1,w
  9100  0C67  3196  2698  318C   	fcall	_MTOUCH_Sensor_wasSampled
  9101  0C6A  3A00               	xorlw	0
  9102  0C6B  1903               	skipnz
  9103  0C6C  0008               	return
  9104  0C6D  0020               	movlb	0	; select bank0
  9105  0C6E  0A2C               	incf	Button_Service@button,w
  9106  0C6F  0086               	movwf	6
  9107  0C70  3001               	movlw	1	; select bank2/3
  9108  0C71  0087               	movwf	7
  9109  0C72  0801               	movf	1,w
  9110  0C73  3197  274D  318C   	fcall	_MTOUCH_Sensor_isCalibrated
  9111  0C76  3A00               	xorlw	0
  9112  0C77  1903               	skipnz
  9113  0C78  0008               	return
  9114                           
  9115                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 214:         Button_Reading_Update(button);
  9116  0C79  0020               	movlb	0	; select bank0
  9117  0C7A  082C               	movf	Button_Service@button,w
  9118  0C7B  3196  268A  318C   	fcall	_Button_Reading_Update
  9119                           
  9120                           ;mcc_generated_files/mtouch/mtouch_button.c: 215:         Button_Deviation_Update(button
      +                          );
  9121  0C7E  0020               	movlb	0	; select bank0
  9122  0C7F  082C               	movf	Button_Service@button,w
  9123  0C80  318D  25CD  318C   	fcall	_Button_Deviation_Update
  9124                           
  9125                           ;mcc_generated_files/mtouch/mtouch_button.c: 217:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  9126  0C83  0020               	movlb	0	; select bank0
  9127  0C84  082C               	movf	Button_Service@button,w
  9128  0C85  3E02               	addlw	2
  9129  0C86  0086               	movwf	6
  9130  0C87  3001               	movlw	1	; select bank2/3
  9131  0C88  0087               	movwf	7
  9132  0C89  3003               	movlw	3
  9133  0C8A  0201               	subwf	1,w
  9134  0C8B  1C03               	skipc
  9135  0C8C  2C95               	goto	l6194
  9136                           
  9137                           ;mcc_generated_files/mtouch/mtouch_button.c: 218:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 219:             MTOUCH_Button_Initialize(button->name);
  9138  0C8D  082C               	movf	Button_Service@button,w
  9139  0C8E  0086               	movwf	6
  9140  0C8F  3001               	movlw	1	; select bank2/3
  9141  0C90  0087               	movwf	7
  9142  0C91  0801               	movf	1,w
  9143  0C92  318B  2303  318C   	fcall	_MTOUCH_Button_Initialize
  9144  0C95                     l6194:	
  9145                           
  9146                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  9147  0C95  0020               	movlb	0	; select bank0
  9148  0C96  082C               	movf	Button_Service@button,w
  9149  0C97  00A9               	movwf	??_Button_Service
  9150  0C98  0829               	movf	??_Button_Service,w
  9151  0C99  00A4               	movwf	Button_State_Pressed@button
  9152  0C9A  082C               	movf	Button_Service@button,w
  9153  0C9B  3E02               	addlw	2
  9154  0C9C  0086               	movwf	6
  9155  0C9D  3001               	movlw	1	; select bank2/3
  9156  0C9E  0087               	movwf	7
  9157  0C9F  3501               	lslf	1,w
  9158  0CA0  3EA0               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  9159  0CA1  0086               	movwf	6
  9160  0CA2  0187               	clrf	7
  9161  0CA3  3F41               	moviw [1]fsr1
  9162  0CA4  008A               	movwf	10
  9163  0CA5  3F40               	moviw [0]fsr1
  9164  0CA6  000A               	callw
  9165  0CA7  318C               	pagesel	$
  9166  0CA8  0008               	return
  9167  0CA9                     __end_of_Button_Service:	
  9168                           
  9169                           	psect	text53
  9170  1698                     __ptext53:	
  9171 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  9172 ;; Defined at:
  9173 ;;		line 967 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;  sensor          1    wreg     enum E2854
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;  sensor          1    6[COMMON] enum E2854
  9178 ;; Return value:  Size  Location     Type
  9179 ;;                  1    wreg      _Bool 
  9180 ;; Registers used:
  9181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9187 ;;      Params:         0       0       0       0       0       0       0       0
  9188 ;;      Locals:         1       0       0       0       0       0       0       0
  9189 ;;      Temps:          1       0       0       0       0       0       0       0
  9190 ;;      Totals:         2       0       0       0       0       0       0       0
  9191 ;;Total ram usage:        2 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    5
  9194 ;; This function calls:
  9195 ;;		___bmul
  9196 ;; This function is called by:
  9197 ;;		_Button_Service
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           
  9202                           ;psect for function _MTOUCH_Sensor_wasSampled
  9203  1698                     _MTOUCH_Sensor_wasSampled:	
  9204                           
  9205                           ;incstack = 0
  9206                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9207                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9208  1698  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
  9209                           
  9210                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 967: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 968: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 969:     return (_Bool)mtouch_sensor[sensor].sampled;
  9211  1699  3009               	movlw	9
  9212  169A  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
  9213  169B  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
  9214  169C  00F1               	movwf	___bmul@multiplicand
  9215  169D  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  9216  169E  3196  26F5         	fcall	___bmul
  9217  16A0  3EB2               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  9218  16A1  0086               	movwf	6
  9219  16A2  0187               	clrf	7
  9220  16A3  0801               	movf	1,w
  9221  16A4  3901               	andlw	1
  9222  16A5  0008               	return
  9223  16A6                     __end_of_MTOUCH_Sensor_wasSampled:	
  9224                           
  9225                           	psect	text54
  9226  174D                     __ptext54:	
  9227 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9228 ;; Defined at:
  9229 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  sensor          1    wreg     enum E2854
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  sensor          1    6[COMMON] enum E2854
  9234 ;; Return value:  Size  Location     Type
  9235 ;;                  1    wreg      _Bool 
  9236 ;; Registers used:
  9237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9238 ;; Tracked objects:
  9239 ;;		On entry : 0/0
  9240 ;;		On exit  : 0/0
  9241 ;;		Unchanged: 0/0
  9242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9243 ;;      Params:         0       0       0       0       0       0       0       0
  9244 ;;      Locals:         1       0       0       0       0       0       0       0
  9245 ;;      Temps:          1       0       0       0       0       0       0       0
  9246 ;;      Totals:         2       0       0       0       0       0       0       0
  9247 ;;Total ram usage:        2 bytes
  9248 ;; Hardware stack levels used:    1
  9249 ;; Hardware stack levels required when called:    5
  9250 ;; This function calls:
  9251 ;;		___bmul
  9252 ;; This function is called by:
  9253 ;;		_Button_Service
  9254 ;; This function uses a non-reentrant model
  9255 ;;
  9256                           
  9257                           
  9258                           ;psect for function _MTOUCH_Sensor_isCalibrated
  9259  174D                     _MTOUCH_Sensor_isCalibrated:	
  9260                           
  9261                           ;incstack = 0
  9262                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9263                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9264  174D  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  9265                           
  9266                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 921: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 922:     if(sensor < 4u)
  9267  174E  3004               	movlw	4
  9268  174F  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  9269  1750  1803               	skipnc
  9270  1751  2F60               	goto	l6026
  9271                           
  9272                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 923:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  9273  1752  3009               	movlw	9
  9274  1753  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
  9275  1754  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
  9276  1755  00F1               	movwf	___bmul@multiplicand
  9277  1756  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  9278  1757  3196  26F5         	fcall	___bmul
  9279  1759  3EB2               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  9280  175A  0086               	movwf	6
  9281  175B  0187               	clrf	7
  9282  175C  0C01               	rrf	1,w
  9283  175D  0C89               	rrf	9,f
  9284  175E  3901               	andlw	1
  9285  175F  0008               	return
  9286  1760                     l6026:	
  9287                           
  9288                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925:         return 0;
  9289  1760  3000               	movlw	0
  9290  1761  0008               	return
  9291  1762                     __end_of_MTOUCH_Sensor_isCalibrated:	
  9292                           
  9293                           	psect	text55
  9294  05AB                     __ptext55:	
  9295 ;; *************** function _Button_State_NotPressed *****************
  9296 ;; Defined at:
  9297 ;;		line 245 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;  button          1    4[BANK0 ] PTR struct .
  9300 ;;		 -> mtouch_button(64), 
  9301 ;; Auto vars:     Size  Location     Type
  9302 ;;		None
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  1    wreg      void 
  9305 ;; Registers used:
  9306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9307 ;; Tracked objects:
  9308 ;;		On entry : 0/0
  9309 ;;		On exit  : 0/0
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9312 ;;      Params:         0       1       0       0       0       0       0       0
  9313 ;;      Locals:         0       0       0       0       0       0       0       0
  9314 ;;      Temps:          0       2       0       0       0       0       0       0
  9315 ;;      Totals:         0       3       0       0       0       0       0       0
  9316 ;;Total ram usage:        3 bytes
  9317 ;; Hardware stack levels used:    1
  9318 ;; Hardware stack levels required when called:    7
  9319 ;; This function calls:
  9320 ;;		_Button_Baseline_Update
  9321 ;;		_Button_DefaultCallback
  9322 ;;		_MTOUCH_Button_Initialize
  9323 ;;		_myButtonPressedCallback
  9324 ;; This function is called by:
  9325 ;;		_Button_Service
  9326 ;; This function uses a non-reentrant model
  9327 ;;
  9328                           
  9329                           
  9330                           ;psect for function _Button_State_NotPressed
  9331  05AB                     _Button_State_NotPressed:	
  9332                           
  9333                           ;mcc_generated_files/mtouch/mtouch_button.c: 245: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 246: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 248:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  9334                           
  9335                           ;incstack = 0
  9336                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9337  05AB  0020               	movlb	0	; select bank0
  9338  05AC  0824               	movf	Button_State_NotPressed@button,w
  9339  05AD  3E09               	addlw	9
  9340  05AE  0086               	movwf	6
  9341  05AF  3001               	movlw	1	; select bank2/3
  9342  05B0  0087               	movwf	7
  9343  05B1  0801               	movf	1,w
  9344  05B2  3A80               	xorlw	128
  9345  05B3  00A5               	movwf	??_Button_State_NotPressed
  9346  05B4  0824               	movf	Button_State_NotPressed@button,w
  9347  05B5  3E0E               	addlw	14
  9348  05B6  0086               	movwf	6
  9349  05B7  3001               	movlw	1	; select bank2/3
  9350  05B8  0087               	movwf	7
  9351  05B9  0301               	decf	1,w
  9352  05BA  3AFF               	xorlw	255
  9353  05BB  3A80               	xorlw	128
  9354  05BC  02A5               	subwf	??_Button_State_NotPressed,f
  9355  05BD  1803               	skipnc
  9356  05BE  2DEA               	goto	l6076
  9357                           
  9358                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 250:         (button->counter)++;
  9359  05BF  0824               	movf	Button_State_NotPressed@button,w
  9360  05C0  3E0A               	addlw	10
  9361  05C1  0086               	movwf	6
  9362  05C2  3001               	movlw	1	; select bank2/3
  9363  05C3  0087               	movwf	7
  9364  05C4  3001               	movlw	1
  9365  05C5  0781               	addwf	1,f
  9366  05C6  3141               	addfsr 1,1
  9367  05C7  1803               	skipnc
  9368  05C8  0A81               	incf	1,f
  9369                           
  9370                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  9371  05C9  0824               	movf	Button_State_NotPressed@button,w
  9372  05CA  3E0A               	addlw	10
  9373  05CB  0086               	movwf	6
  9374  05CC  3001               	movlw	1	; select bank2/3
  9375  05CD  0087               	movwf	7
  9376  05CE  3F40               	moviw [0]fsr1
  9377  05CF  00A5               	movwf	??_Button_State_NotPressed
  9378  05D0  3F41               	moviw [1]fsr1
  9379  05D1  00A6               	movwf	??_Button_State_NotPressed+1
  9380  05D2  3000               	movlw	0
  9381  05D3  0226               	subwf	??_Button_State_NotPressed+1,w
  9382  05D4  3041               	movlw	65
  9383  05D5  1903               	skipnz
  9384  05D6  0225               	subwf	??_Button_State_NotPressed,w
  9385  05D7  1C03               	skipc
  9386  05D8  2E2C               	goto	l1096
  9387                           
  9388                           ;mcc_generated_files/mtouch/mtouch_button.c: 252:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 253:             button->counter = (mtouch_button_statecounter_t)0;
  9389  05D9  0824               	movf	Button_State_NotPressed@button,w
  9390  05DA  3E0A               	addlw	10
  9391  05DB  0086               	movwf	6
  9392  05DC  3001               	movlw	1	; select bank2/3
  9393  05DD  0087               	movwf	7
  9394  05DE  3000               	movlw	0
  9395  05DF  3FC0               	movwi [0]fsr1
  9396  05E0  3FC1               	movwi [1]fsr1
  9397                           
  9398                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  9399  05E1  0824               	movf	Button_State_NotPressed@button,w
  9400  05E2  0086               	movwf	6
  9401  05E3  3001               	movlw	1	; select bank2/3
  9402  05E4  0087               	movwf	7
  9403  05E5  0801               	movf	1,w
  9404  05E6  318B  2303  3185   	fcall	_MTOUCH_Button_Initialize
  9405  05E9  2E2C               	goto	l1096
  9406  05EA                     l6076:	
  9407  05EA  0824               	movf	Button_State_NotPressed@button,w
  9408  05EB  3E09               	addlw	9
  9409  05EC  0086               	movwf	6
  9410  05ED  3001               	movlw	1	; select bank2/3
  9411  05EE  0087               	movwf	7
  9412  05EF  0801               	movf	1,w
  9413  05F0  00A5               	movwf	??_Button_State_NotPressed
  9414  05F1  01A6               	clrf	??_Button_State_NotPressed+1
  9415  05F2  1BA5               	btfsc	??_Button_State_NotPressed,7
  9416  05F3  03A6               	decf	??_Button_State_NotPressed+1,f
  9417  05F4  0824               	movf	Button_State_NotPressed@button,w
  9418  05F5  3E0E               	addlw	14
  9419  05F6  0086               	movwf	6
  9420  05F7  3001               	movlw	1	; select bank2/3
  9421  05F8  0087               	movwf	7
  9422  05F9  0826               	movf	??_Button_State_NotPressed+1,w
  9423  05FA  3A80               	xorlw	128
  9424  05FB  3C80               	sublw	128
  9425  05FC  1D03               	skipz
  9426  05FD  2E00               	goto	u4685
  9427  05FE  0825               	movf	??_Button_State_NotPressed,w
  9428  05FF  0201               	subwf	1,w
  9429  0600                     u4685:	
  9430  0600  1803               	skipnc
  9431  0601  2E23               	goto	l6082
  9432                           
  9433                           ;mcc_generated_files/mtouch/mtouch_button.c: 259:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 261:         button->state = MTOUCH_BUTTON_STATE_pressed;
  9434  0602  3002               	movlw	2
  9435  0603  0020               	movlb	0	; select bank0
  9436  0604  00A5               	movwf	??_Button_State_NotPressed
  9437  0605  0824               	movf	Button_State_NotPressed@button,w
  9438  0606  3E02               	addlw	2
  9439  0607  0086               	movwf	6
  9440  0608  3001               	movlw	1	; select bank2/3
  9441  0609  0087               	movwf	7
  9442  060A  0825               	movf	??_Button_State_NotPressed,w
  9443  060B  0081               	movwf	1
  9444                           
  9445                           ;mcc_generated_files/mtouch/mtouch_button.c: 262:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9446  060C  0824               	movf	Button_State_NotPressed@button,w
  9447  060D  3E0A               	addlw	10
  9448  060E  0086               	movwf	6
  9449  060F  3001               	movlw	1	; select bank2/3
  9450  0610  0087               	movwf	7
  9451  0611  3000               	movlw	0
  9452  0612  3FC0               	movwi [0]fsr1
  9453  0613  3FC1               	movwi [1]fsr1
  9454                           
  9455                           ;mcc_generated_files/mtouch/mtouch_button.c: 263:         callback_pressed(button->name)
      +                          ;
  9456  0614  0824               	movf	Button_State_NotPressed@button,w
  9457  0615  0086               	movwf	6
  9458  0616  3001               	movlw	1	; select bank2/3
  9459  0617  0087               	movwf	7
  9460  0618  0801               	movf	1,w
  9461  0619  00A5               	movwf	??_Button_State_NotPressed
  9462  061A  0825               	movf	??_Button_State_NotPressed,w
  9463  061B  00F4               	movwf	Button_DefaultCallback@button
  9464  061C  0021               	movlb	1	; select bank1
  9465  061D  0827               	movf	(_callback_pressed+1)^(0+128),w
  9466  061E  008A               	movwf	10
  9467  061F  0826               	movf	_callback_pressed^(0+128),w
  9468  0620  000A               	callw
  9469  0621  3185               	pagesel	$
  9470                           
  9471                           ;mcc_generated_files/mtouch/mtouch_button.c: 264:     }
  9472  0622  2E2C               	goto	l1096
  9473  0623                     l6082:	
  9474                           
  9475                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->counter = (mtouch_button_statecounter_t)0;
  9476  0623  0020               	movlb	0	; select bank0
  9477  0624  0824               	movf	Button_State_NotPressed@button,w
  9478  0625  3E0A               	addlw	10
  9479  0626  0086               	movwf	6
  9480  0627  3001               	movlw	1	; select bank2/3
  9481  0628  0087               	movwf	7
  9482  0629  3000               	movlw	0
  9483  062A  3FC0               	movwi [0]fsr1
  9484  062B  3FC1               	movwi [1]fsr1
  9485  062C                     l1096:	
  9486                           
  9487                           ;mcc_generated_files/mtouch/mtouch_button.c: 273:     (button->baseline_count)++;
  9488  062C  0020               	movlb	0	; select bank0
  9489  062D  0824               	movf	Button_State_NotPressed@button,w
  9490  062E  3E0C               	addlw	12
  9491  062F  0086               	movwf	6
  9492  0630  3001               	movlw	1	; select bank2/3
  9493  0631  0087               	movwf	7
  9494  0632  3001               	movlw	1
  9495  0633  0781               	addwf	1,f
  9496  0634  3141               	addfsr 1,1
  9497  0635  1803               	skipnc
  9498  0636  0A81               	incf	1,f
  9499                           
  9500                           ;mcc_generated_files/mtouch/mtouch_button.c: 274:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
  9501  0637  0824               	movf	Button_State_NotPressed@button,w
  9502  0638  3E0C               	addlw	12
  9503  0639  0086               	movwf	6
  9504  063A  3001               	movlw	1	; select bank2/3
  9505  063B  0087               	movwf	7
  9506  063C  0016               	moviw fsr1++
  9507  063D  3A40               	xorlw	64
  9508  063E  00A5               	movwf	??_Button_State_NotPressed
  9509  063F  0016               	moviw fsr1++
  9510  0640  04A5               	iorwf	??_Button_State_NotPressed,f
  9511  0641  1D03               	btfss	3,2
  9512  0642  0008               	return
  9513                           
  9514                           ;mcc_generated_files/mtouch/mtouch_button.c: 275:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 276:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9515  0643  0824               	movf	Button_State_NotPressed@button,w
  9516  0644  3E0C               	addlw	12
  9517  0645  0086               	movwf	6
  9518  0646  3001               	movlw	1	; select bank2/3
  9519  0647  0087               	movwf	7
  9520  0648  3000               	movlw	0
  9521  0649  3FC0               	movwi [0]fsr1
  9522  064A  3FC1               	movwi [1]fsr1
  9523                           
  9524                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:         Button_Baseline_Update(button)
      +                          ;
  9525  064B  0824               	movf	Button_State_NotPressed@button,w
  9526  064C  318E  26DE         	fcall	_Button_Baseline_Update
  9527  064E  0008               	return
  9528  064F                     __end_of_Button_State_NotPressed:	
  9529                           
  9530                           	psect	text56
  9531  0D05                     __ptext56:	
  9532 ;; *************** function _Button_State_Initializing *****************
  9533 ;; Defined at:
  9534 ;;		line 225 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;  button          1    4[BANK0 ] PTR struct .
  9537 ;;		 -> mtouch_button(64), 
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;		None
  9540 ;; Return value:  Size  Location     Type
  9541 ;;                  1    wreg      void 
  9542 ;; Registers used:
  9543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9549 ;;      Params:         0       1       0       0       0       0       0       0
  9550 ;;      Locals:         0       0       0       0       0       0       0       0
  9551 ;;      Temps:          0       4       0       0       0       0       0       0
  9552 ;;      Totals:         0       5       0       0       0       0       0       0
  9553 ;;Total ram usage:        5 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    7
  9556 ;; This function calls:
  9557 ;;		_Button_Baseline_Initialize
  9558 ;;		_Button_Baseline_Update
  9559 ;; This function is called by:
  9560 ;;		_Button_Service
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _Button_State_Initializing
  9566  0D05                     _Button_State_Initializing:	
  9567                           
  9568                           ;mcc_generated_files/mtouch/mtouch_button.c: 225: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 226: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 228:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  9569                           
  9570                           ;incstack = 0
  9571                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9572  0D05  0020               	movlb	0	; select bank0
  9573  0D06  0824               	movf	Button_State_Initializing@button,w
  9574  0D07  3E0A               	addlw	10
  9575  0D08  0086               	movwf	6
  9576  0D09  3001               	movlw	1	; select bank2/3
  9577  0D0A  0087               	movwf	7
  9578  0D0B  3F40               	moviw [0]fsr1
  9579  0D0C  00A5               	movwf	??_Button_State_Initializing
  9580  0D0D  3F41               	moviw [1]fsr1
  9581  0D0E  00A6               	movwf	??_Button_State_Initializing+1
  9582  0D0F  3000               	movlw	0
  9583  0D10  0226               	subwf	??_Button_State_Initializing+1,w
  9584  0D11  3009               	movlw	9
  9585  0D12  1903               	skipnz
  9586  0D13  0225               	subwf	??_Button_State_Initializing,w
  9587  0D14  1803               	skipnc
  9588  0D15  2D1B               	goto	l6060
  9589                           
  9590                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 230:         Button_Baseline_Initialize(button);
  9591  0D16  0824               	movf	Button_State_Initializing@button,w
  9592  0D17  3189  21E1  318D   	fcall	_Button_Baseline_Initialize
  9593                           
  9594                           ;mcc_generated_files/mtouch/mtouch_button.c: 231:     } else {
  9595  0D1A  2D1F               	goto	l6062
  9596  0D1B                     l6060:	
  9597                           
  9598                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         Button_Baseline_Update(button)
      +                          ;
  9599  0D1B  0824               	movf	Button_State_Initializing@button,w
  9600  0D1C  318E  26DE  318D   	fcall	_Button_Baseline_Update
  9601  0D1F                     l6062:	
  9602                           
  9603                           ;mcc_generated_files/mtouch/mtouch_button.c: 236:     (button->counter)++;
  9604  0D1F  0020               	movlb	0	; select bank0
  9605  0D20  0824               	movf	Button_State_Initializing@button,w
  9606  0D21  3E0A               	addlw	10
  9607  0D22  0086               	movwf	6
  9608  0D23  3001               	movlw	1	; select bank2/3
  9609  0D24  0087               	movwf	7
  9610  0D25  3001               	movlw	1
  9611  0D26  0781               	addwf	1,f
  9612  0D27  3141               	addfsr 1,1
  9613  0D28  1803               	skipnc
  9614  0D29  0A81               	incf	1,f
  9615                           
  9616                           ;mcc_generated_files/mtouch/mtouch_button.c: 237:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  9617  0D2A  0824               	movf	Button_State_Initializing@button,w
  9618  0D2B  3E0A               	addlw	10
  9619  0D2C  0086               	movwf	6
  9620  0D2D  3001               	movlw	1	; select bank2/3
  9621  0D2E  0087               	movwf	7
  9622  0D2F  3F40               	moviw [0]fsr1
  9623  0D30  00A5               	movwf	??_Button_State_Initializing
  9624  0D31  3F41               	moviw [1]fsr1
  9625  0D32  00A6               	movwf	??_Button_State_Initializing+1
  9626  0D33  3000               	movlw	0
  9627  0D34  0226               	subwf	??_Button_State_Initializing+1,w
  9628  0D35  3010               	movlw	16
  9629  0D36  1903               	skipnz
  9630  0D37  0225               	subwf	??_Button_State_Initializing,w
  9631  0D38  1C03               	skipc
  9632  0D39  0008               	return
  9633                           
  9634                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 239:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
  9635  0D3A  0824               	movf	Button_State_Initializing@button,w
  9636  0D3B  3E05               	addlw	5
  9637  0D3C  0086               	movwf	6
  9638  0D3D  3001               	movlw	1	; select bank2/3
  9639  0D3E  0087               	movwf	7
  9640  0D3F  3F40               	moviw [0]fsr1
  9641  0D40  00A5               	movwf	??_Button_State_Initializing
  9642  0D41  3F41               	moviw [1]fsr1
  9643  0D42  00A6               	movwf	??_Button_State_Initializing+1
  9644  0D43  3F42               	moviw [2]fsr1
  9645  0D44  00A7               	movwf	??_Button_State_Initializing+2
  9646  0D45  3F43               	moviw [3]fsr1
  9647  0D46  00A8               	movwf	??_Button_State_Initializing+3
  9648  0D47  3004               	movlw	4
  9649  0D48                     u4655:	
  9650  0D48  36A8               	lsrf	??_Button_State_Initializing+3,f
  9651  0D49  0CA7               	rrf	??_Button_State_Initializing+2,f
  9652  0D4A  0CA6               	rrf	??_Button_State_Initializing+1,f
  9653  0D4B  0CA5               	rrf	??_Button_State_Initializing,f
  9654  0D4C  0B89               	decfsz	9,f
  9655  0D4D  2D48               	goto	u4655
  9656  0D4E  0824               	movf	Button_State_Initializing@button,w
  9657  0D4F  3E03               	addlw	3
  9658  0D50  0086               	movwf	6
  9659  0D51  3001               	movlw	1	; select bank2/3
  9660  0D52  0087               	movwf	7
  9661  0D53  0825               	movf	??_Button_State_Initializing,w
  9662  0D54  3FC0               	movwi [0]fsr1
  9663  0D55  0826               	movf	??_Button_State_Initializing+1,w
  9664  0D56  3FC1               	movwi [1]fsr1
  9665                           
  9666                           ;mcc_generated_files/mtouch/mtouch_button.c: 240:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
  9667  0D57  0824               	movf	Button_State_Initializing@button,w
  9668  0D58  3E02               	addlw	2
  9669  0D59  0086               	movwf	6
  9670  0D5A  3001               	movlw	1	; select bank2/3
  9671  0D5B  0087               	movwf	7
  9672  0D5C  0181               	clrf	1
  9673  0D5D  0A81               	incf	1,f
  9674                           
  9675                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9676  0D5E  0824               	movf	Button_State_Initializing@button,w
  9677  0D5F  3E0A               	addlw	10
  9678  0D60  0086               	movwf	6
  9679  0D61  3001               	movlw	1	; select bank2/3
  9680  0D62  0087               	movwf	7
  9681  0D63  3000               	movlw	0
  9682  0D64  3FC0               	movwi [0]fsr1
  9683  0D65  3FC1               	movwi [1]fsr1
  9684  0D66  0008               	return
  9685  0D67                     __end_of_Button_State_Initializing:	
  9686                           
  9687                           	psect	text57
  9688  0D67                     __ptext57:	
  9689 ;; *************** function _Button_State_Pressed *****************
  9690 ;; Defined at:
  9691 ;;		line 281 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;  button          1    4[BANK0 ] PTR struct .
  9694 ;;		 -> mtouch_button(64), 
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;		None
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  1    wreg      void 
  9699 ;; Registers used:
  9700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9706 ;;      Params:         0       1       0       0       0       0       0       0
  9707 ;;      Locals:         0       0       0       0       0       0       0       0
  9708 ;;      Temps:          0       2       0       0       0       0       0       0
  9709 ;;      Totals:         0       3       0       0       0       0       0       0
  9710 ;;Total ram usage:        3 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    7
  9713 ;; This function calls:
  9714 ;;		_Button_DefaultCallback
  9715 ;;		_MTOUCH_Button_Initialize
  9716 ;;		_myButtonReleasedCallback
  9717 ;; This function is called by:
  9718 ;;		_Button_Service
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           
  9723                           ;psect for function _Button_State_Pressed
  9724  0D67                     _Button_State_Pressed:	
  9725                           
  9726                           ;mcc_generated_files/mtouch/mtouch_button.c: 281: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 282: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 284:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
  9727                           
  9728                           ;incstack = 0
  9729                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9730  0D67  0020               	movlb	0	; select bank0
  9731  0D68  0824               	movf	Button_State_Pressed@button,w
  9732  0D69  3E0A               	addlw	10
  9733  0D6A  0086               	movwf	6
  9734  0D6B  3001               	movlw	1	; select bank2/3
  9735  0D6C  0087               	movwf	7
  9736  0D6D  3F40               	moviw [0]fsr1
  9737  0D6E  00A5               	movwf	??_Button_State_Pressed
  9738  0D6F  3F41               	moviw [1]fsr1
  9739  0D70  00A6               	movwf	??_Button_State_Pressed+1
  9740  0D71  3007               	movlw	7
  9741  0D72  0226               	subwf	??_Button_State_Pressed+1,w
  9742  0D73  30D0               	movlw	208
  9743  0D74  1903               	skipnz
  9744  0D75  0225               	subwf	??_Button_State_Pressed,w
  9745  0D76  1C03               	skipc
  9746  0D77  2D8F               	goto	l6092
  9747                           
  9748                           ;mcc_generated_files/mtouch/mtouch_button.c: 285:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 286:         MTOUCH_Button_Initialize(button->name);
  9749  0D78  0824               	movf	Button_State_Pressed@button,w
  9750  0D79  0086               	movwf	6
  9751  0D7A  3001               	movlw	1	; select bank2/3
  9752  0D7B  0087               	movwf	7
  9753  0D7C  0801               	movf	1,w
  9754  0D7D  318B  2303  318D   	fcall	_MTOUCH_Button_Initialize
  9755                           
  9756                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         callback_notPressed(button->na
      +                          me);
  9757  0D80  0020               	movlb	0	; select bank0
  9758  0D81  0824               	movf	Button_State_Pressed@button,w
  9759  0D82  0086               	movwf	6
  9760  0D83  3001               	movlw	1	; select bank2/3
  9761  0D84  0087               	movwf	7
  9762  0D85  0801               	movf	1,w
  9763  0D86  00A5               	movwf	??_Button_State_Pressed
  9764  0D87  0825               	movf	??_Button_State_Pressed,w
  9765  0D88  00F4               	movwf	Button_DefaultCallback@button
  9766  0D89  086D               	movf	_callback_notPressed+1,w
  9767  0D8A  008A               	movwf	10
  9768  0D8B  086C               	movf	_callback_notPressed,w
  9769  0D8C  000A               	callw
  9770  0D8D  318D               	pagesel	$
  9771                           
  9772                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:     }
  9773  0D8E  0008               	return
  9774  0D8F                     l6092:	
  9775  0D8F  0824               	movf	Button_State_Pressed@button,w
  9776  0D90  3E09               	addlw	9
  9777  0D91  0086               	movwf	6
  9778  0D92  3001               	movlw	1	; select bank2/3
  9779  0D93  0087               	movwf	7
  9780  0D94  0801               	movf	1,w
  9781  0D95  3A80               	xorlw	128
  9782  0D96  00A5               	movwf	??_Button_State_Pressed
  9783  0D97  0824               	movf	Button_State_Pressed@button,w
  9784  0D98  3E0E               	addlw	14
  9785  0D99  0086               	movwf	6
  9786  0D9A  3001               	movlw	1	; select bank2/3
  9787  0D9B  0087               	movwf	7
  9788  0D9C  0824               	movf	Button_State_Pressed@button,w
  9789  0D9D  3E0E               	addlw	14
  9790  0D9E  0084               	movwf	4
  9791  0D9F  3001               	movlw	1	; select bank2/3
  9792  0DA0  0085               	movwf	5
  9793  0DA1  3600               	lsrf	0,w
  9794  0DA2  0201               	subwf	1,w
  9795  0DA3  3A80               	xorlw	128
  9796  0DA4  02A5               	subwf	??_Button_State_Pressed,f
  9797  0DA5  1803               	skipnc
  9798  0DA6  0008               	return
  9799                           
  9800                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 293:         button->state = MTOUCH_BUTTON_STATE_notPressed;
  9801  0DA7  0824               	movf	Button_State_Pressed@button,w
  9802  0DA8  3E02               	addlw	2
  9803  0DA9  0086               	movwf	6
  9804  0DAA  3001               	movlw	1	; select bank2/3
  9805  0DAB  0087               	movwf	7
  9806  0DAC  0181               	clrf	1
  9807  0DAD  0A81               	incf	1,f
  9808                           
  9809                           ;mcc_generated_files/mtouch/mtouch_button.c: 294:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9810  0DAE  0824               	movf	Button_State_Pressed@button,w
  9811  0DAF  3E0A               	addlw	10
  9812  0DB0  0086               	movwf	6
  9813  0DB1  3001               	movlw	1	; select bank2/3
  9814  0DB2  0087               	movwf	7
  9815  0DB3  3000               	movlw	0
  9816  0DB4  3FC0               	movwi [0]fsr1
  9817  0DB5  3FC1               	movwi [1]fsr1
  9818                           
  9819                           ;mcc_generated_files/mtouch/mtouch_button.c: 295:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
  9820  0DB6  0824               	movf	Button_State_Pressed@button,w
  9821  0DB7  3E0C               	addlw	12
  9822  0DB8  0086               	movwf	6
  9823  0DB9  3001               	movlw	1	; select bank2/3
  9824  0DBA  0087               	movwf	7
  9825  0DBB  30FF               	movlw	255
  9826  0DBC  3FC0               	movwi [0]fsr1
  9827  0DBD  30FB               	movlw	251
  9828  0DBE  3FC1               	movwi [1]fsr1
  9829                           
  9830                           ;mcc_generated_files/mtouch/mtouch_button.c: 296:         callback_notPressed(button->na
      +                          me);
  9831  0DBF  0824               	movf	Button_State_Pressed@button,w
  9832  0DC0  0086               	movwf	6
  9833  0DC1  3001               	movlw	1	; select bank2/3
  9834  0DC2  0087               	movwf	7
  9835  0DC3  0801               	movf	1,w
  9836  0DC4  00A5               	movwf	??_Button_State_Pressed
  9837  0DC5  0825               	movf	??_Button_State_Pressed,w
  9838  0DC6  00F4               	movwf	Button_DefaultCallback@button
  9839  0DC7  086D               	movf	_callback_notPressed+1,w
  9840  0DC8  008A               	movwf	10
  9841  0DC9  086C               	movf	_callback_notPressed,w
  9842  0DCA  000A               	callw
  9843  0DCB  318D               	pagesel	$
  9844  0DCC  0008               	return
  9845  0DCD                     __end_of_Button_State_Pressed:	
  9846                           
  9847                           	psect	text58
  9848  095E                     __ptext58:	
  9849 ;; *************** function _myButtonPressedCallback *****************
  9850 ;; Defined at:
  9851 ;;		line 113 in file "main.c"
  9852 ;; Parameters:    Size  Location     Type
  9853 ;;  button          1    4[COMMON] enum E2914
  9854 ;; Auto vars:     Size  Location     Type
  9855 ;;		None
  9856 ;; Return value:  Size  Location     Type
  9857 ;;                  1    wreg      void 
  9858 ;; Registers used:
  9859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9865 ;;      Params:         1       0       0       0       0       0       0       0
  9866 ;;      Locals:         0       0       0       0       0       0       0       0
  9867 ;;      Temps:          0       0       0       0       0       0       0       0
  9868 ;;      Totals:         1       0       0       0       0       0       0       0
  9869 ;;Total ram usage:        1 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    5
  9872 ;; This function calls:
  9873 ;;		_LED_PROCESS
  9874 ;;		_RELAY_PROCESS
  9875 ;; This function is called by:
  9876 ;;		_main
  9877 ;;		_Button_State_NotPressed
  9878 ;; This function uses a non-reentrant model
  9879 ;;
  9880                           
  9881                           
  9882                           ;psect for function _myButtonPressedCallback
  9883  095E                     _myButtonPressedCallback:	
  9884                           
  9885                           ;main.c: 113: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 114:
      +                           {;main.c: 115:     if(config_status == 0)
  9886                           
  9887                           ;incstack = 0
  9888                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9889  095E  0020               	movlb	0	; select bank0
  9890  095F  0865               	movf	_config_status,w
  9891  0960  1D03               	btfss	3,2
  9892  0961  0008               	return
  9893                           
  9894                           ;main.c: 116:     {;main.c: 117:         if(button == 0) last_touch_status.full_status ^
      +                          = 0b00000001;
  9895  0962  0874               	movf	myButtonPressedCallback@button,w
  9896  0963  1D03               	btfss	3,2
  9897  0964  2969               	goto	l4282
  9898  0965  3001               	movlw	1
  9899  0966  06DC               	xorwf	_last_touch_status,f
  9900  0967  3000               	movlw	0
  9901  0968  06DD               	xorwf	_last_touch_status+1,f
  9902  0969                     l4282:	
  9903                           
  9904                           ;main.c: 118:         if(button == 1) last_touch_status.full_status ^= 0b00000010;
  9905  0969  0374               	decf	myButtonPressedCallback@button,w
  9906  096A  1D03               	btfss	3,2
  9907  096B  2970               	goto	l4286
  9908  096C  3002               	movlw	2
  9909  096D  06DC               	xorwf	_last_touch_status,f
  9910  096E  3000               	movlw	0
  9911  096F  06DD               	xorwf	_last_touch_status+1,f
  9912  0970                     l4286:	
  9913                           
  9914                           ;main.c: 119:         if(button == 2) last_touch_status.full_status ^= 0b00000100;
  9915  0970  3002               	movlw	2
  9916  0971  0674               	xorwf	myButtonPressedCallback@button,w
  9917  0972  1D03               	btfss	3,2
  9918  0973  2978               	goto	l4290
  9919  0974  3004               	movlw	4
  9920  0975  06DC               	xorwf	_last_touch_status,f
  9921  0976  3000               	movlw	0
  9922  0977  06DD               	xorwf	_last_touch_status+1,f
  9923  0978                     l4290:	
  9924                           
  9925                           ;main.c: 120:         if(button == 3) last_touch_status.full_status ^= 0b00001000;
  9926  0978  3003               	movlw	3
  9927  0979  0674               	xorwf	myButtonPressedCallback@button,w
  9928  097A  1D03               	btfss	3,2
  9929  097B  2980               	goto	l4294
  9930  097C  3008               	movlw	8
  9931  097D  06DC               	xorwf	_last_touch_status,f
  9932  097E  3000               	movlw	0
  9933  097F  06DD               	xorwf	_last_touch_status+1,f
  9934  0980                     l4294:	
  9935                           
  9936                           ;main.c: 122:         LED_PROCESS(last_touch_status.full_status);
  9937  0980  085C               	movf	_last_touch_status,w
  9938  0981  3186  26EC  3189   	fcall	_LED_PROCESS
  9939                           
  9940                           ;main.c: 123:         RELAY_PROCESS(last_touch_status.full_status);
  9941  0984  0020               	movlb	0	; select bank0
  9942  0985  085C               	movf	_last_touch_status,w
  9943  0986  3186  264F         	fcall	_RELAY_PROCESS
  9944  0988  0008               	return
  9945  0989                     __end_of_myButtonPressedCallback:	
  9946                           
  9947                           	psect	text59
  9948  15C6                     __ptext59:	
  9949 ;; *************** function _Button_DefaultCallback *****************
  9950 ;; Defined at:
  9951 ;;		line 535 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;  button          1    4[COMMON] enum E3070
  9954 ;; Auto vars:     Size  Location     Type
  9955 ;;		None
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  1    wreg      void 
  9958 ;; Registers used:
  9959 ;;		None
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9965 ;;      Params:         1       0       0       0       0       0       0       0
  9966 ;;      Locals:         0       0       0       0       0       0       0       0
  9967 ;;      Temps:          0       0       0       0       0       0       0       0
  9968 ;;      Totals:         1       0       0       0       0       0       0       0
  9969 ;;Total ram usage:        1 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:    4
  9972 ;; This function calls:
  9973 ;;		Nothing
  9974 ;; This function is called by:
  9975 ;;		_Button_State_NotPressed
  9976 ;;		_Button_State_Pressed
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           
  9981                           ;psect for function _Button_DefaultCallback
  9982  15C6                     _Button_DefaultCallback:	
  9983                           
  9984                           ;incstack = 0
  9985                           ; Regs used in _Button_DefaultCallback: []
  9986  15C6  0008               	return
  9987  15C7                     __end_of_Button_DefaultCallback:	
  9988                           
  9989                           	psect	text60
  9990  15C5                     __ptext60:	
  9991 ;; *************** function _myButtonReleasedCallback *****************
  9992 ;; Defined at:
  9993 ;;		line 126 in file "main.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;  button          1    4[COMMON] enum E2914
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;		None
  9998 ;; Return value:  Size  Location     Type
  9999 ;;                  1    wreg      void 
 10000 ;; Registers used:
 10001 ;;		wreg, status,2, status,0
 10002 ;; Tracked objects:
 10003 ;;		On entry : 0/0
 10004 ;;		On exit  : 0/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10007 ;;      Params:         1       0       0       0       0       0       0       0
 10008 ;;      Locals:         0       0       0       0       0       0       0       0
 10009 ;;      Temps:          0       0       0       0       0       0       0       0
 10010 ;;      Totals:         1       0       0       0       0       0       0       0
 10011 ;;Total ram usage:        1 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; Hardware stack levels required when called:    4
 10014 ;; This function calls:
 10015 ;;		Nothing
 10016 ;; This function is called by:
 10017 ;;		_main
 10018 ;;		_Button_State_Pressed
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           
 10023                           ;psect for function _myButtonReleasedCallback
 10024  15C5                     _myButtonReleasedCallback:	
 10025                           
 10026                           ;incstack = 0
 10027                           ; Regs used in _myButtonReleasedCallback: [wreg+status,2+status,0]
 10028  15C5  0008               	return
 10029  15C6                     __end_of_myButtonReleasedCallback:	
 10030                           
 10031                           	psect	text61
 10032  0B03                     __ptext61:	
 10033 ;; *************** function _MTOUCH_Button_Initialize *****************
 10034 ;; Defined at:
 10035 ;;		line 167 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;  name            1    wreg     enum E3070
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;  name            1    9[COMMON] enum E3070
 10040 ;;  button          1   10[COMMON] PTR struct .
 10041 ;;		 -> mtouch_button(64), 
 10042 ;; Return value:  Size  Location     Type
 10043 ;;                  1    wreg      void 
 10044 ;; Registers used:
 10045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10051 ;;      Params:         0       0       0       0       0       0       0       0
 10052 ;;      Locals:         2       0       0       0       0       0       0       0
 10053 ;;      Temps:          2       0       0       0       0       0       0       0
 10054 ;;      Totals:         4       0       0       0       0       0       0       0
 10055 ;;Total ram usage:        4 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:    6
 10058 ;; This function calls:
 10059 ;;		_MTOUCH_Sensor_Calibrate
 10060 ;; This function is called by:
 10061 ;;		_MTOUCH_Button_InitializeAll
 10062 ;;		_Button_Service
 10063 ;;		_Button_State_NotPressed
 10064 ;;		_Button_State_Pressed
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           
 10069                           ;psect for function _MTOUCH_Button_Initialize
 10070  0B03                     _MTOUCH_Button_Initialize:	
 10071                           
 10072                           ;incstack = 0
 10073                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10074                           ;MTOUCH_Button_Initialize@name stored from wreg
 10075  0B03  00F9               	movwf	MTOUCH_Button_Initialize@name
 10076                           
 10077                           ;mcc_generated_files/mtouch/mtouch_button.c: 167: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 168: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 169:     mtouch_button_t* button = &mtouch_button[name];
 10078  0B04  0879               	movf	MTOUCH_Button_Initialize@name,w
 10079  0B05  00F7               	movwf	??_MTOUCH_Button_Initialize
 10080  0B06  3003               	movlw	3
 10081  0B07                     u4445:	
 10082  0B07  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 10083  0B08  3EFF               	addlw	-1
 10084  0B09  1D03               	skipz
 10085  0B0A  2B07               	goto	u4445
 10086  0B0B  3577               	lslf	??_MTOUCH_Button_Initialize,w
 10087  0B0C  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10088  0B0D  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 10089  0B0E  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 10090  0B0F  00FA               	movwf	MTOUCH_Button_Initialize@button
 10091                           
 10092                           ;mcc_generated_files/mtouch/mtouch_button.c: 171:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 10093  0B10  087A               	movf	MTOUCH_Button_Initialize@button,w
 10094  0B11  3E02               	addlw	2
 10095  0B12  0086               	movwf	6
 10096  0B13  3001               	movlw	1	; select bank2/3
 10097  0B14  0087               	movwf	7
 10098  0B15  0181               	clrf	1
 10099                           
 10100                           ;mcc_generated_files/mtouch/mtouch_button.c: 172:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 10101  0B16  087A               	movf	MTOUCH_Button_Initialize@button,w
 10102  0B17  3E05               	addlw	5
 10103  0B18  0086               	movwf	6
 10104  0B19  3001               	movlw	1	; select bank2/3
 10105  0B1A  0087               	movwf	7
 10106  0B1B  3000               	movlw	0
 10107  0B1C  3FC0               	movwi [0]fsr1
 10108  0B1D  3000               	movlw	0
 10109  0B1E  3FC1               	movwi [1]fsr1
 10110  0B1F  3FC2               	movwi [2]fsr1
 10111  0B20  3FC3               	movwi [3]fsr1
 10112                           
 10113                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 10114  0B21  087A               	movf	MTOUCH_Button_Initialize@button,w
 10115  0B22  3E0A               	addlw	10
 10116  0B23  0086               	movwf	6
 10117  0B24  3001               	movlw	1	; select bank2/3
 10118  0B25  0087               	movwf	7
 10119  0B26  3000               	movlw	0
 10120  0B27  3FC0               	movwi [0]fsr1
 10121  0B28  3FC1               	movwi [1]fsr1
 10122                           
 10123                           ;mcc_generated_files/mtouch/mtouch_button.c: 174:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 10124  0B29  087A               	movf	MTOUCH_Button_Initialize@button,w
 10125  0B2A  3E0C               	addlw	12
 10126  0B2B  0086               	movwf	6
 10127  0B2C  3001               	movlw	1	; select bank2/3
 10128  0B2D  0087               	movwf	7
 10129  0B2E  3000               	movlw	0
 10130  0B2F  3FC0               	movwi [0]fsr1
 10131  0B30  3FC1               	movwi [1]fsr1
 10132                           
 10133                           ;mcc_generated_files/mtouch/mtouch_button.c: 176:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 10134  0B31  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 10135  0B32  0086               	movwf	6
 10136  0B33  3001               	movlw	1	; select bank2/3
 10137  0B34  0087               	movwf	7
 10138  0B35  0801               	movf	1,w
 10139  0B36  3197  2706         	fcall	_MTOUCH_Sensor_Calibrate
 10140  0B38  0008               	return
 10141  0B39                     __end_of_MTOUCH_Button_Initialize:	
 10142                           
 10143                           	psect	text62
 10144  1706                     __ptext62:	
 10145 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10146 ;; Defined at:
 10147 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10148 ;; Parameters:    Size  Location     Type
 10149 ;;  sensor          1    wreg     enum E2854
 10150 ;; Auto vars:     Size  Location     Type
 10151 ;;  sensor          1    6[COMMON] enum E2854
 10152 ;; Return value:  Size  Location     Type
 10153 ;;                  1    wreg      void 
 10154 ;; Registers used:
 10155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10156 ;; Tracked objects:
 10157 ;;		On entry : 0/0
 10158 ;;		On exit  : 0/0
 10159 ;;		Unchanged: 0/0
 10160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10161 ;;      Params:         0       0       0       0       0       0       0       0
 10162 ;;      Locals:         1       0       0       0       0       0       0       0
 10163 ;;      Temps:          1       0       0       0       0       0       0       0
 10164 ;;      Totals:         2       0       0       0       0       0       0       0
 10165 ;;Total ram usage:        2 bytes
 10166 ;; Hardware stack levels used:    1
 10167 ;; Hardware stack levels required when called:    5
 10168 ;; This function calls:
 10169 ;;		___bmul
 10170 ;; This function is called by:
 10171 ;;		_MTOUCH_Sensor_Initialize
 10172 ;;		_MTOUCH_Button_Initialize
 10173 ;; This function uses a non-reentrant model
 10174 ;;
 10175                           
 10176                           
 10177                           ;psect for function _MTOUCH_Sensor_Calibrate
 10178  1706                     _MTOUCH_Sensor_Calibrate:	
 10179                           
 10180                           ;incstack = 0
 10181                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10182                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 10183  1706  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 10184                           
 10185                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 914:     if(sensor < 4u)
 10186  1707  3004               	movlw	4
 10187  1708  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 10188  1709  1803               	skipnc
 10189  170A  0008               	return
 10190                           
 10191                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 916:         mtouch_sensor[sensor].calibrated = 0;
 10192  170B  3009               	movlw	9
 10193  170C  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 10194  170D  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 10195  170E  00F1               	movwf	___bmul@multiplicand
 10196  170F  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 10197  1710  3196  26F5         	fcall	___bmul
 10198  1712  3EB2               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 10199  1713  0086               	movwf	6
 10200  1714  0187               	clrf	7
 10201  1715  1101               	bcf	1,2
 10202  1716  0008               	return
 10203  1717                     __end_of_MTOUCH_Sensor_Calibrate:	
 10204                           
 10205                           	psect	text63
 10206  0EDE                     __ptext63:	
 10207 ;; *************** function _Button_Baseline_Update *****************
 10208 ;; Defined at:
 10209 ;;		line 489 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;  button          1    wreg     PTR struct .
 10212 ;;		 -> mtouch_button(64), 
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;  button          1    7[COMMON] PTR struct .
 10215 ;;		 -> mtouch_button(64), 
 10216 ;; Return value:  Size  Location     Type
 10217 ;;                  1    wreg      void 
 10218 ;; Registers used:
 10219 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10220 ;; Tracked objects:
 10221 ;;		On entry : 0/0
 10222 ;;		On exit  : 0/0
 10223 ;;		Unchanged: 0/0
 10224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10225 ;;      Params:         0       0       0       0       0       0       0       0
 10226 ;;      Locals:         1       0       0       0       0       0       0       0
 10227 ;;      Temps:          6       0       0       0       0       0       0       0
 10228 ;;      Totals:         7       0       0       0       0       0       0       0
 10229 ;;Total ram usage:        7 bytes
 10230 ;; Hardware stack levels used:    1
 10231 ;; Hardware stack levels required when called:    4
 10232 ;; This function calls:
 10233 ;;		Nothing
 10234 ;; This function is called by:
 10235 ;;		_Button_State_Initializing
 10236 ;;		_Button_State_NotPressed
 10237 ;; This function uses a non-reentrant model
 10238 ;;
 10239                           
 10240                           
 10241                           ;psect for function _Button_Baseline_Update
 10242  0EDE                     _Button_Baseline_Update:	
 10243                           
 10244                           ;incstack = 0
 10245                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10246                           ;Button_Baseline_Update@button stored from wreg
 10247  0EDE  00F7               	movwf	Button_Baseline_Update@button
 10248                           
 10249                           ;mcc_generated_files/mtouch/mtouch_button.c: 489: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 490: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 491:     if (GIE == (uint8_t)1)
 10250  0EDF  1F8B               	btfss	11,7	;volatile
 10251  0EE0  2F28               	goto	l4388
 10252                           
 10253                           ;mcc_generated_files/mtouch/mtouch_button.c: 492:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 493:         GIE = (uint8_t)0;
 10254  0EE1  138B               	bcf	11,7	;volatile
 10255                           
 10256                           ;mcc_generated_files/mtouch/mtouch_button.c: 494:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 10257  0EE2  0877               	movf	Button_Baseline_Update@button,w
 10258  0EE3  3E05               	addlw	5
 10259  0EE4  0086               	movwf	6
 10260  0EE5  3001               	movlw	1	; select bank2/3
 10261  0EE6  0087               	movwf	7
 10262  0EE7  3F40               	moviw [0]fsr1
 10263  0EE8  00F1               	movwf	??_Button_Baseline_Update
 10264  0EE9  3F41               	moviw [1]fsr1
 10265  0EEA  00F2               	movwf	??_Button_Baseline_Update+1
 10266  0EEB  3F42               	moviw [2]fsr1
 10267  0EEC  00F3               	movwf	??_Button_Baseline_Update+2
 10268  0EED  3F43               	moviw [3]fsr1
 10269  0EEE  00F4               	movwf	??_Button_Baseline_Update+3
 10270  0EEF  3004               	movlw	4
 10271  0EF0                     u2835:	
 10272  0EF0  36F4               	lsrf	??_Button_Baseline_Update+3,f
 10273  0EF1  0CF3               	rrf	??_Button_Baseline_Update+2,f
 10274  0EF2  0CF2               	rrf	??_Button_Baseline_Update+1,f
 10275  0EF3  0CF1               	rrf	??_Button_Baseline_Update,f
 10276  0EF4  0B89               	decfsz	9,f
 10277  0EF5  2EF0               	goto	u2835
 10278  0EF6  0877               	movf	Button_Baseline_Update@button,w
 10279  0EF7  3E05               	addlw	5
 10280  0EF8  0086               	movwf	6
 10281  0EF9  3001               	movlw	1	; select bank2/3
 10282  0EFA  0087               	movwf	7
 10283  0EFB  0871               	movf	??_Button_Baseline_Update,w
 10284  0EFC  0281               	subwf	1,f
 10285  0EFD  3141               	addfsr 1,1
 10286  0EFE  0872               	movf	??_Button_Baseline_Update+1,w
 10287  0EFF  3B81               	subwfb	1,f
 10288  0F00  3141               	addfsr 1,1
 10289  0F01  0873               	movf	??_Button_Baseline_Update+2,w
 10290  0F02  3B81               	subwfb	1,f
 10291  0F03  3141               	addfsr 1,1
 10292  0F04  0874               	movf	??_Button_Baseline_Update+3,w
 10293  0F05  3B81               	subwfb	1,f
 10294  0F06  317D               	addfsr 1,-3
 10295                           
 10296                           ;mcc_generated_files/mtouch/mtouch_button.c: 495:         button->baseline += button->re
      +                          ading;
 10297  0F07  0877               	movf	Button_Baseline_Update@button,w
 10298  0F08  3E03               	addlw	3
 10299  0F09  0086               	movwf	6
 10300  0F0A  3001               	movlw	1	; select bank2/3
 10301  0F0B  0087               	movwf	7
 10302  0F0C  3F40               	moviw [0]fsr1
 10303  0F0D  00F1               	movwf	??_Button_Baseline_Update
 10304  0F0E  3F41               	moviw [1]fsr1
 10305  0F0F  00F2               	movwf	??_Button_Baseline_Update+1
 10306  0F10  0871               	movf	??_Button_Baseline_Update,w
 10307  0F11  00F3               	movwf	??_Button_Baseline_Update+2
 10308  0F12  0872               	movf	??_Button_Baseline_Update+1,w
 10309  0F13  00F4               	movwf	??_Button_Baseline_Update+3
 10310  0F14  01F5               	clrf	??_Button_Baseline_Update+4
 10311  0F15  01F6               	clrf	??_Button_Baseline_Update+5
 10312  0F16  0877               	movf	Button_Baseline_Update@button,w
 10313  0F17  3E05               	addlw	5
 10314  0F18  0086               	movwf	6
 10315  0F19  3001               	movlw	1	; select bank2/3
 10316  0F1A  0087               	movwf	7
 10317  0F1B  0873               	movf	??_Button_Baseline_Update+2,w
 10318  0F1C  0781               	addwf	1,f
 10319  0F1D  3141               	addfsr 1,1
 10320  0F1E  0874               	movf	??_Button_Baseline_Update+3,w
 10321  0F1F  3D81               	addwfc	1,f
 10322  0F20  3141               	addfsr 1,1
 10323  0F21  0875               	movf	??_Button_Baseline_Update+4,w
 10324  0F22  3D81               	addwfc	1,f
 10325  0F23  3141               	addfsr 1,1
 10326  0F24  0876               	movf	??_Button_Baseline_Update+5,w
 10327  0F25  3D81               	addwfc	1,f
 10328                           
 10329                           ;mcc_generated_files/mtouch/mtouch_button.c: 496:         GIE = (uint8_t)1;
 10330  0F26  178B               	bsf	11,7	;volatile
 10331                           
 10332                           ;mcc_generated_files/mtouch/mtouch_button.c: 497:     }
 10333  0F27  0008               	return
 10334  0F28                     l4388:	
 10335                           
 10336                           ;mcc_generated_files/mtouch/mtouch_button.c: 499:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 500:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 10337  0F28  0877               	movf	Button_Baseline_Update@button,w
 10338  0F29  3E05               	addlw	5
 10339  0F2A  0086               	movwf	6
 10340  0F2B  3001               	movlw	1	; select bank2/3
 10341  0F2C  0087               	movwf	7
 10342  0F2D  3F40               	moviw [0]fsr1
 10343  0F2E  00F1               	movwf	??_Button_Baseline_Update
 10344  0F2F  3F41               	moviw [1]fsr1
 10345  0F30  00F2               	movwf	??_Button_Baseline_Update+1
 10346  0F31  3F42               	moviw [2]fsr1
 10347  0F32  00F3               	movwf	??_Button_Baseline_Update+2
 10348  0F33  3F43               	moviw [3]fsr1
 10349  0F34  00F4               	movwf	??_Button_Baseline_Update+3
 10350  0F35  3004               	movlw	4
 10351  0F36                     u2845:	
 10352  0F36  36F4               	lsrf	??_Button_Baseline_Update+3,f
 10353  0F37  0CF3               	rrf	??_Button_Baseline_Update+2,f
 10354  0F38  0CF2               	rrf	??_Button_Baseline_Update+1,f
 10355  0F39  0CF1               	rrf	??_Button_Baseline_Update,f
 10356  0F3A  0B89               	decfsz	9,f
 10357  0F3B  2F36               	goto	u2845
 10358  0F3C  0877               	movf	Button_Baseline_Update@button,w
 10359  0F3D  3E05               	addlw	5
 10360  0F3E  0086               	movwf	6
 10361  0F3F  3001               	movlw	1	; select bank2/3
 10362  0F40  0087               	movwf	7
 10363  0F41  0871               	movf	??_Button_Baseline_Update,w
 10364  0F42  0281               	subwf	1,f
 10365  0F43  3141               	addfsr 1,1
 10366  0F44  0872               	movf	??_Button_Baseline_Update+1,w
 10367  0F45  3B81               	subwfb	1,f
 10368  0F46  3141               	addfsr 1,1
 10369  0F47  0873               	movf	??_Button_Baseline_Update+2,w
 10370  0F48  3B81               	subwfb	1,f
 10371  0F49  3141               	addfsr 1,1
 10372  0F4A  0874               	movf	??_Button_Baseline_Update+3,w
 10373  0F4B  3B81               	subwfb	1,f
 10374  0F4C  317D               	addfsr 1,-3
 10375                           
 10376                           ;mcc_generated_files/mtouch/mtouch_button.c: 501:         button->baseline += button->re
      +                          ading;
 10377  0F4D  0877               	movf	Button_Baseline_Update@button,w
 10378  0F4E  3E03               	addlw	3
 10379  0F4F  0086               	movwf	6
 10380  0F50  3001               	movlw	1	; select bank2/3
 10381  0F51  0087               	movwf	7
 10382  0F52  3F40               	moviw [0]fsr1
 10383  0F53  00F1               	movwf	??_Button_Baseline_Update
 10384  0F54  3F41               	moviw [1]fsr1
 10385  0F55  00F2               	movwf	??_Button_Baseline_Update+1
 10386  0F56  0871               	movf	??_Button_Baseline_Update,w
 10387  0F57  00F3               	movwf	??_Button_Baseline_Update+2
 10388  0F58  0872               	movf	??_Button_Baseline_Update+1,w
 10389  0F59  00F4               	movwf	??_Button_Baseline_Update+3
 10390  0F5A  01F5               	clrf	??_Button_Baseline_Update+4
 10391  0F5B  01F6               	clrf	??_Button_Baseline_Update+5
 10392  0F5C  0877               	movf	Button_Baseline_Update@button,w
 10393  0F5D  3E05               	addlw	5
 10394  0F5E  0086               	movwf	6
 10395  0F5F  3001               	movlw	1	; select bank2/3
 10396  0F60  0087               	movwf	7
 10397  0F61  0873               	movf	??_Button_Baseline_Update+2,w
 10398  0F62  0781               	addwf	1,f
 10399  0F63  3141               	addfsr 1,1
 10400  0F64  0874               	movf	??_Button_Baseline_Update+3,w
 10401  0F65  3D81               	addwfc	1,f
 10402  0F66  3141               	addfsr 1,1
 10403  0F67  0875               	movf	??_Button_Baseline_Update+4,w
 10404  0F68  3D81               	addwfc	1,f
 10405  0F69  3141               	addfsr 1,1
 10406  0F6A  0876               	movf	??_Button_Baseline_Update+5,w
 10407  0F6B  3D81               	addwfc	1,f
 10408  0F6C  0008               	return
 10409  0F6D                     __end_of_Button_Baseline_Update:	
 10410                           
 10411                           	psect	text64
 10412  09E1                     __ptext64:	
 10413 ;; *************** function _Button_Baseline_Initialize *****************
 10414 ;; Defined at:
 10415 ;;		line 483 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10416 ;; Parameters:    Size  Location     Type
 10417 ;;  button          1    wreg     PTR struct .
 10418 ;;		 -> mtouch_button(64), 
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;  button          1    9[COMMON] PTR struct .
 10421 ;;		 -> mtouch_button(64), 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  1    wreg      void 
 10424 ;; Registers used:
 10425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10431 ;;      Params:         0       0       0       0       0       0       0       0
 10432 ;;      Locals:         1       0       0       0       0       0       0       0
 10433 ;;      Temps:          0       4       0       0       0       0       0       0
 10434 ;;      Totals:         1       4       0       0       0       0       0       0
 10435 ;;Total ram usage:        5 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    6
 10438 ;; This function calls:
 10439 ;;		_MTOUCH_Sensor_RawSample_Get
 10440 ;; This function is called by:
 10441 ;;		_Button_State_Initializing
 10442 ;; This function uses a non-reentrant model
 10443 ;;
 10444                           
 10445                           
 10446                           ;psect for function _Button_Baseline_Initialize
 10447  09E1                     _Button_Baseline_Initialize:	
 10448                           
 10449                           ;incstack = 0
 10450                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10451                           ;Button_Baseline_Initialize@button stored from wreg
 10452  09E1  00F9               	movwf	Button_Baseline_Initialize@button
 10453                           
 10454                           ;mcc_generated_files/mtouch/mtouch_button.c: 483: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 484: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 485:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 10455  09E2  0A79               	incf	Button_Baseline_Initialize@button,w
 10456  09E3  0086               	movwf	6
 10457  09E4  3001               	movlw	1	; select bank2/3
 10458  09E5  0087               	movwf	7
 10459  09E6  0801               	movf	1,w
 10460  09E7  3197  27BA  3189   	fcall	_MTOUCH_Sensor_RawSample_Get
 10461  09EA  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10462  09EB  0020               	movlb	0	; select bank0
 10463  09EC  00A0               	movwf	??_Button_Baseline_Initialize
 10464  09ED  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10465  09EE  00A1               	movwf	??_Button_Baseline_Initialize+1
 10466  09EF  01A2               	clrf	??_Button_Baseline_Initialize+2
 10467  09F0  01A3               	clrf	??_Button_Baseline_Initialize+3
 10468  09F1  0879               	movf	Button_Baseline_Initialize@button,w
 10469  09F2  3E05               	addlw	5
 10470  09F3  0086               	movwf	6
 10471  09F4  3001               	movlw	1	; select bank2/3
 10472  09F5  0087               	movwf	7
 10473  09F6  0820               	movf	??_Button_Baseline_Initialize,w
 10474  09F7  3FC0               	movwi [0]fsr1
 10475  09F8  0821               	movf	??_Button_Baseline_Initialize+1,w
 10476  09F9  3FC1               	movwi [1]fsr1
 10477  09FA  0822               	movf	??_Button_Baseline_Initialize+2,w
 10478  09FB  3FC2               	movwi [2]fsr1
 10479  09FC  0823               	movf	??_Button_Baseline_Initialize+3,w
 10480  09FD  3FC3               	movwi [3]fsr1
 10481                           
 10482                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 10483  09FE  0879               	movf	Button_Baseline_Initialize@button,w
 10484  09FF  3E05               	addlw	5
 10485  0A00  0086               	movwf	6
 10486  0A01  3001               	movlw	1	; select bank2/3
 10487  0A02  0087               	movwf	7
 10488  0A03  3004               	movlw	4
 10489  0A04                     u4455:	
 10490  0A04  3581               	lslf	1,f
 10491  0A05  3141               	addfsr 1,1
 10492  0A06  0D81               	rlf	1,f
 10493  0A07  3141               	addfsr 1,1
 10494  0A08  0D81               	rlf	1,f
 10495  0A09  3141               	addfsr 1,1
 10496  0A0A  0D81               	rlf	1,f
 10497  0A0B  317D               	addfsr 1,-3
 10498  0A0C  0B89               	decfsz	9,f
 10499  0A0D  2A04               	goto	u4455
 10500  0A0E  0008               	return
 10501  0A0F                     __end_of_Button_Baseline_Initialize:	
 10502                           
 10503                           	psect	text65
 10504  168A                     __ptext65:	
 10505 ;; *************** function _Button_Reading_Update *****************
 10506 ;; Defined at:
 10507 ;;		line 456 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10508 ;; Parameters:    Size  Location     Type
 10509 ;;  button          1    wreg     PTR struct .
 10510 ;;		 -> mtouch_button(64), 
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;  button          1    0[BANK0 ] PTR struct .
 10513 ;;		 -> mtouch_button(64), 
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  1    wreg      void 
 10516 ;; Registers used:
 10517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10523 ;;      Params:         0       0       0       0       0       0       0       0
 10524 ;;      Locals:         0       1       0       0       0       0       0       0
 10525 ;;      Temps:          0       0       0       0       0       0       0       0
 10526 ;;      Totals:         0       1       0       0       0       0       0       0
 10527 ;;Total ram usage:        1 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    7
 10530 ;; This function calls:
 10531 ;;		_Button_Reading_Update_Helper
 10532 ;; This function is called by:
 10533 ;;		_Button_Service
 10534 ;; This function uses a non-reentrant model
 10535 ;;
 10536                           
 10537                           
 10538                           ;psect for function _Button_Reading_Update
 10539  168A                     _Button_Reading_Update:	
 10540                           
 10541                           ;incstack = 0
 10542                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10543                           ;Button_Reading_Update@button stored from wreg
 10544  168A  0020               	movlb	0	; select bank0
 10545  168B  00A0               	movwf	Button_Reading_Update@button
 10546                           
 10547                           ;mcc_generated_files/mtouch/mtouch_button.c: 456: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 457: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 458:     if (GIE == (uint8_t) 1)
 10548  168C  1F8B               	btfss	11,7	;volatile
 10549  168D  2E94               	goto	l6054
 10550                           
 10551                           ;mcc_generated_files/mtouch/mtouch_button.c: 459:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 460:         GIE = (uint8_t) 0;
 10552  168E  138B               	bcf	11,7	;volatile
 10553                           
 10554                           ;mcc_generated_files/mtouch/mtouch_button.c: 461:         Button_Reading_Update_Helper(b
      +                          utton);
 10555  168F  0820               	movf	Button_Reading_Update@button,w
 10556  1690  318C  2407         	fcall	_Button_Reading_Update_Helper
 10557                           
 10558                           ;mcc_generated_files/mtouch/mtouch_button.c: 462:         GIE = (uint8_t) 1;
 10559  1692  178B               	bsf	11,7	;volatile
 10560                           
 10561                           ;mcc_generated_files/mtouch/mtouch_button.c: 463:     }
 10562  1693  0008               	return
 10563  1694                     l6054:	
 10564                           
 10565                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         Button_Reading_Update_Helper(button);
 10566  1694  0820               	movf	Button_Reading_Update@button,w
 10567  1695  318C  2407         	fcall	_Button_Reading_Update_Helper
 10568  1697  0008               	return
 10569  1698                     __end_of_Button_Reading_Update:	
 10570                           
 10571                           	psect	text66
 10572  0C07                     __ptext66:	
 10573 ;; *************** function _Button_Reading_Update_Helper *****************
 10574 ;; Defined at:
 10575 ;;		line 470 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10576 ;; Parameters:    Size  Location     Type
 10577 ;;  button          1    wreg     PTR struct .
 10578 ;;		 -> mtouch_button(64), 
 10579 ;; Auto vars:     Size  Location     Type
 10580 ;;  button          1   11[COMMON] PTR struct .
 10581 ;;		 -> mtouch_button(64), 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;                  1    wreg      void 
 10584 ;; Registers used:
 10585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10591 ;;      Params:         0       0       0       0       0       0       0       0
 10592 ;;      Locals:         1       0       0       0       0       0       0       0
 10593 ;;      Temps:          2       0       0       0       0       0       0       0
 10594 ;;      Totals:         3       0       0       0       0       0       0       0
 10595 ;;Total ram usage:        3 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; Hardware stack levels required when called:    6
 10598 ;; This function calls:
 10599 ;;		_MTOUCH_Sensor_RawSample_Get
 10600 ;; This function is called by:
 10601 ;;		_Button_Reading_Update
 10602 ;; This function uses a non-reentrant model
 10603 ;;
 10604                           
 10605                           
 10606                           ;psect for function _Button_Reading_Update_Helper
 10607  0C07                     _Button_Reading_Update_Helper:	
 10608                           
 10609                           ;incstack = 0
 10610                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10611                           ;Button_Reading_Update_Helper@button stored from wreg
 10612  0C07  00FB               	movwf	Button_Reading_Update_Helper@button
 10613                           
 10614                           ;mcc_generated_files/mtouch/mtouch_button.c: 470: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 471: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 472:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 10615  0C08  087B               	movf	Button_Reading_Update_Helper@button,w
 10616  0C09  3E02               	addlw	2
 10617  0C0A  0086               	movwf	6
 10618  0C0B  3001               	movlw	1	; select bank2/3
 10619  0C0C  0087               	movwf	7
 10620  0C0D  0801               	movf	1,w
 10621  0C0E  1903               	btfsc	3,2
 10622  0C0F  2C43               	goto	l5928
 10623                           
 10624                           ;mcc_generated_files/mtouch/mtouch_button.c: 473:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 474:         button->reading -= button->reading>>((uint8_t)2u);
 10625  0C10  087B               	movf	Button_Reading_Update_Helper@button,w
 10626  0C11  3E03               	addlw	3
 10627  0C12  0086               	movwf	6
 10628  0C13  3001               	movlw	1	; select bank2/3
 10629  0C14  0087               	movwf	7
 10630  0C15  3F40               	moviw [0]fsr1
 10631  0C16  00F9               	movwf	??_Button_Reading_Update_Helper
 10632  0C17  3F41               	moviw [1]fsr1
 10633  0C18  00FA               	movwf	??_Button_Reading_Update_Helper+1
 10634  0C19  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 10635  0C1A  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 10636  0C1B  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 10637  0C1C  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 10638  0C1D  087B               	movf	Button_Reading_Update_Helper@button,w
 10639  0C1E  3E03               	addlw	3
 10640  0C1F  0086               	movwf	6
 10641  0C20  3001               	movlw	1	; select bank2/3
 10642  0C21  0087               	movwf	7
 10643  0C22  0879               	movf	??_Button_Reading_Update_Helper,w
 10644  0C23  0281               	subwf	1,f
 10645  0C24  3141               	addfsr 1,1
 10646  0C25  087A               	movf	??_Button_Reading_Update_Helper+1,w
 10647  0C26  3B81               	subwfb	1,f
 10648  0C27  317F               	addfsr 1,-1
 10649                           
 10650                           ;mcc_generated_files/mtouch/mtouch_button.c: 475:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 10651  0C28  0A7B               	incf	Button_Reading_Update_Helper@button,w
 10652  0C29  0086               	movwf	6
 10653  0C2A  3001               	movlw	1	; select bank2/3
 10654  0C2B  0087               	movwf	7
 10655  0C2C  0801               	movf	1,w
 10656  0C2D  3197  27BA         	fcall	_MTOUCH_Sensor_RawSample_Get
 10657  0C2F  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10658  0C30  00F9               	movwf	??_Button_Reading_Update_Helper
 10659  0C31  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10660  0C32  00FA               	movwf	??_Button_Reading_Update_Helper+1
 10661  0C33  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 10662  0C34  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 10663  0C35  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 10664  0C36  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 10665  0C37  087B               	movf	Button_Reading_Update_Helper@button,w
 10666  0C38  3E03               	addlw	3
 10667  0C39  0086               	movwf	6
 10668  0C3A  3001               	movlw	1	; select bank2/3
 10669  0C3B  0087               	movwf	7
 10670  0C3C  0879               	movf	??_Button_Reading_Update_Helper,w
 10671  0C3D  0781               	addwf	1,f
 10672  0C3E  3141               	addfsr 1,1
 10673  0C3F  087A               	movf	??_Button_Reading_Update_Helper+1,w
 10674  0C40  3D81               	addwfc	1,f
 10675  0C41  317F               	addfsr 1,-1
 10676                           
 10677                           ;mcc_generated_files/mtouch/mtouch_button.c: 476:     }
 10678  0C42  0008               	return
 10679  0C43                     l5928:	
 10680                           
 10681                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 479:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 10682  0C43  0A7B               	incf	Button_Reading_Update_Helper@button,w
 10683  0C44  0086               	movwf	6
 10684  0C45  3001               	movlw	1	; select bank2/3
 10685  0C46  0087               	movwf	7
 10686  0C47  0801               	movf	1,w
 10687  0C48  3197  27BA         	fcall	_MTOUCH_Sensor_RawSample_Get
 10688  0C4A  087B               	movf	Button_Reading_Update_Helper@button,w
 10689  0C4B  3E03               	addlw	3
 10690  0C4C  0086               	movwf	6
 10691  0C4D  3001               	movlw	1	; select bank2/3
 10692  0C4E  0087               	movwf	7
 10693  0C4F  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10694  0C50  3FC0               	movwi [0]fsr1
 10695  0C51  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10696  0C52  3FC1               	movwi [1]fsr1
 10697  0C53  0008               	return
 10698  0C54                     __end_of_Button_Reading_Update_Helper:	
 10699                           
 10700                           	psect	text67
 10701  17BA                     __ptext67:	
 10702 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 10703 ;; Defined at:
 10704 ;;		line 800 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;  name            1    wreg     enum E2854
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;  name            1    8[COMMON] enum E2854
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  2    5[COMMON] unsigned short 
 10711 ;; Registers used:
 10712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10718 ;;      Params:         2       0       0       0       0       0       0       0
 10719 ;;      Locals:         1       0       0       0       0       0       0       0
 10720 ;;      Temps:          1       0       0       0       0       0       0       0
 10721 ;;      Totals:         4       0       0       0       0       0       0       0
 10722 ;;Total ram usage:        4 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    5
 10725 ;; This function calls:
 10726 ;;		___bmul
 10727 ;; This function is called by:
 10728 ;;		_Button_Reading_Update_Helper
 10729 ;;		_Button_Baseline_Initialize
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           
 10734                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 10735  17BA                     _MTOUCH_Sensor_RawSample_Get:	
 10736                           
 10737                           ;incstack = 0
 10738                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10739                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 10740  17BA  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 10741                           
 10742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 800: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          801: {;mcc_generated_files/mtouch/mtouch_sensor.c: 802:     if (name < 4u)
 10743  17BB  3004               	movlw	4
 10744  17BC  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 10745  17BD  1803               	skipnc
 10746  17BE  2FCE               	goto	l5840
 10747                           
 10748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 803:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 804:         return mtouch_sensor[name].rawSample;
 10749  17BF  3009               	movlw	9
 10750  17C0  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 10751  17C1  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 10752  17C2  00F1               	movwf	___bmul@multiplicand
 10753  17C3  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 10754  17C4  3196  26F5         	fcall	___bmul
 10755  17C6  3EB0               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
 10756  17C7  0086               	movwf	6
 10757  17C8  0187               	clrf	7
 10758  17C9  3F40               	moviw [0]fsr1
 10759  17CA  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 10760  17CB  3F41               	moviw [1]fsr1
 10761  17CC  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 10762  17CD  0008               	return
 10763  17CE                     l5840:	
 10764                           
 10765                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:         return (mtouch_sensor_sample_t
      +                          )0;
 10766  17CE  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 10767  17CF  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 10768  17D0  0008               	return
 10769  17D1                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 10770                           
 10771                           	psect	text68
 10772  16F5                     __ptext68:	
 10773 ;; *************** function ___bmul *****************
 10774 ;; Defined at:
 10775 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;  multiplier      1    wreg     unsigned char 
 10778 ;;  multiplicand    1    1[COMMON] unsigned char 
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;  multiplier      1    4[COMMON] unsigned char 
 10781 ;;  product         1    3[COMMON] unsigned char 
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  1    wreg      unsigned char 
 10784 ;; Registers used:
 10785 ;;		wreg, status,2, status,0
 10786 ;; Tracked objects:
 10787 ;;		On entry : 0/0
 10788 ;;		On exit  : 0/0
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10791 ;;      Params:         1       0       0       0       0       0       0       0
 10792 ;;      Locals:         2       0       0       0       0       0       0       0
 10793 ;;      Temps:          1       0       0       0       0       0       0       0
 10794 ;;      Totals:         4       0       0       0       0       0       0       0
 10795 ;;Total ram usage:        4 bytes
 10796 ;; Hardware stack levels used:    1
 10797 ;; Hardware stack levels required when called:    4
 10798 ;; This function calls:
 10799 ;;		Nothing
 10800 ;; This function is called by:
 10801 ;;		_MTOUCH_Sensor_Initialize
 10802 ;;		_MTOUCH_Sensor_RawSample_Get
 10803 ;;		_MTOUCH_Sensor_Enable
 10804 ;;		_MTOUCH_Sensor_Calibrate
 10805 ;;		_MTOUCH_Sensor_isCalibrated
 10806 ;;		_MTOUCH_Sensor_wasSampled
 10807 ;;		_MTOUCH_Sensor_isAnySensorActive
 10808 ;;		_MTOUCH_Sensor_Disable
 10809 ;;		_MTOUCH_Sensor_isEnabled
 10810 ;;		_MTOUCH_Sensor_isActive
 10811 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 10812 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 10813 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 10814 ;;		_MTOUCH_Sensor_Oversampling_Get
 10815 ;;		_MTOUCH_Sensor_Oversampling_Set
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           
 10820                           ;psect for function ___bmul
 10821  16F5                     ___bmul:	
 10822                           
 10823                           ;incstack = 0
 10824                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10825                           ;___bmul@multiplier stored from wreg
 10826  16F5  00F4               	movwf	___bmul@multiplier
 10827  16F6  01F3               	clrf	___bmul@product
 10828  16F7                     l5614:	
 10829  16F7  1C74               	btfss	___bmul@multiplier,0
 10830  16F8  2EFD               	goto	l5618
 10831  16F9  0871               	movf	___bmul@multiplicand,w
 10832  16FA  00F2               	movwf	??___bmul
 10833  16FB  0872               	movf	??___bmul,w
 10834  16FC  07F3               	addwf	___bmul@product,f
 10835  16FD                     l5618:	
 10836  16FD  1003               	clrc
 10837  16FE  0DF1               	rlf	___bmul@multiplicand,f
 10838  16FF  1003               	clrc
 10839  1700  0CF4               	rrf	___bmul@multiplier,f
 10840  1701  0874               	movf	___bmul@multiplier,w
 10841  1702  1D03               	btfss	3,2
 10842  1703  2EF7               	goto	l5614
 10843  1704  0873               	movf	___bmul@product,w
 10844  1705  0008               	return
 10845  1706                     __end_of___bmul:	
 10846                           
 10847                           	psect	text69
 10848  0DCD                     __ptext69:	
 10849 ;; *************** function _Button_Deviation_Update *****************
 10850 ;; Defined at:
 10851 ;;		line 407 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;  button          1    wreg     PTR struct .
 10854 ;;		 -> mtouch_button(64), 
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;  button          1    0[BANK0 ] PTR struct .
 10857 ;;		 -> mtouch_button(64), 
 10858 ;;  deviation       4    1[BANK0 ] long 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  1    wreg      void 
 10861 ;; Registers used:
 10862 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10868 ;;      Params:         0       0       0       0       0       0       0       0
 10869 ;;      Locals:         0       5       0       0       0       0       0       0
 10870 ;;      Temps:         10       0       0       0       0       0       0       0
 10871 ;;      Totals:        10       5       0       0       0       0       0       0
 10872 ;;Total ram usage:       15 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    4
 10875 ;; This function calls:
 10876 ;;		Nothing
 10877 ;; This function is called by:
 10878 ;;		_Button_Service
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           
 10883                           ;psect for function _Button_Deviation_Update
 10884  0DCD                     _Button_Deviation_Update:	
 10885                           
 10886                           ;incstack = 0
 10887                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10888                           ;Button_Deviation_Update@button stored from wreg
 10889  0DCD  0020               	movlb	0	; select bank0
 10890  0DCE  00A0               	movwf	Button_Deviation_Update@button
 10891                           
 10892                           ;mcc_generated_files/mtouch/mtouch_button.c: 407: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 408: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 409:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 411:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 10893  0DCF  0820               	movf	Button_Deviation_Update@button,w
 10894  0DD0  3E05               	addlw	5
 10895  0DD1  0086               	movwf	6
 10896  0DD2  3001               	movlw	1	; select bank2/3
 10897  0DD3  0087               	movwf	7
 10898  0DD4  3F40               	moviw [0]fsr1
 10899  0DD5  00F1               	movwf	??_Button_Deviation_Update
 10900  0DD6  3F41               	moviw [1]fsr1
 10901  0DD7  00F2               	movwf	??_Button_Deviation_Update+1
 10902  0DD8  3F42               	moviw [2]fsr1
 10903  0DD9  00F3               	movwf	??_Button_Deviation_Update+2
 10904  0DDA  3F43               	moviw [3]fsr1
 10905  0DDB  00F4               	movwf	??_Button_Deviation_Update+3
 10906  0DDC  3004               	movlw	4
 10907  0DDD                     u3035:	
 10908  0DDD  36F4               	lsrf	??_Button_Deviation_Update+3,f
 10909  0DDE  0CF3               	rrf	??_Button_Deviation_Update+2,f
 10910  0DDF  0CF2               	rrf	??_Button_Deviation_Update+1,f
 10911  0DE0  0CF1               	rrf	??_Button_Deviation_Update,f
 10912  0DE1  0B89               	decfsz	9,f
 10913  0DE2  2DDD               	goto	u3035
 10914  0DE3  0820               	movf	Button_Deviation_Update@button,w
 10915  0DE4  3E03               	addlw	3
 10916  0DE5  0086               	movwf	6
 10917  0DE6  3001               	movlw	1	; select bank2/3
 10918  0DE7  0087               	movwf	7
 10919  0DE8  3F40               	moviw [0]fsr1
 10920  0DE9  00F5               	movwf	??_Button_Deviation_Update+4
 10921  0DEA  3F41               	moviw [1]fsr1
 10922  0DEB  00F6               	movwf	??_Button_Deviation_Update+5
 10923  0DEC  0875               	movf	??_Button_Deviation_Update+4,w
 10924  0DED  00F7               	movwf	??_Button_Deviation_Update+6
 10925  0DEE  0876               	movf	??_Button_Deviation_Update+5,w
 10926  0DEF  00F8               	movwf	??_Button_Deviation_Update+7
 10927  0DF0  01F9               	clrf	??_Button_Deviation_Update+8
 10928  0DF1  01FA               	clrf	??_Button_Deviation_Update+9
 10929  0DF2  0871               	movf	??_Button_Deviation_Update,w
 10930  0DF3  02F7               	subwf	??_Button_Deviation_Update+6,f
 10931  0DF4  0872               	movf	??_Button_Deviation_Update+1,w
 10932  0DF5  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 10933  0DF6  0873               	movf	??_Button_Deviation_Update+2,w
 10934  0DF7  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 10935  0DF8  0874               	movf	??_Button_Deviation_Update+3,w
 10936  0DF9  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 10937  0DFA  087A               	movf	??_Button_Deviation_Update+9,w
 10938  0DFB  00A4               	movwf	Button_Deviation_Update@deviation+3
 10939  0DFC  0879               	movf	??_Button_Deviation_Update+8,w
 10940  0DFD  00A3               	movwf	Button_Deviation_Update@deviation+2
 10941  0DFE  0878               	movf	??_Button_Deviation_Update+7,w
 10942  0DFF  00A2               	movwf	Button_Deviation_Update@deviation+1
 10943  0E00  0877               	movf	??_Button_Deviation_Update+6,w
 10944  0E01  00A1               	movwf	Button_Deviation_Update@deviation
 10945                           
 10946                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     deviation = deviation >> (button->
      +                          scaling);
 10947  0E02  0821               	movf	Button_Deviation_Update@deviation,w
 10948  0E03  00F1               	movwf	??_Button_Deviation_Update
 10949  0E04  0822               	movf	Button_Deviation_Update@deviation+1,w
 10950  0E05  00F2               	movwf	??_Button_Deviation_Update+1
 10951  0E06  0823               	movf	Button_Deviation_Update@deviation+2,w
 10952  0E07  00F3               	movwf	??_Button_Deviation_Update+2
 10953  0E08  0824               	movf	Button_Deviation_Update@deviation+3,w
 10954  0E09  00F4               	movwf	??_Button_Deviation_Update+3
 10955  0E0A  0820               	movf	Button_Deviation_Update@button,w
 10956  0E0B  3E0F               	addlw	15
 10957  0E0C  0086               	movwf	6
 10958  0E0D  3001               	movlw	1	; select bank2/3
 10959  0E0E  0087               	movwf	7
 10960  0E0F  0A01               	incf	1,w
 10961  0E10  2E15               	goto	u3040
 10962  0E11                     u3045:	
 10963  0E11  37F4               	asrf	??_Button_Deviation_Update+3,f
 10964  0E12  0CF3               	rrf	??_Button_Deviation_Update+2,f
 10965  0E13  0CF2               	rrf	??_Button_Deviation_Update+1,f
 10966  0E14  0CF1               	rrf	??_Button_Deviation_Update,f
 10967  0E15                     u3040:	
 10968  0E15  0B89               	decfsz	9,f
 10969  0E16  2E11               	goto	u3045
 10970  0E17  0874               	movf	??_Button_Deviation_Update+3,w
 10971  0E18  00A4               	movwf	Button_Deviation_Update@deviation+3
 10972  0E19  0873               	movf	??_Button_Deviation_Update+2,w
 10973  0E1A  00A3               	movwf	Button_Deviation_Update@deviation+2
 10974  0E1B  0872               	movf	??_Button_Deviation_Update+1,w
 10975  0E1C  00A2               	movwf	Button_Deviation_Update@deviation+1
 10976  0E1D  0871               	movf	??_Button_Deviation_Update,w
 10977  0E1E  00A1               	movwf	Button_Deviation_Update@deviation
 10978                           
 10979                           ;mcc_generated_files/mtouch/mtouch_button.c: 417:     if (deviation > ((0x7f)))
 10980  0E1F  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 10981  0E20  2E36               	goto	l4544
 10982  0E21  0824               	movf	Button_Deviation_Update@deviation+3,w
 10983  0E22  1D03               	btfss	3,2
 10984  0E23  2E2E               	goto	l4542
 10985  0E24  0823               	movf	Button_Deviation_Update@deviation+2,w
 10986  0E25  1D03               	btfss	3,2
 10987  0E26  2E2E               	goto	l4542
 10988  0E27  0822               	movf	Button_Deviation_Update@deviation+1,w
 10989  0E28  1D03               	btfss	3,2
 10990  0E29  2E2E               	goto	l4542
 10991  0E2A  3080               	movlw	128
 10992  0E2B  0221               	subwf	Button_Deviation_Update@deviation,w
 10993  0E2C  1C03               	btfss	3,0
 10994  0E2D  2E36               	goto	l4544
 10995  0E2E                     l4542:	
 10996                           
 10997                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 419:         deviation = ((0x7f));
 10998  0E2E  3000               	movlw	0
 10999  0E2F  00A4               	movwf	Button_Deviation_Update@deviation+3
 11000  0E30  3000               	movlw	0
 11001  0E31  00A3               	movwf	Button_Deviation_Update@deviation+2
 11002  0E32  3000               	movlw	0
 11003  0E33  00A2               	movwf	Button_Deviation_Update@deviation+1
 11004  0E34  307F               	movlw	127
 11005  0E35  00A1               	movwf	Button_Deviation_Update@deviation
 11006  0E36                     l4544:	
 11007                           
 11008                           ;mcc_generated_files/mtouch/mtouch_button.c: 421:     if (deviation < ((-1-0x7f)))
 11009  0E36  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 11010  0E37  2E4A               	goto	l4548
 11011  0E38  3080               	movlw	128
 11012  0E39  0221               	subwf	Button_Deviation_Update@deviation,w
 11013  0E3A  30FF               	movlw	255
 11014  0E3B  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 11015  0E3C  30FF               	movlw	255
 11016  0E3D  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 11017  0E3E  30FF               	movlw	255
 11018  0E3F  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 11019  0E40  1803               	btfsc	3,0
 11020  0E41  2E4A               	goto	l4548
 11021                           
 11022                           ;mcc_generated_files/mtouch/mtouch_button.c: 422:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 423:         deviation = ((-1-0x7f));
 11023  0E42  30FF               	movlw	255
 11024  0E43  00A4               	movwf	Button_Deviation_Update@deviation+3
 11025  0E44  30FF               	movlw	255
 11026  0E45  00A3               	movwf	Button_Deviation_Update@deviation+2
 11027  0E46  30FF               	movlw	255
 11028  0E47  00A2               	movwf	Button_Deviation_Update@deviation+1
 11029  0E48  3080               	movlw	128
 11030  0E49  00A1               	movwf	Button_Deviation_Update@deviation
 11031  0E4A                     l4548:	
 11032                           
 11033                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 11034  0E4A  0821               	movf	Button_Deviation_Update@deviation,w
 11035  0E4B  00F1               	movwf	??_Button_Deviation_Update
 11036  0E4C  0820               	movf	Button_Deviation_Update@button,w
 11037  0E4D  3E09               	addlw	9
 11038  0E4E  0086               	movwf	6
 11039  0E4F  3001               	movlw	1	; select bank2/3
 11040  0E50  0087               	movwf	7
 11041  0E51  0871               	movf	??_Button_Deviation_Update,w
 11042  0E52  0081               	movwf	1
 11043  0E53  0008               	return
 11044  0E54                     __end_of_Button_Deviation_Update:	
 11045                           
 11046                           	psect	text70
 11047  0806                     __ptext70:	
 11048 ;; *************** function _MTOUCH_Button_isPressed *****************
 11049 ;; Defined at:
 11050 ;;		line 382 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;  name            1    wreg     enum E3070
 11053 ;; Auto vars:     Size  Location     Type
 11054 ;;  name            1    2[COMMON] enum E3070
 11055 ;; Return value:  Size  Location     Type
 11056 ;;                  1    wreg      _Bool 
 11057 ;; Registers used:
 11058 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11059 ;; Tracked objects:
 11060 ;;		On entry : 0/0
 11061 ;;		On exit  : 0/0
 11062 ;;		Unchanged: 0/0
 11063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11064 ;;      Params:         0       0       0       0       0       0       0       0
 11065 ;;      Locals:         1       0       0       0       0       0       0       0
 11066 ;;      Temps:          1       0       0       0       0       0       0       0
 11067 ;;      Totals:         2       0       0       0       0       0       0       0
 11068 ;;Total ram usage:        2 bytes
 11069 ;; Hardware stack levels used:    1
 11070 ;; Hardware stack levels required when called:    4
 11071 ;; This function calls:
 11072 ;;		Nothing
 11073 ;; This function is called by:
 11074 ;;		_main
 11075 ;;		_touch_example
 11076 ;;		_MTOUCH_Button_Buttonmask_Get
 11077 ;; This function uses a non-reentrant model
 11078 ;;
 11079                           
 11080                           
 11081                           ;psect for function _MTOUCH_Button_isPressed
 11082  0806                     _MTOUCH_Button_isPressed:	
 11083                           
 11084                           ;incstack = 0
 11085                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 11086                           ;MTOUCH_Button_isPressed@name stored from wreg
 11087  0806  00F2               	movwf	MTOUCH_Button_isPressed@name
 11088                           
 11089                           ;mcc_generated_files/mtouch/mtouch_button.c: 382: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 383: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 384:     if(name < 4u)
 11090  0807  3004               	movlw	4
 11091  0808  0272               	subwf	MTOUCH_Button_isPressed@name,w
 11092  0809  1803               	skipnc
 11093  080A  281F               	goto	l5164
 11094                           
 11095                           ;mcc_generated_files/mtouch/mtouch_button.c: 385:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 11096  080B  0872               	movf	MTOUCH_Button_isPressed@name,w
 11097  080C  00F1               	movwf	??_MTOUCH_Button_isPressed
 11098  080D  3003               	movlw	3
 11099  080E                     u3445:	
 11100  080E  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 11101  080F  3EFF               	addlw	-1
 11102  0810  1D03               	skipz
 11103  0811  280E               	goto	u3445
 11104  0812  3571               	lslf	??_MTOUCH_Button_isPressed,w
 11105  0813  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 11106  0814  0086               	movwf	6
 11107  0815  3001               	movlw	1	; select bank2/3
 11108  0816  0087               	movwf	7
 11109  0817  3002               	movlw	2
 11110  0818  0601               	xorwf	1,w
 11111  0819  1D03               	btfss	3,2
 11112  081A  281D               	goto	u3450
 11113  081B  3001               	movlw	1
 11114  081C  0008               	return
 11115  081D                     u3450:	
 11116  081D  3000               	movlw	0
 11117  081E  0008               	return
 11118  081F                     l5164:	
 11119                           
 11120                           ;mcc_generated_files/mtouch/mtouch_button.c: 387:         return 0;
 11121  081F  3000               	movlw	0
 11122  0820  0008               	return
 11123  0821                     __end_of_MTOUCH_Button_isPressed:	
 11124                           
 11125                           	psect	text71
 11126  15F1                     __ptext71:	
 11127 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 11128 ;; Defined at:
 11129 ;;		line 536 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
 11132 ;;		 -> myButtonPressedCallback(1), 
 11133 ;; Auto vars:     Size  Location     Type
 11134 ;;		None
 11135 ;; Return value:  Size  Location     Type
 11136 ;;                  1    wreg      void 
 11137 ;; Registers used:
 11138 ;;		wreg
 11139 ;; Tracked objects:
 11140 ;;		On entry : 0/0
 11141 ;;		On exit  : 0/0
 11142 ;;		Unchanged: 0/0
 11143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11144 ;;      Params:         2       0       0       0       0       0       0       0
 11145 ;;      Locals:         0       0       0       0       0       0       0       0
 11146 ;;      Temps:          0       0       0       0       0       0       0       0
 11147 ;;      Totals:         2       0       0       0       0       0       0       0
 11148 ;;Total ram usage:        2 bytes
 11149 ;; Hardware stack levels used:    1
 11150 ;; Hardware stack levels required when called:    4
 11151 ;; This function calls:
 11152 ;;		Nothing
 11153 ;; This function is called by:
 11154 ;;		_main
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           
 11159                           ;psect for function _MTOUCH_Button_SetPressedCallback
 11160  15F1                     _MTOUCH_Button_SetPressedCallback:	
 11161                           
 11162                           ;mcc_generated_files/mtouch/mtouch_button.c: 536: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          537: {;mcc_generated_files/mtouch/mtouch_button.c: 538:     callback_pressed = callback;
 11163                           
 11164                           ;incstack = 0
 11165                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 11166  15F1  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 11167  15F2  0021               	movlb	1	; select bank1
 11168  15F3  00A7               	movwf	(_callback_pressed+1)^(0+128)
 11169  15F4  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 11170  15F5  00A6               	movwf	_callback_pressed^(0+128)
 11171  15F6  0008               	return
 11172  15F7                     __end_of_MTOUCH_Button_SetPressedCallback:	
 11173                           
 11174                           	psect	text72
 11175  15EB                     __ptext72:	
 11176 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 11177 ;; Defined at:
 11178 ;;		line 540 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11179 ;; Parameters:    Size  Location     Type
 11180 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
 11181 ;;		 -> myButtonReleasedCallback(1), 
 11182 ;; Auto vars:     Size  Location     Type
 11183 ;;		None
 11184 ;; Return value:  Size  Location     Type
 11185 ;;                  1    wreg      void 
 11186 ;; Registers used:
 11187 ;;		wreg
 11188 ;; Tracked objects:
 11189 ;;		On entry : 0/0
 11190 ;;		On exit  : 0/0
 11191 ;;		Unchanged: 0/0
 11192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11193 ;;      Params:         2       0       0       0       0       0       0       0
 11194 ;;      Locals:         0       0       0       0       0       0       0       0
 11195 ;;      Temps:          0       0       0       0       0       0       0       0
 11196 ;;      Totals:         2       0       0       0       0       0       0       0
 11197 ;;Total ram usage:        2 bytes
 11198 ;; Hardware stack levels used:    1
 11199 ;; Hardware stack levels required when called:    4
 11200 ;; This function calls:
 11201 ;;		Nothing
 11202 ;; This function is called by:
 11203 ;;		_main
 11204 ;; This function uses a non-reentrant model
 11205 ;;
 11206                           
 11207                           
 11208                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 11209  15EB                     _MTOUCH_Button_SetNotPressedCallback:	
 11210                           
 11211                           ;mcc_generated_files/mtouch/mtouch_button.c: 540: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 541: {;mcc_generated_files/mtouch/mtouch_button.c: 542:     callback_notPressed = cal
      +                          lback;
 11212                           
 11213                           ;incstack = 0
 11214                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 11215  15EB  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 11216  15EC  0020               	movlb	0	; select bank0
 11217  15ED  00ED               	movwf	_callback_notPressed+1
 11218  15EE  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 11219  15EF  00EC               	movwf	_callback_notPressed
 11220  15F0  0008               	return
 11221  15F1                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 11222                           
 11223                           	psect	text73
 11224  15CA                     __ptext73:	
 11225 ;; *************** function _EUSART_is_rx_ready *****************
 11226 ;; Defined at:
 11227 ;;		line 124 in file "mcc_generated_files/eusart.c"
 11228 ;; Parameters:    Size  Location     Type
 11229 ;;		None
 11230 ;; Auto vars:     Size  Location     Type
 11231 ;;		None
 11232 ;; Return value:  Size  Location     Type
 11233 ;;                  1    wreg      unsigned char 
 11234 ;; Registers used:
 11235 ;;		wreg
 11236 ;; Tracked objects:
 11237 ;;		On entry : 0/0
 11238 ;;		On exit  : 0/0
 11239 ;;		Unchanged: 0/0
 11240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11241 ;;      Params:         0       0       0       0       0       0       0       0
 11242 ;;      Locals:         0       0       0       0       0       0       0       0
 11243 ;;      Temps:          0       0       0       0       0       0       0       0
 11244 ;;      Totals:         0       0       0       0       0       0       0       0
 11245 ;;Total ram usage:        0 bytes
 11246 ;; Hardware stack levels used:    1
 11247 ;; Hardware stack levels required when called:    4
 11248 ;; This function calls:
 11249 ;;		Nothing
 11250 ;; This function is called by:
 11251 ;;		_main
 11252 ;; This function uses a non-reentrant model
 11253 ;;
 11254                           
 11255                           
 11256                           ;psect for function _EUSART_is_rx_ready
 11257  15CA                     _EUSART_is_rx_ready:	
 11258                           
 11259                           ;mcc_generated_files/eusart.c: 126:     return eusartRxCount;
 11260                           
 11261                           ;incstack = 0
 11262                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 11263  15CA  0020               	movlb	0	; select bank0
 11264  15CB  086A               	movf	_eusartRxCount,w	;volatile
 11265  15CC  0008               	return
 11266  15CD                     __end_of_EUSART_is_rx_ready:	
 11267                           
 11268                           	psect	text74
 11269  0876                     __ptext74:	
 11270 ;; *************** function _EUSART_Read *****************
 11271 ;; Defined at:
 11272 ;;		line 138 in file "mcc_generated_files/eusart.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;		None
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;  readValue       1    2[COMMON] unsigned char 
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  1    wreg      unsigned char 
 11279 ;; Registers used:
 11280 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11281 ;; Tracked objects:
 11282 ;;		On entry : 0/0
 11283 ;;		On exit  : 0/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11286 ;;      Params:         0       0       0       0       0       0       0       0
 11287 ;;      Locals:         1       0       0       0       0       0       0       0
 11288 ;;      Temps:          1       0       0       0       0       0       0       0
 11289 ;;      Totals:         2       0       0       0       0       0       0       0
 11290 ;;Total ram usage:        2 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:    4
 11293 ;; This function calls:
 11294 ;;		Nothing
 11295 ;; This function is called by:
 11296 ;;		_main
 11297 ;;		_getch
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function _EUSART_Read
 11303  0876                     _EUSART_Read:	
 11304  0876                     l4890:	
 11305                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 11306                           
 11307                           ;incstack = 0
 11308                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 11309                           
 11310                           
 11311                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 11312  0876  0020               	movlb	0	; select bank0
 11313  0877  086A               	movf	_eusartRxCount,w	;volatile
 11314  0878  1903               	btfsc	3,2
 11315  0879  2876               	goto	l4890
 11316                           
 11317                           ;mcc_generated_files/eusart.c: 146:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 11318  087A  086B               	movf	_eusartRxTail,w	;volatile
 11319  087B  3ECE               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 11320  087C  0086               	movwf	6
 11321  087D  0187               	clrf	7
 11322  087E  0801               	movf	1,w
 11323  087F  00F1               	movwf	??_EUSART_Read
 11324  0880  0871               	movf	??_EUSART_Read,w
 11325  0881  00E9               	movwf	_eusartRxLastError	;volatile
 11326                           
 11327                           ;mcc_generated_files/eusart.c: 148:     readValue = eusartRxBuffer[eusartRxTail++];
 11328  0882  086B               	movf	_eusartRxTail,w
 11329  0883  3ED6               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 11330  0884  0086               	movwf	6
 11331  0885  0187               	clrf	7
 11332  0886  0801               	movf	1,w
 11333  0887  00F1               	movwf	??_EUSART_Read
 11334  0888  0871               	movf	??_EUSART_Read,w
 11335  0889  00F2               	movwf	EUSART_Read@readValue
 11336  088A  3001               	movlw	1
 11337  088B  00F1               	movwf	??_EUSART_Read
 11338  088C  0871               	movf	??_EUSART_Read,w
 11339  088D  07EB               	addwf	_eusartRxTail,f	;volatile
 11340                           
 11341                           ;mcc_generated_files/eusart.c: 149:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 11342  088E  3008               	movlw	8
 11343  088F  026B               	subwf	_eusartRxTail,w	;volatile
 11344  0890  1803               	btfsc	3,0
 11345                           
 11346                           ;mcc_generated_files/eusart.c: 150:     {;mcc_generated_files/eusart.c: 151:         eus
      +                          artRxTail = 0;
 11347  0891  01EB               	clrf	_eusartRxTail	;volatile
 11348                           
 11349                           ;mcc_generated_files/eusart.c: 153:     PIE1bits.RCIE = 0;
 11350  0892  0021               	movlb	1	; select bank1
 11351  0893  1291               	bcf	17,5	;volatile
 11352                           
 11353                           ;mcc_generated_files/eusart.c: 154:     eusartRxCount--;
 11354  0894  3001               	movlw	1
 11355  0895  0020               	movlb	0	; select bank0
 11356  0896  02EA               	subwf	_eusartRxCount,f	;volatile
 11357                           
 11358                           ;mcc_generated_files/eusart.c: 155:     PIE1bits.RCIE = 1;
 11359  0897  0021               	movlb	1	; select bank1
 11360  0898  1691               	bsf	17,5	;volatile
 11361                           
 11362                           ;mcc_generated_files/eusart.c: 157:     return readValue;
 11363  0899  0872               	movf	EUSART_Read@readValue,w
 11364  089A  0008               	return
 11365  089B                     __end_of_EUSART_Read:	
 11366                           
 11367                           	psect	text75
 11368  045B                     __ptext75:	
 11369 ;; *************** function _DATA_PROCESS *****************
 11370 ;; Defined at:
 11371 ;;		line 155 in file "main.c"
 11372 ;; Parameters:    Size  Location     Type
 11373 ;;  x               1    wreg     unsigned char 
 11374 ;; Auto vars:     Size  Location     Type
 11375 ;;  x               1   49[BANK0 ] unsigned char 
 11376 ;; Return value:  Size  Location     Type
 11377 ;;                  1    wreg      void 
 11378 ;; Registers used:
 11379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11380 ;; Tracked objects:
 11381 ;;		On entry : 0/0
 11382 ;;		On exit  : 0/0
 11383 ;;		Unchanged: 0/0
 11384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11385 ;;      Params:         0       0       0       0       0       0       0       0
 11386 ;;      Locals:         0       1       0       0       0       0       0       0
 11387 ;;      Temps:          0       2       0       0       0       0       0       0
 11388 ;;      Totals:         0       3       0       0       0       0       0       0
 11389 ;;Total ram usage:        3 bytes
 11390 ;; Hardware stack levels used:    1
 11391 ;; Hardware stack levels required when called:   14
 11392 ;; This function calls:
 11393 ;;		_LED_PROCESS
 11394 ;;		_RELAY_PROCESS
 11395 ;;		_update_state
 11396 ;; This function is called by:
 11397 ;;		_main
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _DATA_PROCESS
 11403  045B                     _DATA_PROCESS:	
 11404                           
 11405                           ;incstack = 0
 11406                           ; Regs used in _DATA_PROCESS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11407                           ;DATA_PROCESS@x stored from wreg
 11408  045B  0020               	movlb	0	; select bank0
 11409  045C  00D1               	movwf	DATA_PROCESS@x
 11410                           
 11411                           ;main.c: 155: void DATA_PROCESS(char x);main.c: 156: {;main.c: 157:     switch(x)
 11412  045D  2CC5               	goto	l6374
 11413  045E                     l6304:	
 11414                           
 11415                           ;main.c: 160:         {;main.c: 161:             LED_PROCESS(0);
 11416  045E  3000               	movlw	0
 11417  045F  3186  26EC  3184   	fcall	_LED_PROCESS
 11418                           
 11419                           ;main.c: 163:             RELAY_PROCESS(0);
 11420  0462  3000               	movlw	0
 11421  0463                     L7:	
 11422  0463  3186  264F         	fcall	_RELAY_PROCESS
 11423  0465                     l6306:	
 11424                           
 11425                           ;main.c: 164:             check_request = 0;
 11426  0465  0020               	movlb	0	; select bank0
 11427  0466  01E4               	clrf	_check_request
 11428                           
 11429                           ;main.c: 165:             break;
 11430  0467  0008               	return
 11431  0468                     l6308:	
 11432                           
 11433                           ;main.c: 168:         {;main.c: 169:             LED_PROCESS(1);
 11434  0468  3001               	movlw	1
 11435  0469  3186  26EC  3184   	fcall	_LED_PROCESS
 11436                           
 11437                           ;main.c: 170:             RELAY_PROCESS(1);
 11438  046C  3001               	movlw	1
 11439  046D  2C63               	goto	L7
 11440  046E                     l6312:	
 11441                           
 11442                           ;main.c: 175:         {;main.c: 176:             LED_PROCESS(2);
 11443  046E  3002               	movlw	2
 11444  046F  3186  26EC  3184   	fcall	_LED_PROCESS
 11445                           
 11446                           ;main.c: 177:             RELAY_PROCESS(2);
 11447  0472  3002               	movlw	2
 11448  0473  2C63               	goto	L7
 11449  0474                     l6316:	
 11450                           
 11451                           ;main.c: 182:         {;main.c: 183:             LED_PROCESS(3);
 11452  0474  3003               	movlw	3
 11453  0475  3186  26EC  3184   	fcall	_LED_PROCESS
 11454                           
 11455                           ;main.c: 184:             RELAY_PROCESS(3);
 11456  0478  3003               	movlw	3
 11457  0479  2C63               	goto	L7
 11458  047A                     l6320:	
 11459                           
 11460                           ;main.c: 189:         {;main.c: 190:             LED_PROCESS(4);
 11461  047A  3004               	movlw	4
 11462  047B  3186  26EC  3184   	fcall	_LED_PROCESS
 11463                           
 11464                           ;main.c: 191:             RELAY_PROCESS(4);
 11465  047E  3004               	movlw	4
 11466  047F  2C63               	goto	L7
 11467  0480                     l6324:	
 11468                           
 11469                           ;main.c: 196:         {;main.c: 197:             LED_PROCESS(5);
 11470  0480  3005               	movlw	5
 11471  0481  3186  26EC  3184   	fcall	_LED_PROCESS
 11472                           
 11473                           ;main.c: 198:             RELAY_PROCESS(5);
 11474  0484  3005               	movlw	5
 11475  0485  2C63               	goto	L7
 11476  0486                     l6328:	
 11477                           
 11478                           ;main.c: 203:         {;main.c: 204:             LED_PROCESS(6);
 11479  0486  3006               	movlw	6
 11480  0487  3186  26EC  3184   	fcall	_LED_PROCESS
 11481                           
 11482                           ;main.c: 205:             RELAY_PROCESS(6);
 11483  048A  3006               	movlw	6
 11484  048B  2C63               	goto	L7
 11485  048C                     l6332:	
 11486                           
 11487                           ;main.c: 210:         {;main.c: 211:             LED_PROCESS(7);
 11488  048C  3007               	movlw	7
 11489  048D  3186  26EC  3184   	fcall	_LED_PROCESS
 11490                           
 11491                           ;main.c: 212:             RELAY_PROCESS(7);
 11492  0490  3007               	movlw	7
 11493  0491  2C63               	goto	L7
 11494  0492                     l6336:	
 11495                           
 11496                           ;main.c: 217:         {;main.c: 218:             LED_PROCESS(8);
 11497  0492  3008               	movlw	8
 11498  0493  3186  26EC  3184   	fcall	_LED_PROCESS
 11499                           
 11500                           ;main.c: 219:             RELAY_PROCESS(8);
 11501  0496  3008               	movlw	8
 11502  0497  2C63               	goto	L7
 11503  0498                     l6340:	
 11504                           
 11505                           ;main.c: 224:         {;main.c: 225:             LED_PROCESS(9);
 11506  0498  3009               	movlw	9
 11507  0499  3186  26EC  3184   	fcall	_LED_PROCESS
 11508                           
 11509                           ;main.c: 226:             RELAY_PROCESS(9);
 11510  049C  3009               	movlw	9
 11511  049D  2C63               	goto	L7
 11512  049E                     l6344:	
 11513                           
 11514                           ;main.c: 231:         {;main.c: 232:             LED_PROCESS(10);
 11515  049E  300A               	movlw	10
 11516  049F  3186  26EC  3184   	fcall	_LED_PROCESS
 11517                           
 11518                           ;main.c: 233:             RELAY_PROCESS(10);
 11519  04A2  300A               	movlw	10
 11520  04A3  2C63               	goto	L7
 11521  04A4                     l6348:	
 11522                           
 11523                           ;main.c: 238:         {;main.c: 239:             LED_PROCESS(11);
 11524  04A4  300B               	movlw	11
 11525  04A5  3186  26EC  3184   	fcall	_LED_PROCESS
 11526                           
 11527                           ;main.c: 240:             RELAY_PROCESS(11);
 11528  04A8  300B               	movlw	11
 11529  04A9  2C63               	goto	L7
 11530  04AA                     l6352:	
 11531                           
 11532                           ;main.c: 245:         {;main.c: 246:             LED_PROCESS(12);
 11533  04AA  300C               	movlw	12
 11534  04AB  3186  26EC  3184   	fcall	_LED_PROCESS
 11535                           
 11536                           ;main.c: 247:             RELAY_PROCESS(12);
 11537  04AE  300C               	movlw	12
 11538  04AF  2C63               	goto	L7
 11539  04B0                     l6356:	
 11540                           
 11541                           ;main.c: 252:         {;main.c: 253:             LED_PROCESS(13);
 11542  04B0  300D               	movlw	13
 11543  04B1  3186  26EC  3184   	fcall	_LED_PROCESS
 11544                           
 11545                           ;main.c: 254:             RELAY_PROCESS(13);
 11546  04B4  300D               	movlw	13
 11547  04B5  2C63               	goto	L7
 11548  04B6                     l6360:	
 11549                           
 11550                           ;main.c: 259:         {;main.c: 260:             LED_PROCESS(14);
 11551  04B6  300E               	movlw	14
 11552  04B7  3186  26EC  3184   	fcall	_LED_PROCESS
 11553                           
 11554                           ;main.c: 261:             RELAY_PROCESS(14);
 11555  04BA  300E               	movlw	14
 11556  04BB  2C63               	goto	L7
 11557  04BC                     l6364:	
 11558                           
 11559                           ;main.c: 266:         {;main.c: 267:             LED_PROCESS(15);
 11560  04BC  300F               	movlw	15
 11561  04BD  3186  26EC  3184   	fcall	_LED_PROCESS
 11562                           
 11563                           ;main.c: 268:             RELAY_PROCESS(15);
 11564  04C0  300F               	movlw	15
 11565  04C1  2C63               	goto	L7
 11566  04C2                     l6368:	
 11567                           
 11568                           ;main.c: 273:         {;main.c: 274:             update_state();
 11569  04C2  3183  23B1         	fcall	_update_state
 11570                           
 11571                           ;main.c: 275:             break;
 11572  04C4  0008               	return
 11573  04C5                     l6374:	
 11574  04C5  0851               	movf	DATA_PROCESS@x,w
 11575  04C6  00CF               	movwf	??_DATA_PROCESS
 11576  04C7  01D0               	clrf	??_DATA_PROCESS+1
 11577                           
 11578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11579                           ; Switch size 1, requested type "simple"
 11580                           ; Number of cases is 1, Range of values is 0 to 0
 11581                           ; switch strategies available:
 11582                           ; Name         Instructions Cycles
 11583                           ; simple_byte            4     3 (average)
 11584                           ; direct_byte            8     6 (fixed)
 11585                           ; jumptable            260     6 (fixed)
 11586                           ;	Chosen strategy is simple_byte
 11587  04C8  0850               	movf	??_DATA_PROCESS+1,w
 11588  04C9  3A00               	xorlw	0	; case 0
 11589  04CA  1903               	skipnz
 11590  04CB  2CCD               	goto	l6784
 11591  04CC  2C65               	goto	l6306
 11592  04CD                     l6784:	
 11593                           
 11594                           ; Switch size 1, requested type "simple"
 11595                           ; Number of cases is 17, Range of values is 48 to 85
 11596                           ; switch strategies available:
 11597                           ; Name         Instructions Cycles
 11598                           ; simple_byte           52    27 (average)
 11599                           ; direct_byte           85     9 (fixed)
 11600                           ; jumptable            263     9 (fixed)
 11601                           ;	Chosen strategy is simple_byte
 11602  04CD  084F               	movf	??_DATA_PROCESS,w
 11603  04CE  3A30               	xorlw	48	; case 48
 11604  04CF  1903               	skipnz
 11605  04D0  2C5E               	goto	l6304
 11606  04D1  3A01               	xorlw	1	; case 49
 11607  04D2  1903               	skipnz
 11608  04D3  2C68               	goto	l6308
 11609  04D4  3A03               	xorlw	3	; case 50
 11610  04D5  1903               	skipnz
 11611  04D6  2C6E               	goto	l6312
 11612  04D7  3A01               	xorlw	1	; case 51
 11613  04D8  1903               	skipnz
 11614  04D9  2C74               	goto	l6316
 11615  04DA  3A07               	xorlw	7	; case 52
 11616  04DB  1903               	skipnz
 11617  04DC  2C7A               	goto	l6320
 11618  04DD  3A01               	xorlw	1	; case 53
 11619  04DE  1903               	skipnz
 11620  04DF  2C80               	goto	l6324
 11621  04E0  3A03               	xorlw	3	; case 54
 11622  04E1  1903               	skipnz
 11623  04E2  2C86               	goto	l6328
 11624  04E3  3A01               	xorlw	1	; case 55
 11625  04E4  1903               	skipnz
 11626  04E5  2C8C               	goto	l6332
 11627  04E6  3A0F               	xorlw	15	; case 56
 11628  04E7  1903               	skipnz
 11629  04E8  2C92               	goto	l6336
 11630  04E9  3A01               	xorlw	1	; case 57
 11631  04EA  1903               	skipnz
 11632  04EB  2C98               	goto	l6340
 11633  04EC  3A78               	xorlw	120	; case 65
 11634  04ED  1903               	skipnz
 11635  04EE  2C9E               	goto	l6344
 11636  04EF  3A03               	xorlw	3	; case 66
 11637  04F0  1903               	skipnz
 11638  04F1  2CA4               	goto	l6348
 11639  04F2  3A01               	xorlw	1	; case 67
 11640  04F3  1903               	skipnz
 11641  04F4  2CAA               	goto	l6352
 11642  04F5  3A07               	xorlw	7	; case 68
 11643  04F6  1903               	skipnz
 11644  04F7  2CB0               	goto	l6356
 11645  04F8  3A01               	xorlw	1	; case 69
 11646  04F9  1903               	skipnz
 11647  04FA  2CB6               	goto	l6360
 11648  04FB  3A02               	xorlw	2	; case 71
 11649  04FC  1903               	skipnz
 11650  04FD  2CBC               	goto	l6364
 11651  04FE  3A12               	xorlw	18	; case 85
 11652  04FF  1903               	skipnz
 11653  0500  2CC2               	goto	l6368
 11654  0501  2C65               	goto	l6306
 11655  0502  0008               	return
 11656  0503                     __end_of_DATA_PROCESS:	
 11657                           
 11658                           	psect	text76
 11659  03B1                     __ptext76:	
 11660 ;; *************** function _update_state *****************
 11661 ;; Defined at:
 11662 ;;		line 133 in file "main.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;		None
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;		None
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  1    wreg      void 
 11669 ;; Registers used:
 11670 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11676 ;;      Params:         0       0       0       0       0       0       0       0
 11677 ;;      Locals:         0       0       0       0       0       0       0       0
 11678 ;;      Temps:          0       0       0       0       0       0       0       0
 11679 ;;      Totals:         0       0       0       0       0       0       0       0
 11680 ;;Total ram usage:        0 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:   13
 11683 ;; This function calls:
 11684 ;;		_printf
 11685 ;; This function is called by:
 11686 ;;		_DATA_PROCESS
 11687 ;; This function uses a non-reentrant model
 11688 ;;
 11689                           
 11690                           
 11691                           ;psect for function _update_state
 11692  03B1                     _update_state:	
 11693                           
 11694                           ;main.c: 135:     switch(last_touch_status.full_status)
 11695                           
 11696                           ;incstack = 0
 11697                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11698  03B1  2C22               	goto	l6240
 11699  03B2                     l6206:	
 11700  03B2  300E               	movlw	low (STR_2| (0+32768))
 11701  03B3  00C7               	movwf	printf@fmt
 11702  03B4  3098               	movlw	high (STR_2| (0+32768))
 11703  03B5  00C8               	movwf	printf@fmt+1
 11704  03B6  3196  26E4         	fcall	_printf
 11705  03B8  0008               	return
 11706  03B9                     l6208:	
 11707  03B9  3013               	movlw	low (STR_3| (0+32768))
 11708  03BA  00C7               	movwf	printf@fmt
 11709  03BB  3098               	movlw	high (STR_3| (0+32768))
 11710  03BC  00C8               	movwf	printf@fmt+1
 11711  03BD  3196  26E4         	fcall	_printf
 11712  03BF  0008               	return
 11713  03C0                     l6210:	
 11714  03C0  3018               	movlw	low (STR_4| (0+32768))
 11715  03C1  00C7               	movwf	printf@fmt
 11716  03C2  3098               	movlw	high (STR_4| (0+32768))
 11717  03C3  00C8               	movwf	printf@fmt+1
 11718  03C4  3196  26E4         	fcall	_printf
 11719  03C6  0008               	return
 11720  03C7                     l6212:	
 11721  03C7  301D               	movlw	low (STR_5| (0+32768))
 11722  03C8  00C7               	movwf	printf@fmt
 11723  03C9  3098               	movlw	high (STR_5| (0+32768))
 11724  03CA  00C8               	movwf	printf@fmt+1
 11725  03CB  3196  26E4         	fcall	_printf
 11726  03CD  0008               	return
 11727  03CE                     l6214:	
 11728  03CE  3022               	movlw	low (STR_6| (0+32768))
 11729  03CF  00C7               	movwf	printf@fmt
 11730  03D0  3098               	movlw	high (STR_6| (0+32768))
 11731  03D1  00C8               	movwf	printf@fmt+1
 11732  03D2  3196  26E4         	fcall	_printf
 11733  03D4  0008               	return
 11734  03D5                     l6216:	
 11735  03D5  3027               	movlw	low (STR_7| (0+32768))
 11736  03D6  00C7               	movwf	printf@fmt
 11737  03D7  3098               	movlw	high (STR_7| (0+32768))
 11738  03D8  00C8               	movwf	printf@fmt+1
 11739  03D9  3196  26E4         	fcall	_printf
 11740  03DB  0008               	return
 11741  03DC                     l6218:	
 11742  03DC  302C               	movlw	low (STR_8| (0+32768))
 11743  03DD  00C7               	movwf	printf@fmt
 11744  03DE  3098               	movlw	high (STR_8| (0+32768))
 11745  03DF  00C8               	movwf	printf@fmt+1
 11746  03E0  3196  26E4         	fcall	_printf
 11747  03E2  0008               	return
 11748  03E3                     l6220:	
 11749  03E3  3031               	movlw	low (STR_9| (0+32768))
 11750  03E4  00C7               	movwf	printf@fmt
 11751  03E5  3098               	movlw	high (STR_9| (0+32768))
 11752  03E6  00C8               	movwf	printf@fmt+1
 11753  03E7  3196  26E4         	fcall	_printf
 11754  03E9  0008               	return
 11755  03EA                     l6222:	
 11756  03EA  3036               	movlw	low (STR_10| (0+32768))
 11757  03EB  00C7               	movwf	printf@fmt
 11758  03EC  3098               	movlw	high (STR_10| (0+32768))
 11759  03ED  00C8               	movwf	printf@fmt+1
 11760  03EE  3196  26E4         	fcall	_printf
 11761  03F0  0008               	return
 11762  03F1                     l6224:	
 11763  03F1  303B               	movlw	low (STR_11| (0+32768))
 11764  03F2  00C7               	movwf	printf@fmt
 11765  03F3  3098               	movlw	high (STR_11| (0+32768))
 11766  03F4  00C8               	movwf	printf@fmt+1
 11767  03F5  3196  26E4         	fcall	_printf
 11768  03F7  0008               	return
 11769  03F8                     l6226:	
 11770  03F8  3040               	movlw	low (STR_12| (0+32768))
 11771  03F9  00C7               	movwf	printf@fmt
 11772  03FA  3098               	movlw	high (STR_12| (0+32768))
 11773  03FB  00C8               	movwf	printf@fmt+1
 11774  03FC  3196  26E4         	fcall	_printf
 11775  03FE  0008               	return
 11776  03FF                     l6228:	
 11777  03FF  3045               	movlw	low (STR_13| (0+32768))
 11778  0400  00C7               	movwf	printf@fmt
 11779  0401  3098               	movlw	high (STR_13| (0+32768))
 11780  0402  00C8               	movwf	printf@fmt+1
 11781  0403  3196  26E4         	fcall	_printf
 11782  0405  0008               	return
 11783  0406                     l6230:	
 11784  0406  304A               	movlw	low (STR_14| (0+32768))
 11785  0407  00C7               	movwf	printf@fmt
 11786  0408  3098               	movlw	high (STR_14| (0+32768))
 11787  0409  00C8               	movwf	printf@fmt+1
 11788  040A  3196  26E4         	fcall	_printf
 11789  040C  0008               	return
 11790  040D                     l6232:	
 11791  040D  304F               	movlw	low (STR_15| (0+32768))
 11792  040E  00C7               	movwf	printf@fmt
 11793  040F  3098               	movlw	high (STR_15| (0+32768))
 11794  0410  00C8               	movwf	printf@fmt+1
 11795  0411  3196  26E4         	fcall	_printf
 11796  0413  0008               	return
 11797  0414                     l6234:	
 11798  0414  3054               	movlw	low (STR_16| (0+32768))
 11799  0415  00C7               	movwf	printf@fmt
 11800  0416  3098               	movlw	high (STR_16| (0+32768))
 11801  0417  00C8               	movwf	printf@fmt+1
 11802  0418  3196  26E4         	fcall	_printf
 11803  041A  0008               	return
 11804  041B                     l6236:	
 11805  041B  3059               	movlw	low (STR_17| (0+32768))
 11806  041C  00C7               	movwf	printf@fmt
 11807  041D  3098               	movlw	high (STR_17| (0+32768))
 11808  041E  00C8               	movwf	printf@fmt+1
 11809  041F  3196  26E4         	fcall	_printf
 11810  0421  0008               	return
 11811  0422                     l6240:	
 11812                           
 11813                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11814                           ; Switch size 1, requested type "simple"
 11815                           ; Number of cases is 1, Range of values is 0 to 0
 11816                           ; switch strategies available:
 11817                           ; Name         Instructions Cycles
 11818                           ; simple_byte            4     3 (average)
 11819                           ; direct_byte            8     6 (fixed)
 11820                           ; jumptable            260     6 (fixed)
 11821                           ;	Chosen strategy is simple_byte
 11822  0422  0020               	movlb	0	; select bank0
 11823  0423  085D               	movf	_last_touch_status+1,w
 11824  0424  3A00               	xorlw	0	; case 0
 11825  0425  1903               	skipnz
 11826  0426  2C28               	goto	l6786
 11827  0427  2C5A               	goto	l321
 11828  0428                     l6786:	
 11829                           
 11830                           ; Switch size 1, requested type "simple"
 11831                           ; Number of cases is 16, Range of values is 0 to 15
 11832                           ; switch strategies available:
 11833                           ; Name         Instructions Cycles
 11834                           ; direct_byte           38     6 (fixed)
 11835                           ; simple_byte           49    25 (average)
 11836                           ; jumptable            260     6 (fixed)
 11837                           ;	Chosen strategy is simple_byte
 11838  0428  085C               	movf	_last_touch_status,w
 11839  0429  3A00               	xorlw	0	; case 0
 11840  042A  1903               	skipnz
 11841  042B  2BB2               	goto	l6206
 11842  042C  3A01               	xorlw	1	; case 1
 11843  042D  1903               	skipnz
 11844  042E  2BB9               	goto	l6208
 11845  042F  3A03               	xorlw	3	; case 2
 11846  0430  1903               	skipnz
 11847  0431  2BC0               	goto	l6210
 11848  0432  3A01               	xorlw	1	; case 3
 11849  0433  1903               	skipnz
 11850  0434  2BC7               	goto	l6212
 11851  0435  3A07               	xorlw	7	; case 4
 11852  0436  1903               	skipnz
 11853  0437  2BCE               	goto	l6214
 11854  0438  3A01               	xorlw	1	; case 5
 11855  0439  1903               	skipnz
 11856  043A  2BD5               	goto	l6216
 11857  043B  3A03               	xorlw	3	; case 6
 11858  043C  1903               	skipnz
 11859  043D  2BDC               	goto	l6218
 11860  043E  3A01               	xorlw	1	; case 7
 11861  043F  1903               	skipnz
 11862  0440  2BE3               	goto	l6220
 11863  0441  3A0F               	xorlw	15	; case 8
 11864  0442  1903               	skipnz
 11865  0443  2BEA               	goto	l6222
 11866  0444  3A01               	xorlw	1	; case 9
 11867  0445  1903               	skipnz
 11868  0446  2BF1               	goto	l6224
 11869  0447  3A03               	xorlw	3	; case 10
 11870  0448  1903               	skipnz
 11871  0449  2BF8               	goto	l6226
 11872  044A  3A01               	xorlw	1	; case 11
 11873  044B  1903               	skipnz
 11874  044C  2BFF               	goto	l6228
 11875  044D  3A07               	xorlw	7	; case 12
 11876  044E  1903               	skipnz
 11877  044F  2C06               	goto	l6230
 11878  0450  3A01               	xorlw	1	; case 13
 11879  0451  1903               	skipnz
 11880  0452  2C0D               	goto	l6232
 11881  0453  3A03               	xorlw	3	; case 14
 11882  0454  1903               	skipnz
 11883  0455  2C14               	goto	l6234
 11884  0456  3A01               	xorlw	1	; case 15
 11885  0457  1903               	skipnz
 11886  0458  2C1B               	goto	l6236
 11887  0459  2C5A               	goto	l321
 11888  045A                     l321:	
 11889  045A  0008               	return
 11890  045B                     __end_of_update_state:	
 11891                           
 11892                           	psect	text77
 11893  16E4                     __ptext77:	
 11894 ;; *************** function _printf *****************
 11895 ;; Defined at:
 11896 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
 11897 ;; Parameters:    Size  Location     Type
 11898 ;;  fmt             2   39[BANK0 ] PTR const unsigned char 
 11899 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
 11900 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
 11901 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
 11902 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 11903 ;;		 -> STR_2(5), STR_1(9), 
 11904 ;; Auto vars:     Size  Location     Type
 11905 ;;  ret             2    0        int 
 11906 ;;  ap              1   46[BANK0 ] PTR void [1]
 11907 ;;		 -> ?_printf(2), 
 11908 ;; Return value:  Size  Location     Type
 11909 ;;                  2   39[BANK0 ] int 
 11910 ;; Registers used:
 11911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11912 ;; Tracked objects:
 11913 ;;		On entry : 0/0
 11914 ;;		On exit  : 0/0
 11915 ;;		Unchanged: 0/0
 11916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11917 ;;      Params:         0       4       0       0       0       0       0       0
 11918 ;;      Locals:         0       3       0       0       0       0       0       0
 11919 ;;      Temps:          0       1       0       0       0       0       0       0
 11920 ;;      Totals:         0       8       0       0       0       0       0       0
 11921 ;;Total ram usage:        8 bytes
 11922 ;; Hardware stack levels used:    1
 11923 ;; Hardware stack levels required when called:   12
 11924 ;; This function calls:
 11925 ;;		_vfprintf
 11926 ;; This function is called by:
 11927 ;;		_main
 11928 ;;		_update_state
 11929 ;;		_check_message
 11930 ;; This function uses a non-reentrant model
 11931 ;;
 11932                           
 11933                           
 11934                           ;psect for function _printf
 11935  16E4                     _printf:	
 11936                           
 11937                           ;incstack = 0
 11938                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11939  16E4  3049               	movlw	(low ((?_printf| 0+2)))& (0+255)
 11940  16E5  0020               	movlb	0	; select bank0
 11941  16E6  00CB               	movwf	??_printf
 11942  16E7  084B               	movf	??_printf,w
 11943  16E8  00CE               	movwf	printf@ap
 11944  16E9  0848               	movf	printf@fmt+1,w
 11945  16EA  00C0               	movwf	vfprintf@fmt+1
 11946  16EB  0847               	movf	printf@fmt,w
 11947  16EC  00BF               	movwf	vfprintf@fmt
 11948  16ED  304E               	movlw	(low (printf@ap| 0))& (0+255)
 11949  16EE  00CB               	movwf	??_printf
 11950  16EF  084B               	movf	??_printf,w
 11951  16F0  00C1               	movwf	vfprintf@ap
 11952  16F1  3000               	movlw	0
 11953  16F2  318A  223D         	fcall	_vfprintf
 11954  16F4  0008               	return
 11955  16F5                     __end_of_printf:	
 11956                           
 11957                           	psect	text78
 11958  0A3D                     __ptext78:	
 11959 ;; *************** function _vfprintf *****************
 11960 ;; Defined at:
 11961 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11962 ;; Parameters:    Size  Location     Type
 11963 ;;  fp              1    wreg     PTR struct _IO_FILE
 11964 ;;		 -> NULL(0), 
 11965 ;;  fmt             2   31[BANK0 ] PTR const unsigned char 
 11966 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
 11967 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
 11968 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
 11969 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 11970 ;;		 -> STR_2(5), STR_1(9), 
 11971 ;;  ap              1   33[BANK0 ] PTR PTR void 
 11972 ;;		 -> printf@ap(1), 
 11973 ;; Auto vars:     Size  Location     Type
 11974 ;;  fp              1   36[BANK0 ] PTR struct _IO_FILE
 11975 ;;		 -> NULL(0), 
 11976 ;;  cfmt            2   37[BANK0 ] PTR unsigned char 
 11977 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
 11978 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
 11979 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
 11980 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 11981 ;;		 -> STR_2(5), STR_1(9), 
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  2   31[BANK0 ] int 
 11984 ;; Registers used:
 11985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11991 ;;      Params:         0       3       0       0       0       0       0       0
 11992 ;;      Locals:         0       3       0       0       0       0       0       0
 11993 ;;      Temps:          0       2       0       0       0       0       0       0
 11994 ;;      Totals:         0       8       0       0       0       0       0       0
 11995 ;;Total ram usage:        8 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:   11
 11998 ;; This function calls:
 11999 ;;		_vfpfcnvrt
 12000 ;; This function is called by:
 12001 ;;		_printf
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           
 12006                           ;psect for function _vfprintf
 12007  0A3D                     _vfprintf:	
 12008                           
 12009                           ;incstack = 0
 12010                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12011                           ;vfprintf@fp stored from wreg
 12012  0A3D  0020               	movlb	0	; select bank0
 12013  0A3E  00C4               	movwf	vfprintf@fp
 12014                           
 12015                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 12016  0A3F  0840               	movf	vfprintf@fmt+1,w
 12017  0A40  00C6               	movwf	vfprintf@cfmt+1
 12018  0A41  083F               	movf	vfprintf@fmt,w
 12019  0A42  00C5               	movwf	vfprintf@cfmt
 12020                           
 12021                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 12022  0A43  0021               	movlb	1	; select bank1
 12023  0A44  01DE               	clrf	_nout^(0+128)
 12024  0A45  01DF               	clrf	(_nout+1)^(0+128)
 12025  0A46                     l6104:	
 12026                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12027                           
 12028                           
 12029                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12030  0A46  0020               	movlb	0	; select bank0
 12031  0A47  0845               	movf	vfprintf@cfmt,w
 12032  0A48  0084               	movwf	4
 12033  0A49  0846               	movf	vfprintf@cfmt+1,w
 12034  0A4A  0085               	movwf	5
 12035  0A4B  0012               	moviw fsr0++
 12036  0A4C  1903               	btfsc	3,2
 12037  0A4D  2A63               	goto	l6106
 12038                           
 12039                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 12040  0A4E  3045               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 12041  0A4F  00C2               	movwf	??_vfprintf
 12042  0A50  0842               	movf	??_vfprintf,w
 12043  0A51  00B6               	movwf	vfpfcnvrt@fmt
 12044  0A52  0841               	movf	vfprintf@ap,w
 12045  0A53  00C3               	movwf	??_vfprintf+1
 12046  0A54  0843               	movf	??_vfprintf+1,w
 12047  0A55  00B7               	movwf	vfpfcnvrt@ap
 12048  0A56  0844               	movf	vfprintf@fp,w
 12049  0A57  3185  2503  318A   	fcall	_vfpfcnvrt
 12050  0A5A  0020               	movlb	0	; select bank0
 12051  0A5B  0836               	movf	?_vfpfcnvrt,w
 12052  0A5C  0021               	movlb	1	; select bank1
 12053  0A5D  07DE               	addwf	_nout^(0+128),f
 12054  0A5E  0020               	movlb	0	; select bank0
 12055  0A5F  0837               	movf	?_vfpfcnvrt+1,w
 12056  0A60  0021               	movlb	1	; select bank1
 12057  0A61  3DDF               	addwfc	(_nout+1)^(0+128),f
 12058  0A62  2A46               	goto	l6104
 12059  0A63                     l6106:	
 12060                           
 12061                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 12062  0A63  0021               	movlb	1	; select bank1
 12063  0A64  085F               	movf	(_nout+1)^(0+128),w
 12064  0A65  0020               	movlb	0	; select bank0
 12065  0A66  00C0               	movwf	?_vfprintf+1
 12066  0A67  0021               	movlb	1	; select bank1
 12067  0A68  085E               	movf	_nout^(0+128),w
 12068  0A69  0020               	movlb	0	; select bank0
 12069  0A6A  00BF               	movwf	?_vfprintf
 12070  0A6B  0008               	return
 12071  0A6C                     __end_of_vfprintf:	
 12072                           
 12073                           	psect	text79
 12074  0503                     __ptext79:	
 12075 ;; *************** function _vfpfcnvrt *****************
 12076 ;; Defined at:
 12077 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12078 ;; Parameters:    Size  Location     Type
 12079 ;;  fp              1    wreg     PTR struct _IO_FILE
 12080 ;;		 -> NULL(0), 
 12081 ;;  fmt             1   22[BANK0 ] PTR PTR unsigned char 
 12082 ;;		 -> vfprintf@cfmt(2), 
 12083 ;;  ap              1   23[BANK0 ] PTR PTR void 
 12084 ;;		 -> printf@ap(1), 
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;  fp              1   30[BANK0 ] PTR struct _IO_FILE
 12087 ;;		 -> NULL(0), 
 12088 ;;  llu             8    0        unsigned long long 
 12089 ;;  ll              8    0        long long 
 12090 ;;  f               4    0        long long 
 12091 ;;  ct              3    0        unsigned char [3]
 12092 ;;  vp              2    0        PTR void 
 12093 ;;  i               2    0        int 
 12094 ;;  done            2    0        int 
 12095 ;;  cp              2    0        PTR unsigned char 
 12096 ;;  c               1   29[BANK0 ] unsigned char 
 12097 ;; Return value:  Size  Location     Type
 12098 ;;                  2   22[BANK0 ] int 
 12099 ;; Registers used:
 12100 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12101 ;; Tracked objects:
 12102 ;;		On entry : 0/0
 12103 ;;		On exit  : 0/0
 12104 ;;		Unchanged: 0/0
 12105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12106 ;;      Params:         0       2       0       0       0       0       0       0
 12107 ;;      Locals:         0       2       0       0       0       0       0       0
 12108 ;;      Temps:          0       5       0       0       0       0       0       0
 12109 ;;      Totals:         0       9       0       0       0       0       0       0
 12110 ;;Total ram usage:        9 bytes
 12111 ;; Hardware stack levels used:    1
 12112 ;; Hardware stack levels required when called:   10
 12113 ;; This function calls:
 12114 ;;		_ctoa
 12115 ;;		_fputc
 12116 ;; This function is called by:
 12117 ;;		_vfprintf
 12118 ;; This function uses a non-reentrant model
 12119 ;;
 12120                           
 12121                           
 12122                           ;psect for function _vfpfcnvrt
 12123  0503                     _vfpfcnvrt:	
 12124                           
 12125                           ;incstack = 0
 12126                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12127                           ;vfpfcnvrt@fp stored from wreg
 12128  0503  0020               	movlb	0	; select bank0
 12129  0504  00BE               	movwf	vfpfcnvrt@fp
 12130                           
 12131                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 12132  0505  0836               	movf	vfpfcnvrt@fmt,w
 12133  0506  0086               	movwf	6
 12134  0507  0187               	clrf	7
 12135  0508  3F40               	moviw [0]fsr1
 12136  0509  00B8               	movwf	??_vfpfcnvrt
 12137  050A  3F41               	moviw [1]fsr1
 12138  050B  00B9               	movwf	??_vfpfcnvrt+1
 12139  050C  0838               	movf	??_vfpfcnvrt,w
 12140  050D  0084               	movwf	4
 12141  050E  0839               	movf	??_vfpfcnvrt+1,w
 12142  050F  0085               	movwf	5
 12143  0510  0012               	moviw fsr0++
 12144  0511  3A25               	xorlw	37
 12145  0512  1D03               	btfss	3,2
 12146  0513  2D88               	goto	l5964
 12147                           
 12148                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 12149  0514  0836               	movf	vfpfcnvrt@fmt,w
 12150  0515  0086               	movwf	6
 12151  0516  0187               	clrf	7
 12152  0517  3001               	movlw	1
 12153  0518  0781               	addwf	1,f
 12154  0519  3141               	addfsr 1,1
 12155  051A  1803               	skipnc
 12156  051B  0A81               	incf	1,f
 12157                           
 12158                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 12159  051C  01D6               	clrf	_width
 12160  051D  01D7               	clrf	_width+1
 12161  051E  01D8               	clrf	_flags
 12162  051F  01D9               	clrf	_flags+1
 12163                           
 12164                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 12165  0520  30FF               	movlw	255
 12166  0521  0021               	movlb	1	; select bank1
 12167  0522  00E0               	movwf	_prec^(0+128)
 12168  0523  30FF               	movlw	255
 12169  0524  00E1               	movwf	(_prec^(0+128)+1)
 12170                           
 12171                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
 12172  0525  0020               	movlb	0	; select bank0
 12173  0526  0836               	movf	vfpfcnvrt@fmt,w
 12174  0527  0086               	movwf	6
 12175  0528  0187               	clrf	7
 12176  0529  3F40               	moviw [0]fsr1
 12177  052A  00B8               	movwf	??_vfpfcnvrt
 12178  052B  3F41               	moviw [1]fsr1
 12179  052C  00B9               	movwf	??_vfpfcnvrt+1
 12180  052D  0838               	movf	??_vfpfcnvrt,w
 12181  052E  0084               	movwf	4
 12182  052F  0839               	movf	??_vfpfcnvrt+1,w
 12183  0530  0085               	movwf	5
 12184  0531  0012               	moviw fsr0++
 12185  0532  3A63               	xorlw	99
 12186  0533  1D03               	btfss	3,2
 12187  0534  2D56               	goto	l5948
 12188                           
 12189                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
 12190  0535  0836               	movf	vfpfcnvrt@fmt,w
 12191  0536  0086               	movwf	6
 12192  0537  0187               	clrf	7
 12193  0538  3001               	movlw	1
 12194  0539  0781               	addwf	1,f
 12195  053A  3141               	addfsr 1,1
 12196  053B  1803               	skipnc
 12197  053C  0A81               	incf	1,f
 12198                           
 12199                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
 12200  053D  0837               	movf	vfpfcnvrt@ap,w
 12201  053E  0086               	movwf	6
 12202  053F  0187               	clrf	7
 12203  0540  0801               	movf	1,w
 12204  0541  0084               	movwf	4
 12205  0542  0185               	clrf	5
 12206  0543  3002               	movlw	2
 12207  0544  0781               	addwf	1,f
 12208  0545  0800               	movf	0,w
 12209  0546  00B8               	movwf	??_vfpfcnvrt
 12210  0547  0838               	movf	??_vfpfcnvrt,w
 12211  0548  00BD               	movwf	vfpfcnvrt@c
 12212                           
 12213                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
 12214  0549  083D               	movf	vfpfcnvrt@c,w
 12215  054A  00B8               	movwf	??_vfpfcnvrt
 12216  054B  0838               	movf	??_vfpfcnvrt,w
 12217  054C  00B0               	movwf	ctoa@c
 12218  054D  083E               	movf	vfpfcnvrt@fp,w
 12219  054E  3189  2135         	fcall	_ctoa
 12220  0550  0020               	movlb	0	; select bank0
 12221  0551  0831               	movf	?_ctoa+1,w
 12222  0552  00B7               	movwf	?_vfpfcnvrt+1
 12223  0553  0830               	movf	?_ctoa,w
 12224  0554  00B6               	movwf	?_vfpfcnvrt
 12225  0555  0008               	return
 12226  0556                     l5948:	
 12227                           
 12228                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 12229  0556  0836               	movf	vfpfcnvrt@fmt,w
 12230  0557  0086               	movwf	6
 12231  0558  0187               	clrf	7
 12232  0559  3F40               	moviw [0]fsr1
 12233  055A  00B8               	movwf	??_vfpfcnvrt
 12234  055B  3F41               	moviw [1]fsr1
 12235  055C  00B9               	movwf	??_vfpfcnvrt+1
 12236  055D  0838               	movf	??_vfpfcnvrt,w
 12237  055E  0084               	movwf	4
 12238  055F  0839               	movf	??_vfpfcnvrt+1,w
 12239  0560  0085               	movwf	5
 12240  0561  0012               	moviw fsr0++
 12241  0562  3A25               	xorlw	37
 12242  0563  1D03               	btfss	3,2
 12243  0564  2D7D               	goto	l5958
 12244                           
 12245                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 12246  0565  0836               	movf	vfpfcnvrt@fmt,w
 12247  0566  0086               	movwf	6
 12248  0567  0187               	clrf	7
 12249  0568  3001               	movlw	1
 12250  0569  0781               	addwf	1,f
 12251  056A  3141               	addfsr 1,1
 12252  056B  1803               	skipnc
 12253  056C  0A81               	incf	1,f
 12254                           
 12255                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 12256  056D  3025               	movlw	37
 12257  056E  00F3               	movwf	fputc@c
 12258  056F  3000               	movlw	0
 12259  0570  00F4               	movwf	fputc@c+1
 12260  0571  083E               	movf	vfpfcnvrt@fp,w
 12261  0572  00B8               	movwf	??_vfpfcnvrt
 12262  0573  0838               	movf	??_vfpfcnvrt,w
 12263  0574  00F5               	movwf	fputc@fp
 12264  0575  318A  22CE         	fcall	_fputc
 12265  0577                     l5954:	
 12266                           
 12267                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 12268  0577  3001               	movlw	1
 12269  0578  0020               	movlb	0	; select bank0
 12270  0579  00B6               	movwf	?_vfpfcnvrt
 12271  057A  3000               	movlw	0
 12272  057B  00B7               	movwf	?_vfpfcnvrt+1
 12273  057C  0008               	return
 12274  057D                     l5958:	
 12275                           
 12276                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 12277  057D  0836               	movf	vfpfcnvrt@fmt,w
 12278  057E  0086               	movwf	6
 12279  057F  0187               	clrf	7
 12280  0580  3001               	movlw	1
 12281  0581  0781               	addwf	1,f
 12282  0582  3141               	addfsr 1,1
 12283  0583  1803               	skipnc
 12284  0584  0A81               	incf	1,f
 12285                           
 12286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 12287  0585  01B6               	clrf	?_vfpfcnvrt
 12288  0586  01B7               	clrf	?_vfpfcnvrt+1
 12289  0587  0008               	return
 12290  0588                     l5964:	
 12291                           
 12292                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 12293  0588  0836               	movf	vfpfcnvrt@fmt,w
 12294  0589  0086               	movwf	6
 12295  058A  0187               	clrf	7
 12296  058B  3F40               	moviw [0]fsr1
 12297  058C  00B8               	movwf	??_vfpfcnvrt
 12298  058D  3F41               	moviw [1]fsr1
 12299  058E  00B9               	movwf	??_vfpfcnvrt+1
 12300  058F  0838               	movf	??_vfpfcnvrt,w
 12301  0590  0084               	movwf	4
 12302  0591  0839               	movf	??_vfpfcnvrt+1,w
 12303  0592  0085               	movwf	5
 12304  0593  0800               	movf	0,w	;code access
 12305  0594  00BA               	movwf	??_vfpfcnvrt+2
 12306  0595  01BB               	clrf	??_vfpfcnvrt+3
 12307  0596  083A               	movf	??_vfpfcnvrt+2,w
 12308  0597  00F3               	movwf	fputc@c
 12309  0598  083B               	movf	??_vfpfcnvrt+3,w
 12310  0599  00F4               	movwf	fputc@c+1
 12311  059A  083E               	movf	vfpfcnvrt@fp,w
 12312  059B  00BC               	movwf	??_vfpfcnvrt+4
 12313  059C  083C               	movf	??_vfpfcnvrt+4,w
 12314  059D  00F5               	movwf	fputc@fp
 12315  059E  318A  22CE  3185   	fcall	_fputc
 12316                           
 12317                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 12318  05A1  0020               	movlb	0	; select bank0
 12319  05A2  0836               	movf	vfpfcnvrt@fmt,w
 12320  05A3  0086               	movwf	6
 12321  05A4  0187               	clrf	7
 12322  05A5  3001               	movlw	1
 12323  05A6  0781               	addwf	1,f
 12324  05A7  3141               	addfsr 1,1
 12325  05A8  1803               	skipnc
 12326  05A9  0A81               	incf	1,f
 12327  05AA  2D77               	goto	l5954
 12328  05AB                     __end_of_vfpfcnvrt:	
 12329                           
 12330                           	psect	text80
 12331  0935                     __ptext80:	
 12332 ;; *************** function _ctoa *****************
 12333 ;; Defined at:
 12334 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12335 ;; Parameters:    Size  Location     Type
 12336 ;;  fp              1    wreg     PTR struct _IO_FILE
 12337 ;;		 -> NULL(0), 
 12338 ;;  c               1   16[BANK0 ] unsigned char 
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;  fp              1   21[BANK0 ] PTR struct _IO_FILE
 12341 ;;		 -> NULL(0), 
 12342 ;;  w               2   19[BANK0 ] int 
 12343 ;;  l               2    0        int 
 12344 ;; Return value:  Size  Location     Type
 12345 ;;                  2   16[BANK0 ] int 
 12346 ;; Registers used:
 12347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12348 ;; Tracked objects:
 12349 ;;		On entry : 0/0
 12350 ;;		On exit  : 0/0
 12351 ;;		Unchanged: 0/0
 12352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12353 ;;      Params:         0       2       0       0       0       0       0       0
 12354 ;;      Locals:         0       3       0       0       0       0       0       0
 12355 ;;      Temps:          0       1       0       0       0       0       0       0
 12356 ;;      Totals:         0       6       0       0       0       0       0       0
 12357 ;;Total ram usage:        6 bytes
 12358 ;; Hardware stack levels used:    1
 12359 ;; Hardware stack levels required when called:    9
 12360 ;; This function calls:
 12361 ;;		_pad
 12362 ;; This function is called by:
 12363 ;;		_vfpfcnvrt
 12364 ;; This function uses a non-reentrant model
 12365 ;;
 12366                           
 12367                           
 12368                           ;psect for function _ctoa
 12369  0935                     _ctoa:	
 12370                           
 12371                           ;incstack = 0
 12372                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12373                           ;ctoa@fp stored from wreg
 12374  0935  0020               	movlb	0	; select bank0
 12375  0936  00B5               	movwf	ctoa@fp
 12376                           
 12377                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
 12378  0937  0856               	movf	_width,w
 12379  0938  0457               	iorwf	_width+1,w
 12380  0939  1D03               	btfss	3,2
 12381  093A  2940               	goto	l5848
 12382  093B  0857               	movf	_width+1,w
 12383  093C  00B4               	movwf	ctoa@w+1
 12384  093D  0856               	movf	_width,w
 12385  093E  00B3               	movwf	ctoa@w
 12386  093F  2946               	goto	l5850
 12387  0940                     l5848:	
 12388  0940  0856               	movf	_width,w
 12389  0941  3EFF               	addlw	255
 12390  0942  00B3               	movwf	ctoa@w
 12391  0943  30FF               	movlw	255
 12392  0944  3D57               	addwfc	_width+1,w
 12393  0945  00B4               	movwf	ctoa@w+1
 12394  0946                     l5850:	
 12395                           
 12396                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
 12397  0946  0830               	movf	ctoa@c,w
 12398  0947  00B2               	movwf	??_ctoa
 12399  0948  0832               	movf	??_ctoa,w
 12400  0949  0023               	movlb	3	; select bank3
 12401  094A  00A0               	movwf	_dbuf^(0+384)
 12402                           
 12403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
 12404  094B  01A1               	clrf	(_dbuf^(0+384)+1)
 12405                           
 12406                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
 12407  094C  30A0               	movlw	(low (_dbuf| (0+256)))& (0+255)
 12408  094D  0020               	movlb	0	; select bank0
 12409  094E  00B2               	movwf	??_ctoa
 12410  094F  0832               	movf	??_ctoa,w
 12411  0950  00A7               	movwf	pad@buf
 12412  0951  0834               	movf	ctoa@w+1,w
 12413  0952  00A9               	movwf	pad@p+1
 12414  0953  0833               	movf	ctoa@w,w
 12415  0954  00A8               	movwf	pad@p
 12416  0955  0835               	movf	ctoa@fp,w
 12417  0956  318B  23BA         	fcall	_pad
 12418  0958  0020               	movlb	0	; select bank0
 12419  0959  0828               	movf	?_pad+1,w
 12420  095A  00B1               	movwf	?_ctoa+1
 12421  095B  0827               	movf	?_pad,w
 12422  095C  00B0               	movwf	?_ctoa
 12423  095D  0008               	return
 12424  095E                     __end_of_ctoa:	
 12425                           
 12426                           	psect	text81
 12427  0BBA                     __ptext81:	
 12428 ;; *************** function _pad *****************
 12429 ;; Defined at:
 12430 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12431 ;; Parameters:    Size  Location     Type
 12432 ;;  fp              1    wreg     PTR struct _IO_FILE
 12433 ;;		 -> NULL(0), 
 12434 ;;  buf             1    7[BANK0 ] PTR unsigned char 
 12435 ;;		 -> dbuf(32), 
 12436 ;;  p               2    8[BANK0 ] int 
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;  fp              1   15[BANK0 ] PTR struct _IO_FILE
 12439 ;;		 -> NULL(0), 
 12440 ;;  w               2   13[BANK0 ] int 
 12441 ;;  i               2   11[BANK0 ] int 
 12442 ;; Return value:  Size  Location     Type
 12443 ;;                  2    7[BANK0 ] int 
 12444 ;; Registers used:
 12445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12446 ;; Tracked objects:
 12447 ;;		On entry : 0/0
 12448 ;;		On exit  : 0/0
 12449 ;;		Unchanged: 0/0
 12450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12451 ;;      Params:         0       3       0       0       0       0       0       0
 12452 ;;      Locals:         0       5       0       0       0       0       0       0
 12453 ;;      Temps:          0       1       0       0       0       0       0       0
 12454 ;;      Totals:         0       9       0       0       0       0       0       0
 12455 ;;Total ram usage:        9 bytes
 12456 ;; Hardware stack levels used:    1
 12457 ;; Hardware stack levels required when called:    8
 12458 ;; This function calls:
 12459 ;;		_fputc
 12460 ;;		_fputs
 12461 ;;		_strlen
 12462 ;; This function is called by:
 12463 ;;		_ctoa
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           
 12468                           ;psect for function _pad
 12469  0BBA                     _pad:	
 12470                           
 12471                           ;incstack = 0
 12472                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12473                           ;pad@fp stored from wreg
 12474  0BBA  0020               	movlb	0	; select bank0
 12475  0BBB  00AF               	movwf	pad@fp
 12476                           
 12477                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 12478  0BBC  1C58               	btfss	_flags,0
 12479  0BBD  2BC6               	goto	l5596
 12480                           
 12481                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 12482  0BBE  082F               	movf	pad@fp,w
 12483  0BBF  00AA               	movwf	??_pad
 12484  0BC0  082A               	movf	??_pad,w
 12485  0BC1  00FB               	movwf	fputs@fp
 12486  0BC2  0827               	movf	pad@buf,w
 12487  0BC3  3188  209B  318B   	fcall	_fputs
 12488  0BC6                     l5596:	
 12489                           
 12490                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 12491  0BC6  0020               	movlb	0	; select bank0
 12492  0BC7  1BA9               	btfsc	pad@p+1,7
 12493  0BC8  2BCE               	goto	l5600
 12494  0BC9  0829               	movf	pad@p+1,w
 12495  0BCA  00AE               	movwf	pad@w+1
 12496  0BCB  0828               	movf	pad@p,w
 12497  0BCC  00AD               	movwf	pad@w
 12498  0BCD  2BD0               	goto	l1460
 12499  0BCE                     l5600:	
 12500  0BCE  01AD               	clrf	pad@w
 12501  0BCF  01AE               	clrf	pad@w+1
 12502  0BD0                     l1460:	
 12503                           
 12504                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 12505  0BD0  01AB               	clrf	pad@i
 12506  0BD1  01AC               	clrf	pad@i+1
 12507  0BD2                     l5606:	
 12508                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 12509                           
 12510                           
 12511                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 12512  0BD2  082C               	movf	pad@i+1,w
 12513  0BD3  3A80               	xorlw	128
 12514  0BD4  00AA               	movwf	??_pad
 12515  0BD5  082E               	movf	pad@w+1,w
 12516  0BD6  3A80               	xorlw	128
 12517  0BD7  022A               	subwf	??_pad,w
 12518  0BD8  1D03               	skipz
 12519  0BD9  2BDC               	goto	u3965
 12520  0BDA  082D               	movf	pad@w,w
 12521  0BDB  022B               	subwf	pad@i,w
 12522  0BDC                     u3965:	
 12523  0BDC  1803               	btfsc	3,0
 12524  0BDD  2BF0               	goto	l1463
 12525                           
 12526                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 12527  0BDE  3020               	movlw	32
 12528  0BDF  00F3               	movwf	fputc@c
 12529  0BE0  3000               	movlw	0
 12530  0BE1  00F4               	movwf	fputc@c+1
 12531  0BE2  0020               	movlb	0	; select bank0
 12532  0BE3  082F               	movf	pad@fp,w
 12533  0BE4  00AA               	movwf	??_pad
 12534  0BE5  082A               	movf	??_pad,w
 12535  0BE6  00F5               	movwf	fputc@fp
 12536  0BE7  318A  22CE  318B   	fcall	_fputc
 12537                           
 12538                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 12539  0BEA  3001               	movlw	1
 12540  0BEB  0020               	movlb	0	; select bank0
 12541  0BEC  07AB               	addwf	pad@i,f
 12542  0BED  3000               	movlw	0
 12543  0BEE  3DAC               	addwfc	pad@i+1,f
 12544  0BEF  2BD2               	goto	l5606
 12545  0BF0                     l1463:	
 12546                           
 12547                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 12548  0BF0  0020               	movlb	0	; select bank0
 12549  0BF1  1858               	btfsc	_flags,0
 12550  0BF2  2BFB               	goto	l1464
 12551                           
 12552                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 12553  0BF3  082F               	movf	pad@fp,w
 12554  0BF4  00AA               	movwf	??_pad
 12555  0BF5  082A               	movf	??_pad,w
 12556  0BF6  00FB               	movwf	fputs@fp
 12557  0BF7  0827               	movf	pad@buf,w
 12558  0BF8  3188  209B  318B   	fcall	_fputs
 12559  0BFB                     l1464:	
 12560                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
 12561                           
 12562                           
 12563                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 12564  0BFB  0020               	movlb	0	; select bank0
 12565  0BFC  0827               	movf	pad@buf,w
 12566  0BFD  3197  27E8         	fcall	_strlen
 12567  0BFF  0020               	movlb	0	; select bank0
 12568  0C00  082D               	movf	pad@w,w
 12569  0C01  0771               	addwf	?_strlen,w
 12570  0C02  00A7               	movwf	?_pad
 12571  0C03  082E               	movf	pad@w+1,w
 12572  0C04  3D72               	addwfc	?_strlen+1,w
 12573  0C05  00A8               	movwf	?_pad+1
 12574  0C06  0008               	return
 12575  0C07                     __end_of_pad:	
 12576                           
 12577                           	psect	text82
 12578  17E8                     __ptext82:	
 12579 ;; *************** function _strlen *****************
 12580 ;; Defined at:
 12581 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;  s               1    wreg     PTR const unsigned char 
 12584 ;;		 -> dbuf(32), 
 12585 ;; Auto vars:     Size  Location     Type
 12586 ;;  s               1    5[COMMON] PTR const unsigned char 
 12587 ;;		 -> dbuf(32), 
 12588 ;;  a               1    4[COMMON] PTR const unsigned char 
 12589 ;;		 -> dbuf(32), 
 12590 ;; Return value:  Size  Location     Type
 12591 ;;                  2    1[COMMON] unsigned int 
 12592 ;; Registers used:
 12593 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12594 ;; Tracked objects:
 12595 ;;		On entry : 0/0
 12596 ;;		On exit  : 0/0
 12597 ;;		Unchanged: 0/0
 12598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12599 ;;      Params:         2       0       0       0       0       0       0       0
 12600 ;;      Locals:         2       0       0       0       0       0       0       0
 12601 ;;      Temps:          1       0       0       0       0       0       0       0
 12602 ;;      Totals:         5       0       0       0       0       0       0       0
 12603 ;;Total ram usage:        5 bytes
 12604 ;; Hardware stack levels used:    1
 12605 ;; Hardware stack levels required when called:    4
 12606 ;; This function calls:
 12607 ;;		Nothing
 12608 ;; This function is called by:
 12609 ;;		_pad
 12610 ;; This function uses a non-reentrant model
 12611 ;;
 12612                           
 12613                           
 12614                           ;psect for function _strlen
 12615  17E8                     _strlen:	
 12616                           
 12617                           ;incstack = 0
 12618                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 12619                           ;strlen@s stored from wreg
 12620  17E8  00F5               	movwf	strlen@s
 12621  17E9  0875               	movf	strlen@s,w
 12622  17EA  00F3               	movwf	??_strlen
 12623  17EB  0873               	movf	??_strlen,w
 12624  17EC  00F4               	movwf	strlen@a
 12625  17ED                     l3886:	
 12626  17ED  0875               	movf	strlen@s,w
 12627  17EE  0086               	movwf	6
 12628  17EF  3001               	movlw	1	; select bank2/3
 12629  17F0  0087               	movwf	7
 12630  17F1  0801               	movf	1,w
 12631  17F2  1903               	btfsc	3,2
 12632  17F3  2FF9               	goto	l3888
 12633  17F4  3001               	movlw	1
 12634  17F5  00F3               	movwf	??_strlen
 12635  17F6  0873               	movf	??_strlen,w
 12636  17F7  07F5               	addwf	strlen@s,f
 12637  17F8  2FED               	goto	l3886
 12638  17F9                     l3888:	
 12639  17F9  0874               	movf	strlen@a,w
 12640  17FA  0275               	subwf	strlen@s,w
 12641  17FB  00F1               	movwf	?_strlen
 12642  17FC  01F2               	clrf	?_strlen+1
 12643  17FD  1BF1               	btfsc	?_strlen,7
 12644  17FE  03F2               	decf	?_strlen+1,f
 12645  17FF  0008               	return
 12646  1800                     __end_of_strlen:	
 12647                           
 12648                           	psect	text83
 12649  089B                     __ptext83:	
 12650 ;; *************** function _fputs *****************
 12651 ;; Defined at:
 12652 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 12653 ;; Parameters:    Size  Location     Type
 12654 ;;  s               1    wreg     PTR const unsigned char 
 12655 ;;		 -> dbuf(32), 
 12656 ;;  fp              1   11[COMMON] PTR struct _IO_FILE
 12657 ;;		 -> NULL(0), 
 12658 ;; Auto vars:     Size  Location     Type
 12659 ;;  s               1    6[BANK0 ] PTR const unsigned char 
 12660 ;;		 -> dbuf(32), 
 12661 ;;  i               2    4[BANK0 ] int 
 12662 ;;  c               1    3[BANK0 ] unsigned char 
 12663 ;; Return value:  Size  Location     Type
 12664 ;;                  2   11[COMMON] int 
 12665 ;; Registers used:
 12666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12667 ;; Tracked objects:
 12668 ;;		On entry : 0/0
 12669 ;;		On exit  : 0/0
 12670 ;;		Unchanged: 0/0
 12671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12672 ;;      Params:         1       0       0       0       0       0       0       0
 12673 ;;      Locals:         0       4       0       0       0       0       0       0
 12674 ;;      Temps:          0       3       0       0       0       0       0       0
 12675 ;;      Totals:         1       7       0       0       0       0       0       0
 12676 ;;Total ram usage:        8 bytes
 12677 ;; Hardware stack levels used:    1
 12678 ;; Hardware stack levels required when called:    7
 12679 ;; This function calls:
 12680 ;;		_fputc
 12681 ;; This function is called by:
 12682 ;;		_pad
 12683 ;; This function uses a non-reentrant model
 12684 ;;
 12685                           
 12686                           
 12687                           ;psect for function _fputs
 12688  089B                     _fputs:	
 12689                           
 12690                           ;incstack = 0
 12691                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12692                           ;fputs@s stored from wreg
 12693  089B  0020               	movlb	0	; select bank0
 12694  089C  00A6               	movwf	fputs@s
 12695  089D  01A4               	clrf	fputs@i
 12696  089E  01A5               	clrf	fputs@i+1
 12697  089F                     l3880:	
 12698  089F  0824               	movf	fputs@i,w
 12699  08A0  0726               	addwf	fputs@s,w
 12700  08A1  00A0               	movwf	??_fputs
 12701  08A2  0820               	movf	??_fputs,w
 12702  08A3  0086               	movwf	6
 12703  08A4  3001               	movlw	1	; select bank2/3
 12704  08A5  0087               	movwf	7
 12705  08A6  0801               	movf	1,w
 12706  08A7  00A1               	movwf	??_fputs+1
 12707  08A8  0821               	movf	??_fputs+1,w
 12708  08A9  00A3               	movwf	fputs@c
 12709  08AA  0823               	movf	fputs@c,w
 12710  08AB  1903               	btfsc	3,2
 12711  08AC  0008               	return
 12712  08AD  0823               	movf	fputs@c,w
 12713  08AE  00A0               	movwf	??_fputs
 12714  08AF  01A1               	clrf	??_fputs+1
 12715  08B0  0820               	movf	??_fputs,w
 12716  08B1  00F3               	movwf	fputc@c
 12717  08B2  0821               	movf	??_fputs+1,w
 12718  08B3  00F4               	movwf	fputc@c+1
 12719  08B4  087B               	movf	fputs@fp,w
 12720  08B5  00A2               	movwf	??_fputs+2
 12721  08B6  0822               	movf	??_fputs+2,w
 12722  08B7  00F5               	movwf	fputc@fp
 12723  08B8  318A  22CE  3188   	fcall	_fputc
 12724  08BB  3001               	movlw	1
 12725  08BC  0020               	movlb	0	; select bank0
 12726  08BD  07A4               	addwf	fputs@i,f
 12727  08BE  3000               	movlw	0
 12728  08BF  3DA5               	addwfc	fputs@i+1,f
 12729  08C0  289F               	goto	l3880
 12730  08C1                     __end_of_fputs:	
 12731                           
 12732                           	psect	text84
 12733  0ACE                     __ptext84:	
 12734 ;; *************** function _fputc *****************
 12735 ;; Defined at:
 12736 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 12737 ;; Parameters:    Size  Location     Type
 12738 ;;  c               2    3[COMMON] int 
 12739 ;;  fp              1    5[COMMON] PTR struct _IO_FILE
 12740 ;;		 -> NULL(0), 
 12741 ;; Auto vars:     Size  Location     Type
 12742 ;;		None
 12743 ;; Return value:  Size  Location     Type
 12744 ;;                  2    3[COMMON] int 
 12745 ;; Registers used:
 12746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12747 ;; Tracked objects:
 12748 ;;		On entry : 0/0
 12749 ;;		On exit  : 0/0
 12750 ;;		Unchanged: 0/0
 12751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12752 ;;      Params:         3       0       0       0       0       0       0       0
 12753 ;;      Locals:         0       0       0       0       0       0       0       0
 12754 ;;      Temps:          5       0       0       0       0       0       0       0
 12755 ;;      Totals:         8       0       0       0       0       0       0       0
 12756 ;;Total ram usage:        8 bytes
 12757 ;; Hardware stack levels used:    1
 12758 ;; Hardware stack levels required when called:    6
 12759 ;; This function calls:
 12760 ;;		_putch
 12761 ;; This function is called by:
 12762 ;;		_pad
 12763 ;;		_vfpfcnvrt
 12764 ;;		_fputs
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           
 12769                           ;psect for function _fputc
 12770  0ACE                     _fputc:	
 12771                           
 12772                           ;incstack = 0
 12773                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12774  0ACE  0875               	movf	fputc@fp,w
 12775  0ACF  1D03               	btfss	3,2
 12776  0AD0  0875               	movf	fputc@fp,w
 12777  0AD1  1D03               	btfss	3,2
 12778  0AD2  2AD7               	goto	l3824
 12779  0AD3  0873               	movf	fputc@c,w
 12780  0AD4  3195  25E1         	fcall	_putch
 12781  0AD6  0008               	return
 12782  0AD7                     l3824:	
 12783  0AD7  0875               	movf	fputc@fp,w
 12784  0AD8  3E03               	addlw	3
 12785  0AD9  0086               	movwf	6
 12786  0ADA  0187               	clrf	7
 12787  0ADB  0016               	moviw fsr1++
 12788  0ADC  0401               	iorwf	1,w
 12789  0ADD  1903               	btfsc	3,2
 12790  0ADE  2AFA               	goto	l3828
 12791  0ADF  0875               	movf	fputc@fp,w
 12792  0AE0  3E03               	addlw	3
 12793  0AE1  0086               	movwf	6
 12794  0AE2  0187               	clrf	7
 12795  0AE3  3F40               	moviw [0]fsr1
 12796  0AE4  00F6               	movwf	??_fputc
 12797  0AE5  3F41               	moviw [1]fsr1
 12798  0AE6  00F7               	movwf	??_fputc+1
 12799  0AE7  0A75               	incf	fputc@fp,w
 12800  0AE8  0086               	movwf	6
 12801  0AE9  0187               	clrf	7
 12802  0AEA  3F40               	moviw [0]fsr1
 12803  0AEB  00F8               	movwf	??_fputc+2
 12804  0AEC  3F41               	moviw [1]fsr1
 12805  0AED  00F9               	movwf	??_fputc+3
 12806  0AEE  0879               	movf	??_fputc+3,w
 12807  0AEF  3A80               	xorlw	128
 12808  0AF0  00FA               	movwf	??_fputc+4
 12809  0AF1  0877               	movf	??_fputc+1,w
 12810  0AF2  3A80               	xorlw	128
 12811  0AF3  027A               	subwf	??_fputc+4,w
 12812  0AF4  1D03               	skipz
 12813  0AF5  2AF8               	goto	u2035
 12814  0AF6  0876               	movf	??_fputc,w
 12815  0AF7  0278               	subwf	??_fputc+2,w
 12816  0AF8                     u2035:	
 12817  0AF8  1803               	skipnc
 12818  0AF9  0008               	return
 12819  0AFA                     l3828:	
 12820  0AFA  0A75               	incf	fputc@fp,w
 12821  0AFB  0086               	movwf	6
 12822  0AFC  0187               	clrf	7
 12823  0AFD  3001               	movlw	1
 12824  0AFE  0781               	addwf	1,f
 12825  0AFF  3141               	addfsr 1,1
 12826  0B00  1803               	skipnc
 12827  0B01  0A81               	incf	1,f
 12828  0B02  0008               	return
 12829  0B03                     __end_of_fputc:	
 12830                           
 12831                           	psect	text85
 12832  15E1                     __ptext85:	
 12833 ;; *************** function _putch *****************
 12834 ;; Defined at:
 12835 ;;		line 174 in file "mcc_generated_files/eusart.c"
 12836 ;; Parameters:    Size  Location     Type
 12837 ;;  txData          1    wreg     unsigned char 
 12838 ;; Auto vars:     Size  Location     Type
 12839 ;;  txData          1    2[COMMON] unsigned char 
 12840 ;; Return value:  Size  Location     Type
 12841 ;;                  1    wreg      void 
 12842 ;; Registers used:
 12843 ;;		wreg, status,2, status,0, pclath, cstack
 12844 ;; Tracked objects:
 12845 ;;		On entry : 0/0
 12846 ;;		On exit  : 0/0
 12847 ;;		Unchanged: 0/0
 12848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12849 ;;      Params:         0       0       0       0       0       0       0       0
 12850 ;;      Locals:         1       0       0       0       0       0       0       0
 12851 ;;      Temps:          0       0       0       0       0       0       0       0
 12852 ;;      Totals:         1       0       0       0       0       0       0       0
 12853 ;;Total ram usage:        1 bytes
 12854 ;; Hardware stack levels used:    1
 12855 ;; Hardware stack levels required when called:    5
 12856 ;; This function calls:
 12857 ;;		_EUSART_Write
 12858 ;; This function is called by:
 12859 ;;		_fputc
 12860 ;; This function uses a non-reentrant model
 12861 ;;
 12862                           
 12863                           
 12864                           ;psect for function _putch
 12865  15E1                     _putch:	
 12866                           
 12867                           ;incstack = 0
 12868                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
 12869                           ;putch@txData stored from wreg
 12870  15E1  00F2               	movwf	putch@txData
 12871                           
 12872                           ;mcc_generated_files/eusart.c: 174: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 175: {;mcc_generated_files/eusart.c: 176:     EUSART_Write(txData);
 12873  15E2  0872               	movf	putch@txData,w
 12874  15E3  3196  2637         	fcall	_EUSART_Write
 12875  15E5  0008               	return
 12876  15E6                     __end_of_putch:	
 12877                           
 12878                           	psect	text86
 12879  1637                     __ptext86:	
 12880 ;; *************** function _EUSART_Write *****************
 12881 ;; Defined at:
 12882 ;;		line 160 in file "mcc_generated_files/eusart.c"
 12883 ;; Parameters:    Size  Location     Type
 12884 ;;  txData          1    wreg     unsigned char 
 12885 ;; Auto vars:     Size  Location     Type
 12886 ;;  txData          1    1[COMMON] unsigned char 
 12887 ;; Return value:  Size  Location     Type
 12888 ;;                  1    wreg      void 
 12889 ;; Registers used:
 12890 ;;		wreg
 12891 ;; Tracked objects:
 12892 ;;		On entry : 0/0
 12893 ;;		On exit  : 0/0
 12894 ;;		Unchanged: 0/0
 12895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12896 ;;      Params:         0       0       0       0       0       0       0       0
 12897 ;;      Locals:         1       0       0       0       0       0       0       0
 12898 ;;      Temps:          0       0       0       0       0       0       0       0
 12899 ;;      Totals:         1       0       0       0       0       0       0       0
 12900 ;;Total ram usage:        1 bytes
 12901 ;; Hardware stack levels used:    1
 12902 ;; Hardware stack levels required when called:    4
 12903 ;; This function calls:
 12904 ;;		Nothing
 12905 ;; This function is called by:
 12906 ;;		_putch
 12907 ;; This function uses a non-reentrant model
 12908 ;;
 12909                           
 12910                           
 12911                           ;psect for function _EUSART_Write
 12912  1637                     _EUSART_Write:	
 12913                           
 12914                           ;incstack = 0
 12915                           ; Regs used in _EUSART_Write: [wreg]
 12916                           ;EUSART_Write@txData stored from wreg
 12917  1637  00F1               	movwf	EUSART_Write@txData
 12918  1638                     l87:	
 12919                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:     }
 12920                           
 12921                           
 12922                           ;mcc_generated_files/eusart.c: 162:     while(0 == PIR1bits.TXIF)
 12923  1638  0020               	movlb	0	; select bank0
 12924  1639  1E11               	btfss	17,4	;volatile
 12925  163A  2E38               	goto	l87
 12926                           
 12927                           ;mcc_generated_files/eusart.c: 166:     TXREG = txData;
 12928  163B  0871               	movf	EUSART_Write@txData,w
 12929  163C  0023               	movlb	3	; select bank3
 12930  163D  009A               	movwf	26	;volatile
 12931  163E  0008               	return
 12932  163F                     __end_of_EUSART_Write:	
 12933                           
 12934                           	psect	text87
 12935  064F                     __ptext87:	
 12936 ;; *************** function _RELAY_PROCESS *****************
 12937 ;; Defined at:
 12938 ;;		line 5 in file "relay.c"
 12939 ;; Parameters:    Size  Location     Type
 12940 ;;  x               1    wreg     unsigned char 
 12941 ;; Auto vars:     Size  Location     Type
 12942 ;;  x               1    3[COMMON] unsigned char 
 12943 ;; Return value:  Size  Location     Type
 12944 ;;                  1    wreg      void 
 12945 ;; Registers used:
 12946 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12947 ;; Tracked objects:
 12948 ;;		On entry : 0/0
 12949 ;;		On exit  : 0/0
 12950 ;;		Unchanged: 0/0
 12951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12952 ;;      Params:         0       0       0       0       0       0       0       0
 12953 ;;      Locals:         1       0       0       0       0       0       0       0
 12954 ;;      Temps:          2       0       0       0       0       0       0       0
 12955 ;;      Totals:         3       0       0       0       0       0       0       0
 12956 ;;Total ram usage:        3 bytes
 12957 ;; Hardware stack levels used:    1
 12958 ;; Hardware stack levels required when called:    4
 12959 ;; This function calls:
 12960 ;;		Nothing
 12961 ;; This function is called by:
 12962 ;;		_myButtonPressedCallback
 12963 ;;		_DATA_PROCESS
 12964 ;; This function uses a non-reentrant model
 12965 ;;
 12966                           
 12967                           
 12968                           ;psect for function _RELAY_PROCESS
 12969  064F                     _RELAY_PROCESS:	
 12970                           
 12971                           ;incstack = 0
 12972                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 12973                           ;RELAY_PROCESS@x stored from wreg
 12974  064F  00F3               	movwf	RELAY_PROCESS@x
 12975                           
 12976                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 12977  0650  2EB1               	goto	l4034
 12978  0651                     l1227:	
 12979                           ;relay.c: 10:         {;relay.c: 11:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 12980                           
 12981  0651  0022               	movlb	2	; select bank2
 12982  0652  170D               	bsf	13,6	;volatile
 12983  0653  168E               	bsf	14,5	;volatile
 12984  0654  168C               	bsf	12,5	;volatile
 12985  0655  160C               	bsf	12,4	;volatile
 12986  0656  0008               	return
 12987  0657                     l1237:	
 12988                           ;relay.c: 15:         {;relay.c: 16:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 12989                           
 12990  0657  0022               	movlb	2	; select bank2
 12991  0658  170D               	bsf	13,6	;volatile
 12992  0659  168E               	bsf	14,5	;volatile
 12993  065A  168C               	bsf	12,5	;volatile
 12994  065B  120C               	bcf	12,4	;volatile
 12995  065C  0008               	return
 12996  065D                     l1246:	
 12997                           ;relay.c: 20:         {;relay.c: 21:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 12998                           
 12999  065D  0022               	movlb	2	; select bank2
 13000  065E  170D               	bsf	13,6	;volatile
 13001  065F  168E               	bsf	14,5	;volatile
 13002  0660  128C               	bcf	12,5	;volatile
 13003  0661  160C               	bsf	12,4	;volatile
 13004  0662  0008               	return
 13005  0663                     l1255:	
 13006                           ;relay.c: 25:         {;relay.c: 26:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13007                           
 13008  0663  0022               	movlb	2	; select bank2
 13009  0664  170D               	bsf	13,6	;volatile
 13010  0665  168E               	bsf	14,5	;volatile
 13011  0666  128C               	bcf	12,5	;volatile
 13012  0667  120C               	bcf	12,4	;volatile
 13013  0668  0008               	return
 13014  0669                     l1264:	
 13015                           ;relay.c: 30:         {;relay.c: 31:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13016                           
 13017  0669  0022               	movlb	2	; select bank2
 13018  066A  170D               	bsf	13,6	;volatile
 13019  066B  128E               	bcf	14,5	;volatile
 13020  066C  168C               	bsf	12,5	;volatile
 13021  066D  160C               	bsf	12,4	;volatile
 13022  066E  0008               	return
 13023  066F                     l1273:	
 13024                           ;relay.c: 35:         {;relay.c: 36:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13025                           
 13026  066F  0022               	movlb	2	; select bank2
 13027  0670  170D               	bsf	13,6	;volatile
 13028  0671  128E               	bcf	14,5	;volatile
 13029  0672  168C               	bsf	12,5	;volatile
 13030  0673  120C               	bcf	12,4	;volatile
 13031  0674  0008               	return
 13032  0675                     l1282:	
 13033                           ;relay.c: 40:         {;relay.c: 41:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13034                           
 13035  0675  0022               	movlb	2	; select bank2
 13036  0676  170D               	bsf	13,6	;volatile
 13037  0677  128E               	bcf	14,5	;volatile
 13038  0678  128C               	bcf	12,5	;volatile
 13039  0679  160C               	bsf	12,4	;volatile
 13040  067A  0008               	return
 13041  067B                     l1291:	
 13042                           ;relay.c: 45:         {;relay.c: 46:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13043                           
 13044  067B  0022               	movlb	2	; select bank2
 13045  067C  170D               	bsf	13,6	;volatile
 13046  067D  128E               	bcf	14,5	;volatile
 13047  067E  128C               	bcf	12,5	;volatile
 13048  067F  120C               	bcf	12,4	;volatile
 13049  0680  0008               	return
 13050  0681                     l1300:	
 13051                           ;relay.c: 50:         {;relay.c: 51:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13052                           
 13053  0681  0022               	movlb	2	; select bank2
 13054  0682  130D               	bcf	13,6	;volatile
 13055  0683  168E               	bsf	14,5	;volatile
 13056  0684  168C               	bsf	12,5	;volatile
 13057  0685  160C               	bsf	12,4	;volatile
 13058  0686  0008               	return
 13059  0687                     l1309:	
 13060                           ;relay.c: 55:         {;relay.c: 56:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13061                           
 13062  0687  0022               	movlb	2	; select bank2
 13063  0688  130D               	bcf	13,6	;volatile
 13064  0689  168E               	bsf	14,5	;volatile
 13065  068A  168C               	bsf	12,5	;volatile
 13066  068B  120C               	bcf	12,4	;volatile
 13067  068C  0008               	return
 13068  068D                     l1318:	
 13069                           ;relay.c: 60:         {;relay.c: 61:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13070                           
 13071  068D  0022               	movlb	2	; select bank2
 13072  068E  130D               	bcf	13,6	;volatile
 13073  068F  168E               	bsf	14,5	;volatile
 13074  0690  128C               	bcf	12,5	;volatile
 13075  0691  160C               	bsf	12,4	;volatile
 13076  0692  0008               	return
 13077  0693                     l1327:	
 13078                           ;relay.c: 65:         {;relay.c: 66:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13079                           
 13080  0693  0022               	movlb	2	; select bank2
 13081  0694  130D               	bcf	13,6	;volatile
 13082  0695  168E               	bsf	14,5	;volatile
 13083  0696  128C               	bcf	12,5	;volatile
 13084  0697  120C               	bcf	12,4	;volatile
 13085  0698  0008               	return
 13086  0699                     l1336:	
 13087                           ;relay.c: 70:         {;relay.c: 71:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13088                           
 13089  0699  0022               	movlb	2	; select bank2
 13090  069A  130D               	bcf	13,6	;volatile
 13091  069B  128E               	bcf	14,5	;volatile
 13092  069C  168C               	bsf	12,5	;volatile
 13093  069D  160C               	bsf	12,4	;volatile
 13094  069E  0008               	return
 13095  069F                     l1345:	
 13096                           ;relay.c: 75:         {;relay.c: 76:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13097                           
 13098  069F  0022               	movlb	2	; select bank2
 13099  06A0  130D               	bcf	13,6	;volatile
 13100  06A1  128E               	bcf	14,5	;volatile
 13101  06A2  168C               	bsf	12,5	;volatile
 13102  06A3  120C               	bcf	12,4	;volatile
 13103  06A4  0008               	return
 13104  06A5                     l1354:	
 13105                           ;relay.c: 80:         {;relay.c: 81:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13106                           
 13107  06A5  0022               	movlb	2	; select bank2
 13108  06A6  130D               	bcf	13,6	;volatile
 13109  06A7  128E               	bcf	14,5	;volatile
 13110  06A8  128C               	bcf	12,5	;volatile
 13111  06A9  160C               	bsf	12,4	;volatile
 13112  06AA  0008               	return
 13113  06AB                     l1363:	
 13114                           ;relay.c: 85:         {;relay.c: 86:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13115                           
 13116  06AB  0022               	movlb	2	; select bank2
 13117  06AC  130D               	bcf	13,6	;volatile
 13118  06AD  128E               	bcf	14,5	;volatile
 13119  06AE  128C               	bcf	12,5	;volatile
 13120  06AF  120C               	bcf	12,4	;volatile
 13121  06B0  0008               	return
 13122  06B1                     l4034:	
 13123  06B1  0873               	movf	RELAY_PROCESS@x,w
 13124  06B2  00F1               	movwf	??_RELAY_PROCESS
 13125  06B3  01F2               	clrf	??_RELAY_PROCESS+1
 13126                           
 13127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13128                           ; Switch size 1, requested type "simple"
 13129                           ; Number of cases is 1, Range of values is 0 to 0
 13130                           ; switch strategies available:
 13131                           ; Name         Instructions Cycles
 13132                           ; simple_byte            4     3 (average)
 13133                           ; direct_byte            8     6 (fixed)
 13134                           ; jumptable            260     6 (fixed)
 13135                           ;	Chosen strategy is simple_byte
 13136  06B4  0872               	movf	??_RELAY_PROCESS+1,w
 13137  06B5  3A00               	xorlw	0	; case 0
 13138  06B6  1903               	skipnz
 13139  06B7  2EB9               	goto	l6788
 13140  06B8  2EEB               	goto	l1371
 13141  06B9                     l6788:	
 13142                           
 13143                           ; Switch size 1, requested type "simple"
 13144                           ; Number of cases is 16, Range of values is 0 to 15
 13145                           ; switch strategies available:
 13146                           ; Name         Instructions Cycles
 13147                           ; direct_byte           38     6 (fixed)
 13148                           ; simple_byte           49    25 (average)
 13149                           ; jumptable            260     6 (fixed)
 13150                           ;	Chosen strategy is simple_byte
 13151  06B9  0871               	movf	??_RELAY_PROCESS,w
 13152  06BA  3A00               	xorlw	0	; case 0
 13153  06BB  1903               	skipnz
 13154  06BC  2E51               	goto	l1227
 13155  06BD  3A01               	xorlw	1	; case 1
 13156  06BE  1903               	skipnz
 13157  06BF  2E57               	goto	l1237
 13158  06C0  3A03               	xorlw	3	; case 2
 13159  06C1  1903               	skipnz
 13160  06C2  2E5D               	goto	l1246
 13161  06C3  3A01               	xorlw	1	; case 3
 13162  06C4  1903               	skipnz
 13163  06C5  2E63               	goto	l1255
 13164  06C6  3A07               	xorlw	7	; case 4
 13165  06C7  1903               	skipnz
 13166  06C8  2E69               	goto	l1264
 13167  06C9  3A01               	xorlw	1	; case 5
 13168  06CA  1903               	skipnz
 13169  06CB  2E6F               	goto	l1273
 13170  06CC  3A03               	xorlw	3	; case 6
 13171  06CD  1903               	skipnz
 13172  06CE  2E75               	goto	l1282
 13173  06CF  3A01               	xorlw	1	; case 7
 13174  06D0  1903               	skipnz
 13175  06D1  2E7B               	goto	l1291
 13176  06D2  3A0F               	xorlw	15	; case 8
 13177  06D3  1903               	skipnz
 13178  06D4  2E81               	goto	l1300
 13179  06D5  3A01               	xorlw	1	; case 9
 13180  06D6  1903               	skipnz
 13181  06D7  2E87               	goto	l1309
 13182  06D8  3A03               	xorlw	3	; case 10
 13183  06D9  1903               	skipnz
 13184  06DA  2E8D               	goto	l1318
 13185  06DB  3A01               	xorlw	1	; case 11
 13186  06DC  1903               	skipnz
 13187  06DD  2E93               	goto	l1327
 13188  06DE  3A07               	xorlw	7	; case 12
 13189  06DF  1903               	skipnz
 13190  06E0  2E99               	goto	l1336
 13191  06E1  3A01               	xorlw	1	; case 13
 13192  06E2  1903               	skipnz
 13193  06E3  2E9F               	goto	l1345
 13194  06E4  3A03               	xorlw	3	; case 14
 13195  06E5  1903               	skipnz
 13196  06E6  2EA5               	goto	l1354
 13197  06E7  3A01               	xorlw	1	; case 15
 13198  06E8  1903               	skipnz
 13199  06E9  2EAB               	goto	l1363
 13200  06EA  2EEB               	goto	l1371
 13201  06EB                     l1371:	
 13202  06EB  0008               	return
 13203  06EC                     __end_of_RELAY_PROCESS:	
 13204                           
 13205                           	psect	text88
 13206  06EC                     __ptext88:	
 13207 ;; *************** function _LED_PROCESS *****************
 13208 ;; Defined at:
 13209 ;;		line 10 in file "led.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;  x               1    wreg     unsigned char 
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;  x               1    3[COMMON] unsigned char 
 13214 ;; Return value:  Size  Location     Type
 13215 ;;                  1    wreg      void 
 13216 ;; Registers used:
 13217 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13223 ;;      Params:         0       0       0       0       0       0       0       0
 13224 ;;      Locals:         1       0       0       0       0       0       0       0
 13225 ;;      Temps:          2       0       0       0       0       0       0       0
 13226 ;;      Totals:         3       0       0       0       0       0       0       0
 13227 ;;Total ram usage:        3 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:    4
 13230 ;; This function calls:
 13231 ;;		Nothing
 13232 ;; This function is called by:
 13233 ;;		_main
 13234 ;;		_myButtonPressedCallback
 13235 ;;		_DATA_PROCESS
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239                           
 13240                           ;psect for function _LED_PROCESS
 13241  06EC                     _LED_PROCESS:	
 13242                           
 13243                           ;incstack = 0
 13244                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0]
 13245                           ;LED_PROCESS@x stored from wreg
 13246  06EC  00F3               	movwf	LED_PROCESS@x
 13247                           
 13248                           ;led.c: 10: void LED_PROCESS(uint8_t x);led.c: 11: {;led.c: 12:     switch(x)
 13249  06ED  2F4E               	goto	l4024
 13250  06EE                     l386:	
 13251                           ;led.c: 15:         {;led.c: 16:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13252                           
 13253  06EE  0022               	movlb	2	; select bank2
 13254  06EF  140C               	bsf	12,0	;volatile
 13255  06F0  178E               	bsf	14,7	;volatile
 13256  06F1  148C               	bsf	12,1	;volatile
 13257  06F2  158E               	bsf	14,3	;volatile
 13258  06F3  0008               	return
 13259  06F4                     l396:	
 13260                           ;led.c: 20:         {;led.c: 21:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13261                           
 13262  06F4  0022               	movlb	2	; select bank2
 13263  06F5  140C               	bsf	12,0	;volatile
 13264  06F6  178E               	bsf	14,7	;volatile
 13265  06F7  148C               	bsf	12,1	;volatile
 13266  06F8  118E               	bcf	14,3	;volatile
 13267  06F9  0008               	return
 13268  06FA                     l405:	
 13269                           ;led.c: 25:         {;led.c: 26:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13270                           
 13271  06FA  0022               	movlb	2	; select bank2
 13272  06FB  140C               	bsf	12,0	;volatile
 13273  06FC  178E               	bsf	14,7	;volatile
 13274  06FD  108C               	bcf	12,1	;volatile
 13275  06FE  158E               	bsf	14,3	;volatile
 13276  06FF  0008               	return
 13277  0700                     l414:	
 13278                           ;led.c: 30:         {;led.c: 31:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13279                           
 13280  0700  0022               	movlb	2	; select bank2
 13281  0701  140C               	bsf	12,0	;volatile
 13282  0702  178E               	bsf	14,7	;volatile
 13283  0703  108C               	bcf	12,1	;volatile
 13284  0704  118E               	bcf	14,3	;volatile
 13285  0705  0008               	return
 13286  0706                     l423:	
 13287                           ;led.c: 35:         {;led.c: 36:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13288                           
 13289  0706  0022               	movlb	2	; select bank2
 13290  0707  140C               	bsf	12,0	;volatile
 13291  0708  138E               	bcf	14,7	;volatile
 13292  0709  148C               	bsf	12,1	;volatile
 13293  070A  158E               	bsf	14,3	;volatile
 13294  070B  0008               	return
 13295  070C                     l432:	
 13296                           ;led.c: 40:         {;led.c: 41:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13297                           
 13298  070C  0022               	movlb	2	; select bank2
 13299  070D  140C               	bsf	12,0	;volatile
 13300  070E  138E               	bcf	14,7	;volatile
 13301  070F  148C               	bsf	12,1	;volatile
 13302  0710  118E               	bcf	14,3	;volatile
 13303  0711  0008               	return
 13304  0712                     l441:	
 13305                           ;led.c: 45:         {;led.c: 46:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13306                           
 13307  0712  0022               	movlb	2	; select bank2
 13308  0713  140C               	bsf	12,0	;volatile
 13309  0714  138E               	bcf	14,7	;volatile
 13310  0715  108C               	bcf	12,1	;volatile
 13311  0716  158E               	bsf	14,3	;volatile
 13312  0717  0008               	return
 13313  0718                     l450:	
 13314                           ;led.c: 50:         {;led.c: 51:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13315                           
 13316  0718  0022               	movlb	2	; select bank2
 13317  0719  140C               	bsf	12,0	;volatile
 13318  071A  138E               	bcf	14,7	;volatile
 13319  071B  108C               	bcf	12,1	;volatile
 13320  071C  118E               	bcf	14,3	;volatile
 13321  071D  0008               	return
 13322  071E                     l459:	
 13323                           ;led.c: 55:         {;led.c: 56:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13324                           
 13325  071E  0022               	movlb	2	; select bank2
 13326  071F  100C               	bcf	12,0	;volatile
 13327  0720  178E               	bsf	14,7	;volatile
 13328  0721  148C               	bsf	12,1	;volatile
 13329  0722  158E               	bsf	14,3	;volatile
 13330  0723  0008               	return
 13331  0724                     l468:	
 13332                           ;led.c: 60:         {;led.c: 61:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13333                           
 13334  0724  0022               	movlb	2	; select bank2
 13335  0725  100C               	bcf	12,0	;volatile
 13336  0726  178E               	bsf	14,7	;volatile
 13337  0727  148C               	bsf	12,1	;volatile
 13338  0728  118E               	bcf	14,3	;volatile
 13339  0729  0008               	return
 13340  072A                     l477:	
 13341                           ;led.c: 65:         {;led.c: 66:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13342                           
 13343  072A  0022               	movlb	2	; select bank2
 13344  072B  100C               	bcf	12,0	;volatile
 13345  072C  178E               	bsf	14,7	;volatile
 13346  072D  108C               	bcf	12,1	;volatile
 13347  072E  158E               	bsf	14,3	;volatile
 13348  072F  0008               	return
 13349  0730                     l486:	
 13350                           ;led.c: 70:         {;led.c: 71:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13351                           
 13352  0730  0022               	movlb	2	; select bank2
 13353  0731  100C               	bcf	12,0	;volatile
 13354  0732  178E               	bsf	14,7	;volatile
 13355  0733  108C               	bcf	12,1	;volatile
 13356  0734  118E               	bcf	14,3	;volatile
 13357  0735  0008               	return
 13358  0736                     l495:	
 13359                           ;led.c: 75:         {;led.c: 76:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13360                           
 13361  0736  0022               	movlb	2	; select bank2
 13362  0737  100C               	bcf	12,0	;volatile
 13363  0738  138E               	bcf	14,7	;volatile
 13364  0739  148C               	bsf	12,1	;volatile
 13365  073A  158E               	bsf	14,3	;volatile
 13366  073B  0008               	return
 13367  073C                     l504:	
 13368                           ;led.c: 80:         {;led.c: 81:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13369                           
 13370  073C  0022               	movlb	2	; select bank2
 13371  073D  100C               	bcf	12,0	;volatile
 13372  073E  138E               	bcf	14,7	;volatile
 13373  073F  148C               	bsf	12,1	;volatile
 13374  0740  118E               	bcf	14,3	;volatile
 13375  0741  0008               	return
 13376  0742                     l513:	
 13377                           ;led.c: 85:         {;led.c: 86:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13378                           
 13379  0742  0022               	movlb	2	; select bank2
 13380  0743  100C               	bcf	12,0	;volatile
 13381  0744  138E               	bcf	14,7	;volatile
 13382  0745  108C               	bcf	12,1	;volatile
 13383  0746  158E               	bsf	14,3	;volatile
 13384  0747  0008               	return
 13385  0748                     l522:	
 13386                           ;led.c: 90:         {;led.c: 91:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13387                           
 13388  0748  0022               	movlb	2	; select bank2
 13389  0749  100C               	bcf	12,0	;volatile
 13390  074A  138E               	bcf	14,7	;volatile
 13391  074B  108C               	bcf	12,1	;volatile
 13392  074C  118E               	bcf	14,3	;volatile
 13393  074D  0008               	return
 13394  074E                     l4024:	
 13395  074E  0873               	movf	LED_PROCESS@x,w
 13396  074F  00F1               	movwf	??_LED_PROCESS
 13397  0750  01F2               	clrf	??_LED_PROCESS+1
 13398                           
 13399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13400                           ; Switch size 1, requested type "simple"
 13401                           ; Number of cases is 1, Range of values is 0 to 0
 13402                           ; switch strategies available:
 13403                           ; Name         Instructions Cycles
 13404                           ; simple_byte            4     3 (average)
 13405                           ; direct_byte            8     6 (fixed)
 13406                           ; jumptable            260     6 (fixed)
 13407                           ;	Chosen strategy is simple_byte
 13408  0751  0872               	movf	??_LED_PROCESS+1,w
 13409  0752  3A00               	xorlw	0	; case 0
 13410  0753  1903               	skipnz
 13411  0754  2F56               	goto	l6790
 13412  0755  2F88               	goto	l530
 13413  0756                     l6790:	
 13414                           
 13415                           ; Switch size 1, requested type "simple"
 13416                           ; Number of cases is 16, Range of values is 0 to 15
 13417                           ; switch strategies available:
 13418                           ; Name         Instructions Cycles
 13419                           ; direct_byte           38     6 (fixed)
 13420                           ; simple_byte           49    25 (average)
 13421                           ; jumptable            260     6 (fixed)
 13422                           ;	Chosen strategy is simple_byte
 13423  0756  0871               	movf	??_LED_PROCESS,w
 13424  0757  3A00               	xorlw	0	; case 0
 13425  0758  1903               	skipnz
 13426  0759  2EEE               	goto	l386
 13427  075A  3A01               	xorlw	1	; case 1
 13428  075B  1903               	skipnz
 13429  075C  2EF4               	goto	l396
 13430  075D  3A03               	xorlw	3	; case 2
 13431  075E  1903               	skipnz
 13432  075F  2EFA               	goto	l405
 13433  0760  3A01               	xorlw	1	; case 3
 13434  0761  1903               	skipnz
 13435  0762  2F00               	goto	l414
 13436  0763  3A07               	xorlw	7	; case 4
 13437  0764  1903               	skipnz
 13438  0765  2F06               	goto	l423
 13439  0766  3A01               	xorlw	1	; case 5
 13440  0767  1903               	skipnz
 13441  0768  2F0C               	goto	l432
 13442  0769  3A03               	xorlw	3	; case 6
 13443  076A  1903               	skipnz
 13444  076B  2F12               	goto	l441
 13445  076C  3A01               	xorlw	1	; case 7
 13446  076D  1903               	skipnz
 13447  076E  2F18               	goto	l450
 13448  076F  3A0F               	xorlw	15	; case 8
 13449  0770  1903               	skipnz
 13450  0771  2F1E               	goto	l459
 13451  0772  3A01               	xorlw	1	; case 9
 13452  0773  1903               	skipnz
 13453  0774  2F24               	goto	l468
 13454  0775  3A03               	xorlw	3	; case 10
 13455  0776  1903               	skipnz
 13456  0777  2F2A               	goto	l477
 13457  0778  3A01               	xorlw	1	; case 11
 13458  0779  1903               	skipnz
 13459  077A  2F30               	goto	l486
 13460  077B  3A07               	xorlw	7	; case 12
 13461  077C  1903               	skipnz
 13462  077D  2F36               	goto	l495
 13463  077E  3A01               	xorlw	1	; case 13
 13464  077F  1903               	skipnz
 13465  0780  2F3C               	goto	l504
 13466  0781  3A03               	xorlw	3	; case 14
 13467  0782  1903               	skipnz
 13468  0783  2F42               	goto	l513
 13469  0784  3A01               	xorlw	1	; case 15
 13470  0785  1903               	skipnz
 13471  0786  2F48               	goto	l522
 13472  0787  2F88               	goto	l530
 13473  0788                     l530:	
 13474  0788  0008               	return
 13475  0789                     __end_of_LED_PROCESS:	
 13476                           
 13477                           	psect	intentry
 13478  0004                     __pintentry:	
 13479 ;; *************** function _INTERRUPT_InterruptManager *****************
 13480 ;; Defined at:
 13481 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13482 ;; Parameters:    Size  Location     Type
 13483 ;;		None
 13484 ;; Auto vars:     Size  Location     Type
 13485 ;;		None
 13486 ;; Return value:  Size  Location     Type
 13487 ;;                  1    wreg      void 
 13488 ;; Registers used:
 13489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13490 ;; Tracked objects:
 13491 ;;		On entry : 0/0
 13492 ;;		On exit  : 0/0
 13493 ;;		Unchanged: 0/0
 13494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13495 ;;      Params:         0       0       0       0       0       0       0       0
 13496 ;;      Locals:         0       0       0       0       0       0       0       0
 13497 ;;      Temps:          0       0       0       0       0       0       0       0
 13498 ;;      Totals:         0       0       0       0       0       0       0       0
 13499 ;;Total ram usage:        0 bytes
 13500 ;; Hardware stack levels used:    1
 13501 ;; Hardware stack levels required when called:    3
 13502 ;; This function calls:
 13503 ;;		Absolute function
 13504 ;;		_EUSART_Receive_ISR
 13505 ;; This function is called by:
 13506 ;;		Interrupt level 1
 13507 ;; This function uses a non-reentrant model
 13508 ;;
 13509                           
 13510  0004                     _INTERRUPT_InterruptManager:	
 13511                           
 13512                           ;incstack = 0
 13513  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13514                           
 13515                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13516  0005  3180               	pagesel	$
 13517                           
 13518                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 13519  0006  1F0B               	btfss	11,6	;volatile
 13520  0007  2814               	goto	i1l145
 13521                           
 13522                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 13523  0008  0021               	movlb	1	; select bank1
 13524  0009  1E91               	btfss	17,5	;volatile
 13525  000A  2814               	goto	i1l145
 13526  000B  0020               	movlb	0	; select bank0
 13527  000C  1E91               	btfss	17,5	;volatile
 13528  000D  2814               	goto	i1l145
 13529                           
 13530                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_RxDefaultInterruptHandler();
 13531  000E  0021               	movlb	1	; select bank1
 13532  000F  0869               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 13533  0010  008A               	movwf	10
 13534  0011  0868               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 13535  0012  000A               	callw
 13536  0013  3180               	pagesel	$
 13537  0014                     i1l145:	
 13538                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 13539                           
 13540  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13541  0015  0009               	retfie
 13542  0016                     __end_of_INTERRUPT_InterruptManager:	
 13543                           
 13544                           	psect	text90
 13545  0A9C                     __ptext90:	
 13546 ;; *************** function _EUSART_Receive_ISR *****************
 13547 ;; Defined at:
 13548 ;;		line 180 in file "mcc_generated_files/eusart.c"
 13549 ;; Parameters:    Size  Location     Type
 13550 ;;		None
 13551 ;; Auto vars:     Size  Location     Type
 13552 ;;		None
 13553 ;; Return value:  Size  Location     Type
 13554 ;;                  1    wreg      void 
 13555 ;; Registers used:
 13556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13557 ;; Tracked objects:
 13558 ;;		On entry : 0/0
 13559 ;;		On exit  : 0/0
 13560 ;;		Unchanged: 0/0
 13561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13562 ;;      Params:         0       0       0       0       0       0       0       0
 13563 ;;      Locals:         0       0       0       0       0       0       0       0
 13564 ;;      Temps:          0       0       0       0       0       0       0       0
 13565 ;;      Totals:         0       0       0       0       0       0       0       0
 13566 ;;Total ram usage:        0 bytes
 13567 ;; Hardware stack levels used:    1
 13568 ;; Hardware stack levels required when called:    2
 13569 ;; This function calls:
 13570 ;;		Absolute function
 13571 ;;		_EUSART_DefaultErrorHandler
 13572 ;;		_EUSART_DefaultFramingErrorHandler
 13573 ;;		_EUSART_DefaultOverrunErrorHandler
 13574 ;;		_EUSART_RxDataHandler
 13575 ;; This function is called by:
 13576 ;;		_EUSART_Initialize
 13577 ;;		_INTERRUPT_InterruptManager
 13578 ;; This function uses a non-reentrant model
 13579 ;;
 13580                           
 13581                           
 13582                           ;psect for function _EUSART_Receive_ISR
 13583  0A9C                     _EUSART_Receive_ISR:	
 13584                           
 13585                           ;mcc_generated_files/eusart.c: 183:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 13586                           
 13587                           ;incstack = 0
 13588                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13589  0A9C  087C               	movf	_eusartRxHead,w	;volatile
 13590  0A9D  3ECE               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13591  0A9E  0086               	movwf	6
 13592  0A9F  0187               	clrf	7
 13593  0AA0  0181               	clrf	1
 13594                           
 13595                           ;mcc_generated_files/eusart.c: 185:     if(RCSTAbits.FERR){
 13596  0AA1  0023               	movlb	3	; select bank3
 13597  0AA2  1D1D               	btfss	29,2	;volatile
 13598  0AA3  2AAF               	goto	i1l4918
 13599                           
 13600                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13601  0AA4  087C               	movf	_eusartRxHead,w	;volatile
 13602  0AA5  3ECE               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13603  0AA6  0086               	movwf	6
 13604  0AA7  0187               	clrf	7
 13605  0AA8  1481               	bsf	1,1
 13606                           
 13607                           ;mcc_generated_files/eusart.c: 187:         EUSART_FramingErrorHandler();
 13608  0AA9  0021               	movlb	1	; select bank1
 13609  0AAA  0867               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 13610  0AAB  008A               	movwf	10
 13611  0AAC  0866               	movf	_EUSART_FramingErrorHandler^(0+128),w
 13612  0AAD  000A               	callw
 13613  0AAE  318A               	pagesel	$
 13614  0AAF                     i1l4918:	
 13615                           
 13616                           ;mcc_generated_files/eusart.c: 190:     if(RCSTAbits.OERR){
 13617  0AAF  0023               	movlb	3	; select bank3
 13618  0AB0  1C9D               	btfss	29,1	;volatile
 13619  0AB1  2ABD               	goto	i1l4924
 13620                           
 13621                           ;mcc_generated_files/eusart.c: 191:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13622  0AB2  087C               	movf	_eusartRxHead,w	;volatile
 13623  0AB3  3ECE               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13624  0AB4  0086               	movwf	6
 13625  0AB5  0187               	clrf	7
 13626  0AB6  1501               	bsf	1,2
 13627                           
 13628                           ;mcc_generated_files/eusart.c: 192:         EUSART_OverrunErrorHandler();
 13629  0AB7  0021               	movlb	1	; select bank1
 13630  0AB8  0865               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 13631  0AB9  008A               	movwf	10
 13632  0ABA  0864               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 13633  0ABB  000A               	callw
 13634  0ABC  318A               	pagesel	$
 13635  0ABD                     i1l4924:	
 13636                           
 13637                           ;mcc_generated_files/eusart.c: 195:     if(eusartRxStatusBuffer[eusartRxHead].status){
 13638  0ABD  087C               	movf	_eusartRxHead,w	;volatile
 13639  0ABE  3ECE               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13640  0ABF  0086               	movwf	6
 13641  0AC0  0187               	clrf	7
 13642  0AC1  0801               	movf	1,w
 13643  0AC2  1903               	btfsc	3,2
 13644  0AC3  2ACB               	goto	i1l4928
 13645                           
 13646                           ;mcc_generated_files/eusart.c: 196:         EUSART_ErrorHandler();
 13647  0AC4  0021               	movlb	1	; select bank1
 13648  0AC5  0863               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 13649  0AC6  008A               	movwf	10
 13650  0AC7  0862               	movf	_EUSART_ErrorHandler^(0+128),w
 13651  0AC8  000A               	callw
 13652  0AC9  318A               	pagesel	$
 13653                           
 13654                           ;mcc_generated_files/eusart.c: 197:     } else {
 13655  0ACA  0008               	return
 13656  0ACB                     i1l4928:	
 13657                           
 13658                           ;mcc_generated_files/eusart.c: 198:         EUSART_RxDataHandler();
 13659  0ACB  3197  27A3         	fcall	_EUSART_RxDataHandler
 13660  0ACD  0008               	return
 13661  0ACE                     __end_of_EUSART_Receive_ISR:	
 13662                           
 13663                           	psect	text91
 13664  15D9                     __ptext91:	
 13665 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 13666 ;; Defined at:
 13667 ;;		line 216 in file "mcc_generated_files/eusart.c"
 13668 ;; Parameters:    Size  Location     Type
 13669 ;;		None
 13670 ;; Auto vars:     Size  Location     Type
 13671 ;;		None
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  1    wreg      void 
 13674 ;; Registers used:
 13675 ;;		None
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13681 ;;      Params:         0       0       0       0       0       0       0       0
 13682 ;;      Locals:         0       0       0       0       0       0       0       0
 13683 ;;      Temps:          0       0       0       0       0       0       0       0
 13684 ;;      Totals:         0       0       0       0       0       0       0       0
 13685 ;;Total ram usage:        0 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; This function calls:
 13688 ;;		Nothing
 13689 ;; This function is called by:
 13690 ;;		_EUSART_Initialize
 13691 ;;		_EUSART_Receive_ISR
 13692 ;; This function uses a non-reentrant model
 13693 ;;
 13694                           
 13695                           
 13696                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 13697  15D9                     _EUSART_DefaultOverrunErrorHandler:	
 13698                           
 13699                           ;mcc_generated_files/eusart.c: 219:     RCSTAbits.CREN = 0;
 13700                           
 13701                           ;incstack = 0
 13702                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 13703  15D9  0023               	movlb	3	; select bank3
 13704  15DA  121D               	bcf	29,4	;volatile
 13705                           
 13706                           ;mcc_generated_files/eusart.c: 220:     RCSTAbits.CREN = 1;
 13707  15DB  161D               	bsf	29,4	;volatile
 13708  15DC  0008               	return
 13709  15DD                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 13710                           
 13711                           	psect	text92
 13712  15C4                     __ptext92:	
 13713 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 13714 ;; Defined at:
 13715 ;;		line 214 in file "mcc_generated_files/eusart.c"
 13716 ;; Parameters:    Size  Location     Type
 13717 ;;		None
 13718 ;; Auto vars:     Size  Location     Type
 13719 ;;		None
 13720 ;; Return value:  Size  Location     Type
 13721 ;;                  1    wreg      void 
 13722 ;; Registers used:
 13723 ;;		None
 13724 ;; Tracked objects:
 13725 ;;		On entry : 0/0
 13726 ;;		On exit  : 0/0
 13727 ;;		Unchanged: 0/0
 13728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13729 ;;      Params:         0       0       0       0       0       0       0       0
 13730 ;;      Locals:         0       0       0       0       0       0       0       0
 13731 ;;      Temps:          0       0       0       0       0       0       0       0
 13732 ;;      Totals:         0       0       0       0       0       0       0       0
 13733 ;;Total ram usage:        0 bytes
 13734 ;; Hardware stack levels used:    1
 13735 ;; This function calls:
 13736 ;;		Nothing
 13737 ;; This function is called by:
 13738 ;;		_EUSART_Initialize
 13739 ;;		_EUSART_Receive_ISR
 13740 ;; This function uses a non-reentrant model
 13741 ;;
 13742                           
 13743                           
 13744                           ;psect for function _EUSART_DefaultFramingErrorHandler
 13745  15C4                     _EUSART_DefaultFramingErrorHandler:	
 13746                           
 13747                           ;incstack = 0
 13748                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 13749  15C4  0008               	return
 13750  15C5                     __end_of_EUSART_DefaultFramingErrorHandler:	
 13751                           
 13752                           	psect	text93
 13753  15C7                     __ptext93:	
 13754 ;; *************** function _EUSART_DefaultErrorHandler *****************
 13755 ;; Defined at:
 13756 ;;		line 224 in file "mcc_generated_files/eusart.c"
 13757 ;; Parameters:    Size  Location     Type
 13758 ;;		None
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;		None
 13761 ;; Return value:  Size  Location     Type
 13762 ;;                  1    wreg      void 
 13763 ;; Registers used:
 13764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13765 ;; Tracked objects:
 13766 ;;		On entry : 0/0
 13767 ;;		On exit  : 0/0
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13770 ;;      Params:         0       0       0       0       0       0       0       0
 13771 ;;      Locals:         0       0       0       0       0       0       0       0
 13772 ;;      Temps:          0       0       0       0       0       0       0       0
 13773 ;;      Totals:         0       0       0       0       0       0       0       0
 13774 ;;Total ram usage:        0 bytes
 13775 ;; Hardware stack levels used:    1
 13776 ;; Hardware stack levels required when called:    1
 13777 ;; This function calls:
 13778 ;;		_EUSART_RxDataHandler
 13779 ;; This function is called by:
 13780 ;;		_EUSART_Initialize
 13781 ;;		_EUSART_Receive_ISR
 13782 ;; This function uses a non-reentrant model
 13783 ;;
 13784                           
 13785                           
 13786                           ;psect for function _EUSART_DefaultErrorHandler
 13787  15C7                     _EUSART_DefaultErrorHandler:	
 13788                           
 13789                           ;mcc_generated_files/eusart.c: 225:     EUSART_RxDataHandler();
 13790                           
 13791                           ;incstack = 0
 13792                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13793  15C7  3197  27A3         	fcall	_EUSART_RxDataHandler
 13794  15C9  0008               	return
 13795  15CA                     __end_of_EUSART_DefaultErrorHandler:	
 13796                           
 13797                           	psect	text94
 13798  17A3                     __ptext94:	
 13799 ;; *************** function _EUSART_RxDataHandler *****************
 13800 ;; Defined at:
 13801 ;;		line 204 in file "mcc_generated_files/eusart.c"
 13802 ;; Parameters:    Size  Location     Type
 13803 ;;		None
 13804 ;; Auto vars:     Size  Location     Type
 13805 ;;		None
 13806 ;; Return value:  Size  Location     Type
 13807 ;;                  1    wreg      void 
 13808 ;; Registers used:
 13809 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13810 ;; Tracked objects:
 13811 ;;		On entry : 0/0
 13812 ;;		On exit  : 0/0
 13813 ;;		Unchanged: 0/0
 13814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13815 ;;      Params:         0       0       0       0       0       0       0       0
 13816 ;;      Locals:         0       0       0       0       0       0       0       0
 13817 ;;      Temps:          1       0       0       0       0       0       0       0
 13818 ;;      Totals:         1       0       0       0       0       0       0       0
 13819 ;;Total ram usage:        1 bytes
 13820 ;; Hardware stack levels used:    1
 13821 ;; This function calls:
 13822 ;;		Nothing
 13823 ;; This function is called by:
 13824 ;;		_EUSART_Receive_ISR
 13825 ;;		_EUSART_DefaultErrorHandler
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           
 13830                           ;psect for function _EUSART_RxDataHandler
 13831  17A3                     _EUSART_RxDataHandler:	
 13832                           
 13833                           ;mcc_generated_files/eusart.c: 206:     eusartRxBuffer[eusartRxHead++] = RCREG;
 13834                           
 13835                           ;incstack = 0
 13836                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 13837  17A3  0023               	movlb	3	; select bank3
 13838  17A4  0819               	movf	25,w	;volatile
 13839  17A5  00F0               	movwf	??_EUSART_RxDataHandler
 13840  17A6  087C               	movf	_eusartRxHead,w
 13841  17A7  3ED6               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 13842  17A8  0086               	movwf	6
 13843  17A9  0187               	clrf	7
 13844  17AA  0870               	movf	??_EUSART_RxDataHandler,w
 13845  17AB  0081               	movwf	1
 13846  17AC  3001               	movlw	1
 13847  17AD  00F0               	movwf	??_EUSART_RxDataHandler
 13848  17AE  0870               	movf	??_EUSART_RxDataHandler,w
 13849  17AF  07FC               	addwf	_eusartRxHead,f	;volatile
 13850                           
 13851                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13852  17B0  3008               	movlw	8
 13853  17B1  027C               	subwf	_eusartRxHead,w	;volatile
 13854  17B2  1803               	btfsc	3,0
 13855                           
 13856                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         eus
      +                          artRxHead = 0;
 13857  17B3  01FC               	clrf	_eusartRxHead	;volatile
 13858                           
 13859                           ;mcc_generated_files/eusart.c: 211:     eusartRxCount++;
 13860  17B4  3001               	movlw	1
 13861  17B5  00F0               	movwf	??_EUSART_RxDataHandler
 13862  17B6  0870               	movf	??_EUSART_RxDataHandler,w
 13863  17B7  0020               	movlb	0	; select bank0
 13864  17B8  07EA               	addwf	_eusartRxCount,f	;volatile
 13865  17B9  0008               	return
 13866  17BA                     __end_of_EUSART_RxDataHandler:	
 13867  007E                     btemp	set	126	;btemp
 13868  007E                     int$flags	set	126
 13869  007E                     wtemp0	set	126


Data Sizes:
    Strings     92
    Constant    73
    Data        49
    BSS         143
    Persistent  40
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     50      79
    BANK1            80      2      76
    BANK2            80      0      64
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2585$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Service$2585	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2275_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Service@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    sp__memcpy	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonReleasedCallback(), 

    callback_pressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonPressedCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    S826$sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    S826$sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_DATA_PROCESS
    _main->_check_message
    _check_message->_printf
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize
    _update_state->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   48088
                                              0 BANK1      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    6576
                                             47 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4370
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23731
                                             40 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8837
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8738
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1446
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1       0
                                              4 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1959
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     132
                                              4 COMMON     1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              4 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0    6589
                                             47 BANK0      3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
                       _update_state
 ---------------------------------------------------------------------------------
 (2) _update_state                                         0     0      0    6514
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    6514
                                             39 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    4813
                                             31 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    4378
                                             22 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 8     6      2    2894
                                             16 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2650
                                              7 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1127
                                             11 COMMON     1     0      1
                                              0 BANK0      7     7      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     812
                                              3 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      44
                                              2 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
 ---------------------------------------------------------------------------------
 (13) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (14) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (14) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
     _RELAY_PROCESS
     _update_state
       _printf
         _vfprintf
           _vfpfcnvrt
             _ctoa
               _pad
                 _fputc
                   _putch
                     _EUSART_Write
                 _fputs
                   _fputc
                     _putch
                       _EUSART_Write
                 _strlen
             _fputc
               _putch
                 _EUSART_Write
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     108       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     32      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      20      12       40.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     108      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jul 05 15:54:49 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                          _update_state 03B1  
                                      ___bmul@product 0073                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                                                  l87 1638                            __end_of_Sensor_setInactive 1629  
                           _Sensor_setCalibratAcqTime 1670                                           __CFG_LVP$ON 0000  
                                                 l321 045A                                                   l405 06FA  
                                                 l414 0700                                                   l423 0706  
                                                 l504 073C                                                   l432 070C  
                                                 l513 0742                                                   l441 0712  
                                                 l522 0748                                                   l450 0718  
                                                 l530 0788                                                   l386 06EE  
                                                 l459 071E                                                   l468 0724  
                                                 l396 06F4                                                   l477 072A  
                                                 l486 0730                                                   l495 0736  
                                                 l831 0314                                                   l860 0111  
                                                 l862 010D                                                   l867 0114  
                                                 l877 01B4                                                   l879 01CB  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 _abs 17D1                                ??_EUSART_RxDataHandler 0070  
                                                 _pad 0BBA                        ?_EUSART_SetFramingErrorHandler 0071  
                             ?_Sensor_loadADCSettings 0072                                       _TMR2_Initialize 1647  
                                        __CFG_BORV$LO 0000                                         DATA_PROCESS@x 0051  
                                                 wreg 0009                      ??_MTOUCH_Sensor_Sampled_ResetAll 0072  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      __size_of_MTOUCH_Sensor_SampleAll 0016  
                      Sensor_getScanGroupIndex@sensor 0073                     __size_of_MTOUCH_Sensor_Initialize 0015  
                           ?_MTOUCH_Sensor_Initialize 0070                                          ?_EUSART_Read 0070  
                                                ?_abs 0071                                                  l1300 0681  
                                                l1227 0651                                                  l1309 0687  
                                                l1237 0657                                                  l1318 068D  
                                                l1246 065D                                                  l1327 0693  
                                                l1255 0663                                                  l1336 0699  
                                                l1264 0669                                                  l1096 062C  
                                                l1345 069F                                                  l1273 066F  
                                                l1354 06A5                                                  l1282 0675  
                                                l1363 06AB                                                  l1291 067B  
                                                l1371 06EB                                                  l1460 0BD0  
                                                l1463 0BF0                                                  l4024 074E  
                                                l1464 0BFB                                                  l4034 06B1  
                                                l5022 0B76                                                  l4312 0B5F  
                                                l5016 0B74                                                  l4314 0B61  
                                                l6010 0CFA                                                  l6002 0CDA  
                                                l4318 0B6C                                                  l6014 0D03  
                                                l6006 0CEA                                                  l6104 0A46  
                                                l6106 0A63                                                  l6210 03C0  
                                                l4290 0978                                                  l4282 0969  
                                                l6026 1760                                                  l6122 16A7  
                                                l6220 03E3                                                  l6212 03C7  
                                                l5164 081F                                                  l6060 0D1B  
                                                l6044 0992                                                  l6230 0406  
                                                l6222 03EA                                                  l6214 03CE  
                                                l6206 03B2                                                  l4542 0E2E  
                                                l6054 1694                                                  l4294 0980  
                                                l4286 0970                                                  l6062 0D1F  
                                                ?_pad 0027                                                  l3824 0AD7  
                                                l5600 0BCE                                                  l6232 040D  
                                                l6224 03F1                                                  l6216 03D5  
                                                l6208 03B9                                                  l6240 0422  
                                                l6320 047A                                                  l6312 046E  
                                                l6304 045E                                                  l4544 0E36  
                                                l3840 09C5                                                  l6152 0FA9  
                                                l6136 084B                                                  l6234 0414  
                                                l6226 03F8                                                  l6218 03DC  
                                                l6306 0465                                                  l6082 0623  
                                                l3850 09D8                                                  l6162 0FC9  
                                                l6170 0FFD                                                  l6146 0F9A  
                                                l3828 0AFA                                                  l6236 041B  
                                                l6228 03FF                                                  l6340 0498  
                                                l6332 048C                                                  l6324 0480  
                                                l6316 0474                                                  l6308 0468  
                                                l4548 0E4A                                                  l4388 0F28  
                                                l6092 0D8F                                                  l6076 05EA  
                                                l3844 09C7                                                  l3940 0310  
                                                l6156 0FB9                                                  l6252 1779  
                                                l5606 0BD2                                                  l5614 16F7  
                                                l3838 09B6                                                  l3918 16E2  
                                                l3880 089F                                                  l6360 04B6  
                                                l6352 04AA                                                  l6344 049E  
                                                l6336 0492                                                  l6328 0486  
                                                l6272 16B6                                                  l3928 1683  
                                                l3960 0390                                                  l5800 01D7  
                                                l4496 08DA                                                  l6168 0FDA  
                                                l6440 022A                                                  l5618 16FD  
                                                l6194 0C95                                                  l3954 036B  
                                                l5810 01F3                                                  l5706 00DC  
                                                l6258 1782                                                  l6506 02D6  
                                                l6364 04BC                                                  l6356 04B0  
                                                l6348 04A4                                                  l3980 0EC2  
                                                l3972 0E8F                                                  l5804 01DF  
                                                l5740 0117                                                  l5732 0108  
                                                l5716 00EE                                                  l5652 008B  
                                                l5644 0077                                                  l4676 178E  
                                                l4940 0B72                                                  l6284 0911  
                                                l6516 02F2                                                  l6508 02DA  
                                                l6452 024E                                                  l3886 17ED  
                                                l6374 04C5                                                  l3974 0E93  
                                                l3958 037E                                                  l5654 0091  
                                                l5662 0093                                                  l6294 0924  
                                                l6462 0269                                                  l6470 0282  
                                                l3888 17F9                                                  l6368 04C2  
                                                l5840 17CE                                                  l5816 0205  
                                                l5752 015C                                                  l5656 00A5  
                                                l6392 082C                                                  l6288 0913  
                                                l5850 0946                                                  l4890 0876  
                                                l5690 00B1                                                  l5674 0099  
                                                l6474 028A                                                  l5596 0BC6  
                                                l5764 0191                                                  l5756 0177  
                                                l5686 00A7                                                  l6478 028F  
                                                l5848 0940                                                  l5928 0C43  
                                                l5768 01AB                                                  l5954 0577  
                                                l5948 0556                                                  l5964 0588  
                                                l5796 01CF                                                  l5892 07BD  
                                                l5884 07B9                                                  l5876 07A6  
                                                l6780 0FE7                                                  l6790 0756  
                                                l5958 057D                                                  l5894 07D0  
                                                l6782 0FEC                                                  l6784 04CD  
                                                l5992 0CBF                                                  l6776 092C  
                                                l6786 0428                                                  l5898 07E9  
                                                l5986 0CB7                                                  l6778 0B7E  
                                                l6788 06B9                                                  l5998 0CD2  
                                                STR_1 1800                                                  STR_2 180E  
                                                STR_3 1813                                                  STR_4 1818  
                                                STR_5 181D                                                  STR_6 1822  
                                                STR_7 1827                                                  STR_8 182C  
                                                STR_9 1831                         ?_Button_Reading_Update_Helper 0070  
                                                u2035 0AF8                                                  _LATA 010C  
                                                _LATB 010D                                                  u2215 0EB4  
                                                _LATC 010E                                                  u3040 0E15  
                                                u3035 0DDD                                                  u2075 17DA  
                                                u3045 0E11                                                  u2165 03A4  
                                                u2185 0E73                                                  u2195 0E7D  
                                                u3245 1791                                                  u3450 081D  
                                                u3445 080E                                                  u5207 02EA  
                                                u4425 07D7                                                  u5217 02FE  
                                                u2835 0EF0                                                  u2845 0F36  
                                                u4445 0B07                                                  u4455 0A04  
                                                u5187 025F                                                  u5197 0277  
                                                u4655 0D48                                                  u3965 0BDC  
                                                u4685 0600                                                  u4795 0C59  
                          Button_State_Pressed@button 0024                                                  _TMR2 001A  
                               __end_of_check_message 0935                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01BE  
                            _Sensor_getScanGroupIndex 09B4                             ?_Sensor_Acq_ExecutePacket 007B  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0071                                                  _dbuf 01A0  
                                                _ctoa 0935                                                  _main 0212  
                __size_of_MTOUCH_Button_InitializeAll 001C                                                  _prec 00E0  
                                                _rest 0066                                                  _nout 00DE  
                                                pad@i 002B                                                  pad@p 0028  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                                                pad@w 002D                  __size_of_MTOUCH_Sensor_InitializeAll 000E  
                                                btemp 007E                                                  start 0016  
                                   ___bmul@multiplier 0074                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                        __end_of_Sensor_autoCalibration 0EDE  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 180E          Sensor_Scanfrequency_Evaluation@frequency_hop 1809  
                            _myButtonReleasedCallback 15C5                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 001B                         __size_of_Button_State_Pressed 0066  
                                               ??_abs 0073                                                 ??_pad 002A  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 0078  
                       ??_MTOUCH_Sensor_RawSample_Get 0077                         Sensor_RawSample_Update@sensor 0077  
                       myButtonPressedCallback@button 0074                             __size_of_Sensor_isEnabled 0010  
                                       ?_EUSART_Write 0070                        __size_of_OSCILLATOR_Initialize 0006  
                       __end_of_OSCILLATOR_Initialize 1615     Sensor_Scanfrequency_Evaluation@best_packet_sample 0036  
                 __end_of_Sensor_isCalibratingAcqTime 1647                           _Sensor_isCalibratingAcqTime 163F  
                                               ?_ctoa 0030                                                 ?_main 0070  
                                               STR_10 1836                                                 STR_11 183B  
                                               STR_12 1840                                                 STR_13 1845  
                                               STR_14 184A                                                 STR_15 184F  
                                               STR_16 1854                                                 STR_17 1859  
                                       __CFG_WDTE$OFF 0000                                                 STR_18 1862  
                      __end_of_Sensor_loadADCSettings 03B1                                                 _T2CON 001C  
                             __size_of_Button_Service 0055                                                 i1l145 0014  
                                               _RCREG 0199                                                 _RCSTA 019D  
                                        vfpfcnvrt@fmt 0036                                                 _TRISA 008C  
                                               _TRISB 008D                                                 _TRISC 008E  
                                               _TXREG 019A                                                 _TXSTA 019E  
                     __size_of_Button_DefaultCallback 0001                                  ??_MTOUCH_needReburst 0071  
                     __size_of_Sensor_DefaultCallback 0001                                                 _blink 0063  
                                               _flags 0058                               __size_of_Sensor_Service 0093  
               __end_of_MTOUCH_Sensor_Scan_Initialize 16D4                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 16C4                                        _WDT_Initialize 15DD  
                             Sensor_setSampled@sensor 0071                                                 _fputc 0ACE  
                                               _fputs 089B                                          LED_PROCESS@x 0073  
                                               pad@fp 002F                                                 _width 0056  
                                               ctoa@c 0030                                                 _putch 15E1  
                                               ctoa@w 0033                      __size_of_Button_State_NotPressed 00A4  
                                               pclath 000A                                  _Sensor_Sampled_Reset 1630  
                                               status 0003                                                 wtemp0 007E  
                                     _TMR2_StartTimer 15CD                      __size_of_TMR2_LoadPeriodRegister 0005  
                           __size_of_Sensor_setActive 0007                                Sensor_isEnabled@sensor 0072  
                                     __initialization 0018                                          __end_of_ctoa 095E  
                                        __end_of_main 0306                                  _Sensor_setCalibrated 1658  
                               __size_of_DATA_PROCESS 00A8                                        ??_EUSART_Write 0071  
                             __end_of_TMR2_Initialize 164F                                        __CFG_LPBOR$OFF 0000  
                         ?_INTERRUPT_InterruptManager 0070                        ??_EUSART_SetRxInterruptHandler 0073  
                    __end_of_MTOUCH_Button_Initialize 0B39                                                ??_ctoa 0032  
                                              ??_main 00EA                               _MTOUCH_Sensor_Calibrate 1706  
                           Sensor_Service@sensor_adc1 0044                             Sensor_Service@sensor_adc2 0045  
                             ??_Button_Reading_Update 007C                  MTOUCH_Sensor_Sampled_ResetAll@sensor 0073  
                            ?_Button_Deviation_Update 0070                                __end_of_WDT_Initialize 15E1  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0077  
           __end_of_EUSART_DefaultFramingErrorHandler 15C5            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0070                    ?_EUSART_DefaultFramingErrorHandler 0070  
                   _EUSART_DefaultFramingErrorHandler 15C4                            _EUSART_OverrunErrorHandler 00E4  
                __size_of_MTOUCH_Sensor_RawSample_Get 0017                                                ?_fputc 0073  
                                              ?_fputs 007B                                                _APFCON 011D  
                                              _ANSELA 018C                                                ?_putch 0070  
                                              _ANSELB 018D                                                _ANSELC 018E  
                          __end_of_EUSART_is_rx_ready 15CD                                                _BORCON 0116  
                                              i1l4924 0ABD                                                i1l4918 0AAF  
                                              i1l4928 0ACB                                 ?_Sensor_Sampled_Reset 0070  
                                              _OSCCON 0099                                                _SPBRGH 019C  
                                              _SPBRGL 019B                                                _WDTCON 0097  
                   MTOUCH_Button_InitializeAll@button 0020                                          _DATA_PROCESS 045B  
                      ??_Button_Reading_Update_Helper 0079                                _Button_DefaultCallback 15C6  
                     __end_of_MTOUCH_Service_Mainloop 083D                                        __CFG_PWRTE$OFF 0000  
                                 _Sensor_isCalibrated 164F                                _Sensor_DefaultCallback 07FF  
                                        vfprintf@cfmt 0045                                         _packet_sample 0052  
                                              ___bmul 16F5                                 ?_Sensor_setCalibrated 0070  
                        Sensor_DefaultCallback@sensor 0071                                        __CFG_STVREN$ON 0000  
                    __size_of_myButtonPressedCallback 002B                                                _memcpy 0989  
                                              _rxData 0068                      __end_of_MTOUCH_Button_ServiceAll 16C4  
                                              _printf 16E4                                                pad@buf 0027  
                                __size_of_LED_PROCESS 009D                                                ctoa@fp 0035  
                        Sensor_autoCalibration@sensor 007A                                                _strlen 17E8  
                                              fputc@c 0073                                                fputs@c 0023  
                                              fputs@i 0024                                                fputs@s 0026  
                             _MTOUCH_Sensor_SampleAll 1777                          Button_DefaultCallback@button 0074  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0D05  
                              __size_of_RELAY_PROCESS 009D                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 0A6C                   Sensor_postAcquisitionProcess@sensor 0079  
                             __end_of_TMR2_StartTimer 15D0                    __size_of_Sensor_setCalibratAcqTime 000D  
            __end_of_MTOUCH_Button_SetPressedCallback 15F7             __size_of_MTOUCH_Button_SetPressedCallback 0006  
                  ??_MTOUCH_Button_SetPressedCallback 0073                     ?_MTOUCH_Button_SetPressedCallback 0071  
                    _MTOUCH_Button_SetPressedCallback 15F1                              __size_of_Sensor_isActive 000D  
                     MTOUCH_Sensor_RawSample_Get@name 0078                   Sensor_getScanGroupIndex@sensorGroup 0074  
                                __size_of_EUSART_Read 0025                                     _SYSTEM_Initialize 1728  
                             __end_of__initialization 0050                   __size_of_Button_Baseline_Initialize 002E  
                      ?_MTOUCH_Sensor_Scan_Initialize 0070                       ??_Sensor_postAcquisitionProcess 0075  
                                  ?_SYSTEM_Initialize 0070                                   _Button_StateMachine 00A0  
                          __end_of_Button_Tick_helper 090E                         MTOUCH_Sensor_Calibrate@sensor 0076  
         Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024                                   ___bmul@multiplicand 0071  
                                      __pcstackCOMMON 0070                               _MTOUCH_Button_isPressed 0806  
                                        __pidataBANK0 15D6                                          __pidataBANK1 0A0F  
         __end_of_MTOUCH_Button_SetNotPressedCallback 15F1          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 15EB                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 17A3                                         __end_of_fputc 0B03  
                                       __end_of_fputs 08C1                      __end_of_MTOUCH_Sensor_Initialize 1777  
                                       __end_of_putch 15E6                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 16D4                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0E54                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 0C54                      __end_of_Sensor_Acq_ExecutePacket 0212  
                          ?_Button_State_Initializing 0024                                  Button_Service@button 002C  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00CE  
                      __end_of_Button_Baseline_Update 0F6D                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 0B03  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0F6D  
                             _Button_State_NotPressed 05AB                         __size_of_MTOUCH_Sensor_Enable 0011  
                                  _Sensor_setInactive 1622                                     _sensor_scan_group 185E  
                                             ??_fputc 0076                             __end_of_SYSTEM_Initialize 173A  
                                   _lowpowerActivated 0061                                               ??_fputs 0020  
                    MTOUCH_Sensor_isCalibrated@sensor 0076                                ??_Sensor_Sampled_Reset 0071  
                                             ??_putch 0072                                            __pbssBANK0 0052  
                                          __pbssBANK1 00CE                                            __pbssBANK2 0120  
                                          __pbssBANK3 01A0                                            _check_data 0B70  
                                __end_of_EUSART_Write 163F                               _TMR2_LoadPeriodRegister 15E6  
                          ??_myButtonReleasedCallback 0072                          Sensor_loadADCSettings@sensor 0079  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 161B  
                         __size_of_EUSART_Receive_ISR 0032                            __end_of_mtouch_button_init 1040  
                                   _last_touch_status 005C           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025  
                              ??_Sensor_setCalibrated 0071                                            __pmaintext 0212  
                                       _RELAY_PROCESS 064F                                               ?___bmul 0071  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                        MTOUCH_Sensor_wasSampled@sensor 0076  
                                          __pintentry 0004                                __end_of_Button_Service 0CA9  
                                             ?_memcpy 0071                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 0859  
                         _MTOUCH_Button_InitializeAll 083D                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0071                   __end_of_MTOUCH_Sensor_InitializeAll 16B4  
                         _MTOUCH_Sensor_InitializeAll 16A6                             ??_MTOUCH_Sensor_SampleAll 0046  
                                             ?_printf 0047                       __end_of_Sensor_RawSample_Update 08E7  
                                ??_Sensor_setInactive 0071                                               ?_strlen 0071  
                   __size_of_MTOUCH_Sensor_wasSampled 000E                             ?_MTOUCH_Sensor_wasSampled 0070  
                                       _eusartRxCount 006A                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 0071                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 0D67                                __end_of_Sensor_Service 1000  
                             Sensor_Service@scanGroup 0042                              _MTOUCH_Button_ServiceAll 16B4  
                           __end_of_sensor_scan_group 1862                                    __size_of_vfpfcnvrt 00A8  
                       __size_of_EUSART_RxDataHandler 0017                      __size_of_MTOUCH_Service_Mainloop 001C  
                        __end_of_Button_State_Pressed 0DCD                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 0073                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 0079                       Sensor_setCalibratAcqTime@sensor 0071  
                                __size_of_MTOUCH_Tick 0003                   Sensor_loadADCSettings@addressOffset 0078  
                __size_of_Sensor_isCalibratingAcqTime 0008                 Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021  
                           ??_MTOUCH_Button_isPressed 0071                                            _count_conf 005E  
                                   ??_Sensor_isActive 0071                   __size_of_EUSART_DefaultErrorHandler 0003  
                                      ?_RELAY_PROCESS 0070                 __end_of_Sensor_postAcquisitionProcess 0B70  
              __size_of_Sensor_postAcquisitionProcess 0037                         _Sensor_postAcquisitionProcess 0B39  
                             _myButtonPressedCallback 095E                               Sensor_Acquisition@retry 003D  
                                     __size_of___bmul 0011                                           _AD1CON0bits 0711  
                      MTOUCH_Button_Initialize@button 007A                                           _AD2CON0bits 0791  
                                           ?_vfprintf 003F                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 090E  
                                             __ptext2 0B70                                               __ptext3 1728  
                                             __ptext4 15DD                                               __ptext5 1647  
                                             __ptext6 0859                                               __ptext7 160F  
                                             __ptext8 1664                                               __ptext9 16A6  
                              __size_of_check_message 0027                                       __size_of_printf 0011  
                         Button_Reading_Update@button 0020                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 1762                                 _OSCILLATOR_Initialize 160F  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 004D                             ??_Button_State_NotPressed 0025  
                                             _prcData 0067                                       ?_Sensor_Service 0070  
                            ??_PIN_MANAGER_Initialize 0071                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 1698  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 0054  
                                    _callback_sampled 00A8                             ??_TMR2_LoadPeriodRegister 0071  
                     Sensor_RawSample_Update@adcIndex 0076                            __size_of_SYSTEM_Initialize 0012  
                                             clrloop0 1616                                      _callback_pressed 00A6  
                      MTOUCH_Sensor_Initialize@sensor 0078                                  end_of_initialization 0050  
                                         ?_check_data 0070                               ?_Button_DefaultCallback 0074  
               __end_of_EUSART_SetOverrunErrorHandler 1609                __size_of_EUSART_SetOverrunErrorHandler 0006  
                       _EUSART_SetOverrunErrorHandler 1603                                               memcpy@d 007A  
                                             memcpy@n 0073                                               memcpy@s 0077  
                                             fputc@fp 0075                                               init_ram 0800  
                                             fputs@fp 007B                                               initloop 0801  
                             ?_Sensor_DefaultCallback 0071                         Sensor_Acquisition@sensor_adc1 003E  
                       Sensor_Acquisition@sensor_adc2 003B                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 0A6C                          ??_MTOUCH_Sensor_isCalibrated 0075  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 05AB  
                 __end_of_MTOUCH_Sensor_RawSample_Get 17D1                           _MTOUCH_Sensor_RawSample_Get 17BA  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 15CA  
                                          ??_vfprintf 0042                                               strlen@a 0074  
                                             strlen@s 0075                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                                   ?_EUSART_is_rx_ready 0070  
                              Sensor_setActive@sensor 0071                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0034                         Button_Deviation_Update@button 0020  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0022                                 __size_of_EUSART_Write 0008  
            MTOUCH_Button_SetPressedCallback@callback 0071                            MTOUCH_Sensor_Enable@sensor 0076  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0023                                   _callback_notPressed 006C  
                 __size_of_MTOUCH_Sensor_isCalibrated 0015                        __end_of_Button_DefaultCallback 15C7  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032  
                                  _sensor_globalFlags 0060                              __end_of_Sensor_isEnabled 16E4  
                          Sensor_setCalibrated@sensor 0071                        __end_of_Sensor_DefaultCallback 0800  
                    __end_of_myButtonReleasedCallback 15C6                             __end_of_EUSART_Initialize 0A9C  
                                ??_EUSART_is_rx_ready 0071                                         _check_message 090E  
                            ??_Sensor_autoCalibration 0075                                             _TXSTAbits 019E  
                                       _check_request 0064                                       ??_RELAY_PROCESS 0071  
                           ??_myButtonPressedCallback 0075                      __size_of_Sensor_RawSample_Update 0026  
                                  _Sensor_Acquisition 0CA9                              ??_Sensor_loadADCSettings 0073  
                                       ?_update_state 0070                                         ??_LED_PROCESS 0071  
                                _Button_State_Pressed 0D67                                        __end_of___bmul 1706  
                  __end_of_EUSART_DefaultErrorHandler 15CA                            _EUSART_DefaultErrorHandler 15C7  
                                 ?_Sensor_Acquisition 003B                                           vfpfcnvrt@ap 0037  
                                         vfpfcnvrt@fp 003E                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                          _EUSART_Write 1637  
                                 __size_of_check_data 004A                                    _Button_Tick_helper 08E7  
                                      __end_of_memcpy 09B4                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 1622  
                    TMR2_LoadPeriodRegister@periodVal 0071                                        __end_of_printf 16F5  
                         ??_Button_State_Initializing 0025                                        __end_of_strlen 1800  
                                 start_initialization 0018                               _MTOUCH_Service_Mainloop 0821  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 178D  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 17E8  
                                         __end_of_pad 0C07                                        _TMR2_StopTimer 15D0  
                                       ??_EUSART_Read 0071          EUSART_SetRxInterruptHandler@interruptHandler 0071  
                                         putch@txData 0072                                  ??_Sensor_Acquisition 003C  
                                      ?_check_message 0070                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 0024                        Sensor_autoCalibration@adcIndex 0079  
                      ?_EUSART_SetOverrunErrorHandler 0071                      __end_of_MTOUCH_Sensor_wasSampled 16A6  
                                ??_Button_Tick_helper 0071                          __end_of_MTOUCH_Sensor_Enable 1728  
                                         vfprintf@fmt 003F                                          _packet_noise 005A  
                                      ??_update_state 007C                            _EUSART_FramingErrorHandler 00E6  
                                            ??___bmul 0072                                 ?_Button_State_Pressed 0024  
                              _EUSART_SetErrorHandler 15F7                            ??_MTOUCH_Button_ServiceAll 002D  
                                         __pdataBANK0 006C                                           __pdataBANK1 00A0  
                                      check_message@x 0051                                              ??_memcpy 0075  
                         __end_of_Sensor_isCalibrated 1658                          ??_Button_Baseline_Initialize 0020  
                                       _sample_period 006E                                  ??_MTOUCH_Button_Tick 0074  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 0071  
                                            ??_printf 004B                                              ??_strlen 0073  
                        ?_Sensor_isCalibratingAcqTime 0070                       __end_of_myButtonPressedCallback 0989  
                                 __end_of_LED_PROCESS 0789                                __end_of_TMR2_StopTimer 15D3  
                                         __pbssCOMMON 007C                                             ___latbits 0002  
                                       __pcstackBANK0 0020                                         __pcstackBANK1 00EA  
                         _Sensor_loadADCSettings$1223 0076                              __size_of_TMR2_Initialize 0008  
                                     _Sensor_isActive 167D                        MTOUCH_Button_ServiceAll@button 002E  
                                 Sensor_Service@error 0043                            __end_of_EUSART_Receive_ISR 0ACE  
                       __size_of_Sensor_Sampled_Reset 0007                            __size_of_EUSART_Initialize 0030  
                             _Button_Deviation_Update 0DCD                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00E8                                   __end_of_EUSART_Read 089B  
                           _Button_State_Initializing 0D05                    __end_of_MTOUCH_Sensor_isCalibrated 1762  
                          _MTOUCH_Sensor_isCalibrated 174D                                             __pnvBANK1 00E2  
                     __size_of_Sensor_autoCalibration 008A                     __size_of_Sensor_getScanGroupIndex 002D  
                                   _Sensor_setSampled 1629                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 17BA                                _PIN_MANAGER_Initialize 0859  
                                    ??_Button_Service 0029                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 0072                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                       __size_of_Sensor_setCalibrated 000C                       __size_of_Sensor_loadADCSettings 00AB  
                                            _AAD1CON2 0713                                              _AAD1CON3 0714  
                                            _AAD2CON3 0794                                              _AAD1RES0 071A  
                                        _eusartRxHead 007C                                              _AAD2RES0 079A  
                                        _eusartRxTail 006B                                      ??_Sensor_Service 003F  
                          ??_Sensor_Acq_ExecutePacket 0020                          ??_INTERRUPT_InterruptManager 0071  
                                 ??_Sensor_setSampled 0071                     __size_of_myButtonReleasedCallback 0001  
                           ?_myButtonReleasedCallback 0074                             ??_MTOUCH_Service_Mainloop 0048  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                         __size_of_Sensor_setInactive 0007                        Sensor_Acq_ExecutePacket@last_a 0028  
                      Sensor_Acq_ExecutePacket@last_b 002A                                       ?_TMR2_StopTimer 0070  
                       ??_Sensor_isCalibratingAcqTime 0071                                         ??_MTOUCH_Tick 0076  
                                     ??_check_message 004F                                        __size_of_fputc 0035  
                                      __size_of_fputs 0026                                        __size_of_putch 0005  
                                        ??_check_data 0071                                        _eusartRxBuffer 00D6  
                           __end_of_Sensor_setSampled 1630                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0071                                              _LATBbits 010D  
                                            _LATCbits 010E                                         ?_DATA_PROCESS 0070  
                             _Sensor_RawSample_Update 08C1                     __end_of_Sensor_setCalibratAcqTime 167D  
                                           clear_ram0 1615                                              _PIE1bits 0091  
                                   _eusartRxLastError 0069                              __size_of_TMR2_StartTimer 0003  
                 __size_of_INTERRUPT_InterruptManager 0012                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0073                Sensor_Acq_ExecutePacket@packet_counter 002C  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0025  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 174D               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 173A                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 15DD            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 15D9                    Sensor_Acq_ExecutePacket@ADxIF_flag 0026  
                                         _LED_PROCESS 06EC                              _MTOUCH_Sensor_wasSampled 1698  
                                  _mtouch_time_toScan 0062                                             _vfpfcnvrt 0503  
                            ??_Button_Baseline_Update 0071                                    __end_of_check_data 0BBA  
                             __end_of_Sensor_isActive 168A                                _Sensor_autoCalibration 0E54  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 0074  
                              _Sensor_loadADCSettings 0306                                  _MTOUCH_Sensor_Enable 1717  
                                         _EUSART_Read 0876                                  __end_of_update_state 045B  
                                          vfpfcnvrt@c 003D                              Button_Tick_helper@button 0073  
                           ??_Button_Deviation_Update 0071                                 _Button_Reading_Update 168A  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                      ??_DATA_PROCESS 004F                                     ??_TMR2_Initialize 0071  
                                 __end_of_MTOUCH_Tick 15D6                                     _MTOUCH_Initialize 1664  
                     __end_of_MTOUCH_Sensor_Calibrate 1717                                    ??_Sensor_isEnabled 0071  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0076  
                                           memcpy@tmp 0076                                            vfprintf@ap 0041  
                                          vfprintf@fp 0044                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 0071                    __end_of_Button_Baseline_Initialize 0A0F  
                          _Button_Baseline_Initialize 09E1                                   _EUSART_ErrorHandler 00E2  
                                 ??_MTOUCH_Initialize 007C                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 0036                              ?_Button_State_NotPressed 0024  
                                         check_data@x 0073                                    Button_Service@name 002B  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0071                  Sensor_Scanfrequency_Evaluation@retry 0035  
                                  ??_Sensor_setActive 0071                                  _EUSART_RxDataHandler 17A3  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 1762  
                                            __ptext11 1717                                              __ptext20 0002  
                                            __ptext12 083D                                              __ptext21 15D3  
                                            __ptext13 0989                                              __ptext30 07FF  
                                            __ptext22 178D                                              __ptext14 0A6C  
                                            __ptext31 0CA9                                              __ptext23 08E7  
                                            __ptext15 1609                                              __ptext40 0306  
                                            __ptext32 0B39                                              __ptext24 173A  
                                            __ptext16 1603                                              __ptext41 164F  
                                            __ptext33 1622                                              __ptext25 1630  
                                            __ptext17 15FD                                              __ptext50 16C4  
                                            __ptext42 16D4                                              __ptext34 161B  
                                            __ptext26 1777                                              __ptext18 15F7  
                                            __ptext51 16B4                                              __ptext43 167D  
                                            __ptext35 0789                                              __ptext27 0F6D  
                                            __ptext19 0821                                              __ptext60 15C5  
                                            __ptext52 0C54                                              __ptext44 0E54  
                                            __ptext36 0054                                              __ptext28 1629  
                                            __ptext61 0B03                                              __ptext53 1698  
                                            __ptext45 17D1                                              __ptext37 15D0  
                                            __ptext29 08C1                                              __ptext70 0806  
                                            __ptext62 1706                                              __ptext54 174D  
                                            __ptext46 1658                                              __ptext38 15CD  
                                            __ptext71 15F1                                              __ptext63 0EDE  
                                            __ptext55 05AB                                              __ptext47 1670  
                                            __ptext39 15E6                                              __ptext80 0935  
                                            __ptext72 15EB                                              __ptext64 09E1  
                                            __ptext56 0D05                                              __ptext48 163F  
                                            __ptext81 0BBA                                              __ptext73 15CA  
                                            __ptext65 168A                                              __ptext57 0D67  
                                            __ptext49 09B4                                              __ptext90 0A9C  
                                            __ptext82 17E8                                              __ptext74 0876  
                                            __ptext66 0C07                                              __ptext58 095E  
                                            __ptext91 15D9                                              __ptext83 089B  
                                            __ptext75 045B                                              __ptext67 17BA  
                                            __ptext59 15C6                                              __ptext92 15C4  
                                            __ptext84 0ACE                                              __ptext76 03B1  
                                            __ptext68 16F5                                              __ptext93 15C7  
                                            __ptext85 15E1                                              __ptext77 16E4  
                                            __ptext69 0DCD                                              __ptext94 17A3  
                                            __ptext86 1637                                              __ptext78 0A3D  
                                            __ptext87 064F                                              __ptext79 0503  
                                            __ptext88 06EC                             __end_of_MTOUCH_Initialize 1670  
                           ??_Sensor_RawSample_Update 0075                            __size_of_Sensor_setSampled 0007  
                         __size_of_EUSART_is_rx_ready 0003                                         __size_of_ctoa 0029  
                                       __size_of_main 00F4                       __end_of_MTOUCH_Sensor_SampleAll 178D  
                    Sensor_Scanfrequency_Evaluation@i 003A                               ?_EUSART_SetErrorHandler 0071  
                               __end_of_RELAY_PROCESS 06EC         EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                                            int$flags 007E                                              _vfprintf 0A3D  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0071  
                  __end_of_INTERRUPT_InterruptManager 0016                            _INTERRUPT_InterruptManager 0004  
                                           printf@fmt 0047                 __end_of_EUSART_SetFramingErrorHandler 1603  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 15FD  
                                      RELAY_PROCESS@x 0073                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 0047  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 0120                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 00AA  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                     __end_of_MTOUCH_Button_isPressed 0821                      __end_of_Sensor_getScanGroupIndex 09E1  
                                   __CFG_BOREN$NSLEEP 0000                                        __pstringtext10 1827  
                                      __pstringtext11 182C                                        __pstringtext20 1859  
                                      __pstringtext12 1831                                        __pstringtext21 1862  
                                      __pstringtext13 1836                                        __pstringtext22 0000  
                                      __pstringtext14 183B                                        __pstringtext15 1840  
                                      __pstringtext16 1845                                        __pstringtext17 184A  
                                      __pstringtext18 184F                                        __pstringtext19 1854  
                                         _MTOUCH_Tick 15D3                                ?_Button_Reading_Update 0070  
                    Button_Deviation_Update@deviation 0021                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 0079                     __size_of_MTOUCH_Button_Initialize 0036  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 0074  
             __end_of_Sensor_Scanfrequency_Evaluation 07FF              __size_of_Sensor_Scanfrequency_Evaluation 0076  
                   ??_Sensor_Scanfrequency_Evaluation 002F                      ?_Sensor_Scanfrequency_Evaluation 002E  
                     _Sensor_Scanfrequency_Evaluation 0789                               ?_PIN_MANAGER_Initialize 0070  
                         ??_Sensor_setCalibratAcqTime 0071                        __end_of_EUSART_SetErrorHandler 15FD  
                                   __CFG_CLKOUTEN$OFF 0000                           ?_MTOUCH_Sensor_isCalibrated 0070  
                __end_of_EUSART_SetRxInterruptHandler 160F                 __size_of_EUSART_SetRxInterruptHandler 0006  
                        _EUSART_SetRxInterruptHandler 1609                                         _config_status 0065  
                         __size_of_Button_Tick_helper 0027                       __end_of_Button_State_NotPressed 064F  
                                            printf@ap 004E                                    _EUSART_Receive_ISR 0A9C  
       EUSART_SetFramingErrorHandler@interruptHandler 0071                          __end_of_Sensor_Sampled_Reset 1637  
                                         ??_vfpfcnvrt 0038                                      ??_TMR2_StopTimer 0071  
                     __end_of_TMR2_LoadPeriodRegister 15EB                           __size_of_MTOUCH_Button_Tick 0016  
                                       __pstringtext1 1809                                         __pstringtext2 185E  
                                       __pstringtext3 1000                                         __pstringtext4 1800  
                                       __pstringtext5 180E                                         __pstringtext6 1813  
                                       __pstringtext7 1818                                         __pstringtext8 181D  
                                       __pstringtext9 1822                                  __end_of_DATA_PROCESS 0503  
                                 ?_EUSART_Receive_ISR 0070                                 __size_of_update_state 00AA  
                       ??_MTOUCH_Button_InitializeAll 007B                              ??_Button_DefaultCallback 0075  
                       ??_MTOUCH_Sensor_InitializeAll 0079                  Sensor_Acq_ExecutePacket@activeSensor 0027  
                    __size_of_MTOUCH_Sensor_Calibrate 0011                                ??_MTOUCH_Sensor_Enable 0075  
                   Sensor_isCalibratingAcqTime@sensor 0071                          __size_of_Sensor_isCalibrated 0009  
                            ??_Sensor_DefaultCallback 0072                          __end_of_Sensor_setCalibrated 1664  
                __end_of_Button_Reading_Update_Helper 0C54                 __size_of_Button_Reading_Update_Helper 004D  
                        _Button_Reading_Update_Helper 0C07                     __size_of_MTOUCH_Button_ServiceAll 0010  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 0024  
                                  EUSART_Write@txData 0071                            __size_of_MTOUCH_Initialize 000C  
                      __end_of_PIN_MANAGER_Initialize 0876                                _Button_Baseline_Update 0EDE  
                         MTOUCH_Button_isPressed@name 0072                                  ??_EUSART_Receive_ISR 0071  
                          ??_MTOUCH_Sensor_wasSampled 0075  
