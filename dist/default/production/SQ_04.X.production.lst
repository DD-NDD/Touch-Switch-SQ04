

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Aug 16 15:48:14 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	stringtext23,global,class=STRCODE,delta=2
    31                           	psect	cinit,global,class=CODE,merge=1,delta=2
    32                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    33                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    34                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    37                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    38                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    39                           	psect	inittext,global,class=CODE,delta=2
    40                           	psect	clrtext,global,class=CODE,delta=2
    41                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    42                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    43                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    44                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    45                           	psect	text1,local,class=CODE,merge=1,delta=2
    46                           	psect	text2,local,class=CODE,merge=1,delta=2
    47                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text4,local,class=CODE,merge=1,delta=2
    49                           	psect	text5,local,class=CODE,merge=1,delta=2
    50                           	psect	text6,local,class=CODE,merge=1,delta=2
    51                           	psect	text7,local,class=CODE,merge=1,delta=2
    52                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text11,local,class=CODE,merge=1,delta=2
    56                           	psect	text12,local,class=CODE,merge=1,delta=2
    57                           	psect	text13,local,class=CODE,merge=1,delta=2
    58                           	psect	text14,local,class=CODE,merge=1,delta=2
    59                           	psect	text15,local,class=CODE,merge=1,delta=2
    60                           	psect	text16,local,class=CODE,merge=1,delta=2
    61                           	psect	text17,local,class=CODE,merge=1,delta=2
    62                           	psect	text18,local,class=CODE,merge=1,delta=2
    63                           	psect	text19,local,class=CODE,merge=1,delta=2
    64                           	psect	text20,local,class=CODE,merge=1,delta=2
    65                           	psect	text21,local,class=CODE,merge=1,delta=2
    66                           	psect	text22,local,class=CODE,merge=1,delta=2
    67                           	psect	text23,local,class=CODE,merge=1,delta=2
    68                           	psect	text24,local,class=CODE,merge=1,delta=2
    69                           	psect	text25,local,class=CODE,merge=1,delta=2
    70                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    71                           	psect	text27,local,class=CODE,merge=1,delta=2
    72                           	psect	text28,local,class=CODE,merge=1,delta=2
    73                           	psect	text29,local,class=CODE,merge=1,delta=2
    74                           	psect	text30,local,class=CODE,merge=1,delta=2
    75                           	psect	text31,local,class=CODE,merge=1,delta=2
    76                           	psect	text32,local,class=CODE,merge=1,delta=2
    77                           	psect	text33,local,class=CODE,merge=1,delta=2
    78                           	psect	text34,local,class=CODE,merge=1,delta=2
    79                           	psect	text35,local,class=CODE,merge=1,delta=2
    80                           	psect	text36,local,class=CODE,merge=1,delta=2
    81                           	psect	text37,local,class=CODE,merge=1,delta=2
    82                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text39,local,class=CODE,merge=1,delta=2
    84                           	psect	text40,local,class=CODE,merge=1,delta=2
    85                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text42,local,class=CODE,merge=1,delta=2
    87                           	psect	text43,local,class=CODE,merge=1,delta=2
    88                           	psect	text44,local,class=CODE,merge=1,delta=2
    89                           	psect	text45,local,class=CODE,merge=1,delta=2
    90                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text48,local,class=CODE,merge=1,delta=2
    93                           	psect	text49,local,class=CODE,merge=1,delta=2
    94                           	psect	text50,local,class=CODE,merge=1,delta=2
    95                           	psect	text51,local,class=CODE,merge=1,delta=2
    96                           	psect	text52,local,class=CODE,merge=1,delta=2
    97                           	psect	text53,local,class=CODE,merge=1,delta=2
    98                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text55,local,class=CODE,merge=1,delta=2
   100                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text57,local,class=CODE,merge=1,delta=2
   102                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
   103                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text62,local,class=CODE,merge=1,delta=2
   107                           	psect	text63,local,class=CODE,merge=1,delta=2
   108                           	psect	text64,local,class=CODE,merge=1,delta=2
   109                           	psect	text65,local,class=CODE,merge=1,delta=2
   110                           	psect	text66,local,class=CODE,merge=1,delta=2
   111                           	psect	text67,local,class=CODE,merge=1,delta=2
   112                           	psect	text68,local,class=CODE,merge=1,delta=2
   113                           	psect	text69,local,class=CODE,merge=1,delta=2
   114                           	psect	text70,local,class=CODE,merge=1,delta=2
   115                           	psect	text71,local,class=CODE,merge=1,delta=2
   116                           	psect	text72,local,class=CODE,merge=1,delta=2
   117                           	psect	text73,local,class=CODE,merge=1,delta=2
   118                           	psect	text74,local,class=CODE,merge=1,delta=2
   119                           	psect	text75,local,class=CODE,merge=1,delta=2
   120                           	psect	text76,local,class=CODE,merge=1,delta=2
   121                           	psect	text77,local,class=CODE,merge=1,delta=2
   122                           	psect	text78,local,class=CODE,merge=1,delta=2
   123                           	psect	text79,local,class=CODE,merge=1,delta=2
   124                           	psect	text80,local,class=CODE,merge=1,delta=2
   125                           	psect	text81,local,class=CODE,merge=1,delta=2
   126                           	psect	text82,local,class=CODE,merge=1,delta=2,group=1
   127                           	psect	text83,local,class=CODE,merge=1,delta=2
   128                           	psect	text84,local,class=CODE,merge=1,delta=2
   129                           	psect	text85,local,class=CODE,merge=1,delta=2
   130                           	psect	text86,local,class=CODE,merge=1,delta=2
   131                           	psect	text87,local,class=CODE,merge=1,delta=2
   132                           	psect	text88,local,class=CODE,merge=1,delta=2
   133                           	psect	text89,local,class=CODE,merge=1,delta=2
   134                           	psect	text90,local,class=CODE,merge=1,delta=2
   135                           	psect	intentry,global,class=CODE,delta=2
   136                           	psect	text92,local,class=CODE,merge=1,delta=2
   137                           	psect	text93,local,class=CODE,merge=1,delta=2
   138                           	psect	text94,local,class=CODE,merge=1,delta=2
   139                           	psect	text95,local,class=CODE,merge=1,delta=2
   140                           	psect	text96,local,class=CODE,merge=1,delta=2
   141                           	psect	text97,local,class=CODE,merge=1,delta=2
   142                           	psect	text98,local,class=CODE,merge=1,delta=2
   143                           	psect	text99,local,class=CODE,merge=1,delta=2
   144                           	psect	text100,local,class=CODE,merge=1,delta=2
   145                           	dabs	1,0x7E,2
   146  0000                     
   147                           ; Version 2.05
   148                           ; Generated 20/12/2018 GMT
   149                           ; 
   150                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution.
   164                           ; 
   165                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   166                           ;        software without specific prior written permission.
   167                           ; 
   168                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   169                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   170                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   171                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   172                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   173                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   174                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   175                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   176                           ; 
   177                           ; 
   178                           ; Code-generator required, PIC16LF1559 Definitions
   179                           ; 
   180                           ; SFR Addresses
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  0011                     	;# 
   197  0012                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  008C                     	;# 
   208  008D                     	;# 
   209  008E                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0097                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  0116                     	;# 
   227  0117                     	;# 
   228  011D                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  018E                     	;# 
   232  0191                     	;# 
   233  0191                     	;# 
   234  0192                     	;# 
   235  0193                     	;# 
   236  0193                     	;# 
   237  0194                     	;# 
   238  0195                     	;# 
   239  0196                     	;# 
   240  0199                     	;# 
   241  019A                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019C                     	;# 
   245  019D                     	;# 
   246  019E                     	;# 
   247  019F                     	;# 
   248  020C                     	;# 
   249  020D                     	;# 
   250  0211                     	;# 
   251  0211                     	;# 
   252  0212                     	;# 
   253  0212                     	;# 
   254  0213                     	;# 
   255  0213                     	;# 
   256  0214                     	;# 
   257  0214                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0216                     	;# 
   262  0216                     	;# 
   263  0217                     	;# 
   264  0217                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  0611                     	;# 
   272  0612                     	;# 
   273  0613                     	;# 
   274  0613                     	;# 
   275  0614                     	;# 
   276  0615                     	;# 
   277  0616                     	;# 
   278  0616                     	;# 
   279  0711                     	;# 
   280  0711                     	;# 
   281  0711                     	;# 
   282  0712                     	;# 
   283  0712                     	;# 
   284  0713                     	;# 
   285  0713                     	;# 
   286  0713                     	;# 
   287  0714                     	;# 
   288  0714                     	;# 
   289  0714                     	;# 
   290  0715                     	;# 
   291  0715                     	;# 
   292  0716                     	;# 
   293  0716                     	;# 
   294  0716                     	;# 
   295  0716                     	;# 
   296  0717                     	;# 
   297  0717                     	;# 
   298  0717                     	;# 
   299  0717                     	;# 
   300  0718                     	;# 
   301  0718                     	;# 
   302  0718                     	;# 
   303  0719                     	;# 
   304  0719                     	;# 
   305  0719                     	;# 
   306  0719                     	;# 
   307  071A                     	;# 
   308  071A                     	;# 
   309  071A                     	;# 
   310  071A                     	;# 
   311  071A                     	;# 
   312  071B                     	;# 
   313  071B                     	;# 
   314  071C                     	;# 
   315  071C                     	;# 
   316  071C                     	;# 
   317  071C                     	;# 
   318  071C                     	;# 
   319  071D                     	;# 
   320  071D                     	;# 
   321  071E                     	;# 
   322  071E                     	;# 
   323  0791                     	;# 
   324  0791                     	;# 
   325  0793                     	;# 
   326  0793                     	;# 
   327  0794                     	;# 
   328  0794                     	;# 
   329  0796                     	;# 
   330  0796                     	;# 
   331  0796                     	;# 
   332  0797                     	;# 
   333  0797                     	;# 
   334  0797                     	;# 
   335  0798                     	;# 
   336  0798                     	;# 
   337  0799                     	;# 
   338  0799                     	;# 
   339  0799                     	;# 
   340  079A                     	;# 
   341  079A                     	;# 
   342  079A                     	;# 
   343  079B                     	;# 
   344  079C                     	;# 
   345  079C                     	;# 
   346  079C                     	;# 
   347  079D                     	;# 
   348  079E                     	;# 
   349  079E                     	;# 
   350  0F8C                     	;# 
   351  0F8D                     	;# 
   352  0F91                     	;# 
   353  0F96                     	;# 
   354  0F97                     	;# 
   355  0F9C                     	;# 
   356  0F9D                     	;# 
   357  0F9E                     	;# 
   358  0FE3                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE9                     	;# 
   365  0FEA                     	;# 
   366  0FEB                     	;# 
   367  0FED                     	;# 
   368  0FEE                     	;# 
   369  0FEF                     	;# 
   370  0000                     	;# 
   371  0001                     	;# 
   372  0002                     	;# 
   373  0003                     	;# 
   374  0004                     	;# 
   375  0005                     	;# 
   376  0006                     	;# 
   377  0007                     	;# 
   378  0008                     	;# 
   379  0009                     	;# 
   380  000A                     	;# 
   381  000B                     	;# 
   382  000C                     	;# 
   383  000D                     	;# 
   384  000E                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0095                     	;# 
   402  0096                     	;# 
   403  0097                     	;# 
   404  0099                     	;# 
   405  009A                     	;# 
   406  009B                     	;# 
   407  009B                     	;# 
   408  009C                     	;# 
   409  009D                     	;# 
   410  009E                     	;# 
   411  009F                     	;# 
   412  010C                     	;# 
   413  010D                     	;# 
   414  010E                     	;# 
   415  0116                     	;# 
   416  0117                     	;# 
   417  011D                     	;# 
   418  018C                     	;# 
   419  018D                     	;# 
   420  018E                     	;# 
   421  0191                     	;# 
   422  0191                     	;# 
   423  0192                     	;# 
   424  0193                     	;# 
   425  0193                     	;# 
   426  0194                     	;# 
   427  0195                     	;# 
   428  0196                     	;# 
   429  0199                     	;# 
   430  019A                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019C                     	;# 
   434  019D                     	;# 
   435  019E                     	;# 
   436  019F                     	;# 
   437  020C                     	;# 
   438  020D                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0216                     	;# 
   451  0216                     	;# 
   452  0217                     	;# 
   453  0217                     	;# 
   454  0391                     	;# 
   455  0392                     	;# 
   456  0393                     	;# 
   457  0394                     	;# 
   458  0395                     	;# 
   459  0396                     	;# 
   460  0611                     	;# 
   461  0612                     	;# 
   462  0613                     	;# 
   463  0613                     	;# 
   464  0614                     	;# 
   465  0615                     	;# 
   466  0616                     	;# 
   467  0616                     	;# 
   468  0711                     	;# 
   469  0711                     	;# 
   470  0711                     	;# 
   471  0712                     	;# 
   472  0712                     	;# 
   473  0713                     	;# 
   474  0713                     	;# 
   475  0713                     	;# 
   476  0714                     	;# 
   477  0714                     	;# 
   478  0714                     	;# 
   479  0715                     	;# 
   480  0715                     	;# 
   481  0716                     	;# 
   482  0716                     	;# 
   483  0716                     	;# 
   484  0716                     	;# 
   485  0717                     	;# 
   486  0717                     	;# 
   487  0717                     	;# 
   488  0717                     	;# 
   489  0718                     	;# 
   490  0718                     	;# 
   491  0718                     	;# 
   492  0719                     	;# 
   493  0719                     	;# 
   494  0719                     	;# 
   495  0719                     	;# 
   496  071A                     	;# 
   497  071A                     	;# 
   498  071A                     	;# 
   499  071A                     	;# 
   500  071A                     	;# 
   501  071B                     	;# 
   502  071B                     	;# 
   503  071C                     	;# 
   504  071C                     	;# 
   505  071C                     	;# 
   506  071C                     	;# 
   507  071C                     	;# 
   508  071D                     	;# 
   509  071D                     	;# 
   510  071E                     	;# 
   511  071E                     	;# 
   512  0791                     	;# 
   513  0791                     	;# 
   514  0793                     	;# 
   515  0793                     	;# 
   516  0794                     	;# 
   517  0794                     	;# 
   518  0796                     	;# 
   519  0796                     	;# 
   520  0796                     	;# 
   521  0797                     	;# 
   522  0797                     	;# 
   523  0797                     	;# 
   524  0798                     	;# 
   525  0798                     	;# 
   526  0799                     	;# 
   527  0799                     	;# 
   528  0799                     	;# 
   529  079A                     	;# 
   530  079A                     	;# 
   531  079A                     	;# 
   532  079B                     	;# 
   533  079C                     	;# 
   534  079C                     	;# 
   535  079C                     	;# 
   536  079D                     	;# 
   537  079E                     	;# 
   538  079E                     	;# 
   539  0F8C                     	;# 
   540  0F8D                     	;# 
   541  0F91                     	;# 
   542  0F96                     	;# 
   543  0F97                     	;# 
   544  0F9C                     	;# 
   545  0F9D                     	;# 
   546  0F9E                     	;# 
   547  0FE3                     	;# 
   548  0FE4                     	;# 
   549  0FE5                     	;# 
   550  0FE6                     	;# 
   551  0FE7                     	;# 
   552  0FE8                     	;# 
   553  0FE9                     	;# 
   554  0FEA                     	;# 
   555  0FEB                     	;# 
   556  0FED                     	;# 
   557  0FEE                     	;# 
   558  0FEF                     	;# 
   559  0000                     	;# 
   560  0001                     	;# 
   561  0002                     	;# 
   562  0003                     	;# 
   563  0004                     	;# 
   564  0005                     	;# 
   565  0006                     	;# 
   566  0007                     	;# 
   567  0008                     	;# 
   568  0009                     	;# 
   569  000A                     	;# 
   570  000B                     	;# 
   571  000C                     	;# 
   572  000D                     	;# 
   573  000E                     	;# 
   574  0011                     	;# 
   575  0012                     	;# 
   576  0015                     	;# 
   577  0016                     	;# 
   578  0016                     	;# 
   579  0017                     	;# 
   580  0018                     	;# 
   581  0019                     	;# 
   582  001A                     	;# 
   583  001B                     	;# 
   584  001C                     	;# 
   585  008C                     	;# 
   586  008D                     	;# 
   587  008E                     	;# 
   588  0091                     	;# 
   589  0092                     	;# 
   590  0095                     	;# 
   591  0096                     	;# 
   592  0097                     	;# 
   593  0099                     	;# 
   594  009A                     	;# 
   595  009B                     	;# 
   596  009B                     	;# 
   597  009C                     	;# 
   598  009D                     	;# 
   599  009E                     	;# 
   600  009F                     	;# 
   601  010C                     	;# 
   602  010D                     	;# 
   603  010E                     	;# 
   604  0116                     	;# 
   605  0117                     	;# 
   606  011D                     	;# 
   607  018C                     	;# 
   608  018D                     	;# 
   609  018E                     	;# 
   610  0191                     	;# 
   611  0191                     	;# 
   612  0192                     	;# 
   613  0193                     	;# 
   614  0193                     	;# 
   615  0194                     	;# 
   616  0195                     	;# 
   617  0196                     	;# 
   618  0199                     	;# 
   619  019A                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019C                     	;# 
   623  019D                     	;# 
   624  019E                     	;# 
   625  019F                     	;# 
   626  020C                     	;# 
   627  020D                     	;# 
   628  0211                     	;# 
   629  0211                     	;# 
   630  0212                     	;# 
   631  0212                     	;# 
   632  0213                     	;# 
   633  0213                     	;# 
   634  0214                     	;# 
   635  0214                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0216                     	;# 
   640  0216                     	;# 
   641  0217                     	;# 
   642  0217                     	;# 
   643  0391                     	;# 
   644  0392                     	;# 
   645  0393                     	;# 
   646  0394                     	;# 
   647  0395                     	;# 
   648  0396                     	;# 
   649  0611                     	;# 
   650  0612                     	;# 
   651  0613                     	;# 
   652  0613                     	;# 
   653  0614                     	;# 
   654  0615                     	;# 
   655  0616                     	;# 
   656  0616                     	;# 
   657  0711                     	;# 
   658  0711                     	;# 
   659  0711                     	;# 
   660  0712                     	;# 
   661  0712                     	;# 
   662  0713                     	;# 
   663  0713                     	;# 
   664  0713                     	;# 
   665  0714                     	;# 
   666  0714                     	;# 
   667  0714                     	;# 
   668  0715                     	;# 
   669  0715                     	;# 
   670  0716                     	;# 
   671  0716                     	;# 
   672  0716                     	;# 
   673  0716                     	;# 
   674  0717                     	;# 
   675  0717                     	;# 
   676  0717                     	;# 
   677  0717                     	;# 
   678  0718                     	;# 
   679  0718                     	;# 
   680  0718                     	;# 
   681  0719                     	;# 
   682  0719                     	;# 
   683  0719                     	;# 
   684  0719                     	;# 
   685  071A                     	;# 
   686  071A                     	;# 
   687  071A                     	;# 
   688  071A                     	;# 
   689  071A                     	;# 
   690  071B                     	;# 
   691  071B                     	;# 
   692  071C                     	;# 
   693  071C                     	;# 
   694  071C                     	;# 
   695  071C                     	;# 
   696  071C                     	;# 
   697  071D                     	;# 
   698  071D                     	;# 
   699  071E                     	;# 
   700  071E                     	;# 
   701  0791                     	;# 
   702  0791                     	;# 
   703  0793                     	;# 
   704  0793                     	;# 
   705  0794                     	;# 
   706  0794                     	;# 
   707  0796                     	;# 
   708  0796                     	;# 
   709  0796                     	;# 
   710  0797                     	;# 
   711  0797                     	;# 
   712  0797                     	;# 
   713  0798                     	;# 
   714  0798                     	;# 
   715  0799                     	;# 
   716  0799                     	;# 
   717  0799                     	;# 
   718  079A                     	;# 
   719  079A                     	;# 
   720  079A                     	;# 
   721  079B                     	;# 
   722  079C                     	;# 
   723  079C                     	;# 
   724  079C                     	;# 
   725  079D                     	;# 
   726  079E                     	;# 
   727  079E                     	;# 
   728  0F8C                     	;# 
   729  0F8D                     	;# 
   730  0F91                     	;# 
   731  0F96                     	;# 
   732  0F97                     	;# 
   733  0F9C                     	;# 
   734  0F9D                     	;# 
   735  0F9E                     	;# 
   736  0FE3                     	;# 
   737  0FE4                     	;# 
   738  0FE5                     	;# 
   739  0FE6                     	;# 
   740  0FE7                     	;# 
   741  0FE8                     	;# 
   742  0FE9                     	;# 
   743  0FEA                     	;# 
   744  0FEB                     	;# 
   745  0FED                     	;# 
   746  0FEE                     	;# 
   747  0FEF                     	;# 
   748  0000                     	;# 
   749  0001                     	;# 
   750  0002                     	;# 
   751  0003                     	;# 
   752  0004                     	;# 
   753  0005                     	;# 
   754  0006                     	;# 
   755  0007                     	;# 
   756  0008                     	;# 
   757  0009                     	;# 
   758  000A                     	;# 
   759  000B                     	;# 
   760  000C                     	;# 
   761  000D                     	;# 
   762  000E                     	;# 
   763  0011                     	;# 
   764  0012                     	;# 
   765  0015                     	;# 
   766  0016                     	;# 
   767  0016                     	;# 
   768  0017                     	;# 
   769  0018                     	;# 
   770  0019                     	;# 
   771  001A                     	;# 
   772  001B                     	;# 
   773  001C                     	;# 
   774  008C                     	;# 
   775  008D                     	;# 
   776  008E                     	;# 
   777  0091                     	;# 
   778  0092                     	;# 
   779  0095                     	;# 
   780  0096                     	;# 
   781  0097                     	;# 
   782  0099                     	;# 
   783  009A                     	;# 
   784  009B                     	;# 
   785  009B                     	;# 
   786  009C                     	;# 
   787  009D                     	;# 
   788  009E                     	;# 
   789  009F                     	;# 
   790  010C                     	;# 
   791  010D                     	;# 
   792  010E                     	;# 
   793  0116                     	;# 
   794  0117                     	;# 
   795  011D                     	;# 
   796  018C                     	;# 
   797  018D                     	;# 
   798  018E                     	;# 
   799  0191                     	;# 
   800  0191                     	;# 
   801  0192                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0194                     	;# 
   805  0195                     	;# 
   806  0196                     	;# 
   807  0199                     	;# 
   808  019A                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019C                     	;# 
   812  019D                     	;# 
   813  019E                     	;# 
   814  019F                     	;# 
   815  020C                     	;# 
   816  020D                     	;# 
   817  0211                     	;# 
   818  0211                     	;# 
   819  0212                     	;# 
   820  0212                     	;# 
   821  0213                     	;# 
   822  0213                     	;# 
   823  0214                     	;# 
   824  0214                     	;# 
   825  0215                     	;# 
   826  0215                     	;# 
   827  0215                     	;# 
   828  0216                     	;# 
   829  0216                     	;# 
   830  0217                     	;# 
   831  0217                     	;# 
   832  0391                     	;# 
   833  0392                     	;# 
   834  0393                     	;# 
   835  0394                     	;# 
   836  0395                     	;# 
   837  0396                     	;# 
   838  0611                     	;# 
   839  0612                     	;# 
   840  0613                     	;# 
   841  0613                     	;# 
   842  0614                     	;# 
   843  0615                     	;# 
   844  0616                     	;# 
   845  0616                     	;# 
   846  0711                     	;# 
   847  0711                     	;# 
   848  0711                     	;# 
   849  0712                     	;# 
   850  0712                     	;# 
   851  0713                     	;# 
   852  0713                     	;# 
   853  0713                     	;# 
   854  0714                     	;# 
   855  0714                     	;# 
   856  0714                     	;# 
   857  0715                     	;# 
   858  0715                     	;# 
   859  0716                     	;# 
   860  0716                     	;# 
   861  0716                     	;# 
   862  0716                     	;# 
   863  0717                     	;# 
   864  0717                     	;# 
   865  0717                     	;# 
   866  0717                     	;# 
   867  0718                     	;# 
   868  0718                     	;# 
   869  0718                     	;# 
   870  0719                     	;# 
   871  0719                     	;# 
   872  0719                     	;# 
   873  0719                     	;# 
   874  071A                     	;# 
   875  071A                     	;# 
   876  071A                     	;# 
   877  071A                     	;# 
   878  071A                     	;# 
   879  071B                     	;# 
   880  071B                     	;# 
   881  071C                     	;# 
   882  071C                     	;# 
   883  071C                     	;# 
   884  071C                     	;# 
   885  071C                     	;# 
   886  071D                     	;# 
   887  071D                     	;# 
   888  071E                     	;# 
   889  071E                     	;# 
   890  0791                     	;# 
   891  0791                     	;# 
   892  0793                     	;# 
   893  0793                     	;# 
   894  0794                     	;# 
   895  0794                     	;# 
   896  0796                     	;# 
   897  0796                     	;# 
   898  0796                     	;# 
   899  0797                     	;# 
   900  0797                     	;# 
   901  0797                     	;# 
   902  0798                     	;# 
   903  0798                     	;# 
   904  0799                     	;# 
   905  0799                     	;# 
   906  0799                     	;# 
   907  079A                     	;# 
   908  079A                     	;# 
   909  079A                     	;# 
   910  079B                     	;# 
   911  079C                     	;# 
   912  079C                     	;# 
   913  079C                     	;# 
   914  079D                     	;# 
   915  079E                     	;# 
   916  079E                     	;# 
   917  0F8C                     	;# 
   918  0F8D                     	;# 
   919  0F91                     	;# 
   920  0F96                     	;# 
   921  0F97                     	;# 
   922  0F9C                     	;# 
   923  0F9D                     	;# 
   924  0F9E                     	;# 
   925  0FE3                     	;# 
   926  0FE4                     	;# 
   927  0FE5                     	;# 
   928  0FE6                     	;# 
   929  0FE7                     	;# 
   930  0FE8                     	;# 
   931  0FE9                     	;# 
   932  0FEA                     	;# 
   933  0FEB                     	;# 
   934  0FED                     	;# 
   935  0FEE                     	;# 
   936  0FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000D                     	;# 
   951  000E                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0091                     	;# 
   967  0092                     	;# 
   968  0095                     	;# 
   969  0096                     	;# 
   970  0097                     	;# 
   971  0099                     	;# 
   972  009A                     	;# 
   973  009B                     	;# 
   974  009B                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009E                     	;# 
   978  009F                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0199                     	;# 
   997  019A                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020C                     	;# 
  1005  020D                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0391                     	;# 
  1022  0392                     	;# 
  1023  0393                     	;# 
  1024  0394                     	;# 
  1025  0395                     	;# 
  1026  0396                     	;# 
  1027  0611                     	;# 
  1028  0612                     	;# 
  1029  0613                     	;# 
  1030  0613                     	;# 
  1031  0614                     	;# 
  1032  0615                     	;# 
  1033  0616                     	;# 
  1034  0616                     	;# 
  1035  0711                     	;# 
  1036  0711                     	;# 
  1037  0711                     	;# 
  1038  0712                     	;# 
  1039  0712                     	;# 
  1040  0713                     	;# 
  1041  0713                     	;# 
  1042  0713                     	;# 
  1043  0714                     	;# 
  1044  0714                     	;# 
  1045  0714                     	;# 
  1046  0715                     	;# 
  1047  0715                     	;# 
  1048  0716                     	;# 
  1049  0716                     	;# 
  1050  0716                     	;# 
  1051  0716                     	;# 
  1052  0717                     	;# 
  1053  0717                     	;# 
  1054  0717                     	;# 
  1055  0717                     	;# 
  1056  0718                     	;# 
  1057  0718                     	;# 
  1058  0718                     	;# 
  1059  0719                     	;# 
  1060  0719                     	;# 
  1061  0719                     	;# 
  1062  0719                     	;# 
  1063  071A                     	;# 
  1064  071A                     	;# 
  1065  071A                     	;# 
  1066  071A                     	;# 
  1067  071A                     	;# 
  1068  071B                     	;# 
  1069  071B                     	;# 
  1070  071C                     	;# 
  1071  071C                     	;# 
  1072  071C                     	;# 
  1073  071C                     	;# 
  1074  071C                     	;# 
  1075  071D                     	;# 
  1076  071D                     	;# 
  1077  071E                     	;# 
  1078  071E                     	;# 
  1079  0791                     	;# 
  1080  0791                     	;# 
  1081  0793                     	;# 
  1082  0793                     	;# 
  1083  0794                     	;# 
  1084  0794                     	;# 
  1085  0796                     	;# 
  1086  0796                     	;# 
  1087  0796                     	;# 
  1088  0797                     	;# 
  1089  0797                     	;# 
  1090  0797                     	;# 
  1091  0798                     	;# 
  1092  0798                     	;# 
  1093  0799                     	;# 
  1094  0799                     	;# 
  1095  0799                     	;# 
  1096  079A                     	;# 
  1097  079A                     	;# 
  1098  079A                     	;# 
  1099  079B                     	;# 
  1100  079C                     	;# 
  1101  079C                     	;# 
  1102  079C                     	;# 
  1103  079D                     	;# 
  1104  079E                     	;# 
  1105  079E                     	;# 
  1106  0F8C                     	;# 
  1107  0F8D                     	;# 
  1108  0F91                     	;# 
  1109  0F96                     	;# 
  1110  0F97                     	;# 
  1111  0F9C                     	;# 
  1112  0F9D                     	;# 
  1113  0F9E                     	;# 
  1114  0FE3                     	;# 
  1115  0FE4                     	;# 
  1116  0FE5                     	;# 
  1117  0FE6                     	;# 
  1118  0FE7                     	;# 
  1119  0FE8                     	;# 
  1120  0FE9                     	;# 
  1121  0FEA                     	;# 
  1122  0FEB                     	;# 
  1123  0FED                     	;# 
  1124  0FEE                     	;# 
  1125  0FEF                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0008                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000D                     	;# 
  1140  000E                     	;# 
  1141  0011                     	;# 
  1142  0012                     	;# 
  1143  0015                     	;# 
  1144  0016                     	;# 
  1145  0016                     	;# 
  1146  0017                     	;# 
  1147  0018                     	;# 
  1148  0019                     	;# 
  1149  001A                     	;# 
  1150  001B                     	;# 
  1151  001C                     	;# 
  1152  008C                     	;# 
  1153  008D                     	;# 
  1154  008E                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0095                     	;# 
  1158  0096                     	;# 
  1159  0097                     	;# 
  1160  0099                     	;# 
  1161  009A                     	;# 
  1162  009B                     	;# 
  1163  009B                     	;# 
  1164  009C                     	;# 
  1165  009D                     	;# 
  1166  009E                     	;# 
  1167  009F                     	;# 
  1168  010C                     	;# 
  1169  010D                     	;# 
  1170  010E                     	;# 
  1171  0116                     	;# 
  1172  0117                     	;# 
  1173  011D                     	;# 
  1174  018C                     	;# 
  1175  018D                     	;# 
  1176  018E                     	;# 
  1177  0191                     	;# 
  1178  0191                     	;# 
  1179  0192                     	;# 
  1180  0193                     	;# 
  1181  0193                     	;# 
  1182  0194                     	;# 
  1183  0195                     	;# 
  1184  0196                     	;# 
  1185  0199                     	;# 
  1186  019A                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  020C                     	;# 
  1194  020D                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0391                     	;# 
  1211  0392                     	;# 
  1212  0393                     	;# 
  1213  0394                     	;# 
  1214  0395                     	;# 
  1215  0396                     	;# 
  1216  0611                     	;# 
  1217  0612                     	;# 
  1218  0613                     	;# 
  1219  0613                     	;# 
  1220  0614                     	;# 
  1221  0615                     	;# 
  1222  0616                     	;# 
  1223  0616                     	;# 
  1224  0711                     	;# 
  1225  0711                     	;# 
  1226  0711                     	;# 
  1227  0712                     	;# 
  1228  0712                     	;# 
  1229  0713                     	;# 
  1230  0713                     	;# 
  1231  0713                     	;# 
  1232  0714                     	;# 
  1233  0714                     	;# 
  1234  0714                     	;# 
  1235  0715                     	;# 
  1236  0715                     	;# 
  1237  0716                     	;# 
  1238  0716                     	;# 
  1239  0716                     	;# 
  1240  0716                     	;# 
  1241  0717                     	;# 
  1242  0717                     	;# 
  1243  0717                     	;# 
  1244  0717                     	;# 
  1245  0718                     	;# 
  1246  0718                     	;# 
  1247  0718                     	;# 
  1248  0719                     	;# 
  1249  0719                     	;# 
  1250  0719                     	;# 
  1251  0719                     	;# 
  1252  071A                     	;# 
  1253  071A                     	;# 
  1254  071A                     	;# 
  1255  071A                     	;# 
  1256  071A                     	;# 
  1257  071B                     	;# 
  1258  071B                     	;# 
  1259  071C                     	;# 
  1260  071C                     	;# 
  1261  071C                     	;# 
  1262  071C                     	;# 
  1263  071C                     	;# 
  1264  071D                     	;# 
  1265  071D                     	;# 
  1266  071E                     	;# 
  1267  071E                     	;# 
  1268  0791                     	;# 
  1269  0791                     	;# 
  1270  0793                     	;# 
  1271  0793                     	;# 
  1272  0794                     	;# 
  1273  0794                     	;# 
  1274  0796                     	;# 
  1275  0796                     	;# 
  1276  0796                     	;# 
  1277  0797                     	;# 
  1278  0797                     	;# 
  1279  0797                     	;# 
  1280  0798                     	;# 
  1281  0798                     	;# 
  1282  0799                     	;# 
  1283  0799                     	;# 
  1284  0799                     	;# 
  1285  079A                     	;# 
  1286  079A                     	;# 
  1287  079A                     	;# 
  1288  079B                     	;# 
  1289  079C                     	;# 
  1290  079C                     	;# 
  1291  079C                     	;# 
  1292  079D                     	;# 
  1293  079E                     	;# 
  1294  079E                     	;# 
  1295  0F8C                     	;# 
  1296  0F8D                     	;# 
  1297  0F91                     	;# 
  1298  0F96                     	;# 
  1299  0F97                     	;# 
  1300  0F9C                     	;# 
  1301  0F9D                     	;# 
  1302  0F9E                     	;# 
  1303  0FE3                     	;# 
  1304  0FE4                     	;# 
  1305  0FE5                     	;# 
  1306  0FE6                     	;# 
  1307  0FE7                     	;# 
  1308  0FE8                     	;# 
  1309  0FE9                     	;# 
  1310  0FEA                     	;# 
  1311  0FEB                     	;# 
  1312  0FED                     	;# 
  1313  0FEE                     	;# 
  1314  0FEF                     	;# 
  1315  0000                     	;# 
  1316  0001                     	;# 
  1317  0002                     	;# 
  1318  0003                     	;# 
  1319  0004                     	;# 
  1320  0005                     	;# 
  1321  0006                     	;# 
  1322  0007                     	;# 
  1323  0008                     	;# 
  1324  0009                     	;# 
  1325  000A                     	;# 
  1326  000B                     	;# 
  1327  000C                     	;# 
  1328  000D                     	;# 
  1329  000E                     	;# 
  1330  0011                     	;# 
  1331  0012                     	;# 
  1332  0015                     	;# 
  1333  0016                     	;# 
  1334  0016                     	;# 
  1335  0017                     	;# 
  1336  0018                     	;# 
  1337  0019                     	;# 
  1338  001A                     	;# 
  1339  001B                     	;# 
  1340  001C                     	;# 
  1341  008C                     	;# 
  1342  008D                     	;# 
  1343  008E                     	;# 
  1344  0091                     	;# 
  1345  0092                     	;# 
  1346  0095                     	;# 
  1347  0096                     	;# 
  1348  0097                     	;# 
  1349  0099                     	;# 
  1350  009A                     	;# 
  1351  009B                     	;# 
  1352  009B                     	;# 
  1353  009C                     	;# 
  1354  009D                     	;# 
  1355  009E                     	;# 
  1356  009F                     	;# 
  1357  010C                     	;# 
  1358  010D                     	;# 
  1359  010E                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  011D                     	;# 
  1363  018C                     	;# 
  1364  018D                     	;# 
  1365  018E                     	;# 
  1366  0191                     	;# 
  1367  0191                     	;# 
  1368  0192                     	;# 
  1369  0193                     	;# 
  1370  0193                     	;# 
  1371  0194                     	;# 
  1372  0195                     	;# 
  1373  0196                     	;# 
  1374  0199                     	;# 
  1375  019A                     	;# 
  1376  019B                     	;# 
  1377  019B                     	;# 
  1378  019C                     	;# 
  1379  019D                     	;# 
  1380  019E                     	;# 
  1381  019F                     	;# 
  1382  020C                     	;# 
  1383  020D                     	;# 
  1384  0211                     	;# 
  1385  0211                     	;# 
  1386  0212                     	;# 
  1387  0212                     	;# 
  1388  0213                     	;# 
  1389  0213                     	;# 
  1390  0214                     	;# 
  1391  0214                     	;# 
  1392  0215                     	;# 
  1393  0215                     	;# 
  1394  0215                     	;# 
  1395  0216                     	;# 
  1396  0216                     	;# 
  1397  0217                     	;# 
  1398  0217                     	;# 
  1399  0391                     	;# 
  1400  0392                     	;# 
  1401  0393                     	;# 
  1402  0394                     	;# 
  1403  0395                     	;# 
  1404  0396                     	;# 
  1405  0611                     	;# 
  1406  0612                     	;# 
  1407  0613                     	;# 
  1408  0613                     	;# 
  1409  0614                     	;# 
  1410  0615                     	;# 
  1411  0616                     	;# 
  1412  0616                     	;# 
  1413  0711                     	;# 
  1414  0711                     	;# 
  1415  0711                     	;# 
  1416  0712                     	;# 
  1417  0712                     	;# 
  1418  0713                     	;# 
  1419  0713                     	;# 
  1420  0713                     	;# 
  1421  0714                     	;# 
  1422  0714                     	;# 
  1423  0714                     	;# 
  1424  0715                     	;# 
  1425  0715                     	;# 
  1426  0716                     	;# 
  1427  0716                     	;# 
  1428  0716                     	;# 
  1429  0716                     	;# 
  1430  0717                     	;# 
  1431  0717                     	;# 
  1432  0717                     	;# 
  1433  0717                     	;# 
  1434  0718                     	;# 
  1435  0718                     	;# 
  1436  0718                     	;# 
  1437  0719                     	;# 
  1438  0719                     	;# 
  1439  0719                     	;# 
  1440  0719                     	;# 
  1441  071A                     	;# 
  1442  071A                     	;# 
  1443  071A                     	;# 
  1444  071A                     	;# 
  1445  071A                     	;# 
  1446  071B                     	;# 
  1447  071B                     	;# 
  1448  071C                     	;# 
  1449  071C                     	;# 
  1450  071C                     	;# 
  1451  071C                     	;# 
  1452  071C                     	;# 
  1453  071D                     	;# 
  1454  071D                     	;# 
  1455  071E                     	;# 
  1456  071E                     	;# 
  1457  0791                     	;# 
  1458  0791                     	;# 
  1459  0793                     	;# 
  1460  0793                     	;# 
  1461  0794                     	;# 
  1462  0794                     	;# 
  1463  0796                     	;# 
  1464  0796                     	;# 
  1465  0796                     	;# 
  1466  0797                     	;# 
  1467  0797                     	;# 
  1468  0797                     	;# 
  1469  0798                     	;# 
  1470  0798                     	;# 
  1471  0799                     	;# 
  1472  0799                     	;# 
  1473  0799                     	;# 
  1474  079A                     	;# 
  1475  079A                     	;# 
  1476  079A                     	;# 
  1477  079B                     	;# 
  1478  079C                     	;# 
  1479  079C                     	;# 
  1480  079C                     	;# 
  1481  079D                     	;# 
  1482  079E                     	;# 
  1483  079E                     	;# 
  1484  0F8C                     	;# 
  1485  0F8D                     	;# 
  1486  0F91                     	;# 
  1487  0F96                     	;# 
  1488  0F97                     	;# 
  1489  0F9C                     	;# 
  1490  0F9D                     	;# 
  1491  0F9E                     	;# 
  1492  0FE3                     	;# 
  1493  0FE4                     	;# 
  1494  0FE5                     	;# 
  1495  0FE6                     	;# 
  1496  0FE7                     	;# 
  1497  0FE8                     	;# 
  1498  0FE9                     	;# 
  1499  0FEA                     	;# 
  1500  0FEB                     	;# 
  1501  0FED                     	;# 
  1502  0FEE                     	;# 
  1503  0FEF                     	;# 
  1504  0000                     	;# 
  1505  0001                     	;# 
  1506  0002                     	;# 
  1507  0003                     	;# 
  1508  0004                     	;# 
  1509  0005                     	;# 
  1510  0006                     	;# 
  1511  0007                     	;# 
  1512  0008                     	;# 
  1513  0009                     	;# 
  1514  000A                     	;# 
  1515  000B                     	;# 
  1516  000C                     	;# 
  1517  000D                     	;# 
  1518  000E                     	;# 
  1519  0011                     	;# 
  1520  0012                     	;# 
  1521  0015                     	;# 
  1522  0016                     	;# 
  1523  0016                     	;# 
  1524  0017                     	;# 
  1525  0018                     	;# 
  1526  0019                     	;# 
  1527  001A                     	;# 
  1528  001B                     	;# 
  1529  001C                     	;# 
  1530  008C                     	;# 
  1531  008D                     	;# 
  1532  008E                     	;# 
  1533  0091                     	;# 
  1534  0092                     	;# 
  1535  0095                     	;# 
  1536  0096                     	;# 
  1537  0097                     	;# 
  1538  0099                     	;# 
  1539  009A                     	;# 
  1540  009B                     	;# 
  1541  009B                     	;# 
  1542  009C                     	;# 
  1543  009D                     	;# 
  1544  009E                     	;# 
  1545  009F                     	;# 
  1546  010C                     	;# 
  1547  010D                     	;# 
  1548  010E                     	;# 
  1549  0116                     	;# 
  1550  0117                     	;# 
  1551  011D                     	;# 
  1552  018C                     	;# 
  1553  018D                     	;# 
  1554  018E                     	;# 
  1555  0191                     	;# 
  1556  0191                     	;# 
  1557  0192                     	;# 
  1558  0193                     	;# 
  1559  0193                     	;# 
  1560  0194                     	;# 
  1561  0195                     	;# 
  1562  0196                     	;# 
  1563  0199                     	;# 
  1564  019A                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020C                     	;# 
  1572  020D                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0391                     	;# 
  1589  0392                     	;# 
  1590  0393                     	;# 
  1591  0394                     	;# 
  1592  0395                     	;# 
  1593  0396                     	;# 
  1594  0611                     	;# 
  1595  0612                     	;# 
  1596  0613                     	;# 
  1597  0613                     	;# 
  1598  0614                     	;# 
  1599  0615                     	;# 
  1600  0616                     	;# 
  1601  0616                     	;# 
  1602  0711                     	;# 
  1603  0711                     	;# 
  1604  0711                     	;# 
  1605  0712                     	;# 
  1606  0712                     	;# 
  1607  0713                     	;# 
  1608  0713                     	;# 
  1609  0713                     	;# 
  1610  0714                     	;# 
  1611  0714                     	;# 
  1612  0714                     	;# 
  1613  0715                     	;# 
  1614  0715                     	;# 
  1615  0716                     	;# 
  1616  0716                     	;# 
  1617  0716                     	;# 
  1618  0716                     	;# 
  1619  0717                     	;# 
  1620  0717                     	;# 
  1621  0717                     	;# 
  1622  0717                     	;# 
  1623  0718                     	;# 
  1624  0718                     	;# 
  1625  0718                     	;# 
  1626  0719                     	;# 
  1627  0719                     	;# 
  1628  0719                     	;# 
  1629  0719                     	;# 
  1630  071A                     	;# 
  1631  071A                     	;# 
  1632  071A                     	;# 
  1633  071A                     	;# 
  1634  071A                     	;# 
  1635  071B                     	;# 
  1636  071B                     	;# 
  1637  071C                     	;# 
  1638  071C                     	;# 
  1639  071C                     	;# 
  1640  071C                     	;# 
  1641  071C                     	;# 
  1642  071D                     	;# 
  1643  071D                     	;# 
  1644  071E                     	;# 
  1645  071E                     	;# 
  1646  0791                     	;# 
  1647  0791                     	;# 
  1648  0793                     	;# 
  1649  0793                     	;# 
  1650  0794                     	;# 
  1651  0794                     	;# 
  1652  0796                     	;# 
  1653  0796                     	;# 
  1654  0796                     	;# 
  1655  0797                     	;# 
  1656  0797                     	;# 
  1657  0797                     	;# 
  1658  0798                     	;# 
  1659  0798                     	;# 
  1660  0799                     	;# 
  1661  0799                     	;# 
  1662  0799                     	;# 
  1663  079A                     	;# 
  1664  079A                     	;# 
  1665  079A                     	;# 
  1666  079B                     	;# 
  1667  079C                     	;# 
  1668  079C                     	;# 
  1669  079C                     	;# 
  1670  079D                     	;# 
  1671  079E                     	;# 
  1672  079E                     	;# 
  1673  0F8C                     	;# 
  1674  0F8D                     	;# 
  1675  0F91                     	;# 
  1676  0F96                     	;# 
  1677  0F97                     	;# 
  1678  0F9C                     	;# 
  1679  0F9D                     	;# 
  1680  0F9E                     	;# 
  1681  0FE3                     	;# 
  1682  0FE4                     	;# 
  1683  0FE5                     	;# 
  1684  0FE6                     	;# 
  1685  0FE7                     	;# 
  1686  0FE8                     	;# 
  1687  0FE9                     	;# 
  1688  0FEA                     	;# 
  1689  0FEB                     	;# 
  1690  0FED                     	;# 
  1691  0FEE                     	;# 
  1692  0FEF                     	;# 
  1693  0000                     	;# 
  1694  0001                     	;# 
  1695  0002                     	;# 
  1696  0003                     	;# 
  1697  0004                     	;# 
  1698  0005                     	;# 
  1699  0006                     	;# 
  1700  0007                     	;# 
  1701  0008                     	;# 
  1702  0009                     	;# 
  1703  000A                     	;# 
  1704  000B                     	;# 
  1705  000C                     	;# 
  1706  000D                     	;# 
  1707  000E                     	;# 
  1708  0011                     	;# 
  1709  0012                     	;# 
  1710  0015                     	;# 
  1711  0016                     	;# 
  1712  0016                     	;# 
  1713  0017                     	;# 
  1714  0018                     	;# 
  1715  0019                     	;# 
  1716  001A                     	;# 
  1717  001B                     	;# 
  1718  001C                     	;# 
  1719  008C                     	;# 
  1720  008D                     	;# 
  1721  008E                     	;# 
  1722  0091                     	;# 
  1723  0092                     	;# 
  1724  0095                     	;# 
  1725  0096                     	;# 
  1726  0097                     	;# 
  1727  0099                     	;# 
  1728  009A                     	;# 
  1729  009B                     	;# 
  1730  009B                     	;# 
  1731  009C                     	;# 
  1732  009D                     	;# 
  1733  009E                     	;# 
  1734  009F                     	;# 
  1735  010C                     	;# 
  1736  010D                     	;# 
  1737  010E                     	;# 
  1738  0116                     	;# 
  1739  0117                     	;# 
  1740  011D                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  018E                     	;# 
  1744  0191                     	;# 
  1745  0191                     	;# 
  1746  0192                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0194                     	;# 
  1750  0195                     	;# 
  1751  0196                     	;# 
  1752  0199                     	;# 
  1753  019A                     	;# 
  1754  019B                     	;# 
  1755  019B                     	;# 
  1756  019C                     	;# 
  1757  019D                     	;# 
  1758  019E                     	;# 
  1759  019F                     	;# 
  1760  020C                     	;# 
  1761  020D                     	;# 
  1762  0211                     	;# 
  1763  0211                     	;# 
  1764  0212                     	;# 
  1765  0212                     	;# 
  1766  0213                     	;# 
  1767  0213                     	;# 
  1768  0214                     	;# 
  1769  0214                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0215                     	;# 
  1773  0216                     	;# 
  1774  0216                     	;# 
  1775  0217                     	;# 
  1776  0217                     	;# 
  1777  0391                     	;# 
  1778  0392                     	;# 
  1779  0393                     	;# 
  1780  0394                     	;# 
  1781  0395                     	;# 
  1782  0396                     	;# 
  1783  0611                     	;# 
  1784  0612                     	;# 
  1785  0613                     	;# 
  1786  0613                     	;# 
  1787  0614                     	;# 
  1788  0615                     	;# 
  1789  0616                     	;# 
  1790  0616                     	;# 
  1791  0711                     	;# 
  1792  0711                     	;# 
  1793  0711                     	;# 
  1794  0712                     	;# 
  1795  0712                     	;# 
  1796  0713                     	;# 
  1797  0713                     	;# 
  1798  0713                     	;# 
  1799  0714                     	;# 
  1800  0714                     	;# 
  1801  0714                     	;# 
  1802  0715                     	;# 
  1803  0715                     	;# 
  1804  0716                     	;# 
  1805  0716                     	;# 
  1806  0716                     	;# 
  1807  0716                     	;# 
  1808  0717                     	;# 
  1809  0717                     	;# 
  1810  0717                     	;# 
  1811  0717                     	;# 
  1812  0718                     	;# 
  1813  0718                     	;# 
  1814  0718                     	;# 
  1815  0719                     	;# 
  1816  0719                     	;# 
  1817  0719                     	;# 
  1818  0719                     	;# 
  1819  071A                     	;# 
  1820  071A                     	;# 
  1821  071A                     	;# 
  1822  071A                     	;# 
  1823  071A                     	;# 
  1824  071B                     	;# 
  1825  071B                     	;# 
  1826  071C                     	;# 
  1827  071C                     	;# 
  1828  071C                     	;# 
  1829  071C                     	;# 
  1830  071C                     	;# 
  1831  071D                     	;# 
  1832  071D                     	;# 
  1833  071E                     	;# 
  1834  071E                     	;# 
  1835  0791                     	;# 
  1836  0791                     	;# 
  1837  0793                     	;# 
  1838  0793                     	;# 
  1839  0794                     	;# 
  1840  0794                     	;# 
  1841  0796                     	;# 
  1842  0796                     	;# 
  1843  0796                     	;# 
  1844  0797                     	;# 
  1845  0797                     	;# 
  1846  0797                     	;# 
  1847  0798                     	;# 
  1848  0798                     	;# 
  1849  0799                     	;# 
  1850  0799                     	;# 
  1851  0799                     	;# 
  1852  079A                     	;# 
  1853  079A                     	;# 
  1854  079A                     	;# 
  1855  079B                     	;# 
  1856  079C                     	;# 
  1857  079C                     	;# 
  1858  079C                     	;# 
  1859  079D                     	;# 
  1860  079E                     	;# 
  1861  079E                     	;# 
  1862  0F8C                     	;# 
  1863  0F8D                     	;# 
  1864  0F91                     	;# 
  1865  0F96                     	;# 
  1866  0F97                     	;# 
  1867  0F9C                     	;# 
  1868  0F9D                     	;# 
  1869  0F9E                     	;# 
  1870  0FE3                     	;# 
  1871  0FE4                     	;# 
  1872  0FE5                     	;# 
  1873  0FE6                     	;# 
  1874  0FE7                     	;# 
  1875  0FE8                     	;# 
  1876  0FE9                     	;# 
  1877  0FEA                     	;# 
  1878  0FEB                     	;# 
  1879  0FED                     	;# 
  1880  0FEE                     	;# 
  1881  0FEF                     	;# 
  1882  0000                     	;# 
  1883  0001                     	;# 
  1884  0002                     	;# 
  1885  0003                     	;# 
  1886  0004                     	;# 
  1887  0005                     	;# 
  1888  0006                     	;# 
  1889  0007                     	;# 
  1890  0008                     	;# 
  1891  0009                     	;# 
  1892  000A                     	;# 
  1893  000B                     	;# 
  1894  000C                     	;# 
  1895  000D                     	;# 
  1896  000E                     	;# 
  1897  0011                     	;# 
  1898  0012                     	;# 
  1899  0015                     	;# 
  1900  0016                     	;# 
  1901  0016                     	;# 
  1902  0017                     	;# 
  1903  0018                     	;# 
  1904  0019                     	;# 
  1905  001A                     	;# 
  1906  001B                     	;# 
  1907  001C                     	;# 
  1908  008C                     	;# 
  1909  008D                     	;# 
  1910  008E                     	;# 
  1911  0091                     	;# 
  1912  0092                     	;# 
  1913  0095                     	;# 
  1914  0096                     	;# 
  1915  0097                     	;# 
  1916  0099                     	;# 
  1917  009A                     	;# 
  1918  009B                     	;# 
  1919  009B                     	;# 
  1920  009C                     	;# 
  1921  009D                     	;# 
  1922  009E                     	;# 
  1923  009F                     	;# 
  1924  010C                     	;# 
  1925  010D                     	;# 
  1926  010E                     	;# 
  1927  0116                     	;# 
  1928  0117                     	;# 
  1929  011D                     	;# 
  1930  018C                     	;# 
  1931  018D                     	;# 
  1932  018E                     	;# 
  1933  0191                     	;# 
  1934  0191                     	;# 
  1935  0192                     	;# 
  1936  0193                     	;# 
  1937  0193                     	;# 
  1938  0194                     	;# 
  1939  0195                     	;# 
  1940  0196                     	;# 
  1941  0199                     	;# 
  1942  019A                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019C                     	;# 
  1946  019D                     	;# 
  1947  019E                     	;# 
  1948  019F                     	;# 
  1949  020C                     	;# 
  1950  020D                     	;# 
  1951  0211                     	;# 
  1952  0211                     	;# 
  1953  0212                     	;# 
  1954  0212                     	;# 
  1955  0213                     	;# 
  1956  0213                     	;# 
  1957  0214                     	;# 
  1958  0214                     	;# 
  1959  0215                     	;# 
  1960  0215                     	;# 
  1961  0215                     	;# 
  1962  0216                     	;# 
  1963  0216                     	;# 
  1964  0217                     	;# 
  1965  0217                     	;# 
  1966  0391                     	;# 
  1967  0392                     	;# 
  1968  0393                     	;# 
  1969  0394                     	;# 
  1970  0395                     	;# 
  1971  0396                     	;# 
  1972  0611                     	;# 
  1973  0612                     	;# 
  1974  0613                     	;# 
  1975  0613                     	;# 
  1976  0614                     	;# 
  1977  0615                     	;# 
  1978  0616                     	;# 
  1979  0616                     	;# 
  1980  0711                     	;# 
  1981  0711                     	;# 
  1982  0711                     	;# 
  1983  0712                     	;# 
  1984  0712                     	;# 
  1985  0713                     	;# 
  1986  0713                     	;# 
  1987  0713                     	;# 
  1988  0714                     	;# 
  1989  0714                     	;# 
  1990  0714                     	;# 
  1991  0715                     	;# 
  1992  0715                     	;# 
  1993  0716                     	;# 
  1994  0716                     	;# 
  1995  0716                     	;# 
  1996  0716                     	;# 
  1997  0717                     	;# 
  1998  0717                     	;# 
  1999  0717                     	;# 
  2000  0717                     	;# 
  2001  0718                     	;# 
  2002  0718                     	;# 
  2003  0718                     	;# 
  2004  0719                     	;# 
  2005  0719                     	;# 
  2006  0719                     	;# 
  2007  0719                     	;# 
  2008  071A                     	;# 
  2009  071A                     	;# 
  2010  071A                     	;# 
  2011  071A                     	;# 
  2012  071A                     	;# 
  2013  071B                     	;# 
  2014  071B                     	;# 
  2015  071C                     	;# 
  2016  071C                     	;# 
  2017  071C                     	;# 
  2018  071C                     	;# 
  2019  071C                     	;# 
  2020  071D                     	;# 
  2021  071D                     	;# 
  2022  071E                     	;# 
  2023  071E                     	;# 
  2024  0791                     	;# 
  2025  0791                     	;# 
  2026  0793                     	;# 
  2027  0793                     	;# 
  2028  0794                     	;# 
  2029  0794                     	;# 
  2030  0796                     	;# 
  2031  0796                     	;# 
  2032  0796                     	;# 
  2033  0797                     	;# 
  2034  0797                     	;# 
  2035  0797                     	;# 
  2036  0798                     	;# 
  2037  0798                     	;# 
  2038  0799                     	;# 
  2039  0799                     	;# 
  2040  0799                     	;# 
  2041  079A                     	;# 
  2042  079A                     	;# 
  2043  079A                     	;# 
  2044  079B                     	;# 
  2045  079C                     	;# 
  2046  079C                     	;# 
  2047  079C                     	;# 
  2048  079D                     	;# 
  2049  079E                     	;# 
  2050  079E                     	;# 
  2051  0F8C                     	;# 
  2052  0F8D                     	;# 
  2053  0F91                     	;# 
  2054  0F96                     	;# 
  2055  0F97                     	;# 
  2056  0F9C                     	;# 
  2057  0F9D                     	;# 
  2058  0F9E                     	;# 
  2059  0FE3                     	;# 
  2060  0FE4                     	;# 
  2061  0FE5                     	;# 
  2062  0FE6                     	;# 
  2063  0FE7                     	;# 
  2064  0FE8                     	;# 
  2065  0FE9                     	;# 
  2066  0FEA                     	;# 
  2067  0FEB                     	;# 
  2068  0FED                     	;# 
  2069  0FEE                     	;# 
  2070  0FEF                     	;# 
  2071  0000                     	;# 
  2072  0001                     	;# 
  2073  0002                     	;# 
  2074  0003                     	;# 
  2075  0004                     	;# 
  2076  0005                     	;# 
  2077  0006                     	;# 
  2078  0007                     	;# 
  2079  0008                     	;# 
  2080  0009                     	;# 
  2081  000A                     	;# 
  2082  000B                     	;# 
  2083  000C                     	;# 
  2084  000D                     	;# 
  2085  000E                     	;# 
  2086  0011                     	;# 
  2087  0012                     	;# 
  2088  0015                     	;# 
  2089  0016                     	;# 
  2090  0016                     	;# 
  2091  0017                     	;# 
  2092  0018                     	;# 
  2093  0019                     	;# 
  2094  001A                     	;# 
  2095  001B                     	;# 
  2096  001C                     	;# 
  2097  008C                     	;# 
  2098  008D                     	;# 
  2099  008E                     	;# 
  2100  0091                     	;# 
  2101  0092                     	;# 
  2102  0095                     	;# 
  2103  0096                     	;# 
  2104  0097                     	;# 
  2105  0099                     	;# 
  2106  009A                     	;# 
  2107  009B                     	;# 
  2108  009B                     	;# 
  2109  009C                     	;# 
  2110  009D                     	;# 
  2111  009E                     	;# 
  2112  009F                     	;# 
  2113  010C                     	;# 
  2114  010D                     	;# 
  2115  010E                     	;# 
  2116  0116                     	;# 
  2117  0117                     	;# 
  2118  011D                     	;# 
  2119  018C                     	;# 
  2120  018D                     	;# 
  2121  018E                     	;# 
  2122  0191                     	;# 
  2123  0191                     	;# 
  2124  0192                     	;# 
  2125  0193                     	;# 
  2126  0193                     	;# 
  2127  0194                     	;# 
  2128  0195                     	;# 
  2129  0196                     	;# 
  2130  0199                     	;# 
  2131  019A                     	;# 
  2132  019B                     	;# 
  2133  019B                     	;# 
  2134  019C                     	;# 
  2135  019D                     	;# 
  2136  019E                     	;# 
  2137  019F                     	;# 
  2138  020C                     	;# 
  2139  020D                     	;# 
  2140  0211                     	;# 
  2141  0211                     	;# 
  2142  0212                     	;# 
  2143  0212                     	;# 
  2144  0213                     	;# 
  2145  0213                     	;# 
  2146  0214                     	;# 
  2147  0214                     	;# 
  2148  0215                     	;# 
  2149  0215                     	;# 
  2150  0215                     	;# 
  2151  0216                     	;# 
  2152  0216                     	;# 
  2153  0217                     	;# 
  2154  0217                     	;# 
  2155  0391                     	;# 
  2156  0392                     	;# 
  2157  0393                     	;# 
  2158  0394                     	;# 
  2159  0395                     	;# 
  2160  0396                     	;# 
  2161  0611                     	;# 
  2162  0612                     	;# 
  2163  0613                     	;# 
  2164  0613                     	;# 
  2165  0614                     	;# 
  2166  0615                     	;# 
  2167  0616                     	;# 
  2168  0616                     	;# 
  2169  0711                     	;# 
  2170  0711                     	;# 
  2171  0711                     	;# 
  2172  0712                     	;# 
  2173  0712                     	;# 
  2174  0713                     	;# 
  2175  0713                     	;# 
  2176  0713                     	;# 
  2177  0714                     	;# 
  2178  0714                     	;# 
  2179  0714                     	;# 
  2180  0715                     	;# 
  2181  0715                     	;# 
  2182  0716                     	;# 
  2183  0716                     	;# 
  2184  0716                     	;# 
  2185  0716                     	;# 
  2186  0717                     	;# 
  2187  0717                     	;# 
  2188  0717                     	;# 
  2189  0717                     	;# 
  2190  0718                     	;# 
  2191  0718                     	;# 
  2192  0718                     	;# 
  2193  0719                     	;# 
  2194  0719                     	;# 
  2195  0719                     	;# 
  2196  0719                     	;# 
  2197  071A                     	;# 
  2198  071A                     	;# 
  2199  071A                     	;# 
  2200  071A                     	;# 
  2201  071A                     	;# 
  2202  071B                     	;# 
  2203  071B                     	;# 
  2204  071C                     	;# 
  2205  071C                     	;# 
  2206  071C                     	;# 
  2207  071C                     	;# 
  2208  071C                     	;# 
  2209  071D                     	;# 
  2210  071D                     	;# 
  2211  071E                     	;# 
  2212  071E                     	;# 
  2213  0791                     	;# 
  2214  0791                     	;# 
  2215  0793                     	;# 
  2216  0793                     	;# 
  2217  0794                     	;# 
  2218  0794                     	;# 
  2219  0796                     	;# 
  2220  0796                     	;# 
  2221  0796                     	;# 
  2222  0797                     	;# 
  2223  0797                     	;# 
  2224  0797                     	;# 
  2225  0798                     	;# 
  2226  0798                     	;# 
  2227  0799                     	;# 
  2228  0799                     	;# 
  2229  0799                     	;# 
  2230  079A                     	;# 
  2231  079A                     	;# 
  2232  079A                     	;# 
  2233  079B                     	;# 
  2234  079C                     	;# 
  2235  079C                     	;# 
  2236  079C                     	;# 
  2237  079D                     	;# 
  2238  079E                     	;# 
  2239  079E                     	;# 
  2240  0F8C                     	;# 
  2241  0F8D                     	;# 
  2242  0F91                     	;# 
  2243  0F96                     	;# 
  2244  0F97                     	;# 
  2245  0F9C                     	;# 
  2246  0F9D                     	;# 
  2247  0F9E                     	;# 
  2248  0FE3                     	;# 
  2249  0FE4                     	;# 
  2250  0FE5                     	;# 
  2251  0FE6                     	;# 
  2252  0FE7                     	;# 
  2253  0FE8                     	;# 
  2254  0FE9                     	;# 
  2255  0FEA                     	;# 
  2256  0FEB                     	;# 
  2257  0FED                     	;# 
  2258  0FEE                     	;# 
  2259  0FEF                     	;# 
  2260  0000                     	;# 
  2261  0001                     	;# 
  2262  0002                     	;# 
  2263  0003                     	;# 
  2264  0004                     	;# 
  2265  0005                     	;# 
  2266  0006                     	;# 
  2267  0007                     	;# 
  2268  0008                     	;# 
  2269  0009                     	;# 
  2270  000A                     	;# 
  2271  000B                     	;# 
  2272  000C                     	;# 
  2273  000D                     	;# 
  2274  000E                     	;# 
  2275  0011                     	;# 
  2276  0012                     	;# 
  2277  0015                     	;# 
  2278  0016                     	;# 
  2279  0016                     	;# 
  2280  0017                     	;# 
  2281  0018                     	;# 
  2282  0019                     	;# 
  2283  001A                     	;# 
  2284  001B                     	;# 
  2285  001C                     	;# 
  2286  008C                     	;# 
  2287  008D                     	;# 
  2288  008E                     	;# 
  2289  0091                     	;# 
  2290  0092                     	;# 
  2291  0095                     	;# 
  2292  0096                     	;# 
  2293  0097                     	;# 
  2294  0099                     	;# 
  2295  009A                     	;# 
  2296  009B                     	;# 
  2297  009B                     	;# 
  2298  009C                     	;# 
  2299  009D                     	;# 
  2300  009E                     	;# 
  2301  009F                     	;# 
  2302  010C                     	;# 
  2303  010D                     	;# 
  2304  010E                     	;# 
  2305  0116                     	;# 
  2306  0117                     	;# 
  2307  011D                     	;# 
  2308  018C                     	;# 
  2309  018D                     	;# 
  2310  018E                     	;# 
  2311  0191                     	;# 
  2312  0191                     	;# 
  2313  0192                     	;# 
  2314  0193                     	;# 
  2315  0193                     	;# 
  2316  0194                     	;# 
  2317  0195                     	;# 
  2318  0196                     	;# 
  2319  0199                     	;# 
  2320  019A                     	;# 
  2321  019B                     	;# 
  2322  019B                     	;# 
  2323  019C                     	;# 
  2324  019D                     	;# 
  2325  019E                     	;# 
  2326  019F                     	;# 
  2327  020C                     	;# 
  2328  020D                     	;# 
  2329  0211                     	;# 
  2330  0211                     	;# 
  2331  0212                     	;# 
  2332  0212                     	;# 
  2333  0213                     	;# 
  2334  0213                     	;# 
  2335  0214                     	;# 
  2336  0214                     	;# 
  2337  0215                     	;# 
  2338  0215                     	;# 
  2339  0215                     	;# 
  2340  0216                     	;# 
  2341  0216                     	;# 
  2342  0217                     	;# 
  2343  0217                     	;# 
  2344  0391                     	;# 
  2345  0392                     	;# 
  2346  0393                     	;# 
  2347  0394                     	;# 
  2348  0395                     	;# 
  2349  0396                     	;# 
  2350  0611                     	;# 
  2351  0612                     	;# 
  2352  0613                     	;# 
  2353  0613                     	;# 
  2354  0614                     	;# 
  2355  0615                     	;# 
  2356  0616                     	;# 
  2357  0616                     	;# 
  2358  0711                     	;# 
  2359  0711                     	;# 
  2360  0711                     	;# 
  2361  0712                     	;# 
  2362  0712                     	;# 
  2363  0713                     	;# 
  2364  0713                     	;# 
  2365  0713                     	;# 
  2366  0714                     	;# 
  2367  0714                     	;# 
  2368  0714                     	;# 
  2369  0715                     	;# 
  2370  0715                     	;# 
  2371  0716                     	;# 
  2372  0716                     	;# 
  2373  0716                     	;# 
  2374  0716                     	;# 
  2375  0717                     	;# 
  2376  0717                     	;# 
  2377  0717                     	;# 
  2378  0717                     	;# 
  2379  0718                     	;# 
  2380  0718                     	;# 
  2381  0718                     	;# 
  2382  0719                     	;# 
  2383  0719                     	;# 
  2384  0719                     	;# 
  2385  0719                     	;# 
  2386  071A                     	;# 
  2387  071A                     	;# 
  2388  071A                     	;# 
  2389  071A                     	;# 
  2390  071A                     	;# 
  2391  071B                     	;# 
  2392  071B                     	;# 
  2393  071C                     	;# 
  2394  071C                     	;# 
  2395  071C                     	;# 
  2396  071C                     	;# 
  2397  071C                     	;# 
  2398  071D                     	;# 
  2399  071D                     	;# 
  2400  071E                     	;# 
  2401  071E                     	;# 
  2402  0791                     	;# 
  2403  0791                     	;# 
  2404  0793                     	;# 
  2405  0793                     	;# 
  2406  0794                     	;# 
  2407  0794                     	;# 
  2408  0796                     	;# 
  2409  0796                     	;# 
  2410  0796                     	;# 
  2411  0797                     	;# 
  2412  0797                     	;# 
  2413  0797                     	;# 
  2414  0798                     	;# 
  2415  0798                     	;# 
  2416  0799                     	;# 
  2417  0799                     	;# 
  2418  0799                     	;# 
  2419  079A                     	;# 
  2420  079A                     	;# 
  2421  079A                     	;# 
  2422  079B                     	;# 
  2423  079C                     	;# 
  2424  079C                     	;# 
  2425  079C                     	;# 
  2426  079D                     	;# 
  2427  079E                     	;# 
  2428  079E                     	;# 
  2429  0F8C                     	;# 
  2430  0F8D                     	;# 
  2431  0F91                     	;# 
  2432  0F96                     	;# 
  2433  0F97                     	;# 
  2434  0F9C                     	;# 
  2435  0F9D                     	;# 
  2436  0F9E                     	;# 
  2437  0FE3                     	;# 
  2438  0FE4                     	;# 
  2439  0FE5                     	;# 
  2440  0FE6                     	;# 
  2441  0FE7                     	;# 
  2442  0FE8                     	;# 
  2443  0FE9                     	;# 
  2444  0FEA                     	;# 
  2445  0FEB                     	;# 
  2446  0FED                     	;# 
  2447  0FEE                     	;# 
  2448  0FEF                     	;# 
  2449                           
  2450                           	psect	idataBANK0
  2451  136C                     __pidataBANK0:	
  2452                           
  2453                           ;initializer for _callback_notPressed
  2454  136C  345B               	retlw	low _Button_DefaultCallback
  2455  136D  3413               	retlw	high _Button_DefaultCallback
  2456                           
  2457                           ;initializer for _sample_period
  2458  136E  34AE               	retlw	174
  2459                           
  2460                           	psect	idataBANK1
  2461  0800                     __pidataBANK1:	
  2462                           
  2463                           ;initializer for _Button_StateMachine
  2464  0800  3407               	retlw	low _Button_State_Initializing
  2465  0801  340B               	retlw	high _Button_State_Initializing
  2466  0802  345C               	retlw	low _Button_State_NotPressed
  2467  0803  340F               	retlw	high _Button_State_NotPressed
  2468  0804  3486               	retlw	low _Button_State_Pressed
  2469  0805  3407               	retlw	high _Button_State_Pressed
  2470                           
  2471                           ;initializer for _callback_pressed
  2472  0806  345B               	retlw	low _Button_DefaultCallback
  2473  0807  3413               	retlw	high _Button_DefaultCallback
  2474                           
  2475                           ;initializer for _callback_sampled
  2476  0808  345C               	retlw	low _Sensor_DefaultCallback
  2477  0809  3413               	retlw	high _Sensor_DefaultCallback
  2478                           
  2479                           ;initializer for _mTouchScanReload
  2480  080A  34FF               	retlw	255
  2481  080B  348E               	retlw	142
  2482                           
  2483                           	psect	idataBANK2
  2484  166C                     __pidataBANK2:	
  2485                           
  2486                           ;initializer for _mtouch_sensor
  2487  166C  3400               	retlw	0
  2488  166D  3469               	retlw	105
  2489  166E  3430               	retlw	48
  2490  166F  3410               	retlw	16
  2491  1670  3420               	retlw	32
  2492  1671  3400               	retlw	0
  2493  1672  3400               	retlw	0
  2494  1673  3400               	retlw	0
  2495  1674  3400               	retlw	0
  2496  1675  3401               	retlw	1
  2497  1676  3431               	retlw	49
  2498  1677  3430               	retlw	48
  2499  1678  3410               	retlw	16
  2500  1679  3420               	retlw	32
  2501  167A  3400               	retlw	0
  2502  167B  3400               	retlw	0
  2503  167C  3400               	retlw	0
  2504  167D  3400               	retlw	0
  2505  167E  3402               	retlw	2
  2506  167F  345D               	retlw	93
  2507  1680  3430               	retlw	48
  2508  1681  3410               	retlw	16
  2509  1682  3420               	retlw	32
  2510  1683  3400               	retlw	0
  2511  1684  3400               	retlw	0
  2512  1685  3400               	retlw	0
  2513  1686  3400               	retlw	0
  2514  1687  3403               	retlw	3
  2515  1688  3435               	retlw	53
  2516  1689  3430               	retlw	48
  2517  168A  3410               	retlw	16
  2518  168B  3420               	retlw	32
  2519  168C  3400               	retlw	0
  2520  168D  3400               	retlw	0
  2521  168E  3400               	retlw	0
  2522  168F  3400               	retlw	0
  2523                           
  2524                           	psect	stringtext1
  2525  180F                     __pstringtext1:	
  2526  180F                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2527  180F  3400               	retlw	0
  2528  1810  340D               	retlw	13
  2529  1811  341C               	retlw	28
  2530  1812  341E               	retlw	30
  2531  1813  3417               	retlw	23
  2532  1814                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2533                           
  2534                           	psect	stringtext2
  2535  1864                     __pstringtext2:	
  2536  1864                     _sensor_scan_group:	
  2537  1864  3429               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2538  1865  3420               	retlw	low (_mtouch_sensor| (0+256))
  2539  1866  343B               	retlw	low ((_mtouch_sensor| (0+256)+27))
  2540  1867  3432               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2541  1868                     __end_of_sensor_scan_group:	
  2542                           
  2543                           	psect	stringtext3
  2544  1000                     __pstringtext3:	
  2545  1000                     _mtouch_button_init:	
  2546  1000  3400               	retlw	0
  2547  1001  3401               	retlw	1
  2548  1002  3400               	retlw	0
  2549  1003  3400               	retlw	0
  2550  1004  3400               	retlw	0
  2551  1005  3400               	retlw	0
  2552  1006  3400               	retlw	0
  2553  1007  3400               	retlw	0
  2554  1008  3400               	retlw	0
  2555  1009  3400               	retlw	0
  2556  100A  3400               	retlw	0
  2557  100B  3400               	retlw	0
  2558  100C  3400               	retlw	0
  2559  100D  3400               	retlw	0
  2560  100E  3464               	retlw	100
  2561  100F  3401               	retlw	1
  2562  1010  3401               	retlw	1
  2563  1011  3401               	retlw	1
  2564  1012  3400               	retlw	0
  2565  1013  3400               	retlw	0
  2566  1014  3400               	retlw	0
  2567  1015  3400               	retlw	0
  2568  1016  3400               	retlw	0
  2569  1017  3400               	retlw	0
  2570  1018  3400               	retlw	0
  2571  1019  3400               	retlw	0
  2572  101A  3400               	retlw	0
  2573  101B  3400               	retlw	0
  2574  101C  3400               	retlw	0
  2575  101D  3400               	retlw	0
  2576  101E  3400               	retlw	0
  2577  101F  3464               	retlw	100
  2578  1020  3401               	retlw	1
  2579  1021  3401               	retlw	1
  2580  1022  3402               	retlw	2
  2581  1023  3403               	retlw	3
  2582  1024  3400               	retlw	0
  2583  1025  3400               	retlw	0
  2584  1026  3400               	retlw	0
  2585  1027  3400               	retlw	0
  2586  1028  3400               	retlw	0
  2587  1029  3400               	retlw	0
  2588  102A  3400               	retlw	0
  2589  102B  3400               	retlw	0
  2590  102C  3400               	retlw	0
  2591  102D  3400               	retlw	0
  2592  102E  3400               	retlw	0
  2593  102F  3400               	retlw	0
  2594  1030  3464               	retlw	100
  2595  1031  3401               	retlw	1
  2596  1032  3401               	retlw	1
  2597  1033  3403               	retlw	3
  2598  1034  3402               	retlw	2
  2599  1035  3400               	retlw	0
  2600  1036  3400               	retlw	0
  2601  1037  3400               	retlw	0
  2602  1038  3400               	retlw	0
  2603  1039  3400               	retlw	0
  2604  103A  3400               	retlw	0
  2605  103B  3400               	retlw	0
  2606  103C  3400               	retlw	0
  2607  103D  3400               	retlw	0
  2608  103E  3400               	retlw	0
  2609  103F  3400               	retlw	0
  2610  1040  3400               	retlw	0
  2611  1041  3464               	retlw	100
  2612  1042  3401               	retlw	1
  2613  1043  3401               	retlw	1
  2614  1044                     __end_of_mtouch_button_init:	
  2615                           
  2616                           	psect	nvBANK1
  2617  00D8                     __pnvBANK1:	
  2618  00D8                     _TMR1_InterruptHandler:	
  2619  00D8                     	ds	2
  2620  00DA                     _timer1ReloadVal:	
  2621  00DA                     	ds	2
  2622  00DC                     _EUSART_ErrorHandler:	
  2623  00DC                     	ds	2
  2624  00DE                     _EUSART_OverrunErrorHandler:	
  2625  00DE                     	ds	2
  2626  00E0                     _EUSART_FramingErrorHandler:	
  2627  00E0                     	ds	2
  2628  00E2                     _EUSART_RxDefaultInterruptHandler:	
  2629  00E2                     	ds	2
  2630  0018                     _T1CONbits	set	24
  2631  0018                     _T1CON	set	24
  2632  0016                     _TMR1L	set	22
  2633  0017                     _TMR1H	set	23
  2634  0019                     _T1GCON	set	25
  2635  001C                     _T2CON	set	28
  2636  001A                     _TMR2	set	26
  2637  001B                     _PR2	set	27
  2638  000B                     _INTCONbits	set	11
  2639  0012                     _PIR2bits	set	18
  2640  0011                     _PIR1bits	set	17
  2641  001C                     _T2CONbits	set	28
  2642  005F                     _GIE	set	95
  2643  0095                     _OPTION_REGbits	set	149
  2644  008E                     _TRISC	set	142
  2645  008D                     _TRISB	set	141
  2646  008C                     _TRISA	set	140
  2647  0097                     _WDTCON	set	151
  2648  0099                     _OSCCON	set	153
  2649  0091                     _PIE1bits	set	145
  2650  010D                     _LATBbits	set	269
  2651  010E                     _LATCbits	set	270
  2652  010C                     _LATAbits	set	268
  2653  011D                     _APFCON	set	285
  2654  010E                     _LATC	set	270
  2655  010D                     _LATB	set	269
  2656  010C                     _LATA	set	268
  2657  0116                     _BORCON	set	278
  2658  011D                     _APFCONbits	set	285
  2659  018C                     _ANSELA	set	396
  2660  018D                     _ANSELB	set	397
  2661  018E                     _ANSELC	set	398
  2662  0199                     _RCREG	set	409
  2663  019D                     _RCSTAbits	set	413
  2664  019A                     _TXREG	set	410
  2665  019C                     _SPBRGH	set	412
  2666  019B                     _SPBRGL	set	411
  2667  019E                     _TXSTA	set	414
  2668  019D                     _RCSTA	set	413
  2669  019F                     _BAUDCON	set	415
  2670  020C                     _WPUA	set	524
  2671  020D                     _WPUB	set	525
  2672  071A                     _AAD1RES0	set	1818
  2673  0711                     _AD1CON0bits	set	1809
  2674  0714                     _AAD1CON3	set	1812
  2675  0713                     _AD1CON2	set	1811
  2676  0717                     _AD1ACQCON	set	1815
  2677  0716                     _AD1PRECON	set	1814
  2678  0718                     _AAD1GRD	set	1816
  2679  0713                     _AAD1CON2	set	1811
  2680  0719                     _AAD1CAP	set	1817
  2681  0714                     _AD1CON3	set	1812
  2682  0712                     _ADCOMCON	set	1810
  2683  0711                     _AD1CON0	set	1809
  2684  079A                     _AAD2RES0	set	1946
  2685  0791                     _AD2CON0bits	set	1937
  2686  0797                     _AD2ACQCON	set	1943
  2687  0796                     _AD2PRECON	set	1942
  2688  0794                     _AAD2CON3	set	1940
  2689  0798                     _AAD2GRD	set	1944
  2690  0793                     _AD2CON2	set	1939
  2691  0794                     _AD2CON3	set	1940
  2692  0791                     _AD2CON0	set	1937
  2693                           
  2694                           	psect	stringtext4
  2695  1800                     __pstringtext4:	
  2696  1800                     STR_1:	
  2697  1800  3450               	retlw	80	;'P'
  2698  1801  3449               	retlw	73	;'I'
  2699  1802  3443               	retlw	67	;'C'
  2700  1803  3453               	retlw	83	;'S'
  2701  1804  344D               	retlw	77	;'M'
  2702  1805  3441               	retlw	65	;'A'
  2703  1806  3452               	retlw	82	;'R'
  2704  1807  3454               	retlw	84	;'T'
  2705  1808  3400               	retlw	0
  2706                           
  2707                           	psect	stringtext5
  2708  1809                     __pstringtext5:	
  2709  1809                     STR_2:	
  2710  1809  3452               	retlw	82	;'R'
  2711  180A  3455               	retlw	85	;'U'
  2712  180B  344E               	retlw	78	;'N'
  2713  180C  340D               	retlw	13
  2714  180D  340A               	retlw	10
  2715  180E  3400               	retlw	0
  2716                           
  2717                           	psect	stringtext6
  2718  1814                     __pstringtext6:	
  2719  1814                     STR_3:	
  2720  1814  3450               	retlw	80	;'P'
  2721  1815  3449               	retlw	73	;'I'
  2722  1816  3443               	retlw	67	;'C'
  2723  1817  3430               	retlw	48	;'0'
  2724  1818  3400               	retlw	0
  2725                           
  2726                           	psect	stringtext7
  2727  1819                     __pstringtext7:	
  2728  1819                     STR_4:	
  2729  1819  3450               	retlw	80	;'P'
  2730  181A  3449               	retlw	73	;'I'
  2731  181B  3443               	retlw	67	;'C'
  2732  181C  3431               	retlw	49	;'1'
  2733  181D  3400               	retlw	0
  2734                           
  2735                           	psect	stringtext8
  2736  181E                     __pstringtext8:	
  2737  181E                     STR_5:	
  2738  181E  3450               	retlw	80	;'P'
  2739  181F  3449               	retlw	73	;'I'
  2740  1820  3443               	retlw	67	;'C'
  2741  1821  3432               	retlw	50	;'2'
  2742  1822  3400               	retlw	0
  2743                           
  2744                           	psect	stringtext9
  2745  1823                     __pstringtext9:	
  2746  1823                     STR_6:	
  2747  1823  3450               	retlw	80	;'P'
  2748  1824  3449               	retlw	73	;'I'
  2749  1825  3443               	retlw	67	;'C'
  2750  1826  3433               	retlw	51	;'3'
  2751  1827  3400               	retlw	0
  2752                           
  2753                           	psect	stringtext10
  2754  1828                     __pstringtext10:	
  2755  1828                     STR_7:	
  2756  1828  3450               	retlw	80	;'P'
  2757  1829  3449               	retlw	73	;'I'
  2758  182A  3443               	retlw	67	;'C'
  2759  182B  3434               	retlw	52	;'4'
  2760  182C  3400               	retlw	0
  2761                           
  2762                           	psect	stringtext11
  2763  182D                     __pstringtext11:	
  2764  182D                     STR_8:	
  2765  182D  3450               	retlw	80	;'P'
  2766  182E  3449               	retlw	73	;'I'
  2767  182F  3443               	retlw	67	;'C'
  2768  1830  3435               	retlw	53	;'5'
  2769  1831  3400               	retlw	0
  2770                           
  2771                           	psect	stringtext12
  2772  1832                     __pstringtext12:	
  2773  1832                     STR_9:	
  2774  1832  3450               	retlw	80	;'P'
  2775  1833  3449               	retlw	73	;'I'
  2776  1834  3443               	retlw	67	;'C'
  2777  1835  3436               	retlw	54	;'6'
  2778  1836  3400               	retlw	0
  2779                           
  2780                           	psect	stringtext13
  2781  1837                     __pstringtext13:	
  2782  1837                     STR_10:	
  2783  1837  3450               	retlw	80	;'P'
  2784  1838  3449               	retlw	73	;'I'
  2785  1839  3443               	retlw	67	;'C'
  2786  183A  3437               	retlw	55	;'7'
  2787  183B  3400               	retlw	0
  2788                           
  2789                           	psect	stringtext14
  2790  183C                     __pstringtext14:	
  2791  183C                     STR_11:	
  2792  183C  3450               	retlw	80	;'P'
  2793  183D  3449               	retlw	73	;'I'
  2794  183E  3443               	retlw	67	;'C'
  2795  183F  3438               	retlw	56	;'8'
  2796  1840  3400               	retlw	0
  2797                           
  2798                           	psect	stringtext15
  2799  1841                     __pstringtext15:	
  2800  1841                     STR_12:	
  2801  1841  3450               	retlw	80	;'P'
  2802  1842  3449               	retlw	73	;'I'
  2803  1843  3443               	retlw	67	;'C'
  2804  1844  3439               	retlw	57	;'9'
  2805  1845  3400               	retlw	0
  2806                           
  2807                           	psect	stringtext16
  2808  1846                     __pstringtext16:	
  2809  1846                     STR_13:	
  2810  1846  3450               	retlw	80	;'P'
  2811  1847  3449               	retlw	73	;'I'
  2812  1848  3443               	retlw	67	;'C'
  2813  1849  3441               	retlw	65	;'A'
  2814  184A  3400               	retlw	0
  2815                           
  2816                           	psect	stringtext17
  2817  184B                     __pstringtext17:	
  2818  184B                     STR_14:	
  2819  184B  3450               	retlw	80	;'P'
  2820  184C  3449               	retlw	73	;'I'
  2821  184D  3443               	retlw	67	;'C'
  2822  184E  3442               	retlw	66	;'B'
  2823  184F  3400               	retlw	0
  2824                           
  2825                           	psect	stringtext18
  2826  1850                     __pstringtext18:	
  2827  1850                     STR_15:	
  2828  1850  3450               	retlw	80	;'P'
  2829  1851  3449               	retlw	73	;'I'
  2830  1852  3443               	retlw	67	;'C'
  2831  1853  3443               	retlw	67	;'C'
  2832  1854  3400               	retlw	0
  2833                           
  2834                           	psect	stringtext19
  2835  1855                     __pstringtext19:	
  2836  1855                     STR_16:	
  2837  1855  3450               	retlw	80	;'P'
  2838  1856  3449               	retlw	73	;'I'
  2839  1857  3443               	retlw	67	;'C'
  2840  1858  3444               	retlw	68	;'D'
  2841  1859  3400               	retlw	0
  2842                           
  2843                           	psect	stringtext20
  2844  185A                     __pstringtext20:	
  2845  185A                     STR_17:	
  2846  185A  3450               	retlw	80	;'P'
  2847  185B  3449               	retlw	73	;'I'
  2848  185C  3443               	retlw	67	;'C'
  2849  185D  3445               	retlw	69	;'E'
  2850  185E  3400               	retlw	0
  2851                           
  2852                           	psect	stringtext21
  2853  185F                     __pstringtext21:	
  2854  185F                     STR_18:	
  2855  185F  3450               	retlw	80	;'P'
  2856  1860  3449               	retlw	73	;'I'
  2857  1861  3443               	retlw	67	;'C'
  2858  1862  3447               	retlw	71	;'G'
  2859  1863  3400               	retlw	0
  2860                           
  2861                           	psect	stringtext22
  2862  1868                     __pstringtext22:	
  2863  1868                     STR_19:	
  2864  1868  3425               	retlw	37	;'%'
  2865  1869  3463               	retlw	99	;'c'
  2866  186A  3400               	retlw	0
  2867                           
  2868                           	psect	stringtext23
  2869  0000                     __pstringtext23:	
  2870                           
  2871                           ; #config settings
  2872  0000                     
  2873                           	psect	cinit
  2874  0021                     start_initialization:	
  2875  0021                     __initialization:	
  2876                           
  2877                           ; Initialize objects allocated to BANK0
  2878  0021  306C               	movlw	low __pidataBANK0
  2879  0022  0084               	movwf	4
  2880  0023  3093               	movlw	(high __pidataBANK0)| (0+128)
  2881  0024  0085               	movwf	5
  2882  0025  306D               	movlw	low __pdataBANK0
  2883  0026  0086               	movwf	6
  2884  0027  3000               	movlw	high __pdataBANK0
  2885  0028  0087               	movwf	7
  2886  0029  3003               	movlw	3
  2887  002A  3193  23B7  3180   	fcall	init_ram
  2888                           
  2889                           ; Initialize objects allocated to BANK1
  2890  002D  3000               	movlw	low __pidataBANK1
  2891  002E  0084               	movwf	4
  2892  002F  3088               	movlw	(high __pidataBANK1)| (0+128)
  2893  0030  0085               	movwf	5
  2894  0031  30E4               	movlw	low __pdataBANK1
  2895  0032  0086               	movwf	6
  2896  0033  3000               	movlw	high __pdataBANK1
  2897  0034  0087               	movwf	7
  2898  0035  300C               	movlw	12
  2899  0036  3193  23B7  3180   	fcall	init_ram
  2900                           
  2901                           ; Initialize objects allocated to BANK2
  2902  0039  306C               	movlw	low __pidataBANK2
  2903  003A  0084               	movwf	4
  2904  003B  3096               	movlw	(high __pidataBANK2)| (0+128)
  2905  003C  0085               	movwf	5
  2906  003D  3020               	movlw	low __pdataBANK2
  2907  003E  0086               	movwf	6
  2908  003F  3001               	movlw	high __pdataBANK2
  2909  0040  0087               	movwf	7
  2910  0041  3024               	movlw	36
  2911  0042  3193  23B7  3180   	fcall	init_ram
  2912                           
  2913                           ; Clear objects allocated to COMMON
  2914  0045  01FA               	clrf	__pbssCOMMON& (0+127)
  2915  0046  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2916                           
  2917                           ; Clear objects allocated to BANK0
  2918  0047  3055               	movlw	low __pbssBANK0
  2919  0048  0084               	movwf	4
  2920  0049  3000               	movlw	high __pbssBANK0
  2921  004A  0085               	movwf	5
  2922  004B  3018               	movlw	24
  2923  004C  3193  23B1  3180   	fcall	clear_ram0
  2924                           
  2925                           ; Clear objects allocated to BANK1
  2926  004F  30A0               	movlw	low __pbssBANK1
  2927  0050  0084               	movwf	4
  2928  0051  3000               	movlw	high __pbssBANK1
  2929  0052  0085               	movwf	5
  2930  0053  3038               	movlw	56
  2931  0054  3193  23B1  3180   	fcall	clear_ram0
  2932                           
  2933                           ; Clear objects allocated to BANK3
  2934  0057  30A0               	movlw	low __pbssBANK3
  2935  0058  0084               	movwf	4
  2936  0059  3001               	movlw	high __pbssBANK3
  2937  005A  0085               	movwf	5
  2938  005B  3044               	movlw	68
  2939  005C  3193  23B1         	fcall	clear_ram0
  2940  005E                     end_of_initialization:	
  2941                           ;End of C runtime variable initialization code
  2942                           
  2943  005E                     __end_of__initialization:	
  2944  005E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2945  005F  0020               	movlb	0
  2946  0060  3180  2862         	ljmp	_main	;jump to C main() function
  2947                           
  2948                           	psect	bssCOMMON
  2949  007A                     __pbssCOMMON:	
  2950  007A                     _eusartRxTail:	
  2951  007A                     	ds	1
  2952  007B                     _eusartRxHead:	
  2953  007B                     	ds	1
  2954                           
  2955                           	psect	bssBANK0
  2956  0055                     __pbssBANK0:	
  2957  0055                     _packet_sample:	
  2958  0055                     	ds	4
  2959  0059                     _width:	
  2960  0059                     	ds	2
  2961  005B                     _last_touch_status:	
  2962  005B                     	ds	2
  2963  005D                     _timeout_count:	
  2964  005D                     	ds	2
  2965  005F                     _packet_noise:	
  2966  005F                     	ds	2
  2967  0061                     _update_state_flag:	
  2968  0061                     	ds	1
  2969  0062                     _blink_count:	
  2970  0062                     	ds	1
  2971  0063                     _blink:	
  2972  0063                     	ds	1
  2973  0064                     _check_request:	
  2974  0064                     	ds	1
  2975  0065                     _config_status:	
  2976  0065                     	ds	1
  2977  0066                     _prcData:	
  2978  0066                     	ds	1
  2979  0067                     _rxData:	
  2980  0067                     	ds	1
  2981  0068                     _eusartRxLastError:	
  2982  0068                     	ds	1
  2983  0069                     _eusartRxCount:	
  2984  0069                     	ds	1
  2985  006A                     _sensor_globalFlags:	
  2986  006A                     	ds	1
  2987  006B                     _lowpowerActivated:	
  2988  006B                     	ds	1
  2989  006C                     _mtouch_time_toScan:	
  2990  006C                     	ds	1
  2991                           
  2992                           	psect	dataBANK0
  2993  006D                     __pdataBANK0:	
  2994  006D                     _callback_notPressed:	
  2995  006D                     	ds	2
  2996  006F                     _sample_period:	
  2997  006F                     	ds	1
  2998                           
  2999                           	psect	bssBANK1
  3000  00A0                     __pbssBANK1:	
  3001  00A0                     _eusartRxStatusBuffer:	
  3002  00A0                     	ds	8
  3003  00A8                     _eusartRxBuffer:	
  3004  00A8                     	ds	8
  3005  00B0                     _nout:	
  3006  00B0                     	ds	2
  3007  00B2                     _prec:	
  3008  00B2                     	ds	2
  3009  00B4                     _flags:	
  3010  00B4                     	ds	2
  3011  00B6                     _count_conf:	
  3012  00B6                     	ds	2
  3013  00B8                     _dbuf:	
  3014  00B8                     	ds	32
  3015                           
  3016                           	psect	dataBANK1
  3017  00E4                     __pdataBANK1:	
  3018  00E4                     _Button_StateMachine:	
  3019  00E4                     	ds	6
  3020  00EA                     _callback_pressed:	
  3021  00EA                     	ds	2
  3022  00EC                     _callback_sampled:	
  3023  00EC                     	ds	2
  3024  00EE                     _mTouchScanReload:	
  3025  00EE                     	ds	2
  3026                           
  3027                           	psect	dataBANK2
  3028  0120                     __pdataBANK2:	
  3029  0120                     _mtouch_sensor:	
  3030  0120                     	ds	36
  3031                           
  3032                           	psect	bssBANK3
  3033  01A0                     __pbssBANK3:	
  3034  01A0                     _mtouch_button:	
  3035  01A0                     	ds	68
  3036                           
  3037                           	psect	inittext
  3038  13B7                     init_ram:	
  3039  13B7  00FE               	movwf	126
  3040  13B8                     initloop:	
  3041  13B8  0012               	moviw fsr0++
  3042  13B9  001E               	movwi fsr1++
  3043  13BA  0BFE               	decfsz	126,f
  3044  13BB  2BB8               	goto	initloop
  3045  13BC  3400               	retlw	0
  3046                           
  3047                           	psect	clrtext
  3048  13B1                     clear_ram0:	
  3049                           ;	Called with FSR0 containing the base address, and
  3050                           ;	WREG with the size to clear
  3051                           
  3052  13B1  0064               	clrwdt	;clear the watchdog before getting into this loop
  3053  13B2                     clrloop0:	
  3054  13B2  0180               	clrf	0	;clear RAM location pointed to by FSR
  3055  13B3  3101               	addfsr 0,1
  3056  13B4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3057  13B5  2BB2               	goto	clrloop0	;have we reached the end yet?
  3058  13B6  3400               	retlw	0	;all done for this memory range, return
  3059                           
  3060                           	psect	cstackBANK2
  3061  0144                     __pcstackBANK2:	
  3062  0144                     ??_main:	
  3063                           
  3064                           ; 1 bytes @ 0x0
  3065  0144                     	ds	2
  3066                           
  3067                           	psect	cstackCOMMON
  3068  0070                     __pcstackCOMMON:	
  3069  0070                     ?_TMR1_WriteTimer:	
  3070  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  3071                           ; 1 bytes @ 0x0
  3072                           
  3073  0070                     ?_MTOUCH_Button_InitializeAll:	
  3074                           ; 1 bytes @ 0x0
  3075                           
  3076  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0070                     ?_MTOUCH_Sensor_SampleAll:	
  3083                           ; 1 bytes @ 0x0
  3084                           
  3085  0070                     ?_MTOUCH_Button_ServiceAll:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0070                     ?_MTOUCH_needReburst:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0070                     ?_MTOUCH_Tick:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0070                     ?_MTOUCH_Button_Tick:	
  3095                           ; 1 bytes @ 0x0
  3096                           
  3097  0070                     ?_MTOUCH_Sensor_Enable:	
  3098                           ; 1 bytes @ 0x0
  3099                           
  3100  0070                     ?_MTOUCH_Sensor_Calibrate:	
  3101                           ; 1 bytes @ 0x0
  3102                           
  3103  0070                     ?_Sensor_Sampled_Reset:	
  3104                           ; 1 bytes @ 0x0
  3105                           
  3106  0070                     ?_Sensor_Service:	
  3107                           ; 1 bytes @ 0x0
  3108                           
  3109  0070                     ?_Sensor_isEnabled:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0070                     ?_Sensor_RawSample_Update:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0070                     ?_Sensor_setSampled:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0070                     ?_Sensor_postAcquisitionProcess:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0070                     ?_Sensor_isActive:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0070                     ?_Sensor_isCalibrated:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0070                     ?_Sensor_setActive:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0070                     ?_Sensor_setInactive:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0070                     ?_Sensor_isCalibratingAcqTime:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0070                     ?_TMR2_LoadPeriodRegister:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0070                     ?_TMR2_StartTimer:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142  0070                     ?_TMR2_StopTimer:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145  0070                     ?_Sensor_autoCalibration:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0070                     ?_Sensor_setCalibratAcqTime:	
  3149                           ; 1 bytes @ 0x0
  3150                           
  3151  0070                     ?_Sensor_setCalibrated:	
  3152                           ; 1 bytes @ 0x0
  3153                           
  3154  0070                     ?_Button_Service:	
  3155                           ; 1 bytes @ 0x0
  3156                           
  3157  0070                     ?_Button_Reading_Update:	
  3158                           ; 1 bytes @ 0x0
  3159                           
  3160  0070                     ?_Button_Deviation_Update:	
  3161                           ; 1 bytes @ 0x0
  3162                           
  3163  0070                     ?_Button_Baseline_Initialize:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166  0070                     ?_Button_Baseline_Update:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0070                     ?_Button_Tick_helper:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0070                     ?_Button_Reading_Update_Helper:	
  3173                           ; 1 bytes @ 0x0
  3174                           
  3175  0070                     ?_EUSART_Receive_ISR:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0070                     ?_EUSART_DefaultErrorHandler:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0070                     ?_EUSART_RxDataHandler:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0070                     ??_EUSART_RxDataHandler:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0070                     ?_TMR1_ISR:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0070                     ?_PIN_MANAGER_Initialize:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0070                     ?_OSCILLATOR_Initialize:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0070                     ?_WDT_Initialize:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0070                     ?_TMR2_Initialize:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0070                     ?_TMR1_Initialize:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0070                     ?_TMR1_DefaultInterruptHandler:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0070                     ??_TMR1_DefaultInterruptHandler:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0070                     ?_LED_PROCESS:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0070                     ?_update_state:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0070                     ?_check_data:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0070                     ?_check_message:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0070                     ?_DATA_PROCESS:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0070                     ?_RELAY_PROCESS:	
  3239                           ; 1 bytes @ 0x0
  3240                           
  3241  0070                     ?_MTOUCH_ScanScheduler:	
  3242                           ; 1 bytes @ 0x0
  3243                           
  3244  0070                     ?_MTOUCH_Initialize:	
  3245                           ; 1 bytes @ 0x0
  3246                           
  3247  0070                     ?_MTOUCH_Service_Mainloop:	
  3248                           ; 1 bytes @ 0x0
  3249                           
  3250  0070                     ?_MTOUCH_Sensor_Initialize:	
  3251                           ; 1 bytes @ 0x0
  3252                           
  3253  0070                     ?_Sensor_getScanGroupIndex:	
  3254                           ; 1 bytes @ 0x0
  3255                           
  3256  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  3257                           ; 1 bytes @ 0x0
  3258                           
  3259  0070                     ?_MTOUCH_Sensor_wasSampled:	
  3260                           ; 1 bytes @ 0x0
  3261                           
  3262  0070                     ?_MTOUCH_Button_Initialize:	
  3263                           ; 1 bytes @ 0x0
  3264                           
  3265  0070                     ?_MTOUCH_Button_isPressed:	
  3266                           ; 1 bytes @ 0x0
  3267                           
  3268  0070                     ?_EUSART_Initialize:	
  3269                           ; 1 bytes @ 0x0
  3270                           
  3271  0070                     ?_EUSART_is_rx_ready:	
  3272                           ; 1 bytes @ 0x0
  3273                           
  3274  0070                     ?_EUSART_Read:	
  3275                           ; 1 bytes @ 0x0
  3276                           
  3277  0070                     ?_EUSART_Write:	
  3278                           ; 1 bytes @ 0x0
  3279                           
  3280  0070                     ?_putch:	
  3281                           ; 1 bytes @ 0x0
  3282                           
  3283  0070                     ?_INTERRUPT_InterruptManager:	
  3284                           ; 1 bytes @ 0x0
  3285                           
  3286  0070                     ?_SYSTEM_Initialize:	
  3287                           ; 1 bytes @ 0x0
  3288                           
  3289  0070                     ?_main:	
  3290                           ; 1 bytes @ 0x0
  3291                           
  3292  0070                     TMR1_WriteTimer@timerVal:	
  3293                           ; 1 bytes @ 0x0
  3294                           
  3295                           
  3296                           ; 2 bytes @ 0x0
  3297  0070                     	ds	1
  3298  0071                     ??_EUSART_Receive_ISR:	
  3299  0071                     ??_EUSART_DefaultErrorHandler:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302                           
  3303                           ; 1 bytes @ 0x1
  3304  0071                     	ds	1
  3305  0072                     ??_TMR1_WriteTimer:	
  3306  0072                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3307                           ; 1 bytes @ 0x2
  3308                           
  3309  0072                     ?_TMR1_SetInterruptHandler:	
  3310                           ; 1 bytes @ 0x2
  3311                           
  3312  0072                     ??_MTOUCH_needReburst:	
  3313                           ; 1 bytes @ 0x2
  3314                           
  3315  0072                     ?_Sensor_DefaultCallback:	
  3316                           ; 1 bytes @ 0x2
  3317                           
  3318  0072                     ??_Sensor_Sampled_Reset:	
  3319                           ; 1 bytes @ 0x2
  3320                           
  3321  0072                     ??_Sensor_isEnabled:	
  3322                           ; 1 bytes @ 0x2
  3323                           
  3324  0072                     ??_Sensor_setSampled:	
  3325                           ; 1 bytes @ 0x2
  3326                           
  3327  0072                     ??_Sensor_isActive:	
  3328                           ; 1 bytes @ 0x2
  3329                           
  3330  0072                     ??_Sensor_isCalibrated:	
  3331                           ; 1 bytes @ 0x2
  3332                           
  3333  0072                     ??_Sensor_setActive:	
  3334                           ; 1 bytes @ 0x2
  3335                           
  3336  0072                     ??_Sensor_setInactive:	
  3337                           ; 1 bytes @ 0x2
  3338                           
  3339  0072                     ??_Sensor_isCalibratingAcqTime:	
  3340                           ; 1 bytes @ 0x2
  3341                           
  3342  0072                     ??_TMR2_LoadPeriodRegister:	
  3343                           ; 1 bytes @ 0x2
  3344                           
  3345  0072                     ??_TMR2_StartTimer:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348  0072                     ??_TMR2_StopTimer:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351  0072                     ??_Sensor_setCalibratAcqTime:	
  3352                           ; 1 bytes @ 0x2
  3353                           
  3354  0072                     ??_Sensor_setCalibrated:	
  3355                           ; 1 bytes @ 0x2
  3356                           
  3357  0072                     ?_memcpy:	
  3358                           ; 1 bytes @ 0x2
  3359                           
  3360  0072                     ??_Button_Baseline_Update:	
  3361                           ; 1 bytes @ 0x2
  3362                           
  3363  0072                     ??_Button_Tick_helper:	
  3364                           ; 1 bytes @ 0x2
  3365                           
  3366  0072                     ?_EUSART_SetRxInterruptHandler:	
  3367                           ; 1 bytes @ 0x2
  3368                           
  3369  0072                     ?_EUSART_SetFramingErrorHandler:	
  3370                           ; 1 bytes @ 0x2
  3371                           
  3372  0072                     ?_EUSART_SetOverrunErrorHandler:	
  3373                           ; 1 bytes @ 0x2
  3374                           
  3375  0072                     ?_EUSART_SetErrorHandler:	
  3376                           ; 1 bytes @ 0x2
  3377                           
  3378  0072                     ??_TMR1_ISR:	
  3379                           ; 1 bytes @ 0x2
  3380                           
  3381  0072                     ??_PIN_MANAGER_Initialize:	
  3382                           ; 1 bytes @ 0x2
  3383                           
  3384  0072                     ??_OSCILLATOR_Initialize:	
  3385                           ; 1 bytes @ 0x2
  3386                           
  3387  0072                     ??_WDT_Initialize:	
  3388                           ; 1 bytes @ 0x2
  3389                           
  3390  0072                     ??_TMR2_Initialize:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393  0072                     ??_LED_PROCESS:	
  3394                           ; 1 bytes @ 0x2
  3395                           
  3396  0072                     ??_check_data:	
  3397                           ; 1 bytes @ 0x2
  3398                           
  3399  0072                     ??_RELAY_PROCESS:	
  3400                           ; 1 bytes @ 0x2
  3401                           
  3402  0072                     ??_MTOUCH_ScanScheduler:	
  3403                           ; 1 bytes @ 0x2
  3404                           
  3405  0072                     ??_Sensor_getScanGroupIndex:	
  3406                           ; 1 bytes @ 0x2
  3407                           
  3408  0072                     ??_MTOUCH_Button_isPressed:	
  3409                           ; 1 bytes @ 0x2
  3410                           
  3411  0072                     ?_MTOUCH_Button_SetPressedCallback:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0072                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417  0072                     ??_EUSART_is_rx_ready:	
  3418                           ; 1 bytes @ 0x2
  3419                           
  3420  0072                     ??_EUSART_Read:	
  3421                           ; 1 bytes @ 0x2
  3422                           
  3423  0072                     ??_EUSART_Write:	
  3424                           ; 1 bytes @ 0x2
  3425                           
  3426  0072                     ??_INTERRUPT_InterruptManager:	
  3427                           ; 1 bytes @ 0x2
  3428                           
  3429  0072                     ?___bmul:	
  3430                           ; 1 bytes @ 0x2
  3431                           
  3432  0072                     ?_abs:	
  3433                           ; 1 bytes @ 0x2
  3434                           
  3435  0072                     ?_strlen:	
  3436                           ; 2 bytes @ 0x2
  3437                           
  3438  0072                     Sensor_DefaultCallback@sensor:	
  3439                           ; 2 bytes @ 0x2
  3440                           
  3441  0072                     Sensor_setActive@sensor:	
  3442                           ; 1 bytes @ 0x2
  3443                           
  3444  0072                     Sensor_setInactive@sensor:	
  3445                           ; 1 bytes @ 0x2
  3446                           
  3447  0072                     Sensor_isActive@sensor:	
  3448                           ; 1 bytes @ 0x2
  3449                           
  3450  0072                     Sensor_isCalibrated@sensor:	
  3451                           ; 1 bytes @ 0x2
  3452                           
  3453  0072                     Sensor_setCalibrated@sensor:	
  3454                           ; 1 bytes @ 0x2
  3455                           
  3456  0072                     Sensor_setCalibratAcqTime@sensor:	
  3457                           ; 1 bytes @ 0x2
  3458                           
  3459  0072                     Sensor_isCalibratingAcqTime@sensor:	
  3460                           ; 1 bytes @ 0x2
  3461                           
  3462  0072                     Sensor_Sampled_Reset@sensor:	
  3463                           ; 1 bytes @ 0x2
  3464                           
  3465  0072                     Sensor_setSampled@sensor:	
  3466                           ; 1 bytes @ 0x2
  3467                           
  3468  0072                     MTOUCH_Button_isPressed@name:	
  3469                           ; 1 bytes @ 0x2
  3470                           
  3471  0072                     Button_Deviation_Update@button:	
  3472                           ; 1 bytes @ 0x2
  3473                           
  3474  0072                     EUSART_Write@txData:	
  3475                           ; 1 bytes @ 0x2
  3476                           
  3477  0072                     TMR2_LoadPeriodRegister@periodVal:	
  3478                           ; 1 bytes @ 0x2
  3479                           
  3480  0072                     ___bmul@multiplicand:	
  3481                           ; 1 bytes @ 0x2
  3482                           
  3483  0072                     MTOUCH_Button_SetPressedCallback@callback:	
  3484                           ; 1 bytes @ 0x2
  3485                           
  3486  0072                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3487                           ; 2 bytes @ 0x2
  3488                           
  3489  0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3490                           ; 2 bytes @ 0x2
  3491                           
  3492  0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3493                           ; 2 bytes @ 0x2
  3494                           
  3495  0072                     EUSART_SetErrorHandler@interruptHandler:	
  3496                           ; 2 bytes @ 0x2
  3497                           
  3498  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3499                           ; 2 bytes @ 0x2
  3500                           
  3501  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  3502                           ; 2 bytes @ 0x2
  3503                           
  3504  0072                     abs@a:	
  3505                           ; 2 bytes @ 0x2
  3506                           
  3507  0072                     memcpy@s1:	
  3508                           ; 2 bytes @ 0x2
  3509                           
  3510                           
  3511                           ; 2 bytes @ 0x2
  3512  0072                     	ds	1
  3513  0073                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3514  0073                     ??_Sensor_DefaultCallback:	
  3515                           ; 1 bytes @ 0x3
  3516                           
  3517  0073                     ?_Sensor_loadADCSettings:	
  3518                           ; 1 bytes @ 0x3
  3519                           
  3520  0073                     ??_putch:	
  3521                           ; 1 bytes @ 0x3
  3522                           
  3523  0073                     ??___bmul:	
  3524                           ; 1 bytes @ 0x3
  3525                           
  3526  0073                     Sensor_loadADCSettings@adc_index:	
  3527                           ; 1 bytes @ 0x3
  3528                           
  3529  0073                     Sensor_isEnabled@sensor:	
  3530                           ; 1 bytes @ 0x3
  3531                           
  3532  0073                     EUSART_Read@readValue:	
  3533                           ; 1 bytes @ 0x3
  3534                           
  3535  0073                     putch@txData:	
  3536                           ; 1 bytes @ 0x3
  3537                           
  3538  0073                     Button_Deviation_Update@deviation:	
  3539                           ; 1 bytes @ 0x3
  3540                           
  3541                           
  3542                           ; 4 bytes @ 0x3
  3543  0073                     	ds	1
  3544  0074                     ??_TMR1_SetInterruptHandler:	
  3545  0074                     ??_abs:	
  3546                           ; 1 bytes @ 0x4
  3547                           
  3548  0074                     ??_EUSART_SetRxInterruptHandler:	
  3549                           ; 1 bytes @ 0x4
  3550                           
  3551  0074                     ??_EUSART_SetFramingErrorHandler:	
  3552                           ; 1 bytes @ 0x4
  3553                           
  3554  0074                     ??_EUSART_SetOverrunErrorHandler:	
  3555                           ; 1 bytes @ 0x4
  3556                           
  3557  0074                     ??_EUSART_SetErrorHandler:	
  3558                           ; 1 bytes @ 0x4
  3559                           
  3560  0074                     ??_TMR1_Initialize:	
  3561                           ; 1 bytes @ 0x4
  3562                           
  3563  0074                     ??_strlen:	
  3564                           ; 1 bytes @ 0x4
  3565                           
  3566  0074                     ??_Sensor_loadADCSettings:	
  3567                           ; 1 bytes @ 0x4
  3568                           
  3569  0074                     ??_MTOUCH_Button_SetPressedCallback:	
  3570                           ; 1 bytes @ 0x4
  3571                           
  3572  0074                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3573                           ; 1 bytes @ 0x4
  3574                           
  3575  0074                     ??_EUSART_Initialize:	
  3576                           ; 1 bytes @ 0x4
  3577                           
  3578  0074                     ?_fputc:	
  3579                           ; 1 bytes @ 0x4
  3580                           
  3581  0074                     Sensor_getScanGroupIndex@sensor:	
  3582                           ; 2 bytes @ 0x4
  3583                           
  3584  0074                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3585                           ; 1 bytes @ 0x4
  3586                           
  3587  0074                     Button_Tick_helper@button:	
  3588                           ; 1 bytes @ 0x4
  3589                           
  3590  0074                     check_data@x:	
  3591                           ; 1 bytes @ 0x4
  3592                           
  3593  0074                     LED_PROCESS@x:	
  3594                           ; 1 bytes @ 0x4
  3595                           
  3596  0074                     RELAY_PROCESS@x:	
  3597                           ; 1 bytes @ 0x4
  3598                           
  3599  0074                     ___bmul@product:	
  3600                           ; 1 bytes @ 0x4
  3601                           
  3602  0074                     memcpy@n:	
  3603                           ; 1 bytes @ 0x4
  3604                           
  3605  0074                     fputc@c:	
  3606                           ; 2 bytes @ 0x4
  3607                           
  3608                           
  3609                           ; 2 bytes @ 0x4
  3610  0074                     	ds	1
  3611  0075                     ??_MTOUCH_Button_Tick:	
  3612  0075                     ?_Button_DefaultCallback:	
  3613                           ; 1 bytes @ 0x5
  3614                           
  3615  0075                     ?_myButtonPressedCallback:	
  3616                           ; 1 bytes @ 0x5
  3617                           
  3618  0075                     ?_myButtonReleasedCallback:	
  3619                           ; 1 bytes @ 0x5
  3620                           
  3621  0075                     ??_DATA_PROCESS:	
  3622                           ; 1 bytes @ 0x5
  3623                           
  3624  0075                     Sensor_getScanGroupIndex@sensorGroup:	
  3625                           ; 1 bytes @ 0x5
  3626                           
  3627  0075                     Button_DefaultCallback@button:	
  3628                           ; 1 bytes @ 0x5
  3629                           
  3630  0075                     myButtonPressedCallback@button:	
  3631                           ; 1 bytes @ 0x5
  3632                           
  3633  0075                     myButtonReleasedCallback@button:	
  3634                           ; 1 bytes @ 0x5
  3635                           
  3636  0075                     ___bmul@multiplier:	
  3637                           ; 1 bytes @ 0x5
  3638                           
  3639  0075                     strlen@a:	
  3640                           ; 1 bytes @ 0x5
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x5
  3644  0075                     	ds	1
  3645  0076                     ??_MTOUCH_Sensor_Enable:	
  3646  0076                     ??_MTOUCH_Sensor_Calibrate:	
  3647                           ; 1 bytes @ 0x6
  3648                           
  3649  0076                     ??_Sensor_RawSample_Update:	
  3650                           ; 1 bytes @ 0x6
  3651                           
  3652  0076                     ??_Sensor_postAcquisitionProcess:	
  3653                           ; 1 bytes @ 0x6
  3654                           
  3655  0076                     ??_Sensor_autoCalibration:	
  3656                           ; 1 bytes @ 0x6
  3657                           
  3658  0076                     ??_Button_DefaultCallback:	
  3659                           ; 1 bytes @ 0x6
  3660                           
  3661  0076                     ??_memcpy:	
  3662                           ; 1 bytes @ 0x6
  3663                           
  3664  0076                     ??_myButtonPressedCallback:	
  3665                           ; 1 bytes @ 0x6
  3666                           
  3667  0076                     ??_myButtonReleasedCallback:	
  3668                           ; 1 bytes @ 0x6
  3669                           
  3670  0076                     ??_MTOUCH_Sensor_isCalibrated:	
  3671                           ; 1 bytes @ 0x6
  3672                           
  3673  0076                     ??_MTOUCH_Sensor_wasSampled:	
  3674                           ; 1 bytes @ 0x6
  3675                           
  3676  0076                     ?_MTOUCH_Sensor_RawSample_Get:	
  3677                           ; 1 bytes @ 0x6
  3678                           
  3679  0076                     MTOUCH_Button_Tick@i:	
  3680                           ; 2 bytes @ 0x6
  3681                           
  3682  0076                     fputc@fp:	
  3683                           ; 1 bytes @ 0x6
  3684                           
  3685  0076                     strlen@s:	
  3686                           ; 1 bytes @ 0x6
  3687                           
  3688                           
  3689                           ; 1 bytes @ 0x6
  3690  0076                     	ds	1
  3691  0077                     ??_MTOUCH_Tick:	
  3692  0077                     ??_fputs:	
  3693                           ; 1 bytes @ 0x7
  3694                           
  3695  0077                     Sensor_RawSample_Update@adcIndex:	
  3696                           ; 1 bytes @ 0x7
  3697                           
  3698  0077                     MTOUCH_Sensor_Enable@sensor:	
  3699                           ; 1 bytes @ 0x7
  3700                           
  3701  0077                     MTOUCH_Sensor_Calibrate@sensor:	
  3702                           ; 1 bytes @ 0x7
  3703                           
  3704  0077                     MTOUCH_Sensor_isCalibrated@sensor:	
  3705                           ; 1 bytes @ 0x7
  3706                           
  3707  0077                     MTOUCH_Sensor_wasSampled@sensor:	
  3708                           ; 1 bytes @ 0x7
  3709                           
  3710  0077                     DATA_PROCESS@x:	
  3711                           ; 1 bytes @ 0x7
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x7
  3715  0077                     	ds	1
  3716  0078                     ??_MTOUCH_Sensor_Initialize:	
  3717  0078                     ??_MTOUCH_Sensor_RawSample_Get:	
  3718                           ; 1 bytes @ 0x8
  3719                           
  3720  0078                     ??_MTOUCH_Button_Initialize:	
  3721                           ; 1 bytes @ 0x8
  3722                           
  3723  0078                     Sensor_RawSample_Update@sensor:	
  3724                           ; 1 bytes @ 0x8
  3725                           
  3726  0078                     Button_Baseline_Update@button:	
  3727                           ; 1 bytes @ 0x8
  3728                           
  3729                           
  3730                           ; 1 bytes @ 0x8
  3731  0078                     	ds	1
  3732  0079                     ??_MTOUCH_Button_InitializeAll:	
  3733  0079                     MTOUCH_Sensor_Initialize@sensor:	
  3734                           ; 1 bytes @ 0x9
  3735                           
  3736  0079                     MTOUCH_Sensor_RawSample_Get@name:	
  3737                           ; 1 bytes @ 0x9
  3738                           
  3739                           
  3740                           ; 1 bytes @ 0x9
  3741  0079                     	ds	1
  3742  007A                     ??_MTOUCH_Sensor_InitializeAll:	
  3743  007A                     ??_MTOUCH_Button_ServiceAll:	
  3744                           ; 1 bytes @ 0xA
  3745                           
  3746  007A                     ??_Button_Reading_Update:	
  3747                           ; 1 bytes @ 0xA
  3748                           
  3749  007A                     ??_update_state:	
  3750                           ; 1 bytes @ 0xA
  3751                           
  3752  007A                     ??_MTOUCH_Initialize:	
  3753                           ; 1 bytes @ 0xA
  3754                           
  3755  007A                     ??_SYSTEM_Initialize:	
  3756                           ; 1 bytes @ 0xA
  3757                           
  3758                           
  3759                           	psect	cstackBANK0
  3760  0020                     __pcstackBANK0:	
  3761                           ; 1 bytes @ 0xA
  3762                           
  3763  0020                     ??_Button_Deviation_Update:	
  3764  0020                     ??_Button_Baseline_Initialize:	
  3765                           ; 1 bytes @ 0x0
  3766                           
  3767  0020                     ??_Button_Reading_Update_Helper:	
  3768                           ; 1 bytes @ 0x0
  3769                           
  3770  0020                     ??_fputc:	
  3771                           ; 1 bytes @ 0x0
  3772                           
  3773  0020                     Sensor_postAcquisitionProcess@adcIndex:	
  3774                           ; 1 bytes @ 0x0
  3775                           
  3776  0020                     Sensor_autoCalibration@adcIndex:	
  3777                           ; 1 bytes @ 0x0
  3778                           
  3779  0020                     MTOUCH_Button_Initialize@name:	
  3780                           ; 1 bytes @ 0x0
  3781                           
  3782  0020                     memcpy@tmp:	
  3783                           ; 1 bytes @ 0x0
  3784                           
  3785  0020                     _Sensor_loadADCSettings$550:	
  3786                           ; 1 bytes @ 0x0
  3787                           
  3788                           
  3789                           ; 2 bytes @ 0x0
  3790  0020                     	ds	1
  3791  0021                     Sensor_autoCalibration@sensor:	
  3792  0021                     MTOUCH_Button_Initialize@button:	
  3793                           ; 1 bytes @ 0x1
  3794                           
  3795  0021                     Sensor_postAcquisitionProcess@deviation:	
  3796                           ; 1 bytes @ 0x1
  3797                           
  3798  0021                     memcpy@s:	
  3799                           ; 2 bytes @ 0x1
  3800                           
  3801                           
  3802                           ; 2 bytes @ 0x1
  3803  0021                     	ds	1
  3804  0022                     Sensor_loadADCSettings@addressOffset:	
  3805  0022                     Button_Reading_Update_Helper@button:	
  3806                           ; 1 bytes @ 0x2
  3807                           
  3808                           
  3809                           ; 1 bytes @ 0x2
  3810  0022                     	ds	1
  3811  0023                     Sensor_postAcquisitionProcess@sensor:	
  3812  0023                     Sensor_loadADCSettings@sensor:	
  3813                           ; 1 bytes @ 0x3
  3814                           
  3815  0023                     Button_Reading_Update@button:	
  3816                           ; 1 bytes @ 0x3
  3817                           
  3818  0023                     memcpy@d1:	
  3819                           ; 1 bytes @ 0x3
  3820                           
  3821                           
  3822                           ; 1 bytes @ 0x3
  3823  0023                     	ds	1
  3824  0024                     ?_Sensor_Acq_ExecutePacket:	
  3825  0024                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3826                           ; 1 bytes @ 0x4
  3827                           
  3828  0024                     Button_Baseline_Initialize@button:	
  3829                           ; 1 bytes @ 0x4
  3830                           
  3831  0024                     memcpy@d:	
  3832                           ; 1 bytes @ 0x4
  3833                           
  3834                           
  3835                           ; 1 bytes @ 0x4
  3836  0024                     	ds	1
  3837  0025                     ??_Sensor_Acq_ExecutePacket:	
  3838  0025                     ?_Button_State_Initializing:	
  3839                           ; 1 bytes @ 0x5
  3840                           
  3841  0025                     ?_Button_State_NotPressed:	
  3842                           ; 1 bytes @ 0x5
  3843                           
  3844  0025                     ?_Button_State_Pressed:	
  3845                           ; 1 bytes @ 0x5
  3846                           
  3847  0025                     ?_fputs:	
  3848                           ; 1 bytes @ 0x5
  3849                           
  3850  0025                     Button_State_Initializing@button:	
  3851                           ; 2 bytes @ 0x5
  3852                           
  3853  0025                     Button_State_NotPressed@button:	
  3854                           ; 1 bytes @ 0x5
  3855                           
  3856  0025                     Button_State_Pressed@button:	
  3857                           ; 1 bytes @ 0x5
  3858                           
  3859  0025                     fputs@fp:	
  3860                           ; 1 bytes @ 0x5
  3861                           
  3862                           
  3863                           ; 1 bytes @ 0x5
  3864  0025                     	ds	1
  3865  0026                     ??_Button_State_Initializing:	
  3866  0026                     ??_Button_State_NotPressed:	
  3867                           ; 1 bytes @ 0x6
  3868                           
  3869  0026                     ??_Button_State_Pressed:	
  3870                           ; 1 bytes @ 0x6
  3871                           
  3872  0026                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3873                           ; 1 bytes @ 0x6
  3874                           
  3875  0026                     fputs@c:	
  3876                           ; 1 bytes @ 0x6
  3877                           
  3878                           
  3879                           ; 1 bytes @ 0x6
  3880  0026                     	ds	1
  3881  0027                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3882  0027                     fputs@i:	
  3883                           ; 1 bytes @ 0x7
  3884                           
  3885                           
  3886                           ; 2 bytes @ 0x7
  3887  0027                     	ds	1
  3888  0028                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3889                           
  3890                           ; 1 bytes @ 0x8
  3891  0028                     	ds	1
  3892  0029                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3893  0029                     fputs@s:	
  3894                           ; 1 bytes @ 0x9
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x9
  3898  0029                     	ds	1
  3899  002A                     ??_Button_Service:	
  3900  002A                     ?_pad:	
  3901                           ; 1 bytes @ 0xA
  3902                           
  3903  002A                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3904                           ; 2 bytes @ 0xA
  3905                           
  3906  002A                     pad@buf:	
  3907                           ; 1 bytes @ 0xA
  3908                           
  3909                           
  3910                           ; 1 bytes @ 0xA
  3911  002A                     	ds	1
  3912  002B                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3913  002B                     Button_Service@name:	
  3914                           ; 1 bytes @ 0xB
  3915                           
  3916  002B                     pad@p:	
  3917                           ; 1 bytes @ 0xB
  3918                           
  3919                           
  3920                           ; 2 bytes @ 0xB
  3921  002B                     	ds	1
  3922  002C                     Sensor_Acq_ExecutePacket@activeSensor:	
  3923  002C                     Button_Service@button:	
  3924                           ; 1 bytes @ 0xC
  3925                           
  3926                           
  3927                           ; 1 bytes @ 0xC
  3928  002C                     	ds	1
  3929  002D                     ??_pad:	
  3930  002D                     Sensor_Acq_ExecutePacket@last_a:	
  3931                           ; 1 bytes @ 0xD
  3932                           
  3933                           
  3934                           ; 2 bytes @ 0xD
  3935  002D                     	ds	1
  3936  002E                     pad@i:	
  3937                           
  3938                           ; 2 bytes @ 0xE
  3939  002E                     	ds	1
  3940  002F                     Sensor_Acq_ExecutePacket@last_b:	
  3941                           
  3942                           ; 2 bytes @ 0xF
  3943  002F                     	ds	1
  3944  0030                     pad@w:	
  3945                           
  3946                           ; 2 bytes @ 0x10
  3947  0030                     	ds	1
  3948  0031                     Sensor_Acq_ExecutePacket@packet_counter:	
  3949                           
  3950                           ; 1 bytes @ 0x11
  3951  0031                     	ds	1
  3952  0032                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3953  0032                     pad@fp:	
  3954                           ; 1 bytes @ 0x12
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x12
  3958  0032                     	ds	1
  3959  0033                     ?_Sensor_Scanfrequency_Evaluation:	
  3960  0033                     ?_ctoa:	
  3961                           ; 1 bytes @ 0x13
  3962                           
  3963  0033                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3964                           ; 2 bytes @ 0x13
  3965                           
  3966  0033                     ctoa@c:	
  3967                           ; 1 bytes @ 0x13
  3968                           
  3969                           
  3970                           ; 1 bytes @ 0x13
  3971  0033                     	ds	1
  3972  0034                     ??_Sensor_Scanfrequency_Evaluation:	
  3973                           
  3974                           ; 1 bytes @ 0x14
  3975  0034                     	ds	1
  3976  0035                     ??_ctoa:	
  3977                           
  3978                           ; 1 bytes @ 0x15
  3979  0035                     	ds	1
  3980  0036                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3981  0036                     ctoa@w:	
  3982                           ; 1 bytes @ 0x16
  3983                           
  3984                           
  3985                           ; 2 bytes @ 0x16
  3986  0036                     	ds	1
  3987  0037                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3988                           
  3989                           ; 2 bytes @ 0x17
  3990  0037                     	ds	1
  3991  0038                     ctoa@fp:	
  3992                           
  3993                           ; 1 bytes @ 0x18
  3994  0038                     	ds	1
  3995  0039                     ?_vfpfcnvrt:	
  3996  0039                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3997                           ; 2 bytes @ 0x19
  3998                           
  3999  0039                     vfpfcnvrt@fmt:	
  4000                           ; 1 bytes @ 0x19
  4001                           
  4002                           
  4003                           ; 1 bytes @ 0x19
  4004  0039                     	ds	1
  4005  003A                     Sensor_Scanfrequency_Evaluation@retry:	
  4006  003A                     vfpfcnvrt@ap:	
  4007                           ; 1 bytes @ 0x1A
  4008                           
  4009                           
  4010                           ; 1 bytes @ 0x1A
  4011  003A                     	ds	1
  4012  003B                     ??_vfpfcnvrt:	
  4013  003B                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  4014                           ; 1 bytes @ 0x1B
  4015                           
  4016                           
  4017                           ; 4 bytes @ 0x1B
  4018  003B                     	ds	4
  4019  003F                     Sensor_Scanfrequency_Evaluation@i:	
  4020                           
  4021                           ; 1 bytes @ 0x1F
  4022  003F                     	ds	1
  4023  0040                     ?_Sensor_Acquisition:	
  4024  0040                     Sensor_Acquisition@sensor_adc2:	
  4025                           ; 1 bytes @ 0x20
  4026                           
  4027  0040                     vfpfcnvrt@c:	
  4028                           ; 1 bytes @ 0x20
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x20
  4032  0040                     	ds	1
  4033  0041                     ??_Sensor_Acquisition:	
  4034  0041                     vfpfcnvrt@fp:	
  4035                           ; 1 bytes @ 0x21
  4036                           
  4037                           
  4038                           ; 1 bytes @ 0x21
  4039  0041                     	ds	1
  4040  0042                     ?_vfprintf:	
  4041  0042                     Sensor_Acquisition@retry:	
  4042                           ; 2 bytes @ 0x22
  4043                           
  4044  0042                     vfprintf@fmt:	
  4045                           ; 1 bytes @ 0x22
  4046                           
  4047                           
  4048                           ; 2 bytes @ 0x22
  4049  0042                     	ds	1
  4050  0043                     Sensor_Acquisition@sensor_adc1:	
  4051                           
  4052                           ; 1 bytes @ 0x23
  4053  0043                     	ds	1
  4054  0044                     ??_Sensor_Service:	
  4055  0044                     vfprintf@ap:	
  4056                           ; 1 bytes @ 0x24
  4057                           
  4058                           
  4059                           ; 1 bytes @ 0x24
  4060  0044                     	ds	1
  4061  0045                     ??_vfprintf:	
  4062                           
  4063                           ; 1 bytes @ 0x25
  4064  0045                     	ds	2
  4065  0047                     Sensor_Service@scanGroup:	
  4066  0047                     vfprintf@fp:	
  4067                           ; 1 bytes @ 0x27
  4068                           
  4069                           
  4070                           ; 1 bytes @ 0x27
  4071  0047                     	ds	1
  4072  0048                     Sensor_Service@error:	
  4073  0048                     vfprintf@cfmt:	
  4074                           ; 1 bytes @ 0x28
  4075                           
  4076                           
  4077                           ; 2 bytes @ 0x28
  4078  0048                     	ds	1
  4079  0049                     Sensor_Service@sensor_adc1:	
  4080                           
  4081                           ; 1 bytes @ 0x29
  4082  0049                     	ds	1
  4083  004A                     ?_printf:	
  4084  004A                     Sensor_Service@sensor_adc2:	
  4085                           ; 2 bytes @ 0x2A
  4086                           
  4087  004A                     printf@fmt:	
  4088                           ; 1 bytes @ 0x2A
  4089                           
  4090                           
  4091                           ; 2 bytes @ 0x2A
  4092  004A                     	ds	1
  4093  004B                     ??_MTOUCH_Sensor_SampleAll:	
  4094                           
  4095                           ; 1 bytes @ 0x2B
  4096  004B                     	ds	1
  4097  004C                     MTOUCH_Sensor_SampleAll@group:	
  4098                           
  4099                           ; 1 bytes @ 0x2C
  4100  004C                     	ds	1
  4101  004D                     ??_MTOUCH_Service_Mainloop:	
  4102                           
  4103                           ; 1 bytes @ 0x2D
  4104  004D                     	ds	1
  4105  004E                     ??_printf:	
  4106                           
  4107                           ; 1 bytes @ 0x2E
  4108  004E                     	ds	3
  4109  0051                     printf@ap:	
  4110                           
  4111                           ; 1 bytes @ 0x31
  4112  0051                     	ds	1
  4113  0052                     ??_check_message:	
  4114                           
  4115                           ; 1 bytes @ 0x32
  4116  0052                     	ds	2
  4117  0054                     check_message@x:	
  4118                           
  4119                           ; 1 bytes @ 0x34
  4120  0054                     	ds	1
  4121                           
  4122                           	psect	maintext
  4123  0062                     __pmaintext:	
  4124 ;;
  4125 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4126 ;;
  4127 ;; *************** function _main *****************
  4128 ;; Defined at:
  4129 ;;		line 17 in file "main.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;		None
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;		None
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  1    wreg      void 
  4136 ;; Registers used:
  4137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4138 ;; Tracked objects:
  4139 ;;		On entry : B1F/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4143 ;;      Params:         0       0       0       0       0       0       0       0
  4144 ;;      Locals:         0       0       0       0       0       0       0       0
  4145 ;;      Temps:          0       0       0       2       0       0       0       0
  4146 ;;      Totals:         0       0       0       2       0       0       0       0
  4147 ;;Total ram usage:        2 bytes
  4148 ;; Hardware stack levels required when called:   14
  4149 ;; This function calls:
  4150 ;;		_DATA_PROCESS
  4151 ;;		_EUSART_Read
  4152 ;;		_EUSART_is_rx_ready
  4153 ;;		_LED_PROCESS
  4154 ;;		_MTOUCH_Button_SetNotPressedCallback
  4155 ;;		_MTOUCH_Button_SetPressedCallback
  4156 ;;		_MTOUCH_Button_isPressed
  4157 ;;		_MTOUCH_Service_Mainloop
  4158 ;;		_SYSTEM_Initialize
  4159 ;;		_check_data
  4160 ;;		_check_message
  4161 ;;		_printf
  4162 ;;		_update_state
  4163 ;; This function is called by:
  4164 ;;		Startup code after reset
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _main
  4170  0062                     _main:	
  4171                           
  4172                           ;main.c: 19:     SYSTEM_Initialize();
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4176  0062  3195  256B  3180   	fcall	_SYSTEM_Initialize
  4177                           
  4178                           ;main.c: 20:     (INTCONbits.GIE = 1);
  4179  0065  178B               	bsf	11,7	;volatile
  4180                           
  4181                           ;main.c: 21:     (INTCONbits.PEIE = 1);
  4182  0066  170B               	bsf	11,6	;volatile
  4183                           
  4184                           ;main.c: 22:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  4185  0067  30D2               	movlw	low _myButtonPressedCallback
  4186  0068  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback
  4187  0069  3017               	movlw	high _myButtonPressedCallback
  4188  006A  00F3               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  4189  006B  3193  2387  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  4190                           
  4191                           ;main.c: 23:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  4192  006E  304C               	movlw	low _myButtonReleasedCallback
  4193  006F  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  4194  0070  3016               	movlw	high _myButtonReleasedCallback
  4195  0071  00F3               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  4196  0072  3193  2381  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  4197  0075  0022               	movlb	2	; select bank2
  4198  0076  110C               	bcf	12,2	;volatile
  4199                           
  4200                           ;main.c: 25:     LED_PROCESS(0);
  4201  0077  3000               	movlw	0
  4202  0078  318E  2622  3180   	fcall	_LED_PROCESS
  4203                           
  4204                           ;main.c: 26:     last_touch_status.full_status = 0x00;
  4205  007B  0020               	movlb	0	; select bank0
  4206  007C  01DB               	clrf	_last_touch_status
  4207  007D  01DC               	clrf	_last_touch_status+1
  4208  007E                     l6252:	
  4209                           
  4210                           ;main.c: 28:     {;main.c: 29:         if(update_state_flag == 1)
  4211  007E  0020               	movlb	0	; select bank0
  4212  007F  0361               	decf	_update_state_flag,w
  4213  0080  1D03               	btfss	3,2
  4214  0081  2886               	goto	l6258
  4215                           
  4216                           ;main.c: 30:         {;main.c: 31:             update_state_flag = 0;
  4217  0082  01E1               	clrf	_update_state_flag
  4218                           
  4219                           ;main.c: 32:             update_state();
  4220  0083  3186  2634  3180   	fcall	_update_state
  4221  0086                     l6258:	
  4222                           
  4223                           ;main.c: 35:         if(EUSART_is_rx_ready())
  4224  0086  3193  2360  3180   	fcall	_EUSART_is_rx_ready
  4225  0089  3A00               	xorlw	0
  4226  008A  1903               	skipnz
  4227  008B  297F               	goto	l6330
  4228                           
  4229                           ;main.c: 36:         {;main.c: 37:             rxData = EUSART_Read();
  4230  008C  3196  2690  3180   	fcall	_EUSART_Read
  4231  008F  0022               	movlb	2	; select bank2
  4232  0090  00C4               	movwf	??_main^(0+256)
  4233  0091  0844               	movf	??_main^(0+256),w
  4234  0092  0020               	movlb	0	; select bank0
  4235  0093  00E7               	movwf	_rxData
  4236                           
  4237                           ;main.c: 38:             if(check_data(rxData))
  4238  0094  0867               	movf	_rxData,w
  4239  0095  3189  2171  3180   	fcall	_check_data
  4240  0098  3A00               	xorlw	0
  4241  0099  1903               	skipnz
  4242  009A  297F               	goto	l6330
  4243                           
  4244                           ;main.c: 39:             {;main.c: 40:                 if(check_request == 0)
  4245  009B  0020               	movlb	0	; select bank0
  4246  009C  0864               	movf	_check_request,w
  4247  009D  1D03               	btfss	3,2
  4248  009E  28AA               	goto	l6270
  4249                           
  4250                           ;main.c: 41:                 {;main.c: 42:                     prcData = rxData;
  4251  009F  0867               	movf	_rxData,w
  4252  00A0  0022               	movlb	2	; select bank2
  4253  00A1  00C4               	movwf	??_main^(0+256)
  4254  00A2  0844               	movf	??_main^(0+256),w
  4255  00A3  0020               	movlb	0	; select bank0
  4256  00A4  00E6               	movwf	_prcData
  4257                           
  4258                           ;main.c: 43:                     check_message(rxData);
  4259  00A5  0867               	movf	_rxData,w
  4260  00A6  3197  2701  3180   	fcall	_check_message
  4261                           
  4262                           ;main.c: 44:                 }
  4263  00A9  297F               	goto	l6330
  4264  00AA                     l6270:	
  4265                           
  4266                           ;main.c: 46:                 {;main.c: 47:                     if(config_status == 1)
  4267  00AA  0365               	decf	_config_status,w
  4268  00AB  1D03               	btfss	3,2
  4269  00AC  296D               	goto	l6320
  4270                           
  4271                           ;main.c: 48:                     {;main.c: 49:                         if(rxData == 'T')
  4272  00AD  3054               	movlw	84
  4273  00AE  0667               	xorwf	_rxData,w
  4274  00AF  1D03               	btfss	3,2
  4275  00B0  290C               	goto	l6296
  4276                           
  4277                           ;main.c: 50:                         {;main.c: 51:                             LED_PROCE
      +                          SS(15);
  4278  00B1  300F               	movlw	15
  4279  00B2  318E  2622  3180   	fcall	_LED_PROCESS
  4280                           
  4281                           ;main.c: 52:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4282  00B5  3015               	movlw	21
  4283  00B6  0022               	movlb	2	; select bank2
  4284  00B7  00C5               	movwf	(??_main^(0+256)+1)
  4285  00B8  304B               	movlw	75
  4286  00B9  00C4               	movwf	??_main^(0+256)
  4287  00BA  30BE               	movlw	190
  4288  00BB                     u4797:	
  4289  00BB  0B89               	decfsz	9,f
  4290  00BC  28BB               	goto	u4797
  4291  00BD  0BC4               	decfsz	??_main^(0+256),f
  4292  00BE  28BB               	goto	u4797
  4293  00BF  0BC5               	decfsz	(??_main^(0+256)+1),f
  4294  00C0  28BB               	goto	u4797
  4295  00C1  0000               	nop
  4296                           
  4297                           ;main.c: 53:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4298  00C2  3015               	movlw	21
  4299  00C3  0022               	movlb	2	; select bank2
  4300  00C4  00C5               	movwf	(??_main^(0+256)+1)
  4301  00C5  304B               	movlw	75
  4302  00C6  00C4               	movwf	??_main^(0+256)
  4303  00C7  30BE               	movlw	190
  4304  00C8                     u4807:	
  4305  00C8  0B89               	decfsz	9,f
  4306  00C9  28C8               	goto	u4807
  4307  00CA  0BC4               	decfsz	??_main^(0+256),f
  4308  00CB  28C8               	goto	u4807
  4309  00CC  0BC5               	decfsz	(??_main^(0+256)+1),f
  4310  00CD  28C8               	goto	u4807
  4311  00CE  0000               	nop
  4312                           
  4313                           ;main.c: 54:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4314  00CF  3015               	movlw	21
  4315  00D0  0022               	movlb	2	; select bank2
  4316  00D1  00C5               	movwf	(??_main^(0+256)+1)
  4317  00D2  304B               	movlw	75
  4318  00D3  00C4               	movwf	??_main^(0+256)
  4319  00D4  30BE               	movlw	190
  4320  00D5                     u4817:	
  4321  00D5  0B89               	decfsz	9,f
  4322  00D6  28D5               	goto	u4817
  4323  00D7  0BC4               	decfsz	??_main^(0+256),f
  4324  00D8  28D5               	goto	u4817
  4325  00D9  0BC5               	decfsz	(??_main^(0+256)+1),f
  4326  00DA  28D5               	goto	u4817
  4327  00DB  0000               	nop
  4328                           
  4329                           ;main.c: 55:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4330  00DC  3015               	movlw	21
  4331  00DD  0022               	movlb	2	; select bank2
  4332  00DE  00C5               	movwf	(??_main^(0+256)+1)
  4333  00DF  304B               	movlw	75
  4334  00E0  00C4               	movwf	??_main^(0+256)
  4335  00E1  30BE               	movlw	190
  4336  00E2                     u4827:	
  4337  00E2  0B89               	decfsz	9,f
  4338  00E3  28E2               	goto	u4827
  4339  00E4  0BC4               	decfsz	??_main^(0+256),f
  4340  00E5  28E2               	goto	u4827
  4341  00E6  0BC5               	decfsz	(??_main^(0+256)+1),f
  4342  00E7  28E2               	goto	u4827
  4343  00E8  0000               	nop
  4344                           
  4345                           ;main.c: 56:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4346  00E9  3015               	movlw	21
  4347  00EA  0022               	movlb	2	; select bank2
  4348  00EB  00C5               	movwf	(??_main^(0+256)+1)
  4349  00EC  304B               	movlw	75
  4350  00ED  00C4               	movwf	??_main^(0+256)
  4351  00EE  30BE               	movlw	190
  4352  00EF                     u4837:	
  4353  00EF  0B89               	decfsz	9,f
  4354  00F0  28EF               	goto	u4837
  4355  00F1  0BC4               	decfsz	??_main^(0+256),f
  4356  00F2  28EF               	goto	u4837
  4357  00F3  0BC5               	decfsz	(??_main^(0+256)+1),f
  4358  00F4  28EF               	goto	u4837
  4359  00F5  0000               	nop
  4360                           
  4361                           ;main.c: 57:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4362  00F6  3015               	movlw	21
  4363  00F7  0022               	movlb	2	; select bank2
  4364  00F8  00C5               	movwf	(??_main^(0+256)+1)
  4365  00F9  304B               	movlw	75
  4366  00FA  00C4               	movwf	??_main^(0+256)
  4367  00FB  30BE               	movlw	190
  4368  00FC                     u4847:	
  4369  00FC  0B89               	decfsz	9,f
  4370  00FD  28FC               	goto	u4847
  4371  00FE  0BC4               	decfsz	??_main^(0+256),f
  4372  00FF  28FC               	goto	u4847
  4373  0100  0BC5               	decfsz	(??_main^(0+256)+1),f
  4374  0101  28FC               	goto	u4847
  4375  0102  0000               	nop
  4376                           
  4377                           ;main.c: 58:                             config_status = 0;
  4378  0103  0020               	movlb	0	; select bank0
  4379  0104  01E5               	clrf	_config_status
  4380                           
  4381                           ;main.c: 59:                             check_request = 0;
  4382  0105  01E4               	clrf	_check_request
  4383                           
  4384                           ;main.c: 60:                             timeout_count = 0;
  4385  0106  01DD               	clrf	_timeout_count
  4386  0107  01DE               	clrf	_timeout_count+1
  4387                           
  4388                           ;main.c: 61:                             LED_PROCESS(last_touch_status.full_status);
  4389  0108  085B               	movf	_last_touch_status,w
  4390  0109  318E  2622  3180   	fcall	_LED_PROCESS
  4391  010C                     l6296:	
  4392                           
  4393                           ;main.c: 63:                         if(rxData == 'F')
  4394  010C  3046               	movlw	70
  4395  010D  0020               	movlb	0	; select bank0
  4396  010E  0667               	xorwf	_rxData,w
  4397  010F  1D03               	btfss	3,2
  4398  0110  297F               	goto	l6330
  4399                           
  4400                           ;main.c: 64:                         {;main.c: 65:                             LED_PROCE
      +                          SS(0);
  4401  0111  3000               	movlw	0
  4402  0112  318E  2622  3180   	fcall	_LED_PROCESS
  4403                           
  4404                           ;main.c: 66:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4405  0115  3015               	movlw	21
  4406  0116  0022               	movlb	2	; select bank2
  4407  0117  00C5               	movwf	(??_main^(0+256)+1)
  4408  0118  304B               	movlw	75
  4409  0119  00C4               	movwf	??_main^(0+256)
  4410  011A  30BE               	movlw	190
  4411  011B                     u4857:	
  4412  011B  0B89               	decfsz	9,f
  4413  011C  291B               	goto	u4857
  4414  011D  0BC4               	decfsz	??_main^(0+256),f
  4415  011E  291B               	goto	u4857
  4416  011F  0BC5               	decfsz	(??_main^(0+256)+1),f
  4417  0120  291B               	goto	u4857
  4418  0121  0000               	nop
  4419                           
  4420                           ;main.c: 67:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4421  0122  3015               	movlw	21
  4422  0123  0022               	movlb	2	; select bank2
  4423  0124  00C5               	movwf	(??_main^(0+256)+1)
  4424  0125  304B               	movlw	75
  4425  0126  00C4               	movwf	??_main^(0+256)
  4426  0127  30BE               	movlw	190
  4427  0128                     u4867:	
  4428  0128  0B89               	decfsz	9,f
  4429  0129  2928               	goto	u4867
  4430  012A  0BC4               	decfsz	??_main^(0+256),f
  4431  012B  2928               	goto	u4867
  4432  012C  0BC5               	decfsz	(??_main^(0+256)+1),f
  4433  012D  2928               	goto	u4867
  4434  012E  0000               	nop
  4435                           
  4436                           ;main.c: 68:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4437  012F  3015               	movlw	21
  4438  0130  0022               	movlb	2	; select bank2
  4439  0131  00C5               	movwf	(??_main^(0+256)+1)
  4440  0132  304B               	movlw	75
  4441  0133  00C4               	movwf	??_main^(0+256)
  4442  0134  30BE               	movlw	190
  4443  0135                     u4877:	
  4444  0135  0B89               	decfsz	9,f
  4445  0136  2935               	goto	u4877
  4446  0137  0BC4               	decfsz	??_main^(0+256),f
  4447  0138  2935               	goto	u4877
  4448  0139  0BC5               	decfsz	(??_main^(0+256)+1),f
  4449  013A  2935               	goto	u4877
  4450  013B  0000               	nop
  4451                           
  4452                           ;main.c: 69:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4453  013C  3015               	movlw	21
  4454  013D  0022               	movlb	2	; select bank2
  4455  013E  00C5               	movwf	(??_main^(0+256)+1)
  4456  013F  304B               	movlw	75
  4457  0140  00C4               	movwf	??_main^(0+256)
  4458  0141  30BE               	movlw	190
  4459  0142                     u4887:	
  4460  0142  0B89               	decfsz	9,f
  4461  0143  2942               	goto	u4887
  4462  0144  0BC4               	decfsz	??_main^(0+256),f
  4463  0145  2942               	goto	u4887
  4464  0146  0BC5               	decfsz	(??_main^(0+256)+1),f
  4465  0147  2942               	goto	u4887
  4466  0148  0000               	nop
  4467                           
  4468                           ;main.c: 70:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4469  0149  3015               	movlw	21
  4470  014A  0022               	movlb	2	; select bank2
  4471  014B  00C5               	movwf	(??_main^(0+256)+1)
  4472  014C  304B               	movlw	75
  4473  014D  00C4               	movwf	??_main^(0+256)
  4474  014E  30BE               	movlw	190
  4475  014F                     u4897:	
  4476  014F  0B89               	decfsz	9,f
  4477  0150  294F               	goto	u4897
  4478  0151  0BC4               	decfsz	??_main^(0+256),f
  4479  0152  294F               	goto	u4897
  4480  0153  0BC5               	decfsz	(??_main^(0+256)+1),f
  4481  0154  294F               	goto	u4897
  4482  0155  0000               	nop
  4483                           
  4484                           ;main.c: 71:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4485  0156  3015               	movlw	21
  4486  0157  0022               	movlb	2	; select bank2
  4487  0158  00C5               	movwf	(??_main^(0+256)+1)
  4488  0159  304B               	movlw	75
  4489  015A  00C4               	movwf	??_main^(0+256)
  4490  015B  30BE               	movlw	190
  4491  015C                     u4907:	
  4492  015C  0B89               	decfsz	9,f
  4493  015D  295C               	goto	u4907
  4494  015E  0BC4               	decfsz	??_main^(0+256),f
  4495  015F  295C               	goto	u4907
  4496  0160  0BC5               	decfsz	(??_main^(0+256)+1),f
  4497  0161  295C               	goto	u4907
  4498  0162  0000               	nop
  4499                           
  4500                           ;main.c: 72:                             config_status = 0;
  4501  0163  0020               	movlb	0	; select bank0
  4502  0164  01E5               	clrf	_config_status
  4503                           
  4504                           ;main.c: 73:                             check_request = 0;
  4505  0165  01E4               	clrf	_check_request
  4506                           
  4507                           ;main.c: 74:                             timeout_count = 0;
  4508  0166  01DD               	clrf	_timeout_count
  4509  0167  01DE               	clrf	_timeout_count+1
  4510                           
  4511                           ;main.c: 75:                             LED_PROCESS(last_touch_status.full_status);
  4512  0168  085B               	movf	_last_touch_status,w
  4513  0169  318E  2622  3180   	fcall	_LED_PROCESS
  4514  016C  297F               	goto	l6330
  4515  016D                     l6320:	
  4516                           
  4517                           ;main.c: 79:                     {;main.c: 80:                         if(rxData == 'T')
  4518  016D  3054               	movlw	84
  4519  016E  0667               	xorwf	_rxData,w
  4520  016F  1D03               	btfss	3,2
  4521  0170  2978               	goto	l6326
  4522                           
  4523                           ;main.c: 81:                         {;main.c: 82:                             DATA_PROC
      +                          ESS(prcData);
  4524  0171  0866               	movf	_prcData,w
  4525  0172  3184  2459  3180   	fcall	_DATA_PROCESS
  4526                           
  4527                           ;main.c: 83:                             timeout_count = 0;
  4528  0175  0020               	movlb	0	; select bank0
  4529  0176  01DD               	clrf	_timeout_count
  4530  0177  01DE               	clrf	_timeout_count+1
  4531  0178                     l6326:	
  4532                           
  4533                           ;main.c: 85:                         if(rxData == 'F')
  4534  0178  3046               	movlw	70
  4535  0179  0667               	xorwf	_rxData,w
  4536  017A  1D03               	btfss	3,2
  4537  017B  297F               	goto	l6330
  4538                           
  4539                           ;main.c: 86:                         {;main.c: 87:                             check_req
      +                          uest = 0;
  4540  017C  01E4               	clrf	_check_request
  4541                           
  4542                           ;main.c: 88:                             timeout_count = 0;
  4543  017D  01DD               	clrf	_timeout_count
  4544  017E  01DE               	clrf	_timeout_count+1
  4545  017F                     l6330:	
  4546                           ;main.c: 92:             }
  4547                           
  4548                           
  4549                           ;main.c: 94:         if(MTOUCH_Service_Mainloop())
  4550  017F  3196  2612  3180   	fcall	_MTOUCH_Service_Mainloop
  4551  0182  3A00               	xorlw	0
  4552  0183  1903               	skipnz
  4553  0184  287E               	goto	l6252
  4554                           
  4555                           ;main.c: 95:         {;main.c: 96:             if(config_status == 0)
  4556  0185  0020               	movlb	0	; select bank0
  4557  0186  0865               	movf	_config_status,w
  4558  0187  1D03               	btfss	3,2
  4559  0188  2A17               	goto	l6378
  4560                           
  4561                           ;main.c: 97:             {;main.c: 98:                 if(check_request == 1)
  4562  0189  0364               	decf	_check_request,w
  4563  018A  1D03               	btfss	3,2
  4564  018B  2998               	goto	l6342
  4565                           
  4566                           ;main.c: 99:                 {;main.c: 100:                     timeout_count++;
  4567  018C  3001               	movlw	1
  4568  018D  07DD               	addwf	_timeout_count,f
  4569  018E  3000               	movlw	0
  4570  018F  3DDE               	addwfc	_timeout_count+1,f
  4571                           
  4572                           ;main.c: 101:                     if(timeout_count == 30)
  4573  0190  301E               	movlw	30
  4574  0191  065D               	xorwf	_timeout_count,w
  4575  0192  045E               	iorwf	_timeout_count+1,w
  4576  0193  1D03               	btfss	3,2
  4577  0194  2998               	goto	l6342
  4578                           
  4579                           ;main.c: 102:                     {;main.c: 103:                         timeout_count =
      +                           0;
  4580  0195  01DD               	clrf	_timeout_count
  4581  0196  01DE               	clrf	_timeout_count+1
  4582                           
  4583                           ;main.c: 104:                         check_request = 0;
  4584  0197  01E4               	clrf	_check_request
  4585  0198                     l6342:	
  4586                           
  4587                           ;main.c: 107:                 if(MTOUCH_Button_isPressed(0) == 1 && MTOUCH_Button_isPres
      +                          sed(1) == 0 && MTOUCH_Button_isPressed(2) == 0&& MTOUCH_Button_isPressed(3) == 1)
  4588  0198  3000               	movlw	0
  4589  0199  3194  2476  3180   	fcall	_MTOUCH_Button_isPressed
  4590  019C  3A01               	xorlw	1
  4591  019D  1D03               	skipz
  4592  019E  2A13               	goto	l6376
  4593  019F  3001               	movlw	1
  4594  01A0  3194  2476  3180   	fcall	_MTOUCH_Button_isPressed
  4595  01A3  3A00               	xorlw	0
  4596  01A4  1D03               	skipz
  4597  01A5  2A13               	goto	l6376
  4598  01A6  3002               	movlw	2
  4599  01A7  3194  2476  3180   	fcall	_MTOUCH_Button_isPressed
  4600  01AA  3A00               	xorlw	0
  4601  01AB  1D03               	skipz
  4602  01AC  2A13               	goto	l6376
  4603  01AD  3003               	movlw	3
  4604  01AE  3194  2476  3180   	fcall	_MTOUCH_Button_isPressed
  4605  01B1  3A01               	xorlw	1
  4606  01B2  1D03               	skipz
  4607  01B3  2A13               	goto	l6376
  4608                           
  4609                           ;main.c: 108:                 {;main.c: 109:                     count_conf++;
  4610  01B4  3001               	movlw	1
  4611  01B5  0021               	movlb	1	; select bank1
  4612  01B6  07B6               	addwf	_count_conf^(0+128),f
  4613  01B7  3000               	movlw	0
  4614  01B8  3DB7               	addwfc	(_count_conf+1)^(0+128),f
  4615                           
  4616                           ;main.c: 110:                     if(count_conf == 1800)
  4617  01B9  3008               	movlw	8
  4618  01BA  0636               	xorwf	_count_conf^(0+128),w
  4619  01BB  3007               	movlw	7
  4620  01BC  1903               	skipnz
  4621  01BD  0637               	xorwf	(_count_conf+1)^(0+128),w
  4622  01BE  1D03               	btfss	3,2
  4623  01BF  287E               	goto	l6252
  4624                           
  4625                           ;main.c: 111:                     {;main.c: 112:                         count_conf = 0;
  4626  01C0  01B6               	clrf	_count_conf^(0+128)
  4627  01C1  01B7               	clrf	(_count_conf+1)^(0+128)
  4628                           
  4629                           ;main.c: 113:                         printf("PICSMART");
  4630  01C2  3000               	movlw	low (STR_1| (0+32768))
  4631  01C3  0020               	movlb	0	; select bank0
  4632  01C4  00CA               	movwf	printf@fmt
  4633  01C5  3098               	movlw	high (STR_1| (0+32768))
  4634  01C6  00CB               	movwf	printf@fmt+1
  4635  01C7  3195  250A  3180   	fcall	_printf
  4636                           
  4637                           ;main.c: 114:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4638  01CA  3015               	movlw	21
  4639  01CB  0022               	movlb	2	; select bank2
  4640  01CC  00C5               	movwf	(??_main^(0+256)+1)
  4641  01CD  304B               	movlw	75
  4642  01CE  00C4               	movwf	??_main^(0+256)
  4643  01CF  30BE               	movlw	190
  4644  01D0                     u4917:	
  4645  01D0  0B89               	decfsz	9,f
  4646  01D1  29D0               	goto	u4917
  4647  01D2  0BC4               	decfsz	??_main^(0+256),f
  4648  01D3  29D0               	goto	u4917
  4649  01D4  0BC5               	decfsz	(??_main^(0+256)+1),f
  4650  01D5  29D0               	goto	u4917
  4651  01D6  0000               	nop
  4652                           
  4653                           ;main.c: 115:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4654  01D7  3015               	movlw	21
  4655  01D8  0022               	movlb	2	; select bank2
  4656  01D9  00C5               	movwf	(??_main^(0+256)+1)
  4657  01DA  304B               	movlw	75
  4658  01DB  00C4               	movwf	??_main^(0+256)
  4659  01DC  30BE               	movlw	190
  4660  01DD                     u4927:	
  4661  01DD  0B89               	decfsz	9,f
  4662  01DE  29DD               	goto	u4927
  4663  01DF  0BC4               	decfsz	??_main^(0+256),f
  4664  01E0  29DD               	goto	u4927
  4665  01E1  0BC5               	decfsz	(??_main^(0+256)+1),f
  4666  01E2  29DD               	goto	u4927
  4667  01E3  0000               	nop
  4668                           
  4669                           ;main.c: 116:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4670  01E4  3015               	movlw	21
  4671  01E5  0022               	movlb	2	; select bank2
  4672  01E6  00C5               	movwf	(??_main^(0+256)+1)
  4673  01E7  304B               	movlw	75
  4674  01E8  00C4               	movwf	??_main^(0+256)
  4675  01E9  30BE               	movlw	190
  4676  01EA                     u4937:	
  4677  01EA  0B89               	decfsz	9,f
  4678  01EB  29EA               	goto	u4937
  4679  01EC  0BC4               	decfsz	??_main^(0+256),f
  4680  01ED  29EA               	goto	u4937
  4681  01EE  0BC5               	decfsz	(??_main^(0+256)+1),f
  4682  01EF  29EA               	goto	u4937
  4683  01F0  0000               	nop
  4684                           
  4685                           ;main.c: 117:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4686  01F1  3015               	movlw	21
  4687  01F2  0022               	movlb	2	; select bank2
  4688  01F3  00C5               	movwf	(??_main^(0+256)+1)
  4689  01F4  304B               	movlw	75
  4690  01F5  00C4               	movwf	??_main^(0+256)
  4691  01F6  30BE               	movlw	190
  4692  01F7                     u4947:	
  4693  01F7  0B89               	decfsz	9,f
  4694  01F8  29F7               	goto	u4947
  4695  01F9  0BC4               	decfsz	??_main^(0+256),f
  4696  01FA  29F7               	goto	u4947
  4697  01FB  0BC5               	decfsz	(??_main^(0+256)+1),f
  4698  01FC  29F7               	goto	u4947
  4699  01FD  0000               	nop
  4700                           
  4701                           ;main.c: 118:                         printf("RUN\r\n");
  4702  01FE  3009               	movlw	low (STR_2| (0+32768))
  4703  01FF  0020               	movlb	0	; select bank0
  4704  0200  00CA               	movwf	printf@fmt
  4705  0201  3098               	movlw	high (STR_2| (0+32768))
  4706  0202  00CB               	movwf	printf@fmt+1
  4707  0203  3195  250A  3180   	fcall	_printf
  4708                           
  4709                           ;main.c: 119:                         config_status = 1;
  4710  0206  0020               	movlb	0	; select bank0
  4711  0207  01E5               	clrf	_config_status
  4712  0208  0AE5               	incf	_config_status,f
  4713                           
  4714                           ;main.c: 120:                         check_request = 1;
  4715  0209  01E4               	clrf	_check_request
  4716  020A  0AE4               	incf	_check_request,f
  4717                           
  4718                           ;main.c: 121:                         timeout_count = 0;
  4719  020B  01DD               	clrf	_timeout_count
  4720  020C  01DE               	clrf	_timeout_count+1
  4721                           
  4722                           ;main.c: 122:                         LED_PROCESS(0);
  4723  020D  3000               	movlw	0
  4724  020E  318E  2622  3180   	fcall	_LED_PROCESS
  4725                           
  4726                           ;main.c: 123:                         blink = 0;
  4727  0211  0020               	movlb	0	; select bank0
  4728  0212  2A89               	goto	L1
  4729  0213                     l6376:	
  4730                           
  4731                           ;main.c: 127:                 {;main.c: 128:                     count_conf = 0;
  4732  0213  0021               	movlb	1	; select bank1
  4733  0214  01B6               	clrf	_count_conf^(0+128)
  4734  0215  01B7               	clrf	(_count_conf+1)^(0+128)
  4735                           
  4736                           ;main.c: 130:             }
  4737                           
  4738                           ;main.c: 129:                 }
  4739  0216  287E               	goto	l6252
  4740  0217                     l6378:	
  4741                           
  4742                           ;main.c: 132:             {;main.c: 133:                 if(check_request == 1)
  4743  0217  0364               	decf	_check_request,w
  4744  0218  1D03               	btfss	3,2
  4745  0219  287E               	goto	l6252
  4746                           
  4747                           ;main.c: 134:                 {;main.c: 135:                     timeout_count++;
  4748  021A  3001               	movlw	1
  4749  021B  07DD               	addwf	_timeout_count,f
  4750  021C  3000               	movlw	0
  4751  021D  3DDE               	addwfc	_timeout_count+1,f
  4752                           
  4753                           ;main.c: 136:                     if(timeout_count >= 30000)
  4754  021E  3075               	movlw	117
  4755  021F  025E               	subwf	_timeout_count+1,w
  4756  0220  3030               	movlw	48
  4757  0221  1903               	skipnz
  4758  0222  025D               	subwf	_timeout_count,w
  4759  0223  1C03               	skipc
  4760  0224  2A69               	goto	l6396
  4761                           
  4762                           ;main.c: 137:                     {;main.c: 139:                         LED_PROCESS(0);
  4763  0225  3000               	movlw	0
  4764  0226  318E  2622  3180   	fcall	_LED_PROCESS
  4765                           
  4766                           ;main.c: 140:                         timeout_count = 0;
  4767  0229  0020               	movlb	0	; select bank0
  4768  022A  01DD               	clrf	_timeout_count
  4769  022B  01DE               	clrf	_timeout_count+1
  4770                           
  4771                           ;main.c: 141:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4772  022C  3015               	movlw	21
  4773  022D  0022               	movlb	2	; select bank2
  4774  022E  00C5               	movwf	(??_main^(0+256)+1)
  4775  022F  304B               	movlw	75
  4776  0230  00C4               	movwf	??_main^(0+256)
  4777  0231  30BE               	movlw	190
  4778  0232                     u4957:	
  4779  0232  0B89               	decfsz	9,f
  4780  0233  2A32               	goto	u4957
  4781  0234  0BC4               	decfsz	??_main^(0+256),f
  4782  0235  2A32               	goto	u4957
  4783  0236  0BC5               	decfsz	(??_main^(0+256)+1),f
  4784  0237  2A32               	goto	u4957
  4785  0238  0000               	nop
  4786                           
  4787                           ;main.c: 142:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4788  0239  3015               	movlw	21
  4789  023A  0022               	movlb	2	; select bank2
  4790  023B  00C5               	movwf	(??_main^(0+256)+1)
  4791  023C  304B               	movlw	75
  4792  023D  00C4               	movwf	??_main^(0+256)
  4793  023E  30BE               	movlw	190
  4794  023F                     u4967:	
  4795  023F  0B89               	decfsz	9,f
  4796  0240  2A3F               	goto	u4967
  4797  0241  0BC4               	decfsz	??_main^(0+256),f
  4798  0242  2A3F               	goto	u4967
  4799  0243  0BC5               	decfsz	(??_main^(0+256)+1),f
  4800  0244  2A3F               	goto	u4967
  4801  0245  0000               	nop
  4802                           
  4803                           ;main.c: 143:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4804  0246  3015               	movlw	21
  4805  0247  0022               	movlb	2	; select bank2
  4806  0248  00C5               	movwf	(??_main^(0+256)+1)
  4807  0249  304B               	movlw	75
  4808  024A  00C4               	movwf	??_main^(0+256)
  4809  024B  30BE               	movlw	190
  4810  024C                     u4977:	
  4811  024C  0B89               	decfsz	9,f
  4812  024D  2A4C               	goto	u4977
  4813  024E  0BC4               	decfsz	??_main^(0+256),f
  4814  024F  2A4C               	goto	u4977
  4815  0250  0BC5               	decfsz	(??_main^(0+256)+1),f
  4816  0251  2A4C               	goto	u4977
  4817  0252  0000               	nop
  4818                           
  4819                           ;main.c: 144:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4820  0253  3015               	movlw	21
  4821  0254  0022               	movlb	2	; select bank2
  4822  0255  00C5               	movwf	(??_main^(0+256)+1)
  4823  0256  304B               	movlw	75
  4824  0257  00C4               	movwf	??_main^(0+256)
  4825  0258  30BE               	movlw	190
  4826  0259                     u4987:	
  4827  0259  0B89               	decfsz	9,f
  4828  025A  2A59               	goto	u4987
  4829  025B  0BC4               	decfsz	??_main^(0+256),f
  4830  025C  2A59               	goto	u4987
  4831  025D  0BC5               	decfsz	(??_main^(0+256)+1),f
  4832  025E  2A59               	goto	u4987
  4833  025F  0000               	nop
  4834                           
  4835                           ;main.c: 145:                         LED_PROCESS(last_touch_status.full_status);
  4836  0260  0020               	movlb	0	; select bank0
  4837  0261  085B               	movf	_last_touch_status,w
  4838  0262  318E  2622  3180   	fcall	_LED_PROCESS
  4839                           
  4840                           ;main.c: 146:                         check_request = 0;
  4841  0265  0020               	movlb	0	; select bank0
  4842  0266  01E4               	clrf	_check_request
  4843                           
  4844                           ;main.c: 147:                         config_status = 0;
  4845  0267  01E5               	clrf	_config_status
  4846                           
  4847                           ;main.c: 148:                     }
  4848  0268  287E               	goto	l6252
  4849  0269                     l6396:	
  4850                           
  4851                           ;main.c: 150:                     {;main.c: 151:                         blink_count++;
  4852  0269  3001               	movlw	1
  4853  026A  0022               	movlb	2	; select bank2
  4854  026B  00C4               	movwf	??_main^(0+256)
  4855  026C  0844               	movf	??_main^(0+256),w
  4856  026D  0020               	movlb	0	; select bank0
  4857  026E  07E2               	addwf	_blink_count,f
  4858                           
  4859                           ;main.c: 152:                         if(blink == 0)
  4860  026F  0863               	movf	_blink,w
  4861  0270  1D03               	btfss	3,2
  4862  0271  2A7F               	goto	l6406
  4863                           
  4864                           ;main.c: 153:                         {;main.c: 154:                             LED_PRO
      +                          CESS(0);
  4865  0272  3000               	movlw	0
  4866  0273  318E  2622  3180   	fcall	_LED_PROCESS
  4867                           
  4868                           ;main.c: 155:                             if(blink_count >= 200)
  4869  0276  30C8               	movlw	200
  4870  0277  0020               	movlb	0	; select bank0
  4871  0278  0262               	subwf	_blink_count,w
  4872  0279  1C03               	skipc
  4873  027A  287E               	goto	l6252
  4874                           
  4875                           ;main.c: 156:                             {;main.c: 157:                                
      +                           blink_count = 0;
  4876  027B  01E2               	clrf	_blink_count
  4877                           
  4878                           ;main.c: 158:                                 blink = 1;
  4879  027C  01E3               	clrf	_blink
  4880  027D  0AE3               	incf	_blink,f
  4881  027E  287E               	goto	l6252
  4882  027F                     l6406:	
  4883                           
  4884                           ;main.c: 162:                         {;main.c: 163:                             LED_PRO
      +                          CESS(15);
  4885  027F  300F               	movlw	15
  4886  0280  318E  2622  3180   	fcall	_LED_PROCESS
  4887                           
  4888                           ;main.c: 164:                             if(blink_count >= 200)
  4889  0283  30C8               	movlw	200
  4890  0284  0020               	movlb	0	; select bank0
  4891  0285  0262               	subwf	_blink_count,w
  4892  0286  1C03               	skipc
  4893  0287  287E               	goto	l6252
  4894                           
  4895                           ;main.c: 165:                             {;main.c: 166:                                
      +                           blink_count = 0;
  4896  0288  01E2               	clrf	_blink_count
  4897  0289                     L1:	
  4898                           
  4899                           ;main.c: 167:                                 blink = 0;
  4900  0289  01E3               	clrf	_blink
  4901  028A  287E               	goto	l6252
  4902  028B                     __end_of_main:	
  4903                           
  4904                           	psect	text1
  4905  0634                     __ptext1:	
  4906 ;; *************** function _update_state *****************
  4907 ;; Defined at:
  4908 ;;		line 203 in file "main.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  1    wreg      void 
  4915 ;; Registers used:
  4916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4922 ;;      Params:         0       0       0       0       0       0       0       0
  4923 ;;      Locals:         0       0       0       0       0       0       0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0
  4925 ;;      Totals:         0       0       0       0       0       0       0       0
  4926 ;;Total ram usage:        0 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:   13
  4929 ;; This function calls:
  4930 ;;		_printf
  4931 ;; This function is called by:
  4932 ;;		_main
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _update_state
  4938  0634                     _update_state:	
  4939                           
  4940                           ;main.c: 205:     switch(last_touch_status.full_status)
  4941                           
  4942                           ;incstack = 0
  4943                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4944  0634  2EA5               	goto	l6210
  4945  0635                     l6176:	
  4946  0635  3014               	movlw	low (STR_3| (0+32768))
  4947  0636  00CA               	movwf	printf@fmt
  4948  0637  3098               	movlw	high (STR_3| (0+32768))
  4949  0638  00CB               	movwf	printf@fmt+1
  4950  0639  3195  250A         	fcall	_printf
  4951  063B  0008               	return
  4952  063C                     l6178:	
  4953  063C  3019               	movlw	low (STR_4| (0+32768))
  4954  063D  00CA               	movwf	printf@fmt
  4955  063E  3098               	movlw	high (STR_4| (0+32768))
  4956  063F  00CB               	movwf	printf@fmt+1
  4957  0640  3195  250A         	fcall	_printf
  4958  0642  0008               	return
  4959  0643                     l6180:	
  4960  0643  301E               	movlw	low (STR_5| (0+32768))
  4961  0644  00CA               	movwf	printf@fmt
  4962  0645  3098               	movlw	high (STR_5| (0+32768))
  4963  0646  00CB               	movwf	printf@fmt+1
  4964  0647  3195  250A         	fcall	_printf
  4965  0649  0008               	return
  4966  064A                     l6182:	
  4967  064A  3023               	movlw	low (STR_6| (0+32768))
  4968  064B  00CA               	movwf	printf@fmt
  4969  064C  3098               	movlw	high (STR_6| (0+32768))
  4970  064D  00CB               	movwf	printf@fmt+1
  4971  064E  3195  250A         	fcall	_printf
  4972  0650  0008               	return
  4973  0651                     l6184:	
  4974  0651  3028               	movlw	low (STR_7| (0+32768))
  4975  0652  00CA               	movwf	printf@fmt
  4976  0653  3098               	movlw	high (STR_7| (0+32768))
  4977  0654  00CB               	movwf	printf@fmt+1
  4978  0655  3195  250A         	fcall	_printf
  4979  0657  0008               	return
  4980  0658                     l6186:	
  4981  0658  302D               	movlw	low (STR_8| (0+32768))
  4982  0659  00CA               	movwf	printf@fmt
  4983  065A  3098               	movlw	high (STR_8| (0+32768))
  4984  065B  00CB               	movwf	printf@fmt+1
  4985  065C  3195  250A         	fcall	_printf
  4986  065E  0008               	return
  4987  065F                     l6188:	
  4988  065F  3032               	movlw	low (STR_9| (0+32768))
  4989  0660  00CA               	movwf	printf@fmt
  4990  0661  3098               	movlw	high (STR_9| (0+32768))
  4991  0662  00CB               	movwf	printf@fmt+1
  4992  0663  3195  250A         	fcall	_printf
  4993  0665  0008               	return
  4994  0666                     l6190:	
  4995  0666  3037               	movlw	low (STR_10| (0+32768))
  4996  0667  00CA               	movwf	printf@fmt
  4997  0668  3098               	movlw	high (STR_10| (0+32768))
  4998  0669  00CB               	movwf	printf@fmt+1
  4999  066A  3195  250A         	fcall	_printf
  5000  066C  0008               	return
  5001  066D                     l6192:	
  5002  066D  303C               	movlw	low (STR_11| (0+32768))
  5003  066E  00CA               	movwf	printf@fmt
  5004  066F  3098               	movlw	high (STR_11| (0+32768))
  5005  0670  00CB               	movwf	printf@fmt+1
  5006  0671  3195  250A         	fcall	_printf
  5007  0673  0008               	return
  5008  0674                     l6194:	
  5009  0674  3041               	movlw	low (STR_12| (0+32768))
  5010  0675  00CA               	movwf	printf@fmt
  5011  0676  3098               	movlw	high (STR_12| (0+32768))
  5012  0677  00CB               	movwf	printf@fmt+1
  5013  0678  3195  250A         	fcall	_printf
  5014  067A  0008               	return
  5015  067B                     l6196:	
  5016  067B  3046               	movlw	low (STR_13| (0+32768))
  5017  067C  00CA               	movwf	printf@fmt
  5018  067D  3098               	movlw	high (STR_13| (0+32768))
  5019  067E  00CB               	movwf	printf@fmt+1
  5020  067F  3195  250A         	fcall	_printf
  5021  0681  0008               	return
  5022  0682                     l6198:	
  5023  0682  304B               	movlw	low (STR_14| (0+32768))
  5024  0683  00CA               	movwf	printf@fmt
  5025  0684  3098               	movlw	high (STR_14| (0+32768))
  5026  0685  00CB               	movwf	printf@fmt+1
  5027  0686  3195  250A         	fcall	_printf
  5028  0688  0008               	return
  5029  0689                     l6200:	
  5030  0689  3050               	movlw	low (STR_15| (0+32768))
  5031  068A  00CA               	movwf	printf@fmt
  5032  068B  3098               	movlw	high (STR_15| (0+32768))
  5033  068C  00CB               	movwf	printf@fmt+1
  5034  068D  3195  250A         	fcall	_printf
  5035  068F  0008               	return
  5036  0690                     l6202:	
  5037  0690  3055               	movlw	low (STR_16| (0+32768))
  5038  0691  00CA               	movwf	printf@fmt
  5039  0692  3098               	movlw	high (STR_16| (0+32768))
  5040  0693  00CB               	movwf	printf@fmt+1
  5041  0694  3195  250A         	fcall	_printf
  5042  0696  0008               	return
  5043  0697                     l6204:	
  5044  0697  305A               	movlw	low (STR_17| (0+32768))
  5045  0698  00CA               	movwf	printf@fmt
  5046  0699  3098               	movlw	high (STR_17| (0+32768))
  5047  069A  00CB               	movwf	printf@fmt+1
  5048  069B  3195  250A         	fcall	_printf
  5049  069D  0008               	return
  5050  069E                     l6206:	
  5051  069E  305F               	movlw	low (STR_18| (0+32768))
  5052  069F  00CA               	movwf	printf@fmt
  5053  06A0  3098               	movlw	high (STR_18| (0+32768))
  5054  06A1  00CB               	movwf	printf@fmt+1
  5055  06A2  3195  250A         	fcall	_printf
  5056  06A4  0008               	return
  5057  06A5                     l6210:	
  5058                           
  5059                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5060                           ; Switch size 1, requested type "simple"
  5061                           ; Number of cases is 1, Range of values is 0 to 0
  5062                           ; switch strategies available:
  5063                           ; Name         Instructions Cycles
  5064                           ; simple_byte            4     3 (average)
  5065                           ; direct_byte            8     6 (fixed)
  5066                           ; jumptable            260     6 (fixed)
  5067                           ;	Chosen strategy is simple_byte
  5068  06A5  0020               	movlb	0	; select bank0
  5069  06A6  085C               	movf	_last_touch_status+1,w
  5070  06A7  3A00               	xorlw	0	; case 0
  5071  06A8  1903               	skipnz
  5072  06A9  2EAB               	goto	l6582
  5073  06AA  2EDD               	goto	l879
  5074  06AB                     l6582:	
  5075                           
  5076                           ; Switch size 1, requested type "simple"
  5077                           ; Number of cases is 16, Range of values is 0 to 15
  5078                           ; switch strategies available:
  5079                           ; Name         Instructions Cycles
  5080                           ; direct_byte           38     6 (fixed)
  5081                           ; simple_byte           49    25 (average)
  5082                           ; jumptable            260     6 (fixed)
  5083                           ;	Chosen strategy is simple_byte
  5084  06AB  085B               	movf	_last_touch_status,w
  5085  06AC  3A00               	xorlw	0	; case 0
  5086  06AD  1903               	skipnz
  5087  06AE  2E35               	goto	l6176
  5088  06AF  3A01               	xorlw	1	; case 1
  5089  06B0  1903               	skipnz
  5090  06B1  2E3C               	goto	l6178
  5091  06B2  3A03               	xorlw	3	; case 2
  5092  06B3  1903               	skipnz
  5093  06B4  2E43               	goto	l6180
  5094  06B5  3A01               	xorlw	1	; case 3
  5095  06B6  1903               	skipnz
  5096  06B7  2E4A               	goto	l6182
  5097  06B8  3A07               	xorlw	7	; case 4
  5098  06B9  1903               	skipnz
  5099  06BA  2E51               	goto	l6184
  5100  06BB  3A01               	xorlw	1	; case 5
  5101  06BC  1903               	skipnz
  5102  06BD  2E58               	goto	l6186
  5103  06BE  3A03               	xorlw	3	; case 6
  5104  06BF  1903               	skipnz
  5105  06C0  2E5F               	goto	l6188
  5106  06C1  3A01               	xorlw	1	; case 7
  5107  06C2  1903               	skipnz
  5108  06C3  2E66               	goto	l6190
  5109  06C4  3A0F               	xorlw	15	; case 8
  5110  06C5  1903               	skipnz
  5111  06C6  2E6D               	goto	l6192
  5112  06C7  3A01               	xorlw	1	; case 9
  5113  06C8  1903               	skipnz
  5114  06C9  2E74               	goto	l6194
  5115  06CA  3A03               	xorlw	3	; case 10
  5116  06CB  1903               	skipnz
  5117  06CC  2E7B               	goto	l6196
  5118  06CD  3A01               	xorlw	1	; case 11
  5119  06CE  1903               	skipnz
  5120  06CF  2E82               	goto	l6198
  5121  06D0  3A07               	xorlw	7	; case 12
  5122  06D1  1903               	skipnz
  5123  06D2  2E89               	goto	l6200
  5124  06D3  3A01               	xorlw	1	; case 13
  5125  06D4  1903               	skipnz
  5126  06D5  2E90               	goto	l6202
  5127  06D6  3A03               	xorlw	3	; case 14
  5128  06D7  1903               	skipnz
  5129  06D8  2E97               	goto	l6204
  5130  06D9  3A01               	xorlw	1	; case 15
  5131  06DA  1903               	skipnz
  5132  06DB  2E9E               	goto	l6206
  5133  06DC  2EDD               	goto	l879
  5134  06DD                     l879:	
  5135  06DD  0008               	return
  5136  06DE                     __end_of_update_state:	
  5137                           
  5138                           	psect	text2
  5139  1701                     __ptext2:	
  5140 ;; *************** function _check_message *****************
  5141 ;; Defined at:
  5142 ;;		line 371 in file "main.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  x               1    wreg     unsigned char 
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;  x               1   52[BANK0 ] unsigned char 
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      void 
  5149 ;; Registers used:
  5150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5156 ;;      Params:         0       0       0       0       0       0       0       0
  5157 ;;      Locals:         0       1       0       0       0       0       0       0
  5158 ;;      Temps:          0       2       0       0       0       0       0       0
  5159 ;;      Totals:         0       3       0       0       0       0       0       0
  5160 ;;Total ram usage:        3 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:   13
  5163 ;; This function calls:
  5164 ;;		_printf
  5165 ;; This function is called by:
  5166 ;;		_main
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           
  5171                           ;psect for function _check_message
  5172  1701                     _check_message:	
  5173                           
  5174                           ;incstack = 0
  5175                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5176                           ;check_message@x stored from wreg
  5177  1701  0020               	movlb	0	; select bank0
  5178  1702  00D4               	movwf	check_message@x
  5179                           
  5180                           ;main.c: 371: void check_message(uint8_t x);main.c: 372: {;main.c: 373:     switch (x)
  5181  1703  2F17               	goto	l6228
  5182  1704                     l6218:	
  5183                           
  5184                           ;main.c: 376:         {;main.c: 377:             check_request = 0;
  5185  1704  01E4               	clrf	_check_request
  5186                           
  5187                           ;main.c: 378:             break;
  5188  1705  0008               	return
  5189  1706                     l6222:	
  5190                           
  5191                           ;main.c: 386:         {;main.c: 387:             printf("%c",x);
  5192  1706  3068               	movlw	low (STR_19| (0+32768))
  5193  1707  00CA               	movwf	printf@fmt
  5194  1708  3098               	movlw	high (STR_19| (0+32768))
  5195  1709  00CB               	movwf	printf@fmt+1
  5196  170A  0854               	movf	check_message@x,w
  5197  170B  00D2               	movwf	??_check_message
  5198  170C  01D3               	clrf	??_check_message+1
  5199  170D  0852               	movf	??_check_message,w
  5200  170E  00CC               	movwf	?_printf+2
  5201  170F  0853               	movf	??_check_message+1,w
  5202  1710  00CD               	movwf	?_printf+3
  5203  1711  3195  250A         	fcall	_printf
  5204                           
  5205                           ;main.c: 388:             check_request = 1;
  5206  1713  0020               	movlb	0	; select bank0
  5207  1714  01E4               	clrf	_check_request
  5208  1715  0AE4               	incf	_check_request,f
  5209                           
  5210                           ;main.c: 389:             break;
  5211  1716  0008               	return
  5212  1717                     l6228:	
  5213  1717  0854               	movf	check_message@x,w
  5214  1718  00D2               	movwf	??_check_message
  5215  1719  01D3               	clrf	??_check_message+1
  5216                           
  5217                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5218                           ; Switch size 1, requested type "simple"
  5219                           ; Number of cases is 1, Range of values is 0 to 0
  5220                           ; switch strategies available:
  5221                           ; Name         Instructions Cycles
  5222                           ; simple_byte            4     3 (average)
  5223                           ; direct_byte            8     6 (fixed)
  5224                           ; jumptable            260     6 (fixed)
  5225                           ;	Chosen strategy is simple_byte
  5226  171A  0853               	movf	??_check_message+1,w
  5227  171B  3A00               	xorlw	0	; case 0
  5228  171C  1903               	skipnz
  5229  171D  2F1F               	goto	l6584
  5230  171E  2F06               	goto	l6222
  5231  171F                     l6584:	
  5232                           
  5233                           ; Switch size 1, requested type "simple"
  5234                           ; Number of cases is 2, Range of values is 70 to 84
  5235                           ; switch strategies available:
  5236                           ; Name         Instructions Cycles
  5237                           ; simple_byte            7     4 (average)
  5238                           ; direct_byte           39     9 (fixed)
  5239                           ; jumptable            263     9 (fixed)
  5240                           ;	Chosen strategy is simple_byte
  5241  171F  0852               	movf	??_check_message,w
  5242  1720  3A46               	xorlw	70	; case 70
  5243  1721  1903               	skipnz
  5244  1722  2F04               	goto	l6218
  5245  1723  3A12               	xorlw	18	; case 84
  5246  1724  1903               	skipnz
  5247  1725  2F04               	goto	l6218
  5248  1726  2F06               	goto	l6222
  5249  1727  0008               	return
  5250  1728                     __end_of_check_message:	
  5251                           
  5252                           	psect	text3
  5253  150A                     __ptext3:	
  5254 ;; *************** function _printf *****************
  5255 ;; Defined at:
  5256 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  fmt             2   42[BANK0 ] PTR const unsigned char 
  5259 ;;		 -> STR_19(3), STR_18(5), STR_17(5), STR_16(5), 
  5260 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_12(5), 
  5261 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  5262 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5263 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  ret             2    0        int 
  5266 ;;  ap              1   49[BANK0 ] PTR void [1]
  5267 ;;		 -> ?_printf(2), 
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  2   42[BANK0 ] int 
  5270 ;; Registers used:
  5271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5277 ;;      Params:         0       4       0       0       0       0       0       0
  5278 ;;      Locals:         0       3       0       0       0       0       0       0
  5279 ;;      Temps:          0       1       0       0       0       0       0       0
  5280 ;;      Totals:         0       8       0       0       0       0       0       0
  5281 ;;Total ram usage:        8 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:   12
  5284 ;; This function calls:
  5285 ;;		_vfprintf
  5286 ;; This function is called by:
  5287 ;;		_main
  5288 ;;		_update_state
  5289 ;;		_check_message
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           
  5294                           ;psect for function _printf
  5295  150A                     _printf:	
  5296                           
  5297                           ;incstack = 0
  5298                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5299  150A  304C               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5300  150B  0020               	movlb	0	; select bank0
  5301  150C  00CE               	movwf	??_printf
  5302  150D  084E               	movf	??_printf,w
  5303  150E  00D1               	movwf	printf@ap
  5304  150F  084B               	movf	printf@fmt+1,w
  5305  1510  00C3               	movwf	vfprintf@fmt+1
  5306  1511  084A               	movf	printf@fmt,w
  5307  1512  00C2               	movwf	vfprintf@fmt
  5308  1513  3051               	movlw	(low (printf@ap| 0))& (0+255)
  5309  1514  00CE               	movwf	??_printf
  5310  1515  084E               	movf	??_printf,w
  5311  1516  00C4               	movwf	vfprintf@ap
  5312  1517  3000               	movlw	0
  5313  1518  3188  203B         	fcall	_vfprintf
  5314  151A  0008               	return
  5315  151B                     __end_of_printf:	
  5316                           
  5317                           	psect	text4
  5318  083B                     __ptext4:	
  5319 ;; *************** function _vfprintf *****************
  5320 ;; Defined at:
  5321 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  fp              1    wreg     PTR struct _IO_FILE
  5324 ;;		 -> NULL(0), 
  5325 ;;  fmt             2   34[BANK0 ] PTR const unsigned char 
  5326 ;;		 -> STR_19(3), STR_18(5), STR_17(5), STR_16(5), 
  5327 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_12(5), 
  5328 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  5329 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5330 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5331 ;;  ap              1   36[BANK0 ] PTR PTR void 
  5332 ;;		 -> printf@ap(1), 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  fp              1   39[BANK0 ] PTR struct _IO_FILE
  5335 ;;		 -> NULL(0), 
  5336 ;;  cfmt            2   40[BANK0 ] PTR unsigned char 
  5337 ;;		 -> STR_19(3), STR_18(5), STR_17(5), STR_16(5), 
  5338 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_12(5), 
  5339 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  5340 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5341 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  2   34[BANK0 ] int 
  5344 ;; Registers used:
  5345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5351 ;;      Params:         0       3       0       0       0       0       0       0
  5352 ;;      Locals:         0       3       0       0       0       0       0       0
  5353 ;;      Temps:          0       2       0       0       0       0       0       0
  5354 ;;      Totals:         0       8       0       0       0       0       0       0
  5355 ;;Total ram usage:        8 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:   11
  5358 ;; This function calls:
  5359 ;;		_vfpfcnvrt
  5360 ;; This function is called by:
  5361 ;;		_printf
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _vfprintf
  5367  083B                     _vfprintf:	
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5371                           ;vfprintf@fp stored from wreg
  5372  083B  0020               	movlb	0	; select bank0
  5373  083C  00C7               	movwf	vfprintf@fp
  5374                           
  5375                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  5376  083D  0843               	movf	vfprintf@fmt+1,w
  5377  083E  00C9               	movwf	vfprintf@cfmt+1
  5378  083F  0842               	movf	vfprintf@fmt,w
  5379  0840  00C8               	movwf	vfprintf@cfmt
  5380                           
  5381                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  5382  0841  0021               	movlb	1	; select bank1
  5383  0842  01B0               	clrf	_nout^(0+128)
  5384  0843  01B1               	clrf	(_nout+1)^(0+128)
  5385  0844                     l6100:	
  5386                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5387                           
  5388                           
  5389                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5390  0844  0020               	movlb	0	; select bank0
  5391  0845  0848               	movf	vfprintf@cfmt,w
  5392  0846  0084               	movwf	4
  5393  0847  0849               	movf	vfprintf@cfmt+1,w
  5394  0848  0085               	movwf	5
  5395  0849  0012               	moviw fsr0++
  5396  084A  1903               	btfsc	3,2
  5397  084B  2861               	goto	l6102
  5398                           
  5399                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  5400  084C  3048               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  5401  084D  00C5               	movwf	??_vfprintf
  5402  084E  0845               	movf	??_vfprintf,w
  5403  084F  00B9               	movwf	vfpfcnvrt@fmt
  5404  0850  0844               	movf	vfprintf@ap,w
  5405  0851  00C6               	movwf	??_vfprintf+1
  5406  0852  0846               	movf	??_vfprintf+1,w
  5407  0853  00BA               	movwf	vfpfcnvrt@ap
  5408  0854  0847               	movf	vfprintf@fp,w
  5409  0855  3186  26DE  3188   	fcall	_vfpfcnvrt
  5410  0858  0020               	movlb	0	; select bank0
  5411  0859  0839               	movf	?_vfpfcnvrt,w
  5412  085A  0021               	movlb	1	; select bank1
  5413  085B  07B0               	addwf	_nout^(0+128),f
  5414  085C  0020               	movlb	0	; select bank0
  5415  085D  083A               	movf	?_vfpfcnvrt+1,w
  5416  085E  0021               	movlb	1	; select bank1
  5417  085F  3DB1               	addwfc	(_nout+1)^(0+128),f
  5418  0860  2844               	goto	l6100
  5419  0861                     l6102:	
  5420                           
  5421                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  5422  0861  0021               	movlb	1	; select bank1
  5423  0862  0831               	movf	(_nout+1)^(0+128),w
  5424  0863  0020               	movlb	0	; select bank0
  5425  0864  00C3               	movwf	?_vfprintf+1
  5426  0865  0021               	movlb	1	; select bank1
  5427  0866  0830               	movf	_nout^(0+128),w
  5428  0867  0020               	movlb	0	; select bank0
  5429  0868  00C2               	movwf	?_vfprintf
  5430  0869  0008               	return
  5431  086A                     __end_of_vfprintf:	
  5432                           
  5433                           	psect	text5
  5434  06DE                     __ptext5:	
  5435 ;; *************** function _vfpfcnvrt *****************
  5436 ;; Defined at:
  5437 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;  fp              1    wreg     PTR struct _IO_FILE
  5440 ;;		 -> NULL(0), 
  5441 ;;  fmt             1   25[BANK0 ] PTR PTR unsigned char 
  5442 ;;		 -> vfprintf@cfmt(2), 
  5443 ;;  ap              1   26[BANK0 ] PTR PTR void 
  5444 ;;		 -> printf@ap(1), 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  fp              1   33[BANK0 ] PTR struct _IO_FILE
  5447 ;;		 -> NULL(0), 
  5448 ;;  llu             8    0        unsigned long long 
  5449 ;;  ll              8    0        long long 
  5450 ;;  f               4    0        long long 
  5451 ;;  ct              3    0        unsigned char [3]
  5452 ;;  vp              2    0        PTR void 
  5453 ;;  i               2    0        int 
  5454 ;;  done            2    0        int 
  5455 ;;  cp              2    0        PTR unsigned char 
  5456 ;;  c               1   32[BANK0 ] unsigned char 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  2   25[BANK0 ] int 
  5459 ;; Registers used:
  5460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5466 ;;      Params:         0       2       0       0       0       0       0       0
  5467 ;;      Locals:         0       2       0       0       0       0       0       0
  5468 ;;      Temps:          0       5       0       0       0       0       0       0
  5469 ;;      Totals:         0       9       0       0       0       0       0       0
  5470 ;;Total ram usage:        9 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:   10
  5473 ;; This function calls:
  5474 ;;		_ctoa
  5475 ;;		_fputc
  5476 ;; This function is called by:
  5477 ;;		_vfprintf
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           
  5482                           ;psect for function _vfpfcnvrt
  5483  06DE                     _vfpfcnvrt:	
  5484                           
  5485                           ;incstack = 0
  5486                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5487                           ;vfpfcnvrt@fp stored from wreg
  5488  06DE  0020               	movlb	0	; select bank0
  5489  06DF  00C1               	movwf	vfpfcnvrt@fp
  5490                           
  5491                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  5492  06E0  0839               	movf	vfpfcnvrt@fmt,w
  5493  06E1  0086               	movwf	6
  5494  06E2  0187               	clrf	7
  5495  06E3  3F40               	moviw [0]fsr1
  5496  06E4  00BB               	movwf	??_vfpfcnvrt
  5497  06E5  3F41               	moviw [1]fsr1
  5498  06E6  00BC               	movwf	??_vfpfcnvrt+1
  5499  06E7  083B               	movf	??_vfpfcnvrt,w
  5500  06E8  0084               	movwf	4
  5501  06E9  083C               	movf	??_vfpfcnvrt+1,w
  5502  06EA  0085               	movwf	5
  5503  06EB  0012               	moviw fsr0++
  5504  06EC  3A25               	xorlw	37
  5505  06ED  1D03               	btfss	3,2
  5506  06EE  2F63               	goto	l6024
  5507                           
  5508                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  5509  06EF  0839               	movf	vfpfcnvrt@fmt,w
  5510  06F0  0086               	movwf	6
  5511  06F1  0187               	clrf	7
  5512  06F2  3001               	movlw	1
  5513  06F3  0781               	addwf	1,f
  5514  06F4  3141               	addfsr 1,1
  5515  06F5  1803               	skipnc
  5516  06F6  0A81               	incf	1,f
  5517                           
  5518                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  5519  06F7  01D9               	clrf	_width
  5520  06F8  01DA               	clrf	_width+1
  5521  06F9  0021               	movlb	1	; select bank1
  5522  06FA  01B4               	clrf	_flags^(0+128)
  5523  06FB  01B5               	clrf	(_flags+1)^(0+128)
  5524                           
  5525                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  5526  06FC  30FF               	movlw	255
  5527  06FD  00B2               	movwf	_prec^(0+128)
  5528  06FE  30FF               	movlw	255
  5529  06FF  00B3               	movwf	(_prec^(0+128)+1)
  5530                           
  5531                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  5532  0700  0020               	movlb	0	; select bank0
  5533  0701  0839               	movf	vfpfcnvrt@fmt,w
  5534  0702  0086               	movwf	6
  5535  0703  0187               	clrf	7
  5536  0704  3F40               	moviw [0]fsr1
  5537  0705  00BB               	movwf	??_vfpfcnvrt
  5538  0706  3F41               	moviw [1]fsr1
  5539  0707  00BC               	movwf	??_vfpfcnvrt+1
  5540  0708  083B               	movf	??_vfpfcnvrt,w
  5541  0709  0084               	movwf	4
  5542  070A  083C               	movf	??_vfpfcnvrt+1,w
  5543  070B  0085               	movwf	5
  5544  070C  0012               	moviw fsr0++
  5545  070D  3A63               	xorlw	99
  5546  070E  1D03               	btfss	3,2
  5547  070F  2F31               	goto	l6008
  5548                           
  5549                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  5550  0710  0839               	movf	vfpfcnvrt@fmt,w
  5551  0711  0086               	movwf	6
  5552  0712  0187               	clrf	7
  5553  0713  3001               	movlw	1
  5554  0714  0781               	addwf	1,f
  5555  0715  3141               	addfsr 1,1
  5556  0716  1803               	skipnc
  5557  0717  0A81               	incf	1,f
  5558                           
  5559                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5560  0718  083A               	movf	vfpfcnvrt@ap,w
  5561  0719  0086               	movwf	6
  5562  071A  0187               	clrf	7
  5563  071B  0801               	movf	1,w
  5564  071C  0084               	movwf	4
  5565  071D  0185               	clrf	5
  5566  071E  3002               	movlw	2
  5567  071F  0781               	addwf	1,f
  5568  0720  0800               	movf	0,w
  5569  0721  00BB               	movwf	??_vfpfcnvrt
  5570  0722  083B               	movf	??_vfpfcnvrt,w
  5571  0723  00C0               	movwf	vfpfcnvrt@c
  5572                           
  5573                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  5574  0724  0840               	movf	vfpfcnvrt@c,w
  5575  0725  00BB               	movwf	??_vfpfcnvrt
  5576  0726  083B               	movf	??_vfpfcnvrt,w
  5577  0727  00B3               	movwf	ctoa@c
  5578  0728  0841               	movf	vfpfcnvrt@fp,w
  5579  0729  3197  2750         	fcall	_ctoa
  5580  072B  0020               	movlb	0	; select bank0
  5581  072C  0834               	movf	?_ctoa+1,w
  5582  072D  00BA               	movwf	?_vfpfcnvrt+1
  5583  072E  0833               	movf	?_ctoa,w
  5584  072F  00B9               	movwf	?_vfpfcnvrt
  5585  0730  0008               	return
  5586  0731                     l6008:	
  5587                           
  5588                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  5589  0731  0839               	movf	vfpfcnvrt@fmt,w
  5590  0732  0086               	movwf	6
  5591  0733  0187               	clrf	7
  5592  0734  3F40               	moviw [0]fsr1
  5593  0735  00BB               	movwf	??_vfpfcnvrt
  5594  0736  3F41               	moviw [1]fsr1
  5595  0737  00BC               	movwf	??_vfpfcnvrt+1
  5596  0738  083B               	movf	??_vfpfcnvrt,w
  5597  0739  0084               	movwf	4
  5598  073A  083C               	movf	??_vfpfcnvrt+1,w
  5599  073B  0085               	movwf	5
  5600  073C  0012               	moviw fsr0++
  5601  073D  3A25               	xorlw	37
  5602  073E  1D03               	btfss	3,2
  5603  073F  2F58               	goto	l6018
  5604                           
  5605                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  5606  0740  0839               	movf	vfpfcnvrt@fmt,w
  5607  0741  0086               	movwf	6
  5608  0742  0187               	clrf	7
  5609  0743  3001               	movlw	1
  5610  0744  0781               	addwf	1,f
  5611  0745  3141               	addfsr 1,1
  5612  0746  1803               	skipnc
  5613  0747  0A81               	incf	1,f
  5614                           
  5615                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  5616  0748  3025               	movlw	37
  5617  0749  00F4               	movwf	fputc@c
  5618  074A  3000               	movlw	0
  5619  074B  00F5               	movwf	fputc@c+1
  5620  074C  0841               	movf	vfpfcnvrt@fp,w
  5621  074D  00BB               	movwf	??_vfpfcnvrt
  5622  074E  083B               	movf	??_vfpfcnvrt,w
  5623  074F  00F6               	movwf	fputc@fp
  5624  0750  3188  20FE         	fcall	_fputc
  5625  0752                     l6014:	
  5626                           
  5627                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  5628  0752  3001               	movlw	1
  5629  0753  0020               	movlb	0	; select bank0
  5630  0754  00B9               	movwf	?_vfpfcnvrt
  5631  0755  3000               	movlw	0
  5632  0756  00BA               	movwf	?_vfpfcnvrt+1
  5633  0757  0008               	return
  5634  0758                     l6018:	
  5635                           
  5636                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  5637  0758  0839               	movf	vfpfcnvrt@fmt,w
  5638  0759  0086               	movwf	6
  5639  075A  0187               	clrf	7
  5640  075B  3001               	movlw	1
  5641  075C  0781               	addwf	1,f
  5642  075D  3141               	addfsr 1,1
  5643  075E  1803               	skipnc
  5644  075F  0A81               	incf	1,f
  5645                           
  5646                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  5647  0760  01B9               	clrf	?_vfpfcnvrt
  5648  0761  01BA               	clrf	?_vfpfcnvrt+1
  5649  0762  0008               	return
  5650  0763                     l6024:	
  5651                           
  5652                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  5653  0763  0839               	movf	vfpfcnvrt@fmt,w
  5654  0764  0086               	movwf	6
  5655  0765  0187               	clrf	7
  5656  0766  3F40               	moviw [0]fsr1
  5657  0767  00BB               	movwf	??_vfpfcnvrt
  5658  0768  3F41               	moviw [1]fsr1
  5659  0769  00BC               	movwf	??_vfpfcnvrt+1
  5660  076A  083B               	movf	??_vfpfcnvrt,w
  5661  076B  0084               	movwf	4
  5662  076C  083C               	movf	??_vfpfcnvrt+1,w
  5663  076D  0085               	movwf	5
  5664  076E  0800               	movf	0,w	;code access
  5665  076F  00BD               	movwf	??_vfpfcnvrt+2
  5666  0770  01BE               	clrf	??_vfpfcnvrt+3
  5667  0771  083D               	movf	??_vfpfcnvrt+2,w
  5668  0772  00F4               	movwf	fputc@c
  5669  0773  083E               	movf	??_vfpfcnvrt+3,w
  5670  0774  00F5               	movwf	fputc@c+1
  5671  0775  0841               	movf	vfpfcnvrt@fp,w
  5672  0776  00BF               	movwf	??_vfpfcnvrt+4
  5673  0777  083F               	movf	??_vfpfcnvrt+4,w
  5674  0778  00F6               	movwf	fputc@fp
  5675  0779  3188  20FE  3186   	fcall	_fputc
  5676                           
  5677                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  5678  077C  0020               	movlb	0	; select bank0
  5679  077D  0839               	movf	vfpfcnvrt@fmt,w
  5680  077E  0086               	movwf	6
  5681  077F  0187               	clrf	7
  5682  0780  3001               	movlw	1
  5683  0781  0781               	addwf	1,f
  5684  0782  3141               	addfsr 1,1
  5685  0783  1803               	skipnc
  5686  0784  0A81               	incf	1,f
  5687  0785  2F52               	goto	l6014
  5688  0786                     __end_of_vfpfcnvrt:	
  5689                           
  5690                           	psect	text6
  5691  1750                     __ptext6:	
  5692 ;; *************** function _ctoa *****************
  5693 ;; Defined at:
  5694 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;  fp              1    wreg     PTR struct _IO_FILE
  5697 ;;		 -> NULL(0), 
  5698 ;;  c               1   19[BANK0 ] unsigned char 
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;  fp              1   24[BANK0 ] PTR struct _IO_FILE
  5701 ;;		 -> NULL(0), 
  5702 ;;  w               2   22[BANK0 ] int 
  5703 ;;  l               2    0        int 
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  2   19[BANK0 ] int 
  5706 ;; Registers used:
  5707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5713 ;;      Params:         0       2       0       0       0       0       0       0
  5714 ;;      Locals:         0       3       0       0       0       0       0       0
  5715 ;;      Temps:          0       1       0       0       0       0       0       0
  5716 ;;      Totals:         0       6       0       0       0       0       0       0
  5717 ;;Total ram usage:        6 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    9
  5720 ;; This function calls:
  5721 ;;		_pad
  5722 ;; This function is called by:
  5723 ;;		_vfpfcnvrt
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           
  5728                           ;psect for function _ctoa
  5729  1750                     _ctoa:	
  5730                           
  5731                           ;incstack = 0
  5732                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5733                           ;ctoa@fp stored from wreg
  5734  1750  0020               	movlb	0	; select bank0
  5735  1751  00B8               	movwf	ctoa@fp
  5736                           
  5737                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  5738  1752  0859               	movf	_width,w
  5739  1753  045A               	iorwf	_width+1,w
  5740  1754  1D03               	btfss	3,2
  5741  1755  2F5B               	goto	l5838
  5742  1756  085A               	movf	_width+1,w
  5743  1757  00B7               	movwf	ctoa@w+1
  5744  1758  0859               	movf	_width,w
  5745  1759  00B6               	movwf	ctoa@w
  5746  175A  2F61               	goto	l5840
  5747  175B                     l5838:	
  5748  175B  0859               	movf	_width,w
  5749  175C  3EFF               	addlw	255
  5750  175D  00B6               	movwf	ctoa@w
  5751  175E  30FF               	movlw	255
  5752  175F  3D5A               	addwfc	_width+1,w
  5753  1760  00B7               	movwf	ctoa@w+1
  5754  1761                     l5840:	
  5755                           
  5756                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  5757  1761  0833               	movf	ctoa@c,w
  5758  1762  00B5               	movwf	??_ctoa
  5759  1763  0835               	movf	??_ctoa,w
  5760  1764  0021               	movlb	1	; select bank1
  5761  1765  00B8               	movwf	_dbuf^(0+128)
  5762                           
  5763                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  5764  1766  01B9               	clrf	(_dbuf^(0+128)+1)
  5765                           
  5766                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  5767  1767  30B8               	movlw	(low (_dbuf| 0))& (0+255)
  5768  1768  0020               	movlb	0	; select bank0
  5769  1769  00B5               	movwf	??_ctoa
  5770  176A  0835               	movf	??_ctoa,w
  5771  176B  00AA               	movwf	pad@buf
  5772  176C  0837               	movf	ctoa@w+1,w
  5773  176D  00AC               	movwf	pad@p+1
  5774  176E  0836               	movf	ctoa@w,w
  5775  176F  00AB               	movwf	pad@p
  5776  1770  0838               	movf	ctoa@fp,w
  5777  1771  318A  225B         	fcall	_pad
  5778  1773  0020               	movlb	0	; select bank0
  5779  1774  082B               	movf	?_pad+1,w
  5780  1775  00B4               	movwf	?_ctoa+1
  5781  1776  082A               	movf	?_pad,w
  5782  1777  00B3               	movwf	?_ctoa
  5783  1778  0008               	return
  5784  1779                     __end_of_ctoa:	
  5785                           
  5786                           	psect	text7
  5787  0A5B                     __ptext7:	
  5788 ;; *************** function _pad *****************
  5789 ;; Defined at:
  5790 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  fp              1    wreg     PTR struct _IO_FILE
  5793 ;;		 -> NULL(0), 
  5794 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  5795 ;;		 -> dbuf(32), 
  5796 ;;  p               2   11[BANK0 ] int 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  fp              1   18[BANK0 ] PTR struct _IO_FILE
  5799 ;;		 -> NULL(0), 
  5800 ;;  w               2   16[BANK0 ] int 
  5801 ;;  i               2   14[BANK0 ] int 
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  2   10[BANK0 ] int 
  5804 ;; Registers used:
  5805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5811 ;;      Params:         0       3       0       0       0       0       0       0
  5812 ;;      Locals:         0       5       0       0       0       0       0       0
  5813 ;;      Temps:          0       1       0       0       0       0       0       0
  5814 ;;      Totals:         0       9       0       0       0       0       0       0
  5815 ;;Total ram usage:        9 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; Hardware stack levels required when called:    8
  5818 ;; This function calls:
  5819 ;;		_fputc
  5820 ;;		_fputs
  5821 ;;		_strlen
  5822 ;; This function is called by:
  5823 ;;		_ctoa
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           
  5828                           ;psect for function _pad
  5829  0A5B                     _pad:	
  5830                           
  5831                           ;incstack = 0
  5832                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5833                           ;pad@fp stored from wreg
  5834  0A5B  0020               	movlb	0	; select bank0
  5835  0A5C  00B2               	movwf	pad@fp
  5836                           
  5837                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  5838  0A5D  0021               	movlb	1	; select bank1
  5839  0A5E  1C34               	btfss	_flags^(0+128),0
  5840  0A5F  2A69               	goto	l5732
  5841                           
  5842                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  5843  0A60  0020               	movlb	0	; select bank0
  5844  0A61  0832               	movf	pad@fp,w
  5845  0A62  00AD               	movwf	??_pad
  5846  0A63  082D               	movf	??_pad,w
  5847  0A64  00A5               	movwf	fputs@fp
  5848  0A65  082A               	movf	pad@buf,w
  5849  0A66  3196  26B5  318A   	fcall	_fputs
  5850  0A69                     l5732:	
  5851                           
  5852                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  5853  0A69  0020               	movlb	0	; select bank0
  5854  0A6A  1BAC               	btfsc	pad@p+1,7
  5855  0A6B  2A71               	goto	l5736
  5856  0A6C  082C               	movf	pad@p+1,w
  5857  0A6D  00B1               	movwf	pad@w+1
  5858  0A6E  082B               	movf	pad@p,w
  5859  0A6F  00B0               	movwf	pad@w
  5860  0A70  2A73               	goto	l1352
  5861  0A71                     l5736:	
  5862  0A71  01B0               	clrf	pad@w
  5863  0A72  01B1               	clrf	pad@w+1
  5864  0A73                     l1352:	
  5865                           
  5866                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  5867  0A73  01AE               	clrf	pad@i
  5868  0A74  01AF               	clrf	pad@i+1
  5869  0A75                     l5742:	
  5870                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5871                           
  5872                           
  5873                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5874  0A75  082F               	movf	pad@i+1,w
  5875  0A76  3A80               	xorlw	128
  5876  0A77  00AD               	movwf	??_pad
  5877  0A78  0831               	movf	pad@w+1,w
  5878  0A79  3A80               	xorlw	128
  5879  0A7A  022D               	subwf	??_pad,w
  5880  0A7B  1D03               	skipz
  5881  0A7C  2A7F               	goto	u4035
  5882  0A7D  0830               	movf	pad@w,w
  5883  0A7E  022E               	subwf	pad@i,w
  5884  0A7F                     u4035:	
  5885  0A7F  1803               	btfsc	3,0
  5886  0A80  2A93               	goto	l1355
  5887                           
  5888                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  5889  0A81  3020               	movlw	32
  5890  0A82  00F4               	movwf	fputc@c
  5891  0A83  3000               	movlw	0
  5892  0A84  00F5               	movwf	fputc@c+1
  5893  0A85  0020               	movlb	0	; select bank0
  5894  0A86  0832               	movf	pad@fp,w
  5895  0A87  00AD               	movwf	??_pad
  5896  0A88  082D               	movf	??_pad,w
  5897  0A89  00F6               	movwf	fputc@fp
  5898  0A8A  3188  20FE  318A   	fcall	_fputc
  5899                           
  5900                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  5901  0A8D  3001               	movlw	1
  5902  0A8E  0020               	movlb	0	; select bank0
  5903  0A8F  07AE               	addwf	pad@i,f
  5904  0A90  3000               	movlw	0
  5905  0A91  3DAF               	addwfc	pad@i+1,f
  5906  0A92  2A75               	goto	l5742
  5907  0A93                     l1355:	
  5908                           
  5909                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  5910  0A93  0021               	movlb	1	; select bank1
  5911  0A94  1834               	btfsc	_flags^(0+128),0
  5912  0A95  2A9F               	goto	l1356
  5913                           
  5914                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  5915  0A96  0020               	movlb	0	; select bank0
  5916  0A97  0832               	movf	pad@fp,w
  5917  0A98  00AD               	movwf	??_pad
  5918  0A99  082D               	movf	??_pad,w
  5919  0A9A  00A5               	movwf	fputs@fp
  5920  0A9B  082A               	movf	pad@buf,w
  5921  0A9C  3196  26B5  318A   	fcall	_fputs
  5922  0A9F                     l1356:	
  5923                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  5924                           
  5925                           
  5926                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  5927  0A9F  0020               	movlb	0	; select bank0
  5928  0AA0  082A               	movf	pad@buf,w
  5929  0AA1  3195  25C4         	fcall	_strlen
  5930  0AA3  0020               	movlb	0	; select bank0
  5931  0AA4  0830               	movf	pad@w,w
  5932  0AA5  0772               	addwf	?_strlen,w
  5933  0AA6  00AA               	movwf	?_pad
  5934  0AA7  0831               	movf	pad@w+1,w
  5935  0AA8  3D73               	addwfc	?_strlen+1,w
  5936  0AA9  00AB               	movwf	?_pad+1
  5937  0AAA  0008               	return
  5938  0AAB                     __end_of_pad:	
  5939                           
  5940                           	psect	text8
  5941  15C4                     __ptext8:	
  5942 ;; *************** function _strlen *****************
  5943 ;; Defined at:
  5944 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  s               1    wreg     PTR const unsigned char 
  5947 ;;		 -> dbuf(32), 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  s               1    6[COMMON] PTR const unsigned char 
  5950 ;;		 -> dbuf(32), 
  5951 ;;  a               1    5[COMMON] PTR const unsigned char 
  5952 ;;		 -> dbuf(32), 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  2    2[COMMON] unsigned int 
  5955 ;; Registers used:
  5956 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5962 ;;      Params:         2       0       0       0       0       0       0       0
  5963 ;;      Locals:         2       0       0       0       0       0       0       0
  5964 ;;      Temps:          1       0       0       0       0       0       0       0
  5965 ;;      Totals:         5       0       0       0       0       0       0       0
  5966 ;;Total ram usage:        5 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    4
  5969 ;; This function calls:
  5970 ;;		Nothing
  5971 ;; This function is called by:
  5972 ;;		_pad
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           
  5977                           ;psect for function _strlen
  5978  15C4                     _strlen:	
  5979                           
  5980                           ;incstack = 0
  5981                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5982                           ;strlen@s stored from wreg
  5983  15C4  00F6               	movwf	strlen@s
  5984  15C5  0876               	movf	strlen@s,w
  5985  15C6  00F4               	movwf	??_strlen
  5986  15C7  0874               	movf	??_strlen,w
  5987  15C8  00F5               	movwf	strlen@a
  5988  15C9                     l3796:	
  5989  15C9  0876               	movf	strlen@s,w
  5990  15CA  0086               	movwf	6
  5991  15CB  0187               	clrf	7
  5992  15CC  0801               	movf	1,w
  5993  15CD  1903               	btfsc	3,2
  5994  15CE  2DD4               	goto	l3798
  5995  15CF  3001               	movlw	1
  5996  15D0  00F4               	movwf	??_strlen
  5997  15D1  0874               	movf	??_strlen,w
  5998  15D2  07F6               	addwf	strlen@s,f
  5999  15D3  2DC9               	goto	l3796
  6000  15D4                     l3798:	
  6001  15D4  0875               	movf	strlen@a,w
  6002  15D5  0276               	subwf	strlen@s,w
  6003  15D6  00F2               	movwf	?_strlen
  6004  15D7  01F3               	clrf	?_strlen+1
  6005  15D8  1BF2               	btfsc	?_strlen,7
  6006  15D9  03F3               	decf	?_strlen+1,f
  6007  15DA  0008               	return
  6008  15DB                     __end_of_strlen:	
  6009                           
  6010                           	psect	text9
  6011  16B5                     __ptext9:	
  6012 ;; *************** function _fputs *****************
  6013 ;; Defined at:
  6014 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  s               1    wreg     PTR const unsigned char 
  6017 ;;		 -> dbuf(32), 
  6018 ;;  fp              1    5[BANK0 ] PTR struct _IO_FILE
  6019 ;;		 -> NULL(0), 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  s               1    9[BANK0 ] PTR const unsigned char 
  6022 ;;		 -> dbuf(32), 
  6023 ;;  i               2    7[BANK0 ] int 
  6024 ;;  c               1    6[BANK0 ] unsigned char 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  2    5[BANK0 ] int 
  6027 ;; Registers used:
  6028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6034 ;;      Params:         0       1       0       0       0       0       0       0
  6035 ;;      Locals:         0       4       0       0       0       0       0       0
  6036 ;;      Temps:          3       0       0       0       0       0       0       0
  6037 ;;      Totals:         3       5       0       0       0       0       0       0
  6038 ;;Total ram usage:        8 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:    7
  6041 ;; This function calls:
  6042 ;;		_fputc
  6043 ;; This function is called by:
  6044 ;;		_pad
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           
  6049                           ;psect for function _fputs
  6050  16B5                     _fputs:	
  6051                           
  6052                           ;incstack = 0
  6053                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6054                           ;fputs@s stored from wreg
  6055  16B5  0020               	movlb	0	; select bank0
  6056  16B6  00A9               	movwf	fputs@s
  6057  16B7  01A7               	clrf	fputs@i
  6058  16B8  01A8               	clrf	fputs@i+1
  6059  16B9                     l5500:	
  6060  16B9  0827               	movf	fputs@i,w
  6061  16BA  0729               	addwf	fputs@s,w
  6062  16BB  00F7               	movwf	??_fputs
  6063  16BC  0877               	movf	??_fputs,w
  6064  16BD  0086               	movwf	6
  6065  16BE  0187               	clrf	7
  6066  16BF  0801               	movf	1,w
  6067  16C0  00F8               	movwf	??_fputs+1
  6068  16C1  0878               	movf	??_fputs+1,w
  6069  16C2  00A6               	movwf	fputs@c
  6070  16C3  0826               	movf	fputs@c,w
  6071  16C4  1903               	btfsc	3,2
  6072  16C5  0008               	return
  6073  16C6  0826               	movf	fputs@c,w
  6074  16C7  00F7               	movwf	??_fputs
  6075  16C8  01F8               	clrf	??_fputs+1
  6076  16C9  0877               	movf	??_fputs,w
  6077  16CA  00F4               	movwf	fputc@c
  6078  16CB  0878               	movf	??_fputs+1,w
  6079  16CC  00F5               	movwf	fputc@c+1
  6080  16CD  0825               	movf	fputs@fp,w
  6081  16CE  00F9               	movwf	??_fputs+2
  6082  16CF  0879               	movf	??_fputs+2,w
  6083  16D0  00F6               	movwf	fputc@fp
  6084  16D1  3188  20FE  3196   	fcall	_fputc
  6085  16D4  3001               	movlw	1
  6086  16D5  0020               	movlb	0	; select bank0
  6087  16D6  07A7               	addwf	fputs@i,f
  6088  16D7  3000               	movlw	0
  6089  16D8  3DA8               	addwfc	fputs@i+1,f
  6090  16D9  2EB9               	goto	l5500
  6091  16DA                     __end_of_fputs:	
  6092                           
  6093                           	psect	text10
  6094  08FE                     __ptext10:	
  6095 ;; *************** function _fputc *****************
  6096 ;; Defined at:
  6097 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;  c               2    4[COMMON] int 
  6100 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
  6101 ;;		 -> NULL(0), 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;		None
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  2    4[COMMON] int 
  6106 ;; Registers used:
  6107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6113 ;;      Params:         3       0       0       0       0       0       0       0
  6114 ;;      Locals:         0       0       0       0       0       0       0       0
  6115 ;;      Temps:          0       5       0       0       0       0       0       0
  6116 ;;      Totals:         3       5       0       0       0       0       0       0
  6117 ;;Total ram usage:        8 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    6
  6120 ;; This function calls:
  6121 ;;		_putch
  6122 ;; This function is called by:
  6123 ;;		_pad
  6124 ;;		_vfpfcnvrt
  6125 ;;		_fputs
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           
  6130                           ;psect for function _fputc
  6131  08FE                     _fputc:	
  6132                           
  6133                           ;incstack = 0
  6134                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6135  08FE  0876               	movf	fputc@fp,w
  6136  08FF  1D03               	btfss	3,2
  6137  0900  0876               	movf	fputc@fp,w
  6138  0901  1D03               	btfss	3,2
  6139  0902  2907               	goto	l5420
  6140  0903  0874               	movf	fputc@c,w
  6141  0904  3193  237C         	fcall	_putch
  6142  0906  0008               	return
  6143  0907                     l5420:	
  6144  0907  0876               	movf	fputc@fp,w
  6145  0908  3E03               	addlw	3
  6146  0909  0086               	movwf	6
  6147  090A  0187               	clrf	7
  6148  090B  0016               	moviw fsr1++
  6149  090C  0401               	iorwf	1,w
  6150  090D  1903               	btfsc	3,2
  6151  090E  292B               	goto	l5424
  6152  090F  0876               	movf	fputc@fp,w
  6153  0910  3E03               	addlw	3
  6154  0911  0086               	movwf	6
  6155  0912  0187               	clrf	7
  6156  0913  3F40               	moviw [0]fsr1
  6157  0914  0020               	movlb	0	; select bank0
  6158  0915  00A0               	movwf	??_fputc
  6159  0916  3F41               	moviw [1]fsr1
  6160  0917  00A1               	movwf	??_fputc+1
  6161  0918  0A76               	incf	fputc@fp,w
  6162  0919  0086               	movwf	6
  6163  091A  0187               	clrf	7
  6164  091B  3F40               	moviw [0]fsr1
  6165  091C  00A2               	movwf	??_fputc+2
  6166  091D  3F41               	moviw [1]fsr1
  6167  091E  00A3               	movwf	??_fputc+3
  6168  091F  0823               	movf	??_fputc+3,w
  6169  0920  3A80               	xorlw	128
  6170  0921  00A4               	movwf	??_fputc+4
  6171  0922  0821               	movf	??_fputc+1,w
  6172  0923  3A80               	xorlw	128
  6173  0924  0224               	subwf	??_fputc+4,w
  6174  0925  1D03               	skipz
  6175  0926  2929               	goto	u3505
  6176  0927  0820               	movf	??_fputc,w
  6177  0928  0222               	subwf	??_fputc+2,w
  6178  0929                     u3505:	
  6179  0929  1803               	skipnc
  6180  092A  0008               	return
  6181  092B                     l5424:	
  6182  092B  0A76               	incf	fputc@fp,w
  6183  092C  0086               	movwf	6
  6184  092D  0187               	clrf	7
  6185  092E  3001               	movlw	1
  6186  092F  0781               	addwf	1,f
  6187  0930  3141               	addfsr 1,1
  6188  0931  1803               	skipnc
  6189  0932  0A81               	incf	1,f
  6190  0933  0008               	return
  6191  0934                     __end_of_fputc:	
  6192                           
  6193                           	psect	text11
  6194  137C                     __ptext11:	
  6195 ;; *************** function _putch *****************
  6196 ;; Defined at:
  6197 ;;		line 158 in file "mcc_generated_files/eusart.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  txData          1    wreg     unsigned char 
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;  txData          1    3[COMMON] unsigned char 
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  1    wreg      void 
  6204 ;; Registers used:
  6205 ;;		wreg, status,2, status,0, pclath, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6211 ;;      Params:         0       0       0       0       0       0       0       0
  6212 ;;      Locals:         1       0       0       0       0       0       0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0       0
  6214 ;;      Totals:         1       0       0       0       0       0       0       0
  6215 ;;Total ram usage:        1 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    5
  6218 ;; This function calls:
  6219 ;;		_EUSART_Write
  6220 ;; This function is called by:
  6221 ;;		_fputc
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           
  6226                           ;psect for function _putch
  6227  137C                     _putch:	
  6228                           
  6229                           ;incstack = 0
  6230                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  6231                           ;putch@txData stored from wreg
  6232  137C  00F3               	movwf	putch@txData
  6233                           
  6234                           ;mcc_generated_files/eusart.c: 158: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 159: {;mcc_generated_files/eusart.c: 160:     EUSART_Write(txData);
  6235  137D  0873               	movf	putch@txData,w
  6236  137E  3187  27F8         	fcall	_EUSART_Write
  6237  1380  0008               	return
  6238  1381                     __end_of_putch:	
  6239                           
  6240                           	psect	text12
  6241  07F8                     __ptext12:	
  6242 ;; *************** function _EUSART_Write *****************
  6243 ;; Defined at:
  6244 ;;		line 148 in file "mcc_generated_files/eusart.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  txData          1    wreg     unsigned char 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  txData          1    2[COMMON] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6258 ;;      Params:         0       0       0       0       0       0       0       0
  6259 ;;      Locals:         1       0       0       0       0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0
  6261 ;;      Totals:         1       0       0       0       0       0       0       0
  6262 ;;Total ram usage:        1 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    4
  6265 ;; This function calls:
  6266 ;;		Nothing
  6267 ;; This function is called by:
  6268 ;;		_putch
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           
  6273                           ;psect for function _EUSART_Write
  6274  07F8                     _EUSART_Write:	
  6275                           
  6276                           ;incstack = 0
  6277                           ; Regs used in _EUSART_Write: [wreg]
  6278                           ;EUSART_Write@txData stored from wreg
  6279  07F8  00F2               	movwf	EUSART_Write@txData
  6280  07F9                     l568:	
  6281                           ;mcc_generated_files/eusart.c: 151:     {;mcc_generated_files/eusart.c: 152:     }
  6282                           
  6283                           
  6284                           ;mcc_generated_files/eusart.c: 150:     while(0 == PIR1bits.TXIF)
  6285  07F9  0020               	movlb	0	; select bank0
  6286  07FA  1E11               	btfss	17,4	;volatile
  6287  07FB  2FF9               	goto	l568
  6288                           
  6289                           ;mcc_generated_files/eusart.c: 154:     TXREG = txData;
  6290  07FC  0872               	movf	EUSART_Write@txData,w
  6291  07FD  0023               	movlb	3	; select bank3
  6292  07FE  009A               	movwf	26	;volatile
  6293  07FF  0008               	return
  6294  0800                     __end_of_EUSART_Write:	
  6295                           
  6296                           	psect	text13
  6297  0971                     __ptext13:	
  6298 ;; *************** function _check_data *****************
  6299 ;; Defined at:
  6300 ;;		line 393 in file "main.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  x               1    wreg     unsigned char 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  x               1    4[COMMON] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      _Bool 
  6307 ;; Registers used:
  6308 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6314 ;;      Params:         0       0       0       0       0       0       0       0
  6315 ;;      Locals:         1       0       0       0       0       0       0       0
  6316 ;;      Temps:          2       0       0       0       0       0       0       0
  6317 ;;      Totals:         3       0       0       0       0       0       0       0
  6318 ;;Total ram usage:        3 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    4
  6321 ;; This function calls:
  6322 ;;		Nothing
  6323 ;; This function is called by:
  6324 ;;		_main
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           
  6329                           ;psect for function _check_data
  6330  0971                     _check_data:	
  6331                           
  6332                           ;incstack = 0
  6333                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  6334                           ;check_data@x stored from wreg
  6335  0971  00F4               	movwf	check_data@x
  6336                           
  6337                           ;main.c: 393: _Bool check_data(uint8_t x);main.c: 394: {;main.c: 395:     switch(x)
  6338  0972  2977               	goto	l4880
  6339  0973                     l4798:	
  6340  0973  3001               	movlw	1
  6341  0974  0008               	return
  6342  0975                     l4874:	
  6343  0975  3000               	movlw	0
  6344  0976  0008               	return
  6345  0977                     l4880:	
  6346  0977  0874               	movf	check_data@x,w
  6347  0978  00F2               	movwf	??_check_data
  6348  0979  01F3               	clrf	??_check_data+1
  6349                           
  6350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6351                           ; Switch size 1, requested type "simple"
  6352                           ; Number of cases is 1, Range of values is 0 to 0
  6353                           ; switch strategies available:
  6354                           ; Name         Instructions Cycles
  6355                           ; simple_byte            4     3 (average)
  6356                           ; direct_byte            8     6 (fixed)
  6357                           ; jumptable            260     6 (fixed)
  6358                           ;	Chosen strategy is simple_byte
  6359  097A  0873               	movf	??_check_data+1,w
  6360  097B  3A00               	xorlw	0	; case 0
  6361  097C  1903               	skipnz
  6362  097D  297F               	goto	l6586
  6363  097E  2975               	goto	l4874
  6364  097F                     l6586:	
  6365                           
  6366                           ; Switch size 1, requested type "simple"
  6367                           ; Number of cases is 19, Range of values is 48 to 85
  6368                           ; switch strategies available:
  6369                           ; Name         Instructions Cycles
  6370                           ; simple_byte           58    30 (average)
  6371                           ; direct_byte           85     9 (fixed)
  6372                           ; jumptable            263     9 (fixed)
  6373                           ;	Chosen strategy is simple_byte
  6374  097F  0872               	movf	??_check_data,w
  6375  0980  3A30               	xorlw	48	; case 48
  6376  0981  1903               	skipnz
  6377  0982  2973               	goto	l4798
  6378  0983  3A01               	xorlw	1	; case 49
  6379  0984  1903               	skipnz
  6380  0985  2973               	goto	l4798
  6381  0986  3A03               	xorlw	3	; case 50
  6382  0987  1903               	skipnz
  6383  0988  2973               	goto	l4798
  6384  0989  3A01               	xorlw	1	; case 51
  6385  098A  1903               	skipnz
  6386  098B  2973               	goto	l4798
  6387  098C  3A07               	xorlw	7	; case 52
  6388  098D  1903               	skipnz
  6389  098E  2973               	goto	l4798
  6390  098F  3A01               	xorlw	1	; case 53
  6391  0990  1903               	skipnz
  6392  0991  2973               	goto	l4798
  6393  0992  3A03               	xorlw	3	; case 54
  6394  0993  1903               	skipnz
  6395  0994  2973               	goto	l4798
  6396  0995  3A01               	xorlw	1	; case 55
  6397  0996  1903               	skipnz
  6398  0997  2973               	goto	l4798
  6399  0998  3A0F               	xorlw	15	; case 56
  6400  0999  1903               	skipnz
  6401  099A  2973               	goto	l4798
  6402  099B  3A01               	xorlw	1	; case 57
  6403  099C  1903               	skipnz
  6404  099D  2973               	goto	l4798
  6405  099E  3A78               	xorlw	120	; case 65
  6406  099F  1903               	skipnz
  6407  09A0  2973               	goto	l4798
  6408  09A1  3A03               	xorlw	3	; case 66
  6409  09A2  1903               	skipnz
  6410  09A3  2973               	goto	l4798
  6411  09A4  3A01               	xorlw	1	; case 67
  6412  09A5  1903               	skipnz
  6413  09A6  2973               	goto	l4798
  6414  09A7  3A07               	xorlw	7	; case 68
  6415  09A8  1903               	skipnz
  6416  09A9  2973               	goto	l4798
  6417  09AA  3A01               	xorlw	1	; case 69
  6418  09AB  1903               	skipnz
  6419  09AC  2973               	goto	l4798
  6420  09AD  3A03               	xorlw	3	; case 70
  6421  09AE  1903               	skipnz
  6422  09AF  2973               	goto	l4798
  6423  09B0  3A01               	xorlw	1	; case 71
  6424  09B1  1903               	skipnz
  6425  09B2  2973               	goto	l4798
  6426  09B3  3A13               	xorlw	19	; case 84
  6427  09B4  1903               	skipnz
  6428  09B5  2973               	goto	l4798
  6429  09B6  3A01               	xorlw	1	; case 85
  6430  09B7  1903               	skipnz
  6431  09B8  2973               	goto	l4798
  6432  09B9  2975               	goto	l4874
  6433  09BA  0008               	return
  6434  09BB                     __end_of_check_data:	
  6435                           
  6436                           	psect	text14
  6437  156B                     __ptext14:	
  6438 ;; *************** function _SYSTEM_Initialize *****************
  6439 ;; Defined at:
  6440 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;		None
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;		None
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6454 ;;      Params:         0       0       0       0       0       0       0       0
  6455 ;;      Locals:         0       0       0       0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0
  6457 ;;      Totals:         0       0       0       0       0       0       0       0
  6458 ;;Total ram usage:        0 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    9
  6461 ;; This function calls:
  6462 ;;		_EUSART_Initialize
  6463 ;;		_MTOUCH_Initialize
  6464 ;;		_OSCILLATOR_Initialize
  6465 ;;		_PIN_MANAGER_Initialize
  6466 ;;		_TMR1_Initialize
  6467 ;;		_TMR2_Initialize
  6468 ;;		_WDT_Initialize
  6469 ;; This function is called by:
  6470 ;;		_main
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           
  6475                           ;psect for function _SYSTEM_Initialize
  6476  156B                     _SYSTEM_Initialize:	
  6477                           
  6478                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6479                           
  6480                           ;incstack = 0
  6481                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6482  156B  3196  262F  3195   	fcall	_PIN_MANAGER_Initialize
  6483                           
  6484                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6485  156E  3193  23AB  3195   	fcall	_OSCILLATOR_Initialize
  6486                           
  6487                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6488  1571  3193  2373  3195   	fcall	_WDT_Initialize
  6489                           
  6490                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  6491  1574  3193  23DD  3195   	fcall	_TMR2_Initialize
  6492                           
  6493                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  6494  1577  3195  25DB  3195   	fcall	_TMR1_Initialize
  6495                           
  6496                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  6497  157A  3188  206A  3195   	fcall	_EUSART_Initialize
  6498                           
  6499                           ;mcc_generated_files/mcc.c: 59:     MTOUCH_Initialize();
  6500  157D  3195  252E         	fcall	_MTOUCH_Initialize
  6501  157F  0008               	return
  6502  1580                     __end_of_SYSTEM_Initialize:	
  6503                           
  6504                           	psect	text15
  6505  1373                     __ptext15:	
  6506 ;; *************** function _WDT_Initialize *****************
  6507 ;; Defined at:
  6508 ;;		line 70 in file "mcc_generated_files/mcc.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;		None
  6511 ;; Auto vars:     Size  Location     Type
  6512 ;;		None
  6513 ;; Return value:  Size  Location     Type
  6514 ;;                  1    wreg      void 
  6515 ;; Registers used:
  6516 ;;		wreg
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6522 ;;      Params:         0       0       0       0       0       0       0       0
  6523 ;;      Locals:         0       0       0       0       0       0       0       0
  6524 ;;      Temps:          0       0       0       0       0       0       0       0
  6525 ;;      Totals:         0       0       0       0       0       0       0       0
  6526 ;;Total ram usage:        0 bytes
  6527 ;; Hardware stack levels used:    1
  6528 ;; Hardware stack levels required when called:    4
  6529 ;; This function calls:
  6530 ;;		Nothing
  6531 ;; This function is called by:
  6532 ;;		_SYSTEM_Initialize
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           
  6537                           ;psect for function _WDT_Initialize
  6538  1373                     _WDT_Initialize:	
  6539                           
  6540                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  6541                           
  6542                           ;incstack = 0
  6543                           ; Regs used in _WDT_Initialize: [wreg]
  6544  1373  3016               	movlw	22
  6545  1374  0021               	movlb	1	; select bank1
  6546  1375  0097               	movwf	23	;volatile
  6547  1376  0008               	return
  6548  1377                     __end_of_WDT_Initialize:	
  6549                           
  6550                           	psect	text16
  6551  13DD                     __ptext16:	
  6552 ;; *************** function _TMR2_Initialize *****************
  6553 ;; Defined at:
  6554 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  1    wreg      void 
  6561 ;; Registers used:
  6562 ;;		wreg, status,2
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6568 ;;      Params:         0       0       0       0       0       0       0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0       0
  6570 ;;      Temps:          0       0       0       0       0       0       0       0
  6571 ;;      Totals:         0       0       0       0       0       0       0       0
  6572 ;;Total ram usage:        0 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    4
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		_SYSTEM_Initialize
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           
  6583                           ;psect for function _TMR2_Initialize
  6584  13DD                     _TMR2_Initialize:	
  6585                           
  6586                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  6587                           
  6588                           ;incstack = 0
  6589                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6590  13DD  30FF               	movlw	255
  6591  13DE  0020               	movlb	0	; select bank0
  6592  13DF  009B               	movwf	27	;volatile
  6593                           
  6594                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  6595  13E0  019A               	clrf	26	;volatile
  6596                           
  6597                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  6598  13E1  1091               	bcf	17,1	;volatile
  6599                           
  6600                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  6601  13E2  3004               	movlw	4
  6602  13E3  009C               	movwf	28	;volatile
  6603  13E4  0008               	return
  6604  13E5                     __end_of_TMR2_Initialize:	
  6605                           
  6606                           	psect	text17
  6607  15DB                     __ptext17:	
  6608 ;; *************** function _TMR1_Initialize *****************
  6609 ;; Defined at:
  6610 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0, pclath, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6624 ;;      Params:         0       0       0       0       0       0       0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0
  6627 ;;      Totals:         0       0       0       0       0       0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    5
  6631 ;; This function calls:
  6632 ;;		_TMR1_SetInterruptHandler
  6633 ;; This function is called by:
  6634 ;;		_SYSTEM_Initialize
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           
  6639                           ;psect for function _TMR1_Initialize
  6640  15DB                     _TMR1_Initialize:	
  6641                           
  6642                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  6643                           
  6644                           ;incstack = 0
  6645                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6646  15DB  0020               	movlb	0	; select bank0
  6647  15DC  0199               	clrf	25	;volatile
  6648                           
  6649                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xE0;
  6650  15DD  30E0               	movlw	224
  6651  15DE  0097               	movwf	23	;volatile
  6652                           
  6653                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xC0;
  6654  15DF  30C0               	movlw	192
  6655  15E0  0096               	movwf	22	;volatile
  6656                           
  6657                           ;mcc_generated_files/tmr1.c: 78:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  6658  15E1  0817               	movf	23,w	;volatile
  6659  15E2  0021               	movlb	1	; select bank1
  6660  15E3  00DB               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
  6661  15E4  0020               	movlb	0	; select bank0
  6662  15E5  0816               	movf	22,w	;volatile
  6663  15E6  0021               	movlb	1	; select bank1
  6664  15E7  00DA               	movwf	_timer1ReloadVal^(0+128)	;volatile
  6665                           
  6666                           ;mcc_generated_files/tmr1.c: 81:     PIR1bits.TMR1IF = 0;
  6667  15E8  0020               	movlb	0	; select bank0
  6668  15E9  1011               	bcf	17,0	;volatile
  6669                           
  6670                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  6671  15EA  0021               	movlb	1	; select bank1
  6672  15EB  1411               	bsf	17,0	;volatile
  6673                           
  6674                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  6675  15EC  305A               	movlw	low _TMR1_DefaultInterruptHandler
  6676  15ED  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6677  15EE  3013               	movlw	high _TMR1_DefaultInterruptHandler
  6678  15EF  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6679  15F0  3193  23A5         	fcall	_TMR1_SetInterruptHandler
  6680                           
  6681                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x05;
  6682  15F2  3005               	movlw	5
  6683  15F3  0020               	movlb	0	; select bank0
  6684  15F4  0098               	movwf	24	;volatile
  6685  15F5  0008               	return
  6686  15F6                     __end_of_TMR1_Initialize:	
  6687                           
  6688                           	psect	text18
  6689  162F                     __ptext18:	
  6690 ;; *************** function _PIN_MANAGER_Initialize *****************
  6691 ;; Defined at:
  6692 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;                  1    wreg      void 
  6699 ;; Registers used:
  6700 ;;		wreg, status,2
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6706 ;;      Params:         0       0       0       0       0       0       0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    4
  6713 ;; This function calls:
  6714 ;;		Nothing
  6715 ;; This function is called by:
  6716 ;;		_SYSTEM_Initialize
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           
  6721                           ;psect for function _PIN_MANAGER_Initialize
  6722  162F                     _PIN_MANAGER_Initialize:	
  6723                           
  6724                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  6725                           
  6726                           ;incstack = 0
  6727                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6728  162F  3037               	movlw	55
  6729  1630  0022               	movlb	2	; select bank2
  6730  1631  008C               	movwf	12	;volatile
  6731                           
  6732                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0xC0;
  6733  1632  30C0               	movlw	192
  6734  1633  008D               	movwf	13	;volatile
  6735                           
  6736                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xBF;
  6737  1634  30BF               	movlw	191
  6738  1635  008E               	movwf	14	;volatile
  6739                           
  6740                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  6741  1636  3008               	movlw	8
  6742  1637  0021               	movlb	1	; select bank1
  6743  1638  008C               	movwf	12	;volatile
  6744                           
  6745                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  6746  1639  3020               	movlw	32
  6747  163A  008D               	movwf	13	;volatile
  6748                           
  6749                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  6750  163B  3040               	movlw	64
  6751  163C  008E               	movwf	14	;volatile
  6752                           
  6753                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE8;
  6754  163D  30E8               	movlw	232
  6755  163E  0023               	movlb	3	; select bank3
  6756  163F  008E               	movwf	14	;volatile
  6757                           
  6758                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  6759  1640  3040               	movlw	64
  6760  1641  008D               	movwf	13	;volatile
  6761                           
  6762                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  6763  1642  3037               	movlw	55
  6764  1643  008C               	movwf	12	;volatile
  6765                           
  6766                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  6767  1644  0024               	movlb	4	; select bank4
  6768  1645  018D               	clrf	13	;volatile
  6769                           
  6770                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  6771  1646  018C               	clrf	12	;volatile
  6772                           
  6773                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  6774  1647  0021               	movlb	1	; select bank1
  6775  1648  1795               	bsf	21,7	;volatile
  6776                           
  6777                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  6778  1649  0022               	movlb	2	; select bank2
  6779  164A  019D               	clrf	29	;volatile
  6780  164B  0008               	return
  6781  164C                     __end_of_PIN_MANAGER_Initialize:	
  6782                           
  6783                           	psect	text19
  6784  13AB                     __ptext19:	
  6785 ;; *************** function _OSCILLATOR_Initialize *****************
  6786 ;; Defined at:
  6787 ;;		line 62 in file "mcc_generated_files/mcc.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;		None
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;		None
  6792 ;; Return value:  Size  Location     Type
  6793 ;;                  1    wreg      void 
  6794 ;; Registers used:
  6795 ;;		wreg, status,2
  6796 ;; Tracked objects:
  6797 ;;		On entry : 0/0
  6798 ;;		On exit  : 0/0
  6799 ;;		Unchanged: 0/0
  6800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6801 ;;      Params:         0       0       0       0       0       0       0       0
  6802 ;;      Locals:         0       0       0       0       0       0       0       0
  6803 ;;      Temps:          0       0       0       0       0       0       0       0
  6804 ;;      Totals:         0       0       0       0       0       0       0       0
  6805 ;;Total ram usage:        0 bytes
  6806 ;; Hardware stack levels used:    1
  6807 ;; Hardware stack levels required when called:    4
  6808 ;; This function calls:
  6809 ;;		Nothing
  6810 ;; This function is called by:
  6811 ;;		_SYSTEM_Initialize
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           
  6816                           ;psect for function _OSCILLATOR_Initialize
  6817  13AB                     _OSCILLATOR_Initialize:	
  6818                           
  6819                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0xF0;
  6820                           
  6821                           ;incstack = 0
  6822                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6823  13AB  30F0               	movlw	240
  6824  13AC  0021               	movlb	1	; select bank1
  6825  13AD  0099               	movwf	25	;volatile
  6826                           
  6827                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  6828  13AE  0022               	movlb	2	; select bank2
  6829  13AF  0196               	clrf	22	;volatile
  6830  13B0  0008               	return
  6831  13B1                     __end_of_OSCILLATOR_Initialize:	
  6832                           
  6833                           	psect	text20
  6834  152E                     __ptext20:	
  6835 ;; *************** function _MTOUCH_Initialize *****************
  6836 ;; Defined at:
  6837 ;;		line 96 in file "mcc_generated_files/mtouch/mtouch.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;		None
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;		None
  6842 ;; Return value:  Size  Location     Type
  6843 ;;                  1    wreg      void 
  6844 ;; Registers used:
  6845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6851 ;;      Params:         0       0       0       0       0       0       0       0
  6852 ;;      Locals:         0       0       0       0       0       0       0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0
  6854 ;;      Totals:         0       0       0       0       0       0       0       0
  6855 ;;Total ram usage:        0 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    8
  6858 ;; This function calls:
  6859 ;;		_MTOUCH_Button_InitializeAll
  6860 ;;		_MTOUCH_Sensor_InitializeAll
  6861 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6862 ;;		_MTOUCH_Sensor_Scan_Initialize
  6863 ;;		_TMR1_SetInterruptHandler
  6864 ;; This function is called by:
  6865 ;;		_SYSTEM_Initialize
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _MTOUCH_Initialize
  6871  152E                     _MTOUCH_Initialize:	
  6872                           
  6873                           ;mcc_generated_files/mtouch/mtouch.c: 98:     MTOUCH_Sensor_InitializeAll();
  6874                           
  6875                           ;incstack = 0
  6876                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6877  152E  3194  24B6  3195   	fcall	_MTOUCH_Sensor_InitializeAll
  6878                           
  6879                           ;mcc_generated_files/mtouch/mtouch.c: 99:     MTOUCH_Button_InitializeAll();
  6880  1531  3195  25F6  3195   	fcall	_MTOUCH_Button_InitializeAll
  6881                           
  6882                           ;mcc_generated_files/mtouch/mtouch.c: 100:     MTOUCH_Sensor_Sampled_ResetAll();
  6883  1534  3195  251B  3195   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6884                           
  6885                           ;mcc_generated_files/mtouch/mtouch.c: 101:     MTOUCH_Sensor_Scan_Initialize();
  6886  1537  3194  24A6  3195   	fcall	_MTOUCH_Sensor_Scan_Initialize
  6887                           
  6888                           ;mcc_generated_files/mtouch/mtouch.c: 102:     TMR1_SetInterruptHandler(MTOUCH_ScanSched
      +                          uler);
  6889  153A  30F8               	movlw	low _MTOUCH_ScanScheduler
  6890  153B  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6891  153C  3013               	movlw	high _MTOUCH_ScanScheduler
  6892  153D  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6893  153E  3193  23A5         	fcall	_TMR1_SetInterruptHandler
  6894  1540  0008               	return
  6895  1541                     __end_of_MTOUCH_Initialize:	
  6896                           
  6897                           	psect	text21
  6898  13A5                     __ptext21:	
  6899 ;; *************** function _TMR1_SetInterruptHandler *****************
  6900 ;; Defined at:
  6901 ;;		line 136 in file "mcc_generated_files/tmr1.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  6904 ;;		 -> TMR1_DefaultInterruptHandler(1), MTOUCH_ScanScheduler(1), 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6916 ;;      Params:         2       0       0       0       0       0       0       0
  6917 ;;      Locals:         0       0       0       0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0       0
  6919 ;;      Totals:         2       0       0       0       0       0       0       0
  6920 ;;Total ram usage:        2 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    4
  6923 ;; This function calls:
  6924 ;;		Nothing
  6925 ;; This function is called by:
  6926 ;;		_MTOUCH_Initialize
  6927 ;;		_TMR1_Initialize
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           
  6932                           ;psect for function _TMR1_SetInterruptHandler
  6933  13A5                     _TMR1_SetInterruptHandler:	
  6934                           
  6935                           ;mcc_generated_files/tmr1.c: 137:     TMR1_InterruptHandler = InterruptHandler;
  6936                           
  6937                           ;incstack = 0
  6938                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  6939  13A5  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  6940  13A6  0021               	movlb	1	; select bank1
  6941  13A7  00D9               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  6942  13A8  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  6943  13A9  00D8               	movwf	_TMR1_InterruptHandler^(0+128)
  6944  13AA  0008               	return
  6945  13AB                     __end_of_TMR1_SetInterruptHandler:	
  6946                           
  6947                           	psect	text22
  6948  14B6                     __ptext22:	
  6949 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6950 ;; Defined at:
  6951 ;;		line 231 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;  sensor          1    0        enum E2871
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      void 
  6958 ;; Registers used:
  6959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6965 ;;      Params:         0       0       0       0       0       0       0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0       0
  6968 ;;      Totals:         0       0       0       0       0       0       0       0
  6969 ;;Total ram usage:        0 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    7
  6972 ;; This function calls:
  6973 ;;		_MTOUCH_Sensor_Initialize
  6974 ;; This function is called by:
  6975 ;;		_MTOUCH_Initialize
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           
  6980                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6981  14B6                     _MTOUCH_Sensor_InitializeAll:	
  6982                           
  6983                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 233:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 239:     MTOUCH_Sensor_Initialize(0);
  6984                           
  6985                           ;incstack = 0
  6986                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6987  14B6  3000               	movlw	0
  6988  14B7  3195  2556  3194   	fcall	_MTOUCH_Sensor_Initialize
  6989                           
  6990                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 240:     MTOUCH_Sensor_Initialize(1);
  6991  14BA  3001               	movlw	1
  6992  14BB  3195  2556  3194   	fcall	_MTOUCH_Sensor_Initialize
  6993                           
  6994                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     MTOUCH_Sensor_Initialize(2);
  6995  14BE  3002               	movlw	2
  6996  14BF  3195  2556  3194   	fcall	_MTOUCH_Sensor_Initialize
  6997                           
  6998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 242:     MTOUCH_Sensor_Initialize(3);
  6999  14C2  3003               	movlw	3
  7000  14C3  3195  2556         	fcall	_MTOUCH_Sensor_Initialize
  7001  14C5  0008               	return
  7002  14C6                     __end_of_MTOUCH_Sensor_InitializeAll:	
  7003                           
  7004                           	psect	text23
  7005  1556                     __ptext23:	
  7006 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  7007 ;; Defined at:
  7008 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  sensor          1    wreg     enum E2871
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  sensor          1    9[COMMON] enum E2871
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      enum E2876
  7015 ;; Registers used:
  7016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7022 ;;      Params:         0       0       0       0       0       0       0       0
  7023 ;;      Locals:         1       0       0       0       0       0       0       0
  7024 ;;      Temps:          1       0       0       0       0       0       0       0
  7025 ;;      Totals:         2       0       0       0       0       0       0       0
  7026 ;;Total ram usage:        2 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    6
  7029 ;; This function calls:
  7030 ;;		_MTOUCH_Sensor_Calibrate
  7031 ;;		_MTOUCH_Sensor_Enable
  7032 ;;		_Sensor_Sampled_Reset
  7033 ;;		___bmul
  7034 ;; This function is called by:
  7035 ;;		_MTOUCH_Sensor_InitializeAll
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           
  7040                           ;psect for function _MTOUCH_Sensor_Initialize
  7041  1556                     _MTOUCH_Sensor_Initialize:	
  7042                           
  7043                           ;incstack = 0
  7044                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7045                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  7046  1556  00F9               	movwf	MTOUCH_Sensor_Initialize@sensor
  7047                           
  7048                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 216: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           217: {;mcc_generated_files/mtouch/mtouch_sensor.c: 219:     MTOUCH_Sensor_Enable(sensor
      +                          );
  7049  1557  0879               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7050  1558  3194  243B  3195   	fcall	_MTOUCH_Sensor_Enable
  7051                           
  7052                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 220:     MTOUCH_Sensor_Calibrate(sensor);
  7053  155B  0879               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7054  155C  3194  2411  3195   	fcall	_MTOUCH_Sensor_Calibrate
  7055                           
  7056                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 221:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  7057  155F  3009               	movlw	9
  7058  1560  00F8               	movwf	??_MTOUCH_Sensor_Initialize
  7059  1561  0878               	movf	??_MTOUCH_Sensor_Initialize,w
  7060  1562  00F2               	movwf	___bmul@multiplicand
  7061  1563  0879               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7062  1564  3194  24C6  3195   	fcall	___bmul
  7063  1567  3E20               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7064  1568  3193  23D5         	fcall	_Sensor_Sampled_Reset
  7065  156A  0008               	return
  7066  156B                     __end_of_MTOUCH_Sensor_Initialize:	
  7067                           
  7068                           	psect	text24
  7069  143B                     __ptext24:	
  7070 ;; *************** function _MTOUCH_Sensor_Enable *****************
  7071 ;; Defined at:
  7072 ;;		line 812 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;  sensor          1    wreg     enum E2871
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;  sensor          1    7[COMMON] enum E2871
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  1    wreg      void 
  7079 ;; Registers used:
  7080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7086 ;;      Params:         0       0       0       0       0       0       0       0
  7087 ;;      Locals:         1       0       0       0       0       0       0       0
  7088 ;;      Temps:          1       0       0       0       0       0       0       0
  7089 ;;      Totals:         2       0       0       0       0       0       0       0
  7090 ;;Total ram usage:        2 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    5
  7093 ;; This function calls:
  7094 ;;		___bmul
  7095 ;; This function is called by:
  7096 ;;		_MTOUCH_Sensor_Initialize
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           
  7101                           ;psect for function _MTOUCH_Sensor_Enable
  7102  143B                     _MTOUCH_Sensor_Enable:	
  7103                           
  7104                           ;incstack = 0
  7105                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7106                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  7107  143B  00F7               	movwf	MTOUCH_Sensor_Enable@sensor
  7108                           
  7109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 812: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 813: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 814:         mtouch_sensor[sensor].enabled = 1;
  7110  143C  3009               	movlw	9
  7111  143D  00F6               	movwf	??_MTOUCH_Sensor_Enable
  7112  143E  0876               	movf	??_MTOUCH_Sensor_Enable,w
  7113  143F  00F2               	movwf	___bmul@multiplicand
  7114  1440  0877               	movf	MTOUCH_Sensor_Enable@sensor,w
  7115  1441  3194  24C6         	fcall	___bmul
  7116  1443  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  7117  1444  0086               	movwf	6
  7118  1445  3001               	movlw	1	; select bank2/3
  7119  1446  0087               	movwf	7
  7120  1447  1581               	bsf	1,3
  7121  1448  0008               	return
  7122  1449                     __end_of_MTOUCH_Sensor_Enable:	
  7123                           
  7124                           	psect	text25
  7125  15F6                     __ptext25:	
  7126 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  7127 ;; Defined at:
  7128 ;;		line 188 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;		None
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;  button          1    0        enum E3070
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  1    wreg      void 
  7135 ;; Registers used:
  7136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7142 ;;      Params:         0       0       0       0       0       0       0       0
  7143 ;;      Locals:         0       0       0       0       0       0       0       0
  7144 ;;      Temps:          0       0       0       0       0       0       0       0
  7145 ;;      Totals:         0       0       0       0       0       0       0       0
  7146 ;;Total ram usage:        0 bytes
  7147 ;; Hardware stack levels used:    1
  7148 ;; Hardware stack levels required when called:    7
  7149 ;; This function calls:
  7150 ;;		_MTOUCH_Button_Initialize
  7151 ;;		_memcpy
  7152 ;; This function is called by:
  7153 ;;		_MTOUCH_Initialize
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           
  7158                           ;psect for function _MTOUCH_Button_InitializeAll
  7159  15F6                     _MTOUCH_Button_InitializeAll:	
  7160                           
  7161                           ;mcc_generated_files/mtouch/mtouch_button.c: 190:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 192:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  7162                           
  7163                           ;incstack = 0
  7164                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7165  15F6  3000               	movlw	low (_mtouch_button_init| (0+32768))
  7166  15F7  00F2               	movwf	memcpy@s1
  7167  15F8  3090               	movlw	high (_mtouch_button_init| (0+32768))
  7168  15F9  00F3               	movwf	memcpy@s1+1
  7169  15FA  3044               	movlw	68
  7170  15FB  00F4               	movwf	memcpy@n
  7171  15FC  3000               	movlw	0
  7172  15FD  00F5               	movwf	memcpy@n+1
  7173  15FE  30A0               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  7174  15FF  3197  2779  3195   	fcall	_memcpy
  7175                           
  7176                           ;mcc_generated_files/mtouch/mtouch_button.c: 198:     MTOUCH_Button_Initialize(0);
  7177  1602  3000               	movlw	0
  7178  1603  3188  20CC  3195   	fcall	_MTOUCH_Button_Initialize
  7179                           
  7180                           ;mcc_generated_files/mtouch/mtouch_button.c: 199:     MTOUCH_Button_Initialize(1);
  7181  1606  3001               	movlw	1
  7182  1607  3188  20CC  3195   	fcall	_MTOUCH_Button_Initialize
  7183                           
  7184                           ;mcc_generated_files/mtouch/mtouch_button.c: 200:     MTOUCH_Button_Initialize(2);
  7185  160A  3002               	movlw	2
  7186  160B  3188  20CC  3195   	fcall	_MTOUCH_Button_Initialize
  7187                           
  7188                           ;mcc_generated_files/mtouch/mtouch_button.c: 201:     MTOUCH_Button_Initialize(3);
  7189  160E  3003               	movlw	3
  7190  160F  3188  20CC         	fcall	_MTOUCH_Button_Initialize
  7191  1611  0008               	return
  7192  1612                     __end_of_MTOUCH_Button_InitializeAll:	
  7193                           
  7194                           	psect	text26
  7195  1779                     __ptext26:	
  7196 ;; *************** function _memcpy *****************
  7197 ;; Defined at:
  7198 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  d1              1    wreg     PTR void 
  7201 ;;		 -> mtouch_button(68), 
  7202 ;;  s1              2    2[COMMON] PTR const void 
  7203 ;;		 -> mtouch_button_init(68), 
  7204 ;;  n               2    4[COMMON] unsigned int 
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;  d1              1    3[BANK0 ] PTR void 
  7207 ;;		 -> mtouch_button(68), 
  7208 ;;  s               2    1[BANK0 ] PTR const unsigned char 
  7209 ;;		 -> mtouch_button_init(68), 
  7210 ;;  d               1    4[BANK0 ] PTR unsigned char 
  7211 ;;		 -> mtouch_button(68), 
  7212 ;;  tmp             1    0[BANK0 ] unsigned char 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  1    wreg      PTR void 
  7215 ;; Registers used:
  7216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7222 ;;      Params:         4       0       0       0       0       0       0       0
  7223 ;;      Locals:         0       5       0       0       0       0       0       0
  7224 ;;      Temps:          1       0       0       0       0       0       0       0
  7225 ;;      Totals:         5       5       0       0       0       0       0       0
  7226 ;;Total ram usage:       10 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    4
  7229 ;; This function calls:
  7230 ;;		Nothing
  7231 ;; This function is called by:
  7232 ;;		_MTOUCH_Button_InitializeAll
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           
  7237                           ;psect for function _memcpy
  7238  1779                     _memcpy:	
  7239                           
  7240                           ;incstack = 0
  7241                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  7242                           ;memcpy@d1 stored from wreg
  7243  1779  0020               	movlb	0	; select bank0
  7244  177A  00A3               	movwf	memcpy@d1
  7245  177B  0873               	movf	memcpy@s1+1,w
  7246  177C  00A2               	movwf	memcpy@s+1
  7247  177D  0872               	movf	memcpy@s1,w
  7248  177E  00A1               	movwf	memcpy@s
  7249  177F  0823               	movf	memcpy@d1,w
  7250  1780  00F6               	movwf	??_memcpy
  7251  1781  0876               	movf	??_memcpy,w
  7252  1782  00A4               	movwf	memcpy@d
  7253  1783                     l5924:	
  7254  1783  3001               	movlw	1
  7255  1784  02F4               	subwf	memcpy@n,f
  7256  1785  3000               	movlw	0
  7257  1786  3BF5               	subwfb	memcpy@n+1,f
  7258  1787  0A74               	incf	memcpy@n,w
  7259  1788  1903               	btfsc	3,2
  7260  1789  0A75               	incf	memcpy@n+1,w
  7261  178A  1903               	btfsc	3,2
  7262  178B  0008               	return
  7263  178C  0821               	movf	memcpy@s,w
  7264  178D  0084               	movwf	4
  7265  178E  0822               	movf	memcpy@s+1,w
  7266  178F  0085               	movwf	5
  7267  1790  0800               	movf	0,w	;code access
  7268  1791  00F6               	movwf	??_memcpy
  7269  1792  0876               	movf	??_memcpy,w
  7270  1793  00A0               	movwf	memcpy@tmp
  7271  1794  3001               	movlw	1
  7272  1795  07A1               	addwf	memcpy@s,f
  7273  1796  3000               	movlw	0
  7274  1797  3DA2               	addwfc	memcpy@s+1,f
  7275  1798  0820               	movf	memcpy@tmp,w
  7276  1799  00F6               	movwf	??_memcpy
  7277  179A  0824               	movf	memcpy@d,w
  7278  179B  0086               	movwf	6
  7279  179C  3001               	movlw	1	; select bank2/3
  7280  179D  0087               	movwf	7
  7281  179E  0876               	movf	??_memcpy,w
  7282  179F  0081               	movwf	1
  7283  17A0  3001               	movlw	1
  7284  17A1  00F6               	movwf	??_memcpy
  7285  17A2  0876               	movf	??_memcpy,w
  7286  17A3  07A4               	addwf	memcpy@d,f
  7287  17A4  2F83               	goto	l5924
  7288  17A5                     __end_of_memcpy:	
  7289                           
  7290                           	psect	text27
  7291  086A                     __ptext27:	
  7292 ;; *************** function _EUSART_Initialize *****************
  7293 ;; Defined at:
  7294 ;;		line 81 in file "mcc_generated_files/eusart.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;		None
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;		None
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  1    wreg      void 
  7301 ;; Registers used:
  7302 ;;		wreg, status,2, status,0, pclath, cstack
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7308 ;;      Params:         0       0       0       0       0       0       0       0
  7309 ;;      Locals:         0       0       0       0       0       0       0       0
  7310 ;;      Temps:          0       0       0       0       0       0       0       0
  7311 ;;      Totals:         0       0       0       0       0       0       0       0
  7312 ;;Total ram usage:        0 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    5
  7315 ;; This function calls:
  7316 ;;		_EUSART_SetErrorHandler
  7317 ;;		_EUSART_SetFramingErrorHandler
  7318 ;;		_EUSART_SetOverrunErrorHandler
  7319 ;;		_EUSART_SetRxInterruptHandler
  7320 ;; This function is called by:
  7321 ;;		_SYSTEM_Initialize
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           
  7326                           ;psect for function _EUSART_Initialize
  7327  086A                     _EUSART_Initialize:	
  7328                           
  7329                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  7330                           
  7331                           ;incstack = 0
  7332                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7333  086A  0021               	movlb	1	; select bank1
  7334  086B  1291               	bcf	17,5	;volatile
  7335                           
  7336                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  7337  086C  309A               	movlw	low _EUSART_Receive_ISR
  7338  086D  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  7339  086E  3008               	movlw	high _EUSART_Receive_ISR
  7340  086F  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  7341  0870  3193  239F  3188   	fcall	_EUSART_SetRxInterruptHandler
  7342                           
  7343                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  7344  0873  3008               	movlw	8
  7345  0874  0023               	movlb	3	; select bank3
  7346  0875  009F               	movwf	31	;volatile
  7347                           
  7348                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  7349  0876  3090               	movlw	144
  7350  0877  009D               	movwf	29	;volatile
  7351                           
  7352                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  7353  0878  3024               	movlw	36
  7354  0879  009E               	movwf	30	;volatile
  7355                           
  7356                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  7357  087A  3040               	movlw	64
  7358  087B  009B               	movwf	27	;volatile
  7359                           
  7360                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  7361  087C  3003               	movlw	3
  7362  087D  009C               	movwf	28	;volatile
  7363                           
  7364                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  7365  087E  3059               	movlw	low _EUSART_DefaultFramingErrorHandler
  7366  087F  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  7367  0880  3013               	movlw	high _EUSART_DefaultFramingErrorHandler
  7368  0881  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  7369  0882  3193  2393  3188   	fcall	_EUSART_SetFramingErrorHandler
  7370                           
  7371                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  7372  0885  306F               	movlw	low _EUSART_DefaultOverrunErrorHandler
  7373  0886  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  7374  0887  3013               	movlw	high _EUSART_DefaultOverrunErrorHandler
  7375  0888  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  7376  0889  3193  2399  3188   	fcall	_EUSART_SetOverrunErrorHandler
  7377                           
  7378                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  7379  088C  305D               	movlw	low _EUSART_DefaultErrorHandler
  7380  088D  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  7381  088E  3013               	movlw	high _EUSART_DefaultErrorHandler
  7382  088F  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  7383  0890  3193  238D         	fcall	_EUSART_SetErrorHandler
  7384                           
  7385                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  7386  0892  0020               	movlb	0	; select bank0
  7387  0893  01E8               	clrf	_eusartRxLastError	;volatile
  7388                           
  7389                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  7390  0894  01FB               	clrf	_eusartRxHead	;volatile
  7391                           
  7392                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  7393  0895  01FA               	clrf	_eusartRxTail	;volatile
  7394                           
  7395                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  7396  0896  01E9               	clrf	_eusartRxCount	;volatile
  7397                           
  7398                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  7399  0897  0021               	movlb	1	; select bank1
  7400  0898  1691               	bsf	17,5	;volatile
  7401  0899  0008               	return
  7402  089A                     __end_of_EUSART_Initialize:	
  7403                           
  7404                           	psect	text28
  7405  139F                     __ptext28:	
  7406 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7407 ;; Defined at:
  7408 ;;		line 225 in file "mcc_generated_files/eusart.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  7411 ;;		 -> EUSART_Receive_ISR(1), 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;		None
  7414 ;; Return value:  Size  Location     Type
  7415 ;;                  1    wreg      void 
  7416 ;; Registers used:
  7417 ;;		wreg
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7423 ;;      Params:         2       0       0       0       0       0       0       0
  7424 ;;      Locals:         0       0       0       0       0       0       0       0
  7425 ;;      Temps:          0       0       0       0       0       0       0       0
  7426 ;;      Totals:         2       0       0       0       0       0       0       0
  7427 ;;Total ram usage:        2 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    4
  7430 ;; This function calls:
  7431 ;;		Nothing
  7432 ;; This function is called by:
  7433 ;;		_EUSART_Initialize
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           
  7438                           ;psect for function _EUSART_SetRxInterruptHandler
  7439  139F                     _EUSART_SetRxInterruptHandler:	
  7440                           
  7441                           ;mcc_generated_files/eusart.c: 226:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7442                           
  7443                           ;incstack = 0
  7444                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7445  139F  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  7446  13A0  0021               	movlb	1	; select bank1
  7447  13A1  00E3               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  7448  13A2  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  7449  13A3  00E2               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  7450  13A4  0008               	return
  7451  13A5                     __end_of_EUSART_SetRxInterruptHandler:	
  7452                           
  7453                           	psect	text29
  7454  1399                     __ptext29:	
  7455 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7456 ;; Defined at:
  7457 ;;		line 216 in file "mcc_generated_files/eusart.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  7460 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;		None
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      void 
  7465 ;; Registers used:
  7466 ;;		wreg
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7472 ;;      Params:         2       0       0       0       0       0       0       0
  7473 ;;      Locals:         0       0       0       0       0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0       0
  7475 ;;      Totals:         2       0       0       0       0       0       0       0
  7476 ;;Total ram usage:        2 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    4
  7479 ;; This function calls:
  7480 ;;		Nothing
  7481 ;; This function is called by:
  7482 ;;		_EUSART_Initialize
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           
  7487                           ;psect for function _EUSART_SetOverrunErrorHandler
  7488  1399                     _EUSART_SetOverrunErrorHandler:	
  7489                           
  7490                           ;mcc_generated_files/eusart.c: 217:     EUSART_OverrunErrorHandler = interruptHandler;
  7491                           
  7492                           ;incstack = 0
  7493                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7494  1399  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  7495  139A  0021               	movlb	1	; select bank1
  7496  139B  00DF               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  7497  139C  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7498  139D  00DE               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  7499  139E  0008               	return
  7500  139F                     __end_of_EUSART_SetOverrunErrorHandler:	
  7501                           
  7502                           	psect	text30
  7503  1393                     __ptext30:	
  7504 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7505 ;; Defined at:
  7506 ;;		line 212 in file "mcc_generated_files/eusart.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  7509 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;		None
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  1    wreg      void 
  7514 ;; Registers used:
  7515 ;;		wreg
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7521 ;;      Params:         2       0       0       0       0       0       0       0
  7522 ;;      Locals:         0       0       0       0       0       0       0       0
  7523 ;;      Temps:          0       0       0       0       0       0       0       0
  7524 ;;      Totals:         2       0       0       0       0       0       0       0
  7525 ;;Total ram usage:        2 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; Hardware stack levels required when called:    4
  7528 ;; This function calls:
  7529 ;;		Nothing
  7530 ;; This function is called by:
  7531 ;;		_EUSART_Initialize
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           
  7536                           ;psect for function _EUSART_SetFramingErrorHandler
  7537  1393                     _EUSART_SetFramingErrorHandler:	
  7538                           
  7539                           ;mcc_generated_files/eusart.c: 213:     EUSART_FramingErrorHandler = interruptHandler;
  7540                           
  7541                           ;incstack = 0
  7542                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7543  1393  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7544  1394  0021               	movlb	1	; select bank1
  7545  1395  00E1               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  7546  1396  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7547  1397  00E0               	movwf	_EUSART_FramingErrorHandler^(0+128)
  7548  1398  0008               	return
  7549  1399                     __end_of_EUSART_SetFramingErrorHandler:	
  7550                           
  7551                           	psect	text31
  7552  138D                     __ptext31:	
  7553 ;; *************** function _EUSART_SetErrorHandler *****************
  7554 ;; Defined at:
  7555 ;;		line 220 in file "mcc_generated_files/eusart.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  7558 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;		None
  7561 ;; Return value:  Size  Location     Type
  7562 ;;                  1    wreg      void 
  7563 ;; Registers used:
  7564 ;;		wreg
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7570 ;;      Params:         2       0       0       0       0       0       0       0
  7571 ;;      Locals:         0       0       0       0       0       0       0       0
  7572 ;;      Temps:          0       0       0       0       0       0       0       0
  7573 ;;      Totals:         2       0       0       0       0       0       0       0
  7574 ;;Total ram usage:        2 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    4
  7577 ;; This function calls:
  7578 ;;		Nothing
  7579 ;; This function is called by:
  7580 ;;		_EUSART_Initialize
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           
  7585                           ;psect for function _EUSART_SetErrorHandler
  7586  138D                     _EUSART_SetErrorHandler:	
  7587                           
  7588                           ;mcc_generated_files/eusart.c: 221:     EUSART_ErrorHandler = interruptHandler;
  7589                           
  7590                           ;incstack = 0
  7591                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7592  138D  0873               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7593  138E  0021               	movlb	1	; select bank1
  7594  138F  00DD               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  7595  1390  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7596  1391  00DC               	movwf	_EUSART_ErrorHandler^(0+128)
  7597  1392  0008               	return
  7598  1393                     __end_of_EUSART_SetErrorHandler:	
  7599                           
  7600                           	psect	text32
  7601  1612                     __ptext32:	
  7602 ;; *************** function _MTOUCH_Service_Mainloop *****************
  7603 ;; Defined at:
  7604 ;;		line 112 in file "mcc_generated_files/mtouch/mtouch.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;		None
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;		None
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      _Bool 
  7611 ;; Registers used:
  7612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7618 ;;      Params:         0       0       0       0       0       0       0       0
  7619 ;;      Locals:         0       0       0       0       0       0       0       0
  7620 ;;      Temps:          0       1       0       0       0       0       0       0
  7621 ;;      Totals:         0       1       0       0       0       0       0       0
  7622 ;;Total ram usage:        1 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:   11
  7625 ;; This function calls:
  7626 ;;		_MTOUCH_Button_ServiceAll
  7627 ;;		_MTOUCH_Sensor_SampleAll
  7628 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7629 ;;		_MTOUCH_Tick
  7630 ;;		_MTOUCH_needReburst
  7631 ;; This function is called by:
  7632 ;;		_main
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           
  7637                           ;psect for function _MTOUCH_Service_Mainloop
  7638  1612                     _MTOUCH_Service_Mainloop:	
  7639                           
  7640                           ;mcc_generated_files/mtouch/mtouch.c: 116:     if(mtouch_time_toScan)
  7641                           
  7642                           ;incstack = 0
  7643                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7644  1612  0020               	movlb	0	; select bank0
  7645  1613  086C               	movf	_mtouch_time_toScan,w
  7646  1614  1903               	btfsc	3,2
  7647  1615  2E1C               	goto	l6148
  7648                           
  7649                           ;mcc_generated_files/mtouch/mtouch.c: 117:     {;mcc_generated_files/mtouch/mtouch.c: 11
      +                          8:         if(MTOUCH_Sensor_SampleAll() == 0)
  7650  1616  3195  2580  3196   	fcall	_MTOUCH_Sensor_SampleAll
  7651  1619  3A00               	xorlw	0
  7652  161A  1D03               	skipz
  7653  161B  2E1E               	goto	l6152
  7654  161C                     l6148:	
  7655                           
  7656                           ;mcc_generated_files/mtouch/mtouch.c: 119:         return 0;
  7657  161C  3000               	movlw	0
  7658  161D  0008               	return
  7659  161E                     l6152:	
  7660                           
  7661                           ;mcc_generated_files/mtouch/mtouch.c: 122:             MTOUCH_Button_ServiceAll();
  7662  161E  3194  2496  3196   	fcall	_MTOUCH_Button_ServiceAll
  7663                           
  7664                           ;mcc_generated_files/mtouch/mtouch.c: 123:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  7665  1621  3180  2002  3196   	fcall	_MTOUCH_needReburst
  7666  1624  0020               	movlb	0	; select bank0
  7667  1625  00CD               	movwf	??_MTOUCH_Service_Mainloop
  7668  1626  084D               	movf	??_MTOUCH_Service_Mainloop,w
  7669  1627  00EC               	movwf	_mtouch_time_toScan
  7670                           
  7671                           ;mcc_generated_files/mtouch/mtouch.c: 124:             MTOUCH_Sensor_Sampled_ResetAll();
  7672  1628  3195  251B  3196   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7673                           
  7674                           ;mcc_generated_files/mtouch/mtouch.c: 125:             MTOUCH_Tick();
  7675  162B  3193  2369         	fcall	_MTOUCH_Tick
  7676                           
  7677                           ;mcc_generated_files/mtouch/mtouch.c: 126:             return 1;
  7678  162D  3001               	movlw	1
  7679  162E  0008               	return
  7680  162F                     __end_of_MTOUCH_Service_Mainloop:	
  7681                           
  7682                           	psect	text33
  7683  0002                     __ptext33:	
  7684 ;; *************** function _MTOUCH_needReburst *****************
  7685 ;; Defined at:
  7686 ;;		line 149 in file "mcc_generated_files/mtouch/mtouch.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;		None
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  needReburst     1    0        _Bool 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      _Bool 
  7693 ;; Registers used:
  7694 ;;		wreg, status,2
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7700 ;;      Params:         0       0       0       0       0       0       0       0
  7701 ;;      Locals:         1       0       0       0       0       0       0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0       0
  7703 ;;      Totals:         1       0       0       0       0       0       0       0
  7704 ;;Total ram usage:        1 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    4
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_MTOUCH_Service_Mainloop
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           
  7715                           ;psect for function _MTOUCH_needReburst
  7716  0002                     _MTOUCH_needReburst:	
  7717                           
  7718                           ;mcc_generated_files/mtouch/mtouch.c: 153:     return needReburst;
  7719                           
  7720                           ;incstack = 0
  7721                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  7722  0002  3000               	movlw	0
  7723  0003  0008               	return
  7724  0004                     __end_of_MTOUCH_needReburst:	
  7725                           
  7726                           	psect	text34
  7727  1369                     __ptext34:	
  7728 ;; *************** function _MTOUCH_Tick *****************
  7729 ;; Defined at:
  7730 ;;		line 139 in file "mcc_generated_files/mtouch/mtouch.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;		None
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;		None
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  1    wreg      void 
  7737 ;; Registers used:
  7738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7744 ;;      Params:         0       0       0       0       0       0       0       0
  7745 ;;      Locals:         0       0       0       0       0       0       0       0
  7746 ;;      Temps:          0       0       0       0       0       0       0       0
  7747 ;;      Totals:         0       0       0       0       0       0       0       0
  7748 ;;Total ram usage:        0 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    6
  7751 ;; This function calls:
  7752 ;;		_MTOUCH_Button_Tick
  7753 ;; This function is called by:
  7754 ;;		_MTOUCH_Service_Mainloop
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           
  7759                           ;psect for function _MTOUCH_Tick
  7760  1369                     _MTOUCH_Tick:	
  7761                           
  7762                           ;mcc_generated_files/mtouch/mtouch.c: 141:     MTOUCH_Button_Tick();
  7763                           
  7764                           ;incstack = 0
  7765                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7766  1369  3194  24F9         	fcall	_MTOUCH_Button_Tick
  7767  136B  0008               	return
  7768  136C                     __end_of_MTOUCH_Tick:	
  7769                           
  7770                           	psect	text35
  7771  14F9                     __ptext35:	
  7772 ;; *************** function _MTOUCH_Button_Tick *****************
  7773 ;; Defined at:
  7774 ;;		line 322 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;		None
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;  i               1    6[COMMON] unsigned char 
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      void 
  7781 ;; Registers used:
  7782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7788 ;;      Params:         0       0       0       0       0       0       0       0
  7789 ;;      Locals:         1       0       0       0       0       0       0       0
  7790 ;;      Temps:          1       0       0       0       0       0       0       0
  7791 ;;      Totals:         2       0       0       0       0       0       0       0
  7792 ;;Total ram usage:        2 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:    5
  7795 ;; This function calls:
  7796 ;;		_Button_Tick_helper
  7797 ;; This function is called by:
  7798 ;;		_MTOUCH_Tick
  7799 ;; This function uses a non-reentrant model
  7800 ;;
  7801                           
  7802                           
  7803                           ;psect for function _MTOUCH_Button_Tick
  7804  14F9                     _MTOUCH_Button_Tick:	
  7805                           
  7806                           ;mcc_generated_files/mtouch/mtouch_button.c: 324:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 325:     for (i = 0; i < 4u; i++)
  7807                           
  7808                           ;incstack = 0
  7809                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7810  14F9  01F6               	clrf	MTOUCH_Button_Tick@i
  7811  14FA                     l4456:	
  7812                           
  7813                           ;mcc_generated_files/mtouch/mtouch_button.c: 326:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 327:         Button_Tick_helper(&mtouch_button[i]);
  7814  14FA  0E76               	swapf	MTOUCH_Button_Tick@i,w
  7815  14FB  39F0               	andlw	240
  7816  14FC  0776               	addwf	MTOUCH_Button_Tick@i,w
  7817  14FD  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7818  14FE  3196  26DA  3194   	fcall	_Button_Tick_helper
  7819                           
  7820                           ;mcc_generated_files/mtouch/mtouch_button.c: 328:     }
  7821  1501  3001               	movlw	1
  7822  1502  00F5               	movwf	??_MTOUCH_Button_Tick
  7823  1503  0875               	movf	??_MTOUCH_Button_Tick,w
  7824  1504  07F6               	addwf	MTOUCH_Button_Tick@i,f
  7825  1505  3004               	movlw	4
  7826  1506  0276               	subwf	MTOUCH_Button_Tick@i,w
  7827  1507  1803               	btfsc	3,0
  7828  1508  0008               	return
  7829  1509  2CFA               	goto	l4456
  7830  150A                     __end_of_MTOUCH_Button_Tick:	
  7831                           
  7832                           	psect	text36
  7833  16DA                     __ptext36:	
  7834 ;; *************** function _Button_Tick_helper *****************
  7835 ;; Defined at:
  7836 ;;		line 330 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;  button          1    wreg     PTR struct .
  7839 ;;		 -> mtouch_button(68), 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  button          1    4[COMMON] PTR struct .
  7842 ;;		 -> mtouch_button(68), 
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      void 
  7845 ;; Registers used:
  7846 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7852 ;;      Params:         0       0       0       0       0       0       0       0
  7853 ;;      Locals:         1       0       0       0       0       0       0       0
  7854 ;;      Temps:          2       0       0       0       0       0       0       0
  7855 ;;      Totals:         3       0       0       0       0       0       0       0
  7856 ;;Total ram usage:        3 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    4
  7859 ;; This function calls:
  7860 ;;		Nothing
  7861 ;; This function is called by:
  7862 ;;		_MTOUCH_Button_Tick
  7863 ;; This function uses a non-reentrant model
  7864 ;;
  7865                           
  7866                           
  7867                           ;psect for function _Button_Tick_helper
  7868  16DA                     _Button_Tick_helper:	
  7869                           
  7870                           ;incstack = 0
  7871                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  7872                           ;Button_Tick_helper@button stored from wreg
  7873  16DA  00F4               	movwf	Button_Tick_helper@button
  7874                           
  7875                           ;mcc_generated_files/mtouch/mtouch_button.c: 330: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 331: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 333:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  7876  16DB  0874               	movf	Button_Tick_helper@button,w
  7877  16DC  3E02               	addlw	2
  7878  16DD  0086               	movwf	6
  7879  16DE  3001               	movlw	1	; select bank2/3
  7880  16DF  0087               	movwf	7
  7881  16E0  3002               	movlw	2
  7882  16E1  0601               	xorwf	1,w
  7883  16E2  1D03               	btfss	3,2
  7884  16E3  0008               	return
  7885                           
  7886                           ;mcc_generated_files/mtouch/mtouch_button.c: 334:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 335:         (button->counter)++;
  7887  16E4  0874               	movf	Button_Tick_helper@button,w
  7888  16E5  3E0A               	addlw	10
  7889  16E6  0086               	movwf	6
  7890  16E7  3001               	movlw	1	; select bank2/3
  7891  16E8  0087               	movwf	7
  7892  16E9  3001               	movlw	1
  7893  16EA  0781               	addwf	1,f
  7894  16EB  3141               	addfsr 1,1
  7895  16EC  1803               	skipnc
  7896  16ED  0A81               	incf	1,f
  7897                           
  7898                           ;mcc_generated_files/mtouch/mtouch_button.c: 336:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  7899  16EE  0874               	movf	Button_Tick_helper@button,w
  7900  16EF  3E0A               	addlw	10
  7901  16F0  0086               	movwf	6
  7902  16F1  3001               	movlw	1	; select bank2/3
  7903  16F2  0087               	movwf	7
  7904  16F3  0016               	moviw fsr1++
  7905  16F4  0401               	iorwf	1,w
  7906  16F5  1D03               	btfss	3,2
  7907  16F6  0008               	return
  7908                           
  7909                           ;mcc_generated_files/mtouch/mtouch_button.c: 337:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 338:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  7910  16F7  0874               	movf	Button_Tick_helper@button,w
  7911  16F8  3E0A               	addlw	10
  7912  16F9  0086               	movwf	6
  7913  16FA  3001               	movlw	1	; select bank2/3
  7914  16FB  0087               	movwf	7
  7915  16FC  30FF               	movlw	255
  7916  16FD  3FC0               	movwi [0]fsr1
  7917  16FE  30FF               	movlw	255
  7918  16FF  3FC1               	movwi [1]fsr1
  7919  1700  0008               	return
  7920  1701                     __end_of_Button_Tick_helper:	
  7921                           
  7922                           	psect	text37
  7923  151B                     __ptext37:	
  7924 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  7925 ;; Defined at:
  7926 ;;		line 905 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  sensor          1    4[COMMON] PTR struct .
  7931 ;;		 -> mtouch_sensor(36), 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  1    wreg      void 
  7934 ;; Registers used:
  7935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7941 ;;      Params:         0       0       0       0       0       0       0       0
  7942 ;;      Locals:         1       0       0       0       0       0       0       0
  7943 ;;      Temps:          1       0       0       0       0       0       0       0
  7944 ;;      Totals:         2       0       0       0       0       0       0       0
  7945 ;;Total ram usage:        2 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    5
  7948 ;; This function calls:
  7949 ;;		_Sensor_Sampled_Reset
  7950 ;; This function is called by:
  7951 ;;		_MTOUCH_Initialize
  7952 ;;		_MTOUCH_Service_Mainloop
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           
  7957                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  7958  151B                     _MTOUCH_Sensor_Sampled_ResetAll:	
  7959                           
  7960                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 908:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[4u -1];sensor++)
  7961                           
  7962                           ;incstack = 0
  7963                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  7964  151B  3020               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7965  151C  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7966  151D  0873               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7967  151E  00F4               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  7968  151F                     L2:	
  7969  151F  303B               	movlw	(low ((_mtouch_sensor| (0+256)+27)))& (0+255)
  7970  1520  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7971  1521  0874               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7972  1522  0273               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7973  1523  1C03               	btfss	3,0
  7974  1524  0008               	return
  7975                           
  7976                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 909:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 910:         Sensor_Sampled_Reset(sensor);
  7977  1525  0874               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7978  1526  3193  23D5  3195   	fcall	_Sensor_Sampled_Reset
  7979                           
  7980                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 911:     }
  7981  1529  3009               	movlw	9
  7982  152A  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7983  152B  0873               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7984  152C  07F4               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  7985  152D  2D1F               	goto	L2
  7986  152E                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  7987                           
  7988                           	psect	text38
  7989  13D5                     __ptext38:	
  7990 ;; *************** function _Sensor_Sampled_Reset *****************
  7991 ;; Defined at:
  7992 ;;		line 919 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  sensor          1    wreg     PTR struct .
  7995 ;;		 -> mtouch_sensor(36), 
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  sensor          1    2[COMMON] PTR struct .
  7998 ;;		 -> mtouch_sensor(36), 
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  1    wreg      void 
  8001 ;; Registers used:
  8002 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8008 ;;      Params:         0       0       0       0       0       0       0       0
  8009 ;;      Locals:         1       0       0       0       0       0       0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0       0
  8011 ;;      Totals:         1       0       0       0       0       0       0       0
  8012 ;;Total ram usage:        1 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:    4
  8015 ;; This function calls:
  8016 ;;		Nothing
  8017 ;; This function is called by:
  8018 ;;		_MTOUCH_Sensor_Initialize
  8019 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           
  8024                           ;psect for function _Sensor_Sampled_Reset
  8025  13D5                     _Sensor_Sampled_Reset:	
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8029                           ;Sensor_Sampled_Reset@sensor stored from wreg
  8030  13D5  00F2               	movwf	Sensor_Sampled_Reset@sensor
  8031                           
  8032                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 919: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          920: {;mcc_generated_files/mtouch/mtouch_sensor.c: 921:     sensor->sampled = 0;
  8033  13D6  0872               	movf	Sensor_Sampled_Reset@sensor,w
  8034  13D7  3E08               	addlw	8
  8035  13D8  0086               	movwf	6
  8036  13D9  3001               	movlw	1	; select bank2/3
  8037  13DA  0087               	movwf	7
  8038  13DB  1001               	bcf	1,0
  8039  13DC  0008               	return
  8040  13DD                     __end_of_Sensor_Sampled_Reset:	
  8041                           
  8042                           	psect	text39
  8043  1580                     __ptext39:	
  8044 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  8045 ;; Defined at:
  8046 ;;		line 270 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;  group           1   44[BANK0 ] unsigned char 
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      _Bool 
  8053 ;; Registers used:
  8054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8060 ;;      Params:         0       0       0       0       0       0       0       0
  8061 ;;      Locals:         0       1       0       0       0       0       0       0
  8062 ;;      Temps:          0       1       0       0       0       0       0       0
  8063 ;;      Totals:         0       2       0       0       0       0       0       0
  8064 ;;Total ram usage:        2 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:   10
  8067 ;; This function calls:
  8068 ;;		_Sensor_Service
  8069 ;; This function is called by:
  8070 ;;		_MTOUCH_Service_Mainloop
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           
  8075                           ;psect for function _MTOUCH_Sensor_SampleAll
  8076  1580                     _MTOUCH_Sensor_SampleAll:	
  8077                           
  8078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 272:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 273:     for (group = 0; group < 2u; group++)
  8079                           
  8080                           ;incstack = 0
  8081                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8082  1580  0020               	movlb	0	; select bank0
  8083  1581  01CC               	clrf	MTOUCH_Sensor_SampleAll@group
  8084  1582                     l6122:	
  8085                           
  8086                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 274:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 275:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  8087  1582  084C               	movf	MTOUCH_Sensor_SampleAll@group,w
  8088  1583  318C  24FB  3195   	fcall	_Sensor_Service
  8089  1586  3A00               	xorlw	0
  8090  1587  1903               	skipnz
  8091  1588  2D8B               	goto	l6128
  8092                           
  8093                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 276:             return 0;
  8094  1589  3000               	movlw	0
  8095  158A  0008               	return
  8096  158B                     l6128:	
  8097                           
  8098                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 277:     }
  8099  158B  3001               	movlw	1
  8100  158C  0020               	movlb	0	; select bank0
  8101  158D  00CB               	movwf	??_MTOUCH_Sensor_SampleAll
  8102  158E  084B               	movf	??_MTOUCH_Sensor_SampleAll,w
  8103  158F  07CC               	addwf	MTOUCH_Sensor_SampleAll@group,f
  8104  1590  3002               	movlw	2
  8105  1591  024C               	subwf	MTOUCH_Sensor_SampleAll@group,w
  8106  1592  1C03               	skipc
  8107  1593  2D82               	goto	l6122
  8108                           
  8109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 278:     return 1;
  8110  1594  3001               	movlw	1
  8111  1595  0008               	return
  8112  1596                     __end_of_MTOUCH_Sensor_SampleAll:	
  8113                           
  8114                           	psect	text40
  8115  0CFB                     __ptext40:	
  8116 ;; *************** function _Sensor_Service *****************
  8117 ;; Defined at:
  8118 ;;		line 294 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;  scanGroup       1    wreg     unsigned char 
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  scanGroup       1   39[BANK0 ] unsigned char 
  8123 ;;  sensor_adc2     1   42[BANK0 ] PTR struct .
  8124 ;;		 -> mtouch_sensor(36), 
  8125 ;;  sensor_adc1     1   41[BANK0 ] PTR struct .
  8126 ;;		 -> mtouch_sensor(36), 
  8127 ;;  error           1   40[BANK0 ] enum E2876
  8128 ;; Return value:  Size  Location     Type
  8129 ;;                  1    wreg      enum E2876
  8130 ;; Registers used:
  8131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8132 ;; Tracked objects:
  8133 ;;		On entry : 0/0
  8134 ;;		On exit  : 0/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8137 ;;      Params:         0       0       0       0       0       0       0       0
  8138 ;;      Locals:         0       4       0       0       0       0       0       0
  8139 ;;      Temps:          0       3       0       0       0       0       0       0
  8140 ;;      Totals:         0       7       0       0       0       0       0       0
  8141 ;;Total ram usage:        7 bytes
  8142 ;; Hardware stack levels used:    1
  8143 ;; Hardware stack levels required when called:    9
  8144 ;; This function calls:
  8145 ;;		_Sensor_Acquisition
  8146 ;;		_Sensor_DefaultCallback
  8147 ;;		_Sensor_RawSample_Update
  8148 ;;		_Sensor_isEnabled
  8149 ;;		_Sensor_setSampled
  8150 ;; This function is called by:
  8151 ;;		_MTOUCH_Sensor_SampleAll
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           
  8156                           ;psect for function _Sensor_Service
  8157  0CFB                     _Sensor_Service:	
  8158                           
  8159                           ;incstack = 0
  8160                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8161                           ;Sensor_Service@scanGroup stored from wreg
  8162  0CFB  0020               	movlb	0	; select bank0
  8163  0CFC  00C7               	movwf	Sensor_Service@scanGroup
  8164                           
  8165                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 294: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 295: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 296:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 297:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 299:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  8166  0CFD  0847               	movf	Sensor_Service@scanGroup,w
  8167  0CFE  00C4               	movwf	??_Sensor_Service
  8168  0CFF  01C5               	clrf	??_Sensor_Service+1
  8169  0D00  35C4               	lslf	??_Sensor_Service,f
  8170  0D01  0DC5               	rlf	??_Sensor_Service+1,f
  8171  0D02  3064               	movlw	low (_sensor_scan_group| (0+32768))
  8172  0D03  0744               	addwf	??_Sensor_Service,w
  8173  0D04  0084               	movwf	4
  8174  0D05  3098               	movlw	high (_sensor_scan_group| (0+32768))
  8175  0D06  3D45               	addwfc	??_Sensor_Service+1,w
  8176  0D07  0085               	movwf	5
  8177  0D08  0800               	movf	0,w	;code access
  8178  0D09  00C6               	movwf	??_Sensor_Service+2
  8179  0D0A  0846               	movf	??_Sensor_Service+2,w
  8180  0D0B  00C9               	movwf	Sensor_Service@sensor_adc1
  8181                           
  8182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 300:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  8183  0D0C  0847               	movf	Sensor_Service@scanGroup,w
  8184  0D0D  00C4               	movwf	??_Sensor_Service
  8185  0D0E  01C5               	clrf	??_Sensor_Service+1
  8186  0D0F  35C4               	lslf	??_Sensor_Service,f
  8187  0D10  0DC5               	rlf	??_Sensor_Service+1,f
  8188  0D11  3065               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  8189  0D12  0744               	addwf	??_Sensor_Service,w
  8190  0D13  0084               	movwf	4
  8191  0D14  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  8192  0D15  3D45               	addwfc	??_Sensor_Service+1,w
  8193  0D16  0085               	movwf	5
  8194  0D17  0800               	movf	0,w	;code access
  8195  0D18  00C6               	movwf	??_Sensor_Service+2
  8196  0D19  0846               	movf	??_Sensor_Service+2,w
  8197  0D1A  00CA               	movwf	Sensor_Service@sensor_adc2
  8198                           
  8199                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 302:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  8200  0D1B  084A               	movf	Sensor_Service@sensor_adc2,w
  8201  0D1C  00C4               	movwf	??_Sensor_Service
  8202  0D1D  0844               	movf	??_Sensor_Service,w
  8203  0D1E  00C0               	movwf	Sensor_Acquisition@sensor_adc2
  8204  0D1F  0849               	movf	Sensor_Service@sensor_adc1,w
  8205  0D20  318A  22AB  318C   	fcall	_Sensor_Acquisition
  8206  0D23  0020               	movlb	0	; select bank0
  8207  0D24  00C5               	movwf	??_Sensor_Service+1
  8208  0D25  0845               	movf	??_Sensor_Service+1,w
  8209  0D26  00C8               	movwf	Sensor_Service@error
  8210                           
  8211                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 305:     switch(error)
  8212  0D27  2D64               	goto	l6066
  8213  0D28                     l6048:	
  8214                           
  8215                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 308:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 309:             if(Sensor_isEnabled(sensor_adc1))
  8216  0D28  0849               	movf	Sensor_Service@sensor_adc1,w
  8217  0D29  3194  24E8  318C   	fcall	_Sensor_isEnabled
  8218  0D2C  3A00               	xorlw	0
  8219  0D2D  1903               	skipnz
  8220  0D2E  2D45               	goto	l6056
  8221                           
  8222                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 310:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 316:                     Sensor_RawSample_Update(sensor_adc1);
  8223  0D2F  0020               	movlb	0	; select bank0
  8224  0D30  0849               	movf	Sensor_Service@sensor_adc1,w
  8225  0D31  3197  2728  318C   	fcall	_Sensor_RawSample_Update
  8226                           
  8227                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:                 Sensor_setSampled(sens
      +                          or_adc1);
  8228  0D34  0020               	movlb	0	; select bank0
  8229  0D35  0849               	movf	Sensor_Service@sensor_adc1,w
  8230  0D36  3193  23CD  318C   	fcall	_Sensor_setSampled
  8231                           
  8232                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 318:                 callback_sampled(senso
      +                          r_adc1->sensor);
  8233  0D39  0020               	movlb	0	; select bank0
  8234  0D3A  0849               	movf	Sensor_Service@sensor_adc1,w
  8235  0D3B  0086               	movwf	6
  8236  0D3C  3001               	movlw	1	; select bank2/3
  8237  0D3D  0087               	movwf	7
  8238  0D3E  0801               	movf	1,w
  8239  0D3F  00C4               	movwf	??_Sensor_Service
  8240  0D40  0844               	movf	??_Sensor_Service,w
  8241  0D41  00F2               	movwf	Sensor_DefaultCallback@sensor
  8242  0D42  3193  235C  318C   	fcall	_Sensor_DefaultCallback
  8243  0D45                     l6056:	
  8244                           
  8245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 320:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  8246  0D45  0020               	movlb	0	; select bank0
  8247  0D46  084A               	movf	Sensor_Service@sensor_adc2,w
  8248  0D47  3194  24E8  318C   	fcall	_Sensor_isEnabled
  8249  0D4A  3A00               	xorlw	0
  8250  0D4B  1903               	skipnz
  8251  0D4C  2D87               	goto	l6068
  8252                           
  8253                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 321:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 323:                     Sensor_RawSample_Update(sensor_adc2);
  8254  0D4D  0020               	movlb	0	; select bank0
  8255  0D4E  084A               	movf	Sensor_Service@sensor_adc2,w
  8256  0D4F  3197  2728  318C   	fcall	_Sensor_RawSample_Update
  8257                           
  8258                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 Sensor_setSampled(sens
      +                          or_adc2);
  8259  0D52  0020               	movlb	0	; select bank0
  8260  0D53  084A               	movf	Sensor_Service@sensor_adc2,w
  8261  0D54  3193  23CD  318C   	fcall	_Sensor_setSampled
  8262                           
  8263                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 326:                 callback_sampled(senso
      +                          r_adc2->sensor);
  8264  0D57  0020               	movlb	0	; select bank0
  8265  0D58  084A               	movf	Sensor_Service@sensor_adc2,w
  8266  0D59  0086               	movwf	6
  8267  0D5A  3001               	movlw	1	; select bank2/3
  8268  0D5B  0087               	movwf	7
  8269  0D5C  0801               	movf	1,w
  8270  0D5D  00C4               	movwf	??_Sensor_Service
  8271  0D5E  0844               	movf	??_Sensor_Service,w
  8272  0D5F  00F2               	movwf	Sensor_DefaultCallback@sensor
  8273  0D60  3193  235C  318C   	fcall	_Sensor_DefaultCallback
  8274  0D63  2D87               	goto	l6068
  8275  0D64                     l6066:	
  8276  0D64  0848               	movf	Sensor_Service@error,w
  8277  0D65  00C4               	movwf	??_Sensor_Service
  8278  0D66  01C5               	clrf	??_Sensor_Service+1
  8279  0D67  1BC4               	btfsc	??_Sensor_Service,7
  8280  0D68  03C5               	decf	??_Sensor_Service+1,f
  8281                           
  8282                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  8283                           ; Switch size 1, requested type "simple"
  8284                           ; Number of cases is 2, Range of values is 0 to 255
  8285                           ; switch strategies available:
  8286                           ; Name         Instructions Cycles
  8287                           ; simple_byte            7     4 (average)
  8288                           ; jumptable            260     6 (fixed)
  8289                           ;	Chosen strategy is simple_byte
  8290  0D69  0845               	movf	??_Sensor_Service+1,w
  8291  0D6A  3A00               	xorlw	0	; case 0
  8292  0D6B  1903               	skipnz
  8293  0D6C  2D71               	goto	l6588
  8294  0D6D  3AFF               	xorlw	255	; case 255
  8295  0D6E  1903               	skipnz
  8296  0D6F  2D76               	goto	l6590
  8297  0D70  2D87               	goto	l6068
  8298  0D71                     l6588:	
  8299                           
  8300                           ; Switch size 1, requested type "simple"
  8301                           ; Number of cases is 1, Range of values is 0 to 0
  8302                           ; switch strategies available:
  8303                           ; Name         Instructions Cycles
  8304                           ; simple_byte            4     3 (average)
  8305                           ; direct_byte            8     6 (fixed)
  8306                           ; jumptable            260     6 (fixed)
  8307                           ;	Chosen strategy is simple_byte
  8308  0D71  0844               	movf	??_Sensor_Service,w
  8309  0D72  3A00               	xorlw	0	; case 0
  8310  0D73  1903               	skipnz
  8311  0D74  2D28               	goto	l6048
  8312  0D75  2D87               	goto	l6068
  8313  0D76                     l6590:	
  8314                           
  8315                           ; Switch size 1, requested type "simple"
  8316                           ; Number of cases is 5, Range of values is 251 to 255
  8317                           ; switch strategies available:
  8318                           ; Name         Instructions Cycles
  8319                           ; direct_byte           15     5 (fixed)
  8320                           ; simple_byte           16     9 (average)
  8321                           ; jumptable            263     9 (fixed)
  8322                           ;	Chosen strategy is simple_byte
  8323  0D76  0844               	movf	??_Sensor_Service,w
  8324  0D77  3AFB               	xorlw	251	; case 251
  8325  0D78  1903               	skipnz
  8326  0D79  2D87               	goto	l6068
  8327  0D7A  3A07               	xorlw	7	; case 252
  8328  0D7B  1903               	skipnz
  8329  0D7C  2D87               	goto	l6068
  8330  0D7D  3A01               	xorlw	1	; case 253
  8331  0D7E  1903               	skipnz
  8332  0D7F  2D87               	goto	l6068
  8333  0D80  3A03               	xorlw	3	; case 254
  8334  0D81  1903               	skipnz
  8335  0D82  2D87               	goto	l6068
  8336  0D83  3A01               	xorlw	1	; case 255
  8337  0D84  1903               	skipnz
  8338  0D85  2D87               	goto	l6068
  8339  0D86  2D87               	goto	l6068
  8340  0D87                     l6068:	
  8341                           
  8342                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 339:     return error;
  8343  0D87  0020               	movlb	0	; select bank0
  8344  0D88  0848               	movf	Sensor_Service@error,w
  8345  0D89  0008               	return
  8346  0D8A                     __end_of_Sensor_Service:	
  8347                           
  8348                           	psect	text41
  8349  13CD                     __ptext41:	
  8350 ;; *************** function _Sensor_setSampled *****************
  8351 ;; Defined at:
  8352 ;;		line 924 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;  sensor          1    wreg     PTR struct .
  8355 ;;		 -> mtouch_sensor(36), 
  8356 ;; Auto vars:     Size  Location     Type
  8357 ;;  sensor          1    2[COMMON] PTR struct .
  8358 ;;		 -> mtouch_sensor(36), 
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  1    wreg      void 
  8361 ;; Registers used:
  8362 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8368 ;;      Params:         0       0       0       0       0       0       0       0
  8369 ;;      Locals:         1       0       0       0       0       0       0       0
  8370 ;;      Temps:          0       0       0       0       0       0       0       0
  8371 ;;      Totals:         1       0       0       0       0       0       0       0
  8372 ;;Total ram usage:        1 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:    4
  8375 ;; This function calls:
  8376 ;;		Nothing
  8377 ;; This function is called by:
  8378 ;;		_Sensor_Service
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           
  8383                           ;psect for function _Sensor_setSampled
  8384  13CD                     _Sensor_setSampled:	
  8385                           
  8386                           ;incstack = 0
  8387                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8388                           ;Sensor_setSampled@sensor stored from wreg
  8389  13CD  00F2               	movwf	Sensor_setSampled@sensor
  8390                           
  8391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 924: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 925
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 926:     sensor->sampled = 1;
  8392  13CE  0872               	movf	Sensor_setSampled@sensor,w
  8393  13CF  3E08               	addlw	8
  8394  13D0  0086               	movwf	6
  8395  13D1  3001               	movlw	1	; select bank2/3
  8396  13D2  0087               	movwf	7
  8397  13D3  1401               	bsf	1,0
  8398  13D4  0008               	return
  8399  13D5                     __end_of_Sensor_setSampled:	
  8400                           
  8401                           	psect	text42
  8402  1728                     __ptext42:	
  8403 ;; *************** function _Sensor_RawSample_Update *****************
  8404 ;; Defined at:
  8405 ;;		line 782 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8406 ;; Parameters:    Size  Location     Type
  8407 ;;  sensor          1    wreg     PTR struct .
  8408 ;;		 -> mtouch_sensor(36), 
  8409 ;; Auto vars:     Size  Location     Type
  8410 ;;  sensor          1    8[COMMON] PTR struct .
  8411 ;;		 -> mtouch_sensor(36), 
  8412 ;;  adcIndex        1    7[COMMON] unsigned char 
  8413 ;; Return value:  Size  Location     Type
  8414 ;;                  1    wreg      void 
  8415 ;; Registers used:
  8416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8417 ;; Tracked objects:
  8418 ;;		On entry : 0/0
  8419 ;;		On exit  : 0/0
  8420 ;;		Unchanged: 0/0
  8421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8422 ;;      Params:         0       0       0       0       0       0       0       0
  8423 ;;      Locals:         2       0       0       0       0       0       0       0
  8424 ;;      Temps:          1       0       0       0       0       0       0       0
  8425 ;;      Totals:         3       0       0       0       0       0       0       0
  8426 ;;Total ram usage:        3 bytes
  8427 ;; Hardware stack levels used:    1
  8428 ;; Hardware stack levels required when called:    5
  8429 ;; This function calls:
  8430 ;;		_Sensor_getScanGroupIndex
  8431 ;; This function is called by:
  8432 ;;		_Sensor_Service
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           
  8437                           ;psect for function _Sensor_RawSample_Update
  8438  1728                     _Sensor_RawSample_Update:	
  8439                           
  8440                           ;incstack = 0
  8441                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8442                           ;Sensor_RawSample_Update@sensor stored from wreg
  8443  1728  00F8               	movwf	Sensor_RawSample_Update@sensor
  8444                           
  8445                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 783: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 784:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  8446  1729  0878               	movf	Sensor_RawSample_Update@sensor,w
  8447  172A  3197  27A5  3197   	fcall	_Sensor_getScanGroupIndex
  8448  172D  00F6               	movwf	??_Sensor_RawSample_Update
  8449  172E  0876               	movf	??_Sensor_RawSample_Update,w
  8450  172F  00F7               	movwf	Sensor_RawSample_Update@adcIndex
  8451                           
  8452                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 786:     if (INTCONbits.GIE == (uint8_t)1)
  8453  1730  1F8B               	btfss	11,7	;volatile
  8454  1731  2F42               	goto	l5904
  8455                           
  8456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 787:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 788:         INTCONbits.GIE = (uint8_t)0;
  8457  1732  138B               	bcf	11,7	;volatile
  8458                           
  8459                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  8460  1733  3577               	lslf	Sensor_RawSample_Update@adcIndex,w
  8461  1734  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
  8462  1735  0086               	movwf	6
  8463  1736  0187               	clrf	7
  8464  1737  0878               	movf	Sensor_RawSample_Update@sensor,w
  8465  1738  3E06               	addlw	6
  8466  1739  0084               	movwf	4
  8467  173A  3001               	movlw	1	; select bank2/3
  8468  173B  0085               	movwf	5
  8469  173C  3F40               	moviw [0]fsr1
  8470  173D  3F80               	movwi [0]fsr0
  8471  173E  3F41               	moviw [1]fsr1
  8472  173F  3F81               	movwi [1]fsr0
  8473                           
  8474                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:         INTCONbits.GIE = (uint8_t)1;
  8475  1740  178B               	bsf	11,7	;volatile
  8476                           
  8477                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 791:     }
  8478  1741  0008               	return
  8479  1742                     l5904:	
  8480                           
  8481                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 793:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 794:         sensor->rawSample = packet_sample[adcIndex];
  8482  1742  3577               	lslf	Sensor_RawSample_Update@adcIndex,w
  8483  1743  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
  8484  1744  0086               	movwf	6
  8485  1745  0187               	clrf	7
  8486  1746  0878               	movf	Sensor_RawSample_Update@sensor,w
  8487  1747  3E06               	addlw	6
  8488  1748  0084               	movwf	4
  8489  1749  3001               	movlw	1	; select bank2/3
  8490  174A  0085               	movwf	5
  8491  174B  3F40               	moviw [0]fsr1
  8492  174C  3F80               	movwi [0]fsr0
  8493  174D  3F41               	moviw [1]fsr1
  8494  174E  3F81               	movwi [1]fsr0
  8495  174F  0008               	return
  8496  1750                     __end_of_Sensor_RawSample_Update:	
  8497                           
  8498                           	psect	text43
  8499  135C                     __ptext43:	
  8500 ;; *************** function _Sensor_DefaultCallback *****************
  8501 ;; Defined at:
  8502 ;;		line 803 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  sensor          1    2[COMMON] enum E2871
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;		None
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  1    wreg      void 
  8509 ;; Registers used:
  8510 ;;		None
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8516 ;;      Params:         1       0       0       0       0       0       0       0
  8517 ;;      Locals:         0       0       0       0       0       0       0       0
  8518 ;;      Temps:          0       0       0       0       0       0       0       0
  8519 ;;      Totals:         1       0       0       0       0       0       0       0
  8520 ;;Total ram usage:        1 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    4
  8523 ;; This function calls:
  8524 ;;		Nothing
  8525 ;; This function is called by:
  8526 ;;		_Sensor_Service
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           
  8531                           ;psect for function _Sensor_DefaultCallback
  8532  135C                     _Sensor_DefaultCallback:	
  8533                           
  8534                           ;incstack = 0
  8535                           ; Regs used in _Sensor_DefaultCallback: []
  8536  135C  0008               	return
  8537  135D                     __end_of_Sensor_DefaultCallback:	
  8538                           
  8539                           	psect	text44
  8540  0AAB                     __ptext44:	
  8541 ;; *************** function _Sensor_Acquisition *****************
  8542 ;; Defined at:
  8543 ;;		line 360 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;  sensor_adc1     1    wreg     PTR struct .
  8546 ;;		 -> mtouch_sensor(36), 
  8547 ;;  sensor_adc2     1   32[BANK0 ] PTR struct .
  8548 ;;		 -> mtouch_sensor(36), 
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;  sensor_adc1     1   35[BANK0 ] PTR struct .
  8551 ;;		 -> mtouch_sensor(36), 
  8552 ;;  retry           1   34[BANK0 ] unsigned char 
  8553 ;; Return value:  Size  Location     Type
  8554 ;;                  1    wreg      enum E2876
  8555 ;; Registers used:
  8556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8557 ;; Tracked objects:
  8558 ;;		On entry : 0/0
  8559 ;;		On exit  : 0/0
  8560 ;;		Unchanged: 0/0
  8561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8562 ;;      Params:         0       1       0       0       0       0       0       0
  8563 ;;      Locals:         0       2       0       0       0       0       0       0
  8564 ;;      Temps:          0       1       0       0       0       0       0       0
  8565 ;;      Totals:         0       4       0       0       0       0       0       0
  8566 ;;Total ram usage:        4 bytes
  8567 ;; Hardware stack levels used:    1
  8568 ;; Hardware stack levels required when called:    8
  8569 ;; This function calls:
  8570 ;;		_Sensor_Acq_ExecutePacket
  8571 ;;		_Sensor_Scanfrequency_Evaluation
  8572 ;;		_Sensor_isActive
  8573 ;;		_Sensor_isCalibrated
  8574 ;;		_Sensor_postAcquisitionProcess
  8575 ;; This function is called by:
  8576 ;;		_Sensor_Service
  8577 ;; This function uses a non-reentrant model
  8578 ;;
  8579                           
  8580                           
  8581                           ;psect for function _Sensor_Acquisition
  8582  0AAB                     _Sensor_Acquisition:	
  8583                           
  8584                           ;incstack = 0
  8585                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8586                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  8587  0AAB  0020               	movlb	0	; select bank0
  8588  0AAC  00C3               	movwf	Sensor_Acquisition@sensor_adc1
  8589                           
  8590                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 361: {;mcc_generated_files/mtouch/mtouch_sensor.c: 362:     
      +                          uint8_t retry = (uint8_t)5;
  8591  0AAD  3005               	movlw	5
  8592  0AAE  00C1               	movwf	??_Sensor_Acquisition
  8593  0AAF  0841               	movf	??_Sensor_Acquisition,w
  8594  0AB0  00C2               	movwf	Sensor_Acquisition@retry
  8595                           
  8596                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 365:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  8597  0AB1  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8598  0AB2  1D03               	btfss	3,2
  8599  0AB3  2AC1               	goto	l5868
  8600  0AB4  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8601  0AB5  1D03               	btfss	3,2
  8602  0AB6  2AC1               	goto	l5868
  8603                           
  8604                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 366:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 367:         return MTOUCH_SENSOR_ERROR_invalid_index;
  8605  0AB7  30FF               	movlw	255
  8606  0AB8  0008               	return
  8607  0AB9                     l5862:	
  8608                           
  8609                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 376:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 377:         retry--;
  8610  0AB9  3001               	movlw	1
  8611  0ABA  0020               	movlb	0	; select bank0
  8612  0ABB  02C2               	subwf	Sensor_Acquisition@retry,f
  8613                           
  8614                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:         if(retry == 0)
  8615  0ABC  0842               	movf	Sensor_Acquisition@retry,w
  8616  0ABD  1D03               	btfss	3,2
  8617  0ABE  2AC1               	goto	l5868
  8618                           
  8619                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 379:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 380:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8620  0ABF  30FC               	movlw	252
  8621  0AC0  0008               	return
  8622  0AC1                     l5868:	
  8623                           
  8624                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 375:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  8625  0AC1  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8626  0AC2  00C1               	movwf	??_Sensor_Acquisition
  8627  0AC3  0841               	movf	??_Sensor_Acquisition,w
  8628  0AC4  00A4               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8629  0AC5  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8630  0AC6  3182  228B  318A   	fcall	_Sensor_Acq_ExecutePacket
  8631  0AC9  3A00               	xorlw	0
  8632  0ACA  1D03               	skipz
  8633  0ACB  2AB9               	goto	l5862
  8634                           
  8635                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 384:     if(sensor_adc1 != ((void*)0))
  8636  0ACC  0020               	movlb	0	; select bank0
  8637  0ACD  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8638  0ACE  1903               	btfsc	3,2
  8639  0ACF  2AD4               	goto	l5874
  8640                           
  8641                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 386:         Sensor_postAcquisitionProcess(sensor_adc1);
  8642  0AD0  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8643  0AD1  3189  2134  318A   	fcall	_Sensor_postAcquisitionProcess
  8644  0AD4                     l5874:	
  8645                           
  8646                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 389:     if(sensor_adc2 !=((void*)0))
  8647  0AD4  0020               	movlb	0	; select bank0
  8648  0AD5  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8649  0AD6  1903               	btfsc	3,2
  8650  0AD7  2ADC               	goto	l5878
  8651                           
  8652                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 391:         Sensor_postAcquisitionProcess(sensor_adc2);
  8653  0AD8  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8654  0AD9  3189  2134  318A   	fcall	_Sensor_postAcquisitionProcess
  8655  0ADC                     l5878:	
  8656                           
  8657                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 394:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  8658  0ADC  0020               	movlb	0	; select bank0
  8659  0ADD  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8660  0ADE  3194  242D  318A   	fcall	_Sensor_isActive
  8661  0AE1  3A00               	xorlw	0
  8662  0AE2  1903               	skipnz
  8663  0AE3  2AEC               	goto	l5882
  8664  0AE4  0020               	movlb	0	; select bank0
  8665  0AE5  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8666  0AE6  3193  23EE  318A   	fcall	_Sensor_isCalibrated
  8667  0AE9  3A00               	xorlw	0
  8668  0AEA  1D03               	skipz
  8669  0AEB  2AFC               	goto	l5886
  8670  0AEC                     l5882:	
  8671  0AEC  0020               	movlb	0	; select bank0
  8672  0AED  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8673  0AEE  3194  242D  318A   	fcall	_Sensor_isActive
  8674  0AF1  3A00               	xorlw	0
  8675  0AF2  1903               	skipnz
  8676  0AF3  2B05               	goto	l5890
  8677  0AF4  0020               	movlb	0	; select bank0
  8678  0AF5  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8679  0AF6  3193  23EE  318A   	fcall	_Sensor_isCalibrated
  8680  0AF9  3A00               	xorlw	0
  8681  0AFA  1903               	skipnz
  8682  0AFB  2B05               	goto	l5890
  8683  0AFC                     l5886:	
  8684                           
  8685                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 397:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  8686  0AFC  0020               	movlb	0	; select bank0
  8687  0AFD  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  8688  0AFE  00C1               	movwf	??_Sensor_Acquisition
  8689  0AFF  0841               	movf	??_Sensor_Acquisition,w
  8690  0B00  00B3               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  8691  0B01  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  8692  0B02  318B  2369         	fcall	_Sensor_Scanfrequency_Evaluation
  8693  0B04  0008               	return
  8694  0B05                     l5890:	
  8695                           
  8696                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 400:     return MTOUCH_SENSOR_ERROR_none;
  8697  0B05  3000               	movlw	0
  8698  0B06  0008               	return
  8699  0B07                     __end_of_Sensor_Acquisition:	
  8700                           
  8701                           	psect	text45
  8702  0934                     __ptext45:	
  8703 ;; *************** function _Sensor_postAcquisitionProcess *****************
  8704 ;; Defined at:
  8705 ;;		line 403 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;  sensor          1    wreg     PTR struct .
  8708 ;;		 -> mtouch_sensor(36), 
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;  sensor          1    3[BANK0 ] PTR struct .
  8711 ;;		 -> mtouch_sensor(36), 
  8712 ;;  deviation       2    1[BANK0 ] unsigned short 
  8713 ;;  adcIndex        1    0[BANK0 ] unsigned char 
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      void 
  8716 ;; Registers used:
  8717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8723 ;;      Params:         0       0       0       0       0       0       0       0
  8724 ;;      Locals:         0       4       0       0       0       0       0       0
  8725 ;;      Temps:          1       0       0       0       0       0       0       0
  8726 ;;      Totals:         1       4       0       0       0       0       0       0
  8727 ;;Total ram usage:        5 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    5
  8730 ;; This function calls:
  8731 ;;		_Sensor_getScanGroupIndex
  8732 ;;		_Sensor_isEnabled
  8733 ;;		_Sensor_setActive
  8734 ;;		_Sensor_setInactive
  8735 ;;		_abs
  8736 ;; This function is called by:
  8737 ;;		_Sensor_Acquisition
  8738 ;; This function uses a non-reentrant model
  8739 ;;
  8740                           
  8741                           
  8742                           ;psect for function _Sensor_postAcquisitionProcess
  8743  0934                     _Sensor_postAcquisitionProcess:	
  8744                           
  8745                           ;incstack = 0
  8746                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8747                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  8748  0934  0020               	movlb	0	; select bank0
  8749  0935  00A3               	movwf	Sensor_postAcquisitionProcess@sensor
  8750                           
  8751                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 403: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 404: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 405:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 406:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  8752  0936  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8753  0937  3197  27A5  3189   	fcall	_Sensor_getScanGroupIndex
  8754  093A  00F6               	movwf	??_Sensor_postAcquisitionProcess
  8755  093B  0876               	movf	??_Sensor_postAcquisitionProcess,w
  8756  093C  0020               	movlb	0	; select bank0
  8757  093D  00A0               	movwf	Sensor_postAcquisitionProcess@adcIndex
  8758                           
  8759                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     if(Sensor_isEnabled(sensor))
  8760  093E  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8761  093F  3194  24E8  3189   	fcall	_Sensor_isEnabled
  8762  0942  3A00               	xorlw	0
  8763  0943  1903               	skipnz
  8764  0944  295F               	goto	l5756
  8765                           
  8766                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  8767  0945  0020               	movlb	0	; select bank0
  8768  0946  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8769  0947  3E06               	addlw	6
  8770  0948  0086               	movwf	6
  8771  0949  3001               	movlw	1	; select bank2/3
  8772  094A  0087               	movwf	7
  8773  094B  3520               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  8774  094C  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
  8775  094D  0084               	movwf	4
  8776  094E  0185               	clrf	5
  8777  094F  3F40               	moviw [0]fsr1
  8778  0950  0200               	subwf	0,w
  8779  0951  00F2               	movwf	abs@a
  8780  0952  3101               	addfsr 0,1
  8781  0953  3F41               	moviw [1]fsr1
  8782  0954  3B00               	subwfb	0,w
  8783  0955  00F3               	movwf	abs@a+1
  8784  0956  3195  25AD  3189   	fcall	_abs
  8785  0959  0873               	movf	?_abs+1,w
  8786  095A  0020               	movlb	0	; select bank0
  8787  095B  00A2               	movwf	Sensor_postAcquisitionProcess@deviation+1
  8788  095C  0872               	movf	?_abs,w
  8789  095D  00A1               	movwf	Sensor_postAcquisitionProcess@deviation
  8790  095E  2962               	goto	l5758
  8791  095F                     l5756:	
  8792                           
  8793                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 411:         deviation = 0;
  8794  095F  0020               	movlb	0	; select bank0
  8795  0960  01A1               	clrf	Sensor_postAcquisitionProcess@deviation
  8796  0961  01A2               	clrf	Sensor_postAcquisitionProcess@deviation+1
  8797  0962                     l5758:	
  8798                           
  8799                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 413:     if(deviation > 100u)
  8800  0962  3000               	movlw	0
  8801  0963  0222               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  8802  0964  3065               	movlw	101
  8803  0965  1903               	skipnz
  8804  0966  0221               	subwf	Sensor_postAcquisitionProcess@deviation,w
  8805  0967  1C03               	skipc
  8806  0968  296D               	goto	l5762
  8807                           
  8808                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 414:         Sensor_setActive(sensor);
  8809  0969  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8810  096A  3193  23BD         	fcall	_Sensor_setActive
  8811  096C  0008               	return
  8812  096D                     l5762:	
  8813                           
  8814                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 416:         Sensor_setInactive(sensor);
  8815  096D  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  8816  096E  3193  23C5         	fcall	_Sensor_setInactive
  8817  0970  0008               	return
  8818  0971                     __end_of_Sensor_postAcquisitionProcess:	
  8819                           
  8820                           	psect	text46
  8821  13C5                     __ptext46:	
  8822 ;; *************** function _Sensor_setInactive *****************
  8823 ;; Defined at:
  8824 ;;		line 840 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8825 ;; Parameters:    Size  Location     Type
  8826 ;;  sensor          1    wreg     PTR struct .
  8827 ;;		 -> mtouch_sensor(36), 
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;  sensor          1    2[COMMON] PTR struct .
  8830 ;;		 -> mtouch_sensor(36), 
  8831 ;; Return value:  Size  Location     Type
  8832 ;;                  1    wreg      void 
  8833 ;; Registers used:
  8834 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8835 ;; Tracked objects:
  8836 ;;		On entry : 0/0
  8837 ;;		On exit  : 0/0
  8838 ;;		Unchanged: 0/0
  8839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8840 ;;      Params:         0       0       0       0       0       0       0       0
  8841 ;;      Locals:         1       0       0       0       0       0       0       0
  8842 ;;      Temps:          0       0       0       0       0       0       0       0
  8843 ;;      Totals:         1       0       0       0       0       0       0       0
  8844 ;;Total ram usage:        1 bytes
  8845 ;; Hardware stack levels used:    1
  8846 ;; Hardware stack levels required when called:    4
  8847 ;; This function calls:
  8848 ;;		Nothing
  8849 ;; This function is called by:
  8850 ;;		_Sensor_postAcquisitionProcess
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           
  8855                           ;psect for function _Sensor_setInactive
  8856  13C5                     _Sensor_setInactive:	
  8857                           
  8858                           ;incstack = 0
  8859                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8860                           ;Sensor_setInactive@sensor stored from wreg
  8861  13C5  00F2               	movwf	Sensor_setInactive@sensor
  8862                           
  8863                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 840: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 84
      +                          1: {;mcc_generated_files/mtouch/mtouch_sensor.c: 842:     sensor->active = 0;
  8864  13C6  0872               	movf	Sensor_setInactive@sensor,w
  8865  13C7  3E08               	addlw	8
  8866  13C8  0086               	movwf	6
  8867  13C9  3001               	movlw	1	; select bank2/3
  8868  13CA  0087               	movwf	7
  8869  13CB  1081               	bcf	1,1
  8870  13CC  0008               	return
  8871  13CD                     __end_of_Sensor_setInactive:	
  8872                           
  8873                           	psect	text47
  8874  13BD                     __ptext47:	
  8875 ;; *************** function _Sensor_setActive *****************
  8876 ;; Defined at:
  8877 ;;		line 835 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;  sensor          1    wreg     PTR struct .
  8880 ;;		 -> mtouch_sensor(36), 
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  sensor          1    2[COMMON] PTR struct .
  8883 ;;		 -> mtouch_sensor(36), 
  8884 ;; Return value:  Size  Location     Type
  8885 ;;                  1    wreg      void 
  8886 ;; Registers used:
  8887 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8888 ;; Tracked objects:
  8889 ;;		On entry : 0/0
  8890 ;;		On exit  : 0/0
  8891 ;;		Unchanged: 0/0
  8892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8893 ;;      Params:         0       0       0       0       0       0       0       0
  8894 ;;      Locals:         1       0       0       0       0       0       0       0
  8895 ;;      Temps:          0       0       0       0       0       0       0       0
  8896 ;;      Totals:         1       0       0       0       0       0       0       0
  8897 ;;Total ram usage:        1 bytes
  8898 ;; Hardware stack levels used:    1
  8899 ;; Hardware stack levels required when called:    4
  8900 ;; This function calls:
  8901 ;;		Nothing
  8902 ;; This function is called by:
  8903 ;;		_Sensor_postAcquisitionProcess
  8904 ;; This function uses a non-reentrant model
  8905 ;;
  8906                           
  8907                           
  8908                           ;psect for function _Sensor_setActive
  8909  13BD                     _Sensor_setActive:	
  8910                           
  8911                           ;incstack = 0
  8912                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8913                           ;Sensor_setActive@sensor stored from wreg
  8914  13BD  00F2               	movwf	Sensor_setActive@sensor
  8915                           
  8916                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 835: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 836:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 837:     sensor->active = 1;
  8917  13BE  0872               	movf	Sensor_setActive@sensor,w
  8918  13BF  3E08               	addlw	8
  8919  13C0  0086               	movwf	6
  8920  13C1  3001               	movlw	1	; select bank2/3
  8921  13C2  0087               	movwf	7
  8922  13C3  1481               	bsf	1,1
  8923  13C4  0008               	return
  8924  13C5                     __end_of_Sensor_setActive:	
  8925                           
  8926                           	psect	text48
  8927  0B69                     __ptext48:	
  8928 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  8929 ;; Defined at:
  8930 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;  sensor_adc1     1    wreg     PTR struct .
  8933 ;;		 -> mtouch_sensor(36), 
  8934 ;;  sensor_adc2     1   19[BANK0 ] PTR struct .
  8935 ;;		 -> mtouch_sensor(36), 
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;  sensor_adc1     1   22[BANK0 ] PTR struct .
  8938 ;;		 -> mtouch_sensor(36), 
  8939 ;;  best_packet_    4   27[BANK0 ] unsigned short [2]
  8940 ;;  packet_noise    2   23[BANK0 ] unsigned short 
  8941 ;;  i               1   31[BANK0 ] unsigned char 
  8942 ;;  retry           1   26[BANK0 ] unsigned char 
  8943 ;;  best_sample_    1   25[BANK0 ] unsigned char 
  8944 ;; Return value:  Size  Location     Type
  8945 ;;                  1    wreg      enum E2876
  8946 ;; Registers used:
  8947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8948 ;; Tracked objects:
  8949 ;;		On entry : 0/0
  8950 ;;		On exit  : 0/0
  8951 ;;		Unchanged: 0/0
  8952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8953 ;;      Params:         0       1       0       0       0       0       0       0
  8954 ;;      Locals:         0      10       0       0       0       0       0       0
  8955 ;;      Temps:          0       2       0       0       0       0       0       0
  8956 ;;      Totals:         0      13       0       0       0       0       0       0
  8957 ;;Total ram usage:       13 bytes
  8958 ;; Hardware stack levels used:    1
  8959 ;; Hardware stack levels required when called:    7
  8960 ;; This function calls:
  8961 ;;		_Sensor_Acq_ExecutePacket
  8962 ;; This function is called by:
  8963 ;;		_Sensor_Acquisition
  8964 ;; This function uses a non-reentrant model
  8965 ;;
  8966                           
  8967                           
  8968                           ;psect for function _Sensor_Scanfrequency_Evaluation
  8969  0B69                     _Sensor_Scanfrequency_Evaluation:	
  8970                           
  8971                           ;incstack = 0
  8972                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8973                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  8974  0B69  0020               	movlb	0	; select bank0
  8975  0B6A  00B6               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  8976                           
  8977                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 718: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 719:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 720:     const uint8
      +                          _t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/mtouch_sensor.c: 721: 
      +                              mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_files/mtouch/mtouch_sens
      +                          or.c: 722:     mtouch_sensor_sampleperiod_t best_sample_period;
  8978  0B6B  0860               	movf	_packet_noise+1,w
  8979  0B6C  00B5               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  8980  0B6D  085F               	movf	_packet_noise,w
  8981  0B6E  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  8982  0B6F  36B5               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8983  0B70  0CB4               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8984  0B71  36B5               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8985  0B72  0CB4               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8986  0B73  085F               	movf	_packet_noise,w
  8987  0B74  0734               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  8988  0B75  00B7               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8989  0B76  0860               	movf	_packet_noise+1,w
  8990  0B77  3D35               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  8991  0B78  00B8               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8992                           
  8993                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 727:     best_sample_period = sample_period
      +                          ;
  8994  0B79  086F               	movf	_sample_period,w
  8995  0B7A  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  8996  0B7B  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8997  0B7C  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8998                           
  8999                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  9000  0B7D  0856               	movf	_packet_sample+1,w
  9001  0B7E  00BC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  9002  0B7F  0855               	movf	_packet_sample,w
  9003  0B80  00BB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  9004                           
  9005                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 729:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  9006  0B81  0858               	movf	_packet_sample+3,w
  9007  0B82  00BE               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  9008  0B83  0857               	movf	_packet_sample+2,w
  9009  0B84  00BD               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  9010                           
  9011                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 731:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  9012  0B85  01BF               	clrf	Sensor_Scanfrequency_Evaluation@i
  9013  0B86                     l5778:	
  9014                           
  9015                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 732:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 733:         sample_period += frequency_hop[i];
  9016  0B86  083F               	movf	Sensor_Scanfrequency_Evaluation@i,w
  9017  0B87  3E0F               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  9018  0B88  0084               	movwf	4
  9019  0B89  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  9020  0B8A  1803               	skipnc
  9021  0B8B  3E01               	addlw	1
  9022  0B8C  0085               	movwf	5
  9023  0B8D  0800               	movf	0,w	;code access
  9024  0B8E  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9025  0B8F  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9026  0B90  07EF               	addwf	_sample_period,f
  9027                           
  9028                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 734:         if(sample_period >= 255)
  9029  0B91  0A6F               	incf	_sample_period,w
  9030  0B92  1D03               	btfss	3,2
  9031  0B93  2B97               	goto	l5784
  9032                           
  9033                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 735:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 736:             sample_period-=((mtouch_sensor_sampleperiod_t)255);
  9034  0B94  30FF               	movlw	255
  9035  0B95  02EF               	subwf	_sample_period,f
  9036  0B96  2B9B               	goto	l5786
  9037  0B97                     l5784:	
  9038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 738:         }
  9039                           
  9040                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 737:             sample_period+=((mtouch_se
      +                          nsor_sampleperiod_t)(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_t
      +                          ime_t)110);
  9041                           
  9042  0B97  30AE               	movlw	174
  9043  0B98  026F               	subwf	_sample_period,w
  9044  0B99  1803               	skipnc
  9045  0B9A  2B9F               	goto	l5788
  9046  0B9B                     l5786:	
  9047                           
  9048                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 740:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 741:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  9049  0B9B  30AE               	movlw	174
  9050  0B9C  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9051  0B9D  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9052  0B9E  07EF               	addwf	_sample_period,f
  9053  0B9F                     l5788:	
  9054                           
  9055                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:         retry = (uint8_t)5;
  9056  0B9F  3005               	movlw	5
  9057  0BA0  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9058  0BA1  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9059  0BA2  00BA               	movwf	Sensor_Scanfrequency_Evaluation@retry
  9060  0BA3                     l5796:	
  9061                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 746:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  9062                           
  9063                           
  9064                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 746:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  9065  0BA3  0833               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  9066  0BA4  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9067  0BA5  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9068  0BA6  00A4               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  9069  0BA7  0836               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  9070  0BA8  3182  228B  318B   	fcall	_Sensor_Acq_ExecutePacket
  9071  0BAB  3A00               	xorlw	0
  9072  0BAC  1903               	btfsc	3,2
  9073  0BAD  2BB6               	goto	l5798
  9074                           
  9075                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 748:             retry--;
  9076  0BAE  3001               	movlw	1
  9077  0BAF  0020               	movlb	0	; select bank0
  9078  0BB0  02BA               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  9079                           
  9080                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 749:             if(retry == 0)
  9081  0BB1  083A               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  9082  0BB2  1D03               	btfss	3,2
  9083  0BB3  2BA3               	goto	l5796
  9084                           
  9085                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 751:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  9086  0BB4  30FC               	movlw	252
  9087  0BB5  0008               	return
  9088  0BB6                     l5798:	
  9089                           
  9090                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:         if(packet_noise_Max < packet_n
      +                          oise)
  9091  0BB6  0020               	movlb	0	; select bank0
  9092  0BB7  0860               	movf	_packet_noise+1,w
  9093  0BB8  0238               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  9094  0BB9  1D03               	skipz
  9095  0BBA  2BBD               	goto	u4115
  9096  0BBB  085F               	movf	_packet_noise,w
  9097  0BBC  0237               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  9098  0BBD                     u4115:	
  9099  0BBD  1803               	skipnc
  9100  0BBE  2BCF               	goto	l5802
  9101                           
  9102                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             packet_noise_Max = packet_noise;
  9103  0BBF  0860               	movf	_packet_noise+1,w
  9104  0BC0  00B8               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  9105  0BC1  085F               	movf	_packet_noise,w
  9106  0BC2  00B7               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  9107                           
  9108                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:             best_sample_period = sampl
      +                          e_period;
  9109  0BC3  086F               	movf	_sample_period,w
  9110  0BC4  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9111  0BC5  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9112  0BC6  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  9113                           
  9114                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 759:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  9115  0BC7  0856               	movf	_packet_sample+1,w
  9116  0BC8  00BC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  9117  0BC9  0855               	movf	_packet_sample,w
  9118  0BCA  00BB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  9119                           
  9120                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  9121  0BCB  0858               	movf	_packet_sample+3,w
  9122  0BCC  00BE               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  9123  0BCD  0857               	movf	_packet_sample+2,w
  9124  0BCE  00BD               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  9125  0BCF                     l5802:	
  9126                           
  9127                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:     }
  9128  0BCF  3001               	movlw	1
  9129  0BD0  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9130  0BD1  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9131  0BD2  07BF               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  9132  0BD3  3005               	movlw	5
  9133  0BD4  023F               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  9134  0BD5  1C03               	skipc
  9135  0BD6  2B86               	goto	l5778
  9136                           
  9137                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:     sample_period = best_sample_period
      +                          ;
  9138  0BD7  0839               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  9139  0BD8  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  9140  0BD9  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9141  0BDA  00EF               	movwf	_sample_period
  9142                           
  9143                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  9144  0BDB  083C               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  9145  0BDC  00D6               	movwf	_packet_sample+1
  9146  0BDD  083B               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  9147  0BDE  00D5               	movwf	_packet_sample
  9148                           
  9149                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  9150  0BDF  083E               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  9151  0BE0  00D8               	movwf	_packet_sample+3
  9152  0BE1  083D               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  9153  0BE2  00D7               	movwf	_packet_sample+2
  9154                           
  9155                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 768:     return MTOUCH_SENSOR_ERROR_none;
  9156  0BE3  3000               	movlw	0
  9157  0BE4  0008               	return
  9158  0BE5                     __end_of_Sensor_Scanfrequency_Evaluation:	
  9159                           
  9160                           	psect	text49
  9161  028B                     __ptext49:	
  9162 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  9163 ;; Defined at:
  9164 ;;		line 455 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9165 ;; Parameters:    Size  Location     Type
  9166 ;;  sensor_adc1     1    wreg     PTR struct .
  9167 ;;		 -> mtouch_sensor(36), 
  9168 ;;  sensor_adc2     1    4[BANK0 ] PTR struct .
  9169 ;;		 -> mtouch_sensor(36), 
  9170 ;; Auto vars:     Size  Location     Type
  9171 ;;  sensor_adc1     1   18[BANK0 ] PTR struct .
  9172 ;;		 -> mtouch_sensor(36), 
  9173 ;;  last_b          2   15[BANK0 ] unsigned short 
  9174 ;;  last_a          2   13[BANK0 ] unsigned short 
  9175 ;;  packet_count    1   17[BANK0 ] unsigned char 
  9176 ;;  activeSensor    1   12[BANK0 ] unsigned char 
  9177 ;;  ADxIF_flag      1   11[BANK0 ] unsigned char 
  9178 ;;  sensor2Force    1   10[BANK0 ] unsigned char 
  9179 ;;  sensor1Force    1    9[BANK0 ] unsigned char 
  9180 ;;  AD2CON2_temp    1    8[BANK0 ] unsigned char 
  9181 ;;  AD1CON2_temp    1    7[BANK0 ] unsigned char 
  9182 ;;  ADCOMCON_tem    1    6[BANK0 ] unsigned char 
  9183 ;; Return value:  Size  Location     Type
  9184 ;;                  1    wreg      enum E2876
  9185 ;; Registers used:
  9186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9187 ;; Tracked objects:
  9188 ;;		On entry : 0/0
  9189 ;;		On exit  : 0/0
  9190 ;;		Unchanged: 0/0
  9191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9192 ;;      Params:         0       1       0       0       0       0       0       0
  9193 ;;      Locals:         0      13       0       0       0       0       0       0
  9194 ;;      Temps:          0       1       0       0       0       0       0       0
  9195 ;;      Totals:         0      15       0       0       0       0       0       0
  9196 ;;Total ram usage:       15 bytes
  9197 ;; Hardware stack levels used:    1
  9198 ;; Hardware stack levels required when called:    6
  9199 ;; This function calls:
  9200 ;;		_MTOUCH_Sensor_Scan_Initialize
  9201 ;;		_Sensor_autoCalibration
  9202 ;;		_Sensor_isActive
  9203 ;;		_Sensor_isCalibrated
  9204 ;;		_Sensor_isEnabled
  9205 ;;		_Sensor_loadADCSettings
  9206 ;;		_TMR2_LoadPeriodRegister
  9207 ;;		_TMR2_StartTimer
  9208 ;;		_TMR2_StopTimer
  9209 ;;		_abs
  9210 ;; This function is called by:
  9211 ;;		_Sensor_Acquisition
  9212 ;;		_Sensor_Scanfrequency_Evaluation
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           
  9217                           ;psect for function _Sensor_Acq_ExecutePacket
  9218  028B                     _Sensor_Acq_ExecutePacket:	
  9219                           
  9220                           ;incstack = 0
  9221                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9222                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  9223  028B  0020               	movlb	0	; select bank0
  9224  028C  00B2               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  9225                           
  9226                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 460:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  9227  028D  01AD               	clrf	Sensor_Acq_ExecutePacket@last_a
  9228  028E  01AE               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  9229                           
  9230                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  9231  028F  01AF               	clrf	Sensor_Acq_ExecutePacket@last_b
  9232  0290  01B0               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  9233                           
  9234                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 462:     uint8_t activeSensor = 0;
  9235  0291  01AC               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  9236                           
  9237                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 464:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 465:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 471:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  9238  0292  01A9               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  9239  0293  01AA               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  9240                           
  9241                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 472:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  9242  0294  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9243  0295  1903               	btfsc	3,2
  9244  0296  2AD1               	goto	l5550
  9245  0297  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9246  0298  1903               	btfsc	3,2
  9247  0299  2AD1               	goto	l5550
  9248                           
  9249                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 473:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 474:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  9250  029A  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9251  029B  3E08               	addlw	8
  9252  029C  0086               	movwf	6
  9253  029D  3001               	movlw	1	; select bank2/3
  9254  029E  0087               	movwf	7
  9255  029F  1981               	btfsc	1,3
  9256  02A0  2AB1               	goto	l5532
  9257  02A1  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9258  02A2  3E08               	addlw	8
  9259  02A3  0086               	movwf	6
  9260  02A4  3001               	movlw	1	; select bank2/3
  9261  02A5  0087               	movwf	7
  9262  02A6  1D81               	btfss	1,3
  9263  02A7  2AB1               	goto	l5532
  9264                           
  9265                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 475:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 476:             sensor_adc1->enabled = 1;
  9266  02A8  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9267  02A9  3E08               	addlw	8
  9268  02AA  0086               	movwf	6
  9269  02AB  3001               	movlw	1	; select bank2/3
  9270  02AC  0087               	movwf	7
  9271  02AD  1581               	bsf	1,3
  9272                           
  9273                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:             sensor1ForceEnabled = 1;
  9274  02AE  01A9               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  9275  02AF  0AA9               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  9276                           
  9277                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:         }
  9278  02B0  2AE6               	goto	l5574
  9279  02B1                     l5532:	
  9280  02B1  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9281  02B2  3E08               	addlw	8
  9282  02B3  0086               	movwf	6
  9283  02B4  3001               	movlw	1	; select bank2/3
  9284  02B5  0087               	movwf	7
  9285  02B6  1981               	btfsc	1,3
  9286  02B7  2AC8               	goto	l5540
  9287  02B8  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9288  02B9  3E08               	addlw	8
  9289  02BA  0086               	movwf	6
  9290  02BB  3001               	movlw	1	; select bank2/3
  9291  02BC  0087               	movwf	7
  9292  02BD  1D81               	btfss	1,3
  9293  02BE  2AC8               	goto	l5540
  9294                           
  9295                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 481:             sensor_adc2->enabled = 1;
  9296  02BF  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9297  02C0  3E08               	addlw	8
  9298  02C1  0086               	movwf	6
  9299  02C2  3001               	movlw	1	; select bank2/3
  9300  02C3  0087               	movwf	7
  9301  02C4  1581               	bsf	1,3
  9302                           
  9303                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:             sensor2ForceEnabled = 1;
  9304  02C5  01AA               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  9305  02C6  0AAA               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  9306                           
  9307                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 483:         }
  9308  02C7  2AE6               	goto	l5574
  9309  02C8                     l5540:	
  9310  02C8  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9311  02C9  3E08               	addlw	8
  9312  02CA  0086               	movwf	6
  9313  02CB  3001               	movlw	1	; select bank2/3
  9314  02CC  0087               	movwf	7
  9315  02CD  1981               	btfsc	1,3
  9316  02CE  2AE6               	goto	l5574
  9317  02CF                     l5542:	
  9318  02CF  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9319  02D0  2ADE               	goto	L4
  9320  02D1                     l5550:	
  9321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:     }
  9322                           
  9323  02D1  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9324  02D2  1D03               	btfss	3,2
  9325  02D3  2AD7               	goto	l5562
  9326  02D4  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9327  02D5  1D03               	btfss	3,2
  9328  02D6  2ACF               	goto	l5542
  9329  02D7                     l5562:	
  9330                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 494:         if(sensor_adc2->enabled == 0)
  9331                           
  9332  02D7  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9333  02D8  1903               	btfsc	3,2
  9334  02D9  2AE6               	goto	l5574
  9335  02DA  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9336  02DB  1D03               	btfss	3,2
  9337  02DC  2AE6               	goto	l5574
  9338                           
  9339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 503:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 504:         if(sensor_adc1->enabled == 0)
  9340  02DD  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9341  02DE                     L4:	
  9342  02DE  3E08               	addlw	8
  9343  02DF  0086               	movwf	6
  9344  02E0  3001               	movlw	1	; select bank2/3
  9345  02E1  0087               	movwf	7
  9346  02E2  1981               	btfsc	1,3
  9347  02E3  2AE6               	goto	l5574
  9348  02E4                     l5544:	
  9349                           
  9350                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 486:             return MTOUCH_SENSOR_ERROR_none;
  9351  02E4  3000               	movlw	0
  9352  02E5  0008               	return
  9353  02E6                     l5574:	
  9354                           
  9355                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 516:     if(Sensor_isActive(sensor_adc2))
  9356  02E6  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9357  02E7  3194  242D  3182   	fcall	_Sensor_isActive
  9358  02EA  3A00               	xorlw	0
  9359  02EB  1903               	skipnz
  9360  02EC  2AF0               	goto	l5578
  9361                           
  9362                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 517:         activeSensor = 1;
  9363  02ED  0020               	movlb	0	; select bank0
  9364  02EE  01AC               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  9365  02EF  0AAC               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  9366  02F0                     l5578:	
  9367                           
  9368                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 523:     ADCOMCON_temp = ADCOMCON;
  9369  02F0  002E               	movlb	14	; select bank14
  9370  02F1  0812               	movf	18,w	;volatile
  9371  02F2  0020               	movlb	0	; select bank0
  9372  02F3  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9373  02F4  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9374  02F5  00A6               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  9375                           
  9376                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 524:     AD1CON2_temp = AD1CON2;
  9377  02F6  002E               	movlb	14	; select bank14
  9378  02F7  0813               	movf	19,w	;volatile
  9379  02F8  0020               	movlb	0	; select bank0
  9380  02F9  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9381  02FA  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9382  02FB  00A7               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  9383                           
  9384                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 525:     AD2CON2_temp = AD2CON2;
  9385  02FC  002F               	movlb	15	; select bank15
  9386  02FD  0813               	movf	19,w	;volatile
  9387  02FE  0020               	movlb	0	; select bank0
  9388  02FF  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9389  0300  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9390  0301  00A8               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  9391                           
  9392                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 526:     MTOUCH_Sensor_Scan_Initialize();
  9393  0302  3194  24A6  3182   	fcall	_MTOUCH_Sensor_Scan_Initialize
  9394                           
  9395                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 530:     if(sensor_adc1!=((void*)0))
  9396  0305  0020               	movlb	0	; select bank0
  9397  0306  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9398  0307  1903               	btfsc	3,2
  9399  0308  2B1C               	goto	l5594
  9400                           
  9401                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 531:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 532:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9402  0309  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9403  030A  3E04               	addlw	4
  9404  030B  0086               	movwf	6
  9405  030C  3001               	movlw	1	; select bank2/3
  9406  030D  0087               	movwf	7
  9407  030E  0801               	movf	1,w
  9408  030F  3EFF               	addlw	255
  9409  0310  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9410  0311  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9411  0312  00B1               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9412                           
  9413                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         ADxIF_flag = 0;
  9414  0313  01AB               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9415                           
  9416                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 534:         AAD1GRD = 0b01000000;
  9417  0314  3040               	movlw	64
  9418  0315  002E               	movlb	14	; select bank14
  9419  0316  0098               	movwf	24	;volatile
  9420                           
  9421                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 535:         AAD2GRD = 0b00000000;
  9422  0317  002F               	movlb	15	; select bank15
  9423  0318  0198               	clrf	24	;volatile
  9424                           
  9425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 536:         APFCONbits.GRDASEL = 0x0;
  9426  0319  0022               	movlb	2	; select bank2
  9427  031A  101D               	bcf	29,0	;volatile
  9428                           
  9429                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 537:     }
  9430  031B  2B2F               	goto	l5604
  9431  031C                     l5594:	
  9432                           
  9433                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 540:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9434  031C  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9435  031D  3E04               	addlw	4
  9436  031E  0086               	movwf	6
  9437  031F  3001               	movlw	1	; select bank2/3
  9438  0320  0087               	movwf	7
  9439  0321  0801               	movf	1,w
  9440  0322  3EFF               	addlw	255
  9441  0323  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9442  0324  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9443  0325  00B1               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9444                           
  9445                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         ADxIF_flag = 1;
  9446  0326  01AB               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9447  0327  0AAB               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  9448                           
  9449                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:         AAD1GRD = 0b00000000;
  9450  0328  002E               	movlb	14	; select bank14
  9451  0329  0198               	clrf	24	;volatile
  9452                           
  9453                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 543:         AAD2GRD = 0b01000000;
  9454  032A  3040               	movlw	64
  9455  032B  002F               	movlb	15	; select bank15
  9456  032C  0098               	movwf	24	;volatile
  9457                           
  9458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 544:         APFCONbits.GRDASEL = 0x1;
  9459  032D  0022               	movlb	2	; select bank2
  9460  032E  141D               	bsf	29,0	;volatile
  9461  032F                     l5604:	
  9462                           
  9463                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  9464  032F  01F3               	clrf	Sensor_loadADCSettings@adc_index
  9465  0330  0020               	movlb	0	; select bank0
  9466  0331  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9467  0332  3185  257F  3182   	fcall	_Sensor_loadADCSettings
  9468                           
  9469                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  9470  0335  01F3               	clrf	Sensor_loadADCSettings@adc_index
  9471  0336  0AF3               	incf	Sensor_loadADCSettings@adc_index,f
  9472  0337  0020               	movlb	0	; select bank0
  9473  0338  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9474  0339  3185  257F  3182   	fcall	_Sensor_loadADCSettings
  9475                           
  9476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     sensor_globalFlags.done = 0;
  9477  033C  0020               	movlb	0	; select bank0
  9478  033D  106A               	bcf	_sensor_globalFlags,0	;volatile
  9479                           
  9480                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:     sensor_globalFlags.error = 0;
  9481  033E  116A               	bcf	_sensor_globalFlags,2	;volatile
  9482                           
  9483                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:     sensor_globalFlags.interrupted = 0
      +                          ;
  9484  033F  11EA               	bcf	_sensor_globalFlags,3	;volatile
  9485                           
  9486                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  9487  0340  086F               	movf	_sample_period,w
  9488  0341  3193  2377  3182   	fcall	_TMR2_LoadPeriodRegister
  9489                           
  9490                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     TMR2_StartTimer();
  9491  0344  3193  2363  3182   	fcall	_TMR2_StartTimer
  9492                           
  9493                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 556:     packet_noise = 0;
  9494  0347  0020               	movlb	0	; select bank0
  9495  0348  01DF               	clrf	_packet_noise
  9496  0349  01E0               	clrf	_packet_noise+1
  9497  034A                     l5620:	
  9498                           
  9499                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 560:         if(ADxIF_flag == 0)
  9500  034A  082B               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  9501  034B  1D03               	btfss	3,2
  9502  034C  2B53               	goto	l259
  9503                           
  9504                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 561:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 562:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9505  034D  1F11               	btfss	17,6	;volatile
  9506  034E  10EA               	bcf	_sensor_globalFlags,1	;volatile
  9507  034F                     l261:	
  9508  034F  1F11               	btfss	17,6	;volatile
  9509  0350  2B4F               	goto	l261
  9510                           
  9511                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:             PIR1bits.AD1IF = 0;
  9512  0351  1311               	bcf	17,6	;volatile
  9513                           
  9514                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         }
  9515  0352  2B59               	goto	l5628
  9516  0353                     l259:	
  9517                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         else
  9518                           
  9519                           
  9520                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 568:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9521  0353  1B12               	btfsc	18,6	;volatile
  9522  0354  2B56               	goto	l266
  9523  0355  10EA               	bcf	_sensor_globalFlags,1	;volatile
  9524  0356                     l266:	
  9525  0356  1F12               	btfss	18,6	;volatile
  9526  0357  2B56               	goto	l266
  9527                           
  9528                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:             PIR2bits.AD2IF = 0;
  9529  0358  1312               	bcf	18,6	;volatile
  9530  0359                     l5628:	
  9531                           
  9532                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 573:         AAD1GRD ^= 0b00100001;
  9533  0359  3021               	movlw	33
  9534  035A  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9535  035B  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9536  035C  002E               	movlb	14	; select bank14
  9537  035D  0698               	xorwf	24,f	;volatile
  9538                           
  9539                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:         AAD2GRD ^= 0b00100001;
  9540  035E  3021               	movlw	33
  9541  035F  0020               	movlb	0	; select bank0
  9542  0360  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9543  0361  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9544  0362  002F               	movlb	15	; select bank15
  9545  0363  0698               	xorwf	24,f	;volatile
  9546                           
  9547                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:         AAD1CON3 ^= 0b11000000;
  9548  0364  30C0               	movlw	192
  9549  0365  0020               	movlb	0	; select bank0
  9550  0366  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9551  0367  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9552  0368  002E               	movlb	14	; select bank14
  9553  0369  0694               	xorwf	20,f	;volatile
  9554                           
  9555                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 576:         AAD2CON3 ^= 0b11000000;
  9556  036A  30C0               	movlw	192
  9557  036B  0020               	movlb	0	; select bank0
  9558  036C  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  9559  036D  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  9560  036E  002F               	movlb	15	; select bank15
  9561  036F  0694               	xorwf	20,f	;volatile
  9562                           
  9563                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:         if ((packet_counter & 0x01) ==
      +                           0)
  9564  0370  0020               	movlb	0	; select bank0
  9565  0371  1831               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  9566  0372  2BB9               	goto	l5644
  9567                           
  9568                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 579:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 580:             packet_sample[0] += AAD1RES0;
  9569  0373  002E               	movlb	14	; select bank14
  9570  0374  081A               	movf	26,w	;volatile
  9571  0375  0020               	movlb	0	; select bank0
  9572  0376  07D5               	addwf	_packet_sample,f
  9573  0377  002E               	movlb	14	; select bank14
  9574  0378  081B               	movf	27,w	;volatile
  9575  0379  0020               	movlb	0	; select bank0
  9576  037A  3DD6               	addwfc	_packet_sample+1,f
  9577                           
  9578                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:             packet_sample[1] += AAD2RE
      +                          S0;
  9579  037B  002F               	movlb	15	; select bank15
  9580  037C  081A               	movf	26,w	;volatile
  9581  037D  0020               	movlb	0	; select bank0
  9582  037E  07D7               	addwf	_packet_sample+2,f
  9583  037F  002F               	movlb	15	; select bank15
  9584  0380  081B               	movf	27,w	;volatile
  9585  0381  0020               	movlb	0	; select bank0
  9586  0382  3DD8               	addwfc	_packet_sample+3,f
  9587                           
  9588                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:             if(activeSensor ==0)
  9589  0383  082C               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9590  0384  1D03               	btfss	3,2
  9591  0385  2B9E               	goto	l5640
  9592                           
  9593                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 584:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  9594  0386  002E               	movlb	14	; select bank14
  9595  0387  081A               	movf	26,w	;volatile
  9596  0388  0020               	movlb	0	; select bank0
  9597  0389  022F               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9598  038A  00F2               	movwf	abs@a
  9599  038B  002E               	movlb	14	; select bank14
  9600  038C  081B               	movf	27,w	;volatile
  9601  038D  0020               	movlb	0	; select bank0
  9602  038E  3B30               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9603  038F  00F3               	movwf	abs@a+1
  9604  0390  3195  25AD  3182   	fcall	_abs
  9605  0393  0872               	movf	?_abs,w
  9606  0394  0020               	movlb	0	; select bank0
  9607  0395  07DF               	addwf	_packet_noise,f
  9608  0396  0873               	movf	?_abs+1,w
  9609  0397  3DE0               	addwfc	_packet_noise+1,f
  9610                           
  9611                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:                 last_b = AAD1RES0;
  9612  0398  002E               	movlb	14	; select bank14
  9613  0399  081B               	movf	27,w	;volatile
  9614  039A  0020               	movlb	0	; select bank0
  9615  039B  00B0               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9616  039C  002E               	movlb	14	; select bank14
  9617  039D  2BB5               	goto	L3
  9618  039E                     l5640:	
  9619                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             }
  9620                           
  9621                           
  9622                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 589:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  9623  039E  002F               	movlb	15	; select bank15
  9624  039F  081A               	movf	26,w	;volatile
  9625  03A0  0020               	movlb	0	; select bank0
  9626  03A1  022F               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9627  03A2  00F2               	movwf	abs@a
  9628  03A3  002F               	movlb	15	; select bank15
  9629  03A4  081B               	movf	27,w	;volatile
  9630  03A5  0020               	movlb	0	; select bank0
  9631  03A6  3B30               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9632  03A7  00F3               	movwf	abs@a+1
  9633  03A8  3195  25AD  3182   	fcall	_abs
  9634  03AB  0872               	movf	?_abs,w
  9635  03AC  0020               	movlb	0	; select bank0
  9636  03AD  07DF               	addwf	_packet_noise,f
  9637  03AE  0873               	movf	?_abs+1,w
  9638  03AF  3DE0               	addwfc	_packet_noise+1,f
  9639                           
  9640                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:                 last_b = AAD2RES0;
  9641  03B0  002F               	movlb	15	; select bank15
  9642  03B1  081B               	movf	27,w	;volatile
  9643  03B2  0020               	movlb	0	; select bank0
  9644  03B3  00B0               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9645  03B4  002F               	movlb	15	; select bank15
  9646  03B5                     L3:	
  9647  03B5  081A               	movf	26,w	;volatile
  9648  03B6  0020               	movlb	0	; select bank0
  9649  03B7  00AF               	movwf	Sensor_Acq_ExecutePacket@last_b
  9650  03B8  2BED               	goto	l5656
  9651  03B9                     l5644:	
  9652                           
  9653                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 595:             packet_sample[0] -= AAD1RES0;
  9654  03B9  002E               	movlb	14	; select bank14
  9655  03BA  081A               	movf	26,w	;volatile
  9656  03BB  0020               	movlb	0	; select bank0
  9657  03BC  02D5               	subwf	_packet_sample,f
  9658  03BD  002E               	movlb	14	; select bank14
  9659  03BE  081B               	movf	27,w	;volatile
  9660  03BF  0020               	movlb	0	; select bank0
  9661  03C0  3BD6               	subwfb	_packet_sample+1,f
  9662                           
  9663                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 596:             packet_sample[1] -= AAD2RE
      +                          S0;
  9664  03C1  002F               	movlb	15	; select bank15
  9665  03C2  081A               	movf	26,w	;volatile
  9666  03C3  0020               	movlb	0	; select bank0
  9667  03C4  02D7               	subwf	_packet_sample+2,f
  9668  03C5  002F               	movlb	15	; select bank15
  9669  03C6  081B               	movf	27,w	;volatile
  9670  03C7  0020               	movlb	0	; select bank0
  9671  03C8  3BD8               	subwfb	_packet_sample+3,f
  9672                           
  9673                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             if(activeSensor ==0)
  9674  03C9  082C               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9675  03CA  1D03               	btfss	3,2
  9676  03CB  2BD3               	goto	l5652
  9677                           
  9678                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 599:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  9679  03CC  002E               	movlb	14	; select bank14
  9680  03CD  081A               	movf	26,w	;volatile
  9681  03CE  0020               	movlb	0	; select bank0
  9682  03CF  022D               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9683  03D0  00F2               	movwf	abs@a
  9684  03D1  002E               	movlb	14	; select bank14
  9685  03D2  2BD9               	goto	L6
  9686  03D3                     l5652:	
  9687                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:             }
  9688                           
  9689                           
  9690                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 603:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 604:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  9691  03D3  002F               	movlb	15	; select bank15
  9692  03D4  081A               	movf	26,w	;volatile
  9693  03D5  0020               	movlb	0	; select bank0
  9694  03D6  022D               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9695  03D7  00F2               	movwf	abs@a
  9696  03D8  002F               	movlb	15	; select bank15
  9697  03D9                     L6:	
  9698  03D9  081B               	movf	27,w	;volatile
  9699  03DA  0020               	movlb	0	; select bank0
  9700  03DB  3B2E               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  9701  03DC  00F3               	movwf	abs@a+1
  9702  03DD  3195  25AD  3182   	fcall	_abs
  9703  03E0  0872               	movf	?_abs,w
  9704  03E1  0020               	movlb	0	; select bank0
  9705  03E2  07DF               	addwf	_packet_noise,f
  9706  03E3  0873               	movf	?_abs+1,w
  9707  03E4  3DE0               	addwfc	_packet_noise+1,f
  9708                           
  9709                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:                 last_a = AAD1RES0;
  9710  03E5  002E               	movlb	14	; select bank14
  9711  03E6  081B               	movf	27,w	;volatile
  9712  03E7  0020               	movlb	0	; select bank0
  9713  03E8  00AE               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  9714  03E9  002E               	movlb	14	; select bank14
  9715  03EA  081A               	movf	26,w	;volatile
  9716  03EB  0020               	movlb	0	; select bank0
  9717  03EC  00AD               	movwf	Sensor_Acq_ExecutePacket@last_a
  9718  03ED                     l5656:	
  9719                           
  9720                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         if (packet_counter == 0)
  9721  03ED  0831               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  9722  03EE  1903               	btfsc	3,2
  9723                           
  9724                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 611:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 613:             sensor_globalFlags.done = (uint8_t)1;
  9725  03EF  146A               	bsf	_sensor_globalFlags,0	;volatile
  9726                           
  9727                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 615:         packet_counter--;
  9728  03F0  3001               	movlw	1
  9729  03F1  02B1               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  9730                           
  9731                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:         if (sensor_globalFlags.check !
      +                          = 0)
  9732  03F2  1CEA               	btfss	_sensor_globalFlags,1	;volatile
  9733  03F3  2BF6               	goto	l276
  9734                           
  9735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 618:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 619:             sensor_globalFlags.error = 1;
  9736  03F4  156A               	bsf	_sensor_globalFlags,2	;volatile
  9737                           
  9738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:             sensor_globalFlags.done = 
      +                          1;
  9739  03F5  146A               	bsf	_sensor_globalFlags,0	;volatile
  9740  03F6                     l276:	
  9741                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:         }
  9742                           
  9743                           
  9744                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:         sensor_globalFlags.check = 1;
  9745  03F6  14EA               	bsf	_sensor_globalFlags,1	;volatile
  9746                           
  9747                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 623:     } while(sensor_globalFlags.done ==
      +                           0);
  9748  03F7  1C6A               	btfss	_sensor_globalFlags,0	;volatile
  9749  03F8  2B4A               	goto	l5620
  9750                           
  9751                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:     TMR2_StopTimer();
  9752  03F9  3193  2366  3182   	fcall	_TMR2_StopTimer
  9753                           
  9754                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:     ADCOMCON = ADCOMCON_temp;
  9755  03FC  0020               	movlb	0	; select bank0
  9756  03FD  0826               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  9757  03FE  002E               	movlb	14	; select bank14
  9758  03FF  0092               	movwf	18	;volatile
  9759                           
  9760                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:     AD1CON2 = AD1CON2_temp;
  9761  0400  0020               	movlb	0	; select bank0
  9762  0401  0827               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  9763  0402  002E               	movlb	14	; select bank14
  9764  0403  0093               	movwf	19	;volatile
  9765                           
  9766                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 628:     AD2CON2 = AD2CON2_temp;
  9767  0404  0020               	movlb	0	; select bank0
  9768  0405  0828               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  9769  0406  002F               	movlb	15	; select bank15
  9770  0407  0093               	movwf	19	;volatile
  9771                           
  9772                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 630:     if(sensor_globalFlags.error)
  9773  0408  0020               	movlb	0	; select bank0
  9774  0409  1D6A               	btfss	_sensor_globalFlags,2	;volatile
  9775  040A  2C0D               	goto	l278
  9776                           
  9777                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 632:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  9778  040B  30FB               	movlw	251
  9779  040C  0008               	return
  9780  040D                     l278:	
  9781                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:     }
  9782                           
  9783                           
  9784                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:     if(sensor_globalFlags.interrupted)
  9785  040D  1DEA               	btfss	_sensor_globalFlags,3	;volatile
  9786  040E  2C11               	goto	l5684
  9787                           
  9788                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 637:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  9789  040F  30FA               	movlw	250
  9790  0410  0008               	return
  9791  0411                     l5684:	
  9792                           
  9793                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     if (sensor1ForceEnabled)
  9794  0411  0829               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  9795  0412  1903               	btfsc	3,2
  9796  0413  2C1A               	goto	l5688
  9797                           
  9798                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:         sensor_adc1->enabled = 0;
  9799  0414  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9800  0415  3E08               	addlw	8
  9801  0416  0086               	movwf	6
  9802  0417  3001               	movlw	1	; select bank2/3
  9803  0418  0087               	movwf	7
  9804  0419  1181               	bcf	1,3
  9805  041A                     l5688:	
  9806                           
  9807                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     if (sensor2ForceEnabled)
  9808  041A  082A               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  9809  041B  1903               	btfsc	3,2
  9810  041C  2C23               	goto	l5692
  9811                           
  9812                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 645:         sensor_adc2->enabled = 0;
  9813  041D  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9814  041E  3E08               	addlw	8
  9815  041F  0086               	movwf	6
  9816  0420  3001               	movlw	1	; select bank2/3
  9817  0421  0087               	movwf	7
  9818  0422  1181               	bcf	1,3
  9819  0423                     l5692:	
  9820                           
  9821                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 648:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  9822  0423  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9823  0424  3194  24E8  3182   	fcall	_Sensor_isEnabled
  9824  0427  3A00               	xorlw	0
  9825  0428  1903               	skipnz
  9826  0429  2C37               	goto	l5698
  9827  042A  0020               	movlb	0	; select bank0
  9828  042B  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9829  042C  3193  23EE  3182   	fcall	_Sensor_isCalibrated
  9830  042F  3A00               	xorlw	0
  9831  0430  1D03               	skipz
  9832  0431  2C37               	goto	l5698
  9833                           
  9834                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:         Sensor_autoCalibration(sensor_
      +                          adc1);
  9835  0432  0020               	movlb	0	; select bank0
  9836  0433  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9837  0434  318D  258A  3182   	fcall	_Sensor_autoCalibration
  9838  0437                     l5698:	
  9839                           
  9840                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  9841  0437  0020               	movlb	0	; select bank0
  9842  0438  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9843  0439  3194  24E8  3182   	fcall	_Sensor_isEnabled
  9844  043C  3A00               	xorlw	0
  9845  043D  1903               	skipnz
  9846  043E  2C4C               	goto	l5704
  9847  043F  0020               	movlb	0	; select bank0
  9848  0440  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9849  0441  3193  23EE  3182   	fcall	_Sensor_isCalibrated
  9850  0444  3A00               	xorlw	0
  9851  0445  1D03               	skipz
  9852  0446  2C4C               	goto	l5704
  9853                           
  9854                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:         Sensor_autoCalibration(sensor_
      +                          adc2);
  9855  0447  0020               	movlb	0	; select bank0
  9856  0448  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9857  0449  318D  258A  3182   	fcall	_Sensor_autoCalibration
  9858  044C                     l5704:	
  9859                           
  9860                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     AD1PRECON = 0;
  9861  044C  002E               	movlb	14	; select bank14
  9862  044D  0196               	clrf	22	;volatile
  9863                           
  9864                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     AD2PRECON = 0;
  9865  044E  002F               	movlb	15	; select bank15
  9866  044F  0196               	clrf	22	;volatile
  9867                           
  9868                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 656:     AD1ACQCON = 0;
  9869  0450  002E               	movlb	14	; select bank14
  9870  0451  0197               	clrf	23	;volatile
  9871                           
  9872                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     AD2ACQCON = 0;
  9873  0452  002F               	movlb	15	; select bank15
  9874  0453  0197               	clrf	23	;volatile
  9875                           
  9876                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:     AD1CON0bits.ADON = 0;
  9877  0454  002E               	movlb	14	; select bank14
  9878  0455  1011               	bcf	17,0	;volatile
  9879                           
  9880                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 659:     AD2CON0bits.ADON = 0;
  9881  0456  002F               	movlb	15	; select bank15
  9882  0457  1011               	bcf	17,0	;volatile
  9883  0458  2AE4               	goto	l5544
  9884  0459                     __end_of_Sensor_Acq_ExecutePacket:	
  9885                           
  9886                           	psect	text50
  9887  1366                     __ptext50:	
  9888 ;; *************** function _TMR2_StopTimer *****************
  9889 ;; Defined at:
  9890 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;		None
  9893 ;; Auto vars:     Size  Location     Type
  9894 ;;		None
  9895 ;; Return value:  Size  Location     Type
  9896 ;;                  1    wreg      void 
  9897 ;; Registers used:
  9898 ;;		None
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 0/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9904 ;;      Params:         0       0       0       0       0       0       0       0
  9905 ;;      Locals:         0       0       0       0       0       0       0       0
  9906 ;;      Temps:          0       0       0       0       0       0       0       0
  9907 ;;      Totals:         0       0       0       0       0       0       0       0
  9908 ;;Total ram usage:        0 bytes
  9909 ;; Hardware stack levels used:    1
  9910 ;; Hardware stack levels required when called:    4
  9911 ;; This function calls:
  9912 ;;		Nothing
  9913 ;; This function is called by:
  9914 ;;		_Sensor_Acq_ExecutePacket
  9915 ;; This function uses a non-reentrant model
  9916 ;;
  9917                           
  9918                           
  9919                           ;psect for function _TMR2_StopTimer
  9920  1366                     _TMR2_StopTimer:	
  9921                           
  9922                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  9923                           
  9924                           ;incstack = 0
  9925                           ; Regs used in _TMR2_StopTimer: []
  9926  1366  0020               	movlb	0	; select bank0
  9927  1367  111C               	bcf	28,2	;volatile
  9928  1368  0008               	return
  9929  1369                     __end_of_TMR2_StopTimer:	
  9930                           
  9931                           	psect	text51
  9932  1363                     __ptext51:	
  9933 ;; *************** function _TMR2_StartTimer *****************
  9934 ;; Defined at:
  9935 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  9936 ;; Parameters:    Size  Location     Type
  9937 ;;		None
  9938 ;; Auto vars:     Size  Location     Type
  9939 ;;		None
  9940 ;; Return value:  Size  Location     Type
  9941 ;;                  1    wreg      void 
  9942 ;; Registers used:
  9943 ;;		None
  9944 ;; Tracked objects:
  9945 ;;		On entry : 0/0
  9946 ;;		On exit  : 0/0
  9947 ;;		Unchanged: 0/0
  9948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9949 ;;      Params:         0       0       0       0       0       0       0       0
  9950 ;;      Locals:         0       0       0       0       0       0       0       0
  9951 ;;      Temps:          0       0       0       0       0       0       0       0
  9952 ;;      Totals:         0       0       0       0       0       0       0       0
  9953 ;;Total ram usage:        0 bytes
  9954 ;; Hardware stack levels used:    1
  9955 ;; Hardware stack levels required when called:    4
  9956 ;; This function calls:
  9957 ;;		Nothing
  9958 ;; This function is called by:
  9959 ;;		_Sensor_Acq_ExecutePacket
  9960 ;; This function uses a non-reentrant model
  9961 ;;
  9962                           
  9963                           
  9964                           ;psect for function _TMR2_StartTimer
  9965  1363                     _TMR2_StartTimer:	
  9966                           
  9967                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  9968                           
  9969                           ;incstack = 0
  9970                           ; Regs used in _TMR2_StartTimer: []
  9971  1363  0020               	movlb	0	; select bank0
  9972  1364  151C               	bsf	28,2	;volatile
  9973  1365  0008               	return
  9974  1366                     __end_of_TMR2_StartTimer:	
  9975                           
  9976                           	psect	text52
  9977  1377                     __ptext52:	
  9978 ;; *************** function _TMR2_LoadPeriodRegister *****************
  9979 ;; Defined at:
  9980 ;;		line 91 in file "mcc_generated_files/tmr2.c"
  9981 ;; Parameters:    Size  Location     Type
  9982 ;;  periodVal       1    wreg     unsigned char 
  9983 ;; Auto vars:     Size  Location     Type
  9984 ;;  periodVal       1    2[COMMON] unsigned char 
  9985 ;; Return value:  Size  Location     Type
  9986 ;;                  1    wreg      void 
  9987 ;; Registers used:
  9988 ;;		wreg
  9989 ;; Tracked objects:
  9990 ;;		On entry : 0/0
  9991 ;;		On exit  : 0/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9994 ;;      Params:         0       0       0       0       0       0       0       0
  9995 ;;      Locals:         1       0       0       0       0       0       0       0
  9996 ;;      Temps:          0       0       0       0       0       0       0       0
  9997 ;;      Totals:         1       0       0       0       0       0       0       0
  9998 ;;Total ram usage:        1 bytes
  9999 ;; Hardware stack levels used:    1
 10000 ;; Hardware stack levels required when called:    4
 10001 ;; This function calls:
 10002 ;;		Nothing
 10003 ;; This function is called by:
 10004 ;;		_Sensor_Acq_ExecutePacket
 10005 ;; This function uses a non-reentrant model
 10006 ;;
 10007                           
 10008                           
 10009                           ;psect for function _TMR2_LoadPeriodRegister
 10010  1377                     _TMR2_LoadPeriodRegister:	
 10011                           
 10012                           ;incstack = 0
 10013                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
 10014                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 10015  1377  00F2               	movwf	TMR2_LoadPeriodRegister@periodVal
 10016                           
 10017                           ;mcc_generated_files/tmr2.c: 91: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_gen
      +                          erated_files/tmr2.c: 92: {;mcc_generated_files/tmr2.c: 93:    PR2 = periodVal;
 10018  1378  0872               	movf	TMR2_LoadPeriodRegister@periodVal,w
 10019  1379  0020               	movlb	0	; select bank0
 10020  137A  009B               	movwf	27	;volatile
 10021  137B  0008               	return
 10022  137C                     __end_of_TMR2_LoadPeriodRegister:	
 10023                           
 10024                           	psect	text53
 10025  057F                     __ptext53:	
 10026 ;; *************** function _Sensor_loadADCSettings *****************
 10027 ;; Defined at:
 10028 ;;		line 421 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;  sensor          1    wreg     PTR struct .
 10031 ;;		 -> mtouch_sensor(36), 
 10032 ;;  adc_index       1    3[COMMON] unsigned char 
 10033 ;; Auto vars:     Size  Location     Type
 10034 ;;  sensor          1    3[BANK0 ] PTR struct .
 10035 ;;		 -> mtouch_sensor(36), 
 10036 ;;  addressOffse    1    2[BANK0 ] unsigned char 
 10037 ;; Return value:  Size  Location     Type
 10038 ;;                  1    wreg      void 
 10039 ;; Registers used:
 10040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10041 ;; Tracked objects:
 10042 ;;		On entry : 0/0
 10043 ;;		On exit  : 0/0
 10044 ;;		Unchanged: 0/0
 10045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10046 ;;      Params:         1       0       0       0       0       0       0       0
 10047 ;;      Locals:         0       4       0       0       0       0       0       0
 10048 ;;      Temps:          3       0       0       0       0       0       0       0
 10049 ;;      Totals:         4       4       0       0       0       0       0       0
 10050 ;;Total ram usage:        8 bytes
 10051 ;; Hardware stack levels used:    1
 10052 ;; Hardware stack levels required when called:    5
 10053 ;; This function calls:
 10054 ;;		_Sensor_isCalibrated
 10055 ;;		_Sensor_isCalibratingAcqTime
 10056 ;; This function is called by:
 10057 ;;		_Sensor_Acq_ExecutePacket
 10058 ;; This function uses a non-reentrant model
 10059 ;;
 10060                           
 10061                           
 10062                           ;psect for function _Sensor_loadADCSettings
 10063  057F                     _Sensor_loadADCSettings:	
 10064                           
 10065                           ;incstack = 0
 10066                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 10067                           ;Sensor_loadADCSettings@sensor stored from wreg
 10068  057F  0020               	movlb	0	; select bank0
 10069  0580  00A3               	movwf	Sensor_loadADCSettings@sensor
 10070                           
 10071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 422
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 423:     if (sensor == ((void*)0))
 10072  0581  0823               	movf	Sensor_loadADCSettings@sensor,w
 10073  0582  1903               	btfsc	3,2
 10074  0583  0008               	return
 10075                           
 10076                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
 10077  0584  0873               	movf	Sensor_loadADCSettings@adc_index,w
 10078  0585  1D03               	btfss	3,2
 10079  0586  2D8A               	goto	l5448
 10080  0587  01A0               	clrf	_Sensor_loadADCSettings$550
 10081  0588  01A1               	clrf	_Sensor_loadADCSettings$550+1
 10082  0589  2D8E               	goto	l230
 10083  058A                     l5448:	
 10084  058A  3080               	movlw	128
 10085  058B  00A0               	movwf	_Sensor_loadADCSettings$550
 10086  058C  3000               	movlw	0
 10087  058D  00A1               	movwf	_Sensor_loadADCSettings$550+1
 10088  058E                     l230:	
 10089  058E  0820               	movf	_Sensor_loadADCSettings$550,w
 10090  058F  00F4               	movwf	??_Sensor_loadADCSettings
 10091  0590  0874               	movf	??_Sensor_loadADCSettings,w
 10092  0591  00A2               	movwf	Sensor_loadADCSettings@addressOffset
 10093                           
 10094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
 10095  0592  0A23               	incf	Sensor_loadADCSettings@sensor,w
 10096  0593  0086               	movwf	6
 10097  0594  3001               	movlw	1	; select bank2/3
 10098  0595  0087               	movwf	7
 10099  0596  0801               	movf	1,w
 10100  0597  00F4               	movwf	??_Sensor_loadADCSettings
 10101  0598  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10102  0599  3E11               	addlw	17
 10103  059A  00F5               	movwf	??_Sensor_loadADCSettings+1
 10104  059B  01F6               	clrf	??_Sensor_loadADCSettings+2
 10105  059C  3007               	movlw	7
 10106  059D  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
 10107  059E  0875               	movf	??_Sensor_loadADCSettings+1,w
 10108  059F  0086               	movwf	6
 10109  05A0  0876               	movf	??_Sensor_loadADCSettings+2,w
 10110  05A1  0087               	movwf	7
 10111  05A2  0874               	movf	??_Sensor_loadADCSettings,w
 10112  05A3  0081               	movwf	1
 10113                           
 10114                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
 10115  05A4  0823               	movf	Sensor_loadADCSettings@sensor,w
 10116  05A5  3E05               	addlw	5
 10117  05A6  0086               	movwf	6
 10118  05A7  3001               	movlw	1	; select bank2/3
 10119  05A8  0087               	movwf	7
 10120  05A9  0801               	movf	1,w
 10121  05AA  00F4               	movwf	??_Sensor_loadADCSettings
 10122  05AB  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10123  05AC  3E19               	addlw	25
 10124  05AD  00F5               	movwf	??_Sensor_loadADCSettings+1
 10125  05AE  01F6               	clrf	??_Sensor_loadADCSettings+2
 10126  05AF  3007               	movlw	7
 10127  05B0  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
 10128  05B1  0875               	movf	??_Sensor_loadADCSettings+1,w
 10129  05B2  0086               	movwf	6
 10130  05B3  0876               	movf	??_Sensor_loadADCSettings+2,w
 10131  05B4  0087               	movwf	7
 10132  05B5  0874               	movf	??_Sensor_loadADCSettings,w
 10133  05B6  0081               	movwf	1
 10134                           
 10135                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 430:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
 10136  05B7  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10137  05B8  3E13               	addlw	19
 10138  05B9  00F4               	movwf	??_Sensor_loadADCSettings
 10139  05BA  01F5               	clrf	??_Sensor_loadADCSettings+1
 10140  05BB  3007               	movlw	7
 10141  05BC  3DF5               	addwfc	??_Sensor_loadADCSettings+1,f
 10142  05BD  0874               	movf	??_Sensor_loadADCSettings,w
 10143  05BE  0086               	movwf	6
 10144  05BF  0875               	movf	??_Sensor_loadADCSettings+1,w
 10145  05C0  0087               	movwf	7
 10146  05C1  3050               	movlw	80
 10147  05C2  0081               	movwf	1
 10148                           
 10149                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 431:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
 10150  05C3  30FE               	movlw	254
 10151  05C4  00F4               	movwf	??_Sensor_loadADCSettings
 10152  05C5  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10153  05C6  3E18               	addlw	24
 10154  05C7  0086               	movwf	6
 10155  05C8  0187               	clrf	7
 10156  05C9  3007               	movlw	7
 10157  05CA  3D87               	addwfc	7,f
 10158  05CB  0874               	movf	??_Sensor_loadADCSettings,w
 10159  05CC  0581               	andwf	1,f
 10160                           
 10161                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     if (Sensor_isCalibrated(sensor))
 10162  05CD  0823               	movf	Sensor_loadADCSettings@sensor,w
 10163  05CE  3193  23EE  3185   	fcall	_Sensor_isCalibrated
 10164  05D1  3A00               	xorlw	0
 10165  05D2  1903               	skipnz
 10166  05D3  2DE9               	goto	l5462
 10167                           
 10168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 434:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 435:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
 10169  05D4  0020               	movlb	0	; select bank0
 10170  05D5  0823               	movf	Sensor_loadADCSettings@sensor,w
 10171  05D6  3E02               	addlw	2
 10172  05D7  0086               	movwf	6
 10173  05D8  3001               	movlw	1	; select bank2/3
 10174  05D9  0087               	movwf	7
 10175  05DA  0801               	movf	1,w
 10176  05DB  00F4               	movwf	??_Sensor_loadADCSettings
 10177  05DC  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10178  05DD  3E16               	addlw	22
 10179  05DE  00F5               	movwf	??_Sensor_loadADCSettings+1
 10180  05DF  01F6               	clrf	??_Sensor_loadADCSettings+2
 10181  05E0  3007               	movlw	7
 10182  05E1  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
 10183  05E2  0875               	movf	??_Sensor_loadADCSettings+1,w
 10184  05E3  0086               	movwf	6
 10185  05E4  0876               	movf	??_Sensor_loadADCSettings+2,w
 10186  05E5  0087               	movwf	7
 10187  05E6  0874               	movf	??_Sensor_loadADCSettings,w
 10188  05E7  0081               	movwf	1
 10189  05E8  2DFE               	goto	L8
 10190  05E9                     l5462:	
 10191                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437:     }
 10192                           
 10193                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
 10194                           
 10195                           
 10196                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 440:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
 10197  05E9  0020               	movlb	0	; select bank0
 10198  05EA  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10199  05EB  3E16               	addlw	22
 10200  05EC  00F4               	movwf	??_Sensor_loadADCSettings
 10201  05ED  01F5               	clrf	??_Sensor_loadADCSettings+1
 10202  05EE  3007               	movlw	7
 10203  05EF  3DF5               	addwfc	??_Sensor_loadADCSettings+1,f
 10204  05F0  0874               	movf	??_Sensor_loadADCSettings,w
 10205  05F1  0086               	movwf	6
 10206  05F2  0875               	movf	??_Sensor_loadADCSettings+1,w
 10207  05F3  0087               	movwf	7
 10208  05F4  3020               	movlw	32
 10209  05F5  0081               	movwf	1
 10210                           
 10211                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 441:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
 10212  05F6  0823               	movf	Sensor_loadADCSettings@sensor,w
 10213  05F7  3193  23E5  3185   	fcall	_Sensor_isCalibratingAcqTime
 10214  05FA  3A00               	xorlw	0
 10215  05FB  1903               	skipnz
 10216  05FC  2E11               	goto	l5468
 10217                           
 10218                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
 10219  05FD  0020               	movlb	0	; select bank0
 10220  05FE                     L8:	
 10221  05FE  0823               	movf	Sensor_loadADCSettings@sensor,w
 10222  05FF  3E03               	addlw	3
 10223  0600  0086               	movwf	6
 10224  0601  3001               	movlw	1	; select bank2/3
 10225  0602  0087               	movwf	7
 10226  0603  0801               	movf	1,w
 10227  0604  00F4               	movwf	??_Sensor_loadADCSettings
 10228  0605  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10229  0606  3E17               	addlw	23
 10230  0607  00F5               	movwf	??_Sensor_loadADCSettings+1
 10231  0608  01F6               	clrf	??_Sensor_loadADCSettings+2
 10232  0609  3007               	movlw	7
 10233  060A  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
 10234  060B  0875               	movf	??_Sensor_loadADCSettings+1,w
 10235  060C  0086               	movwf	6
 10236  060D  0876               	movf	??_Sensor_loadADCSettings+2,w
 10237  060E  0087               	movwf	7
 10238  060F  0874               	movf	??_Sensor_loadADCSettings,w
 10239  0610  2E1D               	goto	L7
 10240  0611                     l5468:	
 10241                           
 10242                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
 10243  0611  0020               	movlb	0	; select bank0
 10244  0612  0822               	movf	Sensor_loadADCSettings@addressOffset,w
 10245  0613  3E17               	addlw	23
 10246  0614  00F4               	movwf	??_Sensor_loadADCSettings
 10247  0615  01F5               	clrf	??_Sensor_loadADCSettings+1
 10248  0616  3007               	movlw	7
 10249  0617  3DF5               	addwfc	??_Sensor_loadADCSettings+1,f
 10250  0618  0874               	movf	??_Sensor_loadADCSettings,w
 10251  0619  0086               	movwf	6
 10252  061A  0875               	movf	??_Sensor_loadADCSettings+1,w
 10253  061B  0087               	movwf	7
 10254  061C  3020               	movlw	32
 10255  061D                     L7:	
 10256  061D  0081               	movwf	1
 10257                           
 10258                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
 10259                           
 10260                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     }
 10261  061E  0823               	movf	Sensor_loadADCSettings@sensor,w
 10262  061F  3E04               	addlw	4
 10263  0620  0086               	movwf	6
 10264  0621  3001               	movlw	1	; select bank2/3
 10265  0622  0087               	movwf	7
 10266  0623  0801               	movf	1,w
 10267  0624  00F4               	movwf	??_Sensor_loadADCSettings
 10268  0625  01F5               	clrf	??_Sensor_loadADCSettings+1
 10269  0626  3009               	movlw	9
 10270  0627                     u3565:	
 10271  0627  35F4               	lslf	??_Sensor_loadADCSettings,f
 10272  0628  0DF5               	rlf	??_Sensor_loadADCSettings+1,f
 10273  0629  0B89               	decfsz	9,f
 10274  062A  2E27               	goto	u3565
 10275  062B  3573               	lslf	Sensor_loadADCSettings@adc_index,w
 10276  062C  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 10277  062D  0086               	movwf	6
 10278  062E  0187               	clrf	7
 10279  062F  0874               	movf	??_Sensor_loadADCSettings,w
 10280  0630  3FC0               	movwi [0]fsr1
 10281  0631  0875               	movf	??_Sensor_loadADCSettings+1,w
 10282  0632  3FC1               	movwi [1]fsr1
 10283  0633  0008               	return
 10284  0634                     __end_of_Sensor_loadADCSettings:	
 10285                           
 10286                           	psect	text54
 10287  13EE                     __ptext54:	
 10288 ;; *************** function _Sensor_isCalibrated *****************
 10289 ;; Defined at:
 10290 ;;		line 875 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;  sensor          1    wreg     PTR struct .
 10293 ;;		 -> mtouch_sensor(36), 
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;  sensor          1    2[COMMON] PTR struct .
 10296 ;;		 -> mtouch_sensor(36), 
 10297 ;; Return value:  Size  Location     Type
 10298 ;;                  1    wreg      _Bool 
 10299 ;; Registers used:
 10300 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10306 ;;      Params:         0       0       0       0       0       0       0       0
 10307 ;;      Locals:         1       0       0       0       0       0       0       0
 10308 ;;      Temps:          0       0       0       0       0       0       0       0
 10309 ;;      Totals:         1       0       0       0       0       0       0       0
 10310 ;;Total ram usage:        1 bytes
 10311 ;; Hardware stack levels used:    1
 10312 ;; Hardware stack levels required when called:    4
 10313 ;; This function calls:
 10314 ;;		Nothing
 10315 ;; This function is called by:
 10316 ;;		_Sensor_Acquisition
 10317 ;;		_Sensor_loadADCSettings
 10318 ;;		_Sensor_Acq_ExecutePacket
 10319 ;; This function uses a non-reentrant model
 10320 ;;
 10321                           
 10322                           
 10323                           ;psect for function _Sensor_isCalibrated
 10324  13EE                     _Sensor_isCalibrated:	
 10325                           
 10326                           ;incstack = 0
 10327                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10328                           ;Sensor_isCalibrated@sensor stored from wreg
 10329  13EE  00F2               	movwf	Sensor_isCalibrated@sensor
 10330                           
 10331                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 875: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          876: {;mcc_generated_files/mtouch/mtouch_sensor.c: 877:     return (_Bool)sensor->calibr
      +                          ated;
 10332  13EF  0872               	movf	Sensor_isCalibrated@sensor,w
 10333  13F0  3E08               	addlw	8
 10334  13F1  0086               	movwf	6
 10335  13F2  3001               	movlw	1	; select bank2/3
 10336  13F3  0087               	movwf	7
 10337  13F4  0C01               	rrf	1,w
 10338  13F5  0C89               	rrf	9,f
 10339  13F6  3901               	andlw	1
 10340  13F7  0008               	return
 10341  13F8                     __end_of_Sensor_isCalibrated:	
 10342                           
 10343                           	psect	text55
 10344  14E8                     __ptext55:	
 10345 ;; *************** function _Sensor_isEnabled *****************
 10346 ;; Defined at:
 10347 ;;		line 818 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  sensor          1    wreg     PTR struct .
 10350 ;;		 -> mtouch_sensor(36), 
 10351 ;; Auto vars:     Size  Location     Type
 10352 ;;  sensor          1    3[COMMON] PTR struct .
 10353 ;;		 -> mtouch_sensor(36), 
 10354 ;; Return value:  Size  Location     Type
 10355 ;;                  1    wreg      _Bool 
 10356 ;; Registers used:
 10357 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10363 ;;      Params:         0       0       0       0       0       0       0       0
 10364 ;;      Locals:         1       0       0       0       0       0       0       0
 10365 ;;      Temps:          1       0       0       0       0       0       0       0
 10366 ;;      Totals:         2       0       0       0       0       0       0       0
 10367 ;;Total ram usage:        2 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    4
 10370 ;; This function calls:
 10371 ;;		Nothing
 10372 ;; This function is called by:
 10373 ;;		_Sensor_Service
 10374 ;;		_Sensor_postAcquisitionProcess
 10375 ;;		_Sensor_Acq_ExecutePacket
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           
 10380                           ;psect for function _Sensor_isEnabled
 10381  14E8                     _Sensor_isEnabled:	
 10382                           
 10383                           ;incstack = 0
 10384                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 10385                           ;Sensor_isEnabled@sensor stored from wreg
 10386  14E8  00F3               	movwf	Sensor_isEnabled@sensor
 10387                           
 10388                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 818: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 819: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 820:     if(sensor!=((void*)0))
 10389  14E9  0873               	movf	Sensor_isEnabled@sensor,w
 10390  14EA  1903               	btfsc	3,2
 10391  14EB  2CF7               	goto	l5436
 10392                           
 10393                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 821:         return (_Bool)sensor->enabled;
 10394  14EC  0873               	movf	Sensor_isEnabled@sensor,w
 10395  14ED  3E08               	addlw	8
 10396  14EE  0086               	movwf	6
 10397  14EF  3001               	movlw	1	; select bank2/3
 10398  14F0  0087               	movwf	7
 10399  14F1  0C01               	rrf	1,w
 10400  14F2  00F2               	movwf	??_Sensor_isEnabled
 10401  14F3  0CF2               	rrf	??_Sensor_isEnabled,f
 10402  14F4  0C72               	rrf	??_Sensor_isEnabled,w
 10403  14F5  3901               	andlw	1
 10404  14F6  0008               	return
 10405  14F7                     l5436:	
 10406                           
 10407                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 823:         return 0;
 10408  14F7  3000               	movlw	0
 10409  14F8  0008               	return
 10410  14F9                     __end_of_Sensor_isEnabled:	
 10411                           
 10412                           	psect	text56
 10413  142D                     __ptext56:	
 10414 ;; *************** function _Sensor_isActive *****************
 10415 ;; Defined at:
 10416 ;;		line 845 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;  sensor          1    wreg     PTR struct .
 10419 ;;		 -> mtouch_sensor(36), 
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;  sensor          1    2[COMMON] PTR struct .
 10422 ;;		 -> mtouch_sensor(36), 
 10423 ;; Return value:  Size  Location     Type
 10424 ;;                  1    wreg      _Bool 
 10425 ;; Registers used:
 10426 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10427 ;; Tracked objects:
 10428 ;;		On entry : 0/0
 10429 ;;		On exit  : 0/0
 10430 ;;		Unchanged: 0/0
 10431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10432 ;;      Params:         0       0       0       0       0       0       0       0
 10433 ;;      Locals:         1       0       0       0       0       0       0       0
 10434 ;;      Temps:          0       0       0       0       0       0       0       0
 10435 ;;      Totals:         1       0       0       0       0       0       0       0
 10436 ;;Total ram usage:        1 bytes
 10437 ;; Hardware stack levels used:    1
 10438 ;; Hardware stack levels required when called:    4
 10439 ;; This function calls:
 10440 ;;		Nothing
 10441 ;; This function is called by:
 10442 ;;		_Sensor_Acquisition
 10443 ;;		_Sensor_Acq_ExecutePacket
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function _Sensor_isActive
 10449  142D                     _Sensor_isActive:	
 10450                           
 10451                           ;incstack = 0
 10452                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10453                           ;Sensor_isActive@sensor stored from wreg
 10454  142D  00F2               	movwf	Sensor_isActive@sensor
 10455                           
 10456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 845: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 846:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 847:     if(sensor == ((void*)0))
 10457  142E  0872               	movf	Sensor_isActive@sensor,w
 10458  142F  1D03               	btfss	3,2
 10459  1430  2C33               	goto	l3720
 10460                           
 10461                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 848:         return 0;
 10462  1431  3000               	movlw	0
 10463  1432  0008               	return
 10464  1433                     l3720:	
 10465                           
 10466                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 850:     return (_Bool)sensor->active;
 10467  1433  0872               	movf	Sensor_isActive@sensor,w
 10468  1434  3E08               	addlw	8
 10469  1435  0086               	movwf	6
 10470  1436  3001               	movlw	1	; select bank2/3
 10471  1437  0087               	movwf	7
 10472  1438  0C01               	rrf	1,w
 10473  1439  3901               	andlw	1
 10474  143A  0008               	return
 10475  143B                     __end_of_Sensor_isActive:	
 10476                           
 10477                           	psect	text57
 10478  0D8A                     __ptext57:	
 10479 ;; *************** function _Sensor_autoCalibration *****************
 10480 ;; Defined at:
 10481 ;;		line 672 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;  sensor          1    wreg     PTR struct .
 10484 ;;		 -> mtouch_sensor(36), 
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;  sensor          1    1[BANK0 ] PTR struct .
 10487 ;;		 -> mtouch_sensor(36), 
 10488 ;;  adcIndex        1    0[BANK0 ] unsigned char 
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      void 
 10491 ;; Registers used:
 10492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10498 ;;      Params:         0       0       0       0       0       0       0       0
 10499 ;;      Locals:         0       2       0       0       0       0       0       0
 10500 ;;      Temps:          4       0       0       0       0       0       0       0
 10501 ;;      Totals:         4       2       0       0       0       0       0       0
 10502 ;;Total ram usage:        6 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    5
 10505 ;; This function calls:
 10506 ;;		_Sensor_getScanGroupIndex
 10507 ;;		_Sensor_isCalibratingAcqTime
 10508 ;;		_Sensor_setCalibratAcqTime
 10509 ;;		_Sensor_setCalibrated
 10510 ;;		_abs
 10511 ;; This function is called by:
 10512 ;;		_Sensor_Acq_ExecutePacket
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _Sensor_autoCalibration
 10518  0D8A                     _Sensor_autoCalibration:	
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10522                           ;Sensor_autoCalibration@sensor stored from wreg
 10523  0D8A  0020               	movlb	0	; select bank0
 10524  0D8B  00A1               	movwf	Sensor_autoCalibration@sensor
 10525                           
 10526                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 673: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 674:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
 10527  0D8C  0821               	movf	Sensor_autoCalibration@sensor,w
 10528  0D8D  3197  27A5  318D   	fcall	_Sensor_getScanGroupIndex
 10529  0D90  00F6               	movwf	??_Sensor_autoCalibration
 10530  0D91  0876               	movf	??_Sensor_autoCalibration,w
 10531  0D92  0020               	movlb	0	; select bank0
 10532  0D93  00A0               	movwf	Sensor_autoCalibration@adcIndex
 10533                           
 10534                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
 10535  0D94  0821               	movf	Sensor_autoCalibration@sensor,w
 10536  0D95  3193  23E5  318D   	fcall	_Sensor_isCalibratingAcqTime
 10537  0D98  3A00               	xorlw	0
 10538  0D99  1D03               	skipz
 10539  0D9A  2DCE               	goto	l5482
 10540                           
 10541                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 677:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 678:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
 10542  0D9B  0020               	movlb	0	; select bank0
 10543  0D9C  3520               	lslf	Sensor_autoCalibration@adcIndex,w
 10544  0D9D  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 10545  0D9E  0086               	movwf	6
 10546  0D9F  0187               	clrf	7
 10547  0DA0  3F40               	moviw [0]fsr1
 10548  0DA1  00F6               	movwf	??_Sensor_autoCalibration
 10549  0DA2  3F41               	moviw [1]fsr1
 10550  0DA3  00F7               	movwf	??_Sensor_autoCalibration+1
 10551  0DA4  0821               	movf	Sensor_autoCalibration@sensor,w
 10552  0DA5  3E04               	addlw	4
 10553  0DA6  0086               	movwf	6
 10554  0DA7  3001               	movlw	1	; select bank2/3
 10555  0DA8  0087               	movwf	7
 10556  0DA9  0801               	movf	1,w
 10557  0DAA  00F8               	movwf	??_Sensor_autoCalibration+2
 10558  0DAB  01F9               	clrf	??_Sensor_autoCalibration+3
 10559  0DAC  3009               	movlw	9
 10560  0DAD                     u3585:	
 10561  0DAD  35F8               	lslf	??_Sensor_autoCalibration+2,f
 10562  0DAE  0DF9               	rlf	??_Sensor_autoCalibration+3,f
 10563  0DAF  0B89               	decfsz	9,f
 10564  0DB0  2DAD               	goto	u3585
 10565  0DB1  0877               	movf	??_Sensor_autoCalibration+1,w
 10566  0DB2  0279               	subwf	??_Sensor_autoCalibration+3,w
 10567  0DB3  1D03               	skipz
 10568  0DB4  2DB7               	goto	u3595
 10569  0DB5  0876               	movf	??_Sensor_autoCalibration,w
 10570  0DB6  0278               	subwf	??_Sensor_autoCalibration+2,w
 10571  0DB7                     u3595:	
 10572  0DB7  1803               	skipnc
 10573  0DB8  2DCA               	goto	l5480
 10574                           
 10575                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 679:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 680:             if(++(sensor->addcap) >= (uint8_t)0x0F)
 10576  0DB9  3001               	movlw	1
 10577  0DBA  00F6               	movwf	??_Sensor_autoCalibration
 10578  0DBB  0821               	movf	Sensor_autoCalibration@sensor,w
 10579  0DBC  3E05               	addlw	5
 10580  0DBD  0086               	movwf	6
 10581  0DBE  3001               	movlw	1	; select bank2/3
 10582  0DBF  0087               	movwf	7
 10583  0DC0  0876               	movf	??_Sensor_autoCalibration,w
 10584  0DC1  0781               	addwf	1,f
 10585  0DC2  300F               	movlw	15
 10586  0DC3  0201               	subwf	1,w
 10587  0DC4  1C03               	skipc
 10588  0DC5  0008               	return
 10589                           
 10590                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 681:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
 10591  0DC6  0821               	movf	Sensor_autoCalibration@sensor,w
 10592  0DC7  3194  2467         	fcall	_Sensor_setCalibratAcqTime
 10593  0DC9  0008               	return
 10594  0DCA                     l5480:	
 10595                           
 10596                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 684:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 685:              Sensor_setCalibratAcqTime(sensor);
 10597  0DCA  0821               	movf	Sensor_autoCalibration@sensor,w
 10598  0DCB  3194  2467         	fcall	_Sensor_setCalibratAcqTime
 10599  0DCD  0008               	return
 10600  0DCE                     l5482:	
 10601                           
 10602                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 689:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 690:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 10603  0DCE  0020               	movlb	0	; select bank0
 10604  0DCF  0821               	movf	Sensor_autoCalibration@sensor,w
 10605  0DD0  3E04               	addlw	4
 10606  0DD1  0086               	movwf	6
 10607  0DD2  3001               	movlw	1	; select bank2/3
 10608  0DD3  0087               	movwf	7
 10609  0DD4  0801               	movf	1,w
 10610  0DD5  00F6               	movwf	??_Sensor_autoCalibration
 10611  0DD6  01F7               	clrf	??_Sensor_autoCalibration+1
 10612  0DD7  35F6               	lslf	??_Sensor_autoCalibration,f
 10613  0DD8  0DF7               	rlf	??_Sensor_autoCalibration+1,f
 10614  0DD9  0821               	movf	Sensor_autoCalibration@sensor,w
 10615  0DDA  3E06               	addlw	6
 10616  0DDB  0086               	movwf	6
 10617  0DDC  3001               	movlw	1	; select bank2/3
 10618  0DDD  0087               	movwf	7
 10619  0DDE  3520               	lslf	Sensor_autoCalibration@adcIndex,w
 10620  0DDF  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 10621  0DE0  0084               	movwf	4
 10622  0DE1  0185               	clrf	5
 10623  0DE2  3F40               	moviw [0]fsr1
 10624  0DE3  0200               	subwf	0,w
 10625  0DE4  00F2               	movwf	abs@a
 10626  0DE5  3101               	addfsr 0,1
 10627  0DE6  3F41               	moviw [1]fsr1
 10628  0DE7  3B00               	subwfb	0,w
 10629  0DE8  00F3               	movwf	abs@a+1
 10630  0DE9  3195  25AD  318D   	fcall	_abs
 10631  0DEC  0877               	movf	??_Sensor_autoCalibration+1,w
 10632  0DED  0273               	subwf	?_abs+1,w
 10633  0DEE  1D03               	skipz
 10634  0DEF  2DF2               	goto	u3615
 10635  0DF0  0876               	movf	??_Sensor_autoCalibration,w
 10636  0DF1  0272               	subwf	?_abs,w
 10637  0DF2                     u3615:	
 10638  0DF2  1803               	skipnc
 10639  0DF3  2E02               	goto	l5488
 10640                           
 10641                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 691:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 692:             sensor->precharge_time = (mtouch_sensor_time_t)32;
 10642  0DF4  3020               	movlw	32
 10643  0DF5  00F6               	movwf	??_Sensor_autoCalibration
 10644  0DF6  0020               	movlb	0	; select bank0
 10645  0DF7  0821               	movf	Sensor_autoCalibration@sensor,w
 10646  0DF8  3E02               	addlw	2
 10647  0DF9  0086               	movwf	6
 10648  0DFA  3001               	movlw	1	; select bank2/3
 10649  0DFB  0087               	movwf	7
 10650  0DFC  0876               	movf	??_Sensor_autoCalibration,w
 10651  0DFD  0081               	movwf	1
 10652                           
 10653                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:             Sensor_setCalibrated(senso
      +                          r);
 10654  0DFE  0821               	movf	Sensor_autoCalibration@sensor,w
 10655  0DFF  3194  241F         	fcall	_Sensor_setCalibrated
 10656                           
 10657                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 694:         }
 10658  0E01  0008               	return
 10659  0E02                     l5488:	
 10660                           
 10661                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 696:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 700:             sensor->acquisition_time += (uint8_t)2;
 10662  0E02  3002               	movlw	2
 10663  0E03  00F6               	movwf	??_Sensor_autoCalibration
 10664  0E04  0020               	movlb	0	; select bank0
 10665  0E05  0821               	movf	Sensor_autoCalibration@sensor,w
 10666  0E06  3E03               	addlw	3
 10667  0E07  0086               	movwf	6
 10668  0E08  3001               	movlw	1	; select bank2/3
 10669  0E09  0087               	movwf	7
 10670  0E0A  0876               	movf	??_Sensor_autoCalibration,w
 10671  0E0B  0781               	addwf	1,f
 10672                           
 10673                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 10674  0E0C  0821               	movf	Sensor_autoCalibration@sensor,w
 10675  0E0D  3E03               	addlw	3
 10676  0E0E  0086               	movwf	6
 10677  0E0F  3001               	movlw	1	; select bank2/3
 10678  0E10  0087               	movwf	7
 10679  0E11  3020               	movlw	32
 10680  0E12  0201               	subwf	1,w
 10681  0E13  1C03               	skipc
 10682  0E14  0008               	return
 10683                           
 10684                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 702:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 703:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 10685  0E15  3020               	movlw	32
 10686  0E16  00F6               	movwf	??_Sensor_autoCalibration
 10687  0E17  0821               	movf	Sensor_autoCalibration@sensor,w
 10688  0E18  3E02               	addlw	2
 10689  0E19  0086               	movwf	6
 10690  0E1A  3001               	movlw	1	; select bank2/3
 10691  0E1B  0087               	movwf	7
 10692  0E1C  0876               	movf	??_Sensor_autoCalibration,w
 10693  0E1D  0081               	movwf	1
 10694                           
 10695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 704:                 Sensor_setCalibrated(s
      +                          ensor);
 10696  0E1E  0821               	movf	Sensor_autoCalibration@sensor,w
 10697  0E1F  3194  241F         	fcall	_Sensor_setCalibrated
 10698  0E21  0008               	return
 10699  0E22                     __end_of_Sensor_autoCalibration:	
 10700                           
 10701                           	psect	text58
 10702  15AD                     __ptext58:	
 10703 ;; *************** function _abs *****************
 10704 ;; Defined at:
 10705 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;  a               2    2[COMMON] int 
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;		None
 10710 ;; Return value:  Size  Location     Type
 10711 ;;                  2    2[COMMON] int 
 10712 ;; Registers used:
 10713 ;;		wreg, status,2, status,0
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10719 ;;      Params:         2       0       0       0       0       0       0       0
 10720 ;;      Locals:         0       0       0       0       0       0       0       0
 10721 ;;      Temps:          2       0       0       0       0       0       0       0
 10722 ;;      Totals:         4       0       0       0       0       0       0       0
 10723 ;;Total ram usage:        4 bytes
 10724 ;; Hardware stack levels used:    1
 10725 ;; Hardware stack levels required when called:    4
 10726 ;; This function calls:
 10727 ;;		Nothing
 10728 ;; This function is called by:
 10729 ;;		_Sensor_postAcquisitionProcess
 10730 ;;		_Sensor_Acq_ExecutePacket
 10731 ;;		_Sensor_autoCalibration
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           
 10736                           ;psect for function _abs
 10737  15AD                     _abs:	
 10738                           
 10739                           ;incstack = 0
 10740                           ; Regs used in _abs: [wreg+status,2+status,0]
 10741  15AD  0873               	movf	abs@a+1,w
 10742  15AE  3A80               	xorlw	128
 10743  15AF  00F4               	movwf	??_abs
 10744  15B0  3080               	movlw	128
 10745  15B1  0274               	subwf	??_abs,w
 10746  15B2  1D03               	skipz
 10747  15B3  2DB6               	goto	u3465
 10748  15B4  3001               	movlw	1
 10749  15B5  0272               	subwf	abs@a,w
 10750  15B6                     u3465:	
 10751  15B6  1803               	skipnc
 10752  15B7  0008               	return
 10753  15B8  0972               	comf	abs@a,w
 10754  15B9  00F4               	movwf	??_abs
 10755  15BA  0973               	comf	abs@a+1,w
 10756  15BB  00F5               	movwf	??_abs+1
 10757  15BC  0AF4               	incf	??_abs,f
 10758  15BD  1903               	skipnz
 10759  15BE  0AF5               	incf	??_abs+1,f
 10760  15BF  0874               	movf	??_abs,w
 10761  15C0  00F2               	movwf	?_abs
 10762  15C1  0875               	movf	??_abs+1,w
 10763  15C2  00F3               	movwf	?_abs+1
 10764  15C3  0008               	return
 10765  15C4                     __end_of_abs:	
 10766                           
 10767                           	psect	text59
 10768  141F                     __ptext59:	
 10769 ;; *************** function _Sensor_setCalibrated *****************
 10770 ;; Defined at:
 10771 ;;		line 880 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10772 ;; Parameters:    Size  Location     Type
 10773 ;;  sensor          1    wreg     PTR struct .
 10774 ;;		 -> mtouch_sensor(36), 
 10775 ;; Auto vars:     Size  Location     Type
 10776 ;;  sensor          1    2[COMMON] PTR struct .
 10777 ;;		 -> mtouch_sensor(36), 
 10778 ;; Return value:  Size  Location     Type
 10779 ;;                  1    wreg      void 
 10780 ;; Registers used:
 10781 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10782 ;; Tracked objects:
 10783 ;;		On entry : 0/0
 10784 ;;		On exit  : 0/0
 10785 ;;		Unchanged: 0/0
 10786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10787 ;;      Params:         0       0       0       0       0       0       0       0
 10788 ;;      Locals:         1       0       0       0       0       0       0       0
 10789 ;;      Temps:          0       0       0       0       0       0       0       0
 10790 ;;      Totals:         1       0       0       0       0       0       0       0
 10791 ;;Total ram usage:        1 bytes
 10792 ;; Hardware stack levels used:    1
 10793 ;; Hardware stack levels required when called:    4
 10794 ;; This function calls:
 10795 ;;		Nothing
 10796 ;; This function is called by:
 10797 ;;		_Sensor_autoCalibration
 10798 ;; This function uses a non-reentrant model
 10799 ;;
 10800                           
 10801                           
 10802                           ;psect for function _Sensor_setCalibrated
 10803  141F                     _Sensor_setCalibrated:	
 10804                           
 10805                           ;incstack = 0
 10806                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10807                           ;Sensor_setCalibrated@sensor stored from wreg
 10808  141F  00F2               	movwf	Sensor_setCalibrated@sensor
 10809                           
 10810                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 880: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          881: {;mcc_generated_files/mtouch/mtouch_sensor.c: 882:     sensor->calibrated = 1;
 10811  1420  0872               	movf	Sensor_setCalibrated@sensor,w
 10812  1421  3E08               	addlw	8
 10813  1422  0086               	movwf	6
 10814  1423  3001               	movlw	1	; select bank2/3
 10815  1424  0087               	movwf	7
 10816  1425  1501               	bsf	1,2
 10817                           
 10818                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 883:     sensor->acqTime_cal = 0;
 10819  1426  0872               	movf	Sensor_setCalibrated@sensor,w
 10820  1427  3E08               	addlw	8
 10821  1428  0086               	movwf	6
 10822  1429  3001               	movlw	1	; select bank2/3
 10823  142A  0087               	movwf	7
 10824  142B  1201               	bcf	1,4
 10825  142C  0008               	return
 10826  142D                     __end_of_Sensor_setCalibrated:	
 10827                           
 10828                           	psect	text60
 10829  1467                     __ptext60:	
 10830 ;; *************** function _Sensor_setCalibratAcqTime *****************
 10831 ;; Defined at:
 10832 ;;		line 886 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;  sensor          1    wreg     PTR struct .
 10835 ;;		 -> mtouch_sensor(36), 
 10836 ;; Auto vars:     Size  Location     Type
 10837 ;;  sensor          1    2[COMMON] PTR struct .
 10838 ;;		 -> mtouch_sensor(36), 
 10839 ;; Return value:  Size  Location     Type
 10840 ;;                  1    wreg      void 
 10841 ;; Registers used:
 10842 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10843 ;; Tracked objects:
 10844 ;;		On entry : 0/0
 10845 ;;		On exit  : 0/0
 10846 ;;		Unchanged: 0/0
 10847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10848 ;;      Params:         0       0       0       0       0       0       0       0
 10849 ;;      Locals:         1       0       0       0       0       0       0       0
 10850 ;;      Temps:          0       0       0       0       0       0       0       0
 10851 ;;      Totals:         1       0       0       0       0       0       0       0
 10852 ;;Total ram usage:        1 bytes
 10853 ;; Hardware stack levels used:    1
 10854 ;; Hardware stack levels required when called:    4
 10855 ;; This function calls:
 10856 ;;		Nothing
 10857 ;; This function is called by:
 10858 ;;		_Sensor_autoCalibration
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           
 10863                           ;psect for function _Sensor_setCalibratAcqTime
 10864  1467                     _Sensor_setCalibratAcqTime:	
 10865                           
 10866                           ;incstack = 0
 10867                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10868                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 10869  1467  00F2               	movwf	Sensor_setCalibratAcqTime@sensor
 10870                           
 10871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 886: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 887: {;mcc_generated_files/mtouch/mtouch_sensor.c: 888:     sensor->acqTime_cal = 1
      +                          ;
 10872  1468  0872               	movf	Sensor_setCalibratAcqTime@sensor,w
 10873  1469  3E08               	addlw	8
 10874  146A  0086               	movwf	6
 10875  146B  3001               	movlw	1	; select bank2/3
 10876  146C  0087               	movwf	7
 10877  146D  1601               	bsf	1,4
 10878                           
 10879                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 889:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 10880  146E  0872               	movf	Sensor_setCalibratAcqTime@sensor,w
 10881  146F  3E03               	addlw	3
 10882  1470  0086               	movwf	6
 10883  1471  3001               	movlw	1	; select bank2/3
 10884  1472  0087               	movwf	7
 10885  1473  0181               	clrf	1
 10886  1474  0A81               	incf	1,f
 10887  1475  0008               	return
 10888  1476                     __end_of_Sensor_setCalibratAcqTime:	
 10889                           
 10890                           	psect	text61
 10891  13E5                     __ptext61:	
 10892 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 10893 ;; Defined at:
 10894 ;;		line 892 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;  sensor          1    wreg     PTR struct .
 10897 ;;		 -> mtouch_sensor(36), 
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;  sensor          1    2[COMMON] PTR struct .
 10900 ;;		 -> mtouch_sensor(36), 
 10901 ;; Return value:  Size  Location     Type
 10902 ;;                  1    wreg      _Bool 
 10903 ;; Registers used:
 10904 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10905 ;; Tracked objects:
 10906 ;;		On entry : 0/0
 10907 ;;		On exit  : 0/0
 10908 ;;		Unchanged: 0/0
 10909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10910 ;;      Params:         0       0       0       0       0       0       0       0
 10911 ;;      Locals:         1       0       0       0       0       0       0       0
 10912 ;;      Temps:          0       0       0       0       0       0       0       0
 10913 ;;      Totals:         1       0       0       0       0       0       0       0
 10914 ;;Total ram usage:        1 bytes
 10915 ;; Hardware stack levels used:    1
 10916 ;; Hardware stack levels required when called:    4
 10917 ;; This function calls:
 10918 ;;		Nothing
 10919 ;; This function is called by:
 10920 ;;		_Sensor_loadADCSettings
 10921 ;;		_Sensor_autoCalibration
 10922 ;; This function uses a non-reentrant model
 10923 ;;
 10924                           
 10925                           
 10926                           ;psect for function _Sensor_isCalibratingAcqTime
 10927  13E5                     _Sensor_isCalibratingAcqTime:	
 10928                           
 10929                           ;incstack = 0
 10930                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10931                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 10932  13E5  00F2               	movwf	Sensor_isCalibratingAcqTime@sensor
 10933                           
 10934                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 892: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 893: {;mcc_generated_files/mtouch/mtouch_sensor.c: 894:     return (_Bool)sensor
      +                          ->acqTime_cal;
 10935  13E6  0872               	movf	Sensor_isCalibratingAcqTime@sensor,w
 10936  13E7  3E08               	addlw	8
 10937  13E8  0086               	movwf	6
 10938  13E9  3001               	movlw	1	; select bank2/3
 10939  13EA  0087               	movwf	7
 10940  13EB  0E01               	swapf	1,w
 10941  13EC  3901               	andlw	1
 10942  13ED  0008               	return
 10943  13EE                     __end_of_Sensor_isCalibratingAcqTime:	
 10944                           
 10945                           	psect	text62
 10946  17A5                     __ptext62:	
 10947 ;; *************** function _Sensor_getScanGroupIndex *****************
 10948 ;; Defined at:
 10949 ;;		line 342 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10950 ;; Parameters:    Size  Location     Type
 10951 ;;  sensor          1    wreg     PTR struct .
 10952 ;;		 -> mtouch_sensor(36), 
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;  sensor          1    4[COMMON] PTR struct .
 10955 ;;		 -> mtouch_sensor(36), 
 10956 ;;  sensorGroup     1    5[COMMON] unsigned char 
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      unsigned char 
 10959 ;; Registers used:
 10960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10966 ;;      Params:         0       0       0       0       0       0       0       0
 10967 ;;      Locals:         2       0       0       0       0       0       0       0
 10968 ;;      Temps:          2       0       0       0       0       0       0       0
 10969 ;;      Totals:         4       0       0       0       0       0       0       0
 10970 ;;Total ram usage:        4 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; Hardware stack levels required when called:    4
 10973 ;; This function calls:
 10974 ;;		Nothing
 10975 ;; This function is called by:
 10976 ;;		_Sensor_postAcquisitionProcess
 10977 ;;		_Sensor_autoCalibration
 10978 ;;		_Sensor_RawSample_Update
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           
 10983                           ;psect for function _Sensor_getScanGroupIndex
 10984  17A5                     _Sensor_getScanGroupIndex:	
 10985                           
 10986                           ;incstack = 0
 10987                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 10988                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 10989  17A5  00F4               	movwf	Sensor_getScanGroupIndex@sensor
 10990                           
 10991                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 343: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 344:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 345:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
 10992  17A6  01F5               	clrf	Sensor_getScanGroupIndex@sensorGroup
 10993  17A7                     l5378:	
 10994                           
 10995                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 347:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 10996  17A7  0875               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10997  17A8  00F2               	movwf	??_Sensor_getScanGroupIndex
 10998  17A9  01F3               	clrf	??_Sensor_getScanGroupIndex+1
 10999  17AA  35F2               	lslf	??_Sensor_getScanGroupIndex,f
 11000  17AB  0DF3               	rlf	??_Sensor_getScanGroupIndex+1,f
 11001  17AC  3064               	movlw	low (_sensor_scan_group| (0+32768))
 11002  17AD  0772               	addwf	??_Sensor_getScanGroupIndex,w
 11003  17AE  0084               	movwf	4
 11004  17AF  3098               	movlw	high (_sensor_scan_group| (0+32768))
 11005  17B0  3D73               	addwfc	??_Sensor_getScanGroupIndex+1,w
 11006  17B1  0085               	movwf	5
 11007  17B2  0800               	movf	0,w	;code access
 11008  17B3  0674               	xorwf	Sensor_getScanGroupIndex@sensor,w
 11009  17B4  1D03               	skipz
 11010  17B5  2FB8               	goto	l5384
 11011  17B6                     l5380:	
 11012                           
 11013                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 348:             return 0;
 11014  17B6  3000               	movlw	0
 11015  17B7  0008               	return
 11016  17B8                     l5384:	
 11017                           
 11018                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 349:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 11019  17B8  0875               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 11020  17B9  00F2               	movwf	??_Sensor_getScanGroupIndex
 11021  17BA  01F3               	clrf	??_Sensor_getScanGroupIndex+1
 11022  17BB  35F2               	lslf	??_Sensor_getScanGroupIndex,f
 11023  17BC  0DF3               	rlf	??_Sensor_getScanGroupIndex+1,f
 11024  17BD  3065               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 11025  17BE  0772               	addwf	??_Sensor_getScanGroupIndex,w
 11026  17BF  0084               	movwf	4
 11027  17C0  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 11028  17C1  3D73               	addwfc	??_Sensor_getScanGroupIndex+1,w
 11029  17C2  0085               	movwf	5
 11030  17C3  0800               	movf	0,w	;code access
 11031  17C4  0674               	xorwf	Sensor_getScanGroupIndex@sensor,w
 11032  17C5  1D03               	skipz
 11033  17C6  2FC9               	goto	l5390
 11034                           
 11035                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 350:             return 1;
 11036  17C7  3001               	movlw	1
 11037  17C8  0008               	return
 11038  17C9                     l5390:	
 11039                           
 11040                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     }
 11041  17C9  3001               	movlw	1
 11042  17CA  00F2               	movwf	??_Sensor_getScanGroupIndex
 11043  17CB  0872               	movf	??_Sensor_getScanGroupIndex,w
 11044  17CC  07F5               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 11045  17CD  3002               	movlw	2
 11046  17CE  0275               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
 11047  17CF  1803               	btfsc	3,0
 11048  17D0  2FB6               	goto	l5380
 11049  17D1  2FA7               	goto	l5378
 11050  17D2                     __end_of_Sensor_getScanGroupIndex:	
 11051                           
 11052                           	psect	text63
 11053  14A6                     __ptext63:	
 11054 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 11055 ;; Defined at:
 11056 ;;		line 251 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11057 ;; Parameters:    Size  Location     Type
 11058 ;;		None
 11059 ;; Auto vars:     Size  Location     Type
 11060 ;;		None
 11061 ;; Return value:  Size  Location     Type
 11062 ;;                  1    wreg      void 
 11063 ;; Registers used:
 11064 ;;		wreg, status,2, status,0
 11065 ;; Tracked objects:
 11066 ;;		On entry : 0/0
 11067 ;;		On exit  : 0/0
 11068 ;;		Unchanged: 0/0
 11069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11070 ;;      Params:         0       0       0       0       0       0       0       0
 11071 ;;      Locals:         0       0       0       0       0       0       0       0
 11072 ;;      Temps:          0       0       0       0       0       0       0       0
 11073 ;;      Totals:         0       0       0       0       0       0       0       0
 11074 ;;Total ram usage:        0 bytes
 11075 ;; Hardware stack levels used:    1
 11076 ;; Hardware stack levels required when called:    4
 11077 ;; This function calls:
 11078 ;;		Nothing
 11079 ;; This function is called by:
 11080 ;;		_MTOUCH_Initialize
 11081 ;;		_Sensor_Acq_ExecutePacket
 11082 ;; This function uses a non-reentrant model
 11083 ;;
 11084                           
 11085                           
 11086                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 11087  14A6                     _MTOUCH_Sensor_Scan_Initialize:	
 11088                           
 11089                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 253:     T2CONbits.T2CKPS = 0x0;
 11090                           
 11091                           ;incstack = 0
 11092                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 11093  14A6  30FC               	movlw	-4
 11094  14A7  0020               	movlb	0	; select bank0
 11095  14A8  059C               	andwf	28,f	;volatile
 11096                           
 11097                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 255:     AD1CON0 = (uint8_t)0;
 11098  14A9  002E               	movlb	14	; select bank14
 11099  14AA  0191               	clrf	17	;volatile
 11100                           
 11101                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 256:     AD2CON0 = (uint8_t)0;
 11102  14AB  002F               	movlb	15	; select bank15
 11103  14AC  0191               	clrf	17	;volatile
 11104                           
 11105                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 257:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 11106  14AD  3090               	movlw	144
 11107  14AE  002E               	movlb	14	; select bank14
 11108  14AF  0092               	movwf	18	;volatile
 11109                           
 11110                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 258:     AD1CON3 = (uint8_t)0b01000000;
 11111  14B0  3040               	movlw	64
 11112  14B1  0094               	movwf	20	;volatile
 11113                           
 11114                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 259:     AD2CON3 = (uint8_t)0b01000000;
 11115  14B2  3040               	movlw	64
 11116  14B3  002F               	movlb	15	; select bank15
 11117  14B4  0094               	movwf	20	;volatile
 11118  14B5  0008               	return
 11119  14B6                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 11120                           
 11121                           	psect	text64
 11122  1496                     __ptext64:	
 11123 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 11124 ;; Defined at:
 11125 ;;		line 210 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;		None
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;  button          1    0        enum E3070
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  1    wreg      void 
 11132 ;; Registers used:
 11133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11139 ;;      Params:         0       0       0       0       0       0       0       0
 11140 ;;      Locals:         0       0       0       0       0       0       0       0
 11141 ;;      Temps:          0       0       0       0       0       0       0       0
 11142 ;;      Totals:         0       0       0       0       0       0       0       0
 11143 ;;Total ram usage:        0 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; Hardware stack levels required when called:    9
 11146 ;; This function calls:
 11147 ;;		_Button_Service
 11148 ;; This function is called by:
 11149 ;;		_MTOUCH_Service_Mainloop
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           
 11154                           ;psect for function _MTOUCH_Button_ServiceAll
 11155  1496                     _MTOUCH_Button_ServiceAll:	
 11156                           
 11157                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 219:     Button_Service(0);
 11158                           
 11159                           ;incstack = 0
 11160                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11161  1496  3000               	movlw	0
 11162  1497  318A  220B  3194   	fcall	_Button_Service
 11163                           
 11164                           ;mcc_generated_files/mtouch/mtouch_button.c: 220:     Button_Service(1);
 11165  149A  3001               	movlw	1
 11166  149B  318A  220B  3194   	fcall	_Button_Service
 11167                           
 11168                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     Button_Service(2);
 11169  149E  3002               	movlw	2
 11170  149F  318A  220B  3194   	fcall	_Button_Service
 11171                           
 11172                           ;mcc_generated_files/mtouch/mtouch_button.c: 222:     Button_Service(3);
 11173  14A2  3003               	movlw	3
 11174  14A3  318A  220B         	fcall	_Button_Service
 11175  14A5  0008               	return
 11176  14A6                     __end_of_MTOUCH_Button_ServiceAll:	
 11177                           
 11178                           	psect	text65
 11179  0A0B                     __ptext65:	
 11180 ;; *************** function _Button_Service *****************
 11181 ;; Defined at:
 11182 ;;		line 225 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11183 ;; Parameters:    Size  Location     Type
 11184 ;;  name            1    wreg     enum E3070
 11185 ;; Auto vars:     Size  Location     Type
 11186 ;;  name            1   11[BANK0 ] enum E3070
 11187 ;;  button          1   12[BANK0 ] PTR struct .
 11188 ;;		 -> mtouch_button(68), 
 11189 ;; Return value:  Size  Location     Type
 11190 ;;                  1    wreg      void 
 11191 ;; Registers used:
 11192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11193 ;; Tracked objects:
 11194 ;;		On entry : 0/0
 11195 ;;		On exit  : 0/0
 11196 ;;		Unchanged: 0/0
 11197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11198 ;;      Params:         0       0       0       0       0       0       0       0
 11199 ;;      Locals:         0       2       0       0       0       0       0       0
 11200 ;;      Temps:          0       1       0       0       0       0       0       0
 11201 ;;      Totals:         0       3       0       0       0       0       0       0
 11202 ;;Total ram usage:        3 bytes
 11203 ;; Hardware stack levels used:    1
 11204 ;; Hardware stack levels required when called:    8
 11205 ;; This function calls:
 11206 ;;		_Button_Deviation_Update
 11207 ;;		_Button_Reading_Update
 11208 ;;		_Button_State_Initializing
 11209 ;;		_Button_State_NotPressed
 11210 ;;		_Button_State_Pressed
 11211 ;;		_MTOUCH_Button_Initialize
 11212 ;;		_MTOUCH_Sensor_isCalibrated
 11213 ;;		_MTOUCH_Sensor_wasSampled
 11214 ;; This function is called by:
 11215 ;;		_MTOUCH_Button_ServiceAll
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           
 11220                           ;psect for function _Button_Service
 11221  0A0B                     _Button_Service:	
 11222                           
 11223                           ;incstack = 0
 11224                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11225                           ;Button_Service@name stored from wreg
 11226  0A0B  0020               	movlb	0	; select bank0
 11227  0A0C  00AB               	movwf	Button_Service@name
 11228                           
 11229                           ;mcc_generated_files/mtouch/mtouch_button.c: 225: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 226: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 227:     mtouch_button_t* button = &mtouch_button[name];
 11230  0A0D  0E2B               	swapf	Button_Service@name,w
 11231  0A0E  39F0               	andlw	240
 11232  0A0F  072B               	addwf	Button_Service@name,w
 11233  0A10  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 11234  0A11  00AA               	movwf	??_Button_Service
 11235  0A12  082A               	movf	??_Button_Service,w
 11236  0A13  00AC               	movwf	Button_Service@button
 11237                           
 11238                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 11239  0A14  0A2C               	incf	Button_Service@button,w
 11240  0A15  0086               	movwf	6
 11241  0A16  3001               	movlw	1	; select bank2/3
 11242  0A17  0087               	movwf	7
 11243  0A18  0801               	movf	1,w
 11244  0A19  3194  2458  318A   	fcall	_MTOUCH_Sensor_wasSampled
 11245  0A1C  3A00               	xorlw	0
 11246  0A1D  1903               	skipnz
 11247  0A1E  0008               	return
 11248  0A1F  0020               	movlb	0	; select bank0
 11249  0A20  0A2C               	incf	Button_Service@button,w
 11250  0A21  0086               	movwf	6
 11251  0A22  3001               	movlw	1	; select bank2/3
 11252  0A23  0087               	movwf	7
 11253  0A24  0801               	movf	1,w
 11254  0A25  3194  2486  318A   	fcall	_MTOUCH_Sensor_isCalibrated
 11255  0A28  3A00               	xorlw	0
 11256  0A29  1903               	skipnz
 11257  0A2A  0008               	return
 11258                           
 11259                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         Button_Reading_Update(button);
 11260  0A2B  0020               	movlb	0	; select bank0
 11261  0A2C  082C               	movf	Button_Service@button,w
 11262  0A2D  3194  2403  318A   	fcall	_Button_Reading_Update
 11263                           
 11264                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         Button_Deviation_Update(button
      +                          );
 11265  0A30  0020               	movlb	0	; select bank0
 11266  0A31  082C               	movf	Button_Service@button,w
 11267  0A32  318B  23E5  318A   	fcall	_Button_Deviation_Update
 11268                           
 11269                           ;mcc_generated_files/mtouch/mtouch_button.c: 234:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 11270  0A35  0020               	movlb	0	; select bank0
 11271  0A36  082C               	movf	Button_Service@button,w
 11272  0A37  3E02               	addlw	2
 11273  0A38  0086               	movwf	6
 11274  0A39  3001               	movlw	1	; select bank2/3
 11275  0A3A  0087               	movwf	7
 11276  0A3B  3003               	movlw	3
 11277  0A3C  0201               	subwf	1,w
 11278  0A3D  1C03               	skipc
 11279  0A3E  2A47               	goto	l6092
 11280                           
 11281                           ;mcc_generated_files/mtouch/mtouch_button.c: 235:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 236:             MTOUCH_Button_Initialize(button->name);
 11282  0A3F  082C               	movf	Button_Service@button,w
 11283  0A40  0086               	movwf	6
 11284  0A41  3001               	movlw	1	; select bank2/3
 11285  0A42  0087               	movwf	7
 11286  0A43  0801               	movf	1,w
 11287  0A44  3188  20CC  318A   	fcall	_MTOUCH_Button_Initialize
 11288  0A47                     l6092:	
 11289                           
 11290                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 11291  0A47  0020               	movlb	0	; select bank0
 11292  0A48  082C               	movf	Button_Service@button,w
 11293  0A49  00AA               	movwf	??_Button_Service
 11294  0A4A  082A               	movf	??_Button_Service,w
 11295  0A4B  00A5               	movwf	Button_State_Pressed@button
 11296  0A4C  082C               	movf	Button_Service@button,w
 11297  0A4D  3E02               	addlw	2
 11298  0A4E  0086               	movwf	6
 11299  0A4F  3001               	movlw	1	; select bank2/3
 11300  0A50  0087               	movwf	7
 11301  0A51  3501               	lslf	1,w
 11302  0A52  3EE4               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 11303  0A53  0086               	movwf	6
 11304  0A54  0187               	clrf	7
 11305  0A55  3F41               	moviw [1]fsr1
 11306  0A56  008A               	movwf	10
 11307  0A57  3F40               	moviw [0]fsr1
 11308  0A58  000A               	callw
 11309  0A59  318A               	pagesel	$
 11310  0A5A  0008               	return
 11311  0A5B                     __end_of_Button_Service:	
 11312                           
 11313                           	psect	text66
 11314  1458                     __ptext66:	
 11315 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 11316 ;; Defined at:
 11317 ;;		line 914 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11318 ;; Parameters:    Size  Location     Type
 11319 ;;  sensor          1    wreg     enum E2871
 11320 ;; Auto vars:     Size  Location     Type
 11321 ;;  sensor          1    7[COMMON] enum E2871
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  1    wreg      _Bool 
 11324 ;; Registers used:
 11325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11331 ;;      Params:         0       0       0       0       0       0       0       0
 11332 ;;      Locals:         1       0       0       0       0       0       0       0
 11333 ;;      Temps:          1       0       0       0       0       0       0       0
 11334 ;;      Totals:         2       0       0       0       0       0       0       0
 11335 ;;Total ram usage:        2 bytes
 11336 ;; Hardware stack levels used:    1
 11337 ;; Hardware stack levels required when called:    5
 11338 ;; This function calls:
 11339 ;;		___bmul
 11340 ;; This function is called by:
 11341 ;;		_Button_Service
 11342 ;; This function uses a non-reentrant model
 11343 ;;
 11344                           
 11345                           
 11346                           ;psect for function _MTOUCH_Sensor_wasSampled
 11347  1458                     _MTOUCH_Sensor_wasSampled:	
 11348                           
 11349                           ;incstack = 0
 11350                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11351                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 11352  1458  00F7               	movwf	MTOUCH_Sensor_wasSampled@sensor
 11353                           
 11354                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 914: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 915: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 916:     return (_Bool)mtouch_sensor[sensor].sampled;
 11355  1459  3009               	movlw	9
 11356  145A  00F6               	movwf	??_MTOUCH_Sensor_wasSampled
 11357  145B  0876               	movf	??_MTOUCH_Sensor_wasSampled,w
 11358  145C  00F2               	movwf	___bmul@multiplicand
 11359  145D  0877               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 11360  145E  3194  24C6         	fcall	___bmul
 11361  1460  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11362  1461  0086               	movwf	6
 11363  1462  3001               	movlw	1	; select bank2/3
 11364  1463  0087               	movwf	7
 11365  1464  0801               	movf	1,w
 11366  1465  3901               	andlw	1
 11367  1466  0008               	return
 11368  1467                     __end_of_MTOUCH_Sensor_wasSampled:	
 11369                           
 11370                           	psect	text67
 11371  1486                     __ptext67:	
 11372 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 11373 ;; Defined at:
 11374 ;;		line 868 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11375 ;; Parameters:    Size  Location     Type
 11376 ;;  sensor          1    wreg     enum E2871
 11377 ;; Auto vars:     Size  Location     Type
 11378 ;;  sensor          1    7[COMMON] enum E2871
 11379 ;; Return value:  Size  Location     Type
 11380 ;;                  1    wreg      _Bool 
 11381 ;; Registers used:
 11382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11383 ;; Tracked objects:
 11384 ;;		On entry : 0/0
 11385 ;;		On exit  : 0/0
 11386 ;;		Unchanged: 0/0
 11387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11388 ;;      Params:         0       0       0       0       0       0       0       0
 11389 ;;      Locals:         1       0       0       0       0       0       0       0
 11390 ;;      Temps:          1       0       0       0       0       0       0       0
 11391 ;;      Totals:         2       0       0       0       0       0       0       0
 11392 ;;Total ram usage:        2 bytes
 11393 ;; Hardware stack levels used:    1
 11394 ;; Hardware stack levels required when called:    5
 11395 ;; This function calls:
 11396 ;;		___bmul
 11397 ;; This function is called by:
 11398 ;;		_Button_Service
 11399 ;; This function uses a non-reentrant model
 11400 ;;
 11401                           
 11402                           
 11403                           ;psect for function _MTOUCH_Sensor_isCalibrated
 11404  1486                     _MTOUCH_Sensor_isCalibrated:	
 11405                           
 11406                           ;incstack = 0
 11407                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11408                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 11409  1486  00F7               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 11410                           
 11411                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 869: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 871:         return (_Bool)mtouch_sensor[sensor].cali
      +                          brated;
 11412  1487  3009               	movlw	9
 11413  1488  00F6               	movwf	??_MTOUCH_Sensor_isCalibrated
 11414  1489  0876               	movf	??_MTOUCH_Sensor_isCalibrated,w
 11415  148A  00F2               	movwf	___bmul@multiplicand
 11416  148B  0877               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 11417  148C  3194  24C6         	fcall	___bmul
 11418  148E  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11419  148F  0086               	movwf	6
 11420  1490  3001               	movlw	1	; select bank2/3
 11421  1491  0087               	movwf	7
 11422  1492  0C01               	rrf	1,w
 11423  1493  0C89               	rrf	9,f
 11424  1494  3901               	andlw	1
 11425  1495  0008               	return
 11426  1496                     __end_of_MTOUCH_Sensor_isCalibrated:	
 11427                           
 11428                           	psect	text68
 11429  0F5C                     __ptext68:	
 11430 ;; *************** function _Button_State_NotPressed *****************
 11431 ;; Defined at:
 11432 ;;		line 262 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;  button          1    5[BANK0 ] PTR struct .
 11435 ;;		 -> mtouch_button(68), 
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;		None
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  1    wreg      void 
 11440 ;; Registers used:
 11441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11447 ;;      Params:         0       1       0       0       0       0       0       0
 11448 ;;      Locals:         0       0       0       0       0       0       0       0
 11449 ;;      Temps:          0       2       0       0       0       0       0       0
 11450 ;;      Totals:         0       3       0       0       0       0       0       0
 11451 ;;Total ram usage:        3 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; Hardware stack levels required when called:    7
 11454 ;; This function calls:
 11455 ;;		_Button_Baseline_Update
 11456 ;;		_Button_DefaultCallback
 11457 ;;		_MTOUCH_Button_Initialize
 11458 ;;		_myButtonPressedCallback
 11459 ;; This function is called by:
 11460 ;;		_Button_Service
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           
 11465                           ;psect for function _Button_State_NotPressed
 11466  0F5C                     _Button_State_NotPressed:	
 11467                           
 11468                           ;mcc_generated_files/mtouch/mtouch_button.c: 262: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 263: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 265:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 11469                           
 11470                           ;incstack = 0
 11471                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11472  0F5C  0020               	movlb	0	; select bank0
 11473  0F5D  0825               	movf	Button_State_NotPressed@button,w
 11474  0F5E  3E09               	addlw	9
 11475  0F5F  0086               	movwf	6
 11476  0F60  3001               	movlw	1	; select bank2/3
 11477  0F61  0087               	movwf	7
 11478  0F62  0801               	movf	1,w
 11479  0F63  3A80               	xorlw	128
 11480  0F64  00A6               	movwf	??_Button_State_NotPressed
 11481  0F65  0825               	movf	Button_State_NotPressed@button,w
 11482  0F66  3E0E               	addlw	14
 11483  0F67  0086               	movwf	6
 11484  0F68  3001               	movlw	1	; select bank2/3
 11485  0F69  0087               	movwf	7
 11486  0F6A  0301               	decf	1,w
 11487  0F6B  3AFF               	xorlw	255
 11488  0F6C  3A80               	xorlw	128
 11489  0F6D  02A6               	subwf	??_Button_State_NotPressed,f
 11490  0F6E  1803               	skipnc
 11491  0F6F  2F9B               	goto	l5968
 11492                           
 11493                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 267:         (button->counter)++;
 11494  0F70  0825               	movf	Button_State_NotPressed@button,w
 11495  0F71  3E0A               	addlw	10
 11496  0F72  0086               	movwf	6
 11497  0F73  3001               	movlw	1	; select bank2/3
 11498  0F74  0087               	movwf	7
 11499  0F75  3001               	movlw	1
 11500  0F76  0781               	addwf	1,f
 11501  0F77  3141               	addfsr 1,1
 11502  0F78  1803               	skipnc
 11503  0F79  0A81               	incf	1,f
 11504                           
 11505                           ;mcc_generated_files/mtouch/mtouch_button.c: 268:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 11506  0F7A  0825               	movf	Button_State_NotPressed@button,w
 11507  0F7B  3E0A               	addlw	10
 11508  0F7C  0086               	movwf	6
 11509  0F7D  3001               	movlw	1	; select bank2/3
 11510  0F7E  0087               	movwf	7
 11511  0F7F  3F40               	moviw [0]fsr1
 11512  0F80  00A6               	movwf	??_Button_State_NotPressed
 11513  0F81  3F41               	moviw [1]fsr1
 11514  0F82  00A7               	movwf	??_Button_State_NotPressed+1
 11515  0F83  3000               	movlw	0
 11516  0F84  0227               	subwf	??_Button_State_NotPressed+1,w
 11517  0F85  3041               	movlw	65
 11518  0F86  1903               	skipnz
 11519  0F87  0226               	subwf	??_Button_State_NotPressed,w
 11520  0F88  1C03               	skipc
 11521  0F89  2FDD               	goto	l439
 11522                           
 11523                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 270:             button->counter = (mtouch_button_statecounter_t)0;
 11524  0F8A  0825               	movf	Button_State_NotPressed@button,w
 11525  0F8B  3E0A               	addlw	10
 11526  0F8C  0086               	movwf	6
 11527  0F8D  3001               	movlw	1	; select bank2/3
 11528  0F8E  0087               	movwf	7
 11529  0F8F  3000               	movlw	0
 11530  0F90  3FC0               	movwi [0]fsr1
 11531  0F91  3FC1               	movwi [1]fsr1
 11532                           
 11533                           ;mcc_generated_files/mtouch/mtouch_button.c: 271:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 11534  0F92  0825               	movf	Button_State_NotPressed@button,w
 11535  0F93  0086               	movwf	6
 11536  0F94  3001               	movlw	1	; select bank2/3
 11537  0F95  0087               	movwf	7
 11538  0F96  0801               	movf	1,w
 11539  0F97  3188  20CC  318F   	fcall	_MTOUCH_Button_Initialize
 11540  0F9A  2FDD               	goto	l439
 11541  0F9B                     l5968:	
 11542  0F9B  0825               	movf	Button_State_NotPressed@button,w
 11543  0F9C  3E09               	addlw	9
 11544  0F9D  0086               	movwf	6
 11545  0F9E  3001               	movlw	1	; select bank2/3
 11546  0F9F  0087               	movwf	7
 11547  0FA0  0801               	movf	1,w
 11548  0FA1  00A6               	movwf	??_Button_State_NotPressed
 11549  0FA2  01A7               	clrf	??_Button_State_NotPressed+1
 11550  0FA3  1BA6               	btfsc	??_Button_State_NotPressed,7
 11551  0FA4  03A7               	decf	??_Button_State_NotPressed+1,f
 11552  0FA5  0825               	movf	Button_State_NotPressed@button,w
 11553  0FA6  3E0E               	addlw	14
 11554  0FA7  0086               	movwf	6
 11555  0FA8  3001               	movlw	1	; select bank2/3
 11556  0FA9  0087               	movwf	7
 11557  0FAA  0827               	movf	??_Button_State_NotPressed+1,w
 11558  0FAB  3A80               	xorlw	128
 11559  0FAC  3C80               	sublw	128
 11560  0FAD  1D03               	skipz
 11561  0FAE  2FB1               	goto	u4385
 11562  0FAF  0826               	movf	??_Button_State_NotPressed,w
 11563  0FB0  0201               	subwf	1,w
 11564  0FB1                     u4385:	
 11565  0FB1  1803               	skipnc
 11566  0FB2  2FD4               	goto	l5974
 11567                           
 11568                           ;mcc_generated_files/mtouch/mtouch_button.c: 276:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         button->state = MTOUCH_BUTTON_STATE_pressed;
 11569  0FB3  3002               	movlw	2
 11570  0FB4  0020               	movlb	0	; select bank0
 11571  0FB5  00A6               	movwf	??_Button_State_NotPressed
 11572  0FB6  0825               	movf	Button_State_NotPressed@button,w
 11573  0FB7  3E02               	addlw	2
 11574  0FB8  0086               	movwf	6
 11575  0FB9  3001               	movlw	1	; select bank2/3
 11576  0FBA  0087               	movwf	7
 11577  0FBB  0826               	movf	??_Button_State_NotPressed,w
 11578  0FBC  0081               	movwf	1
 11579                           
 11580                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11581  0FBD  0825               	movf	Button_State_NotPressed@button,w
 11582  0FBE  3E0A               	addlw	10
 11583  0FBF  0086               	movwf	6
 11584  0FC0  3001               	movlw	1	; select bank2/3
 11585  0FC1  0087               	movwf	7
 11586  0FC2  3000               	movlw	0
 11587  0FC3  3FC0               	movwi [0]fsr1
 11588  0FC4  3FC1               	movwi [1]fsr1
 11589                           
 11590                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:         callback_pressed(button->name)
      +                          ;
 11591  0FC5  0825               	movf	Button_State_NotPressed@button,w
 11592  0FC6  0086               	movwf	6
 11593  0FC7  3001               	movlw	1	; select bank2/3
 11594  0FC8  0087               	movwf	7
 11595  0FC9  0801               	movf	1,w
 11596  0FCA  00A6               	movwf	??_Button_State_NotPressed
 11597  0FCB  0826               	movf	??_Button_State_NotPressed,w
 11598  0FCC  00F5               	movwf	myButtonPressedCallback@button
 11599  0FCD  0021               	movlb	1	; select bank1
 11600  0FCE  086B               	movf	(_callback_pressed+1)^(0+128),w
 11601  0FCF  008A               	movwf	10
 11602  0FD0  086A               	movf	_callback_pressed^(0+128),w
 11603  0FD1  000A               	callw
 11604  0FD2  318F               	pagesel	$
 11605                           
 11606                           ;mcc_generated_files/mtouch/mtouch_button.c: 281:     }
 11607  0FD3  2FDD               	goto	l439
 11608  0FD4                     l5974:	
 11609                           
 11610                           ;mcc_generated_files/mtouch/mtouch_button.c: 283:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->counter = (mtouch_button_statecounter_t)0;
 11611  0FD4  0020               	movlb	0	; select bank0
 11612  0FD5  0825               	movf	Button_State_NotPressed@button,w
 11613  0FD6  3E0A               	addlw	10
 11614  0FD7  0086               	movwf	6
 11615  0FD8  3001               	movlw	1	; select bank2/3
 11616  0FD9  0087               	movwf	7
 11617  0FDA  3000               	movlw	0
 11618  0FDB  3FC0               	movwi [0]fsr1
 11619  0FDC  3FC1               	movwi [1]fsr1
 11620  0FDD                     l439:	
 11621                           
 11622                           ;mcc_generated_files/mtouch/mtouch_button.c: 290:     (button->baseline_count)++;
 11623  0FDD  0020               	movlb	0	; select bank0
 11624  0FDE  0825               	movf	Button_State_NotPressed@button,w
 11625  0FDF  3E0C               	addlw	12
 11626  0FE0  0086               	movwf	6
 11627  0FE1  3001               	movlw	1	; select bank2/3
 11628  0FE2  0087               	movwf	7
 11629  0FE3  3001               	movlw	1
 11630  0FE4  0781               	addwf	1,f
 11631  0FE5  3141               	addfsr 1,1
 11632  0FE6  1803               	skipnc
 11633  0FE7  0A81               	incf	1,f
 11634                           
 11635                           ;mcc_generated_files/mtouch/mtouch_button.c: 291:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 11636  0FE8  0825               	movf	Button_State_NotPressed@button,w
 11637  0FE9  3E0C               	addlw	12
 11638  0FEA  0086               	movwf	6
 11639  0FEB  3001               	movlw	1	; select bank2/3
 11640  0FEC  0087               	movwf	7
 11641  0FED  0016               	moviw fsr1++
 11642  0FEE  3A40               	xorlw	64
 11643  0FEF  00A6               	movwf	??_Button_State_NotPressed
 11644  0FF0  0016               	moviw fsr1++
 11645  0FF1  04A6               	iorwf	??_Button_State_NotPressed,f
 11646  0FF2  1D03               	btfss	3,2
 11647  0FF3  0008               	return
 11648                           
 11649                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 293:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 11650  0FF4  0825               	movf	Button_State_NotPressed@button,w
 11651  0FF5  3E0C               	addlw	12
 11652  0FF6  0086               	movwf	6
 11653  0FF7  3001               	movlw	1	; select bank2/3
 11654  0FF8  0087               	movwf	7
 11655  0FF9  3000               	movlw	0
 11656  0FFA  3FC0               	movwi [0]fsr1
 11657  0FFB  3FC1               	movwi [1]fsr1
 11658                           
 11659                           ;mcc_generated_files/mtouch/mtouch_button.c: 294:         Button_Baseline_Update(button)
      +                          ;
 11660  0FFC  0825               	movf	Button_State_NotPressed@button,w
 11661  0FFD  318C  246C         	fcall	_Button_Baseline_Update
 11662  0FFF  0008               	return
 11663  1000                     __end_of_Button_State_NotPressed:	
 11664                           
 11665                           	psect	text69
 11666  0B07                     __ptext69:	
 11667 ;; *************** function _Button_State_Initializing *****************
 11668 ;; Defined at:
 11669 ;;		line 242 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;  button          1    5[BANK0 ] PTR struct .
 11672 ;;		 -> mtouch_button(68), 
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;		None
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      void 
 11677 ;; Registers used:
 11678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11684 ;;      Params:         0       1       0       0       0       0       0       0
 11685 ;;      Locals:         0       0       0       0       0       0       0       0
 11686 ;;      Temps:          0       4       0       0       0       0       0       0
 11687 ;;      Totals:         0       5       0       0       0       0       0       0
 11688 ;;Total ram usage:        5 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    7
 11691 ;; This function calls:
 11692 ;;		_Button_Baseline_Initialize
 11693 ;;		_Button_Baseline_Update
 11694 ;; This function is called by:
 11695 ;;		_Button_Service
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           
 11700                           ;psect for function _Button_State_Initializing
 11701  0B07                     _Button_State_Initializing:	
 11702                           
 11703                           ;mcc_generated_files/mtouch/mtouch_button.c: 242: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 243: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 245:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 11704                           
 11705                           ;incstack = 0
 11706                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11707  0B07  0020               	movlb	0	; select bank0
 11708  0B08  0825               	movf	Button_State_Initializing@button,w
 11709  0B09  3E0A               	addlw	10
 11710  0B0A  0086               	movwf	6
 11711  0B0B  3001               	movlw	1	; select bank2/3
 11712  0B0C  0087               	movwf	7
 11713  0B0D  3F40               	moviw [0]fsr1
 11714  0B0E  00A6               	movwf	??_Button_State_Initializing
 11715  0B0F  3F41               	moviw [1]fsr1
 11716  0B10  00A7               	movwf	??_Button_State_Initializing+1
 11717  0B11  3000               	movlw	0
 11718  0B12  0227               	subwf	??_Button_State_Initializing+1,w
 11719  0B13  3009               	movlw	9
 11720  0B14  1903               	skipnz
 11721  0B15  0226               	subwf	??_Button_State_Initializing,w
 11722  0B16  1803               	skipnc
 11723  0B17  2B1D               	goto	l5952
 11724                           
 11725                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 247:         Button_Baseline_Initialize(button);
 11726  0B18  0825               	movf	Button_State_Initializing@button,w
 11727  0B19  3188  200C  318B   	fcall	_Button_Baseline_Initialize
 11728                           
 11729                           ;mcc_generated_files/mtouch/mtouch_button.c: 248:     } else {
 11730  0B1C  2B21               	goto	l5954
 11731  0B1D                     l5952:	
 11732                           
 11733                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:         Button_Baseline_Update(button)
      +                          ;
 11734  0B1D  0825               	movf	Button_State_Initializing@button,w
 11735  0B1E  318C  246C  318B   	fcall	_Button_Baseline_Update
 11736  0B21                     l5954:	
 11737                           
 11738                           ;mcc_generated_files/mtouch/mtouch_button.c: 253:     (button->counter)++;
 11739  0B21  0020               	movlb	0	; select bank0
 11740  0B22  0825               	movf	Button_State_Initializing@button,w
 11741  0B23  3E0A               	addlw	10
 11742  0B24  0086               	movwf	6
 11743  0B25  3001               	movlw	1	; select bank2/3
 11744  0B26  0087               	movwf	7
 11745  0B27  3001               	movlw	1
 11746  0B28  0781               	addwf	1,f
 11747  0B29  3141               	addfsr 1,1
 11748  0B2A  1803               	skipnc
 11749  0B2B  0A81               	incf	1,f
 11750                           
 11751                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 11752  0B2C  0825               	movf	Button_State_Initializing@button,w
 11753  0B2D  3E0A               	addlw	10
 11754  0B2E  0086               	movwf	6
 11755  0B2F  3001               	movlw	1	; select bank2/3
 11756  0B30  0087               	movwf	7
 11757  0B31  3F40               	moviw [0]fsr1
 11758  0B32  00A6               	movwf	??_Button_State_Initializing
 11759  0B33  3F41               	moviw [1]fsr1
 11760  0B34  00A7               	movwf	??_Button_State_Initializing+1
 11761  0B35  3000               	movlw	0
 11762  0B36  0227               	subwf	??_Button_State_Initializing+1,w
 11763  0B37  3010               	movlw	16
 11764  0B38  1903               	skipnz
 11765  0B39  0226               	subwf	??_Button_State_Initializing,w
 11766  0B3A  1C03               	skipc
 11767  0B3B  0008               	return
 11768                           
 11769                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 256:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 11770  0B3C  0825               	movf	Button_State_Initializing@button,w
 11771  0B3D  3E05               	addlw	5
 11772  0B3E  0086               	movwf	6
 11773  0B3F  3001               	movlw	1	; select bank2/3
 11774  0B40  0087               	movwf	7
 11775  0B41  3F40               	moviw [0]fsr1
 11776  0B42  00A6               	movwf	??_Button_State_Initializing
 11777  0B43  3F41               	moviw [1]fsr1
 11778  0B44  00A7               	movwf	??_Button_State_Initializing+1
 11779  0B45  3F42               	moviw [2]fsr1
 11780  0B46  00A8               	movwf	??_Button_State_Initializing+2
 11781  0B47  3F43               	moviw [3]fsr1
 11782  0B48  00A9               	movwf	??_Button_State_Initializing+3
 11783  0B49  3004               	movlw	4
 11784  0B4A                     u4355:	
 11785  0B4A  36A9               	lsrf	??_Button_State_Initializing+3,f
 11786  0B4B  0CA8               	rrf	??_Button_State_Initializing+2,f
 11787  0B4C  0CA7               	rrf	??_Button_State_Initializing+1,f
 11788  0B4D  0CA6               	rrf	??_Button_State_Initializing,f
 11789  0B4E  0B89               	decfsz	9,f
 11790  0B4F  2B4A               	goto	u4355
 11791  0B50  0825               	movf	Button_State_Initializing@button,w
 11792  0B51  3E03               	addlw	3
 11793  0B52  0086               	movwf	6
 11794  0B53  3001               	movlw	1	; select bank2/3
 11795  0B54  0087               	movwf	7
 11796  0B55  0826               	movf	??_Button_State_Initializing,w
 11797  0B56  3FC0               	movwi [0]fsr1
 11798  0B57  0827               	movf	??_Button_State_Initializing+1,w
 11799  0B58  3FC1               	movwi [1]fsr1
 11800                           
 11801                           ;mcc_generated_files/mtouch/mtouch_button.c: 257:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 11802  0B59  0825               	movf	Button_State_Initializing@button,w
 11803  0B5A  3E02               	addlw	2
 11804  0B5B  0086               	movwf	6
 11805  0B5C  3001               	movlw	1	; select bank2/3
 11806  0B5D  0087               	movwf	7
 11807  0B5E  0181               	clrf	1
 11808  0B5F  0A81               	incf	1,f
 11809                           
 11810                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11811  0B60  0825               	movf	Button_State_Initializing@button,w
 11812  0B61  3E0A               	addlw	10
 11813  0B62  0086               	movwf	6
 11814  0B63  3001               	movlw	1	; select bank2/3
 11815  0B64  0087               	movwf	7
 11816  0B65  3000               	movlw	0
 11817  0B66  3FC0               	movwi [0]fsr1
 11818  0B67  3FC1               	movwi [1]fsr1
 11819  0B68  0008               	return
 11820  0B69                     __end_of_Button_State_Initializing:	
 11821                           
 11822                           	psect	text70
 11823  0786                     __ptext70:	
 11824 ;; *************** function _Button_State_Pressed *****************
 11825 ;; Defined at:
 11826 ;;		line 298 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11827 ;; Parameters:    Size  Location     Type
 11828 ;;  button          1    5[BANK0 ] PTR struct .
 11829 ;;		 -> mtouch_button(68), 
 11830 ;; Auto vars:     Size  Location     Type
 11831 ;;		None
 11832 ;; Return value:  Size  Location     Type
 11833 ;;                  1    wreg      void 
 11834 ;; Registers used:
 11835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11836 ;; Tracked objects:
 11837 ;;		On entry : 0/0
 11838 ;;		On exit  : 0/0
 11839 ;;		Unchanged: 0/0
 11840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11841 ;;      Params:         0       1       0       0       0       0       0       0
 11842 ;;      Locals:         0       0       0       0       0       0       0       0
 11843 ;;      Temps:          0       2       0       0       0       0       0       0
 11844 ;;      Totals:         0       3       0       0       0       0       0       0
 11845 ;;Total ram usage:        3 bytes
 11846 ;; Hardware stack levels used:    1
 11847 ;; Hardware stack levels required when called:    7
 11848 ;; This function calls:
 11849 ;;		_Button_DefaultCallback
 11850 ;;		_MTOUCH_Button_Initialize
 11851 ;;		_myButtonReleasedCallback
 11852 ;; This function is called by:
 11853 ;;		_Button_Service
 11854 ;; This function uses a non-reentrant model
 11855 ;;
 11856                           
 11857                           
 11858                           ;psect for function _Button_State_Pressed
 11859  0786                     _Button_State_Pressed:	
 11860                           
 11861                           ;mcc_generated_files/mtouch/mtouch_button.c: 298: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 299: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 301:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 11862                           
 11863                           ;incstack = 0
 11864                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11865  0786  0020               	movlb	0	; select bank0
 11866  0787  0825               	movf	Button_State_Pressed@button,w
 11867  0788  3E0A               	addlw	10
 11868  0789  0086               	movwf	6
 11869  078A  3001               	movlw	1	; select bank2/3
 11870  078B  0087               	movwf	7
 11871  078C  3F40               	moviw [0]fsr1
 11872  078D  00A6               	movwf	??_Button_State_Pressed
 11873  078E  3F41               	moviw [1]fsr1
 11874  078F  00A7               	movwf	??_Button_State_Pressed+1
 11875  0790  3007               	movlw	7
 11876  0791  0227               	subwf	??_Button_State_Pressed+1,w
 11877  0792  30D0               	movlw	208
 11878  0793  1903               	skipnz
 11879  0794  0226               	subwf	??_Button_State_Pressed,w
 11880  0795  1C03               	skipc
 11881  0796  2FAE               	goto	l5984
 11882                           
 11883                           ;mcc_generated_files/mtouch/mtouch_button.c: 302:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 303:         MTOUCH_Button_Initialize(button->name);
 11884  0797  0825               	movf	Button_State_Pressed@button,w
 11885  0798  0086               	movwf	6
 11886  0799  3001               	movlw	1	; select bank2/3
 11887  079A  0087               	movwf	7
 11888  079B  0801               	movf	1,w
 11889  079C  3188  20CC  3187   	fcall	_MTOUCH_Button_Initialize
 11890                           
 11891                           ;mcc_generated_files/mtouch/mtouch_button.c: 304:         callback_notPressed(button->na
      +                          me);
 11892  079F  0020               	movlb	0	; select bank0
 11893  07A0  0825               	movf	Button_State_Pressed@button,w
 11894  07A1  0086               	movwf	6
 11895  07A2  3001               	movlw	1	; select bank2/3
 11896  07A3  0087               	movwf	7
 11897  07A4  0801               	movf	1,w
 11898  07A5  00A6               	movwf	??_Button_State_Pressed
 11899  07A6  0826               	movf	??_Button_State_Pressed,w
 11900  07A7  00F5               	movwf	myButtonReleasedCallback@button
 11901  07A8  086E               	movf	_callback_notPressed+1,w
 11902  07A9  008A               	movwf	10
 11903  07AA  086D               	movf	_callback_notPressed,w
 11904  07AB  000A               	callw
 11905  07AC  3187               	pagesel	$
 11906                           
 11907                           ;mcc_generated_files/mtouch/mtouch_button.c: 305:     }
 11908  07AD  0008               	return
 11909  07AE                     l5984:	
 11910  07AE  0825               	movf	Button_State_Pressed@button,w
 11911  07AF  3E09               	addlw	9
 11912  07B0  0086               	movwf	6
 11913  07B1  3001               	movlw	1	; select bank2/3
 11914  07B2  0087               	movwf	7
 11915  07B3  0801               	movf	1,w
 11916  07B4  3A80               	xorlw	128
 11917  07B5  00A6               	movwf	??_Button_State_Pressed
 11918  07B6  0825               	movf	Button_State_Pressed@button,w
 11919  07B7  3E0E               	addlw	14
 11920  07B8  0086               	movwf	6
 11921  07B9  3001               	movlw	1	; select bank2/3
 11922  07BA  0087               	movwf	7
 11923  07BB  0825               	movf	Button_State_Pressed@button,w
 11924  07BC  3E0E               	addlw	14
 11925  07BD  0084               	movwf	4
 11926  07BE  3001               	movlw	1	; select bank2/3
 11927  07BF  0085               	movwf	5
 11928  07C0  0800               	movf	0,w
 11929  07C1  00A7               	movwf	??_Button_State_Pressed+1
 11930  07C2  0825               	movf	Button_State_Pressed@button,w
 11931  07C3  3E10               	addlw	16
 11932  07C4  0084               	movwf	4
 11933  07C5  3001               	movlw	1	; select bank2/3
 11934  07C6  0085               	movwf	5
 11935  07C7  0A00               	incf	0,w
 11936  07C8  2FCA               	goto	u4414
 11937  07C9                     u4415:	
 11938  07C9  36A7               	lsrf	??_Button_State_Pressed+1,f
 11939  07CA                     u4414:	
 11940  07CA  0B89               	decfsz	9,f
 11941  07CB  2FC9               	goto	u4415
 11942  07CC  0827               	movf	??_Button_State_Pressed+1,w
 11943  07CD  0201               	subwf	1,w
 11944  07CE  3A80               	xorlw	128
 11945  07CF  02A6               	subwf	??_Button_State_Pressed,f
 11946  07D0  1803               	skipnc
 11947  07D1  0008               	return
 11948                           
 11949                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 11950  07D2  0825               	movf	Button_State_Pressed@button,w
 11951  07D3  3E02               	addlw	2
 11952  07D4  0086               	movwf	6
 11953  07D5  3001               	movlw	1	; select bank2/3
 11954  07D6  0087               	movwf	7
 11955  07D7  0181               	clrf	1
 11956  07D8  0A81               	incf	1,f
 11957                           
 11958                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11959  07D9  0825               	movf	Button_State_Pressed@button,w
 11960  07DA  3E0A               	addlw	10
 11961  07DB  0086               	movwf	6
 11962  07DC  3001               	movlw	1	; select bank2/3
 11963  07DD  0087               	movwf	7
 11964  07DE  3000               	movlw	0
 11965  07DF  3FC0               	movwi [0]fsr1
 11966  07E0  3FC1               	movwi [1]fsr1
 11967                           
 11968                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11969  07E1  0825               	movf	Button_State_Pressed@button,w
 11970  07E2  3E0C               	addlw	12
 11971  07E3  0086               	movwf	6
 11972  07E4  3001               	movlw	1	; select bank2/3
 11973  07E5  0087               	movwf	7
 11974  07E6  30FF               	movlw	255
 11975  07E7  3FC0               	movwi [0]fsr1
 11976  07E8  30FB               	movlw	251
 11977  07E9  3FC1               	movwi [1]fsr1
 11978                           
 11979                           ;mcc_generated_files/mtouch/mtouch_button.c: 313:         callback_notPressed(button->na
      +                          me);
 11980  07EA  0825               	movf	Button_State_Pressed@button,w
 11981  07EB  0086               	movwf	6
 11982  07EC  3001               	movlw	1	; select bank2/3
 11983  07ED  0087               	movwf	7
 11984  07EE  0801               	movf	1,w
 11985  07EF  00A6               	movwf	??_Button_State_Pressed
 11986  07F0  0826               	movf	??_Button_State_Pressed,w
 11987  07F1  00F5               	movwf	myButtonReleasedCallback@button
 11988  07F2  086E               	movf	_callback_notPressed+1,w
 11989  07F3  008A               	movwf	10
 11990  07F4  086D               	movf	_callback_notPressed,w
 11991  07F5  000A               	callw
 11992  07F6  3187               	pagesel	$
 11993  07F7  0008               	return
 11994  07F8                     __end_of_Button_State_Pressed:	
 11995                           
 11996                           	psect	text71
 11997  17D2                     __ptext71:	
 11998 ;; *************** function _myButtonPressedCallback *****************
 11999 ;; Defined at:
 12000 ;;		line 177 in file "main.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;  button          1    5[COMMON] enum E2931
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;		None
 12005 ;; Return value:  Size  Location     Type
 12006 ;;                  1    wreg      void 
 12007 ;; Registers used:
 12008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12009 ;; Tracked objects:
 12010 ;;		On entry : 0/0
 12011 ;;		On exit  : 0/0
 12012 ;;		Unchanged: 0/0
 12013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12014 ;;      Params:         1       0       0       0       0       0       0       0
 12015 ;;      Locals:         0       0       0       0       0       0       0       0
 12016 ;;      Temps:          0       0       0       0       0       0       0       0
 12017 ;;      Totals:         1       0       0       0       0       0       0       0
 12018 ;;Total ram usage:        1 bytes
 12019 ;; Hardware stack levels used:    1
 12020 ;; Hardware stack levels required when called:    5
 12021 ;; This function calls:
 12022 ;;		_LED_PROCESS
 12023 ;;		_RELAY_PROCESS
 12024 ;; This function is called by:
 12025 ;;		_main
 12026 ;;		_Button_State_NotPressed
 12027 ;; This function uses a non-reentrant model
 12028 ;;
 12029                           
 12030                           
 12031                           ;psect for function _myButtonPressedCallback
 12032  17D2                     _myButtonPressedCallback:	
 12033                           
 12034                           ;main.c: 177: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 178:
      +                           {;main.c: 179:     count_conf = 0;
 12035                           
 12036                           ;incstack = 0
 12037                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12038  17D2  0021               	movlb	1	; select bank1
 12039  17D3  01B6               	clrf	_count_conf^(0+128)
 12040  17D4  01B7               	clrf	(_count_conf+1)^(0+128)
 12041                           
 12042                           ;main.c: 180:     if(config_status == 0)
 12043  17D5  0020               	movlb	0	; select bank0
 12044  17D6  0865               	movf	_config_status,w
 12045  17D7  1D03               	btfss	3,2
 12046  17D8  0008               	return
 12047                           
 12048                           ;main.c: 181:     {;main.c: 182:         if(button == 0) last_touch_status.full_status ^
      +                          = 0b00000001;
 12049  17D9  0875               	movf	myButtonPressedCallback@button,w
 12050  17DA  1D03               	btfss	3,2
 12051  17DB  2FE0               	goto	l4178
 12052  17DC  3001               	movlw	1
 12053  17DD  06DB               	xorwf	_last_touch_status,f
 12054  17DE  3000               	movlw	0
 12055  17DF  06DC               	xorwf	_last_touch_status+1,f
 12056  17E0                     l4178:	
 12057                           
 12058                           ;main.c: 183:         if(button == 1) last_touch_status.full_status ^= 0b00000010;
 12059  17E0  0375               	decf	myButtonPressedCallback@button,w
 12060  17E1  1D03               	btfss	3,2
 12061  17E2  2FE7               	goto	l4182
 12062  17E3  3002               	movlw	2
 12063  17E4  06DB               	xorwf	_last_touch_status,f
 12064  17E5  3000               	movlw	0
 12065  17E6  06DC               	xorwf	_last_touch_status+1,f
 12066  17E7                     l4182:	
 12067                           
 12068                           ;main.c: 184:         if(button == 2) last_touch_status.full_status ^= 0b00000100;
 12069  17E7  3002               	movlw	2
 12070  17E8  0675               	xorwf	myButtonPressedCallback@button,w
 12071  17E9  1D03               	btfss	3,2
 12072  17EA  2FEF               	goto	l4186
 12073  17EB  3004               	movlw	4
 12074  17EC  06DB               	xorwf	_last_touch_status,f
 12075  17ED  3000               	movlw	0
 12076  17EE  06DC               	xorwf	_last_touch_status+1,f
 12077  17EF                     l4186:	
 12078                           
 12079                           ;main.c: 185:         if(button == 3) last_touch_status.full_status ^= 0b00001000;
 12080  17EF  3003               	movlw	3
 12081  17F0  0675               	xorwf	myButtonPressedCallback@button,w
 12082  17F1  1D03               	btfss	3,2
 12083  17F2  2FF7               	goto	l4190
 12084  17F3  3008               	movlw	8
 12085  17F4  06DB               	xorwf	_last_touch_status,f
 12086  17F5  3000               	movlw	0
 12087  17F6  06DC               	xorwf	_last_touch_status+1,f
 12088  17F7                     l4190:	
 12089                           
 12090                           ;main.c: 187:         LED_PROCESS(last_touch_status.full_status);
 12091  17F7  085B               	movf	_last_touch_status,w
 12092  17F8  318E  2622  3197   	fcall	_LED_PROCESS
 12093                           
 12094                           ;main.c: 188:         RELAY_PROCESS(last_touch_status.full_status);
 12095  17FB  0020               	movlb	0	; select bank0
 12096  17FC  085B               	movf	_last_touch_status,w
 12097  17FD  318E  26BF         	fcall	_RELAY_PROCESS
 12098  17FF  0008               	return
 12099  1800                     __end_of_myButtonPressedCallback:	
 12100                           
 12101                           	psect	text72
 12102  135B                     __ptext72:	
 12103 ;; *************** function _Button_DefaultCallback *****************
 12104 ;; Defined at:
 12105 ;;		line 444 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12106 ;; Parameters:    Size  Location     Type
 12107 ;;  button          1    5[COMMON] enum E3070
 12108 ;; Auto vars:     Size  Location     Type
 12109 ;;		None
 12110 ;; Return value:  Size  Location     Type
 12111 ;;                  1    wreg      void 
 12112 ;; Registers used:
 12113 ;;		None
 12114 ;; Tracked objects:
 12115 ;;		On entry : 0/0
 12116 ;;		On exit  : 0/0
 12117 ;;		Unchanged: 0/0
 12118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12119 ;;      Params:         1       0       0       0       0       0       0       0
 12120 ;;      Locals:         0       0       0       0       0       0       0       0
 12121 ;;      Temps:          0       0       0       0       0       0       0       0
 12122 ;;      Totals:         1       0       0       0       0       0       0       0
 12123 ;;Total ram usage:        1 bytes
 12124 ;; Hardware stack levels used:    1
 12125 ;; Hardware stack levels required when called:    4
 12126 ;; This function calls:
 12127 ;;		Nothing
 12128 ;; This function is called by:
 12129 ;;		_Button_State_NotPressed
 12130 ;;		_Button_State_Pressed
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           
 12135                           ;psect for function _Button_DefaultCallback
 12136  135B                     _Button_DefaultCallback:	
 12137                           
 12138                           ;incstack = 0
 12139                           ; Regs used in _Button_DefaultCallback: []
 12140  135B  0008               	return
 12141  135C                     __end_of_Button_DefaultCallback:	
 12142                           
 12143                           	psect	text73
 12144  164C                     __ptext73:	
 12145 ;; *************** function _myButtonReleasedCallback *****************
 12146 ;; Defined at:
 12147 ;;		line 191 in file "main.c"
 12148 ;; Parameters:    Size  Location     Type
 12149 ;;  button          1    5[COMMON] enum E2931
 12150 ;; Auto vars:     Size  Location     Type
 12151 ;;		None
 12152 ;; Return value:  Size  Location     Type
 12153 ;;                  1    wreg      void 
 12154 ;; Registers used:
 12155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12156 ;; Tracked objects:
 12157 ;;		On entry : 0/0
 12158 ;;		On exit  : 0/0
 12159 ;;		Unchanged: 0/0
 12160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12161 ;;      Params:         1       0       0       0       0       0       0       0
 12162 ;;      Locals:         0       0       0       0       0       0       0       0
 12163 ;;      Temps:          0       0       0       0       0       0       0       0
 12164 ;;      Totals:         1       0       0       0       0       0       0       0
 12165 ;;Total ram usage:        1 bytes
 12166 ;; Hardware stack levels used:    1
 12167 ;; Hardware stack levels required when called:    5
 12168 ;; This function calls:
 12169 ;;		_MTOUCH_Button_isPressed
 12170 ;; This function is called by:
 12171 ;;		_main
 12172 ;;		_Button_State_Pressed
 12173 ;; This function uses a non-reentrant model
 12174 ;;
 12175                           
 12176                           
 12177                           ;psect for function _myButtonReleasedCallback
 12178  164C                     _myButtonReleasedCallback:	
 12179                           
 12180                           ;main.c: 191: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 192
      +                          : {;main.c: 193:     count_conf = 0;
 12181                           
 12182                           ;incstack = 0
 12183                           ; Regs used in _myButtonReleasedCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12184  164C  0021               	movlb	1	; select bank1
 12185  164D  01B6               	clrf	_count_conf^(0+128)
 12186  164E  01B7               	clrf	(_count_conf+1)^(0+128)
 12187                           
 12188                           ;main.c: 194:     if(config_status == 0)
 12189  164F  0020               	movlb	0	; select bank0
 12190  1650  0865               	movf	_config_status,w
 12191  1651  1D03               	btfss	3,2
 12192  1652  0008               	return
 12193                           
 12194                           ;main.c: 195:     {;main.c: 197:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0&&MTOUCH_Button_isPressed(2)==0)
 12195  1653  3000               	movlw	0
 12196  1654  3194  2476  3196   	fcall	_MTOUCH_Button_isPressed
 12197  1657  3A00               	xorlw	0
 12198  1658  1D03               	skipz
 12199  1659  0008               	return
 12200  165A  3001               	movlw	1
 12201  165B  3194  2476  3196   	fcall	_MTOUCH_Button_isPressed
 12202  165E  3A00               	xorlw	0
 12203  165F  1D03               	skipz
 12204  1660  0008               	return
 12205  1661  3002               	movlw	2
 12206  1662  3194  2476  3196   	fcall	_MTOUCH_Button_isPressed
 12207  1665  3A00               	xorlw	0
 12208  1666  1D03               	skipz
 12209  1667  0008               	return
 12210                           
 12211                           ;main.c: 198:         {;main.c: 199:             update_state_flag = 1;
 12212  1668  0020               	movlb	0	; select bank0
 12213  1669  01E1               	clrf	_update_state_flag
 12214  166A  0AE1               	incf	_update_state_flag,f
 12215  166B  0008               	return
 12216  166C                     __end_of_myButtonReleasedCallback:	
 12217                           
 12218                           	psect	text74
 12219  1476                     __ptext74:	
 12220 ;; *************** function _MTOUCH_Button_isPressed *****************
 12221 ;; Defined at:
 12222 ;;		line 351 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12223 ;; Parameters:    Size  Location     Type
 12224 ;;  name            1    wreg     enum E3070
 12225 ;; Auto vars:     Size  Location     Type
 12226 ;;  name            1    2[COMMON] enum E3070
 12227 ;; Return value:  Size  Location     Type
 12228 ;;                  1    wreg      _Bool 
 12229 ;; Registers used:
 12230 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12231 ;; Tracked objects:
 12232 ;;		On entry : 0/0
 12233 ;;		On exit  : 0/0
 12234 ;;		Unchanged: 0/0
 12235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12236 ;;      Params:         0       0       0       0       0       0       0       0
 12237 ;;      Locals:         1       0       0       0       0       0       0       0
 12238 ;;      Temps:          0       0       0       0       0       0       0       0
 12239 ;;      Totals:         1       0       0       0       0       0       0       0
 12240 ;;Total ram usage:        1 bytes
 12241 ;; Hardware stack levels used:    1
 12242 ;; Hardware stack levels required when called:    4
 12243 ;; This function calls:
 12244 ;;		Nothing
 12245 ;; This function is called by:
 12246 ;;		_main
 12247 ;;		_myButtonReleasedCallback
 12248 ;; This function uses a non-reentrant model
 12249 ;;
 12250                           
 12251                           
 12252                           ;psect for function _MTOUCH_Button_isPressed
 12253  1476                     _MTOUCH_Button_isPressed:	
 12254                           
 12255                           ;incstack = 0
 12256                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 12257                           ;MTOUCH_Button_isPressed@name stored from wreg
 12258  1476  00F2               	movwf	MTOUCH_Button_isPressed@name
 12259                           
 12260                           ;mcc_generated_files/mtouch/mtouch_button.c: 351: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 352: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 353:         return (_Bool)((mtouch_button[name].state == 
      +                          MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 12261  1477  0E72               	swapf	MTOUCH_Button_isPressed@name,w
 12262  1478  39F0               	andlw	240
 12263  1479  0772               	addwf	MTOUCH_Button_isPressed@name,w
 12264  147A  3EA2               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 12265  147B  0086               	movwf	6
 12266  147C  3001               	movlw	1	; select bank3/4
 12267  147D  0087               	movwf	7
 12268  147E  3002               	movlw	2
 12269  147F  0601               	xorwf	1,w
 12270  1480  1D03               	btfss	3,2
 12271  1481  2C84               	goto	u2330
 12272  1482  3001               	movlw	1
 12273  1483  0008               	return
 12274  1484                     u2330:	
 12275  1484  3000               	movlw	0
 12276  1485  0008               	return
 12277  1486                     __end_of_MTOUCH_Button_isPressed:	
 12278                           
 12279                           	psect	text75
 12280  08CC                     __ptext75:	
 12281 ;; *************** function _MTOUCH_Button_Initialize *****************
 12282 ;; Defined at:
 12283 ;;		line 176 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12284 ;; Parameters:    Size  Location     Type
 12285 ;;  name            1    wreg     enum E3070
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;  name            1    0[BANK0 ] enum E3070
 12288 ;;  button          1    1[BANK0 ] PTR struct .
 12289 ;;		 -> mtouch_button(68), 
 12290 ;; Return value:  Size  Location     Type
 12291 ;;                  1    wreg      void 
 12292 ;; Registers used:
 12293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12294 ;; Tracked objects:
 12295 ;;		On entry : 0/0
 12296 ;;		On exit  : 0/0
 12297 ;;		Unchanged: 0/0
 12298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12299 ;;      Params:         0       0       0       0       0       0       0       0
 12300 ;;      Locals:         0       2       0       0       0       0       0       0
 12301 ;;      Temps:          1       0       0       0       0       0       0       0
 12302 ;;      Totals:         1       2       0       0       0       0       0       0
 12303 ;;Total ram usage:        3 bytes
 12304 ;; Hardware stack levels used:    1
 12305 ;; Hardware stack levels required when called:    6
 12306 ;; This function calls:
 12307 ;;		_MTOUCH_Sensor_Calibrate
 12308 ;; This function is called by:
 12309 ;;		_MTOUCH_Button_InitializeAll
 12310 ;;		_Button_Service
 12311 ;;		_Button_State_NotPressed
 12312 ;;		_Button_State_Pressed
 12313 ;; This function uses a non-reentrant model
 12314 ;;
 12315                           
 12316                           
 12317                           ;psect for function _MTOUCH_Button_Initialize
 12318  08CC                     _MTOUCH_Button_Initialize:	
 12319                           
 12320                           ;incstack = 0
 12321                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12322                           ;MTOUCH_Button_Initialize@name stored from wreg
 12323  08CC  0020               	movlb	0	; select bank0
 12324  08CD  00A0               	movwf	MTOUCH_Button_Initialize@name
 12325                           
 12326                           ;mcc_generated_files/mtouch/mtouch_button.c: 176: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 177: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 178:     mtouch_button_t* button = &mtouch_button[name];
 12327  08CE  0E20               	swapf	MTOUCH_Button_Initialize@name,w
 12328  08CF  39F0               	andlw	240
 12329  08D0  0720               	addwf	MTOUCH_Button_Initialize@name,w
 12330  08D1  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 12331  08D2  00F8               	movwf	??_MTOUCH_Button_Initialize
 12332  08D3  0878               	movf	??_MTOUCH_Button_Initialize,w
 12333  08D4  00A1               	movwf	MTOUCH_Button_Initialize@button
 12334                           
 12335                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 12336  08D5  0821               	movf	MTOUCH_Button_Initialize@button,w
 12337  08D6  3E02               	addlw	2
 12338  08D7  0086               	movwf	6
 12339  08D8  3001               	movlw	1	; select bank2/3
 12340  08D9  0087               	movwf	7
 12341  08DA  0181               	clrf	1
 12342                           
 12343                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 12344  08DB  0821               	movf	MTOUCH_Button_Initialize@button,w
 12345  08DC  3E05               	addlw	5
 12346  08DD  0086               	movwf	6
 12347  08DE  3001               	movlw	1	; select bank2/3
 12348  08DF  0087               	movwf	7
 12349  08E0  3000               	movlw	0
 12350  08E1  3FC0               	movwi [0]fsr1
 12351  08E2  3000               	movlw	0
 12352  08E3  3FC1               	movwi [1]fsr1
 12353  08E4  3FC2               	movwi [2]fsr1
 12354  08E5  3FC3               	movwi [3]fsr1
 12355                           
 12356                           ;mcc_generated_files/mtouch/mtouch_button.c: 182:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 12357  08E6  0821               	movf	MTOUCH_Button_Initialize@button,w
 12358  08E7  3E0A               	addlw	10
 12359  08E8  0086               	movwf	6
 12360  08E9  3001               	movlw	1	; select bank2/3
 12361  08EA  0087               	movwf	7
 12362  08EB  3000               	movlw	0
 12363  08EC  3FC0               	movwi [0]fsr1
 12364  08ED  3FC1               	movwi [1]fsr1
 12365                           
 12366                           ;mcc_generated_files/mtouch/mtouch_button.c: 183:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 12367  08EE  0821               	movf	MTOUCH_Button_Initialize@button,w
 12368  08EF  3E0C               	addlw	12
 12369  08F0  0086               	movwf	6
 12370  08F1  3001               	movlw	1	; select bank2/3
 12371  08F2  0087               	movwf	7
 12372  08F3  3000               	movlw	0
 12373  08F4  3FC0               	movwi [0]fsr1
 12374  08F5  3FC1               	movwi [1]fsr1
 12375                           
 12376                           ;mcc_generated_files/mtouch/mtouch_button.c: 185:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 12377  08F6  0A21               	incf	MTOUCH_Button_Initialize@button,w
 12378  08F7  0086               	movwf	6
 12379  08F8  3001               	movlw	1	; select bank2/3
 12380  08F9  0087               	movwf	7
 12381  08FA  0801               	movf	1,w
 12382  08FB  3194  2411         	fcall	_MTOUCH_Sensor_Calibrate
 12383  08FD  0008               	return
 12384  08FE                     __end_of_MTOUCH_Button_Initialize:	
 12385                           
 12386                           	psect	text76
 12387  1411                     __ptext76:	
 12388 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 12389 ;; Defined at:
 12390 ;;		line 861 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12391 ;; Parameters:    Size  Location     Type
 12392 ;;  sensor          1    wreg     enum E2871
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;  sensor          1    7[COMMON] enum E2871
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  1    wreg      void 
 12397 ;; Registers used:
 12398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12404 ;;      Params:         0       0       0       0       0       0       0       0
 12405 ;;      Locals:         1       0       0       0       0       0       0       0
 12406 ;;      Temps:          1       0       0       0       0       0       0       0
 12407 ;;      Totals:         2       0       0       0       0       0       0       0
 12408 ;;Total ram usage:        2 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:    5
 12411 ;; This function calls:
 12412 ;;		___bmul
 12413 ;; This function is called by:
 12414 ;;		_MTOUCH_Sensor_Initialize
 12415 ;;		_MTOUCH_Button_Initialize
 12416 ;; This function uses a non-reentrant model
 12417 ;;
 12418                           
 12419                           
 12420                           ;psect for function _MTOUCH_Sensor_Calibrate
 12421  1411                     _MTOUCH_Sensor_Calibrate:	
 12422                           
 12423                           ;incstack = 0
 12424                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12425                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 12426  1411  00F7               	movwf	MTOUCH_Sensor_Calibrate@sensor
 12427                           
 12428                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 861: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 862: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 864:         mtouch_sensor[sensor].calibrated = 0;
 12429  1412  3009               	movlw	9
 12430  1413  00F6               	movwf	??_MTOUCH_Sensor_Calibrate
 12431  1414  0876               	movf	??_MTOUCH_Sensor_Calibrate,w
 12432  1415  00F2               	movwf	___bmul@multiplicand
 12433  1416  0877               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 12434  1417  3194  24C6         	fcall	___bmul
 12435  1419  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12436  141A  0086               	movwf	6
 12437  141B  3001               	movlw	1	; select bank2/3
 12438  141C  0087               	movwf	7
 12439  141D  1101               	bcf	1,2
 12440  141E  0008               	return
 12441  141F                     __end_of_MTOUCH_Sensor_Calibrate:	
 12442                           
 12443                           	psect	text77
 12444  0C6C                     __ptext77:	
 12445 ;; *************** function _Button_Baseline_Update *****************
 12446 ;; Defined at:
 12447 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;  button          1    wreg     PTR struct .
 12450 ;;		 -> mtouch_button(68), 
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;  button          1    8[COMMON] PTR struct .
 12453 ;;		 -> mtouch_button(68), 
 12454 ;; Return value:  Size  Location     Type
 12455 ;;                  1    wreg      void 
 12456 ;; Registers used:
 12457 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12458 ;; Tracked objects:
 12459 ;;		On entry : 0/0
 12460 ;;		On exit  : 0/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12463 ;;      Params:         0       0       0       0       0       0       0       0
 12464 ;;      Locals:         1       0       0       0       0       0       0       0
 12465 ;;      Temps:          6       0       0       0       0       0       0       0
 12466 ;;      Totals:         7       0       0       0       0       0       0       0
 12467 ;;Total ram usage:        7 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; Hardware stack levels required when called:    4
 12470 ;; This function calls:
 12471 ;;		Nothing
 12472 ;; This function is called by:
 12473 ;;		_Button_State_Initializing
 12474 ;;		_Button_State_NotPressed
 12475 ;; This function uses a non-reentrant model
 12476 ;;
 12477                           
 12478                           
 12479                           ;psect for function _Button_Baseline_Update
 12480  0C6C                     _Button_Baseline_Update:	
 12481                           
 12482                           ;incstack = 0
 12483                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12484                           ;Button_Baseline_Update@button stored from wreg
 12485  0C6C  00F8               	movwf	Button_Baseline_Update@button
 12486                           
 12487                           ;mcc_generated_files/mtouch/mtouch_button.c: 423: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 424: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 425:     if (GIE == (uint8_t)1)
 12488  0C6D  1F8B               	btfss	11,7	;volatile
 12489  0C6E  2CB6               	goto	l4160
 12490                           
 12491                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 427:         GIE = (uint8_t)0;
 12492  0C6F  138B               	bcf	11,7	;volatile
 12493                           
 12494                           ;mcc_generated_files/mtouch/mtouch_button.c: 428:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 12495  0C70  0878               	movf	Button_Baseline_Update@button,w
 12496  0C71  3E05               	addlw	5
 12497  0C72  0086               	movwf	6
 12498  0C73  3001               	movlw	1	; select bank2/3
 12499  0C74  0087               	movwf	7
 12500  0C75  3F40               	moviw [0]fsr1
 12501  0C76  00F2               	movwf	??_Button_Baseline_Update
 12502  0C77  3F41               	moviw [1]fsr1
 12503  0C78  00F3               	movwf	??_Button_Baseline_Update+1
 12504  0C79  3F42               	moviw [2]fsr1
 12505  0C7A  00F4               	movwf	??_Button_Baseline_Update+2
 12506  0C7B  3F43               	moviw [3]fsr1
 12507  0C7C  00F5               	movwf	??_Button_Baseline_Update+3
 12508  0C7D  3004               	movlw	4
 12509  0C7E                     u2495:	
 12510  0C7E  36F5               	lsrf	??_Button_Baseline_Update+3,f
 12511  0C7F  0CF4               	rrf	??_Button_Baseline_Update+2,f
 12512  0C80  0CF3               	rrf	??_Button_Baseline_Update+1,f
 12513  0C81  0CF2               	rrf	??_Button_Baseline_Update,f
 12514  0C82  0B89               	decfsz	9,f
 12515  0C83  2C7E               	goto	u2495
 12516  0C84  0878               	movf	Button_Baseline_Update@button,w
 12517  0C85  3E05               	addlw	5
 12518  0C86  0086               	movwf	6
 12519  0C87  3001               	movlw	1	; select bank2/3
 12520  0C88  0087               	movwf	7
 12521  0C89  0872               	movf	??_Button_Baseline_Update,w
 12522  0C8A  0281               	subwf	1,f
 12523  0C8B  3141               	addfsr 1,1
 12524  0C8C  0873               	movf	??_Button_Baseline_Update+1,w
 12525  0C8D  3B81               	subwfb	1,f
 12526  0C8E  3141               	addfsr 1,1
 12527  0C8F  0874               	movf	??_Button_Baseline_Update+2,w
 12528  0C90  3B81               	subwfb	1,f
 12529  0C91  3141               	addfsr 1,1
 12530  0C92  0875               	movf	??_Button_Baseline_Update+3,w
 12531  0C93  3B81               	subwfb	1,f
 12532  0C94  317D               	addfsr 1,-3
 12533                           
 12534                           ;mcc_generated_files/mtouch/mtouch_button.c: 429:         button->baseline += button->re
      +                          ading;
 12535  0C95  0878               	movf	Button_Baseline_Update@button,w
 12536  0C96  3E03               	addlw	3
 12537  0C97  0086               	movwf	6
 12538  0C98  3001               	movlw	1	; select bank2/3
 12539  0C99  0087               	movwf	7
 12540  0C9A  3F40               	moviw [0]fsr1
 12541  0C9B  00F2               	movwf	??_Button_Baseline_Update
 12542  0C9C  3F41               	moviw [1]fsr1
 12543  0C9D  00F3               	movwf	??_Button_Baseline_Update+1
 12544  0C9E  0872               	movf	??_Button_Baseline_Update,w
 12545  0C9F  00F4               	movwf	??_Button_Baseline_Update+2
 12546  0CA0  0873               	movf	??_Button_Baseline_Update+1,w
 12547  0CA1  00F5               	movwf	??_Button_Baseline_Update+3
 12548  0CA2  01F6               	clrf	??_Button_Baseline_Update+4
 12549  0CA3  01F7               	clrf	??_Button_Baseline_Update+5
 12550  0CA4  0878               	movf	Button_Baseline_Update@button,w
 12551  0CA5  3E05               	addlw	5
 12552  0CA6  0086               	movwf	6
 12553  0CA7  3001               	movlw	1	; select bank2/3
 12554  0CA8  0087               	movwf	7
 12555  0CA9  0874               	movf	??_Button_Baseline_Update+2,w
 12556  0CAA  0781               	addwf	1,f
 12557  0CAB  3141               	addfsr 1,1
 12558  0CAC  0875               	movf	??_Button_Baseline_Update+3,w
 12559  0CAD  3D81               	addwfc	1,f
 12560  0CAE  3141               	addfsr 1,1
 12561  0CAF  0876               	movf	??_Button_Baseline_Update+4,w
 12562  0CB0  3D81               	addwfc	1,f
 12563  0CB1  3141               	addfsr 1,1
 12564  0CB2  0877               	movf	??_Button_Baseline_Update+5,w
 12565  0CB3  3D81               	addwfc	1,f
 12566                           
 12567                           ;mcc_generated_files/mtouch/mtouch_button.c: 430:         GIE = (uint8_t)1;
 12568  0CB4  178B               	bsf	11,7	;volatile
 12569                           
 12570                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     }
 12571  0CB5  0008               	return
 12572  0CB6                     l4160:	
 12573                           
 12574                           ;mcc_generated_files/mtouch/mtouch_button.c: 433:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 434:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 12575  0CB6  0878               	movf	Button_Baseline_Update@button,w
 12576  0CB7  3E05               	addlw	5
 12577  0CB8  0086               	movwf	6
 12578  0CB9  3001               	movlw	1	; select bank2/3
 12579  0CBA  0087               	movwf	7
 12580  0CBB  3F40               	moviw [0]fsr1
 12581  0CBC  00F2               	movwf	??_Button_Baseline_Update
 12582  0CBD  3F41               	moviw [1]fsr1
 12583  0CBE  00F3               	movwf	??_Button_Baseline_Update+1
 12584  0CBF  3F42               	moviw [2]fsr1
 12585  0CC0  00F4               	movwf	??_Button_Baseline_Update+2
 12586  0CC1  3F43               	moviw [3]fsr1
 12587  0CC2  00F5               	movwf	??_Button_Baseline_Update+3
 12588  0CC3  3004               	movlw	4
 12589  0CC4                     u2505:	
 12590  0CC4  36F5               	lsrf	??_Button_Baseline_Update+3,f
 12591  0CC5  0CF4               	rrf	??_Button_Baseline_Update+2,f
 12592  0CC6  0CF3               	rrf	??_Button_Baseline_Update+1,f
 12593  0CC7  0CF2               	rrf	??_Button_Baseline_Update,f
 12594  0CC8  0B89               	decfsz	9,f
 12595  0CC9  2CC4               	goto	u2505
 12596  0CCA  0878               	movf	Button_Baseline_Update@button,w
 12597  0CCB  3E05               	addlw	5
 12598  0CCC  0086               	movwf	6
 12599  0CCD  3001               	movlw	1	; select bank2/3
 12600  0CCE  0087               	movwf	7
 12601  0CCF  0872               	movf	??_Button_Baseline_Update,w
 12602  0CD0  0281               	subwf	1,f
 12603  0CD1  3141               	addfsr 1,1
 12604  0CD2  0873               	movf	??_Button_Baseline_Update+1,w
 12605  0CD3  3B81               	subwfb	1,f
 12606  0CD4  3141               	addfsr 1,1
 12607  0CD5  0874               	movf	??_Button_Baseline_Update+2,w
 12608  0CD6  3B81               	subwfb	1,f
 12609  0CD7  3141               	addfsr 1,1
 12610  0CD8  0875               	movf	??_Button_Baseline_Update+3,w
 12611  0CD9  3B81               	subwfb	1,f
 12612  0CDA  317D               	addfsr 1,-3
 12613                           
 12614                           ;mcc_generated_files/mtouch/mtouch_button.c: 435:         button->baseline += button->re
      +                          ading;
 12615  0CDB  0878               	movf	Button_Baseline_Update@button,w
 12616  0CDC  3E03               	addlw	3
 12617  0CDD  0086               	movwf	6
 12618  0CDE  3001               	movlw	1	; select bank2/3
 12619  0CDF  0087               	movwf	7
 12620  0CE0  3F40               	moviw [0]fsr1
 12621  0CE1  00F2               	movwf	??_Button_Baseline_Update
 12622  0CE2  3F41               	moviw [1]fsr1
 12623  0CE3  00F3               	movwf	??_Button_Baseline_Update+1
 12624  0CE4  0872               	movf	??_Button_Baseline_Update,w
 12625  0CE5  00F4               	movwf	??_Button_Baseline_Update+2
 12626  0CE6  0873               	movf	??_Button_Baseline_Update+1,w
 12627  0CE7  00F5               	movwf	??_Button_Baseline_Update+3
 12628  0CE8  01F6               	clrf	??_Button_Baseline_Update+4
 12629  0CE9  01F7               	clrf	??_Button_Baseline_Update+5
 12630  0CEA  0878               	movf	Button_Baseline_Update@button,w
 12631  0CEB  3E05               	addlw	5
 12632  0CEC  0086               	movwf	6
 12633  0CED  3001               	movlw	1	; select bank2/3
 12634  0CEE  0087               	movwf	7
 12635  0CEF  0874               	movf	??_Button_Baseline_Update+2,w
 12636  0CF0  0781               	addwf	1,f
 12637  0CF1  3141               	addfsr 1,1
 12638  0CF2  0875               	movf	??_Button_Baseline_Update+3,w
 12639  0CF3  3D81               	addwfc	1,f
 12640  0CF4  3141               	addfsr 1,1
 12641  0CF5  0876               	movf	??_Button_Baseline_Update+4,w
 12642  0CF6  3D81               	addwfc	1,f
 12643  0CF7  3141               	addfsr 1,1
 12644  0CF8  0877               	movf	??_Button_Baseline_Update+5,w
 12645  0CF9  3D81               	addwfc	1,f
 12646  0CFA  0008               	return
 12647  0CFB                     __end_of_Button_Baseline_Update:	
 12648                           
 12649                           	psect	text78
 12650  080C                     __ptext78:	
 12651 ;; *************** function _Button_Baseline_Initialize *****************
 12652 ;; Defined at:
 12653 ;;		line 417 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12654 ;; Parameters:    Size  Location     Type
 12655 ;;  button          1    wreg     PTR struct .
 12656 ;;		 -> mtouch_button(68), 
 12657 ;; Auto vars:     Size  Location     Type
 12658 ;;  button          1    4[BANK0 ] PTR struct .
 12659 ;;		 -> mtouch_button(68), 
 12660 ;; Return value:  Size  Location     Type
 12661 ;;                  1    wreg      void 
 12662 ;; Registers used:
 12663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12664 ;; Tracked objects:
 12665 ;;		On entry : 0/0
 12666 ;;		On exit  : 0/0
 12667 ;;		Unchanged: 0/0
 12668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12669 ;;      Params:         0       0       0       0       0       0       0       0
 12670 ;;      Locals:         0       1       0       0       0       0       0       0
 12671 ;;      Temps:          0       4       0       0       0       0       0       0
 12672 ;;      Totals:         0       5       0       0       0       0       0       0
 12673 ;;Total ram usage:        5 bytes
 12674 ;; Hardware stack levels used:    1
 12675 ;; Hardware stack levels required when called:    6
 12676 ;; This function calls:
 12677 ;;		_MTOUCH_Sensor_RawSample_Get
 12678 ;; This function is called by:
 12679 ;;		_Button_State_Initializing
 12680 ;; This function uses a non-reentrant model
 12681 ;;
 12682                           
 12683                           
 12684                           ;psect for function _Button_Baseline_Initialize
 12685  080C                     _Button_Baseline_Initialize:	
 12686                           
 12687                           ;incstack = 0
 12688                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12689                           ;Button_Baseline_Initialize@button stored from wreg
 12690  080C  0020               	movlb	0	; select bank0
 12691  080D  00A4               	movwf	Button_Baseline_Initialize@button
 12692                           
 12693                           ;mcc_generated_files/mtouch/mtouch_button.c: 417: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 418: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 419:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 12694  080E  0A24               	incf	Button_Baseline_Initialize@button,w
 12695  080F  0086               	movwf	6
 12696  0810  3001               	movlw	1	; select bank2/3
 12697  0811  0087               	movwf	7
 12698  0812  0801               	movf	1,w
 12699  0813  3194  24D7  3188   	fcall	_MTOUCH_Sensor_RawSample_Get
 12700  0816  0876               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12701  0817  0020               	movlb	0	; select bank0
 12702  0818  00A0               	movwf	??_Button_Baseline_Initialize
 12703  0819  0877               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12704  081A  00A1               	movwf	??_Button_Baseline_Initialize+1
 12705  081B  01A2               	clrf	??_Button_Baseline_Initialize+2
 12706  081C  01A3               	clrf	??_Button_Baseline_Initialize+3
 12707  081D  0824               	movf	Button_Baseline_Initialize@button,w
 12708  081E  3E05               	addlw	5
 12709  081F  0086               	movwf	6
 12710  0820  3001               	movlw	1	; select bank2/3
 12711  0821  0087               	movwf	7
 12712  0822  0820               	movf	??_Button_Baseline_Initialize,w
 12713  0823  3FC0               	movwi [0]fsr1
 12714  0824  0821               	movf	??_Button_Baseline_Initialize+1,w
 12715  0825  3FC1               	movwi [1]fsr1
 12716  0826  0822               	movf	??_Button_Baseline_Initialize+2,w
 12717  0827  3FC2               	movwi [2]fsr1
 12718  0828  0823               	movf	??_Button_Baseline_Initialize+3,w
 12719  0829  3FC3               	movwi [3]fsr1
 12720                           
 12721                           ;mcc_generated_files/mtouch/mtouch_button.c: 420:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 12722  082A  0824               	movf	Button_Baseline_Initialize@button,w
 12723  082B  3E05               	addlw	5
 12724  082C  0086               	movwf	6
 12725  082D  3001               	movlw	1	; select bank2/3
 12726  082E  0087               	movwf	7
 12727  082F  3004               	movlw	4
 12728  0830                     u4135:	
 12729  0830  3581               	lslf	1,f
 12730  0831  3141               	addfsr 1,1
 12731  0832  0D81               	rlf	1,f
 12732  0833  3141               	addfsr 1,1
 12733  0834  0D81               	rlf	1,f
 12734  0835  3141               	addfsr 1,1
 12735  0836  0D81               	rlf	1,f
 12736  0837  317D               	addfsr 1,-3
 12737  0838  0B89               	decfsz	9,f
 12738  0839  2830               	goto	u4135
 12739  083A  0008               	return
 12740  083B                     __end_of_Button_Baseline_Initialize:	
 12741                           
 12742                           	psect	text79
 12743  1403                     __ptext79:	
 12744 ;; *************** function _Button_Reading_Update *****************
 12745 ;; Defined at:
 12746 ;;		line 390 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12747 ;; Parameters:    Size  Location     Type
 12748 ;;  button          1    wreg     PTR struct .
 12749 ;;		 -> mtouch_button(68), 
 12750 ;; Auto vars:     Size  Location     Type
 12751 ;;  button          1    3[BANK0 ] PTR struct .
 12752 ;;		 -> mtouch_button(68), 
 12753 ;; Return value:  Size  Location     Type
 12754 ;;                  1    wreg      void 
 12755 ;; Registers used:
 12756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12757 ;; Tracked objects:
 12758 ;;		On entry : 0/0
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12762 ;;      Params:         0       0       0       0       0       0       0       0
 12763 ;;      Locals:         0       1       0       0       0       0       0       0
 12764 ;;      Temps:          0       0       0       0       0       0       0       0
 12765 ;;      Totals:         0       1       0       0       0       0       0       0
 12766 ;;Total ram usage:        1 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    7
 12769 ;; This function calls:
 12770 ;;		_Button_Reading_Update_Helper
 12771 ;; This function is called by:
 12772 ;;		_Button_Service
 12773 ;; This function uses a non-reentrant model
 12774 ;;
 12775                           
 12776                           
 12777                           ;psect for function _Button_Reading_Update
 12778  1403                     _Button_Reading_Update:	
 12779                           
 12780                           ;incstack = 0
 12781                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12782                           ;Button_Reading_Update@button stored from wreg
 12783  1403  0020               	movlb	0	; select bank0
 12784  1404  00A3               	movwf	Button_Reading_Update@button
 12785                           
 12786                           ;mcc_generated_files/mtouch/mtouch_button.c: 390: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 391: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 392:     if (GIE == (uint8_t) 1)
 12787  1405  1F8B               	btfss	11,7	;volatile
 12788  1406  2C0D               	goto	l5934
 12789                           
 12790                           ;mcc_generated_files/mtouch/mtouch_button.c: 393:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 394:         GIE = (uint8_t) 0;
 12791  1407  138B               	bcf	11,7	;volatile
 12792                           
 12793                           ;mcc_generated_files/mtouch/mtouch_button.c: 395:         Button_Reading_Update_Helper(b
      +                          utton);
 12794  1408  0823               	movf	Button_Reading_Update@button,w
 12795  1409  3189  21BB         	fcall	_Button_Reading_Update_Helper
 12796                           
 12797                           ;mcc_generated_files/mtouch/mtouch_button.c: 396:         GIE = (uint8_t) 1;
 12798  140B  178B               	bsf	11,7	;volatile
 12799                           
 12800                           ;mcc_generated_files/mtouch/mtouch_button.c: 397:     }
 12801  140C  0008               	return
 12802  140D                     l5934:	
 12803                           
 12804                           ;mcc_generated_files/mtouch/mtouch_button.c: 399:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 400:         Button_Reading_Update_Helper(button);
 12805  140D  0823               	movf	Button_Reading_Update@button,w
 12806  140E  3189  21BB         	fcall	_Button_Reading_Update_Helper
 12807  1410  0008               	return
 12808  1411                     __end_of_Button_Reading_Update:	
 12809                           
 12810                           	psect	text80
 12811  09BB                     __ptext80:	
 12812 ;; *************** function _Button_Reading_Update_Helper *****************
 12813 ;; Defined at:
 12814 ;;		line 404 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12815 ;; Parameters:    Size  Location     Type
 12816 ;;  button          1    wreg     PTR struct .
 12817 ;;		 -> mtouch_button(68), 
 12818 ;; Auto vars:     Size  Location     Type
 12819 ;;  button          1    2[BANK0 ] PTR struct .
 12820 ;;		 -> mtouch_button(68), 
 12821 ;; Return value:  Size  Location     Type
 12822 ;;                  1    wreg      void 
 12823 ;; Registers used:
 12824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12825 ;; Tracked objects:
 12826 ;;		On entry : 0/0
 12827 ;;		On exit  : 0/0
 12828 ;;		Unchanged: 0/0
 12829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12830 ;;      Params:         0       0       0       0       0       0       0       0
 12831 ;;      Locals:         0       1       0       0       0       0       0       0
 12832 ;;      Temps:          0       2       0       0       0       0       0       0
 12833 ;;      Totals:         0       3       0       0       0       0       0       0
 12834 ;;Total ram usage:        3 bytes
 12835 ;; Hardware stack levels used:    1
 12836 ;; Hardware stack levels required when called:    6
 12837 ;; This function calls:
 12838 ;;		_MTOUCH_Sensor_RawSample_Get
 12839 ;; This function is called by:
 12840 ;;		_Button_Reading_Update
 12841 ;; This function uses a non-reentrant model
 12842 ;;
 12843                           
 12844                           
 12845                           ;psect for function _Button_Reading_Update_Helper
 12846  09BB                     _Button_Reading_Update_Helper:	
 12847                           
 12848                           ;incstack = 0
 12849                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12850                           ;Button_Reading_Update_Helper@button stored from wreg
 12851  09BB  0020               	movlb	0	; select bank0
 12852  09BC  00A2               	movwf	Button_Reading_Update_Helper@button
 12853                           
 12854                           ;mcc_generated_files/mtouch/mtouch_button.c: 404: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 405: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 406:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12855  09BD  0822               	movf	Button_Reading_Update_Helper@button,w
 12856  09BE  3E02               	addlw	2
 12857  09BF  0086               	movwf	6
 12858  09C0  3001               	movlw	1	; select bank2/3
 12859  09C1  0087               	movwf	7
 12860  09C2  0801               	movf	1,w
 12861  09C3  1903               	btfsc	3,2
 12862  09C4  29F9               	goto	l5832
 12863                           
 12864                           ;mcc_generated_files/mtouch/mtouch_button.c: 407:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 408:         button->reading -= button->reading>>((uint8_t)2u);
 12865  09C5  0822               	movf	Button_Reading_Update_Helper@button,w
 12866  09C6  3E03               	addlw	3
 12867  09C7  0086               	movwf	6
 12868  09C8  3001               	movlw	1	; select bank2/3
 12869  09C9  0087               	movwf	7
 12870  09CA  3F40               	moviw [0]fsr1
 12871  09CB  00A0               	movwf	??_Button_Reading_Update_Helper
 12872  09CC  3F41               	moviw [1]fsr1
 12873  09CD  00A1               	movwf	??_Button_Reading_Update_Helper+1
 12874  09CE  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 12875  09CF  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 12876  09D0  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 12877  09D1  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 12878  09D2  0822               	movf	Button_Reading_Update_Helper@button,w
 12879  09D3  3E03               	addlw	3
 12880  09D4  0086               	movwf	6
 12881  09D5  3001               	movlw	1	; select bank2/3
 12882  09D6  0087               	movwf	7
 12883  09D7  0820               	movf	??_Button_Reading_Update_Helper,w
 12884  09D8  0281               	subwf	1,f
 12885  09D9  3141               	addfsr 1,1
 12886  09DA  0821               	movf	??_Button_Reading_Update_Helper+1,w
 12887  09DB  3B81               	subwfb	1,f
 12888  09DC  317F               	addfsr 1,-1
 12889                           
 12890                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12891  09DD  0A22               	incf	Button_Reading_Update_Helper@button,w
 12892  09DE  0086               	movwf	6
 12893  09DF  3001               	movlw	1	; select bank2/3
 12894  09E0  0087               	movwf	7
 12895  09E1  0801               	movf	1,w
 12896  09E2  3194  24D7         	fcall	_MTOUCH_Sensor_RawSample_Get
 12897  09E4  0876               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12898  09E5  0020               	movlb	0	; select bank0
 12899  09E6  00A0               	movwf	??_Button_Reading_Update_Helper
 12900  09E7  0877               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12901  09E8  00A1               	movwf	??_Button_Reading_Update_Helper+1
 12902  09E9  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 12903  09EA  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 12904  09EB  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 12905  09EC  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 12906  09ED  0822               	movf	Button_Reading_Update_Helper@button,w
 12907  09EE  3E03               	addlw	3
 12908  09EF  0086               	movwf	6
 12909  09F0  3001               	movlw	1	; select bank2/3
 12910  09F1  0087               	movwf	7
 12911  09F2  0820               	movf	??_Button_Reading_Update_Helper,w
 12912  09F3  0781               	addwf	1,f
 12913  09F4  3141               	addfsr 1,1
 12914  09F5  0821               	movf	??_Button_Reading_Update_Helper+1,w
 12915  09F6  3D81               	addwfc	1,f
 12916  09F7  317F               	addfsr 1,-1
 12917                           
 12918                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     }
 12919  09F8  0008               	return
 12920  09F9                     l5832:	
 12921                           
 12922                           ;mcc_generated_files/mtouch/mtouch_button.c: 412:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 413:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12923  09F9  0A22               	incf	Button_Reading_Update_Helper@button,w
 12924  09FA  0086               	movwf	6
 12925  09FB  3001               	movlw	1	; select bank2/3
 12926  09FC  0087               	movwf	7
 12927  09FD  0801               	movf	1,w
 12928  09FE  3194  24D7         	fcall	_MTOUCH_Sensor_RawSample_Get
 12929  0A00  0020               	movlb	0	; select bank0
 12930  0A01  0822               	movf	Button_Reading_Update_Helper@button,w
 12931  0A02  3E03               	addlw	3
 12932  0A03  0086               	movwf	6
 12933  0A04  3001               	movlw	1	; select bank2/3
 12934  0A05  0087               	movwf	7
 12935  0A06  0876               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12936  0A07  3FC0               	movwi [0]fsr1
 12937  0A08  0877               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12938  0A09  3FC1               	movwi [1]fsr1
 12939  0A0A  0008               	return
 12940  0A0B                     __end_of_Button_Reading_Update_Helper:	
 12941                           
 12942                           	psect	text81
 12943  14D7                     __ptext81:	
 12944 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12945 ;; Defined at:
 12946 ;;		line 776 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12947 ;; Parameters:    Size  Location     Type
 12948 ;;  name            1    wreg     enum E2871
 12949 ;; Auto vars:     Size  Location     Type
 12950 ;;  name            1    9[COMMON] enum E2871
 12951 ;; Return value:  Size  Location     Type
 12952 ;;                  2    6[COMMON] unsigned short 
 12953 ;; Registers used:
 12954 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12955 ;; Tracked objects:
 12956 ;;		On entry : 0/0
 12957 ;;		On exit  : 0/0
 12958 ;;		Unchanged: 0/0
 12959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12960 ;;      Params:         2       0       0       0       0       0       0       0
 12961 ;;      Locals:         1       0       0       0       0       0       0       0
 12962 ;;      Temps:          1       0       0       0       0       0       0       0
 12963 ;;      Totals:         4       0       0       0       0       0       0       0
 12964 ;;Total ram usage:        4 bytes
 12965 ;; Hardware stack levels used:    1
 12966 ;; Hardware stack levels required when called:    5
 12967 ;; This function calls:
 12968 ;;		___bmul
 12969 ;; This function is called by:
 12970 ;;		_Button_Reading_Update_Helper
 12971 ;;		_Button_Baseline_Initialize
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           
 12976                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12977  14D7                     _MTOUCH_Sensor_RawSample_Get:	
 12978                           
 12979                           ;incstack = 0
 12980                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12981                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12982  14D7  00F9               	movwf	MTOUCH_Sensor_RawSample_Get@name
 12983                           
 12984                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          777: {;mcc_generated_files/mtouch/mtouch_sensor.c: 779:         return mtouch_sensor[nam
      +                          e].rawSample;
 12985  14D8  3009               	movlw	9
 12986  14D9  00F8               	movwf	??_MTOUCH_Sensor_RawSample_Get
 12987  14DA  0878               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 12988  14DB  00F2               	movwf	___bmul@multiplicand
 12989  14DC  0879               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12990  14DD  3194  24C6         	fcall	___bmul
 12991  14DF  3E26               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 12992  14E0  0086               	movwf	6
 12993  14E1  3001               	movlw	1	; select bank2/3
 12994  14E2  0087               	movwf	7
 12995  14E3  3F40               	moviw [0]fsr1
 12996  14E4  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get
 12997  14E5  3F41               	moviw [1]fsr1
 12998  14E6  00F7               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 12999  14E7  0008               	return
 13000  14E8                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 13001                           
 13002                           	psect	text82
 13003  14C6                     __ptext82:	
 13004 ;; *************** function ___bmul *****************
 13005 ;; Defined at:
 13006 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 13007 ;; Parameters:    Size  Location     Type
 13008 ;;  multiplier      1    wreg     unsigned char 
 13009 ;;  multiplicand    1    2[COMMON] unsigned char 
 13010 ;; Auto vars:     Size  Location     Type
 13011 ;;  multiplier      1    5[COMMON] unsigned char 
 13012 ;;  product         1    4[COMMON] unsigned char 
 13013 ;; Return value:  Size  Location     Type
 13014 ;;                  1    wreg      unsigned char 
 13015 ;; Registers used:
 13016 ;;		wreg, status,2, status,0
 13017 ;; Tracked objects:
 13018 ;;		On entry : 0/0
 13019 ;;		On exit  : 0/0
 13020 ;;		Unchanged: 0/0
 13021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13022 ;;      Params:         1       0       0       0       0       0       0       0
 13023 ;;      Locals:         2       0       0       0       0       0       0       0
 13024 ;;      Temps:          1       0       0       0       0       0       0       0
 13025 ;;      Totals:         4       0       0       0       0       0       0       0
 13026 ;;Total ram usage:        4 bytes
 13027 ;; Hardware stack levels used:    1
 13028 ;; Hardware stack levels required when called:    4
 13029 ;; This function calls:
 13030 ;;		Nothing
 13031 ;; This function is called by:
 13032 ;;		_MTOUCH_Sensor_Initialize
 13033 ;;		_MTOUCH_Sensor_RawSample_Get
 13034 ;;		_MTOUCH_Sensor_Enable
 13035 ;;		_MTOUCH_Sensor_Calibrate
 13036 ;;		_MTOUCH_Sensor_isCalibrated
 13037 ;;		_MTOUCH_Sensor_wasSampled
 13038 ;; This function uses a non-reentrant model
 13039 ;;
 13040                           
 13041                           
 13042                           ;psect for function ___bmul
 13043  14C6                     ___bmul:	
 13044                           
 13045                           ;incstack = 0
 13046                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 13047                           ;___bmul@multiplier stored from wreg
 13048  14C6  00F5               	movwf	___bmul@multiplier
 13049  14C7  01F4               	clrf	___bmul@product
 13050  14C8                     l5504:	
 13051  14C8  1C75               	btfss	___bmul@multiplier,0
 13052  14C9  2CCE               	goto	l5508
 13053  14CA  0872               	movf	___bmul@multiplicand,w
 13054  14CB  00F3               	movwf	??___bmul
 13055  14CC  0873               	movf	??___bmul,w
 13056  14CD  07F4               	addwf	___bmul@product,f
 13057  14CE                     l5508:	
 13058  14CE  1003               	clrc
 13059  14CF  0DF2               	rlf	___bmul@multiplicand,f
 13060  14D0  1003               	clrc
 13061  14D1  0CF5               	rrf	___bmul@multiplier,f
 13062  14D2  0875               	movf	___bmul@multiplier,w
 13063  14D3  1D03               	btfss	3,2
 13064  14D4  2CC8               	goto	l5504
 13065  14D5  0874               	movf	___bmul@product,w
 13066  14D6  0008               	return
 13067  14D7                     __end_of___bmul:	
 13068                           
 13069                           	psect	text83
 13070  0BE5                     __ptext83:	
 13071 ;; *************** function _Button_Deviation_Update *****************
 13072 ;; Defined at:
 13073 ;;		line 361 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13074 ;; Parameters:    Size  Location     Type
 13075 ;;  button          1    wreg     PTR struct .
 13076 ;;		 -> mtouch_button(68), 
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  button          1    2[COMMON] PTR struct .
 13079 ;;		 -> mtouch_button(68), 
 13080 ;;  deviation       4    3[COMMON] long 
 13081 ;; Return value:  Size  Location     Type
 13082 ;;                  1    wreg      void 
 13083 ;; Registers used:
 13084 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13085 ;; Tracked objects:
 13086 ;;		On entry : 0/0
 13087 ;;		On exit  : 0/0
 13088 ;;		Unchanged: 0/0
 13089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13090 ;;      Params:         0       0       0       0       0       0       0       0
 13091 ;;      Locals:         5       0       0       0       0       0       0       0
 13092 ;;      Temps:          0      10       0       0       0       0       0       0
 13093 ;;      Totals:         5      10       0       0       0       0       0       0
 13094 ;;Total ram usage:       15 bytes
 13095 ;; Hardware stack levels used:    1
 13096 ;; Hardware stack levels required when called:    4
 13097 ;; This function calls:
 13098 ;;		Nothing
 13099 ;; This function is called by:
 13100 ;;		_Button_Service
 13101 ;; This function uses a non-reentrant model
 13102 ;;
 13103                           
 13104                           
 13105                           ;psect for function _Button_Deviation_Update
 13106  0BE5                     _Button_Deviation_Update:	
 13107                           
 13108                           ;incstack = 0
 13109                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 13110                           ;Button_Deviation_Update@button stored from wreg
 13111  0BE5  00F2               	movwf	Button_Deviation_Update@button
 13112                           
 13113                           ;mcc_generated_files/mtouch/mtouch_button.c: 361: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 362: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 363:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 365:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 13114  0BE6  0872               	movf	Button_Deviation_Update@button,w
 13115  0BE7  3E05               	addlw	5
 13116  0BE8  0086               	movwf	6
 13117  0BE9  3001               	movlw	1	; select bank2/3
 13118  0BEA  0087               	movwf	7
 13119  0BEB  3F40               	moviw [0]fsr1
 13120  0BEC  0020               	movlb	0	; select bank0
 13121  0BED  00A0               	movwf	??_Button_Deviation_Update
 13122  0BEE  3F41               	moviw [1]fsr1
 13123  0BEF  00A1               	movwf	??_Button_Deviation_Update+1
 13124  0BF0  3F42               	moviw [2]fsr1
 13125  0BF1  00A2               	movwf	??_Button_Deviation_Update+2
 13126  0BF2  3F43               	moviw [3]fsr1
 13127  0BF3  00A3               	movwf	??_Button_Deviation_Update+3
 13128  0BF4  3004               	movlw	4
 13129  0BF5                     u4295:	
 13130  0BF5  36A3               	lsrf	??_Button_Deviation_Update+3,f
 13131  0BF6  0CA2               	rrf	??_Button_Deviation_Update+2,f
 13132  0BF7  0CA1               	rrf	??_Button_Deviation_Update+1,f
 13133  0BF8  0CA0               	rrf	??_Button_Deviation_Update,f
 13134  0BF9  0B89               	decfsz	9,f
 13135  0BFA  2BF5               	goto	u4295
 13136  0BFB  0872               	movf	Button_Deviation_Update@button,w
 13137  0BFC  3E03               	addlw	3
 13138  0BFD  0086               	movwf	6
 13139  0BFE  3001               	movlw	1	; select bank2/3
 13140  0BFF  0087               	movwf	7
 13141  0C00  3F40               	moviw [0]fsr1
 13142  0C01  00A4               	movwf	??_Button_Deviation_Update+4
 13143  0C02  3F41               	moviw [1]fsr1
 13144  0C03  00A5               	movwf	??_Button_Deviation_Update+5
 13145  0C04  0824               	movf	??_Button_Deviation_Update+4,w
 13146  0C05  00A6               	movwf	??_Button_Deviation_Update+6
 13147  0C06  0825               	movf	??_Button_Deviation_Update+5,w
 13148  0C07  00A7               	movwf	??_Button_Deviation_Update+7
 13149  0C08  01A8               	clrf	??_Button_Deviation_Update+8
 13150  0C09  01A9               	clrf	??_Button_Deviation_Update+9
 13151  0C0A  0820               	movf	??_Button_Deviation_Update,w
 13152  0C0B  02A6               	subwf	??_Button_Deviation_Update+6,f
 13153  0C0C  0821               	movf	??_Button_Deviation_Update+1,w
 13154  0C0D  3BA7               	subwfb	??_Button_Deviation_Update+7,f
 13155  0C0E  0822               	movf	??_Button_Deviation_Update+2,w
 13156  0C0F  3BA8               	subwfb	??_Button_Deviation_Update+8,f
 13157  0C10  0823               	movf	??_Button_Deviation_Update+3,w
 13158  0C11  3BA9               	subwfb	??_Button_Deviation_Update+9,f
 13159  0C12  0829               	movf	??_Button_Deviation_Update+9,w
 13160  0C13  00F6               	movwf	Button_Deviation_Update@deviation+3
 13161  0C14  0828               	movf	??_Button_Deviation_Update+8,w
 13162  0C15  00F5               	movwf	Button_Deviation_Update@deviation+2
 13163  0C16  0827               	movf	??_Button_Deviation_Update+7,w
 13164  0C17  00F4               	movwf	Button_Deviation_Update@deviation+1
 13165  0C18  0826               	movf	??_Button_Deviation_Update+6,w
 13166  0C19  00F3               	movwf	Button_Deviation_Update@deviation
 13167                           
 13168                           ;mcc_generated_files/mtouch/mtouch_button.c: 368:     deviation = deviation >> (button->
      +                          scaling);
 13169  0C1A  0873               	movf	Button_Deviation_Update@deviation,w
 13170  0C1B  00A0               	movwf	??_Button_Deviation_Update
 13171  0C1C  0874               	movf	Button_Deviation_Update@deviation+1,w
 13172  0C1D  00A1               	movwf	??_Button_Deviation_Update+1
 13173  0C1E  0875               	movf	Button_Deviation_Update@deviation+2,w
 13174  0C1F  00A2               	movwf	??_Button_Deviation_Update+2
 13175  0C20  0876               	movf	Button_Deviation_Update@deviation+3,w
 13176  0C21  00A3               	movwf	??_Button_Deviation_Update+3
 13177  0C22  0872               	movf	Button_Deviation_Update@button,w
 13178  0C23  3E0F               	addlw	15
 13179  0C24  0086               	movwf	6
 13180  0C25  3001               	movlw	1	; select bank2/3
 13181  0C26  0087               	movwf	7
 13182  0C27  0A01               	incf	1,w
 13183  0C28  2C2D               	goto	u4300
 13184  0C29                     u4305:	
 13185  0C29  37A3               	asrf	??_Button_Deviation_Update+3,f
 13186  0C2A  0CA2               	rrf	??_Button_Deviation_Update+2,f
 13187  0C2B  0CA1               	rrf	??_Button_Deviation_Update+1,f
 13188  0C2C  0CA0               	rrf	??_Button_Deviation_Update,f
 13189  0C2D                     u4300:	
 13190  0C2D  0B89               	decfsz	9,f
 13191  0C2E  2C29               	goto	u4305
 13192  0C2F  0823               	movf	??_Button_Deviation_Update+3,w
 13193  0C30  00F6               	movwf	Button_Deviation_Update@deviation+3
 13194  0C31  0822               	movf	??_Button_Deviation_Update+2,w
 13195  0C32  00F5               	movwf	Button_Deviation_Update@deviation+2
 13196  0C33  0821               	movf	??_Button_Deviation_Update+1,w
 13197  0C34  00F4               	movwf	Button_Deviation_Update@deviation+1
 13198  0C35  0820               	movf	??_Button_Deviation_Update,w
 13199  0C36  00F3               	movwf	Button_Deviation_Update@deviation
 13200                           
 13201                           ;mcc_generated_files/mtouch/mtouch_button.c: 371:     if (deviation > ((0x7f)))
 13202  0C37  1BF6               	btfsc	Button_Deviation_Update@deviation+3,7
 13203  0C38  2C4E               	goto	l5942
 13204  0C39  0876               	movf	Button_Deviation_Update@deviation+3,w
 13205  0C3A  1D03               	btfss	3,2
 13206  0C3B  2C46               	goto	l5940
 13207  0C3C  0875               	movf	Button_Deviation_Update@deviation+2,w
 13208  0C3D  1D03               	btfss	3,2
 13209  0C3E  2C46               	goto	l5940
 13210  0C3F  0874               	movf	Button_Deviation_Update@deviation+1,w
 13211  0C40  1D03               	btfss	3,2
 13212  0C41  2C46               	goto	l5940
 13213  0C42  3080               	movlw	128
 13214  0C43  0273               	subwf	Button_Deviation_Update@deviation,w
 13215  0C44  1C03               	btfss	3,0
 13216  0C45  2C4E               	goto	l5942
 13217  0C46                     l5940:	
 13218                           
 13219                           ;mcc_generated_files/mtouch/mtouch_button.c: 372:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 373:         deviation = ((0x7f));
 13220  0C46  3000               	movlw	0
 13221  0C47  00F6               	movwf	Button_Deviation_Update@deviation+3
 13222  0C48  3000               	movlw	0
 13223  0C49  00F5               	movwf	Button_Deviation_Update@deviation+2
 13224  0C4A  3000               	movlw	0
 13225  0C4B  00F4               	movwf	Button_Deviation_Update@deviation+1
 13226  0C4C  307F               	movlw	127
 13227  0C4D  00F3               	movwf	Button_Deviation_Update@deviation
 13228  0C4E                     l5942:	
 13229                           
 13230                           ;mcc_generated_files/mtouch/mtouch_button.c: 375:     if (deviation < ((-1-0x7f)))
 13231  0C4E  1FF6               	btfss	Button_Deviation_Update@deviation+3,7
 13232  0C4F  2C62               	goto	l5946
 13233  0C50  3080               	movlw	128
 13234  0C51  0273               	subwf	Button_Deviation_Update@deviation,w
 13235  0C52  30FF               	movlw	255
 13236  0C53  3B74               	subwfb	Button_Deviation_Update@deviation+1,w
 13237  0C54  30FF               	movlw	255
 13238  0C55  3B75               	subwfb	Button_Deviation_Update@deviation+2,w
 13239  0C56  30FF               	movlw	255
 13240  0C57  3B76               	subwfb	Button_Deviation_Update@deviation+3,w
 13241  0C58  1803               	btfsc	3,0
 13242  0C59  2C62               	goto	l5946
 13243                           
 13244                           ;mcc_generated_files/mtouch/mtouch_button.c: 376:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 377:         deviation = ((-1-0x7f));
 13245  0C5A  30FF               	movlw	255
 13246  0C5B  00F6               	movwf	Button_Deviation_Update@deviation+3
 13247  0C5C  30FF               	movlw	255
 13248  0C5D  00F5               	movwf	Button_Deviation_Update@deviation+2
 13249  0C5E  30FF               	movlw	255
 13250  0C5F  00F4               	movwf	Button_Deviation_Update@deviation+1
 13251  0C60  3080               	movlw	128
 13252  0C61  00F3               	movwf	Button_Deviation_Update@deviation
 13253  0C62                     l5946:	
 13254                           
 13255                           ;mcc_generated_files/mtouch/mtouch_button.c: 380:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 13256  0C62  0873               	movf	Button_Deviation_Update@deviation,w
 13257  0C63  00A0               	movwf	??_Button_Deviation_Update
 13258  0C64  0872               	movf	Button_Deviation_Update@button,w
 13259  0C65  3E09               	addlw	9
 13260  0C66  0086               	movwf	6
 13261  0C67  3001               	movlw	1	; select bank2/3
 13262  0C68  0087               	movwf	7
 13263  0C69  0820               	movf	??_Button_Deviation_Update,w
 13264  0C6A  0081               	movwf	1
 13265  0C6B  0008               	return
 13266  0C6C                     __end_of_Button_Deviation_Update:	
 13267                           
 13268                           	psect	text84
 13269  1387                     __ptext84:	
 13270 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 13271 ;; Defined at:
 13272 ;;		line 445 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13273 ;; Parameters:    Size  Location     Type
 13274 ;;  callback        2    2[COMMON] PTR FTN(enum E3070,)void
 13275 ;;		 -> myButtonPressedCallback(1), 
 13276 ;; Auto vars:     Size  Location     Type
 13277 ;;		None
 13278 ;; Return value:  Size  Location     Type
 13279 ;;                  1    wreg      void 
 13280 ;; Registers used:
 13281 ;;		wreg
 13282 ;; Tracked objects:
 13283 ;;		On entry : 0/0
 13284 ;;		On exit  : 0/0
 13285 ;;		Unchanged: 0/0
 13286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13287 ;;      Params:         2       0       0       0       0       0       0       0
 13288 ;;      Locals:         0       0       0       0       0       0       0       0
 13289 ;;      Temps:          0       0       0       0       0       0       0       0
 13290 ;;      Totals:         2       0       0       0       0       0       0       0
 13291 ;;Total ram usage:        2 bytes
 13292 ;; Hardware stack levels used:    1
 13293 ;; Hardware stack levels required when called:    4
 13294 ;; This function calls:
 13295 ;;		Nothing
 13296 ;; This function is called by:
 13297 ;;		_main
 13298 ;; This function uses a non-reentrant model
 13299 ;;
 13300                           
 13301                           
 13302                           ;psect for function _MTOUCH_Button_SetPressedCallback
 13303  1387                     _MTOUCH_Button_SetPressedCallback:	
 13304                           
 13305                           ;mcc_generated_files/mtouch/mtouch_button.c: 445: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          446: {;mcc_generated_files/mtouch/mtouch_button.c: 447:     callback_pressed = callback;
 13306                           
 13307                           ;incstack = 0
 13308                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 13309  1387  0873               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 13310  1388  0021               	movlb	1	; select bank1
 13311  1389  00EB               	movwf	(_callback_pressed+1)^(0+128)
 13312  138A  0872               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 13313  138B  00EA               	movwf	_callback_pressed^(0+128)
 13314  138C  0008               	return
 13315  138D                     __end_of_MTOUCH_Button_SetPressedCallback:	
 13316                           
 13317                           	psect	text85
 13318  1381                     __ptext85:	
 13319 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 13320 ;; Defined at:
 13321 ;;		line 449 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13322 ;; Parameters:    Size  Location     Type
 13323 ;;  callback        2    2[COMMON] PTR FTN(enum E3070,)void
 13324 ;;		 -> myButtonReleasedCallback(1), 
 13325 ;; Auto vars:     Size  Location     Type
 13326 ;;		None
 13327 ;; Return value:  Size  Location     Type
 13328 ;;                  1    wreg      void 
 13329 ;; Registers used:
 13330 ;;		wreg
 13331 ;; Tracked objects:
 13332 ;;		On entry : 0/0
 13333 ;;		On exit  : 0/0
 13334 ;;		Unchanged: 0/0
 13335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13336 ;;      Params:         2       0       0       0       0       0       0       0
 13337 ;;      Locals:         0       0       0       0       0       0       0       0
 13338 ;;      Temps:          0       0       0       0       0       0       0       0
 13339 ;;      Totals:         2       0       0       0       0       0       0       0
 13340 ;;Total ram usage:        2 bytes
 13341 ;; Hardware stack levels used:    1
 13342 ;; Hardware stack levels required when called:    4
 13343 ;; This function calls:
 13344 ;;		Nothing
 13345 ;; This function is called by:
 13346 ;;		_main
 13347 ;; This function uses a non-reentrant model
 13348 ;;
 13349                           
 13350                           
 13351                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 13352  1381                     _MTOUCH_Button_SetNotPressedCallback:	
 13353                           
 13354                           ;mcc_generated_files/mtouch/mtouch_button.c: 449: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 450: {;mcc_generated_files/mtouch/mtouch_button.c: 451:     callback_notPressed = cal
      +                          lback;
 13355                           
 13356                           ;incstack = 0
 13357                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 13358  1381  0873               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 13359  1382  0020               	movlb	0	; select bank0
 13360  1383  00EE               	movwf	_callback_notPressed+1
 13361  1384  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 13362  1385  00ED               	movwf	_callback_notPressed
 13363  1386  0008               	return
 13364  1387                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 13365                           
 13366                           	psect	text86
 13367  1360                     __ptext86:	
 13368 ;; *************** function _EUSART_is_rx_ready *****************
 13369 ;; Defined at:
 13370 ;;		line 120 in file "mcc_generated_files/eusart.c"
 13371 ;; Parameters:    Size  Location     Type
 13372 ;;		None
 13373 ;; Auto vars:     Size  Location     Type
 13374 ;;		None
 13375 ;; Return value:  Size  Location     Type
 13376 ;;                  1    wreg      unsigned char 
 13377 ;; Registers used:
 13378 ;;		wreg
 13379 ;; Tracked objects:
 13380 ;;		On entry : 0/0
 13381 ;;		On exit  : 0/0
 13382 ;;		Unchanged: 0/0
 13383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13384 ;;      Params:         0       0       0       0       0       0       0       0
 13385 ;;      Locals:         0       0       0       0       0       0       0       0
 13386 ;;      Temps:          0       0       0       0       0       0       0       0
 13387 ;;      Totals:         0       0       0       0       0       0       0       0
 13388 ;;Total ram usage:        0 bytes
 13389 ;; Hardware stack levels used:    1
 13390 ;; Hardware stack levels required when called:    4
 13391 ;; This function calls:
 13392 ;;		Nothing
 13393 ;; This function is called by:
 13394 ;;		_main
 13395 ;; This function uses a non-reentrant model
 13396 ;;
 13397                           
 13398                           
 13399                           ;psect for function _EUSART_is_rx_ready
 13400  1360                     _EUSART_is_rx_ready:	
 13401                           
 13402                           ;mcc_generated_files/eusart.c: 122:     return eusartRxCount;
 13403                           
 13404                           ;incstack = 0
 13405                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 13406  1360  0020               	movlb	0	; select bank0
 13407  1361  0869               	movf	_eusartRxCount,w	;volatile
 13408  1362  0008               	return
 13409  1363                     __end_of_EUSART_is_rx_ready:	
 13410                           
 13411                           	psect	text87
 13412  1690                     __ptext87:	
 13413 ;; *************** function _EUSART_Read *****************
 13414 ;; Defined at:
 13415 ;;		line 126 in file "mcc_generated_files/eusart.c"
 13416 ;; Parameters:    Size  Location     Type
 13417 ;;		None
 13418 ;; Auto vars:     Size  Location     Type
 13419 ;;  readValue       1    3[COMMON] unsigned char 
 13420 ;; Return value:  Size  Location     Type
 13421 ;;                  1    wreg      unsigned char 
 13422 ;; Registers used:
 13423 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13424 ;; Tracked objects:
 13425 ;;		On entry : 0/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13429 ;;      Params:         0       0       0       0       0       0       0       0
 13430 ;;      Locals:         1       0       0       0       0       0       0       0
 13431 ;;      Temps:          1       0       0       0       0       0       0       0
 13432 ;;      Totals:         2       0       0       0       0       0       0       0
 13433 ;;Total ram usage:        2 bytes
 13434 ;; Hardware stack levels used:    1
 13435 ;; Hardware stack levels required when called:    4
 13436 ;; This function calls:
 13437 ;;		Nothing
 13438 ;; This function is called by:
 13439 ;;		_main
 13440 ;; This function uses a non-reentrant model
 13441 ;;
 13442                           
 13443                           
 13444                           ;psect for function _EUSART_Read
 13445  1690                     _EUSART_Read:	
 13446  1690                     l4702:	
 13447                           ;mcc_generated_files/eusart.c: 130:     while(0 == eusartRxCount)
 13448                           
 13449                           ;incstack = 0
 13450                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 13451                           
 13452                           
 13453                           ;mcc_generated_files/eusart.c: 130:     while(0 == eusartRxCount)
 13454  1690  0020               	movlb	0	; select bank0
 13455  1691  0869               	movf	_eusartRxCount,w	;volatile
 13456  1692  1903               	btfsc	3,2
 13457  1693  2E90               	goto	l4702
 13458                           
 13459                           ;mcc_generated_files/eusart.c: 134:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 13460  1694  087A               	movf	_eusartRxTail,w	;volatile
 13461  1695  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13462  1696  0086               	movwf	6
 13463  1697  0187               	clrf	7
 13464  1698  0801               	movf	1,w
 13465  1699  00F2               	movwf	??_EUSART_Read
 13466  169A  0872               	movf	??_EUSART_Read,w
 13467  169B  00E8               	movwf	_eusartRxLastError	;volatile
 13468                           
 13469                           ;mcc_generated_files/eusart.c: 136:     readValue = eusartRxBuffer[eusartRxTail++];
 13470  169C  087A               	movf	_eusartRxTail,w
 13471  169D  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 13472  169E  0086               	movwf	6
 13473  169F  0187               	clrf	7
 13474  16A0  0801               	movf	1,w
 13475  16A1  00F2               	movwf	??_EUSART_Read
 13476  16A2  0872               	movf	??_EUSART_Read,w
 13477  16A3  00F3               	movwf	EUSART_Read@readValue
 13478  16A4  3001               	movlw	1
 13479  16A5  00F2               	movwf	??_EUSART_Read
 13480  16A6  0872               	movf	??_EUSART_Read,w
 13481  16A7  07FA               	addwf	_eusartRxTail,f	;volatile
 13482                           
 13483                           ;mcc_generated_files/eusart.c: 137:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 13484  16A8  3008               	movlw	8
 13485  16A9  027A               	subwf	_eusartRxTail,w	;volatile
 13486  16AA  1803               	btfsc	3,0
 13487                           
 13488                           ;mcc_generated_files/eusart.c: 138:     {;mcc_generated_files/eusart.c: 139:         eus
      +                          artRxTail = 0;
 13489  16AB  01FA               	clrf	_eusartRxTail	;volatile
 13490                           
 13491                           ;mcc_generated_files/eusart.c: 141:     PIE1bits.RCIE = 0;
 13492  16AC  0021               	movlb	1	; select bank1
 13493  16AD  1291               	bcf	17,5	;volatile
 13494                           
 13495                           ;mcc_generated_files/eusart.c: 142:     eusartRxCount--;
 13496  16AE  3001               	movlw	1
 13497  16AF  0020               	movlb	0	; select bank0
 13498  16B0  02E9               	subwf	_eusartRxCount,f	;volatile
 13499                           
 13500                           ;mcc_generated_files/eusart.c: 143:     PIE1bits.RCIE = 1;
 13501  16B1  0021               	movlb	1	; select bank1
 13502  16B2  1691               	bsf	17,5	;volatile
 13503                           
 13504                           ;mcc_generated_files/eusart.c: 145:     return readValue;
 13505  16B3  0873               	movf	EUSART_Read@readValue,w
 13506  16B4  0008               	return
 13507  16B5                     __end_of_EUSART_Read:	
 13508                           
 13509                           	psect	text88
 13510  0459                     __ptext88:	
 13511 ;; *************** function _DATA_PROCESS *****************
 13512 ;; Defined at:
 13513 ;;		line 226 in file "main.c"
 13514 ;; Parameters:    Size  Location     Type
 13515 ;;  x               1    wreg     unsigned char 
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;  x               1    7[COMMON] unsigned char 
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  1    wreg      void 
 13520 ;; Registers used:
 13521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13527 ;;      Params:         0       0       0       0       0       0       0       0
 13528 ;;      Locals:         1       0       0       0       0       0       0       0
 13529 ;;      Temps:          2       0       0       0       0       0       0       0
 13530 ;;      Totals:         3       0       0       0       0       0       0       0
 13531 ;;Total ram usage:        3 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:    5
 13534 ;; This function calls:
 13535 ;;		_LED_PROCESS
 13536 ;;		_RELAY_PROCESS
 13537 ;; This function is called by:
 13538 ;;		_main
 13539 ;; This function uses a non-reentrant model
 13540 ;;
 13541                           
 13542                           
 13543                           ;psect for function _DATA_PROCESS
 13544  0459                     _DATA_PROCESS:	
 13545                           
 13546                           ;incstack = 0
 13547                           ; Regs used in _DATA_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13548                           ;DATA_PROCESS@x stored from wreg
 13549  0459  00F7               	movwf	DATA_PROCESS@x
 13550                           
 13551                           ;main.c: 226: void DATA_PROCESS(char x);main.c: 227: {;main.c: 228:     timeout_count = 
      +                          0;
 13552  045A  0020               	movlb	0	; select bank0
 13553  045B  01DD               	clrf	_timeout_count
 13554  045C  01DE               	clrf	_timeout_count+1
 13555                           
 13556                           ;main.c: 229:     switch(x)
 13557  045D  2D41               	goto	l5008
 13558  045E                     l4908:	
 13559                           
 13560                           ;main.c: 232:         {;main.c: 233:             LED_PROCESS(0);
 13561  045E  3000               	movlw	0
 13562  045F  318E  2622  3184   	fcall	_LED_PROCESS
 13563                           
 13564                           ;main.c: 234:             RELAY_PROCESS(0);
 13565  0462  3000               	movlw	0
 13566  0463  318E  26BF         	fcall	_RELAY_PROCESS
 13567                           
 13568                           ;main.c: 235:             check_request = 0;
 13569  0465  0020               	movlb	0	; select bank0
 13570  0466  01E4               	clrf	_check_request
 13571                           
 13572                           ;main.c: 236:             last_touch_status.full_status = 0;
 13573  0467  01DB               	clrf	_last_touch_status
 13574  0468  01DC               	clrf	_last_touch_status+1
 13575                           
 13576                           ;main.c: 237:             break;
 13577  0469  0008               	return
 13578  046A                     l4914:	
 13579                           
 13580                           ;main.c: 240:         {;main.c: 241:             LED_PROCESS(1);
 13581  046A  3001               	movlw	1
 13582  046B  318E  2622  3184   	fcall	_LED_PROCESS
 13583                           
 13584                           ;main.c: 242:             RELAY_PROCESS(1);
 13585  046E  3001               	movlw	1
 13586  046F  318E  26BF         	fcall	_RELAY_PROCESS
 13587                           
 13588                           ;main.c: 243:             check_request = 0;
 13589  0471  0020               	movlb	0	; select bank0
 13590  0472  01E4               	clrf	_check_request
 13591                           
 13592                           ;main.c: 244:             last_touch_status.full_status = 1;
 13593  0473  3001               	movlw	1
 13594  0474  00DB               	movwf	_last_touch_status
 13595  0475  3000               	movlw	0
 13596  0476  00DC               	movwf	_last_touch_status+1
 13597                           
 13598                           ;main.c: 245:             break;
 13599  0477  0008               	return
 13600  0478                     l4920:	
 13601                           
 13602                           ;main.c: 248:         {;main.c: 249:             LED_PROCESS(2);
 13603  0478  3002               	movlw	2
 13604  0479  318E  2622  3184   	fcall	_LED_PROCESS
 13605                           
 13606                           ;main.c: 250:             RELAY_PROCESS(2);
 13607  047C  3002               	movlw	2
 13608  047D  318E  26BF         	fcall	_RELAY_PROCESS
 13609                           
 13610                           ;main.c: 251:             check_request = 0;
 13611  047F  0020               	movlb	0	; select bank0
 13612  0480  01E4               	clrf	_check_request
 13613                           
 13614                           ;main.c: 252:             last_touch_status.full_status = 2;
 13615  0481  3002               	movlw	2
 13616  0482  00DB               	movwf	_last_touch_status
 13617  0483  3000               	movlw	0
 13618  0484  00DC               	movwf	_last_touch_status+1
 13619                           
 13620                           ;main.c: 253:             break;
 13621  0485  0008               	return
 13622  0486                     l4926:	
 13623                           
 13624                           ;main.c: 256:         {;main.c: 257:             LED_PROCESS(3);
 13625  0486  3003               	movlw	3
 13626  0487  318E  2622  3184   	fcall	_LED_PROCESS
 13627                           
 13628                           ;main.c: 258:             RELAY_PROCESS(3);
 13629  048A  3003               	movlw	3
 13630  048B  318E  26BF         	fcall	_RELAY_PROCESS
 13631                           
 13632                           ;main.c: 259:             check_request = 0;
 13633  048D  0020               	movlb	0	; select bank0
 13634  048E  01E4               	clrf	_check_request
 13635                           
 13636                           ;main.c: 260:             last_touch_status.full_status = 3;
 13637  048F  3003               	movlw	3
 13638  0490  00DB               	movwf	_last_touch_status
 13639  0491  3000               	movlw	0
 13640  0492  00DC               	movwf	_last_touch_status+1
 13641                           
 13642                           ;main.c: 261:             break;
 13643  0493  0008               	return
 13644  0494                     l4932:	
 13645                           
 13646                           ;main.c: 264:         {;main.c: 265:             LED_PROCESS(4);
 13647  0494  3004               	movlw	4
 13648  0495  318E  2622  3184   	fcall	_LED_PROCESS
 13649                           
 13650                           ;main.c: 266:             RELAY_PROCESS(4);
 13651  0498  3004               	movlw	4
 13652  0499  318E  26BF         	fcall	_RELAY_PROCESS
 13653                           
 13654                           ;main.c: 267:             check_request = 0;
 13655  049B  0020               	movlb	0	; select bank0
 13656  049C  01E4               	clrf	_check_request
 13657                           
 13658                           ;main.c: 268:             last_touch_status.full_status = 4;
 13659  049D  3004               	movlw	4
 13660  049E  00DB               	movwf	_last_touch_status
 13661  049F  3000               	movlw	0
 13662  04A0  00DC               	movwf	_last_touch_status+1
 13663                           
 13664                           ;main.c: 269:             break;
 13665  04A1  0008               	return
 13666  04A2                     l4938:	
 13667                           
 13668                           ;main.c: 272:         {;main.c: 273:             LED_PROCESS(5);
 13669  04A2  3005               	movlw	5
 13670  04A3  318E  2622  3184   	fcall	_LED_PROCESS
 13671                           
 13672                           ;main.c: 274:             RELAY_PROCESS(5);
 13673  04A6  3005               	movlw	5
 13674  04A7  318E  26BF         	fcall	_RELAY_PROCESS
 13675                           
 13676                           ;main.c: 275:             check_request = 0;
 13677  04A9  0020               	movlb	0	; select bank0
 13678  04AA  01E4               	clrf	_check_request
 13679                           
 13680                           ;main.c: 276:             last_touch_status.full_status = 5;
 13681  04AB  3005               	movlw	5
 13682  04AC  00DB               	movwf	_last_touch_status
 13683  04AD  3000               	movlw	0
 13684  04AE  00DC               	movwf	_last_touch_status+1
 13685                           
 13686                           ;main.c: 277:             break;
 13687  04AF  0008               	return
 13688  04B0                     l4944:	
 13689                           
 13690                           ;main.c: 280:         {;main.c: 281:             LED_PROCESS(6);
 13691  04B0  3006               	movlw	6
 13692  04B1  318E  2622  3184   	fcall	_LED_PROCESS
 13693                           
 13694                           ;main.c: 282:             RELAY_PROCESS(6);
 13695  04B4  3006               	movlw	6
 13696  04B5  318E  26BF         	fcall	_RELAY_PROCESS
 13697                           
 13698                           ;main.c: 283:             check_request = 0;
 13699  04B7  0020               	movlb	0	; select bank0
 13700  04B8  01E4               	clrf	_check_request
 13701                           
 13702                           ;main.c: 284:             last_touch_status.full_status = 6;
 13703  04B9  3006               	movlw	6
 13704  04BA  00DB               	movwf	_last_touch_status
 13705  04BB  3000               	movlw	0
 13706  04BC  00DC               	movwf	_last_touch_status+1
 13707                           
 13708                           ;main.c: 285:             break;
 13709  04BD  0008               	return
 13710  04BE                     l4950:	
 13711                           
 13712                           ;main.c: 288:         {;main.c: 289:             LED_PROCESS(7);
 13713  04BE  3007               	movlw	7
 13714  04BF  318E  2622  3184   	fcall	_LED_PROCESS
 13715                           
 13716                           ;main.c: 290:             RELAY_PROCESS(7);
 13717  04C2  3007               	movlw	7
 13718  04C3  318E  26BF         	fcall	_RELAY_PROCESS
 13719                           
 13720                           ;main.c: 291:             check_request = 0;
 13721  04C5  0020               	movlb	0	; select bank0
 13722  04C6  01E4               	clrf	_check_request
 13723                           
 13724                           ;main.c: 292:             last_touch_status.full_status = 7;
 13725  04C7  3007               	movlw	7
 13726  04C8  00DB               	movwf	_last_touch_status
 13727  04C9  3000               	movlw	0
 13728  04CA  00DC               	movwf	_last_touch_status+1
 13729                           
 13730                           ;main.c: 293:             break;
 13731  04CB  0008               	return
 13732  04CC                     l4956:	
 13733                           
 13734                           ;main.c: 296:         {;main.c: 297:             LED_PROCESS(8);
 13735  04CC  3008               	movlw	8
 13736  04CD  318E  2622  3184   	fcall	_LED_PROCESS
 13737                           
 13738                           ;main.c: 298:             RELAY_PROCESS(8);
 13739  04D0  3008               	movlw	8
 13740  04D1  318E  26BF         	fcall	_RELAY_PROCESS
 13741                           
 13742                           ;main.c: 299:             check_request = 0;
 13743  04D3  0020               	movlb	0	; select bank0
 13744  04D4  01E4               	clrf	_check_request
 13745                           
 13746                           ;main.c: 300:             last_touch_status.full_status = 8;
 13747  04D5  3008               	movlw	8
 13748  04D6  00DB               	movwf	_last_touch_status
 13749  04D7  3000               	movlw	0
 13750  04D8  00DC               	movwf	_last_touch_status+1
 13751                           
 13752                           ;main.c: 301:             break;
 13753  04D9  0008               	return
 13754  04DA                     l4962:	
 13755                           
 13756                           ;main.c: 304:         {;main.c: 305:             LED_PROCESS(9);
 13757  04DA  3009               	movlw	9
 13758  04DB  318E  2622  3184   	fcall	_LED_PROCESS
 13759                           
 13760                           ;main.c: 306:             RELAY_PROCESS(9);
 13761  04DE  3009               	movlw	9
 13762  04DF  318E  26BF         	fcall	_RELAY_PROCESS
 13763                           
 13764                           ;main.c: 307:             check_request = 0;
 13765  04E1  0020               	movlb	0	; select bank0
 13766  04E2  01E4               	clrf	_check_request
 13767                           
 13768                           ;main.c: 308:             last_touch_status.full_status = 9;
 13769  04E3  3009               	movlw	9
 13770  04E4  00DB               	movwf	_last_touch_status
 13771  04E5  3000               	movlw	0
 13772  04E6  00DC               	movwf	_last_touch_status+1
 13773                           
 13774                           ;main.c: 309:             break;
 13775  04E7  0008               	return
 13776  04E8                     l4968:	
 13777                           
 13778                           ;main.c: 312:         {;main.c: 313:             LED_PROCESS(10);
 13779  04E8  300A               	movlw	10
 13780  04E9  318E  2622  3184   	fcall	_LED_PROCESS
 13781                           
 13782                           ;main.c: 314:             RELAY_PROCESS(10);
 13783  04EC  300A               	movlw	10
 13784  04ED  318E  26BF         	fcall	_RELAY_PROCESS
 13785                           
 13786                           ;main.c: 315:             check_request = 0;
 13787  04EF  0020               	movlb	0	; select bank0
 13788  04F0  01E4               	clrf	_check_request
 13789                           
 13790                           ;main.c: 316:             last_touch_status.full_status = 10;
 13791  04F1  300A               	movlw	10
 13792  04F2  00DB               	movwf	_last_touch_status
 13793  04F3  3000               	movlw	0
 13794  04F4  00DC               	movwf	_last_touch_status+1
 13795                           
 13796                           ;main.c: 317:             break;
 13797  04F5  0008               	return
 13798  04F6                     l4974:	
 13799                           
 13800                           ;main.c: 320:         {;main.c: 321:             LED_PROCESS(11);
 13801  04F6  300B               	movlw	11
 13802  04F7  318E  2622  3184   	fcall	_LED_PROCESS
 13803                           
 13804                           ;main.c: 322:             RELAY_PROCESS(11);
 13805  04FA  300B               	movlw	11
 13806  04FB  318E  26BF         	fcall	_RELAY_PROCESS
 13807                           
 13808                           ;main.c: 323:             check_request = 0;
 13809  04FD  0020               	movlb	0	; select bank0
 13810  04FE  01E4               	clrf	_check_request
 13811                           
 13812                           ;main.c: 324:             last_touch_status.full_status = 11;
 13813  04FF  300B               	movlw	11
 13814  0500  00DB               	movwf	_last_touch_status
 13815  0501  3000               	movlw	0
 13816  0502  00DC               	movwf	_last_touch_status+1
 13817                           
 13818                           ;main.c: 325:             break;
 13819  0503  0008               	return
 13820  0504                     l4980:	
 13821                           
 13822                           ;main.c: 328:         {;main.c: 329:             LED_PROCESS(12);
 13823  0504  300C               	movlw	12
 13824  0505  318E  2622  3184   	fcall	_LED_PROCESS
 13825                           
 13826                           ;main.c: 330:             RELAY_PROCESS(12);
 13827  0508  300C               	movlw	12
 13828  0509  318E  26BF         	fcall	_RELAY_PROCESS
 13829                           
 13830                           ;main.c: 331:             check_request = 0;
 13831  050B  0020               	movlb	0	; select bank0
 13832  050C  01E4               	clrf	_check_request
 13833                           
 13834                           ;main.c: 332:             last_touch_status.full_status = 12;
 13835  050D  300C               	movlw	12
 13836  050E  00DB               	movwf	_last_touch_status
 13837  050F  3000               	movlw	0
 13838  0510  00DC               	movwf	_last_touch_status+1
 13839                           
 13840                           ;main.c: 333:             break;
 13841  0511  0008               	return
 13842  0512                     l4986:	
 13843                           
 13844                           ;main.c: 336:         {;main.c: 337:             LED_PROCESS(13);
 13845  0512  300D               	movlw	13
 13846  0513  318E  2622  3184   	fcall	_LED_PROCESS
 13847                           
 13848                           ;main.c: 338:             RELAY_PROCESS(13);
 13849  0516  300D               	movlw	13
 13850  0517  318E  26BF         	fcall	_RELAY_PROCESS
 13851                           
 13852                           ;main.c: 339:             check_request = 0;
 13853  0519  0020               	movlb	0	; select bank0
 13854  051A  01E4               	clrf	_check_request
 13855                           
 13856                           ;main.c: 340:             last_touch_status.full_status = 13;
 13857  051B  300D               	movlw	13
 13858  051C  00DB               	movwf	_last_touch_status
 13859  051D  3000               	movlw	0
 13860  051E  00DC               	movwf	_last_touch_status+1
 13861                           
 13862                           ;main.c: 341:             break;
 13863  051F  0008               	return
 13864  0520                     l4992:	
 13865                           
 13866                           ;main.c: 344:         {;main.c: 345:             LED_PROCESS(14);
 13867  0520  300E               	movlw	14
 13868  0521  318E  2622  3184   	fcall	_LED_PROCESS
 13869                           
 13870                           ;main.c: 346:             RELAY_PROCESS(14);
 13871  0524  300E               	movlw	14
 13872  0525  318E  26BF         	fcall	_RELAY_PROCESS
 13873                           
 13874                           ;main.c: 347:             check_request = 0;
 13875  0527  0020               	movlb	0	; select bank0
 13876  0528  01E4               	clrf	_check_request
 13877                           
 13878                           ;main.c: 348:             last_touch_status.full_status = 14;
 13879  0529  300E               	movlw	14
 13880  052A  00DB               	movwf	_last_touch_status
 13881  052B  3000               	movlw	0
 13882  052C  00DC               	movwf	_last_touch_status+1
 13883                           
 13884                           ;main.c: 349:             break;
 13885  052D  0008               	return
 13886  052E                     l4998:	
 13887                           
 13888                           ;main.c: 352:         {;main.c: 353:             LED_PROCESS(15);
 13889  052E  300F               	movlw	15
 13890  052F  318E  2622  3184   	fcall	_LED_PROCESS
 13891                           
 13892                           ;main.c: 354:             RELAY_PROCESS(15);
 13893  0532  300F               	movlw	15
 13894  0533  318E  26BF         	fcall	_RELAY_PROCESS
 13895                           
 13896                           ;main.c: 355:             check_request = 0;
 13897  0535  0020               	movlb	0	; select bank0
 13898  0536  01E4               	clrf	_check_request
 13899                           
 13900                           ;main.c: 356:             last_touch_status.full_status = 15;
 13901  0537  300F               	movlw	15
 13902  0538  00DB               	movwf	_last_touch_status
 13903  0539  3000               	movlw	0
 13904  053A  00DC               	movwf	_last_touch_status+1
 13905                           
 13906                           ;main.c: 357:             break;
 13907  053B  0008               	return
 13908  053C                     l900:	
 13909                           ;main.c: 358:         };main.c: 359:         case 'U':
 13910                           
 13911                           
 13912                           ;main.c: 360:         {;main.c: 361:             update_state_flag = 1;
 13913  053C  01E1               	clrf	_update_state_flag
 13914  053D  0AE1               	incf	_update_state_flag,f
 13915                           
 13916                           ;main.c: 362:             break;
 13917  053E  0008               	return
 13918  053F                     l5004:	
 13919                           
 13920                           ;main.c: 365:         {;main.c: 366:             check_request = 0;
 13921  053F  01E4               	clrf	_check_request
 13922                           
 13923                           ;main.c: 367:             break;
 13924  0540  0008               	return
 13925  0541                     l5008:	
 13926  0541  0877               	movf	DATA_PROCESS@x,w
 13927  0542  00F5               	movwf	??_DATA_PROCESS
 13928  0543  01F6               	clrf	??_DATA_PROCESS+1
 13929                           
 13930                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13931                           ; Switch size 1, requested type "simple"
 13932                           ; Number of cases is 1, Range of values is 0 to 0
 13933                           ; switch strategies available:
 13934                           ; Name         Instructions Cycles
 13935                           ; simple_byte            4     3 (average)
 13936                           ; direct_byte            8     6 (fixed)
 13937                           ; jumptable            260     6 (fixed)
 13938                           ;	Chosen strategy is simple_byte
 13939  0544  0876               	movf	??_DATA_PROCESS+1,w
 13940  0545  3A00               	xorlw	0	; case 0
 13941  0546  1903               	skipnz
 13942  0547  2D49               	goto	l6592
 13943  0548  2D3F               	goto	l5004
 13944  0549                     l6592:	
 13945                           
 13946                           ; Switch size 1, requested type "simple"
 13947                           ; Number of cases is 17, Range of values is 48 to 85
 13948                           ; switch strategies available:
 13949                           ; Name         Instructions Cycles
 13950                           ; simple_byte           52    27 (average)
 13951                           ; direct_byte           85     9 (fixed)
 13952                           ; jumptable            263     9 (fixed)
 13953                           ;	Chosen strategy is simple_byte
 13954  0549  0875               	movf	??_DATA_PROCESS,w
 13955  054A  3A30               	xorlw	48	; case 48
 13956  054B  1903               	skipnz
 13957  054C  2C5E               	goto	l4908
 13958  054D  3A01               	xorlw	1	; case 49
 13959  054E  1903               	skipnz
 13960  054F  2C6A               	goto	l4914
 13961  0550  3A03               	xorlw	3	; case 50
 13962  0551  1903               	skipnz
 13963  0552  2C78               	goto	l4920
 13964  0553  3A01               	xorlw	1	; case 51
 13965  0554  1903               	skipnz
 13966  0555  2C86               	goto	l4926
 13967  0556  3A07               	xorlw	7	; case 52
 13968  0557  1903               	skipnz
 13969  0558  2C94               	goto	l4932
 13970  0559  3A01               	xorlw	1	; case 53
 13971  055A  1903               	skipnz
 13972  055B  2CA2               	goto	l4938
 13973  055C  3A03               	xorlw	3	; case 54
 13974  055D  1903               	skipnz
 13975  055E  2CB0               	goto	l4944
 13976  055F  3A01               	xorlw	1	; case 55
 13977  0560  1903               	skipnz
 13978  0561  2CBE               	goto	l4950
 13979  0562  3A0F               	xorlw	15	; case 56
 13980  0563  1903               	skipnz
 13981  0564  2CCC               	goto	l4956
 13982  0565  3A01               	xorlw	1	; case 57
 13983  0566  1903               	skipnz
 13984  0567  2CDA               	goto	l4962
 13985  0568  3A78               	xorlw	120	; case 65
 13986  0569  1903               	skipnz
 13987  056A  2CE8               	goto	l4968
 13988  056B  3A03               	xorlw	3	; case 66
 13989  056C  1903               	skipnz
 13990  056D  2CF6               	goto	l4974
 13991  056E  3A01               	xorlw	1	; case 67
 13992  056F  1903               	skipnz
 13993  0570  2D04               	goto	l4980
 13994  0571  3A07               	xorlw	7	; case 68
 13995  0572  1903               	skipnz
 13996  0573  2D12               	goto	l4986
 13997  0574  3A01               	xorlw	1	; case 69
 13998  0575  1903               	skipnz
 13999  0576  2D20               	goto	l4992
 14000  0577  3A02               	xorlw	2	; case 71
 14001  0578  1903               	skipnz
 14002  0579  2D2E               	goto	l4998
 14003  057A  3A12               	xorlw	18	; case 85
 14004  057B  1903               	skipnz
 14005  057C  2D3C               	goto	l900
 14006  057D  2D3F               	goto	l5004
 14007  057E  0008               	return
 14008  057F                     __end_of_DATA_PROCESS:	
 14009                           
 14010                           	psect	text89
 14011  0EBF                     __ptext89:	
 14012 ;; *************** function _RELAY_PROCESS *****************
 14013 ;; Defined at:
 14014 ;;		line 5 in file "relay.c"
 14015 ;; Parameters:    Size  Location     Type
 14016 ;;  x               1    wreg     unsigned char 
 14017 ;; Auto vars:     Size  Location     Type
 14018 ;;  x               1    4[COMMON] unsigned char 
 14019 ;; Return value:  Size  Location     Type
 14020 ;;                  1    wreg      void 
 14021 ;; Registers used:
 14022 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14023 ;; Tracked objects:
 14024 ;;		On entry : 0/0
 14025 ;;		On exit  : 0/0
 14026 ;;		Unchanged: 0/0
 14027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14028 ;;      Params:         0       0       0       0       0       0       0       0
 14029 ;;      Locals:         1       0       0       0       0       0       0       0
 14030 ;;      Temps:          2       0       0       0       0       0       0       0
 14031 ;;      Totals:         3       0       0       0       0       0       0       0
 14032 ;;Total ram usage:        3 bytes
 14033 ;; Hardware stack levels used:    1
 14034 ;; Hardware stack levels required when called:    4
 14035 ;; This function calls:
 14036 ;;		Nothing
 14037 ;; This function is called by:
 14038 ;;		_myButtonPressedCallback
 14039 ;;		_DATA_PROCESS
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           
 14044                           ;psect for function _RELAY_PROCESS
 14045  0EBF                     _RELAY_PROCESS:	
 14046                           
 14047                           ;incstack = 0
 14048                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 14049                           ;RELAY_PROCESS@x stored from wreg
 14050  0EBF  00F4               	movwf	RELAY_PROCESS@x
 14051                           
 14052                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 14053  0EC0  2F21               	goto	l4046
 14054  0EC1                     l1119:	
 14055                           ;relay.c: 10:         {;relay.c: 11:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14056                           
 14057  0EC1  0022               	movlb	2	; select bank2
 14058  0EC2  168E               	bsf	14,5	;volatile
 14059  0EC3  170D               	bsf	13,6	;volatile
 14060  0EC4  160C               	bsf	12,4	;volatile
 14061  0EC5  168C               	bsf	12,5	;volatile
 14062  0EC6  0008               	return
 14063  0EC7                     l1129:	
 14064                           ;relay.c: 15:         {;relay.c: 16:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14065                           
 14066  0EC7  0022               	movlb	2	; select bank2
 14067  0EC8  168E               	bsf	14,5	;volatile
 14068  0EC9  170D               	bsf	13,6	;volatile
 14069  0ECA  160C               	bsf	12,4	;volatile
 14070  0ECB  128C               	bcf	12,5	;volatile
 14071  0ECC  0008               	return
 14072  0ECD                     l1138:	
 14073                           ;relay.c: 20:         {;relay.c: 21:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14074                           
 14075  0ECD  0022               	movlb	2	; select bank2
 14076  0ECE  168E               	bsf	14,5	;volatile
 14077  0ECF  170D               	bsf	13,6	;volatile
 14078  0ED0  120C               	bcf	12,4	;volatile
 14079  0ED1  168C               	bsf	12,5	;volatile
 14080  0ED2  0008               	return
 14081  0ED3                     l1147:	
 14082                           ;relay.c: 25:         {;relay.c: 26:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14083                           
 14084  0ED3  0022               	movlb	2	; select bank2
 14085  0ED4  168E               	bsf	14,5	;volatile
 14086  0ED5  170D               	bsf	13,6	;volatile
 14087  0ED6  120C               	bcf	12,4	;volatile
 14088  0ED7  128C               	bcf	12,5	;volatile
 14089  0ED8  0008               	return
 14090  0ED9                     l1156:	
 14091                           ;relay.c: 30:         {;relay.c: 31:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14092                           
 14093  0ED9  0022               	movlb	2	; select bank2
 14094  0EDA  168E               	bsf	14,5	;volatile
 14095  0EDB  130D               	bcf	13,6	;volatile
 14096  0EDC  160C               	bsf	12,4	;volatile
 14097  0EDD  168C               	bsf	12,5	;volatile
 14098  0EDE  0008               	return
 14099  0EDF                     l1165:	
 14100                           ;relay.c: 35:         {;relay.c: 36:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14101                           
 14102  0EDF  0022               	movlb	2	; select bank2
 14103  0EE0  168E               	bsf	14,5	;volatile
 14104  0EE1  130D               	bcf	13,6	;volatile
 14105  0EE2  160C               	bsf	12,4	;volatile
 14106  0EE3  128C               	bcf	12,5	;volatile
 14107  0EE4  0008               	return
 14108  0EE5                     l1174:	
 14109                           ;relay.c: 40:         {;relay.c: 41:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14110                           
 14111  0EE5  0022               	movlb	2	; select bank2
 14112  0EE6  168E               	bsf	14,5	;volatile
 14113  0EE7  130D               	bcf	13,6	;volatile
 14114  0EE8  120C               	bcf	12,4	;volatile
 14115  0EE9  168C               	bsf	12,5	;volatile
 14116  0EEA  0008               	return
 14117  0EEB                     l1183:	
 14118                           ;relay.c: 45:         {;relay.c: 46:             do { LATCbits.LATC5 = 1; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14119                           
 14120  0EEB  0022               	movlb	2	; select bank2
 14121  0EEC  168E               	bsf	14,5	;volatile
 14122  0EED  130D               	bcf	13,6	;volatile
 14123  0EEE  120C               	bcf	12,4	;volatile
 14124  0EEF  128C               	bcf	12,5	;volatile
 14125  0EF0  0008               	return
 14126  0EF1                     l1192:	
 14127                           ;relay.c: 50:         {;relay.c: 51:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14128                           
 14129  0EF1  0022               	movlb	2	; select bank2
 14130  0EF2  128E               	bcf	14,5	;volatile
 14131  0EF3  170D               	bsf	13,6	;volatile
 14132  0EF4  160C               	bsf	12,4	;volatile
 14133  0EF5  168C               	bsf	12,5	;volatile
 14134  0EF6  0008               	return
 14135  0EF7                     l1201:	
 14136                           ;relay.c: 55:         {;relay.c: 56:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14137                           
 14138  0EF7  0022               	movlb	2	; select bank2
 14139  0EF8  128E               	bcf	14,5	;volatile
 14140  0EF9  170D               	bsf	13,6	;volatile
 14141  0EFA  160C               	bsf	12,4	;volatile
 14142  0EFB  128C               	bcf	12,5	;volatile
 14143  0EFC  0008               	return
 14144  0EFD                     l1210:	
 14145                           ;relay.c: 60:         {;relay.c: 61:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14146                           
 14147  0EFD  0022               	movlb	2	; select bank2
 14148  0EFE  128E               	bcf	14,5	;volatile
 14149  0EFF  170D               	bsf	13,6	;volatile
 14150  0F00  120C               	bcf	12,4	;volatile
 14151  0F01  168C               	bsf	12,5	;volatile
 14152  0F02  0008               	return
 14153  0F03                     l1219:	
 14154                           ;relay.c: 65:         {;relay.c: 66:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14155                           
 14156  0F03  0022               	movlb	2	; select bank2
 14157  0F04  128E               	bcf	14,5	;volatile
 14158  0F05  170D               	bsf	13,6	;volatile
 14159  0F06  120C               	bcf	12,4	;volatile
 14160  0F07  128C               	bcf	12,5	;volatile
 14161  0F08  0008               	return
 14162  0F09                     l1228:	
 14163                           ;relay.c: 70:         {;relay.c: 71:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14164                           
 14165  0F09  0022               	movlb	2	; select bank2
 14166  0F0A  128E               	bcf	14,5	;volatile
 14167  0F0B  130D               	bcf	13,6	;volatile
 14168  0F0C  160C               	bsf	12,4	;volatile
 14169  0F0D  168C               	bsf	12,5	;volatile
 14170  0F0E  0008               	return
 14171  0F0F                     l1237:	
 14172                           ;relay.c: 75:         {;relay.c: 76:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14173                           
 14174  0F0F  0022               	movlb	2	; select bank2
 14175  0F10  128E               	bcf	14,5	;volatile
 14176  0F11  130D               	bcf	13,6	;volatile
 14177  0F12  160C               	bsf	12,4	;volatile
 14178  0F13  128C               	bcf	12,5	;volatile
 14179  0F14  0008               	return
 14180  0F15                     l1246:	
 14181                           ;relay.c: 80:         {;relay.c: 81:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 1; } while(0);
 14182                           
 14183  0F15  0022               	movlb	2	; select bank2
 14184  0F16  128E               	bcf	14,5	;volatile
 14185  0F17  130D               	bcf	13,6	;volatile
 14186  0F18  120C               	bcf	12,4	;volatile
 14187  0F19  168C               	bsf	12,5	;volatile
 14188  0F1A  0008               	return
 14189  0F1B                     l1255:	
 14190                           ;relay.c: 85:         {;relay.c: 86:             do { LATCbits.LATC5 = 0; } while(0);do 
      +                          { LATBbits.LATB6 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);do { LATAbits.LATA5
      +                           = 0; } while(0);
 14191                           
 14192  0F1B  0022               	movlb	2	; select bank2
 14193  0F1C  128E               	bcf	14,5	;volatile
 14194  0F1D  130D               	bcf	13,6	;volatile
 14195  0F1E  120C               	bcf	12,4	;volatile
 14196  0F1F  128C               	bcf	12,5	;volatile
 14197  0F20  0008               	return
 14198  0F21                     l4046:	
 14199  0F21  0874               	movf	RELAY_PROCESS@x,w
 14200  0F22  00F2               	movwf	??_RELAY_PROCESS
 14201  0F23  01F3               	clrf	??_RELAY_PROCESS+1
 14202                           
 14203                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14204                           ; Switch size 1, requested type "simple"
 14205                           ; Number of cases is 1, Range of values is 0 to 0
 14206                           ; switch strategies available:
 14207                           ; Name         Instructions Cycles
 14208                           ; simple_byte            4     3 (average)
 14209                           ; direct_byte            8     6 (fixed)
 14210                           ; jumptable            260     6 (fixed)
 14211                           ;	Chosen strategy is simple_byte
 14212  0F24  0873               	movf	??_RELAY_PROCESS+1,w
 14213  0F25  3A00               	xorlw	0	; case 0
 14214  0F26  1903               	skipnz
 14215  0F27  2F29               	goto	l6594
 14216  0F28  2F5B               	goto	l1263
 14217  0F29                     l6594:	
 14218                           
 14219                           ; Switch size 1, requested type "simple"
 14220                           ; Number of cases is 16, Range of values is 0 to 15
 14221                           ; switch strategies available:
 14222                           ; Name         Instructions Cycles
 14223                           ; direct_byte           38     6 (fixed)
 14224                           ; simple_byte           49    25 (average)
 14225                           ; jumptable            260     6 (fixed)
 14226                           ;	Chosen strategy is simple_byte
 14227  0F29  0872               	movf	??_RELAY_PROCESS,w
 14228  0F2A  3A00               	xorlw	0	; case 0
 14229  0F2B  1903               	skipnz
 14230  0F2C  2EC1               	goto	l1119
 14231  0F2D  3A01               	xorlw	1	; case 1
 14232  0F2E  1903               	skipnz
 14233  0F2F  2EC7               	goto	l1129
 14234  0F30  3A03               	xorlw	3	; case 2
 14235  0F31  1903               	skipnz
 14236  0F32  2ECD               	goto	l1138
 14237  0F33  3A01               	xorlw	1	; case 3
 14238  0F34  1903               	skipnz
 14239  0F35  2ED3               	goto	l1147
 14240  0F36  3A07               	xorlw	7	; case 4
 14241  0F37  1903               	skipnz
 14242  0F38  2ED9               	goto	l1156
 14243  0F39  3A01               	xorlw	1	; case 5
 14244  0F3A  1903               	skipnz
 14245  0F3B  2EDF               	goto	l1165
 14246  0F3C  3A03               	xorlw	3	; case 6
 14247  0F3D  1903               	skipnz
 14248  0F3E  2EE5               	goto	l1174
 14249  0F3F  3A01               	xorlw	1	; case 7
 14250  0F40  1903               	skipnz
 14251  0F41  2EEB               	goto	l1183
 14252  0F42  3A0F               	xorlw	15	; case 8
 14253  0F43  1903               	skipnz
 14254  0F44  2EF1               	goto	l1192
 14255  0F45  3A01               	xorlw	1	; case 9
 14256  0F46  1903               	skipnz
 14257  0F47  2EF7               	goto	l1201
 14258  0F48  3A03               	xorlw	3	; case 10
 14259  0F49  1903               	skipnz
 14260  0F4A  2EFD               	goto	l1210
 14261  0F4B  3A01               	xorlw	1	; case 11
 14262  0F4C  1903               	skipnz
 14263  0F4D  2F03               	goto	l1219
 14264  0F4E  3A07               	xorlw	7	; case 12
 14265  0F4F  1903               	skipnz
 14266  0F50  2F09               	goto	l1228
 14267  0F51  3A01               	xorlw	1	; case 13
 14268  0F52  1903               	skipnz
 14269  0F53  2F0F               	goto	l1237
 14270  0F54  3A03               	xorlw	3	; case 14
 14271  0F55  1903               	skipnz
 14272  0F56  2F15               	goto	l1246
 14273  0F57  3A01               	xorlw	1	; case 15
 14274  0F58  1903               	skipnz
 14275  0F59  2F1B               	goto	l1255
 14276  0F5A  2F5B               	goto	l1263
 14277  0F5B                     l1263:	
 14278  0F5B  0008               	return
 14279  0F5C                     __end_of_RELAY_PROCESS:	
 14280                           
 14281                           	psect	text90
 14282  0E22                     __ptext90:	
 14283 ;; *************** function _LED_PROCESS *****************
 14284 ;; Defined at:
 14285 ;;		line 10 in file "led.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;  x               1    wreg     unsigned char 
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;  x               1    4[COMMON] unsigned char 
 14290 ;; Return value:  Size  Location     Type
 14291 ;;                  1    wreg      void 
 14292 ;; Registers used:
 14293 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14299 ;;      Params:         0       0       0       0       0       0       0       0
 14300 ;;      Locals:         1       0       0       0       0       0       0       0
 14301 ;;      Temps:          2       0       0       0       0       0       0       0
 14302 ;;      Totals:         3       0       0       0       0       0       0       0
 14303 ;;Total ram usage:        3 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; Hardware stack levels required when called:    4
 14306 ;; This function calls:
 14307 ;;		Nothing
 14308 ;; This function is called by:
 14309 ;;		_main
 14310 ;;		_myButtonPressedCallback
 14311 ;;		_DATA_PROCESS
 14312 ;; This function uses a non-reentrant model
 14313 ;;
 14314                           
 14315                           
 14316                           ;psect for function _LED_PROCESS
 14317  0E22                     _LED_PROCESS:	
 14318                           
 14319                           ;incstack = 0
 14320                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0]
 14321                           ;LED_PROCESS@x stored from wreg
 14322  0E22  00F4               	movwf	LED_PROCESS@x
 14323                           
 14324                           ;led.c: 10: void LED_PROCESS(uint8_t x);led.c: 11: {;led.c: 12:     switch(x)
 14325  0E23  2E84               	goto	l4036
 14326  0E24                     l944:	
 14327                           ;led.c: 15:         {;led.c: 16:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14328                           
 14329  0E24  0022               	movlb	2	; select bank2
 14330  0E25  140C               	bsf	12,0	;volatile
 14331  0E26  178E               	bsf	14,7	;volatile
 14332  0E27  148C               	bsf	12,1	;volatile
 14333  0E28  158E               	bsf	14,3	;volatile
 14334  0E29  0008               	return
 14335  0E2A                     l954:	
 14336                           ;led.c: 20:         {;led.c: 21:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14337                           
 14338  0E2A  0022               	movlb	2	; select bank2
 14339  0E2B  140C               	bsf	12,0	;volatile
 14340  0E2C  178E               	bsf	14,7	;volatile
 14341  0E2D  148C               	bsf	12,1	;volatile
 14342  0E2E  118E               	bcf	14,3	;volatile
 14343  0E2F  0008               	return
 14344  0E30                     l963:	
 14345                           ;led.c: 25:         {;led.c: 26:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14346                           
 14347  0E30  0022               	movlb	2	; select bank2
 14348  0E31  140C               	bsf	12,0	;volatile
 14349  0E32  178E               	bsf	14,7	;volatile
 14350  0E33  108C               	bcf	12,1	;volatile
 14351  0E34  158E               	bsf	14,3	;volatile
 14352  0E35  0008               	return
 14353  0E36                     l972:	
 14354                           ;led.c: 30:         {;led.c: 31:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14355                           
 14356  0E36  0022               	movlb	2	; select bank2
 14357  0E37  140C               	bsf	12,0	;volatile
 14358  0E38  178E               	bsf	14,7	;volatile
 14359  0E39  108C               	bcf	12,1	;volatile
 14360  0E3A  118E               	bcf	14,3	;volatile
 14361  0E3B  0008               	return
 14362  0E3C                     l981:	
 14363                           ;led.c: 35:         {;led.c: 36:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14364                           
 14365  0E3C  0022               	movlb	2	; select bank2
 14366  0E3D  140C               	bsf	12,0	;volatile
 14367  0E3E  138E               	bcf	14,7	;volatile
 14368  0E3F  148C               	bsf	12,1	;volatile
 14369  0E40  158E               	bsf	14,3	;volatile
 14370  0E41  0008               	return
 14371  0E42                     l990:	
 14372                           ;led.c: 40:         {;led.c: 41:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14373                           
 14374  0E42  0022               	movlb	2	; select bank2
 14375  0E43  140C               	bsf	12,0	;volatile
 14376  0E44  138E               	bcf	14,7	;volatile
 14377  0E45  148C               	bsf	12,1	;volatile
 14378  0E46  118E               	bcf	14,3	;volatile
 14379  0E47  0008               	return
 14380  0E48                     l999:	
 14381                           ;led.c: 45:         {;led.c: 46:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14382                           
 14383  0E48  0022               	movlb	2	; select bank2
 14384  0E49  140C               	bsf	12,0	;volatile
 14385  0E4A  138E               	bcf	14,7	;volatile
 14386  0E4B  108C               	bcf	12,1	;volatile
 14387  0E4C  158E               	bsf	14,3	;volatile
 14388  0E4D  0008               	return
 14389  0E4E                     l1008:	
 14390                           ;led.c: 50:         {;led.c: 51:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14391                           
 14392  0E4E  0022               	movlb	2	; select bank2
 14393  0E4F  140C               	bsf	12,0	;volatile
 14394  0E50  138E               	bcf	14,7	;volatile
 14395  0E51  108C               	bcf	12,1	;volatile
 14396  0E52  118E               	bcf	14,3	;volatile
 14397  0E53  0008               	return
 14398  0E54                     l1017:	
 14399                           ;led.c: 55:         {;led.c: 56:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14400                           
 14401  0E54  0022               	movlb	2	; select bank2
 14402  0E55  100C               	bcf	12,0	;volatile
 14403  0E56  178E               	bsf	14,7	;volatile
 14404  0E57  148C               	bsf	12,1	;volatile
 14405  0E58  158E               	bsf	14,3	;volatile
 14406  0E59  0008               	return
 14407  0E5A                     l1026:	
 14408                           ;led.c: 60:         {;led.c: 61:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14409                           
 14410  0E5A  0022               	movlb	2	; select bank2
 14411  0E5B  100C               	bcf	12,0	;volatile
 14412  0E5C  178E               	bsf	14,7	;volatile
 14413  0E5D  148C               	bsf	12,1	;volatile
 14414  0E5E  118E               	bcf	14,3	;volatile
 14415  0E5F  0008               	return
 14416  0E60                     l1035:	
 14417                           ;led.c: 65:         {;led.c: 66:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14418                           
 14419  0E60  0022               	movlb	2	; select bank2
 14420  0E61  100C               	bcf	12,0	;volatile
 14421  0E62  178E               	bsf	14,7	;volatile
 14422  0E63  108C               	bcf	12,1	;volatile
 14423  0E64  158E               	bsf	14,3	;volatile
 14424  0E65  0008               	return
 14425  0E66                     l1044:	
 14426                           ;led.c: 70:         {;led.c: 71:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14427                           
 14428  0E66  0022               	movlb	2	; select bank2
 14429  0E67  100C               	bcf	12,0	;volatile
 14430  0E68  178E               	bsf	14,7	;volatile
 14431  0E69  108C               	bcf	12,1	;volatile
 14432  0E6A  118E               	bcf	14,3	;volatile
 14433  0E6B  0008               	return
 14434  0E6C                     l1053:	
 14435                           ;led.c: 75:         {;led.c: 76:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14436                           
 14437  0E6C  0022               	movlb	2	; select bank2
 14438  0E6D  100C               	bcf	12,0	;volatile
 14439  0E6E  138E               	bcf	14,7	;volatile
 14440  0E6F  148C               	bsf	12,1	;volatile
 14441  0E70  158E               	bsf	14,3	;volatile
 14442  0E71  0008               	return
 14443  0E72                     l1062:	
 14444                           ;led.c: 80:         {;led.c: 81:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14445                           
 14446  0E72  0022               	movlb	2	; select bank2
 14447  0E73  100C               	bcf	12,0	;volatile
 14448  0E74  138E               	bcf	14,7	;volatile
 14449  0E75  148C               	bsf	12,1	;volatile
 14450  0E76  118E               	bcf	14,3	;volatile
 14451  0E77  0008               	return
 14452  0E78                     l1071:	
 14453                           ;led.c: 85:         {;led.c: 86:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 14454                           
 14455  0E78  0022               	movlb	2	; select bank2
 14456  0E79  100C               	bcf	12,0	;volatile
 14457  0E7A  138E               	bcf	14,7	;volatile
 14458  0E7B  108C               	bcf	12,1	;volatile
 14459  0E7C  158E               	bsf	14,3	;volatile
 14460  0E7D  0008               	return
 14461  0E7E                     l1080:	
 14462                           ;led.c: 90:         {;led.c: 91:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 14463                           
 14464  0E7E  0022               	movlb	2	; select bank2
 14465  0E7F  100C               	bcf	12,0	;volatile
 14466  0E80  138E               	bcf	14,7	;volatile
 14467  0E81  108C               	bcf	12,1	;volatile
 14468  0E82  118E               	bcf	14,3	;volatile
 14469  0E83  0008               	return
 14470  0E84                     l4036:	
 14471  0E84  0874               	movf	LED_PROCESS@x,w
 14472  0E85  00F2               	movwf	??_LED_PROCESS
 14473  0E86  01F3               	clrf	??_LED_PROCESS+1
 14474                           
 14475                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14476                           ; Switch size 1, requested type "simple"
 14477                           ; Number of cases is 1, Range of values is 0 to 0
 14478                           ; switch strategies available:
 14479                           ; Name         Instructions Cycles
 14480                           ; simple_byte            4     3 (average)
 14481                           ; direct_byte            8     6 (fixed)
 14482                           ; jumptable            260     6 (fixed)
 14483                           ;	Chosen strategy is simple_byte
 14484  0E87  0873               	movf	??_LED_PROCESS+1,w
 14485  0E88  3A00               	xorlw	0	; case 0
 14486  0E89  1903               	skipnz
 14487  0E8A  2E8C               	goto	l6596
 14488  0E8B  2EBE               	goto	l1088
 14489  0E8C                     l6596:	
 14490                           
 14491                           ; Switch size 1, requested type "simple"
 14492                           ; Number of cases is 16, Range of values is 0 to 15
 14493                           ; switch strategies available:
 14494                           ; Name         Instructions Cycles
 14495                           ; direct_byte           38     6 (fixed)
 14496                           ; simple_byte           49    25 (average)
 14497                           ; jumptable            260     6 (fixed)
 14498                           ;	Chosen strategy is simple_byte
 14499  0E8C  0872               	movf	??_LED_PROCESS,w
 14500  0E8D  3A00               	xorlw	0	; case 0
 14501  0E8E  1903               	skipnz
 14502  0E8F  2E7E               	goto	l1080
 14503  0E90  3A01               	xorlw	1	; case 1
 14504  0E91  1903               	skipnz
 14505  0E92  2E78               	goto	l1071
 14506  0E93  3A03               	xorlw	3	; case 2
 14507  0E94  1903               	skipnz
 14508  0E95  2E72               	goto	l1062
 14509  0E96  3A01               	xorlw	1	; case 3
 14510  0E97  1903               	skipnz
 14511  0E98  2E6C               	goto	l1053
 14512  0E99  3A07               	xorlw	7	; case 4
 14513  0E9A  1903               	skipnz
 14514  0E9B  2E66               	goto	l1044
 14515  0E9C  3A01               	xorlw	1	; case 5
 14516  0E9D  1903               	skipnz
 14517  0E9E  2E60               	goto	l1035
 14518  0E9F  3A03               	xorlw	3	; case 6
 14519  0EA0  1903               	skipnz
 14520  0EA1  2E5A               	goto	l1026
 14521  0EA2  3A01               	xorlw	1	; case 7
 14522  0EA3  1903               	skipnz
 14523  0EA4  2E54               	goto	l1017
 14524  0EA5  3A0F               	xorlw	15	; case 8
 14525  0EA6  1903               	skipnz
 14526  0EA7  2E4E               	goto	l1008
 14527  0EA8  3A01               	xorlw	1	; case 9
 14528  0EA9  1903               	skipnz
 14529  0EAA  2E48               	goto	l999
 14530  0EAB  3A03               	xorlw	3	; case 10
 14531  0EAC  1903               	skipnz
 14532  0EAD  2E42               	goto	l990
 14533  0EAE  3A01               	xorlw	1	; case 11
 14534  0EAF  1903               	skipnz
 14535  0EB0  2E3C               	goto	l981
 14536  0EB1  3A07               	xorlw	7	; case 12
 14537  0EB2  1903               	skipnz
 14538  0EB3  2E36               	goto	l972
 14539  0EB4  3A01               	xorlw	1	; case 13
 14540  0EB5  1903               	skipnz
 14541  0EB6  2E30               	goto	l963
 14542  0EB7  3A03               	xorlw	3	; case 14
 14543  0EB8  1903               	skipnz
 14544  0EB9  2E2A               	goto	l954
 14545  0EBA  3A01               	xorlw	1	; case 15
 14546  0EBB  1903               	skipnz
 14547  0EBC  2E24               	goto	l944
 14548  0EBD  2EBE               	goto	l1088
 14549  0EBE                     l1088:	
 14550  0EBE  0008               	return
 14551  0EBF                     __end_of_LED_PROCESS:	
 14552                           
 14553                           	psect	intentry
 14554  0004                     __pintentry:	
 14555 ;; *************** function _INTERRUPT_InterruptManager *****************
 14556 ;; Defined at:
 14557 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14558 ;; Parameters:    Size  Location     Type
 14559 ;;		None
 14560 ;; Auto vars:     Size  Location     Type
 14561 ;;		None
 14562 ;; Return value:  Size  Location     Type
 14563 ;;                  1    wreg      void 
 14564 ;; Registers used:
 14565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14566 ;; Tracked objects:
 14567 ;;		On entry : 0/0
 14568 ;;		On exit  : 0/0
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14571 ;;      Params:         0       0       0       0       0       0       0       0
 14572 ;;      Locals:         0       0       0       0       0       0       0       0
 14573 ;;      Temps:          0       0       0       0       0       0       0       0
 14574 ;;      Totals:         0       0       0       0       0       0       0       0
 14575 ;;Total ram usage:        0 bytes
 14576 ;; Hardware stack levels used:    1
 14577 ;; Hardware stack levels required when called:    3
 14578 ;; This function calls:
 14579 ;;		Absolute function
 14580 ;;		_EUSART_Receive_ISR
 14581 ;;		_TMR1_ISR
 14582 ;; This function is called by:
 14583 ;;		Interrupt level 1
 14584 ;; This function uses a non-reentrant model
 14585 ;;
 14586                           
 14587  0004                     _INTERRUPT_InterruptManager:	
 14588                           
 14589                           ;incstack = 0
 14590  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14591                           
 14592                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14593  0005  3180               	pagesel	$
 14594                           
 14595                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 14596  0006  1F0B               	btfss	11,6	;volatile
 14597  0007  281D               	goto	i1l627
 14598                           
 14599                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 14600  0008  0021               	movlb	1	; select bank1
 14601  0009  1E91               	btfss	17,5	;volatile
 14602  000A  2815               	goto	i1l622
 14603  000B  0020               	movlb	0	; select bank0
 14604  000C  1E91               	btfss	17,5	;volatile
 14605  000D  2815               	goto	i1l622
 14606                           
 14607                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_RxDefaultInterruptHandler();
 14608  000E  0021               	movlb	1	; select bank1
 14609  000F  0863               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14610  0010  008A               	movwf	10
 14611  0011  0862               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14612  0012  000A               	callw
 14613  0013  3180               	pagesel	$
 14614                           
 14615                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 14616  0014  281D               	goto	i1l627
 14617  0015                     i1l622:	
 14618                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 14619                           
 14620  0015  0021               	movlb	1	; select bank1
 14621  0016  1C11               	btfss	17,0	;volatile
 14622  0017  281D               	goto	i1l627
 14623  0018  0020               	movlb	0	; select bank0
 14624  0019  1C11               	btfss	17,0	;volatile
 14625  001A  281D               	goto	i1l627
 14626                           
 14627                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
 14628  001B  3195  2541         	fcall	_TMR1_ISR
 14629  001D                     i1l627:	
 14630                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 14631                           
 14632                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14633                           
 14634  001D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14635  001E  0009               	retfie
 14636  001F                     __end_of_INTERRUPT_InterruptManager:	
 14637                           
 14638                           	psect	text92
 14639  1541                     __ptext92:	
 14640 ;; *************** function _TMR1_ISR *****************
 14641 ;; Defined at:
 14642 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 14643 ;; Parameters:    Size  Location     Type
 14644 ;;		None
 14645 ;; Auto vars:     Size  Location     Type
 14646 ;;		None
 14647 ;; Return value:  Size  Location     Type
 14648 ;;                  1    wreg      void 
 14649 ;; Registers used:
 14650 ;;		wreg, status,2, status,0, pclath, cstack
 14651 ;; Tracked objects:
 14652 ;;		On entry : 0/0
 14653 ;;		On exit  : 0/0
 14654 ;;		Unchanged: 0/0
 14655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14656 ;;      Params:         0       0       0       0       0       0       0       0
 14657 ;;      Locals:         0       0       0       0       0       0       0       0
 14658 ;;      Temps:          0       0       0       0       0       0       0       0
 14659 ;;      Totals:         0       0       0       0       0       0       0       0
 14660 ;;Total ram usage:        0 bytes
 14661 ;; Hardware stack levels used:    1
 14662 ;; Hardware stack levels required when called:    2
 14663 ;; This function calls:
 14664 ;;		Absolute function
 14665 ;;		_MTOUCH_ScanScheduler
 14666 ;;		_TMR1_DefaultInterruptHandler
 14667 ;;		_TMR1_WriteTimer
 14668 ;; This function is called by:
 14669 ;;		_INTERRUPT_InterruptManager
 14670 ;; This function uses a non-reentrant model
 14671 ;;
 14672                           
 14673                           
 14674                           ;psect for function _TMR1_ISR
 14675  1541                     _TMR1_ISR:	
 14676                           
 14677                           ;mcc_generated_files/tmr1.c: 126:     PIR1bits.TMR1IF = 0;
 14678                           
 14679                           ;incstack = 0
 14680                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 14681  1541  0020               	movlb	0	; select bank0
 14682  1542  1011               	bcf	17,0	;volatile
 14683                           
 14684                           ;mcc_generated_files/tmr1.c: 127:     TMR1_WriteTimer(timer1ReloadVal);
 14685  1543  0021               	movlb	1	; select bank1
 14686  1544  085B               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 14687  1545  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 14688  1546  085A               	movf	_timer1ReloadVal^(0+128),w	;volatile
 14689  1547  00F0               	movwf	TMR1_WriteTimer@timerVal
 14690  1548  3194  2449  3195   	fcall	_TMR1_WriteTimer
 14691                           
 14692                           ;mcc_generated_files/tmr1.c: 129:     if(TMR1_InterruptHandler)
 14693  154B  0021               	movlb	1	; select bank1
 14694  154C  0858               	movf	_TMR1_InterruptHandler^(0+128),w
 14695  154D  0459               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 14696  154E  1903               	btfsc	3,2
 14697  154F  0008               	return
 14698                           
 14699                           ;mcc_generated_files/tmr1.c: 130:     {;mcc_generated_files/tmr1.c: 131:         TMR1_In
      +                          terruptHandler();
 14700  1550  0859               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 14701  1551  008A               	movwf	10
 14702  1552  0858               	movf	_TMR1_InterruptHandler^(0+128),w
 14703  1553  000A               	callw
 14704  1554  3195               	pagesel	$
 14705  1555  0008               	return
 14706  1556                     __end_of_TMR1_ISR:	
 14707                           
 14708                           	psect	text93
 14709  13F8                     __ptext93:	
 14710 ;; *************** function _MTOUCH_ScanScheduler *****************
 14711 ;; Defined at:
 14712 ;;		line 71 in file "mcc_generated_files/mtouch/mtouch.c"
 14713 ;; Parameters:    Size  Location     Type
 14714 ;;		None
 14715 ;; Auto vars:     Size  Location     Type
 14716 ;;		None
 14717 ;; Return value:  Size  Location     Type
 14718 ;;                  1    wreg      void 
 14719 ;; Registers used:
 14720 ;;		wreg, status,2, status,0, pclath, cstack
 14721 ;; Tracked objects:
 14722 ;;		On entry : 0/0
 14723 ;;		On exit  : 0/0
 14724 ;;		Unchanged: 0/0
 14725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14726 ;;      Params:         0       0       0       0       0       0       0       0
 14727 ;;      Locals:         0       0       0       0       0       0       0       0
 14728 ;;      Temps:          0       0       0       0       0       0       0       0
 14729 ;;      Totals:         0       0       0       0       0       0       0       0
 14730 ;;Total ram usage:        0 bytes
 14731 ;; Hardware stack levels used:    1
 14732 ;; Hardware stack levels required when called:    1
 14733 ;; This function calls:
 14734 ;;		_TMR1_WriteTimer
 14735 ;; This function is called by:
 14736 ;;		_MTOUCH_Initialize
 14737 ;;		_TMR1_ISR
 14738 ;; This function uses a non-reentrant model
 14739 ;;
 14740                           
 14741                           
 14742                           ;psect for function _MTOUCH_ScanScheduler
 14743  13F8                     _MTOUCH_ScanScheduler:	
 14744                           
 14745                           ;mcc_generated_files/mtouch/mtouch.c: 75:     TMR1_WriteTimer(mTouchScanReload);
 14746                           
 14747                           ;incstack = 0
 14748                           ; Regs used in _MTOUCH_ScanScheduler: [wreg+status,2+status,0+pclath+cstack]
 14749  13F8  0021               	movlb	1	; select bank1
 14750  13F9  086F               	movf	(_mTouchScanReload+1)^(0+128),w
 14751  13FA  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 14752  13FB  086E               	movf	_mTouchScanReload^(0+128),w
 14753  13FC  00F0               	movwf	TMR1_WriteTimer@timerVal
 14754  13FD  3194  2449         	fcall	_TMR1_WriteTimer
 14755                           
 14756                           ;mcc_generated_files/mtouch/mtouch.c: 78:     mtouch_time_toScan = 1;
 14757  13FF  0020               	movlb	0	; select bank0
 14758  1400  01EC               	clrf	_mtouch_time_toScan
 14759  1401  0AEC               	incf	_mtouch_time_toScan,f
 14760  1402  0008               	return
 14761  1403                     __end_of_MTOUCH_ScanScheduler:	
 14762                           
 14763                           	psect	text94
 14764  135A                     __ptext94:	
 14765 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 14766 ;; Defined at:
 14767 ;;		line 140 in file "mcc_generated_files/tmr1.c"
 14768 ;; Parameters:    Size  Location     Type
 14769 ;;		None
 14770 ;; Auto vars:     Size  Location     Type
 14771 ;;		None
 14772 ;; Return value:  Size  Location     Type
 14773 ;;                  1    wreg      void 
 14774 ;; Registers used:
 14775 ;;		None
 14776 ;; Tracked objects:
 14777 ;;		On entry : 0/0
 14778 ;;		On exit  : 0/0
 14779 ;;		Unchanged: 0/0
 14780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14781 ;;      Params:         0       0       0       0       0       0       0       0
 14782 ;;      Locals:         0       0       0       0       0       0       0       0
 14783 ;;      Temps:          0       0       0       0       0       0       0       0
 14784 ;;      Totals:         0       0       0       0       0       0       0       0
 14785 ;;Total ram usage:        0 bytes
 14786 ;; Hardware stack levels used:    1
 14787 ;; This function calls:
 14788 ;;		Nothing
 14789 ;; This function is called by:
 14790 ;;		_TMR1_Initialize
 14791 ;;		_TMR1_ISR
 14792 ;; This function uses a non-reentrant model
 14793 ;;
 14794                           
 14795                           
 14796                           ;psect for function _TMR1_DefaultInterruptHandler
 14797  135A                     _TMR1_DefaultInterruptHandler:	
 14798                           
 14799                           ;incstack = 0
 14800                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 14801  135A  0008               	return
 14802  135B                     __end_of_TMR1_DefaultInterruptHandler:	
 14803                           
 14804                           	psect	text95
 14805  1449                     __ptext95:	
 14806 ;; *************** function _TMR1_WriteTimer *****************
 14807 ;; Defined at:
 14808 ;;		line 95 in file "mcc_generated_files/tmr1.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;  timerVal        2    0[COMMON] unsigned short 
 14811 ;; Auto vars:     Size  Location     Type
 14812 ;;		None
 14813 ;; Return value:  Size  Location     Type
 14814 ;;                  1    wreg      void 
 14815 ;; Registers used:
 14816 ;;		wreg, status,2
 14817 ;; Tracked objects:
 14818 ;;		On entry : 0/0
 14819 ;;		On exit  : 0/0
 14820 ;;		Unchanged: 0/0
 14821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14822 ;;      Params:         2       0       0       0       0       0       0       0
 14823 ;;      Locals:         0       0       0       0       0       0       0       0
 14824 ;;      Temps:          0       0       0       0       0       0       0       0
 14825 ;;      Totals:         2       0       0       0       0       0       0       0
 14826 ;;Total ram usage:        2 bytes
 14827 ;; Hardware stack levels used:    1
 14828 ;; This function calls:
 14829 ;;		Nothing
 14830 ;; This function is called by:
 14831 ;;		_MTOUCH_ScanScheduler
 14832 ;;		_TMR1_ISR
 14833 ;; This function uses a non-reentrant model
 14834 ;;
 14835                           
 14836                           
 14837                           ;psect for function _TMR1_WriteTimer
 14838  1449                     _TMR1_WriteTimer:	
 14839                           
 14840                           ;mcc_generated_files/tmr1.c: 95: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_f
      +                          iles/tmr1.c: 96: {;mcc_generated_files/tmr1.c: 97:     if (T1CONbits.nT1SYNC == 1)
 14841                           
 14842                           ;incstack = 0
 14843                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 14844  1449  0020               	movlb	0	; select bank0
 14845  144A  1D18               	btfss	24,2	;volatile
 14846  144B  2C53               	goto	i1l4422
 14847                           
 14848                           ;mcc_generated_files/tmr1.c: 98:     {;mcc_generated_files/tmr1.c: 100:         T1CONbit
      +                          s.TMR1ON = 0;
 14849  144C  1018               	bcf	24,0	;volatile
 14850                           
 14851                           ;mcc_generated_files/tmr1.c: 103:         TMR1H = (timerVal >> 8);
 14852  144D  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 14853  144E  0097               	movwf	23	;volatile
 14854                           
 14855                           ;mcc_generated_files/tmr1.c: 104:         TMR1L = timerVal;
 14856  144F  0870               	movf	TMR1_WriteTimer@timerVal,w
 14857  1450  0096               	movwf	22	;volatile
 14858                           
 14859                           ;mcc_generated_files/tmr1.c: 107:         T1CONbits.TMR1ON =1;
 14860  1451  1418               	bsf	24,0	;volatile
 14861                           
 14862                           ;mcc_generated_files/tmr1.c: 108:     }
 14863  1452  0008               	return
 14864  1453                     i1l4422:	
 14865                           
 14866                           ;mcc_generated_files/tmr1.c: 110:     {;mcc_generated_files/tmr1.c: 112:         TMR1H =
      +                           (timerVal >> 8);
 14867  1453  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 14868  1454  0097               	movwf	23	;volatile
 14869                           
 14870                           ;mcc_generated_files/tmr1.c: 113:         TMR1L = timerVal;
 14871  1455  0870               	movf	TMR1_WriteTimer@timerVal,w
 14872  1456  0096               	movwf	22	;volatile
 14873  1457  0008               	return
 14874  1458                     __end_of_TMR1_WriteTimer:	
 14875                           
 14876                           	psect	text96
 14877  089A                     __ptext96:	
 14878 ;; *************** function _EUSART_Receive_ISR *****************
 14879 ;; Defined at:
 14880 ;;		line 164 in file "mcc_generated_files/eusart.c"
 14881 ;; Parameters:    Size  Location     Type
 14882 ;;		None
 14883 ;; Auto vars:     Size  Location     Type
 14884 ;;		None
 14885 ;; Return value:  Size  Location     Type
 14886 ;;                  1    wreg      void 
 14887 ;; Registers used:
 14888 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14889 ;; Tracked objects:
 14890 ;;		On entry : 0/0
 14891 ;;		On exit  : 0/0
 14892 ;;		Unchanged: 0/0
 14893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14894 ;;      Params:         0       0       0       0       0       0       0       0
 14895 ;;      Locals:         0       0       0       0       0       0       0       0
 14896 ;;      Temps:          0       0       0       0       0       0       0       0
 14897 ;;      Totals:         0       0       0       0       0       0       0       0
 14898 ;;Total ram usage:        0 bytes
 14899 ;; Hardware stack levels used:    1
 14900 ;; Hardware stack levels required when called:    2
 14901 ;; This function calls:
 14902 ;;		Absolute function
 14903 ;;		_EUSART_DefaultErrorHandler
 14904 ;;		_EUSART_DefaultFramingErrorHandler
 14905 ;;		_EUSART_DefaultOverrunErrorHandler
 14906 ;;		_EUSART_RxDataHandler
 14907 ;; This function is called by:
 14908 ;;		_EUSART_Initialize
 14909 ;;		_INTERRUPT_InterruptManager
 14910 ;; This function uses a non-reentrant model
 14911 ;;
 14912                           
 14913                           
 14914                           ;psect for function _EUSART_Receive_ISR
 14915  089A                     _EUSART_Receive_ISR:	
 14916                           
 14917                           ;mcc_generated_files/eusart.c: 167:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 14918                           
 14919                           ;incstack = 0
 14920                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14921  089A  087B               	movf	_eusartRxHead,w	;volatile
 14922  089B  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14923  089C  0086               	movwf	6
 14924  089D  0187               	clrf	7
 14925  089E  0181               	clrf	1
 14926                           
 14927                           ;mcc_generated_files/eusart.c: 169:     if(RCSTAbits.FERR){
 14928  089F  0023               	movlb	3	; select bank3
 14929  08A0  1D1D               	btfss	29,2	;volatile
 14930  08A1  28AD               	goto	i1l4730
 14931                           
 14932                           ;mcc_generated_files/eusart.c: 170:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14933  08A2  087B               	movf	_eusartRxHead,w	;volatile
 14934  08A3  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14935  08A4  0086               	movwf	6
 14936  08A5  0187               	clrf	7
 14937  08A6  1481               	bsf	1,1
 14938                           
 14939                           ;mcc_generated_files/eusart.c: 171:         EUSART_FramingErrorHandler();
 14940  08A7  0021               	movlb	1	; select bank1
 14941  08A8  0861               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 14942  08A9  008A               	movwf	10
 14943  08AA  0860               	movf	_EUSART_FramingErrorHandler^(0+128),w
 14944  08AB  000A               	callw
 14945  08AC  3188               	pagesel	$
 14946  08AD                     i1l4730:	
 14947                           
 14948                           ;mcc_generated_files/eusart.c: 174:     if(RCSTAbits.OERR){
 14949  08AD  0023               	movlb	3	; select bank3
 14950  08AE  1C9D               	btfss	29,1	;volatile
 14951  08AF  28BB               	goto	i1l4736
 14952                           
 14953                           ;mcc_generated_files/eusart.c: 175:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14954  08B0  087B               	movf	_eusartRxHead,w	;volatile
 14955  08B1  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14956  08B2  0086               	movwf	6
 14957  08B3  0187               	clrf	7
 14958  08B4  1501               	bsf	1,2
 14959                           
 14960                           ;mcc_generated_files/eusart.c: 176:         EUSART_OverrunErrorHandler();
 14961  08B5  0021               	movlb	1	; select bank1
 14962  08B6  085F               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 14963  08B7  008A               	movwf	10
 14964  08B8  085E               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 14965  08B9  000A               	callw
 14966  08BA  3188               	pagesel	$
 14967  08BB                     i1l4736:	
 14968                           
 14969                           ;mcc_generated_files/eusart.c: 179:     if(eusartRxStatusBuffer[eusartRxHead].status){
 14970  08BB  087B               	movf	_eusartRxHead,w	;volatile
 14971  08BC  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14972  08BD  0086               	movwf	6
 14973  08BE  0187               	clrf	7
 14974  08BF  0801               	movf	1,w
 14975  08C0  1903               	btfsc	3,2
 14976  08C1  28C9               	goto	i1l4740
 14977                           
 14978                           ;mcc_generated_files/eusart.c: 180:         EUSART_ErrorHandler();
 14979  08C2  0021               	movlb	1	; select bank1
 14980  08C3  085D               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14981  08C4  008A               	movwf	10
 14982  08C5  085C               	movf	_EUSART_ErrorHandler^(0+128),w
 14983  08C6  000A               	callw
 14984  08C7  3188               	pagesel	$
 14985                           
 14986                           ;mcc_generated_files/eusart.c: 181:     } else {
 14987  08C8  0008               	return
 14988  08C9                     i1l4740:	
 14989                           
 14990                           ;mcc_generated_files/eusart.c: 182:         EUSART_RxDataHandler();
 14991  08C9  3195  2596         	fcall	_EUSART_RxDataHandler
 14992  08CB  0008               	return
 14993  08CC                     __end_of_EUSART_Receive_ISR:	
 14994                           
 14995                           	psect	text97
 14996  136F                     __ptext97:	
 14997 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14998 ;; Defined at:
 14999 ;;		line 200 in file "mcc_generated_files/eusart.c"
 15000 ;; Parameters:    Size  Location     Type
 15001 ;;		None
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;		None
 15004 ;; Return value:  Size  Location     Type
 15005 ;;                  1    wreg      void 
 15006 ;; Registers used:
 15007 ;;		None
 15008 ;; Tracked objects:
 15009 ;;		On entry : 0/0
 15010 ;;		On exit  : 0/0
 15011 ;;		Unchanged: 0/0
 15012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15013 ;;      Params:         0       0       0       0       0       0       0       0
 15014 ;;      Locals:         0       0       0       0       0       0       0       0
 15015 ;;      Temps:          0       0       0       0       0       0       0       0
 15016 ;;      Totals:         0       0       0       0       0       0       0       0
 15017 ;;Total ram usage:        0 bytes
 15018 ;; Hardware stack levels used:    1
 15019 ;; This function calls:
 15020 ;;		Nothing
 15021 ;; This function is called by:
 15022 ;;		_EUSART_Initialize
 15023 ;;		_EUSART_Receive_ISR
 15024 ;; This function uses a non-reentrant model
 15025 ;;
 15026                           
 15027                           
 15028                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 15029  136F                     _EUSART_DefaultOverrunErrorHandler:	
 15030                           
 15031                           ;mcc_generated_files/eusart.c: 203:     RCSTAbits.CREN = 0;
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 15035  136F  0023               	movlb	3	; select bank3
 15036  1370  121D               	bcf	29,4	;volatile
 15037                           
 15038                           ;mcc_generated_files/eusart.c: 204:     RCSTAbits.CREN = 1;
 15039  1371  161D               	bsf	29,4	;volatile
 15040  1372  0008               	return
 15041  1373                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 15042                           
 15043                           	psect	text98
 15044  1359                     __ptext98:	
 15045 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 15046 ;; Defined at:
 15047 ;;		line 198 in file "mcc_generated_files/eusart.c"
 15048 ;; Parameters:    Size  Location     Type
 15049 ;;		None
 15050 ;; Auto vars:     Size  Location     Type
 15051 ;;		None
 15052 ;; Return value:  Size  Location     Type
 15053 ;;                  1    wreg      void 
 15054 ;; Registers used:
 15055 ;;		None
 15056 ;; Tracked objects:
 15057 ;;		On entry : 0/0
 15058 ;;		On exit  : 0/0
 15059 ;;		Unchanged: 0/0
 15060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15061 ;;      Params:         0       0       0       0       0       0       0       0
 15062 ;;      Locals:         0       0       0       0       0       0       0       0
 15063 ;;      Temps:          0       0       0       0       0       0       0       0
 15064 ;;      Totals:         0       0       0       0       0       0       0       0
 15065 ;;Total ram usage:        0 bytes
 15066 ;; Hardware stack levels used:    1
 15067 ;; This function calls:
 15068 ;;		Nothing
 15069 ;; This function is called by:
 15070 ;;		_EUSART_Initialize
 15071 ;;		_EUSART_Receive_ISR
 15072 ;; This function uses a non-reentrant model
 15073 ;;
 15074                           
 15075                           
 15076                           ;psect for function _EUSART_DefaultFramingErrorHandler
 15077  1359                     _EUSART_DefaultFramingErrorHandler:	
 15078                           
 15079                           ;incstack = 0
 15080                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 15081  1359  0008               	return
 15082  135A                     __end_of_EUSART_DefaultFramingErrorHandler:	
 15083                           
 15084                           	psect	text99
 15085  135D                     __ptext99:	
 15086 ;; *************** function _EUSART_DefaultErrorHandler *****************
 15087 ;; Defined at:
 15088 ;;		line 208 in file "mcc_generated_files/eusart.c"
 15089 ;; Parameters:    Size  Location     Type
 15090 ;;		None
 15091 ;; Auto vars:     Size  Location     Type
 15092 ;;		None
 15093 ;; Return value:  Size  Location     Type
 15094 ;;                  1    wreg      void 
 15095 ;; Registers used:
 15096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15097 ;; Tracked objects:
 15098 ;;		On entry : 0/0
 15099 ;;		On exit  : 0/0
 15100 ;;		Unchanged: 0/0
 15101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15102 ;;      Params:         0       0       0       0       0       0       0       0
 15103 ;;      Locals:         0       0       0       0       0       0       0       0
 15104 ;;      Temps:          0       0       0       0       0       0       0       0
 15105 ;;      Totals:         0       0       0       0       0       0       0       0
 15106 ;;Total ram usage:        0 bytes
 15107 ;; Hardware stack levels used:    1
 15108 ;; Hardware stack levels required when called:    1
 15109 ;; This function calls:
 15110 ;;		_EUSART_RxDataHandler
 15111 ;; This function is called by:
 15112 ;;		_EUSART_Initialize
 15113 ;;		_EUSART_Receive_ISR
 15114 ;; This function uses a non-reentrant model
 15115 ;;
 15116                           
 15117                           
 15118                           ;psect for function _EUSART_DefaultErrorHandler
 15119  135D                     _EUSART_DefaultErrorHandler:	
 15120                           
 15121                           ;mcc_generated_files/eusart.c: 209:     EUSART_RxDataHandler();
 15122                           
 15123                           ;incstack = 0
 15124                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15125  135D  3195  2596         	fcall	_EUSART_RxDataHandler
 15126  135F  0008               	return
 15127  1360                     __end_of_EUSART_DefaultErrorHandler:	
 15128                           
 15129                           	psect	text100
 15130  1596                     __ptext100:	
 15131 ;; *************** function _EUSART_RxDataHandler *****************
 15132 ;; Defined at:
 15133 ;;		line 188 in file "mcc_generated_files/eusart.c"
 15134 ;; Parameters:    Size  Location     Type
 15135 ;;		None
 15136 ;; Auto vars:     Size  Location     Type
 15137 ;;		None
 15138 ;; Return value:  Size  Location     Type
 15139 ;;                  1    wreg      void 
 15140 ;; Registers used:
 15141 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15142 ;; Tracked objects:
 15143 ;;		On entry : 0/0
 15144 ;;		On exit  : 0/0
 15145 ;;		Unchanged: 0/0
 15146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15147 ;;      Params:         0       0       0       0       0       0       0       0
 15148 ;;      Locals:         0       0       0       0       0       0       0       0
 15149 ;;      Temps:          1       0       0       0       0       0       0       0
 15150 ;;      Totals:         1       0       0       0       0       0       0       0
 15151 ;;Total ram usage:        1 bytes
 15152 ;; Hardware stack levels used:    1
 15153 ;; This function calls:
 15154 ;;		Nothing
 15155 ;; This function is called by:
 15156 ;;		_EUSART_Receive_ISR
 15157 ;;		_EUSART_DefaultErrorHandler
 15158 ;; This function uses a non-reentrant model
 15159 ;;
 15160                           
 15161                           
 15162                           ;psect for function _EUSART_RxDataHandler
 15163  1596                     _EUSART_RxDataHandler:	
 15164                           
 15165                           ;mcc_generated_files/eusart.c: 190:     eusartRxBuffer[eusartRxHead++] = RCREG;
 15166                           
 15167                           ;incstack = 0
 15168                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 15169  1596  0023               	movlb	3	; select bank3
 15170  1597  0819               	movf	25,w	;volatile
 15171  1598  00F0               	movwf	??_EUSART_RxDataHandler
 15172  1599  087B               	movf	_eusartRxHead,w
 15173  159A  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 15174  159B  0086               	movwf	6
 15175  159C  0187               	clrf	7
 15176  159D  0870               	movf	??_EUSART_RxDataHandler,w
 15177  159E  0081               	movwf	1
 15178  159F  3001               	movlw	1
 15179  15A0  00F0               	movwf	??_EUSART_RxDataHandler
 15180  15A1  0870               	movf	??_EUSART_RxDataHandler,w
 15181  15A2  07FB               	addwf	_eusartRxHead,f	;volatile
 15182                           
 15183                           ;mcc_generated_files/eusart.c: 191:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 15184  15A3  3008               	movlw	8
 15185  15A4  027B               	subwf	_eusartRxHead,w	;volatile
 15186  15A5  1803               	btfsc	3,0
 15187                           
 15188                           ;mcc_generated_files/eusart.c: 192:     {;mcc_generated_files/eusart.c: 193:         eus
      +                          artRxHead = 0;
 15189  15A6  01FB               	clrf	_eusartRxHead	;volatile
 15190                           
 15191                           ;mcc_generated_files/eusart.c: 195:     eusartRxCount++;
 15192  15A7  3001               	movlw	1
 15193  15A8  00F0               	movwf	??_EUSART_RxDataHandler
 15194  15A9  0870               	movf	??_EUSART_RxDataHandler,w
 15195  15AA  0020               	movlb	0	; select bank0
 15196  15AB  07E9               	addwf	_eusartRxCount,f	;volatile
 15197  15AC  0008               	return
 15198  15AD                     __end_of_EUSART_RxDataHandler:	
 15199  007E                     btemp	set	126	;btemp
 15200  007E                     int$flags	set	126
 15201  007E                     wtemp0	set	126


Data Sizes:
    Strings     98
    Constant    77
    Data        51
    BSS         150
    Persistent  44
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     53      80
    BANK1            80      0      80
    BANK2            80      2      38
    BANK3            80      0      68
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2496$0	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Service$2496	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_19(CODE[3]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2288_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    memcpy@s1	PTR const void  size(2) Largest target is 68
		 -> mtouch_button_init(CODE[68]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 68
		 -> mtouch_button_init(CODE[68]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_19(CODE[3]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_19(CODE[3]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), MTOUCH_ScanScheduler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), MTOUCH_ScanScheduler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_Service@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    sp__memcpy	PTR void  size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 68
		 -> mtouch_button(BANK3[68]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    S109$sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    S109$sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    callback_sampled	PTR FTN(enum E2871,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _DATA_PROCESS->_LED_PROCESS
    _DATA_PROCESS->_RELAY_PROCESS

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _MTOUCH_ScanScheduler->_TMR1_WriteTimer
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_check_message
    _update_state->_printf
    _check_message->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _MTOUCH_Button_InitializeAll->_memcpy
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_loadADCSettings
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_Deviation_Update
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Reading_Update->_Button_Reading_Update_Helper

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   48571
                                              0 BANK2      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         0     0      0    7209
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    7271
                                             50 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    7209
                                             42 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    5418
                                             34 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    4983
                                             25 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 8     6      2    3323
                                             19 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    3079
                                             10 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     123
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1380
                                              7 COMMON     3     3      0
                                              5 BANK0      5     4      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     988
                                              4 COMMON     3     0      3
                                              0 BANK0      5     5      0
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      44
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3167
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    2601
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0    1281
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    1281
                                              8 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     377
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          1     1      0     990
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              2 COMMON     5     1      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23363
                                             45 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              5 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              3 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   16671
                                             43 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   16572
                                             36 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     530
                                              6 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              2 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   15163
                                             32 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1607
                                              6 COMMON     1     1      0
                                              0 BANK0      4     4      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      67
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      67
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    6574
                                             19 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    6031
                                              4 BANK0     15    14      1
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1    1226
                                              3 COMMON     4     3      1
                                              0 BANK0      4     4      0
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     211
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     242
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1875
                                              6 COMMON     4     4      0
                                              0 BANK0      2     2      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     633
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     134
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     134
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0     103
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     300
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    6324
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       3     3      0    6324
                                             10 BANK0      3     3      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     377
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     377
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1100
                                              5 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     128
                                              5 COMMON     1     0      1
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1507
                                              5 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     185
                                              5 COMMON     1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             3     3      0     566
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     377
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              5 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1055
                                              5 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     516
                                              0 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0     764
                                              3 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0     666
                                              0 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     377
                                              6 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     346
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     296
                                              2 COMMON     5     5      0
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0      66
                                              5 COMMON     3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (6) _RELAY_PROCESS                                        3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0     480
                   Absolute function *
                 _EUSART_Receive_ISR *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     480
                   Absolute function *
               _MTOUCH_ScanScheduler *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (13) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _MTOUCH_ScanScheduler                                0     0      0     240
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (13) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
     _RELAY_PROCESS
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
       _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write
   _update_state
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _TMR1_ISR *
     Absolute function(Fake) *
     _MTOUCH_ScanScheduler *
       _TMR1_WriteTimer
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     116       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     35      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      2      26      10       47.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      44      12       85.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     116      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Aug 16 15:48:14 2019

                       ?_EUSART_SetRxInterruptHandler 0072                       Sensor_loadADCSettings@adc_index 0073  
                        ?_MTOUCH_Sensor_RawSample_Get 0076                                          _update_state 0634  
                                      ___bmul@product 0074                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 13CD                             _Sensor_setCalibratAcqTime 1467  
                                         __CFG_LVP$ON 0000                                                   l230 058E  
                                                 l261 034F                                                   l266 0356  
                                                 l259 0353                                                   l276 03F6  
                                                 l278 040D                                                   l439 0FDD  
                                                 l900 053C                                                   l568 07F9  
                                                 l944 0E24                                                   l954 0E2A  
                                                 l963 0E30                                                   l972 0E36  
                                                 l981 0E3C                                                   l990 0E42  
                                                 l879 06DD                                                   _GIE 005F  
                                                 l999 0E48                                                   _PR2 001B  
                                     _timer1ReloadVal 00DA                                                   _abs 15AD  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 0A5B  
                      ?_EUSART_SetFramingErrorHandler 0072                               ?_Sensor_loadADCSettings 0073  
                                     _TMR2_Initialize 13DD                                          __CFG_BORV$LO 0000  
                                       DATA_PROCESS@x 0077                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0073                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 0074  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                        ?_EUSART_Read 0070                                                  l1008 0E4E  
                                                l1017 0E54                                                  l1201 0EF7  
                                                l1026 0E5A                                                  l1210 0EFD  
                                                l1035 0E60                                                  ?_abs 0072  
                                                l1044 0E66                                                  l1053 0E6C  
                                                l1062 0E72                                                  l1071 0E78  
                                                l1119 0EC1                                                  l1080 0E7E  
                                                l1129 0EC7                                                  l1138 0ECD  
                                                l1219 0F03                                                  l1147 0ED3  
                                                l1228 0F09                                                  l1156 0ED9  
                                                l1237 0F0F                                                  l1165 0EDF  
                                                l1246 0F15                                                  l1174 0EE5  
                                                l1255 0F1B                                                  l1183 0EEB  
                                                l1263 0F5B                                                  l1088 0EBE  
                                                l1192 0EF1                                                  l1352 0A73  
                                                l1355 0A93                                                  l1356 0A9F  
                                                l4036 0E84                                                  l5004 053F  
                                                l4046 0F21                                                  l5008 0541  
                                                l4160 0CB6                                                  l6100 0844  
                                                l4190 17F7                                                  l4182 17E7  
                                                l6014 0752                                                  l6102 0861  
                                                l3720 1433                                                  l6008 0731  
                                                l6024 0763                                                  l6200 0689  
                                                l4186 17EF                                                  l4178 17E0  
                                                l6122 1582                                                  l6018 0758  
                                                l6202 0690                                                  l6210 06A5  
                                                l5420 0907                                                  l5500 16B9  
                                                l6204 0697                                                  l4702 1690  
                                                l6222 1706                                                  l6206 069E  
                                                ?_pad 002A                                                  l5504 14C8  
                                                l6056 0D45                                                  l6048 0D28  
                                                l6128 158B                                                  l4456 14FA  
                                                l6152 161E                                                  l5424 092B  
                                                l6320 016D                                                  l6066 0D64  
                                                l6218 1704                                                  l6330 017F  
                                                l5508 14CE                                                  l6092 0A47  
                                                l5380 17B6                                                  l5436 14F7  
                                                l5620 034A                                                  l5604 032F  
                                                l5540 02C8                                                  l5532 02B1  
                                                l6068 0D87                                                  l6148 161C  
                                                l6228 1717                                                  l6180 0643  
                                                l6252 007E                                                  l5390 17C9  
                                                l5462 05E9                                                  l5542 02CF  
                                                l5550 02D1                                                  l6190 0666  
                                                l6182 064A                                                  l6406 027F  
                                                l6342 0198                                                  l6326 0178  
                                                l6270 00AA                                                  l4920 0478  
                                                l5384 17B8                                                  l5480 0DCA  
                                                l5448 058A                                                  l5704 044C  
                                                l5640 039E                                                  l5544 02E4  
                                                l6192 066D                                                  l6184 0651  
                                                l6176 0635                                                  l4914 046A  
                                                l5378 17A7                                                  l5482 0DCE  
                                                l5562 02D7                                                  l5802 0BCF  
                                                l6194 0674                                                  l6186 0658  
                                                l6178 063C                                                  l6258 0086  
                                                l4932 0494                                                  l4908 045E  
                                                l5468 0611                                                  l5652 03D3  
                                                l5644 03B9                                                  l5628 0359  
                                                l3796 15C9                                                  l5732 0A69  
                                                l6196 067B                                                  l6188 065F  
                                                l4950 04BE                                                  l4926 0486  
                                                l5574 02E6                                                  l3798 15D4  
                                                l5742 0A75                                                  l6198 0682  
                                                l4944 04B0                                                  l5832 09F9  
                                                l5488 0E02                                                  l5656 03ED  
                                                l5904 1742                                                  l4880 0977  
                                                l5736 0A71                                                  l5840 1761  
                                                l6376 0213                                                  l6296 010C  
                                                l4962 04DA                                                  l4938 04A2  
                                                l5594 031C                                                  l5578 02F0  
                                                l5762 096D                                                  l4874 0975  
                                                l6378 0217                                                  l4980 0504  
                                                l4956 04CC                                                  l5940 0C46  
                                                l5692 0423                                                  l5684 0411  
                                                l5756 095F                                                  l5924 1783  
                                                l6396 0269                                                  l4974 04F6  
                                                l5942 0C4E                                                  l5934 140D  
                                                l5758 0962                                                  l5862 0AB9  
                                                l6590 0D76                                                  l4798 0973  
                                                l5838 175B                                                  l6582 06AB  
                                                l6592 0549                                                  l4992 0520  
                                                l4968 04E8                                                  l5952 0B1D  
                                                l5688 041A                                                  l5784 0B97  
                                                l6584 171F                                                  l6594 0F29  
                                                l4986 0512                                                  l5946 0C62  
                                                l5954 0B21                                                  l5698 0437  
                                                l5786 0B9B                                                  l5778 0B86  
                                                l5890 0B05                                                  l5882 0AEC  
                                                l5874 0AD4                                                  l6586 097F  
                                                l6596 0E8C                                                  l5796 0BA3  
                                                l5788 0B9F                                                  l5868 0AC1  
                                                l6588 0D71                                                  l4998 052E  
                                                l5974 0FD4                                                  l5798 0BB6  
                                                l5886 0AFC                                                  l5878 0ADC  
                                                l5984 07AE                                                  l5968 0F9B  
                                                STR_1 1800                                                  STR_2 1809  
                                                STR_3 1814                                                  STR_4 1819  
                                                STR_5 181E                                                  STR_6 1823  
                                                STR_7 1828                                                  STR_8 182D  
                                                STR_9 1832                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u2330 1484  
                                                u2505 0CC4                                                  u4115 0BBD  
                                                u4035 0A7F                                                  u4300 0C2D  
                                                u4135 0830                                                  u4305 0C29  
                                                u3505 0929                                                  u4414 07CA  
                                                u2495 0C7E                                                  u4415 07C9  
                                                u3615 0DF2                                                  u3465 15B6  
                                                u4355 0B4A                                                  u3565 0627  
                                                u4295 0BF5                                                  u4385 0FB1  
                                                u3585 0DAD                                                  u3595 0DB7  
                                                u4807 00C8                                                  u4817 00D5  
                                                u4907 015C                                                  u4827 00E2  
                                                u4917 01D0                                                  u4837 00EF  
                                                u4927 01DD                                                  u4847 00FC  
                                                u4937 01EA                                                  u4857 011B  
                                                u4947 01F7                                                  u4867 0128  
                                                u4957 0232                                                  u4877 0135  
                                                u4797 00BB                                                  u4967 023F  
                                                u4887 0142                                                  u4977 024C  
                                                u4897 014F                                                  u4987 0259  
                          Button_State_Pressed@button 0025                                                  _TMR2 001A  
                               __end_of_check_message 1728                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01CE  
                            _Sensor_getScanGroupIndex 17A5                             ?_Sensor_Acq_ExecutePacket 0024  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0072                                                  _dbuf 00B8  
                                                _ctoa 1750                                                  _main 0062  
                __size_of_MTOUCH_Button_InitializeAll 001C                                                  _prec 00B2  
                                                _nout 00B0                                                  pad@i 002E  
                                                pad@p 002B                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 0030  
                __size_of_MTOUCH_Sensor_InitializeAll 0010                                                  btemp 007E  
                                                start 001F                            ??_TMR1_SetInterruptHandler 0074  
                                   ___bmul@multiplier 0075                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                        __end_of_Sensor_autoCalibration 0E22  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1814          Sensor_Scanfrequency_Evaluation@frequency_hop 180F  
                            _myButtonReleasedCallback 164C                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 0010                         __size_of_Button_State_Pressed 0072  
                                               ??_abs 0074                                                 ??_pad 002D  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 0020  
                       ??_MTOUCH_Sensor_RawSample_Get 0078                         Sensor_RawSample_Update@sensor 0078  
                       myButtonPressedCallback@button 0075                             __size_of_Sensor_isEnabled 0011  
                                       ?_EUSART_Write 0070                        __size_of_OSCILLATOR_Initialize 0006  
                       __end_of_OSCILLATOR_Initialize 13B1     Sensor_Scanfrequency_Evaluation@best_packet_sample 003B  
                 __end_of_Sensor_isCalibratingAcqTime 13EE                           _Sensor_isCalibratingAcqTime 13E5  
                                               ?_ctoa 0033                                                 ?_main 0070  
                                               STR_10 1837                                                 STR_11 183C  
                                               STR_12 1841                                                 STR_13 1846  
                                               STR_14 184B                                                 STR_15 1850  
                                               STR_16 1855                                                 STR_17 185A  
                                       __CFG_WDTE$OFF 0000                                                 STR_18 185F  
                                               STR_19 1868                        __end_of_Sensor_loadADCSettings 0634  
                                               _T1CON 0018                                                 _T2CON 001C  
                             __size_of_Button_Service 0050                                                 i1l622 0015  
                                               i1l627 001D                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0039  
                                               _TMR1H 0017                                                 _TMR1L 0016  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 _TXREG 019A  
                                               _TXSTA 019E                       __size_of_Button_DefaultCallback 0001  
                                ??_MTOUCH_needReburst 0072                                      __end_of_TMR1_ISR 1556  
                     __size_of_Sensor_DefaultCallback 0001                                                 _blink 0063  
                                               _flags 00B4                               __size_of_Sensor_Service 008F  
               __end_of_MTOUCH_Sensor_Scan_Initialize 14B6                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 14A6                                        _WDT_Initialize 1373  
                             Sensor_setSampled@sensor 0072                                                 _fputc 08FE  
                                               _fputs 16B5                                          LED_PROCESS@x 0074  
                                               pad@fp 0032                                                 _width 0059  
                                               ctoa@c 0033                                                 _putch 137C  
                                               ctoa@w 0036                      __size_of_Button_State_NotPressed 00A4  
                             __end_of_TMR1_Initialize 15F6                                                 pclath 000A  
                                _Sensor_Sampled_Reset 13D5                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 1363  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0008  
                                     _TMR1_WriteTimer 1449                                Sensor_isEnabled@sensor 0073  
                                     __initialization 0021                                          __end_of_ctoa 1779  
                                        __end_of_main 028B                                  _Sensor_setCalibrated 141F  
                               __size_of_DATA_PROCESS 0126                                        ??_EUSART_Write 0072  
                             __end_of_TMR2_Initialize 13E5                                        __CFG_LPBOR$OFF 0000  
                         ?_INTERRUPT_InterruptManager 0070                          __end_of_MTOUCH_ScanScheduler 1403  
                      ??_EUSART_SetRxInterruptHandler 0074                      __end_of_MTOUCH_Button_Initialize 08FE  
                                              ??_ctoa 0035                                                ??_main 0144  
                             _MTOUCH_Sensor_Calibrate 1411                             Sensor_Service@sensor_adc1 0049  
                           Sensor_Service@sensor_adc2 004A                               ??_Button_Reading_Update 007A  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0074                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 1377                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0078             __end_of_EUSART_DefaultFramingErrorHandler 135A  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 1359  
                          _EUSART_OverrunErrorHandler 00DE                  __size_of_MTOUCH_Sensor_RawSample_Get 0011  
                                              ?_fputc 0074                                                ?_fputs 0025  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              ?_putch 0070                                                _ANSELB 018D  
                                              _ANSELC 018E                            __end_of_EUSART_is_rx_ready 1363  
                                              _BORCON 0116                                                _T1GCON 0019  
                             TMR1_WriteTimer@timerVal 0070                                                i1l4422 1453  
                                              i1l4730 08AD                                                i1l4740 08C9  
                                              i1l4736 08BB                                 ?_Sensor_Sampled_Reset 0070  
                                              _OSCCON 0099                                                _SPBRGH 019C  
                                              _SPBRGL 019B                                                _WDTCON 0097  
                                        _DATA_PROCESS 0459                        ??_Button_Reading_Update_Helper 0020  
                              _Button_DefaultCallback 135B                       __end_of_MTOUCH_Service_Mainloop 162F  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 13EE  
                __end_of_TMR1_DefaultInterruptHandler 135B                 __size_of_TMR1_DefaultInterruptHandler 0001  
                        _TMR1_DefaultInterruptHandler 135A                                _Sensor_DefaultCallback 135C  
                                        vfprintf@cfmt 0048                                         _packet_sample 0055  
                                              ___bmul 14C6                                 ?_Sensor_setCalibrated 0070  
                        Sensor_DefaultCallback@sensor 0072                                        __CFG_STVREN$ON 0000  
                    __size_of_myButtonPressedCallback 002E                                                _memcpy 1779  
                                              _rxData 0067                      __end_of_MTOUCH_Button_ServiceAll 14A6  
                                              _printf 150A                                                pad@buf 002A  
                                __size_of_LED_PROCESS 009D                                                ctoa@fp 0038  
                        Sensor_autoCalibration@sensor 0021                                                _strlen 15C4  
                                              fputc@c 0074                                                fputs@c 0026  
                                              fputs@i 0027                                                fputs@s 0029  
                             _MTOUCH_Sensor_SampleAll 1580                          Button_DefaultCallback@button 0075  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0B07  
                              __size_of_RELAY_PROCESS 009D                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 086A                   Sensor_postAcquisitionProcess@sensor 0023  
                             __end_of_TMR2_StartTimer 1366              TMR1_SetInterruptHandler@InterruptHandler 0072  
                  __size_of_Sensor_setCalibratAcqTime 000F              __end_of_MTOUCH_Button_SetPressedCallback 138D  
           __size_of_MTOUCH_Button_SetPressedCallback 0006                    ??_MTOUCH_Button_SetPressedCallback 0074  
                   ?_MTOUCH_Button_SetPressedCallback 0072                      _MTOUCH_Button_SetPressedCallback 1387  
                             __end_of_TMR1_WriteTimer 1458                              __size_of_Sensor_isActive 000E  
                     MTOUCH_Sensor_RawSample_Get@name 0079                                      ?_TMR1_Initialize 0070  
                 Sensor_getScanGroupIndex@sensorGroup 0075                                  __size_of_EUSART_Read 0025  
                                   _SYSTEM_Initialize 156B                               __end_of__initialization 005E  
                 __size_of_Button_Baseline_Initialize 002F                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0076                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00E4                            __end_of_Button_Tick_helper 1701  
                                   _update_state_flag 0061                         MTOUCH_Sensor_Calibrate@sensor 0077  
         Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0029                                   ___bmul@multiplicand 0072  
                                      __pcstackCOMMON 0070                               _MTOUCH_Button_isPressed 1476  
                                        __pidataBANK0 136C                                          __pidataBANK1 0800  
                                        __pidataBANK2 166C           __end_of_MTOUCH_Button_SetNotPressedCallback 1387  
        __size_of_MTOUCH_Button_SetNotPressedCallback 0006                 ??_MTOUCH_Button_SetNotPressedCallback 0074  
                ?_MTOUCH_Button_SetNotPressedCallback 0072                   _MTOUCH_Button_SetNotPressedCallback 1381  
                                 ??_SYSTEM_Initialize 007A                                             ?_TMR1_ISR 0070  
                       ?_TMR1_DefaultInterruptHandler 0070                            __end_of_MTOUCH_Button_Tick 150A  
                                       __end_of_fputc 0934                                         __end_of_fputs 16DA  
                    __end_of_MTOUCH_Sensor_Initialize 156B                                         __end_of_putch 1381  
                           ??_MTOUCH_Sensor_Calibrate 0076                                      _Sensor_isEnabled 14E8  
                                    ?_TMR2_Initialize 0070                       __end_of_Button_Deviation_Update 0C6C  
                            Sensor_setInactive@sensor 0072                                        _Button_Service 0A0B  
                    __end_of_Sensor_Acq_ExecutePacket 0459                            ?_Button_State_Initializing 0025  
                                Button_Service@button 002C                                        _OPTION_REGbits 0095  
                               ??_Sensor_isCalibrated 0072                            ??_Sensor_getScanGroupIndex 0072  
                                _eusartRxStatusBuffer 00A0                        __end_of_Button_Baseline_Update 0CFB  
                 Sensor_Acq_ExecutePacket@sensor_adc1 0032                   Sensor_Acq_ExecutePacket@sensor_adc2 0024  
                            _MTOUCH_Button_Initialize 08CC                       ??_EUSART_SetOverrunErrorHandler 0074  
                                      _Sensor_Service 0CFB                               _Button_State_NotPressed 0F5C  
                       __size_of_MTOUCH_Sensor_Enable 000E                                    _Sensor_setInactive 13C5  
                                   _sensor_scan_group 1864                                               ??_fputc 0020  
                           __end_of_SYSTEM_Initialize 1580                                     _lowpowerActivated 006B  
                                             ??_fputs 0077                      MTOUCH_Sensor_isCalibrated@sensor 0077  
                              ??_Sensor_Sampled_Reset 0072                                               ??_putch 0073  
                                          __pbssBANK0 0055                                            __pbssBANK1 00A0  
                                          __pbssBANK3 01A0                                            _check_data 0971  
                                __end_of_EUSART_Write 0800                               _TMR2_LoadPeriodRegister 1377  
                                _MTOUCH_ScanScheduler 13F8                            ??_myButtonReleasedCallback 0076  
                        Sensor_loadADCSettings@sensor 0023                                      _mTouchScanReload 00EE  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 13BD  
                         __size_of_EUSART_Receive_ISR 0032                            __end_of_mtouch_button_init 1044  
                                   _last_touch_status 005B           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 002A  
                              ??_Sensor_setCalibrated 0072                                            __pmaintext 0062  
                                       _RELAY_PROCESS 0EBF                                               ?___bmul 0072  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                                            ??_TMR1_ISR 0072  
                      MTOUCH_Sensor_wasSampled@sensor 0077                                            __pintentry 0004  
                              __end_of_Button_Service 0A5B                                               ?_memcpy 0072  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 1612                           _MTOUCH_Button_InitializeAll 15F6  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 14C6                           _MTOUCH_Sensor_InitializeAll 14B6  
                           ??_MTOUCH_Sensor_SampleAll 004B                                               ?_printf 004A  
                     __end_of_Sensor_RawSample_Update 1750                                  ??_Sensor_setInactive 0072  
                                             ?_strlen 0072                     __size_of_MTOUCH_Sensor_wasSampled 000F  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 0069  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0072  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 0B69  
                              __end_of_Sensor_Service 0D8A                               Sensor_Service@scanGroup 0047  
                            _MTOUCH_Button_ServiceAll 1496                             __end_of_sensor_scan_group 1868  
                                  __size_of_vfpfcnvrt 00A8                         __size_of_EUSART_RxDataHandler 0017  
                    __size_of_MTOUCH_Service_Mainloop 001D                          __end_of_Button_State_Pressed 07F8  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0074  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0024  
                     Sensor_setCalibratAcqTime@sensor 0072                                      ?_TMR1_WriteTimer 0070  
                                __size_of_MTOUCH_Tick 0003                   Sensor_loadADCSettings@addressOffset 0022  
                __size_of_Sensor_isCalibratingAcqTime 0009                                 ?_MTOUCH_ScanScheduler 0070  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0026                             ??_MTOUCH_Button_isPressed 0072  
                                          _count_conf 00B6                                     ??_Sensor_isActive 0072  
                 __size_of_EUSART_DefaultErrorHandler 0003                                        ?_RELAY_PROCESS 0070  
               __end_of_Sensor_postAcquisitionProcess 0971                __size_of_Sensor_postAcquisitionProcess 003D  
                       _Sensor_postAcquisitionProcess 0934                               _myButtonPressedCallback 17D2  
                             Sensor_Acquisition@retry 0042                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                        MTOUCH_Button_Initialize@button 0021  
                                         _AD2CON0bits 0791                                             ?_vfprintf 0042  
                                     ?_Button_Service 0070            Sensor_Scanfrequency_Evaluation@sensor_adc1 0036  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 0033                                       __size_of_memcpy 002C  
                                             __ptext1 0634                                               __ptext2 1701  
                                             __ptext3 150A                                               __ptext4 083B  
                                             __ptext5 06DE                                               __ptext6 1750  
                                             __ptext7 0A5B                                               __ptext8 15C4  
                                             __ptext9 16B5                                __size_of_check_message 0027  
                                     __size_of_printf 0011                           Button_Reading_Update@button 0023  
                      ??_TMR1_DefaultInterruptHandler 0070                                       __size_of_strlen 0017  
                                           _T1CONbits 0018                              _MTOUCH_Sensor_Initialize 1556  
                               _OSCILLATOR_Initialize 13AB                                             _T2CONbits 001C  
                                        __size_of_abs 0017                                          __size_of_pad 0050  
                           ??_Button_State_NotPressed 0026                                               _prcData 0066  
                                     ?_Sensor_Service 0070                     __size_of_TMR1_SetInterruptHandler 0006  
                            ??_PIN_MANAGER_Initialize 0072                             ?_TMR1_SetInterruptHandler 0072  
                      __size_of_Button_Reading_Update 000E                           __size_of_MTOUCH_needReburst 0002  
                       __end_of_Button_Reading_Update 1411                              _Sensor_Acq_ExecutePacket 028B  
                                    _callback_sampled 00EC                             ??_TMR2_LoadPeriodRegister 0072  
                     Sensor_RawSample_Update@adcIndex 0077                            __size_of_SYSTEM_Initialize 0015  
                                             clrloop0 13B2                                      _callback_pressed 00EA  
                      MTOUCH_Sensor_Initialize@sensor 0079                                  end_of_initialization 005E  
                                         ?_check_data 0070                               ?_Button_DefaultCallback 0075  
               __end_of_EUSART_SetOverrunErrorHandler 139F                __size_of_EUSART_SetOverrunErrorHandler 0006  
                       _EUSART_SetOverrunErrorHandler 1399                                               memcpy@d 0024  
                                             memcpy@n 0074                                               memcpy@s 0021  
                                             fputc@fp 0076                                               init_ram 13B7  
                                             fputs@fp 0025                                               initloop 13B8  
                             ?_Sensor_DefaultCallback 0072                         Sensor_Acquisition@sensor_adc1 0043  
                       Sensor_Acquisition@sensor_adc2 0040                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 086A                          ??_MTOUCH_Sensor_isCalibrated 0076  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 0786  
                 __end_of_MTOUCH_Sensor_RawSample_Get 14E8                           _MTOUCH_Sensor_RawSample_Get 14D7  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 1360  
                                          ??_vfprintf 0045                                               strlen@a 0075  
                                             strlen@s 0076                                   ??_EUSART_Initialize 0074  
                                    ??_WDT_Initialize 0072                                   ?_EUSART_is_rx_ready 0070  
                              Sensor_setActive@sensor 0072                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0039                         Button_Deviation_Update@button 0072  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0027                                 __size_of_EUSART_Write 0008  
            MTOUCH_Button_SetPressedCallback@callback 0072                            MTOUCH_Sensor_Enable@sensor 0077  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0028                                   _callback_notPressed 006D  
                 __size_of_MTOUCH_Sensor_isCalibrated 0010                        __end_of_Button_DefaultCallback 135C  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0037  
                              ??_MTOUCH_ScanScheduler 0072                                    _sensor_globalFlags 006A  
                            __end_of_Sensor_isEnabled 14F9                            Sensor_setCalibrated@sensor 0072  
                      __end_of_Sensor_DefaultCallback 135D                      __end_of_myButtonReleasedCallback 166C  
                           __end_of_EUSART_Initialize 089A                                  ??_EUSART_is_rx_ready 0072  
                                       _check_message 1701                            _Sensor_loadADCSettings$550 0020  
                            ??_Sensor_autoCalibration 0076                                         _check_request 0064  
                                     ??_RELAY_PROCESS 0072                             ??_myButtonPressedCallback 0076  
                    __size_of_Sensor_RawSample_Update 0028                                    _Sensor_Acquisition 0AAB  
                            ??_Sensor_loadADCSettings 0074                                         ?_update_state 0070  
                                       ??_LED_PROCESS 0072                                  _Button_State_Pressed 0786  
                                      __end_of___bmul 14D7                    __end_of_EUSART_DefaultErrorHandler 1360  
                          _EUSART_DefaultErrorHandler 135D                                   ?_Sensor_Acquisition 0040  
                                         vfpfcnvrt@ap 003A                                           vfpfcnvrt@fp 0041  
                          ??_MTOUCH_Button_Initialize 0078           MTOUCH_Button_SetNotPressedCallback@callback 0072  
                     ??_MTOUCH_Sensor_Scan_Initialize 0072                        ?_Sensor_postAcquisitionProcess 0070  
                                        _EUSART_Write 07F8                                     __size_of_TMR1_ISR 0015  
                                 __size_of_check_data 004A                                    _Button_Tick_helper 16DA  
                                      __end_of_memcpy 17A5                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0076                              __end_of_Sensor_setActive 13C5  
                    TMR2_LoadPeriodRegister@periodVal 0072                                        __end_of_printf 151B  
                         ??_Button_State_Initializing 0026                                        __end_of_strlen 15DB  
                                 start_initialization 0021                               _MTOUCH_Service_Mainloop 1612  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 14F9  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 15C4  
                                         __end_of_pad 0AAB                                        _TMR2_StopTimer 1366  
                                       ??_EUSART_Read 0072          EUSART_SetRxInterruptHandler@interruptHandler 0072  
                                         putch@txData 0073                                  ??_Sensor_Acquisition 0041  
                                      ?_check_message 0070                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 0025                        Sensor_autoCalibration@adcIndex 0020  
                      ?_EUSART_SetOverrunErrorHandler 0072                      __end_of_MTOUCH_Sensor_wasSampled 1467  
                                ??_Button_Tick_helper 0072                              __size_of_TMR1_Initialize 001B  
                        __end_of_MTOUCH_Sensor_Enable 1449                                           vfprintf@fmt 0042  
                                        _packet_noise 005F                                        ??_update_state 007A  
                          _EUSART_FramingErrorHandler 00E0                                              ??___bmul 0073  
                               ?_Button_State_Pressed 0025                                _EUSART_SetErrorHandler 138D  
                          ??_MTOUCH_Button_ServiceAll 007A                                           __pdataBANK0 006D  
                                         __pdataBANK1 00E4                                           __pdataBANK2 0120  
                                      check_message@x 0054                                              ??_memcpy 0076  
                         __end_of_Sensor_isCalibrated 13F8                          ??_Button_Baseline_Initialize 0020  
                                       _sample_period 006F                                  ??_MTOUCH_Button_Tick 0075  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 0072  
                                            ??_printf 004E                                              ??_strlen 0074  
                        ?_Sensor_isCalibratingAcqTime 0070                       __end_of_myButtonPressedCallback 1800  
                                 __end_of_LED_PROCESS 0EBF                                __end_of_TMR2_StopTimer 1369  
                                         __pbssCOMMON 007A                                             ___latbits 0002  
                                       __pcstackBANK0 0020                                         __pcstackBANK2 0144  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 142D  
                                 Sensor_Service@error 0048                            __end_of_EUSART_Receive_ISR 08CC  
                       __size_of_Sensor_Sampled_Reset 0008                            __size_of_EUSART_Initialize 0030  
                             _Button_Deviation_Update 0BE5                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00E2                                   __end_of_EUSART_Read 16B5  
                           _Button_State_Initializing 0B07                    __end_of_MTOUCH_Sensor_isCalibrated 1496  
                          _MTOUCH_Sensor_isCalibrated 1486                                             __pnvBANK1 00D8  
                     __size_of_Sensor_autoCalibration 0098                     __size_of_Sensor_getScanGroupIndex 002D  
                                   _Sensor_setSampled 13CD                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 15AD                                _PIN_MANAGER_Initialize 162F  
                                    ??_Button_Service 002A                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 0073                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 0022                      __end_of_TMR1_SetInterruptHandler 13AB  
                          ??_MTOUCH_Sensor_Initialize 0078                         __size_of_Sensor_setCalibrated 000E  
                                           __ptext100 1596                       __size_of_Sensor_loadADCSettings 00B5  
                                            _AAD1CON2 0713                                              _AAD1CON3 0714  
                                            _AAD2CON3 0794                                              _AAD1RES0 071A  
                                        _eusartRxHead 007B                                              _AAD2RES0 079A  
                                        _eusartRxTail 007A                                      ??_Sensor_Service 0044  
                          ??_Sensor_Acq_ExecutePacket 0025                          ??_INTERRUPT_InterruptManager 0072  
                                 ??_Sensor_setSampled 0072                     __size_of_myButtonReleasedCallback 0020  
                                         _blink_count 0062                             ?_myButtonReleasedCallback 0075  
                           ??_MTOUCH_Service_Mainloop 004D                                     __size_of_vfprintf 002F  
                                            _ADCOMCON 0712                           __size_of_Sensor_setInactive 0008  
                      Sensor_Acq_ExecutePacket@last_a 002D                        Sensor_Acq_ExecutePacket@last_b 002F  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0072  
                                       ??_MTOUCH_Tick 0077                                       ??_check_message 0052  
                                      __size_of_fputc 0036                                        __size_of_fputs 0025  
                                      __size_of_putch 0005                                          ??_check_data 0072  
                                      _eusartRxBuffer 00A8                             __end_of_Sensor_setSampled 13D5  
                                            _LATAbits 010C                EUSART_SetErrorHandler@interruptHandler 0072  
                                            _LATBbits 010D                                              _LATCbits 010E  
                                       ?_DATA_PROCESS 0070                               _Sensor_RawSample_Update 1728  
                   __end_of_Sensor_setCalibratAcqTime 1476                                             clear_ram0 13B1  
                                            _PIE1bits 0091                                     _eusartRxLastError 0068  
                            __size_of_TMR2_StartTimer 0003                              __size_of_TMR1_WriteTimer 000F  
                 __size_of_INTERRUPT_InterruptManager 001B                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0074                Sensor_Acq_ExecutePacket@packet_counter 0031  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0026  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 152E               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 151B                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 1373            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 136F                                              _TMR1_ISR 1541  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 002B                                           _LED_PROCESS 0E22  
                            _MTOUCH_Sensor_wasSampled 1458                                    _mtouch_time_toScan 006C  
                                           _vfpfcnvrt 06DE                              ??_Button_Baseline_Update 0072  
                                   ??_TMR1_Initialize 0074                                    __end_of_check_data 09BB  
                             __end_of_Sensor_isActive 143B                                _Sensor_autoCalibration 0D8A  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 0075  
                              _Sensor_loadADCSettings 057F                                  _MTOUCH_Sensor_Enable 143B  
                                         _EUSART_Read 1690                                  __end_of_update_state 06DE  
                                          vfpfcnvrt@c 0040                              Button_Tick_helper@button 0074  
                           ??_Button_Deviation_Update 0020                                 _Button_Reading_Update 1403  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                      ??_DATA_PROCESS 0075                                     ??_TMR2_Initialize 0072  
                                 __end_of_MTOUCH_Tick 136C                                     _MTOUCH_Initialize 152E  
                     __end_of_MTOUCH_Sensor_Calibrate 141F                                    ??_Sensor_isEnabled 0072  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0021  
                                           memcpy@tmp 0020                                            vfprintf@ap 0044  
                                          vfprintf@fp 0047                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 0072                    __end_of_Button_Baseline_Initialize 083B  
                          _Button_Baseline_Initialize 080C                                   _EUSART_ErrorHandler 00DC  
                                 ??_MTOUCH_Initialize 007A                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 0039                              ?_Button_State_NotPressed 0025  
                                         check_data@x 0074                              _TMR1_SetInterruptHandler 13A5  
                                  Button_Service@name 002B                                 _TMR1_InterruptHandler 00D8  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0072                  Sensor_Scanfrequency_Evaluation@retry 003A  
                                  ??_Sensor_setActive 0072                                  _EUSART_RxDataHandler 1596  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 08FE  
                                            __ptext11 137C                                              __ptext20 152E  
                                            __ptext12 07F8                                              __ptext21 13A5  
                                            __ptext13 0971                                              __ptext30 1393  
                                            __ptext22 14B6                                              __ptext14 156B  
                                            __ptext31 138D                                              __ptext23 1556  
                                            __ptext15 1373                                              __ptext40 0CFB  
                                            __ptext32 1612                                              __ptext24 143B  
                                            __ptext16 13DD                                              __ptext41 13CD  
                                            __ptext33 0002                                              __ptext25 15F6  
                                            __ptext17 15DB                                              __ptext50 1366  
                                            __ptext42 1728                                              __ptext34 1369  
                                            __ptext26 1779                                              __ptext18 162F  
                                            __ptext51 1363                                              __ptext43 135C  
                                            __ptext35 14F9                                              __ptext27 086A  
                                            __ptext19 13AB                                              __ptext60 1467  
                                            __ptext52 1377                                              __ptext44 0AAB  
                                            __ptext36 16DA                                              __ptext28 139F  
                                            __ptext61 13E5                                              __ptext53 057F  
                                            __ptext45 0934                                              __ptext37 151B  
                                            __ptext29 1399                                              __ptext70 0786  
                                            __ptext62 17A5                                              __ptext54 13EE  
                                            __ptext46 13C5                                              __ptext38 13D5  
                                            __ptext71 17D2                                              __ptext63 14A6  
                                            __ptext55 14E8                                              __ptext47 13BD  
                                            __ptext39 1580                                              __ptext80 09BB  
                                            __ptext72 135B                                              __ptext64 1496  
                                            __ptext56 142D                                              __ptext48 0B69  
                                            __ptext81 14D7                                              __ptext73 164C  
                                            __ptext65 0A0B                                              __ptext57 0D8A  
                                            __ptext49 028B                                              __ptext90 0E22  
                                            __ptext82 14C6                                              __ptext74 1476  
                                            __ptext66 1458                                              __ptext58 15AD  
                                            __ptext83 0BE5                                              __ptext75 08CC  
                                            __ptext67 1486                                              __ptext59 141F  
                                            __ptext92 1541                                              __ptext84 1387  
                                            __ptext76 1411                                              __ptext68 0F5C  
                                            __ptext93 13F8                                              __ptext85 1381  
                                            __ptext77 0C6C                                              __ptext69 0B07  
                                            __ptext94 135A                                              __ptext86 1360  
                                            __ptext78 080C                                              __ptext95 1449  
                                            __ptext87 1690                                              __ptext79 1403  
                                            __ptext96 089A                                              __ptext88 0459  
                                            __ptext97 136F                                              __ptext89 0EBF  
                                            __ptext98 1359                                              __ptext99 135D  
                           __end_of_MTOUCH_Initialize 1541                             ??_Sensor_RawSample_Update 0076  
                       __size_of_MTOUCH_ScanScheduler 000B                            __size_of_Sensor_setSampled 0008  
                         __size_of_EUSART_is_rx_ready 0003                                         __size_of_ctoa 0029  
                                       __size_of_main 0229                       __end_of_MTOUCH_Sensor_SampleAll 1596  
                    Sensor_Scanfrequency_Evaluation@i 003F                               ?_EUSART_SetErrorHandler 0072  
                               __end_of_RELAY_PROCESS 0F5C         EUSART_SetOverrunErrorHandler@interruptHandler 0072  
                                            int$flags 007E                                              _vfprintf 083B  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0072  
                  __end_of_INTERRUPT_InterruptManager 001F                            _INTERRUPT_InterruptManager 0004  
                                           printf@fmt 004A                 __end_of_EUSART_SetFramingErrorHandler 1399  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 1393  
                                   ??_TMR1_WriteTimer 0072                                        RELAY_PROCESS@x 0074  
                     __size_of_Button_Baseline_Update 008F                          ?_MTOUCH_Button_InitializeAll 0070  
                        MTOUCH_Sensor_SampleAll@group 004C                          ?_MTOUCH_Sensor_InitializeAll 0070  
                                    ?_Sensor_isActive 0070                                         _mtouch_button 01A0  
                                          _INTCONbits 000B                                 ?_EUSART_RxDataHandler 0070  
                                       _mtouch_sensor 0120                                              memcpy@d1 0023  
                                            memcpy@s1 0072                       __end_of_MTOUCH_Button_isPressed 1486  
                    __end_of_Sensor_getScanGroupIndex 17D2                                     __CFG_BOREN$NSLEEP 0000  
                                      __pstringtext10 1828                                        __pstringtext11 182D  
                                      __pstringtext20 185A                                        __pstringtext12 1832  
                                      __pstringtext21 185F                                        __pstringtext13 1837  
                                      __pstringtext22 1868                                        __pstringtext14 183C  
                                      __pstringtext23 0000                                        __pstringtext15 1841  
                                      __pstringtext16 1846                                        __pstringtext17 184B  
                                      __pstringtext18 1850                                        __pstringtext19 1855  
                                         _MTOUCH_Tick 1369                                ?_Button_Reading_Update 0070  
                    Button_Deviation_Update@deviation 0073                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 0020                     __size_of_MTOUCH_Button_Initialize 0032  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 0075  
             __end_of_Sensor_Scanfrequency_Evaluation 0BE5              __size_of_Sensor_Scanfrequency_Evaluation 007C  
                   ??_Sensor_Scanfrequency_Evaluation 0034                      ?_Sensor_Scanfrequency_Evaluation 0033  
                     _Sensor_Scanfrequency_Evaluation 0B69                               ?_PIN_MANAGER_Initialize 0070  
                                       _timeout_count 005D                           ??_Sensor_setCalibratAcqTime 0072  
                      __end_of_EUSART_SetErrorHandler 1393                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 13A5  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 139F  
                                       _config_status 0065                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 1000                                              printf@ap 0051  
                                  _EUSART_Receive_ISR 089A         EUSART_SetFramingErrorHandler@interruptHandler 0072  
                        __end_of_Sensor_Sampled_Reset 13DD                                           ??_vfpfcnvrt 003B  
                                    ??_TMR2_StopTimer 0072                       __end_of_TMR2_LoadPeriodRegister 137C  
                         __size_of_MTOUCH_Button_Tick 0011                                         __pstringtext1 180F  
                                       __pstringtext2 1864                                         __pstringtext3 1000  
                                       __pstringtext4 1800                                         __pstringtext5 1809  
                                       __pstringtext6 1814                                         __pstringtext7 1819  
                                       __pstringtext8 181E                                         __pstringtext9 1823  
                                __end_of_DATA_PROCESS 057F                                   ?_EUSART_Receive_ISR 0070  
                               __size_of_update_state 00AA                         ??_MTOUCH_Button_InitializeAll 0079  
                            ??_Button_DefaultCallback 0076                         ??_MTOUCH_Sensor_InitializeAll 007A  
                Sensor_Acq_ExecutePacket@activeSensor 002C                      __size_of_MTOUCH_Sensor_Calibrate 000E  
                              ??_MTOUCH_Sensor_Enable 0076                     Sensor_isCalibratingAcqTime@sensor 0072  
                        __size_of_Sensor_isCalibrated 000A                              ??_Sensor_DefaultCallback 0073  
                        __end_of_Sensor_setCalibrated 142D                  __end_of_Button_Reading_Update_Helper 0A0B  
               __size_of_Button_Reading_Update_Helper 0050                          _Button_Reading_Update_Helper 09BB  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0025                                    EUSART_Write@txData 0072  
                          __size_of_MTOUCH_Initialize 0013                        __end_of_PIN_MANAGER_Initialize 164C  
                              _Button_Baseline_Update 0C6C                           MTOUCH_Button_isPressed@name 0072  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0076  
                                     _TMR1_Initialize 15DB  
