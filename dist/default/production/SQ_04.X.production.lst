

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jul 05 13:23:40 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	inittext,global,class=CODE,delta=2
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	text72,local,class=CODE,merge=1,delta=2,group=1
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	text74,local,class=CODE,merge=1,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	psect	text81,local,class=CODE,merge=1,delta=2,group=2
   112                           	psect	text82,local,class=CODE,merge=1,delta=2
   113                           	psect	text83,local,class=CODE,merge=1,delta=2
   114                           	psect	text84,local,class=CODE,merge=1,delta=2
   115                           	psect	text85,local,class=CODE,merge=1,delta=2,group=2
   116                           	psect	text86,local,class=CODE,merge=1,delta=2,group=1
   117                           	psect	text87,local,class=CODE,merge=1,delta=2,group=1
   118                           	psect	text88,local,class=CODE,merge=1,delta=2
   119                           	psect	text89,local,class=CODE,merge=1,delta=2
   120                           	psect	text90,local,class=CODE,merge=1,delta=2,group=2
   121                           	psect	text91,local,class=CODE,merge=1,delta=2,group=2
   122                           	psect	text92,local,class=CODE,merge=1,delta=2,group=2
   123                           	psect	text93,local,class=CODE,merge=1,delta=2
   124                           	psect	text94,local,class=CODE,merge=1,delta=2
   125                           	psect	text95,local,class=CODE,merge=1,delta=2
   126                           	psect	text96,local,class=CODE,merge=1,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text98,local,class=CODE,merge=1,delta=2
   129                           	psect	text99,local,class=CODE,merge=1,delta=2
   130                           	psect	text100,local,class=CODE,merge=1,delta=2
   131                           	psect	text101,local,class=CODE,merge=1,delta=2
   132                           	psect	text102,local,class=CODE,merge=1,delta=2
   133                           	psect	text103,local,class=CODE,merge=1,delta=2
   134                           	psect	text104,local,class=CODE,merge=1,delta=2
   135                           	psect	text105,local,class=CODE,merge=1,delta=2
   136                           	psect	text106,local,class=CODE,merge=1,delta=2
   137                           	psect	text107,local,class=CODE,merge=1,delta=2
   138                           	psect	text108,local,class=CODE,merge=1,delta=2
   139                           	psect	text109,local,class=CODE,merge=1,delta=2
   140                           	psect	text110,local,class=CODE,merge=1,delta=2
   141                           	psect	text111,local,class=CODE,merge=1,delta=2
   142                           	psect	text112,local,class=CODE,merge=1,delta=2
   143                           	psect	text113,local,class=CODE,merge=1,delta=2
   144                           	psect	text114,local,class=CODE,merge=1,delta=2
   145                           	psect	text115,local,class=CODE,merge=1,delta=2
   146                           	psect	text116,local,class=CODE,merge=1,delta=2
   147                           	psect	text117,local,class=CODE,merge=1,delta=2
   148                           	psect	text118,local,class=CODE,merge=1,delta=2
   149                           	psect	text119,local,class=CODE,merge=1,delta=2
   150                           	psect	text120,local,class=CODE,merge=1,delta=2
   151                           	psect	text121,local,class=CODE,merge=1,delta=2
   152                           	psect	text122,local,class=CODE,merge=1,delta=2
   153                           	psect	text123,local,class=CODE,merge=1,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     
   156                           ; Version 2.05
   157                           ; Generated 20/12/2018 GMT
   158                           ; 
   159                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   160                           ; All rights reserved.
   161                           ; 
   162                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   163                           ; 
   164                           ; Redistribution and use in source and binary forms, with or without modification, are
   165                           ; permitted provided that the following conditions are met:
   166                           ; 
   167                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   168                           ;        conditions and the following disclaimer.
   169                           ; 
   170                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   171                           ;        of conditions and the following disclaimer in the documentation and/or other
   172                           ;        materials provided with the distribution.
   173                           ; 
   174                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   175                           ;        software without specific prior written permission.
   176                           ; 
   177                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   178                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   179                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   180                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   181                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   182                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   183                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   184                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   185                           ; 
   186                           ; 
   187                           ; Code-generator required, PIC16LF1559 Definitions
   188                           ; 
   189                           ; SFR Addresses
   190  0000                     	;# 
   191  0001                     	;# 
   192  0002                     	;# 
   193  0003                     	;# 
   194  0004                     	;# 
   195  0005                     	;# 
   196  0006                     	;# 
   197  0007                     	;# 
   198  0008                     	;# 
   199  0009                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  0011                     	;# 
   206  0012                     	;# 
   207  0015                     	;# 
   208  0016                     	;# 
   209  0016                     	;# 
   210  0017                     	;# 
   211  0018                     	;# 
   212  0019                     	;# 
   213  001A                     	;# 
   214  001B                     	;# 
   215  001C                     	;# 
   216  008C                     	;# 
   217  008D                     	;# 
   218  008E                     	;# 
   219  0091                     	;# 
   220  0092                     	;# 
   221  0095                     	;# 
   222  0096                     	;# 
   223  0097                     	;# 
   224  0099                     	;# 
   225  009A                     	;# 
   226  009B                     	;# 
   227  009B                     	;# 
   228  009C                     	;# 
   229  009D                     	;# 
   230  009E                     	;# 
   231  009F                     	;# 
   232  010C                     	;# 
   233  010D                     	;# 
   234  010E                     	;# 
   235  0116                     	;# 
   236  0117                     	;# 
   237  011D                     	;# 
   238  018C                     	;# 
   239  018D                     	;# 
   240  018E                     	;# 
   241  0191                     	;# 
   242  0191                     	;# 
   243  0192                     	;# 
   244  0193                     	;# 
   245  0193                     	;# 
   246  0194                     	;# 
   247  0195                     	;# 
   248  0196                     	;# 
   249  0199                     	;# 
   250  019A                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019C                     	;# 
   254  019D                     	;# 
   255  019E                     	;# 
   256  019F                     	;# 
   257  020C                     	;# 
   258  020D                     	;# 
   259  0211                     	;# 
   260  0211                     	;# 
   261  0212                     	;# 
   262  0212                     	;# 
   263  0213                     	;# 
   264  0213                     	;# 
   265  0214                     	;# 
   266  0214                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0215                     	;# 
   270  0216                     	;# 
   271  0216                     	;# 
   272  0217                     	;# 
   273  0217                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  0611                     	;# 
   281  0612                     	;# 
   282  0613                     	;# 
   283  0613                     	;# 
   284  0614                     	;# 
   285  0615                     	;# 
   286  0616                     	;# 
   287  0616                     	;# 
   288  0711                     	;# 
   289  0711                     	;# 
   290  0711                     	;# 
   291  0712                     	;# 
   292  0712                     	;# 
   293  0713                     	;# 
   294  0713                     	;# 
   295  0713                     	;# 
   296  0714                     	;# 
   297  0714                     	;# 
   298  0714                     	;# 
   299  0715                     	;# 
   300  0715                     	;# 
   301  0716                     	;# 
   302  0716                     	;# 
   303  0716                     	;# 
   304  0716                     	;# 
   305  0717                     	;# 
   306  0717                     	;# 
   307  0717                     	;# 
   308  0717                     	;# 
   309  0718                     	;# 
   310  0718                     	;# 
   311  0718                     	;# 
   312  0719                     	;# 
   313  0719                     	;# 
   314  0719                     	;# 
   315  0719                     	;# 
   316  071A                     	;# 
   317  071A                     	;# 
   318  071A                     	;# 
   319  071A                     	;# 
   320  071A                     	;# 
   321  071B                     	;# 
   322  071B                     	;# 
   323  071C                     	;# 
   324  071C                     	;# 
   325  071C                     	;# 
   326  071C                     	;# 
   327  071C                     	;# 
   328  071D                     	;# 
   329  071D                     	;# 
   330  071E                     	;# 
   331  071E                     	;# 
   332  0791                     	;# 
   333  0791                     	;# 
   334  0793                     	;# 
   335  0793                     	;# 
   336  0794                     	;# 
   337  0794                     	;# 
   338  0796                     	;# 
   339  0796                     	;# 
   340  0796                     	;# 
   341  0797                     	;# 
   342  0797                     	;# 
   343  0797                     	;# 
   344  0798                     	;# 
   345  0798                     	;# 
   346  0799                     	;# 
   347  0799                     	;# 
   348  0799                     	;# 
   349  079A                     	;# 
   350  079A                     	;# 
   351  079A                     	;# 
   352  079B                     	;# 
   353  079C                     	;# 
   354  079C                     	;# 
   355  079C                     	;# 
   356  079D                     	;# 
   357  079E                     	;# 
   358  079E                     	;# 
   359  0F8C                     	;# 
   360  0F8D                     	;# 
   361  0F91                     	;# 
   362  0F96                     	;# 
   363  0F97                     	;# 
   364  0F9C                     	;# 
   365  0F9D                     	;# 
   366  0F9E                     	;# 
   367  0FE3                     	;# 
   368  0FE4                     	;# 
   369  0FE5                     	;# 
   370  0FE6                     	;# 
   371  0FE7                     	;# 
   372  0FE8                     	;# 
   373  0FE9                     	;# 
   374  0FEA                     	;# 
   375  0FEB                     	;# 
   376  0FED                     	;# 
   377  0FEE                     	;# 
   378  0FEF                     	;# 
   379  0000                     	;# 
   380  0001                     	;# 
   381  0002                     	;# 
   382  0003                     	;# 
   383  0004                     	;# 
   384  0005                     	;# 
   385  0006                     	;# 
   386  0007                     	;# 
   387  0008                     	;# 
   388  0009                     	;# 
   389  000A                     	;# 
   390  000B                     	;# 
   391  000C                     	;# 
   392  000D                     	;# 
   393  000E                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0099                     	;# 
   414  009A                     	;# 
   415  009B                     	;# 
   416  009B                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  009F                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  011D                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019C                     	;# 
   443  019D                     	;# 
   444  019E                     	;# 
   445  019F                     	;# 
   446  020C                     	;# 
   447  020D                     	;# 
   448  0211                     	;# 
   449  0211                     	;# 
   450  0212                     	;# 
   451  0212                     	;# 
   452  0213                     	;# 
   453  0213                     	;# 
   454  0214                     	;# 
   455  0214                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0216                     	;# 
   460  0216                     	;# 
   461  0217                     	;# 
   462  0217                     	;# 
   463  0391                     	;# 
   464  0392                     	;# 
   465  0393                     	;# 
   466  0394                     	;# 
   467  0395                     	;# 
   468  0396                     	;# 
   469  0611                     	;# 
   470  0612                     	;# 
   471  0613                     	;# 
   472  0613                     	;# 
   473  0614                     	;# 
   474  0615                     	;# 
   475  0616                     	;# 
   476  0616                     	;# 
   477  0711                     	;# 
   478  0711                     	;# 
   479  0711                     	;# 
   480  0712                     	;# 
   481  0712                     	;# 
   482  0713                     	;# 
   483  0713                     	;# 
   484  0713                     	;# 
   485  0714                     	;# 
   486  0714                     	;# 
   487  0714                     	;# 
   488  0715                     	;# 
   489  0715                     	;# 
   490  0716                     	;# 
   491  0716                     	;# 
   492  0716                     	;# 
   493  0716                     	;# 
   494  0717                     	;# 
   495  0717                     	;# 
   496  0717                     	;# 
   497  0717                     	;# 
   498  0718                     	;# 
   499  0718                     	;# 
   500  0718                     	;# 
   501  0719                     	;# 
   502  0719                     	;# 
   503  0719                     	;# 
   504  0719                     	;# 
   505  071A                     	;# 
   506  071A                     	;# 
   507  071A                     	;# 
   508  071A                     	;# 
   509  071A                     	;# 
   510  071B                     	;# 
   511  071B                     	;# 
   512  071C                     	;# 
   513  071C                     	;# 
   514  071C                     	;# 
   515  071C                     	;# 
   516  071C                     	;# 
   517  071D                     	;# 
   518  071D                     	;# 
   519  071E                     	;# 
   520  071E                     	;# 
   521  0791                     	;# 
   522  0791                     	;# 
   523  0793                     	;# 
   524  0793                     	;# 
   525  0794                     	;# 
   526  0794                     	;# 
   527  0796                     	;# 
   528  0796                     	;# 
   529  0796                     	;# 
   530  0797                     	;# 
   531  0797                     	;# 
   532  0797                     	;# 
   533  0798                     	;# 
   534  0798                     	;# 
   535  0799                     	;# 
   536  0799                     	;# 
   537  0799                     	;# 
   538  079A                     	;# 
   539  079A                     	;# 
   540  079A                     	;# 
   541  079B                     	;# 
   542  079C                     	;# 
   543  079C                     	;# 
   544  079C                     	;# 
   545  079D                     	;# 
   546  079E                     	;# 
   547  079E                     	;# 
   548  0F8C                     	;# 
   549  0F8D                     	;# 
   550  0F91                     	;# 
   551  0F96                     	;# 
   552  0F97                     	;# 
   553  0F9C                     	;# 
   554  0F9D                     	;# 
   555  0F9E                     	;# 
   556  0FE3                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  008C                     	;# 
   595  008D                     	;# 
   596  008E                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0095                     	;# 
   600  0096                     	;# 
   601  0097                     	;# 
   602  0099                     	;# 
   603  009A                     	;# 
   604  009B                     	;# 
   605  009B                     	;# 
   606  009C                     	;# 
   607  009D                     	;# 
   608  009E                     	;# 
   609  009F                     	;# 
   610  010C                     	;# 
   611  010D                     	;# 
   612  010E                     	;# 
   613  0116                     	;# 
   614  0117                     	;# 
   615  011D                     	;# 
   616  018C                     	;# 
   617  018D                     	;# 
   618  018E                     	;# 
   619  0191                     	;# 
   620  0191                     	;# 
   621  0192                     	;# 
   622  0193                     	;# 
   623  0193                     	;# 
   624  0194                     	;# 
   625  0195                     	;# 
   626  0196                     	;# 
   627  0199                     	;# 
   628  019A                     	;# 
   629  019B                     	;# 
   630  019B                     	;# 
   631  019C                     	;# 
   632  019D                     	;# 
   633  019E                     	;# 
   634  019F                     	;# 
   635  020C                     	;# 
   636  020D                     	;# 
   637  0211                     	;# 
   638  0211                     	;# 
   639  0212                     	;# 
   640  0212                     	;# 
   641  0213                     	;# 
   642  0213                     	;# 
   643  0214                     	;# 
   644  0214                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0216                     	;# 
   649  0216                     	;# 
   650  0217                     	;# 
   651  0217                     	;# 
   652  0391                     	;# 
   653  0392                     	;# 
   654  0393                     	;# 
   655  0394                     	;# 
   656  0395                     	;# 
   657  0396                     	;# 
   658  0611                     	;# 
   659  0612                     	;# 
   660  0613                     	;# 
   661  0613                     	;# 
   662  0614                     	;# 
   663  0615                     	;# 
   664  0616                     	;# 
   665  0616                     	;# 
   666  0711                     	;# 
   667  0711                     	;# 
   668  0711                     	;# 
   669  0712                     	;# 
   670  0712                     	;# 
   671  0713                     	;# 
   672  0713                     	;# 
   673  0713                     	;# 
   674  0714                     	;# 
   675  0714                     	;# 
   676  0714                     	;# 
   677  0715                     	;# 
   678  0715                     	;# 
   679  0716                     	;# 
   680  0716                     	;# 
   681  0716                     	;# 
   682  0716                     	;# 
   683  0717                     	;# 
   684  0717                     	;# 
   685  0717                     	;# 
   686  0717                     	;# 
   687  0718                     	;# 
   688  0718                     	;# 
   689  0718                     	;# 
   690  0719                     	;# 
   691  0719                     	;# 
   692  0719                     	;# 
   693  0719                     	;# 
   694  071A                     	;# 
   695  071A                     	;# 
   696  071A                     	;# 
   697  071A                     	;# 
   698  071A                     	;# 
   699  071B                     	;# 
   700  071B                     	;# 
   701  071C                     	;# 
   702  071C                     	;# 
   703  071C                     	;# 
   704  071C                     	;# 
   705  071C                     	;# 
   706  071D                     	;# 
   707  071D                     	;# 
   708  071E                     	;# 
   709  071E                     	;# 
   710  0791                     	;# 
   711  0791                     	;# 
   712  0793                     	;# 
   713  0793                     	;# 
   714  0794                     	;# 
   715  0794                     	;# 
   716  0796                     	;# 
   717  0796                     	;# 
   718  0796                     	;# 
   719  0797                     	;# 
   720  0797                     	;# 
   721  0797                     	;# 
   722  0798                     	;# 
   723  0798                     	;# 
   724  0799                     	;# 
   725  0799                     	;# 
   726  0799                     	;# 
   727  079A                     	;# 
   728  079A                     	;# 
   729  079A                     	;# 
   730  079B                     	;# 
   731  079C                     	;# 
   732  079C                     	;# 
   733  079C                     	;# 
   734  079D                     	;# 
   735  079E                     	;# 
   736  079E                     	;# 
   737  0F8C                     	;# 
   738  0F8D                     	;# 
   739  0F91                     	;# 
   740  0F96                     	;# 
   741  0F97                     	;# 
   742  0F9C                     	;# 
   743  0F9D                     	;# 
   744  0F9E                     	;# 
   745  0FE3                     	;# 
   746  0FE4                     	;# 
   747  0FE5                     	;# 
   748  0FE6                     	;# 
   749  0FE7                     	;# 
   750  0FE8                     	;# 
   751  0FE9                     	;# 
   752  0FEA                     	;# 
   753  0FEB                     	;# 
   754  0FED                     	;# 
   755  0FEE                     	;# 
   756  0FEF                     	;# 
   757  0000                     	;# 
   758  0001                     	;# 
   759  0002                     	;# 
   760  0003                     	;# 
   761  0004                     	;# 
   762  0005                     	;# 
   763  0006                     	;# 
   764  0007                     	;# 
   765  0008                     	;# 
   766  0009                     	;# 
   767  000A                     	;# 
   768  000B                     	;# 
   769  000C                     	;# 
   770  000D                     	;# 
   771  000E                     	;# 
   772  0011                     	;# 
   773  0012                     	;# 
   774  0015                     	;# 
   775  0016                     	;# 
   776  0016                     	;# 
   777  0017                     	;# 
   778  0018                     	;# 
   779  0019                     	;# 
   780  001A                     	;# 
   781  001B                     	;# 
   782  001C                     	;# 
   783  008C                     	;# 
   784  008D                     	;# 
   785  008E                     	;# 
   786  0091                     	;# 
   787  0092                     	;# 
   788  0095                     	;# 
   789  0096                     	;# 
   790  0097                     	;# 
   791  0099                     	;# 
   792  009A                     	;# 
   793  009B                     	;# 
   794  009B                     	;# 
   795  009C                     	;# 
   796  009D                     	;# 
   797  009E                     	;# 
   798  009F                     	;# 
   799  010C                     	;# 
   800  010D                     	;# 
   801  010E                     	;# 
   802  0116                     	;# 
   803  0117                     	;# 
   804  011D                     	;# 
   805  018C                     	;# 
   806  018D                     	;# 
   807  018E                     	;# 
   808  0191                     	;# 
   809  0191                     	;# 
   810  0192                     	;# 
   811  0193                     	;# 
   812  0193                     	;# 
   813  0194                     	;# 
   814  0195                     	;# 
   815  0196                     	;# 
   816  0199                     	;# 
   817  019A                     	;# 
   818  019B                     	;# 
   819  019B                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020C                     	;# 
   825  020D                     	;# 
   826  0211                     	;# 
   827  0211                     	;# 
   828  0212                     	;# 
   829  0212                     	;# 
   830  0213                     	;# 
   831  0213                     	;# 
   832  0214                     	;# 
   833  0214                     	;# 
   834  0215                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0216                     	;# 
   838  0216                     	;# 
   839  0217                     	;# 
   840  0217                     	;# 
   841  0391                     	;# 
   842  0392                     	;# 
   843  0393                     	;# 
   844  0394                     	;# 
   845  0395                     	;# 
   846  0396                     	;# 
   847  0611                     	;# 
   848  0612                     	;# 
   849  0613                     	;# 
   850  0613                     	;# 
   851  0614                     	;# 
   852  0615                     	;# 
   853  0616                     	;# 
   854  0616                     	;# 
   855  0711                     	;# 
   856  0711                     	;# 
   857  0711                     	;# 
   858  0712                     	;# 
   859  0712                     	;# 
   860  0713                     	;# 
   861  0713                     	;# 
   862  0713                     	;# 
   863  0714                     	;# 
   864  0714                     	;# 
   865  0714                     	;# 
   866  0715                     	;# 
   867  0715                     	;# 
   868  0716                     	;# 
   869  0716                     	;# 
   870  0716                     	;# 
   871  0716                     	;# 
   872  0717                     	;# 
   873  0717                     	;# 
   874  0717                     	;# 
   875  0717                     	;# 
   876  0718                     	;# 
   877  0718                     	;# 
   878  0718                     	;# 
   879  0719                     	;# 
   880  0719                     	;# 
   881  0719                     	;# 
   882  0719                     	;# 
   883  071A                     	;# 
   884  071A                     	;# 
   885  071A                     	;# 
   886  071A                     	;# 
   887  071A                     	;# 
   888  071B                     	;# 
   889  071B                     	;# 
   890  071C                     	;# 
   891  071C                     	;# 
   892  071C                     	;# 
   893  071C                     	;# 
   894  071C                     	;# 
   895  071D                     	;# 
   896  071D                     	;# 
   897  071E                     	;# 
   898  071E                     	;# 
   899  0791                     	;# 
   900  0791                     	;# 
   901  0793                     	;# 
   902  0793                     	;# 
   903  0794                     	;# 
   904  0794                     	;# 
   905  0796                     	;# 
   906  0796                     	;# 
   907  0796                     	;# 
   908  0797                     	;# 
   909  0797                     	;# 
   910  0797                     	;# 
   911  0798                     	;# 
   912  0798                     	;# 
   913  0799                     	;# 
   914  0799                     	;# 
   915  0799                     	;# 
   916  079A                     	;# 
   917  079A                     	;# 
   918  079A                     	;# 
   919  079B                     	;# 
   920  079C                     	;# 
   921  079C                     	;# 
   922  079C                     	;# 
   923  079D                     	;# 
   924  079E                     	;# 
   925  079E                     	;# 
   926  0F8C                     	;# 
   927  0F8D                     	;# 
   928  0F91                     	;# 
   929  0F96                     	;# 
   930  0F97                     	;# 
   931  0F9C                     	;# 
   932  0F9D                     	;# 
   933  0F9E                     	;# 
   934  0FE3                     	;# 
   935  0FE4                     	;# 
   936  0FE5                     	;# 
   937  0FE6                     	;# 
   938  0FE7                     	;# 
   939  0FE8                     	;# 
   940  0FE9                     	;# 
   941  0FEA                     	;# 
   942  0FEB                     	;# 
   943  0FED                     	;# 
   944  0FEE                     	;# 
   945  0FEF                     	;# 
   946  0000                     	;# 
   947  0001                     	;# 
   948  0002                     	;# 
   949  0003                     	;# 
   950  0004                     	;# 
   951  0005                     	;# 
   952  0006                     	;# 
   953  0007                     	;# 
   954  0008                     	;# 
   955  0009                     	;# 
   956  000A                     	;# 
   957  000B                     	;# 
   958  000C                     	;# 
   959  000D                     	;# 
   960  000E                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  009F                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020C                     	;# 
  1014  020D                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0391                     	;# 
  1031  0392                     	;# 
  1032  0393                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0611                     	;# 
  1037  0612                     	;# 
  1038  0613                     	;# 
  1039  0613                     	;# 
  1040  0614                     	;# 
  1041  0615                     	;# 
  1042  0616                     	;# 
  1043  0616                     	;# 
  1044  0711                     	;# 
  1045  0711                     	;# 
  1046  0711                     	;# 
  1047  0712                     	;# 
  1048  0712                     	;# 
  1049  0713                     	;# 
  1050  0713                     	;# 
  1051  0713                     	;# 
  1052  0714                     	;# 
  1053  0714                     	;# 
  1054  0714                     	;# 
  1055  0715                     	;# 
  1056  0715                     	;# 
  1057  0716                     	;# 
  1058  0716                     	;# 
  1059  0716                     	;# 
  1060  0716                     	;# 
  1061  0717                     	;# 
  1062  0717                     	;# 
  1063  0717                     	;# 
  1064  0717                     	;# 
  1065  0718                     	;# 
  1066  0718                     	;# 
  1067  0718                     	;# 
  1068  0719                     	;# 
  1069  0719                     	;# 
  1070  0719                     	;# 
  1071  0719                     	;# 
  1072  071A                     	;# 
  1073  071A                     	;# 
  1074  071A                     	;# 
  1075  071A                     	;# 
  1076  071A                     	;# 
  1077  071B                     	;# 
  1078  071B                     	;# 
  1079  071C                     	;# 
  1080  071C                     	;# 
  1081  071C                     	;# 
  1082  071C                     	;# 
  1083  071C                     	;# 
  1084  071D                     	;# 
  1085  071D                     	;# 
  1086  071E                     	;# 
  1087  071E                     	;# 
  1088  0791                     	;# 
  1089  0791                     	;# 
  1090  0793                     	;# 
  1091  0793                     	;# 
  1092  0794                     	;# 
  1093  0794                     	;# 
  1094  0796                     	;# 
  1095  0796                     	;# 
  1096  0796                     	;# 
  1097  0797                     	;# 
  1098  0797                     	;# 
  1099  0797                     	;# 
  1100  0798                     	;# 
  1101  0798                     	;# 
  1102  0799                     	;# 
  1103  0799                     	;# 
  1104  0799                     	;# 
  1105  079A                     	;# 
  1106  079A                     	;# 
  1107  079A                     	;# 
  1108  079B                     	;# 
  1109  079C                     	;# 
  1110  079C                     	;# 
  1111  079C                     	;# 
  1112  079D                     	;# 
  1113  079E                     	;# 
  1114  079E                     	;# 
  1115  0F8C                     	;# 
  1116  0F8D                     	;# 
  1117  0F91                     	;# 
  1118  0F96                     	;# 
  1119  0F97                     	;# 
  1120  0F9C                     	;# 
  1121  0F9D                     	;# 
  1122  0F9E                     	;# 
  1123  0FE3                     	;# 
  1124  0FE4                     	;# 
  1125  0FE5                     	;# 
  1126  0FE6                     	;# 
  1127  0FE7                     	;# 
  1128  0FE8                     	;# 
  1129  0FE9                     	;# 
  1130  0FEA                     	;# 
  1131  0FEB                     	;# 
  1132  0FED                     	;# 
  1133  0FEE                     	;# 
  1134  0FEF                     	;# 
  1135  0000                     	;# 
  1136  0001                     	;# 
  1137  0002                     	;# 
  1138  0003                     	;# 
  1139  0004                     	;# 
  1140  0005                     	;# 
  1141  0006                     	;# 
  1142  0007                     	;# 
  1143  0008                     	;# 
  1144  0009                     	;# 
  1145  000A                     	;# 
  1146  000B                     	;# 
  1147  000C                     	;# 
  1148  000D                     	;# 
  1149  000E                     	;# 
  1150  0011                     	;# 
  1151  0012                     	;# 
  1152  0015                     	;# 
  1153  0016                     	;# 
  1154  0016                     	;# 
  1155  0017                     	;# 
  1156  0018                     	;# 
  1157  0019                     	;# 
  1158  001A                     	;# 
  1159  001B                     	;# 
  1160  001C                     	;# 
  1161  008C                     	;# 
  1162  008D                     	;# 
  1163  008E                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0095                     	;# 
  1167  0096                     	;# 
  1168  0097                     	;# 
  1169  0099                     	;# 
  1170  009A                     	;# 
  1171  009B                     	;# 
  1172  009B                     	;# 
  1173  009C                     	;# 
  1174  009D                     	;# 
  1175  009E                     	;# 
  1176  009F                     	;# 
  1177  010C                     	;# 
  1178  010D                     	;# 
  1179  010E                     	;# 
  1180  0116                     	;# 
  1181  0117                     	;# 
  1182  011D                     	;# 
  1183  018C                     	;# 
  1184  018D                     	;# 
  1185  018E                     	;# 
  1186  0191                     	;# 
  1187  0191                     	;# 
  1188  0192                     	;# 
  1189  0193                     	;# 
  1190  0193                     	;# 
  1191  0194                     	;# 
  1192  0195                     	;# 
  1193  0196                     	;# 
  1194  0199                     	;# 
  1195  019A                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019C                     	;# 
  1199  019D                     	;# 
  1200  019E                     	;# 
  1201  019F                     	;# 
  1202  020C                     	;# 
  1203  020D                     	;# 
  1204  0211                     	;# 
  1205  0211                     	;# 
  1206  0212                     	;# 
  1207  0212                     	;# 
  1208  0213                     	;# 
  1209  0213                     	;# 
  1210  0214                     	;# 
  1211  0214                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0216                     	;# 
  1216  0216                     	;# 
  1217  0217                     	;# 
  1218  0217                     	;# 
  1219  0391                     	;# 
  1220  0392                     	;# 
  1221  0393                     	;# 
  1222  0394                     	;# 
  1223  0395                     	;# 
  1224  0396                     	;# 
  1225  0611                     	;# 
  1226  0612                     	;# 
  1227  0613                     	;# 
  1228  0613                     	;# 
  1229  0614                     	;# 
  1230  0615                     	;# 
  1231  0616                     	;# 
  1232  0616                     	;# 
  1233  0711                     	;# 
  1234  0711                     	;# 
  1235  0711                     	;# 
  1236  0712                     	;# 
  1237  0712                     	;# 
  1238  0713                     	;# 
  1239  0713                     	;# 
  1240  0713                     	;# 
  1241  0714                     	;# 
  1242  0714                     	;# 
  1243  0714                     	;# 
  1244  0715                     	;# 
  1245  0715                     	;# 
  1246  0716                     	;# 
  1247  0716                     	;# 
  1248  0716                     	;# 
  1249  0716                     	;# 
  1250  0717                     	;# 
  1251  0717                     	;# 
  1252  0717                     	;# 
  1253  0717                     	;# 
  1254  0718                     	;# 
  1255  0718                     	;# 
  1256  0718                     	;# 
  1257  0719                     	;# 
  1258  0719                     	;# 
  1259  0719                     	;# 
  1260  0719                     	;# 
  1261  071A                     	;# 
  1262  071A                     	;# 
  1263  071A                     	;# 
  1264  071A                     	;# 
  1265  071A                     	;# 
  1266  071B                     	;# 
  1267  071B                     	;# 
  1268  071C                     	;# 
  1269  071C                     	;# 
  1270  071C                     	;# 
  1271  071C                     	;# 
  1272  071C                     	;# 
  1273  071D                     	;# 
  1274  071D                     	;# 
  1275  071E                     	;# 
  1276  071E                     	;# 
  1277  0791                     	;# 
  1278  0791                     	;# 
  1279  0793                     	;# 
  1280  0793                     	;# 
  1281  0794                     	;# 
  1282  0794                     	;# 
  1283  0796                     	;# 
  1284  0796                     	;# 
  1285  0796                     	;# 
  1286  0797                     	;# 
  1287  0797                     	;# 
  1288  0797                     	;# 
  1289  0798                     	;# 
  1290  0798                     	;# 
  1291  0799                     	;# 
  1292  0799                     	;# 
  1293  0799                     	;# 
  1294  079A                     	;# 
  1295  079A                     	;# 
  1296  079A                     	;# 
  1297  079B                     	;# 
  1298  079C                     	;# 
  1299  079C                     	;# 
  1300  079C                     	;# 
  1301  079D                     	;# 
  1302  079E                     	;# 
  1303  079E                     	;# 
  1304  0F8C                     	;# 
  1305  0F8D                     	;# 
  1306  0F91                     	;# 
  1307  0F96                     	;# 
  1308  0F97                     	;# 
  1309  0F9C                     	;# 
  1310  0F9D                     	;# 
  1311  0F9E                     	;# 
  1312  0FE3                     	;# 
  1313  0FE4                     	;# 
  1314  0FE5                     	;# 
  1315  0FE6                     	;# 
  1316  0FE7                     	;# 
  1317  0FE8                     	;# 
  1318  0FE9                     	;# 
  1319  0FEA                     	;# 
  1320  0FEB                     	;# 
  1321  0FED                     	;# 
  1322  0FEE                     	;# 
  1323  0FEF                     	;# 
  1324  0000                     	;# 
  1325  0001                     	;# 
  1326  0002                     	;# 
  1327  0003                     	;# 
  1328  0004                     	;# 
  1329  0005                     	;# 
  1330  0006                     	;# 
  1331  0007                     	;# 
  1332  0008                     	;# 
  1333  0009                     	;# 
  1334  000A                     	;# 
  1335  000B                     	;# 
  1336  000C                     	;# 
  1337  000D                     	;# 
  1338  000E                     	;# 
  1339  0011                     	;# 
  1340  0012                     	;# 
  1341  0015                     	;# 
  1342  0016                     	;# 
  1343  0016                     	;# 
  1344  0017                     	;# 
  1345  0018                     	;# 
  1346  0019                     	;# 
  1347  001A                     	;# 
  1348  001B                     	;# 
  1349  001C                     	;# 
  1350  008C                     	;# 
  1351  008D                     	;# 
  1352  008E                     	;# 
  1353  0091                     	;# 
  1354  0092                     	;# 
  1355  0095                     	;# 
  1356  0096                     	;# 
  1357  0097                     	;# 
  1358  0099                     	;# 
  1359  009A                     	;# 
  1360  009B                     	;# 
  1361  009B                     	;# 
  1362  009C                     	;# 
  1363  009D                     	;# 
  1364  009E                     	;# 
  1365  009F                     	;# 
  1366  010C                     	;# 
  1367  010D                     	;# 
  1368  010E                     	;# 
  1369  0116                     	;# 
  1370  0117                     	;# 
  1371  011D                     	;# 
  1372  018C                     	;# 
  1373  018D                     	;# 
  1374  018E                     	;# 
  1375  0191                     	;# 
  1376  0191                     	;# 
  1377  0192                     	;# 
  1378  0193                     	;# 
  1379  0193                     	;# 
  1380  0194                     	;# 
  1381  0195                     	;# 
  1382  0196                     	;# 
  1383  0199                     	;# 
  1384  019A                     	;# 
  1385  019B                     	;# 
  1386  019B                     	;# 
  1387  019C                     	;# 
  1388  019D                     	;# 
  1389  019E                     	;# 
  1390  019F                     	;# 
  1391  020C                     	;# 
  1392  020D                     	;# 
  1393  0211                     	;# 
  1394  0211                     	;# 
  1395  0212                     	;# 
  1396  0212                     	;# 
  1397  0213                     	;# 
  1398  0213                     	;# 
  1399  0214                     	;# 
  1400  0214                     	;# 
  1401  0215                     	;# 
  1402  0215                     	;# 
  1403  0215                     	;# 
  1404  0216                     	;# 
  1405  0216                     	;# 
  1406  0217                     	;# 
  1407  0217                     	;# 
  1408  0391                     	;# 
  1409  0392                     	;# 
  1410  0393                     	;# 
  1411  0394                     	;# 
  1412  0395                     	;# 
  1413  0396                     	;# 
  1414  0611                     	;# 
  1415  0612                     	;# 
  1416  0613                     	;# 
  1417  0613                     	;# 
  1418  0614                     	;# 
  1419  0615                     	;# 
  1420  0616                     	;# 
  1421  0616                     	;# 
  1422  0711                     	;# 
  1423  0711                     	;# 
  1424  0711                     	;# 
  1425  0712                     	;# 
  1426  0712                     	;# 
  1427  0713                     	;# 
  1428  0713                     	;# 
  1429  0713                     	;# 
  1430  0714                     	;# 
  1431  0714                     	;# 
  1432  0714                     	;# 
  1433  0715                     	;# 
  1434  0715                     	;# 
  1435  0716                     	;# 
  1436  0716                     	;# 
  1437  0716                     	;# 
  1438  0716                     	;# 
  1439  0717                     	;# 
  1440  0717                     	;# 
  1441  0717                     	;# 
  1442  0717                     	;# 
  1443  0718                     	;# 
  1444  0718                     	;# 
  1445  0718                     	;# 
  1446  0719                     	;# 
  1447  0719                     	;# 
  1448  0719                     	;# 
  1449  0719                     	;# 
  1450  071A                     	;# 
  1451  071A                     	;# 
  1452  071A                     	;# 
  1453  071A                     	;# 
  1454  071A                     	;# 
  1455  071B                     	;# 
  1456  071B                     	;# 
  1457  071C                     	;# 
  1458  071C                     	;# 
  1459  071C                     	;# 
  1460  071C                     	;# 
  1461  071C                     	;# 
  1462  071D                     	;# 
  1463  071D                     	;# 
  1464  071E                     	;# 
  1465  071E                     	;# 
  1466  0791                     	;# 
  1467  0791                     	;# 
  1468  0793                     	;# 
  1469  0793                     	;# 
  1470  0794                     	;# 
  1471  0794                     	;# 
  1472  0796                     	;# 
  1473  0796                     	;# 
  1474  0796                     	;# 
  1475  0797                     	;# 
  1476  0797                     	;# 
  1477  0797                     	;# 
  1478  0798                     	;# 
  1479  0798                     	;# 
  1480  0799                     	;# 
  1481  0799                     	;# 
  1482  0799                     	;# 
  1483  079A                     	;# 
  1484  079A                     	;# 
  1485  079A                     	;# 
  1486  079B                     	;# 
  1487  079C                     	;# 
  1488  079C                     	;# 
  1489  079C                     	;# 
  1490  079D                     	;# 
  1491  079E                     	;# 
  1492  079E                     	;# 
  1493  0F8C                     	;# 
  1494  0F8D                     	;# 
  1495  0F91                     	;# 
  1496  0F96                     	;# 
  1497  0F97                     	;# 
  1498  0F9C                     	;# 
  1499  0F9D                     	;# 
  1500  0F9E                     	;# 
  1501  0FE3                     	;# 
  1502  0FE4                     	;# 
  1503  0FE5                     	;# 
  1504  0FE6                     	;# 
  1505  0FE7                     	;# 
  1506  0FE8                     	;# 
  1507  0FE9                     	;# 
  1508  0FEA                     	;# 
  1509  0FEB                     	;# 
  1510  0FED                     	;# 
  1511  0FEE                     	;# 
  1512  0FEF                     	;# 
  1513  0000                     	;# 
  1514  0001                     	;# 
  1515  0002                     	;# 
  1516  0003                     	;# 
  1517  0004                     	;# 
  1518  0005                     	;# 
  1519  0006                     	;# 
  1520  0007                     	;# 
  1521  0008                     	;# 
  1522  0009                     	;# 
  1523  000A                     	;# 
  1524  000B                     	;# 
  1525  000C                     	;# 
  1526  000D                     	;# 
  1527  000E                     	;# 
  1528  0011                     	;# 
  1529  0012                     	;# 
  1530  0015                     	;# 
  1531  0016                     	;# 
  1532  0016                     	;# 
  1533  0017                     	;# 
  1534  0018                     	;# 
  1535  0019                     	;# 
  1536  001A                     	;# 
  1537  001B                     	;# 
  1538  001C                     	;# 
  1539  008C                     	;# 
  1540  008D                     	;# 
  1541  008E                     	;# 
  1542  0091                     	;# 
  1543  0092                     	;# 
  1544  0095                     	;# 
  1545  0096                     	;# 
  1546  0097                     	;# 
  1547  0099                     	;# 
  1548  009A                     	;# 
  1549  009B                     	;# 
  1550  009B                     	;# 
  1551  009C                     	;# 
  1552  009D                     	;# 
  1553  009E                     	;# 
  1554  009F                     	;# 
  1555  010C                     	;# 
  1556  010D                     	;# 
  1557  010E                     	;# 
  1558  0116                     	;# 
  1559  0117                     	;# 
  1560  011D                     	;# 
  1561  018C                     	;# 
  1562  018D                     	;# 
  1563  018E                     	;# 
  1564  0191                     	;# 
  1565  0191                     	;# 
  1566  0192                     	;# 
  1567  0193                     	;# 
  1568  0193                     	;# 
  1569  0194                     	;# 
  1570  0195                     	;# 
  1571  0196                     	;# 
  1572  0199                     	;# 
  1573  019A                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019C                     	;# 
  1577  019D                     	;# 
  1578  019E                     	;# 
  1579  019F                     	;# 
  1580  020C                     	;# 
  1581  020D                     	;# 
  1582  0211                     	;# 
  1583  0211                     	;# 
  1584  0212                     	;# 
  1585  0212                     	;# 
  1586  0213                     	;# 
  1587  0213                     	;# 
  1588  0214                     	;# 
  1589  0214                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0216                     	;# 
  1594  0216                     	;# 
  1595  0217                     	;# 
  1596  0217                     	;# 
  1597  0391                     	;# 
  1598  0392                     	;# 
  1599  0393                     	;# 
  1600  0394                     	;# 
  1601  0395                     	;# 
  1602  0396                     	;# 
  1603  0611                     	;# 
  1604  0612                     	;# 
  1605  0613                     	;# 
  1606  0613                     	;# 
  1607  0614                     	;# 
  1608  0615                     	;# 
  1609  0616                     	;# 
  1610  0616                     	;# 
  1611  0711                     	;# 
  1612  0711                     	;# 
  1613  0711                     	;# 
  1614  0712                     	;# 
  1615  0712                     	;# 
  1616  0713                     	;# 
  1617  0713                     	;# 
  1618  0713                     	;# 
  1619  0714                     	;# 
  1620  0714                     	;# 
  1621  0714                     	;# 
  1622  0715                     	;# 
  1623  0715                     	;# 
  1624  0716                     	;# 
  1625  0716                     	;# 
  1626  0716                     	;# 
  1627  0716                     	;# 
  1628  0717                     	;# 
  1629  0717                     	;# 
  1630  0717                     	;# 
  1631  0717                     	;# 
  1632  0718                     	;# 
  1633  0718                     	;# 
  1634  0718                     	;# 
  1635  0719                     	;# 
  1636  0719                     	;# 
  1637  0719                     	;# 
  1638  0719                     	;# 
  1639  071A                     	;# 
  1640  071A                     	;# 
  1641  071A                     	;# 
  1642  071A                     	;# 
  1643  071A                     	;# 
  1644  071B                     	;# 
  1645  071B                     	;# 
  1646  071C                     	;# 
  1647  071C                     	;# 
  1648  071C                     	;# 
  1649  071C                     	;# 
  1650  071C                     	;# 
  1651  071D                     	;# 
  1652  071D                     	;# 
  1653  071E                     	;# 
  1654  071E                     	;# 
  1655  0791                     	;# 
  1656  0791                     	;# 
  1657  0793                     	;# 
  1658  0793                     	;# 
  1659  0794                     	;# 
  1660  0794                     	;# 
  1661  0796                     	;# 
  1662  0796                     	;# 
  1663  0796                     	;# 
  1664  0797                     	;# 
  1665  0797                     	;# 
  1666  0797                     	;# 
  1667  0798                     	;# 
  1668  0798                     	;# 
  1669  0799                     	;# 
  1670  0799                     	;# 
  1671  0799                     	;# 
  1672  079A                     	;# 
  1673  079A                     	;# 
  1674  079A                     	;# 
  1675  079B                     	;# 
  1676  079C                     	;# 
  1677  079C                     	;# 
  1678  079C                     	;# 
  1679  079D                     	;# 
  1680  079E                     	;# 
  1681  079E                     	;# 
  1682  0F8C                     	;# 
  1683  0F8D                     	;# 
  1684  0F91                     	;# 
  1685  0F96                     	;# 
  1686  0F97                     	;# 
  1687  0F9C                     	;# 
  1688  0F9D                     	;# 
  1689  0F9E                     	;# 
  1690  0FE3                     	;# 
  1691  0FE4                     	;# 
  1692  0FE5                     	;# 
  1693  0FE6                     	;# 
  1694  0FE7                     	;# 
  1695  0FE8                     	;# 
  1696  0FE9                     	;# 
  1697  0FEA                     	;# 
  1698  0FEB                     	;# 
  1699  0FED                     	;# 
  1700  0FEE                     	;# 
  1701  0FEF                     	;# 
  1702  0000                     	;# 
  1703  0001                     	;# 
  1704  0002                     	;# 
  1705  0003                     	;# 
  1706  0004                     	;# 
  1707  0005                     	;# 
  1708  0006                     	;# 
  1709  0007                     	;# 
  1710  0008                     	;# 
  1711  0009                     	;# 
  1712  000A                     	;# 
  1713  000B                     	;# 
  1714  000C                     	;# 
  1715  000D                     	;# 
  1716  000E                     	;# 
  1717  0011                     	;# 
  1718  0012                     	;# 
  1719  0015                     	;# 
  1720  0016                     	;# 
  1721  0016                     	;# 
  1722  0017                     	;# 
  1723  0018                     	;# 
  1724  0019                     	;# 
  1725  001A                     	;# 
  1726  001B                     	;# 
  1727  001C                     	;# 
  1728  008C                     	;# 
  1729  008D                     	;# 
  1730  008E                     	;# 
  1731  0091                     	;# 
  1732  0092                     	;# 
  1733  0095                     	;# 
  1734  0096                     	;# 
  1735  0097                     	;# 
  1736  0099                     	;# 
  1737  009A                     	;# 
  1738  009B                     	;# 
  1739  009B                     	;# 
  1740  009C                     	;# 
  1741  009D                     	;# 
  1742  009E                     	;# 
  1743  009F                     	;# 
  1744  010C                     	;# 
  1745  010D                     	;# 
  1746  010E                     	;# 
  1747  0116                     	;# 
  1748  0117                     	;# 
  1749  011D                     	;# 
  1750  018C                     	;# 
  1751  018D                     	;# 
  1752  018E                     	;# 
  1753  0191                     	;# 
  1754  0191                     	;# 
  1755  0192                     	;# 
  1756  0193                     	;# 
  1757  0193                     	;# 
  1758  0194                     	;# 
  1759  0195                     	;# 
  1760  0196                     	;# 
  1761  0199                     	;# 
  1762  019A                     	;# 
  1763  019B                     	;# 
  1764  019B                     	;# 
  1765  019C                     	;# 
  1766  019D                     	;# 
  1767  019E                     	;# 
  1768  019F                     	;# 
  1769  020C                     	;# 
  1770  020D                     	;# 
  1771  0211                     	;# 
  1772  0211                     	;# 
  1773  0212                     	;# 
  1774  0212                     	;# 
  1775  0213                     	;# 
  1776  0213                     	;# 
  1777  0214                     	;# 
  1778  0214                     	;# 
  1779  0215                     	;# 
  1780  0215                     	;# 
  1781  0215                     	;# 
  1782  0216                     	;# 
  1783  0216                     	;# 
  1784  0217                     	;# 
  1785  0217                     	;# 
  1786  0391                     	;# 
  1787  0392                     	;# 
  1788  0393                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  0611                     	;# 
  1793  0612                     	;# 
  1794  0613                     	;# 
  1795  0613                     	;# 
  1796  0614                     	;# 
  1797  0615                     	;# 
  1798  0616                     	;# 
  1799  0616                     	;# 
  1800  0711                     	;# 
  1801  0711                     	;# 
  1802  0711                     	;# 
  1803  0712                     	;# 
  1804  0712                     	;# 
  1805  0713                     	;# 
  1806  0713                     	;# 
  1807  0713                     	;# 
  1808  0714                     	;# 
  1809  0714                     	;# 
  1810  0714                     	;# 
  1811  0715                     	;# 
  1812  0715                     	;# 
  1813  0716                     	;# 
  1814  0716                     	;# 
  1815  0716                     	;# 
  1816  0716                     	;# 
  1817  0717                     	;# 
  1818  0717                     	;# 
  1819  0717                     	;# 
  1820  0717                     	;# 
  1821  0718                     	;# 
  1822  0718                     	;# 
  1823  0718                     	;# 
  1824  0719                     	;# 
  1825  0719                     	;# 
  1826  0719                     	;# 
  1827  0719                     	;# 
  1828  071A                     	;# 
  1829  071A                     	;# 
  1830  071A                     	;# 
  1831  071A                     	;# 
  1832  071A                     	;# 
  1833  071B                     	;# 
  1834  071B                     	;# 
  1835  071C                     	;# 
  1836  071C                     	;# 
  1837  071C                     	;# 
  1838  071C                     	;# 
  1839  071C                     	;# 
  1840  071D                     	;# 
  1841  071D                     	;# 
  1842  071E                     	;# 
  1843  071E                     	;# 
  1844  0791                     	;# 
  1845  0791                     	;# 
  1846  0793                     	;# 
  1847  0793                     	;# 
  1848  0794                     	;# 
  1849  0794                     	;# 
  1850  0796                     	;# 
  1851  0796                     	;# 
  1852  0796                     	;# 
  1853  0797                     	;# 
  1854  0797                     	;# 
  1855  0797                     	;# 
  1856  0798                     	;# 
  1857  0798                     	;# 
  1858  0799                     	;# 
  1859  0799                     	;# 
  1860  0799                     	;# 
  1861  079A                     	;# 
  1862  079A                     	;# 
  1863  079A                     	;# 
  1864  079B                     	;# 
  1865  079C                     	;# 
  1866  079C                     	;# 
  1867  079C                     	;# 
  1868  079D                     	;# 
  1869  079E                     	;# 
  1870  079E                     	;# 
  1871  0F8C                     	;# 
  1872  0F8D                     	;# 
  1873  0F91                     	;# 
  1874  0F96                     	;# 
  1875  0F97                     	;# 
  1876  0F9C                     	;# 
  1877  0F9D                     	;# 
  1878  0F9E                     	;# 
  1879  0FE3                     	;# 
  1880  0FE4                     	;# 
  1881  0FE5                     	;# 
  1882  0FE6                     	;# 
  1883  0FE7                     	;# 
  1884  0FE8                     	;# 
  1885  0FE9                     	;# 
  1886  0FEA                     	;# 
  1887  0FEB                     	;# 
  1888  0FED                     	;# 
  1889  0FEE                     	;# 
  1890  0FEF                     	;# 
  1891  0000                     	;# 
  1892  0001                     	;# 
  1893  0002                     	;# 
  1894  0003                     	;# 
  1895  0004                     	;# 
  1896  0005                     	;# 
  1897  0006                     	;# 
  1898  0007                     	;# 
  1899  0008                     	;# 
  1900  0009                     	;# 
  1901  000A                     	;# 
  1902  000B                     	;# 
  1903  000C                     	;# 
  1904  000D                     	;# 
  1905  000E                     	;# 
  1906  0011                     	;# 
  1907  0012                     	;# 
  1908  0015                     	;# 
  1909  0016                     	;# 
  1910  0016                     	;# 
  1911  0017                     	;# 
  1912  0018                     	;# 
  1913  0019                     	;# 
  1914  001A                     	;# 
  1915  001B                     	;# 
  1916  001C                     	;# 
  1917  008C                     	;# 
  1918  008D                     	;# 
  1919  008E                     	;# 
  1920  0091                     	;# 
  1921  0092                     	;# 
  1922  0095                     	;# 
  1923  0096                     	;# 
  1924  0097                     	;# 
  1925  0099                     	;# 
  1926  009A                     	;# 
  1927  009B                     	;# 
  1928  009B                     	;# 
  1929  009C                     	;# 
  1930  009D                     	;# 
  1931  009E                     	;# 
  1932  009F                     	;# 
  1933  010C                     	;# 
  1934  010D                     	;# 
  1935  010E                     	;# 
  1936  0116                     	;# 
  1937  0117                     	;# 
  1938  011D                     	;# 
  1939  018C                     	;# 
  1940  018D                     	;# 
  1941  018E                     	;# 
  1942  0191                     	;# 
  1943  0191                     	;# 
  1944  0192                     	;# 
  1945  0193                     	;# 
  1946  0193                     	;# 
  1947  0194                     	;# 
  1948  0195                     	;# 
  1949  0196                     	;# 
  1950  0199                     	;# 
  1951  019A                     	;# 
  1952  019B                     	;# 
  1953  019B                     	;# 
  1954  019C                     	;# 
  1955  019D                     	;# 
  1956  019E                     	;# 
  1957  019F                     	;# 
  1958  020C                     	;# 
  1959  020D                     	;# 
  1960  0211                     	;# 
  1961  0211                     	;# 
  1962  0212                     	;# 
  1963  0212                     	;# 
  1964  0213                     	;# 
  1965  0213                     	;# 
  1966  0214                     	;# 
  1967  0214                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0215                     	;# 
  1971  0216                     	;# 
  1972  0216                     	;# 
  1973  0217                     	;# 
  1974  0217                     	;# 
  1975  0391                     	;# 
  1976  0392                     	;# 
  1977  0393                     	;# 
  1978  0394                     	;# 
  1979  0395                     	;# 
  1980  0396                     	;# 
  1981  0611                     	;# 
  1982  0612                     	;# 
  1983  0613                     	;# 
  1984  0613                     	;# 
  1985  0614                     	;# 
  1986  0615                     	;# 
  1987  0616                     	;# 
  1988  0616                     	;# 
  1989  0711                     	;# 
  1990  0711                     	;# 
  1991  0711                     	;# 
  1992  0712                     	;# 
  1993  0712                     	;# 
  1994  0713                     	;# 
  1995  0713                     	;# 
  1996  0713                     	;# 
  1997  0714                     	;# 
  1998  0714                     	;# 
  1999  0714                     	;# 
  2000  0715                     	;# 
  2001  0715                     	;# 
  2002  0716                     	;# 
  2003  0716                     	;# 
  2004  0716                     	;# 
  2005  0716                     	;# 
  2006  0717                     	;# 
  2007  0717                     	;# 
  2008  0717                     	;# 
  2009  0717                     	;# 
  2010  0718                     	;# 
  2011  0718                     	;# 
  2012  0718                     	;# 
  2013  0719                     	;# 
  2014  0719                     	;# 
  2015  0719                     	;# 
  2016  0719                     	;# 
  2017  071A                     	;# 
  2018  071A                     	;# 
  2019  071A                     	;# 
  2020  071A                     	;# 
  2021  071A                     	;# 
  2022  071B                     	;# 
  2023  071B                     	;# 
  2024  071C                     	;# 
  2025  071C                     	;# 
  2026  071C                     	;# 
  2027  071C                     	;# 
  2028  071C                     	;# 
  2029  071D                     	;# 
  2030  071D                     	;# 
  2031  071E                     	;# 
  2032  071E                     	;# 
  2033  0791                     	;# 
  2034  0791                     	;# 
  2035  0793                     	;# 
  2036  0793                     	;# 
  2037  0794                     	;# 
  2038  0794                     	;# 
  2039  0796                     	;# 
  2040  0796                     	;# 
  2041  0796                     	;# 
  2042  0797                     	;# 
  2043  0797                     	;# 
  2044  0797                     	;# 
  2045  0798                     	;# 
  2046  0798                     	;# 
  2047  0799                     	;# 
  2048  0799                     	;# 
  2049  0799                     	;# 
  2050  079A                     	;# 
  2051  079A                     	;# 
  2052  079A                     	;# 
  2053  079B                     	;# 
  2054  079C                     	;# 
  2055  079C                     	;# 
  2056  079C                     	;# 
  2057  079D                     	;# 
  2058  079E                     	;# 
  2059  079E                     	;# 
  2060  0F8C                     	;# 
  2061  0F8D                     	;# 
  2062  0F91                     	;# 
  2063  0F96                     	;# 
  2064  0F97                     	;# 
  2065  0F9C                     	;# 
  2066  0F9D                     	;# 
  2067  0F9E                     	;# 
  2068  0FE3                     	;# 
  2069  0FE4                     	;# 
  2070  0FE5                     	;# 
  2071  0FE6                     	;# 
  2072  0FE7                     	;# 
  2073  0FE8                     	;# 
  2074  0FE9                     	;# 
  2075  0FEA                     	;# 
  2076  0FEB                     	;# 
  2077  0FED                     	;# 
  2078  0FEE                     	;# 
  2079  0FEF                     	;# 
  2080  0000                     	;# 
  2081  0001                     	;# 
  2082  0002                     	;# 
  2083  0003                     	;# 
  2084  0004                     	;# 
  2085  0005                     	;# 
  2086  0006                     	;# 
  2087  0007                     	;# 
  2088  0008                     	;# 
  2089  0009                     	;# 
  2090  000A                     	;# 
  2091  000B                     	;# 
  2092  000C                     	;# 
  2093  000D                     	;# 
  2094  000E                     	;# 
  2095  0011                     	;# 
  2096  0012                     	;# 
  2097  0015                     	;# 
  2098  0016                     	;# 
  2099  0016                     	;# 
  2100  0017                     	;# 
  2101  0018                     	;# 
  2102  0019                     	;# 
  2103  001A                     	;# 
  2104  001B                     	;# 
  2105  001C                     	;# 
  2106  008C                     	;# 
  2107  008D                     	;# 
  2108  008E                     	;# 
  2109  0091                     	;# 
  2110  0092                     	;# 
  2111  0095                     	;# 
  2112  0096                     	;# 
  2113  0097                     	;# 
  2114  0099                     	;# 
  2115  009A                     	;# 
  2116  009B                     	;# 
  2117  009B                     	;# 
  2118  009C                     	;# 
  2119  009D                     	;# 
  2120  009E                     	;# 
  2121  009F                     	;# 
  2122  010C                     	;# 
  2123  010D                     	;# 
  2124  010E                     	;# 
  2125  0116                     	;# 
  2126  0117                     	;# 
  2127  011D                     	;# 
  2128  018C                     	;# 
  2129  018D                     	;# 
  2130  018E                     	;# 
  2131  0191                     	;# 
  2132  0191                     	;# 
  2133  0192                     	;# 
  2134  0193                     	;# 
  2135  0193                     	;# 
  2136  0194                     	;# 
  2137  0195                     	;# 
  2138  0196                     	;# 
  2139  0199                     	;# 
  2140  019A                     	;# 
  2141  019B                     	;# 
  2142  019B                     	;# 
  2143  019C                     	;# 
  2144  019D                     	;# 
  2145  019E                     	;# 
  2146  019F                     	;# 
  2147  020C                     	;# 
  2148  020D                     	;# 
  2149  0211                     	;# 
  2150  0211                     	;# 
  2151  0212                     	;# 
  2152  0212                     	;# 
  2153  0213                     	;# 
  2154  0213                     	;# 
  2155  0214                     	;# 
  2156  0214                     	;# 
  2157  0215                     	;# 
  2158  0215                     	;# 
  2159  0215                     	;# 
  2160  0216                     	;# 
  2161  0216                     	;# 
  2162  0217                     	;# 
  2163  0217                     	;# 
  2164  0391                     	;# 
  2165  0392                     	;# 
  2166  0393                     	;# 
  2167  0394                     	;# 
  2168  0395                     	;# 
  2169  0396                     	;# 
  2170  0611                     	;# 
  2171  0612                     	;# 
  2172  0613                     	;# 
  2173  0613                     	;# 
  2174  0614                     	;# 
  2175  0615                     	;# 
  2176  0616                     	;# 
  2177  0616                     	;# 
  2178  0711                     	;# 
  2179  0711                     	;# 
  2180  0711                     	;# 
  2181  0712                     	;# 
  2182  0712                     	;# 
  2183  0713                     	;# 
  2184  0713                     	;# 
  2185  0713                     	;# 
  2186  0714                     	;# 
  2187  0714                     	;# 
  2188  0714                     	;# 
  2189  0715                     	;# 
  2190  0715                     	;# 
  2191  0716                     	;# 
  2192  0716                     	;# 
  2193  0716                     	;# 
  2194  0716                     	;# 
  2195  0717                     	;# 
  2196  0717                     	;# 
  2197  0717                     	;# 
  2198  0717                     	;# 
  2199  0718                     	;# 
  2200  0718                     	;# 
  2201  0718                     	;# 
  2202  0719                     	;# 
  2203  0719                     	;# 
  2204  0719                     	;# 
  2205  0719                     	;# 
  2206  071A                     	;# 
  2207  071A                     	;# 
  2208  071A                     	;# 
  2209  071A                     	;# 
  2210  071A                     	;# 
  2211  071B                     	;# 
  2212  071B                     	;# 
  2213  071C                     	;# 
  2214  071C                     	;# 
  2215  071C                     	;# 
  2216  071C                     	;# 
  2217  071C                     	;# 
  2218  071D                     	;# 
  2219  071D                     	;# 
  2220  071E                     	;# 
  2221  071E                     	;# 
  2222  0791                     	;# 
  2223  0791                     	;# 
  2224  0793                     	;# 
  2225  0793                     	;# 
  2226  0794                     	;# 
  2227  0794                     	;# 
  2228  0796                     	;# 
  2229  0796                     	;# 
  2230  0796                     	;# 
  2231  0797                     	;# 
  2232  0797                     	;# 
  2233  0797                     	;# 
  2234  0798                     	;# 
  2235  0798                     	;# 
  2236  0799                     	;# 
  2237  0799                     	;# 
  2238  0799                     	;# 
  2239  079A                     	;# 
  2240  079A                     	;# 
  2241  079A                     	;# 
  2242  079B                     	;# 
  2243  079C                     	;# 
  2244  079C                     	;# 
  2245  079C                     	;# 
  2246  079D                     	;# 
  2247  079E                     	;# 
  2248  079E                     	;# 
  2249  0F8C                     	;# 
  2250  0F8D                     	;# 
  2251  0F91                     	;# 
  2252  0F96                     	;# 
  2253  0F97                     	;# 
  2254  0F9C                     	;# 
  2255  0F9D                     	;# 
  2256  0F9E                     	;# 
  2257  0FE3                     	;# 
  2258  0FE4                     	;# 
  2259  0FE5                     	;# 
  2260  0FE6                     	;# 
  2261  0FE7                     	;# 
  2262  0FE8                     	;# 
  2263  0FE9                     	;# 
  2264  0FEA                     	;# 
  2265  0FEB                     	;# 
  2266  0FED                     	;# 
  2267  0FEE                     	;# 
  2268  0FEF                     	;# 
  2269  0000                     	;# 
  2270  0001                     	;# 
  2271  0002                     	;# 
  2272  0003                     	;# 
  2273  0004                     	;# 
  2274  0005                     	;# 
  2275  0006                     	;# 
  2276  0007                     	;# 
  2277  0008                     	;# 
  2278  0009                     	;# 
  2279  000A                     	;# 
  2280  000B                     	;# 
  2281  000C                     	;# 
  2282  000D                     	;# 
  2283  000E                     	;# 
  2284  0011                     	;# 
  2285  0012                     	;# 
  2286  0015                     	;# 
  2287  0016                     	;# 
  2288  0016                     	;# 
  2289  0017                     	;# 
  2290  0018                     	;# 
  2291  0019                     	;# 
  2292  001A                     	;# 
  2293  001B                     	;# 
  2294  001C                     	;# 
  2295  008C                     	;# 
  2296  008D                     	;# 
  2297  008E                     	;# 
  2298  0091                     	;# 
  2299  0092                     	;# 
  2300  0095                     	;# 
  2301  0096                     	;# 
  2302  0097                     	;# 
  2303  0099                     	;# 
  2304  009A                     	;# 
  2305  009B                     	;# 
  2306  009B                     	;# 
  2307  009C                     	;# 
  2308  009D                     	;# 
  2309  009E                     	;# 
  2310  009F                     	;# 
  2311  010C                     	;# 
  2312  010D                     	;# 
  2313  010E                     	;# 
  2314  0116                     	;# 
  2315  0117                     	;# 
  2316  011D                     	;# 
  2317  018C                     	;# 
  2318  018D                     	;# 
  2319  018E                     	;# 
  2320  0191                     	;# 
  2321  0191                     	;# 
  2322  0192                     	;# 
  2323  0193                     	;# 
  2324  0193                     	;# 
  2325  0194                     	;# 
  2326  0195                     	;# 
  2327  0196                     	;# 
  2328  0199                     	;# 
  2329  019A                     	;# 
  2330  019B                     	;# 
  2331  019B                     	;# 
  2332  019C                     	;# 
  2333  019D                     	;# 
  2334  019E                     	;# 
  2335  019F                     	;# 
  2336  020C                     	;# 
  2337  020D                     	;# 
  2338  0211                     	;# 
  2339  0211                     	;# 
  2340  0212                     	;# 
  2341  0212                     	;# 
  2342  0213                     	;# 
  2343  0213                     	;# 
  2344  0214                     	;# 
  2345  0214                     	;# 
  2346  0215                     	;# 
  2347  0215                     	;# 
  2348  0215                     	;# 
  2349  0216                     	;# 
  2350  0216                     	;# 
  2351  0217                     	;# 
  2352  0217                     	;# 
  2353  0391                     	;# 
  2354  0392                     	;# 
  2355  0393                     	;# 
  2356  0394                     	;# 
  2357  0395                     	;# 
  2358  0396                     	;# 
  2359  0611                     	;# 
  2360  0612                     	;# 
  2361  0613                     	;# 
  2362  0613                     	;# 
  2363  0614                     	;# 
  2364  0615                     	;# 
  2365  0616                     	;# 
  2366  0616                     	;# 
  2367  0711                     	;# 
  2368  0711                     	;# 
  2369  0711                     	;# 
  2370  0712                     	;# 
  2371  0712                     	;# 
  2372  0713                     	;# 
  2373  0713                     	;# 
  2374  0713                     	;# 
  2375  0714                     	;# 
  2376  0714                     	;# 
  2377  0714                     	;# 
  2378  0715                     	;# 
  2379  0715                     	;# 
  2380  0716                     	;# 
  2381  0716                     	;# 
  2382  0716                     	;# 
  2383  0716                     	;# 
  2384  0717                     	;# 
  2385  0717                     	;# 
  2386  0717                     	;# 
  2387  0717                     	;# 
  2388  0718                     	;# 
  2389  0718                     	;# 
  2390  0718                     	;# 
  2391  0719                     	;# 
  2392  0719                     	;# 
  2393  0719                     	;# 
  2394  0719                     	;# 
  2395  071A                     	;# 
  2396  071A                     	;# 
  2397  071A                     	;# 
  2398  071A                     	;# 
  2399  071A                     	;# 
  2400  071B                     	;# 
  2401  071B                     	;# 
  2402  071C                     	;# 
  2403  071C                     	;# 
  2404  071C                     	;# 
  2405  071C                     	;# 
  2406  071C                     	;# 
  2407  071D                     	;# 
  2408  071D                     	;# 
  2409  071E                     	;# 
  2410  071E                     	;# 
  2411  0791                     	;# 
  2412  0791                     	;# 
  2413  0793                     	;# 
  2414  0793                     	;# 
  2415  0794                     	;# 
  2416  0794                     	;# 
  2417  0796                     	;# 
  2418  0796                     	;# 
  2419  0796                     	;# 
  2420  0797                     	;# 
  2421  0797                     	;# 
  2422  0797                     	;# 
  2423  0798                     	;# 
  2424  0798                     	;# 
  2425  0799                     	;# 
  2426  0799                     	;# 
  2427  0799                     	;# 
  2428  079A                     	;# 
  2429  079A                     	;# 
  2430  079A                     	;# 
  2431  079B                     	;# 
  2432  079C                     	;# 
  2433  079C                     	;# 
  2434  079C                     	;# 
  2435  079D                     	;# 
  2436  079E                     	;# 
  2437  079E                     	;# 
  2438  0F8C                     	;# 
  2439  0F8D                     	;# 
  2440  0F91                     	;# 
  2441  0F96                     	;# 
  2442  0F97                     	;# 
  2443  0F9C                     	;# 
  2444  0F9D                     	;# 
  2445  0F9E                     	;# 
  2446  0FE3                     	;# 
  2447  0FE4                     	;# 
  2448  0FE5                     	;# 
  2449  0FE6                     	;# 
  2450  0FE7                     	;# 
  2451  0FE8                     	;# 
  2452  0FE9                     	;# 
  2453  0FEA                     	;# 
  2454  0FEB                     	;# 
  2455  0FED                     	;# 
  2456  0FEE                     	;# 
  2457  0FEF                     	;# 
  2458                           
  2459                           	psect	idataBANK2
  2460  1A1A                     __pidataBANK2:	
  2461                           
  2462                           ;initializer for _callback_notPressed
  2463  1A1A  3400               	retlw	low _Button_DefaultCallback
  2464  1A1B  3408               	retlw	high _Button_DefaultCallback
  2465                           
  2466                           ;initializer for _callback_pressed
  2467  1A1C  3400               	retlw	low _Button_DefaultCallback
  2468  1A1D  3408               	retlw	high _Button_DefaultCallback
  2469                           
  2470                           ;initializer for _callback_sampled
  2471  1A1E  3401               	retlw	low _Sensor_DefaultCallback
  2472  1A1F  3408               	retlw	high _Sensor_DefaultCallback
  2473                           
  2474                           ;initializer for _sample_period
  2475  1A20  34AE               	retlw	174
  2476                           
  2477                           	psect	idataBANK3
  2478  1DD4                     __pidataBANK3:	
  2479                           
  2480                           ;initializer for _Button_StateMachine
  2481  1DD4  3402               	retlw	low _Button_State_Initializing
  2482  1DD5  3414               	retlw	high _Button_State_Initializing
  2483  1DD6  3402               	retlw	low _Button_State_NotPressed
  2484  1DD7  3408               	retlw	high _Button_State_NotPressed
  2485  1DD8  3464               	retlw	low _Button_State_Pressed
  2486  1DD9  3414               	retlw	high _Button_State_Pressed
  2487                           
  2488                           ;initializer for _mtouch_sensor
  2489  1DDA  3400               	retlw	0
  2490  1DDB  3435               	retlw	53
  2491  1DDC  3430               	retlw	48
  2492  1DDD  3410               	retlw	16
  2493  1DDE  3420               	retlw	32
  2494  1DDF  3400               	retlw	0
  2495  1DE0  3400               	retlw	0
  2496  1DE1  3400               	retlw	0
  2497  1DE2  3400               	retlw	0
  2498  1DE3  3401               	retlw	1
  2499  1DE4  345D               	retlw	93
  2500  1DE5  3430               	retlw	48
  2501  1DE6  3410               	retlw	16
  2502  1DE7  3420               	retlw	32
  2503  1DE8  3400               	retlw	0
  2504  1DE9  3400               	retlw	0
  2505  1DEA  3400               	retlw	0
  2506  1DEB  3400               	retlw	0
  2507  1DEC  3402               	retlw	2
  2508  1DED  3469               	retlw	105
  2509  1DEE  3430               	retlw	48
  2510  1DEF  3410               	retlw	16
  2511  1DF0  3420               	retlw	32
  2512  1DF1  3400               	retlw	0
  2513  1DF2  3400               	retlw	0
  2514  1DF3  3400               	retlw	0
  2515  1DF4  3400               	retlw	0
  2516                           
  2517                           	psect	stringtext1
  2518  184D                     __pstringtext1:	
  2519  184D                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2520  184D  3400               	retlw	0
  2521  184E  340D               	retlw	13
  2522  184F  341C               	retlw	28
  2523  1850  341E               	retlw	30
  2524  1851  3417               	retlw	23
  2525  1852                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2526                           
  2527                           	psect	stringtext2
  2528  1852                     __pstringtext2:	
  2529  1852                     _sensor_scan_group:	
  2530  1852  34A6               	retlw	low (_mtouch_sensor| (0+256))
  2531  1853  34AF               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2532  1854  3400               	retlw	0
  2533  1855  34B8               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2534  1856                     __end_of_sensor_scan_group:	
  2535                           
  2536                           	psect	stringtext3
  2537  1800                     __pstringtext3:	
  2538  1800                     _mtouch_button_init:	
  2539  1800  3400               	retlw	0
  2540  1801  3400               	retlw	0
  2541  1802  3400               	retlw	0
  2542  1803  3400               	retlw	0
  2543  1804  3400               	retlw	0
  2544  1805  3400               	retlw	0
  2545  1806  3400               	retlw	0
  2546  1807  3400               	retlw	0
  2547  1808  3400               	retlw	0
  2548  1809  3400               	retlw	0
  2549  180A  3400               	retlw	0
  2550  180B  3400               	retlw	0
  2551  180C  3400               	retlw	0
  2552  180D  3400               	retlw	0
  2553  180E  3464               	retlw	100
  2554  180F  3401               	retlw	1
  2555  1810  3401               	retlw	1
  2556  1811  3401               	retlw	1
  2557  1812  3400               	retlw	0
  2558  1813  3400               	retlw	0
  2559  1814  3400               	retlw	0
  2560  1815  3400               	retlw	0
  2561  1816  3400               	retlw	0
  2562  1817  3400               	retlw	0
  2563  1818  3400               	retlw	0
  2564  1819  3400               	retlw	0
  2565  181A  3400               	retlw	0
  2566  181B  3400               	retlw	0
  2567  181C  3400               	retlw	0
  2568  181D  3400               	retlw	0
  2569  181E  3464               	retlw	100
  2570  181F  3401               	retlw	1
  2571  1820  3402               	retlw	2
  2572  1821  3402               	retlw	2
  2573  1822  3400               	retlw	0
  2574  1823  3400               	retlw	0
  2575  1824  3400               	retlw	0
  2576  1825  3400               	retlw	0
  2577  1826  3400               	retlw	0
  2578  1827  3400               	retlw	0
  2579  1828  3400               	retlw	0
  2580  1829  3400               	retlw	0
  2581  182A  3400               	retlw	0
  2582  182B  3400               	retlw	0
  2583  182C  3400               	retlw	0
  2584  182D  3400               	retlw	0
  2585  182E  3464               	retlw	100
  2586  182F  3401               	retlw	1
  2587  1830                     __end_of_mtouch_button_init:	
  2588                           
  2589                           	psect	nvBANK2
  2590  015D                     __pnvBANK2:	
  2591  015D                     _TMR1_InterruptHandler:	
  2592  015D                     	ds	2
  2593  015F                     _timer1ReloadVal:	
  2594  015F                     	ds	2
  2595  0161                     _TMR0_InterruptHandler:	
  2596  0161                     	ds	2
  2597  0163                     _EUSART_RxDefaultInterruptHandler:	
  2598  0163                     	ds	2
  2599  0165                     _timer0ReloadVal:	
  2600  0165                     	ds	1
  2601                           
  2602                           	psect	nvBANK3
  2603  01D1                     __pnvBANK3:	
  2604  01D1                     _EUSART_ErrorHandler:	
  2605  01D1                     	ds	2
  2606  01D3                     _EUSART_OverrunErrorHandler:	
  2607  01D3                     	ds	2
  2608  01D5                     _EUSART_FramingErrorHandler:	
  2609  01D5                     	ds	2
  2610  0019                     _T1GCONbits	set	25
  2611  0018                     _T1CONbits	set	24
  2612  0018                     _T1CON	set	24
  2613  0016                     _TMR1L	set	22
  2614  0017                     _TMR1H	set	23
  2615  0019                     _T1GCON	set	25
  2616  0015                     _TMR0	set	21
  2617  001C                     _T2CON	set	28
  2618  001A                     _TMR2	set	26
  2619  001B                     _PR2	set	27
  2620  000B                     _INTCONbits	set	11
  2621  0012                     _PIR2bits	set	18
  2622  0011                     _PIR1bits	set	17
  2623  001C                     _T2CONbits	set	28
  2624  005F                     _GIE	set	95
  2625  0095                     _OPTION_REG	set	149
  2626  0095                     _OPTION_REGbits	set	149
  2627  008E                     _TRISC	set	142
  2628  008D                     _TRISB	set	141
  2629  008C                     _TRISA	set	140
  2630  0097                     _WDTCON	set	151
  2631  0099                     _OSCCON	set	153
  2632  0091                     _PIE1bits	set	145
  2633  010E                     _LATCbits	set	270
  2634  010D                     _LATBbits	set	269
  2635  010C                     _LATAbits	set	268
  2636  011D                     _APFCON	set	285
  2637  010E                     _LATC	set	270
  2638  010D                     _LATB	set	269
  2639  010C                     _LATA	set	268
  2640  0116                     _BORCON	set	278
  2641  011D                     _APFCONbits	set	285
  2642  018C                     _ANSELA	set	396
  2643  018D                     _ANSELB	set	397
  2644  018E                     _ANSELC	set	398
  2645  0199                     _RCREG	set	409
  2646  019D                     _RCSTAbits	set	413
  2647  019A                     _TXREG	set	410
  2648  019E                     _TXSTAbits	set	414
  2649  019C                     _SPBRGH	set	412
  2650  019B                     _SPBRGL	set	411
  2651  019E                     _TXSTA	set	414
  2652  019D                     _RCSTA	set	413
  2653  019F                     _BAUDCON	set	415
  2654  020C                     _WPUA	set	524
  2655  020D                     _WPUB	set	525
  2656  071A                     _AAD1RES0	set	1818
  2657  0711                     _AD1CON0bits	set	1809
  2658  0714                     _AAD1CON3	set	1812
  2659  0713                     _AD1CON2	set	1811
  2660  0717                     _AD1ACQCON	set	1815
  2661  0716                     _AD1PRECON	set	1814
  2662  0718                     _AAD1GRD	set	1816
  2663  0713                     _AAD1CON2	set	1811
  2664  0719                     _AAD1CAP	set	1817
  2665  0714                     _AD1CON3	set	1812
  2666  0712                     _ADCOMCON	set	1810
  2667  0711                     _AD1CON0	set	1809
  2668  079A                     _AAD2RES0	set	1946
  2669  0791                     _AD2CON0bits	set	1937
  2670  0797                     _AD2ACQCON	set	1943
  2671  0796                     _AD2PRECON	set	1942
  2672  0794                     _AAD2CON3	set	1940
  2673  0798                     _AAD2GRD	set	1944
  2674  0793                     _AD2CON2	set	1939
  2675  0794                     _AD2CON3	set	1940
  2676  0791                     _AD2CON0	set	1937
  2677                           
  2678                           	psect	stringtext4
  2679  1830                     __pstringtext4:	
  2680  1830                     STR_1:	
  2681  1830  3453               	retlw	83	;'S'
  2682  1831  344D               	retlw	77	;'M'
  2683  1832  3441               	retlw	65	;'A'
  2684  1833  3452               	retlw	82	;'R'
  2685  1834  3454               	retlw	84	;'T'
  2686  1835  3420               	retlw	32	;' '
  2687  1836  3443               	retlw	67	;'C'
  2688  1837  344F               	retlw	79	;'O'
  2689  1838  344E               	retlw	78	;'N'
  2690  1839  3446               	retlw	70	;'F'
  2691  183A  3449               	retlw	73	;'I'
  2692  183B  3447               	retlw	71	;'G'
  2693  183C  340A               	retlw	10
  2694  183D  3400               	retlw	0
  2695                           
  2696                           	psect	stringtext5
  2697  183E                     __pstringtext5:	
  2698  183E                     STR_3:	
  2699  183E  3450               	retlw	80	;'P'
  2700  183F  3449               	retlw	73	;'I'
  2701  1840  3443               	retlw	67	;'C'
  2702  1841  3453               	retlw	83	;'S'
  2703  1842  344D               	retlw	77	;'M'
  2704  1843  3441               	retlw	65	;'A'
  2705  1844  3452               	retlw	82	;'R'
  2706  1845  3454               	retlw	84	;'T'
  2707  1846  3400               	retlw	0
  2708                           
  2709                           	psect	stringtext6
  2710  1847                     __pstringtext6:	
  2711  1847                     STR_4:	
  2712  1847  3450               	retlw	80	;'P'
  2713  1848  3449               	retlw	73	;'I'
  2714  1849  3443               	retlw	67	;'C'
  2715  184A  3425               	retlw	37	;'%'
  2716  184B  3464               	retlw	100	;'d'
  2717  184C  3400               	retlw	0
  2718                           
  2719                           	psect	stringtext7
  2720  1856                     __pstringtext7:	
  2721  1856                     STR_2:	
  2722  1856  3425               	retlw	37	;'%'
  2723  1857  3463               	retlw	99	;'c'
  2724  1858  3400               	retlw	0
  2725                           
  2726                           	psect	stringtext8
  2727  0000                     __pstringtext8:	
  2728  1847                     
  2729                           ; #config settings
  2730  0000                     
  2731                           	psect	cinit
  2732  0028                     start_initialization:	
  2733  0028                     __initialization:	
  2734                           
  2735                           ; Initialize objects allocated to BANK2
  2736  0028  301A               	movlw	low __pidataBANK2
  2737  0029  0084               	movwf	4
  2738  002A  309A               	movlw	(high __pidataBANK2)| (0+128)
  2739  002B  0085               	movwf	5
  2740  002C  3066               	movlw	low __pdataBANK2
  2741  002D  0086               	movwf	6
  2742  002E  3001               	movlw	high __pdataBANK2
  2743  002F  0087               	movwf	7
  2744  0030  3007               	movlw	7
  2745  0031  319A  2214  3180   	fcall	init_ram
  2746                           
  2747                           ; Initialize objects allocated to BANK3
  2748  0034  30D4               	movlw	low __pidataBANK3
  2749  0035  0084               	movwf	4
  2750  0036  309D               	movlw	(high __pidataBANK3)| (0+128)
  2751  0037  0085               	movwf	5
  2752  0038  30A0               	movlw	low __pdataBANK3
  2753  0039  0086               	movwf	6
  2754  003A  3001               	movlw	high __pdataBANK3
  2755  003B  0087               	movwf	7
  2756  003C  3021               	movlw	33
  2757  003D  319A  2214  3180   	fcall	init_ram
  2758                           
  2759                           ; Clear objects allocated to BANK0
  2760  0040  01EE               	clrf	__pbssBANK0& (0+127)
  2761  0041  01EF               	clrf	(__pbssBANK0+1)& (0+127)
  2762                           
  2763                           ; Clear objects allocated to BANK2
  2764  0042  3020               	movlw	low __pbssBANK2
  2765  0043  0084               	movwf	4
  2766  0044  3001               	movlw	high __pbssBANK2
  2767  0045  0085               	movwf	5
  2768  0046  3020               	movlw	32
  2769  0047  319A  220E  3180   	fcall	clear_ram0
  2770                           
  2771                           ; Clear objects allocated to BANK3
  2772  004A  30C1               	movlw	low __pbssBANK3
  2773  004B  0084               	movwf	4
  2774  004C  3001               	movlw	high __pbssBANK3
  2775  004D  0085               	movwf	5
  2776  004E  3010               	movlw	16
  2777  004F  319A  220E  3180   	fcall	clear_ram0
  2778                           
  2779                           ; Clear objects allocated to BANK4
  2780  0052  3020               	movlw	low __pbssBANK4
  2781  0053  0084               	movwf	4
  2782  0054  3002               	movlw	high __pbssBANK4
  2783  0055  0085               	movwf	5
  2784  0056  3050               	movlw	80
  2785  0057  319A  220E         	fcall	clear_ram0
  2786  0059                     end_of_initialization:	
  2787                           ;End of C runtime variable initialization code
  2788                           
  2789  0059                     __end_of__initialization:	
  2790  0059  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2791  005A  0020               	movlb	0
  2792  005B  3180  285D         	ljmp	_main	;jump to C main() function
  2793                           
  2794                           	psect	bssBANK0
  2795  006E                     __pbssBANK0:	
  2796  006E                     _eusartRxHead:	
  2797  006E                     	ds	1
  2798  006F                     _sensor_globalFlags:	
  2799  006F                     	ds	1
  2800                           
  2801                           	psect	bssBANK2
  2802  0120                     __pbssBANK2:	
  2803  0120                     _packet_sample:	
  2804  0120                     	ds	4
  2805  0124                     _nout:	
  2806  0124                     	ds	2
  2807  0126                     _width:	
  2808  0126                     	ds	2
  2809  0128                     _prec:	
  2810  0128                     	ds	2
  2811  012A                     _flags:	
  2812  012A                     	ds	2
  2813  012C                     _count_conf:	
  2814  012C                     	ds	2
  2815  012E                     _bt_status:	
  2816  012E                     	ds	2
  2817  0130                     TMR1_ISR@CountCallBack:	
  2818  0130                     	ds	2
  2819  0132                     TMR0_ISR@CountCallBack:	
  2820  0132                     	ds	2
  2821  0134                     _packet_noise:	
  2822  0134                     	ds	2
  2823  0136                     _dir_mes:	
  2824  0136                     	ds	1
  2825  0137                     _busy_flag:	
  2826  0137                     	ds	1
  2827  0138                     _rest:	
  2828  0138                     	ds	1
  2829  0139                     _check_request:	
  2830  0139                     	ds	1
  2831  013A                     _config_status:	
  2832  013A                     	ds	1
  2833  013B                     _eusartRxLastError:	
  2834  013B                     	ds	1
  2835  013C                     _eusartRxCount:	
  2836  013C                     	ds	1
  2837  013D                     _eusartRxTail:	
  2838  013D                     	ds	1
  2839  013E                     _lowpowerActivated:	
  2840  013E                     	ds	1
  2841  013F                     _mtouch_time_toScan:	
  2842  013F                     	ds	1
  2843                           
  2844                           	psect	dataBANK2
  2845  0166                     __pdataBANK2:	
  2846  0166                     _callback_notPressed:	
  2847  0166                     	ds	2
  2848  0168                     _callback_pressed:	
  2849  0168                     	ds	2
  2850  016A                     _callback_sampled:	
  2851  016A                     	ds	2
  2852  016C                     _sample_period:	
  2853  016C                     	ds	1
  2854                           
  2855                           	psect	bssBANK3
  2856  01C1                     __pbssBANK3:	
  2857  01C1                     _eusartRxStatusBuffer:	
  2858  01C1                     	ds	8
  2859  01C9                     _eusartRxBuffer:	
  2860  01C9                     	ds	8
  2861                           
  2862                           	psect	dataBANK3
  2863  01A0                     __pdataBANK3:	
  2864  01A0                     _Button_StateMachine:	
  2865  01A0                     	ds	6
  2866  01A6                     _mtouch_sensor:	
  2867  01A6                     	ds	27
  2868                           
  2869                           	psect	bssBANK4
  2870  0220                     __pbssBANK4:	
  2871  0220                     _mtouch_button:	
  2872  0220                     	ds	48
  2873  0250                     _dbuf:	
  2874  0250                     	ds	32
  2875                           
  2876                           	psect	inittext
  2877  1A14                     init_ram:	
  2878  1A14  00FE               	movwf	126
  2879  1A15                     initloop:	
  2880  1A15  0012               	moviw fsr0++
  2881  1A16  001E               	movwi fsr1++
  2882  1A17  0BFE               	decfsz	126,f
  2883  1A18  2A15               	goto	initloop
  2884  1A19  3400               	retlw	0
  2885                           
  2886                           	psect	clrtext
  2887  1A0E                     clear_ram0:	
  2888                           ;	Called with FSR0 containing the base address, and
  2889                           ;	WREG with the size to clear
  2890                           
  2891  1A0E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2892  1A0F                     clrloop0:	
  2893  1A0F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2894  1A10  3101               	addfsr 0,1
  2895  1A11  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2896  1A12  2A0F               	goto	clrloop0	;have we reached the end yet?
  2897  1A13  3400               	retlw	0	;all done for this memory range, return
  2898                           
  2899                           	psect	cstackBANK3
  2900  01D7                     __pcstackBANK3:	
  2901  01D7                     main@blink:	
  2902                           
  2903                           ; 1 bytes @ 0x0
  2904  01D7                     	ds	1
  2905  01D8                     main@blink_count:	
  2906                           
  2907                           ; 1 bytes @ 0x1
  2908  01D8                     	ds	1
  2909  01D9                     main@prcData:	
  2910                           
  2911                           ; 1 bytes @ 0x2
  2912  01D9                     	ds	1
  2913  01DA                     main@rxData:	
  2914                           
  2915                           ; 1 bytes @ 0x3
  2916  01DA                     	ds	1
  2917                           
  2918                           	psect	cstackBANK2
  2919  0140                     __pcstackBANK2:	
  2920  0140                     ??_vfprintf:	
  2921                           
  2922                           ; 1 bytes @ 0x0
  2923  0140                     	ds	2
  2924  0142                     vfprintf@fp:	
  2925                           
  2926                           ; 1 bytes @ 0x2
  2927  0142                     	ds	1
  2928  0143                     vfprintf@cfmt:	
  2929                           
  2930                           ; 2 bytes @ 0x3
  2931  0143                     	ds	2
  2932  0145                     ?_printf:	
  2933  0145                     printf@fmt:	
  2934                           ; 2 bytes @ 0x5
  2935                           
  2936                           
  2937                           ; 2 bytes @ 0x5
  2938  0145                     	ds	6
  2939  014B                     printf@ap:	
  2940                           
  2941                           ; 1 bytes @ 0xB
  2942  014B                     	ds	1
  2943  014C                     ?_Button_DefaultCallback:	
  2944  014C                     ?_myButtonPressedCallback:	
  2945                           ; 1 bytes @ 0xC
  2946                           
  2947  014C                     ?_myButtonReleasedCallback:	
  2948                           ; 1 bytes @ 0xC
  2949                           
  2950  014C                     ??_DATA_PROCESS:	
  2951                           ; 1 bytes @ 0xC
  2952                           
  2953  014C                     ??_check_message:	
  2954                           ; 1 bytes @ 0xC
  2955                           
  2956  014C                     Button_DefaultCallback@button:	
  2957                           ; 1 bytes @ 0xC
  2958                           
  2959  014C                     myButtonPressedCallback@button:	
  2960                           ; 1 bytes @ 0xC
  2961                           
  2962  014C                     myButtonReleasedCallback@button:	
  2963                           ; 1 bytes @ 0xC
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0xC
  2967  014C                     	ds	1
  2968  014D                     ??_myButtonReleasedCallback:	
  2969                           
  2970                           ; 1 bytes @ 0xD
  2971  014D                     	ds	1
  2972  014E                     check_message@x:	
  2973  014E                     DATA_PROCESS@x:	
  2974                           ; 1 bytes @ 0xE
  2975                           
  2976                           
  2977                           ; 1 bytes @ 0xE
  2978  014E                     	ds	1
  2979  014F                     ?_Button_State_Initializing:	
  2980  014F                     ?_Button_State_NotPressed:	
  2981                           ; 1 bytes @ 0xF
  2982                           
  2983  014F                     ?_Button_State_Pressed:	
  2984                           ; 1 bytes @ 0xF
  2985                           
  2986  014F                     Button_State_Initializing@button:	
  2987                           ; 1 bytes @ 0xF
  2988                           
  2989  014F                     Button_State_NotPressed@button:	
  2990                           ; 1 bytes @ 0xF
  2991                           
  2992  014F                     Button_State_Pressed@button:	
  2993                           ; 1 bytes @ 0xF
  2994                           
  2995                           
  2996                           ; 1 bytes @ 0xF
  2997  014F                     	ds	1
  2998  0150                     ??_Button_State_Initializing:	
  2999  0150                     ??_Button_State_NotPressed:	
  3000                           ; 1 bytes @ 0x10
  3001                           
  3002  0150                     ??_Button_State_Pressed:	
  3003                           ; 1 bytes @ 0x10
  3004                           
  3005                           
  3006                           ; 1 bytes @ 0x10
  3007  0150                     	ds	4
  3008  0154                     ??_Button_Service:	
  3009                           
  3010                           ; 1 bytes @ 0x14
  3011  0154                     	ds	2
  3012  0156                     Button_Service@name:	
  3013                           
  3014                           ; 1 bytes @ 0x16
  3015  0156                     	ds	1
  3016  0157                     Button_Service@button:	
  3017                           
  3018                           ; 1 bytes @ 0x17
  3019  0157                     	ds	1
  3020  0158                     ??_MTOUCH_Button_ServiceAll:	
  3021                           
  3022                           ; 1 bytes @ 0x18
  3023  0158                     	ds	1
  3024  0159                     MTOUCH_Button_ServiceAll@button:	
  3025                           
  3026                           ; 1 bytes @ 0x19
  3027  0159                     	ds	1
  3028  015A                     ??_MTOUCH_Service_Mainloop:	
  3029                           
  3030                           ; 1 bytes @ 0x1A
  3031  015A                     	ds	1
  3032  015B                     ??_main:	
  3033                           
  3034                           ; 1 bytes @ 0x1B
  3035  015B                     	ds	2
  3036                           
  3037                           	psect	cstackBANK1
  3038  00A0                     __pcstackBANK1:	
  3039  00A0                     ??_TMR0_CallBack:	
  3040                           
  3041                           ; 1 bytes @ 0x0
  3042  00A0                     	ds	1
  3043  00A1                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3044  00A1                     ??_MTOUCH_needReburst:	
  3045                           ; 1 bytes @ 0x1
  3046                           
  3047  00A1                     ?_Sensor_DefaultCallback:	
  3048                           ; 1 bytes @ 0x1
  3049                           
  3050  00A1                     ??_Sensor_Sampled_Reset:	
  3051                           ; 1 bytes @ 0x1
  3052                           
  3053  00A1                     ??_Sensor_isEnabled:	
  3054                           ; 1 bytes @ 0x1
  3055                           
  3056  00A1                     ??_Sensor_setSampled:	
  3057                           ; 1 bytes @ 0x1
  3058                           
  3059  00A1                     ??_Sensor_isActive:	
  3060                           ; 1 bytes @ 0x1
  3061                           
  3062  00A1                     ??_Sensor_isCalibrated:	
  3063                           ; 1 bytes @ 0x1
  3064                           
  3065  00A1                     ??_Sensor_setActive:	
  3066                           ; 1 bytes @ 0x1
  3067                           
  3068  00A1                     ??_Sensor_setInactive:	
  3069                           ; 1 bytes @ 0x1
  3070                           
  3071  00A1                     ??_Sensor_isCalibratingAcqTime:	
  3072                           ; 1 bytes @ 0x1
  3073                           
  3074  00A1                     ??_TMR2_LoadPeriodRegister:	
  3075                           ; 1 bytes @ 0x1
  3076                           
  3077  00A1                     ??_TMR2_StartTimer:	
  3078                           ; 1 bytes @ 0x1
  3079                           
  3080  00A1                     ??_TMR2_StopTimer:	
  3081                           ; 1 bytes @ 0x1
  3082                           
  3083  00A1                     ??_Sensor_setCalibratAcqTime:	
  3084                           ; 1 bytes @ 0x1
  3085                           
  3086  00A1                     ??_Sensor_setCalibrated:	
  3087                           ; 1 bytes @ 0x1
  3088                           
  3089  00A1                     ?_memcpy:	
  3090                           ; 1 bytes @ 0x1
  3091                           
  3092  00A1                     ??_Button_Deviation_Update:	
  3093                           ; 1 bytes @ 0x1
  3094                           
  3095  00A1                     ??_Button_Baseline_Update:	
  3096                           ; 1 bytes @ 0x1
  3097                           
  3098  00A1                     ??_Button_Tick_helper:	
  3099                           ; 1 bytes @ 0x1
  3100                           
  3101  00A1                     ?_EUSART_SetRxInterruptHandler:	
  3102                           ; 1 bytes @ 0x1
  3103                           
  3104  00A1                     ?_EUSART_SetFramingErrorHandler:	
  3105                           ; 1 bytes @ 0x1
  3106                           
  3107  00A1                     ?_EUSART_SetOverrunErrorHandler:	
  3108                           ; 1 bytes @ 0x1
  3109                           
  3110  00A1                     ?_EUSART_SetErrorHandler:	
  3111                           ; 1 bytes @ 0x1
  3112                           
  3113  00A1                     ??_PIN_MANAGER_Initialize:	
  3114                           ; 1 bytes @ 0x1
  3115                           
  3116  00A1                     ??_OSCILLATOR_Initialize:	
  3117                           ; 1 bytes @ 0x1
  3118                           
  3119  00A1                     ??_WDT_Initialize:	
  3120                           ; 1 bytes @ 0x1
  3121                           
  3122  00A1                     ?_TMR0_SetInterruptHandler:	
  3123                           ; 1 bytes @ 0x1
  3124                           
  3125  00A1                     ?_TMR1_SetInterruptHandler:	
  3126                           ; 1 bytes @ 0x1
  3127                           
  3128  00A1                     ??_LED_EN:	
  3129                           ; 1 bytes @ 0x1
  3130                           
  3131  00A1                     ?_LED_PROCESS:	
  3132                           ; 1 bytes @ 0x1
  3133                           
  3134  00A1                     ??_Sensor_getScanGroupIndex:	
  3135                           ; 1 bytes @ 0x1
  3136                           
  3137  00A1                     ??_MTOUCH_Button_isPressed:	
  3138                           ; 1 bytes @ 0x1
  3139                           
  3140  00A1                     ?_MTOUCH_Button_SetPressedCallback:	
  3141                           ; 1 bytes @ 0x1
  3142                           
  3143  00A1                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3144                           ; 1 bytes @ 0x1
  3145                           
  3146  00A1                     ??_EUSART_is_rx_ready:	
  3147                           ; 1 bytes @ 0x1
  3148                           
  3149  00A1                     ??_EUSART_Read:	
  3150                           ; 1 bytes @ 0x1
  3151                           
  3152  00A1                     ??_EUSART_Write:	
  3153                           ; 1 bytes @ 0x1
  3154                           
  3155  00A1                     ??_TMR2_Initialize:	
  3156                           ; 1 bytes @ 0x1
  3157                           
  3158  00A1                     ?_PROCESS_RELAY:	
  3159                           ; 1 bytes @ 0x1
  3160                           
  3161  00A1                     ??_check_data:	
  3162                           ; 1 bytes @ 0x1
  3163                           
  3164  00A1                     ??_update_state:	
  3165                           ; 1 bytes @ 0x1
  3166                           
  3167  00A1                     ?___bmul:	
  3168                           ; 1 bytes @ 0x1
  3169                           
  3170  00A1                     ?_strlen:	
  3171                           ; 1 bytes @ 0x1
  3172                           
  3173  00A1                     ?___aodiv:	
  3174                           ; 2 bytes @ 0x1
  3175                           
  3176  00A1                     ?___aomod:	
  3177                           ; 8 bytes @ 0x1
  3178                           
  3179  00A1                     Sensor_DefaultCallback@sensor:	
  3180                           ; 8 bytes @ 0x1
  3181                           
  3182  00A1                     Sensor_setActive@sensor:	
  3183                           ; 1 bytes @ 0x1
  3184                           
  3185  00A1                     Sensor_setInactive@sensor:	
  3186                           ; 1 bytes @ 0x1
  3187                           
  3188  00A1                     Sensor_isActive@sensor:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  00A1                     Sensor_isCalibrated@sensor:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  00A1                     Sensor_setCalibrated@sensor:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  00A1                     Sensor_setCalibratAcqTime@sensor:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  00A1                     Sensor_isCalibratingAcqTime@sensor:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203  00A1                     Sensor_Sampled_Reset@sensor:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  00A1                     Sensor_setSampled@sensor:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209  00A1                     EUSART_Write@txData:	
  3210                           ; 1 bytes @ 0x1
  3211                           
  3212  00A1                     TMR2_LoadPeriodRegister@periodVal:	
  3213                           ; 1 bytes @ 0x1
  3214                           
  3215  00A1                     PROCESS_RELAY@relay_2:	
  3216                           ; 1 bytes @ 0x1
  3217                           
  3218  00A1                     LED_PROCESS@blue:	
  3219                           ; 1 bytes @ 0x1
  3220                           
  3221  00A1                     ___bmul@multiplicand:	
  3222                           ; 1 bytes @ 0x1
  3223                           
  3224  00A1                     MTOUCH_Button_SetPressedCallback@callback:	
  3225                           ; 1 bytes @ 0x1
  3226                           
  3227  00A1                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3228                           ; 2 bytes @ 0x1
  3229                           
  3230  00A1                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3231                           ; 2 bytes @ 0x1
  3232                           
  3233  00A1                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3234                           ; 2 bytes @ 0x1
  3235                           
  3236  00A1                     EUSART_SetErrorHandler@interruptHandler:	
  3237                           ; 2 bytes @ 0x1
  3238                           
  3239  00A1                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3240                           ; 2 bytes @ 0x1
  3241                           
  3242  00A1                     TMR0_SetInterruptHandler@InterruptHandler:	
  3243                           ; 2 bytes @ 0x1
  3244                           
  3245  00A1                     TMR1_SetInterruptHandler@InterruptHandler:	
  3246                           ; 2 bytes @ 0x1
  3247                           
  3248  00A1                     memcpy@s1:	
  3249                           ; 2 bytes @ 0x1
  3250                           
  3251  00A1                     ___aodiv@divisor:	
  3252                           ; 2 bytes @ 0x1
  3253                           
  3254  00A1                     ___aomod@divisor:	
  3255                           ; 8 bytes @ 0x1
  3256                           
  3257                           
  3258                           ; 8 bytes @ 0x1
  3259  00A1                     	ds	1
  3260  00A2                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3261  00A2                     ??_Sensor_DefaultCallback:	
  3262                           ; 1 bytes @ 0x2
  3263                           
  3264  00A2                     ?_Sensor_loadADCSettings:	
  3265                           ; 1 bytes @ 0x2
  3266                           
  3267  00A2                     ??_putch:	
  3268                           ; 1 bytes @ 0x2
  3269                           
  3270  00A2                     ??___bmul:	
  3271                           ; 1 bytes @ 0x2
  3272                           
  3273  00A2                     Sensor_loadADCSettings@adc_index:	
  3274                           ; 1 bytes @ 0x2
  3275                           
  3276  00A2                     Sensor_isEnabled@sensor:	
  3277                           ; 1 bytes @ 0x2
  3278                           
  3279  00A2                     MTOUCH_Button_isPressed@name:	
  3280                           ; 1 bytes @ 0x2
  3281                           
  3282  00A2                     EUSART_Read@readValue:	
  3283                           ; 1 bytes @ 0x2
  3284                           
  3285  00A2                     putch@txData:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  00A2                     PROCESS_RELAY@relay_3:	
  3289                           ; 1 bytes @ 0x2
  3290                           
  3291  00A2                     update_state@state:	
  3292                           ; 1 bytes @ 0x2
  3293                           
  3294  00A2                     LED_PROCESS@red:	
  3295                           ; 1 bytes @ 0x2
  3296                           
  3297                           
  3298                           ; 1 bytes @ 0x2
  3299  00A2                     	ds	1
  3300  00A3                     ??_EUSART_SetRxInterruptHandler:	
  3301  00A3                     ??_EUSART_SetFramingErrorHandler:	
  3302                           ; 1 bytes @ 0x3
  3303                           
  3304  00A3                     ??_EUSART_SetOverrunErrorHandler:	
  3305                           ; 1 bytes @ 0x3
  3306                           
  3307  00A3                     ??_EUSART_SetErrorHandler:	
  3308                           ; 1 bytes @ 0x3
  3309                           
  3310  00A3                     ??_TMR1_Initialize:	
  3311                           ; 1 bytes @ 0x3
  3312                           
  3313  00A3                     ??_TMR0_Initialize:	
  3314                           ; 1 bytes @ 0x3
  3315                           
  3316  00A3                     ??_TMR0_SetInterruptHandler:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  00A3                     ??_TMR1_SetInterruptHandler:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  00A3                     ??_LED_PROCESS:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  00A3                     ??_strlen:	
  3326                           ; 1 bytes @ 0x3
  3327                           
  3328  00A3                     ??_Sensor_loadADCSettings:	
  3329                           ; 1 bytes @ 0x3
  3330                           
  3331  00A3                     ??_MTOUCH_Button_SetPressedCallback:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  00A3                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  00A3                     ??_EUSART_Initialize:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340  00A3                     ??_PROCESS_RELAY:	
  3341                           ; 1 bytes @ 0x3
  3342                           
  3343  00A3                     ?_fputc:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  00A3                     Sensor_getScanGroupIndex@sensor:	
  3347                           ; 2 bytes @ 0x3
  3348                           
  3349  00A3                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352  00A3                     Button_Tick_helper@button:	
  3353                           ; 1 bytes @ 0x3
  3354                           
  3355  00A3                     PROCESS_RELAY@relay_1:	
  3356                           ; 1 bytes @ 0x3
  3357                           
  3358  00A3                     check_data@x:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361  00A3                     ___bmul@product:	
  3362                           ; 1 bytes @ 0x3
  3363                           
  3364  00A3                     memcpy@n:	
  3365                           ; 1 bytes @ 0x3
  3366                           
  3367  00A3                     fputc@c:	
  3368                           ; 2 bytes @ 0x3
  3369                           
  3370                           
  3371                           ; 2 bytes @ 0x3
  3372  00A3                     	ds	1
  3373  00A4                     ??_MTOUCH_Button_Tick:	
  3374  00A4                     Sensor_getScanGroupIndex@sensorGroup:	
  3375                           ; 1 bytes @ 0x4
  3376                           
  3377  00A4                     ___bmul@multiplier:	
  3378                           ; 1 bytes @ 0x4
  3379                           
  3380  00A4                     strlen@a:	
  3381                           ; 1 bytes @ 0x4
  3382                           
  3383                           
  3384                           ; 1 bytes @ 0x4
  3385  00A4                     	ds	1
  3386  00A5                     ??_MTOUCH_Sensor_Enable:	
  3387  00A5                     ??_MTOUCH_Sensor_Calibrate:	
  3388                           ; 1 bytes @ 0x5
  3389                           
  3390  00A5                     ??_Sensor_RawSample_Update:	
  3391                           ; 1 bytes @ 0x5
  3392                           
  3393  00A5                     ??_memcpy:	
  3394                           ; 1 bytes @ 0x5
  3395                           
  3396  00A5                     ??_MTOUCH_Sensor_isCalibrated:	
  3397                           ; 1 bytes @ 0x5
  3398                           
  3399  00A5                     ??_MTOUCH_Sensor_wasSampled:	
  3400                           ; 1 bytes @ 0x5
  3401                           
  3402  00A5                     ?_MTOUCH_Sensor_RawSample_Get:	
  3403                           ; 1 bytes @ 0x5
  3404                           
  3405  00A5                     MTOUCH_Button_Tick@i:	
  3406                           ; 2 bytes @ 0x5
  3407                           
  3408  00A5                     LED_PROCESS@led_name:	
  3409                           ; 1 bytes @ 0x5
  3410                           
  3411  00A5                     fputc@fp:	
  3412                           ; 1 bytes @ 0x5
  3413                           
  3414  00A5                     strlen@s:	
  3415                           ; 1 bytes @ 0x5
  3416                           
  3417                           
  3418                           ; 1 bytes @ 0x5
  3419  00A5                     	ds	1
  3420  00A6                     ??_MTOUCH_Tick:	
  3421  00A6                     ??_fputc:	
  3422                           ; 1 bytes @ 0x6
  3423                           
  3424  00A6                     Sensor_RawSample_Update@adcIndex:	
  3425                           ; 1 bytes @ 0x6
  3426                           
  3427  00A6                     MTOUCH_Sensor_Enable@sensor:	
  3428                           ; 1 bytes @ 0x6
  3429                           
  3430  00A6                     MTOUCH_Sensor_Calibrate@sensor:	
  3431                           ; 1 bytes @ 0x6
  3432                           
  3433  00A6                     MTOUCH_Sensor_isCalibrated@sensor:	
  3434                           ; 1 bytes @ 0x6
  3435                           
  3436  00A6                     MTOUCH_Sensor_wasSampled@sensor:	
  3437                           ; 1 bytes @ 0x6
  3438                           
  3439  00A6                     memcpy@tmp:	
  3440                           ; 1 bytes @ 0x6
  3441                           
  3442  00A6                     _Sensor_loadADCSettings$544:	
  3443                           ; 1 bytes @ 0x6
  3444                           
  3445                           
  3446                           ; 2 bytes @ 0x6
  3447  00A6                     	ds	1
  3448  00A7                     ??_MTOUCH_Sensor_Initialize:	
  3449  00A7                     ??_MTOUCH_Sensor_RawSample_Get:	
  3450                           ; 1 bytes @ 0x7
  3451                           
  3452  00A7                     ??_MTOUCH_Button_Initialize:	
  3453                           ; 1 bytes @ 0x7
  3454                           
  3455  00A7                     Sensor_RawSample_Update@sensor:	
  3456                           ; 1 bytes @ 0x7
  3457                           
  3458  00A7                     Button_Baseline_Update@button:	
  3459                           ; 1 bytes @ 0x7
  3460                           
  3461  00A7                     memcpy@s:	
  3462                           ; 1 bytes @ 0x7
  3463                           
  3464                           
  3465                           ; 2 bytes @ 0x7
  3466  00A7                     	ds	1
  3467  00A8                     MTOUCH_Sensor_Initialize@sensor:	
  3468  00A8                     Sensor_loadADCSettings@addressOffset:	
  3469                           ; 1 bytes @ 0x8
  3470                           
  3471  00A8                     MTOUCH_Sensor_RawSample_Get@name:	
  3472                           ; 1 bytes @ 0x8
  3473                           
  3474                           
  3475                           ; 1 bytes @ 0x8
  3476  00A8                     	ds	1
  3477  00A9                     ??_MTOUCH_Sensor_InitializeAll:	
  3478  00A9                     ??_Button_Baseline_Initialize:	
  3479                           ; 1 bytes @ 0x9
  3480                           
  3481  00A9                     ??_Button_Reading_Update_Helper:	
  3482                           ; 1 bytes @ 0x9
  3483                           
  3484  00A9                     Sensor_loadADCSettings@sensor:	
  3485                           ; 1 bytes @ 0x9
  3486                           
  3487  00A9                     MTOUCH_Button_Initialize@name:	
  3488                           ; 1 bytes @ 0x9
  3489                           
  3490  00A9                     memcpy@d1:	
  3491                           ; 1 bytes @ 0x9
  3492                           
  3493  00A9                     ___aodiv@dividend:	
  3494                           ; 1 bytes @ 0x9
  3495                           
  3496  00A9                     ___aomod@dividend:	
  3497                           ; 8 bytes @ 0x9
  3498                           
  3499                           
  3500                           ; 8 bytes @ 0x9
  3501  00A9                     	ds	1
  3502  00AA                     MTOUCH_Sensor_InitializeAll@sensor:	
  3503  00AA                     MTOUCH_Button_Initialize@button:	
  3504                           ; 1 bytes @ 0xA
  3505                           
  3506  00AA                     memcpy@d:	
  3507                           ; 1 bytes @ 0xA
  3508                           
  3509                           
  3510                           ; 1 bytes @ 0xA
  3511  00AA                     	ds	1
  3512  00AB                     ??_MTOUCH_Button_InitializeAll:	
  3513  00AB                     ?_fputs:	
  3514                           ; 1 bytes @ 0xB
  3515                           
  3516  00AB                     Button_Deviation_Update@button:	
  3517                           ; 2 bytes @ 0xB
  3518                           
  3519  00AB                     Button_Reading_Update_Helper@button:	
  3520                           ; 1 bytes @ 0xB
  3521                           
  3522  00AB                     fputs@fp:	
  3523                           ; 1 bytes @ 0xB
  3524                           
  3525                           
  3526                           ; 1 bytes @ 0xB
  3527  00AB                     	ds	1
  3528  00AC                     ??_Button_Reading_Update:	
  3529  00AC                     ??_fputs:	
  3530                           ; 1 bytes @ 0xC
  3531                           
  3532  00AC                     MTOUCH_Button_InitializeAll@button:	
  3533                           ; 1 bytes @ 0xC
  3534                           
  3535  00AC                     Button_Reading_Update@button:	
  3536                           ; 1 bytes @ 0xC
  3537                           
  3538  00AC                     Button_Deviation_Update@deviation:	
  3539                           ; 1 bytes @ 0xC
  3540                           
  3541                           
  3542                           ; 4 bytes @ 0xC
  3543  00AC                     	ds	1
  3544  00AD                     ??_MTOUCH_Initialize:	
  3545  00AD                     ??_SYSTEM_Initialize:	
  3546                           ; 1 bytes @ 0xD
  3547                           
  3548  00AD                     Button_Baseline_Initialize@button:	
  3549                           ; 1 bytes @ 0xD
  3550                           
  3551                           
  3552                           ; 1 bytes @ 0xD
  3553  00AD                     	ds	2
  3554  00AF                     fputs@c:	
  3555                           
  3556                           ; 1 bytes @ 0xF
  3557  00AF                     	ds	1
  3558  00B0                     fputs@i:	
  3559                           
  3560                           ; 2 bytes @ 0x10
  3561  00B0                     	ds	1
  3562  00B1                     ??___aodiv:	
  3563  00B1                     ??___aomod:	
  3564                           ; 1 bytes @ 0x11
  3565                           
  3566                           
  3567                           ; 1 bytes @ 0x11
  3568  00B1                     	ds	1
  3569  00B2                     ___aodiv@counter:	
  3570  00B2                     ___aomod@counter:	
  3571                           ; 1 bytes @ 0x12
  3572                           
  3573  00B2                     fputs@s:	
  3574                           ; 1 bytes @ 0x12
  3575                           
  3576                           
  3577                           ; 1 bytes @ 0x12
  3578  00B2                     	ds	1
  3579  00B3                     ?_pad:	
  3580  00B3                     pad@buf:	
  3581                           ; 2 bytes @ 0x13
  3582                           
  3583  00B3                     ___aodiv@sign:	
  3584                           ; 1 bytes @ 0x13
  3585                           
  3586  00B3                     ___aomod@sign:	
  3587                           ; 1 bytes @ 0x13
  3588                           
  3589                           
  3590                           ; 1 bytes @ 0x13
  3591  00B3                     	ds	1
  3592  00B4                     ?_abs:	
  3593  00B4                     pad@p:	
  3594                           ; 2 bytes @ 0x14
  3595                           
  3596  00B4                     abs@a:	
  3597                           ; 2 bytes @ 0x14
  3598                           
  3599  00B4                     ___aodiv@quotient:	
  3600                           ; 2 bytes @ 0x14
  3601                           
  3602                           
  3603                           ; 8 bytes @ 0x14
  3604  00B4                     	ds	2
  3605  00B6                     ??_abs:	
  3606  00B6                     ??_pad:	
  3607                           ; 1 bytes @ 0x16
  3608                           
  3609                           
  3610                           ; 1 bytes @ 0x16
  3611  00B6                     	ds	1
  3612  00B7                     pad@i:	
  3613                           
  3614                           ; 2 bytes @ 0x17
  3615  00B7                     	ds	1
  3616  00B8                     ??_Sensor_postAcquisitionProcess:	
  3617  00B8                     ??_Sensor_autoCalibration:	
  3618                           ; 1 bytes @ 0x18
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x18
  3622  00B8                     	ds	1
  3623  00B9                     Sensor_postAcquisitionProcess@adcIndex:	
  3624  00B9                     pad@w:	
  3625                           ; 1 bytes @ 0x19
  3626                           
  3627                           
  3628                           ; 2 bytes @ 0x19
  3629  00B9                     	ds	1
  3630  00BA                     Sensor_postAcquisitionProcess@deviation:	
  3631                           
  3632                           ; 2 bytes @ 0x1A
  3633  00BA                     	ds	1
  3634  00BB                     pad@fp:	
  3635                           
  3636                           ; 1 bytes @ 0x1B
  3637  00BB                     	ds	1
  3638  00BC                     ?_ctoa:	
  3639  00BC                     ?_dtoa:	
  3640                           ; 2 bytes @ 0x1C
  3641                           
  3642  00BC                     Sensor_postAcquisitionProcess@sensor:	
  3643                           ; 2 bytes @ 0x1C
  3644                           
  3645  00BC                     Sensor_autoCalibration@adcIndex:	
  3646                           ; 1 bytes @ 0x1C
  3647                           
  3648  00BC                     ctoa@c:	
  3649                           ; 1 bytes @ 0x1C
  3650                           
  3651  00BC                     dtoa@d:	
  3652                           ; 1 bytes @ 0x1C
  3653                           
  3654                           
  3655                           ; 8 bytes @ 0x1C
  3656  00BC                     	ds	1
  3657  00BD                     Sensor_autoCalibration@sensor:	
  3658                           
  3659                           ; 1 bytes @ 0x1D
  3660  00BD                     	ds	1
  3661  00BE                     ?_Sensor_Acq_ExecutePacket:	
  3662  00BE                     ??_ctoa:	
  3663                           ; 1 bytes @ 0x1E
  3664                           
  3665  00BE                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3666                           ; 1 bytes @ 0x1E
  3667                           
  3668                           
  3669                           ; 1 bytes @ 0x1E
  3670  00BE                     	ds	1
  3671  00BF                     ??_Sensor_Acq_ExecutePacket:	
  3672  00BF                     ctoa@w:	
  3673                           ; 1 bytes @ 0x1F
  3674                           
  3675                           
  3676                           ; 2 bytes @ 0x1F
  3677  00BF                     	ds	1
  3678  00C0                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3679                           
  3680                           ; 1 bytes @ 0x20
  3681  00C0                     	ds	1
  3682  00C1                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3683  00C1                     ctoa@fp:	
  3684                           ; 1 bytes @ 0x21
  3685                           
  3686                           
  3687                           ; 1 bytes @ 0x21
  3688  00C1                     	ds	1
  3689  00C2                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3690                           
  3691                           ; 1 bytes @ 0x22
  3692  00C2                     	ds	1
  3693  00C3                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3694                           
  3695                           ; 1 bytes @ 0x23
  3696  00C3                     	ds	1
  3697  00C4                     ??_dtoa:	
  3698  00C4                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3699                           ; 1 bytes @ 0x24
  3700                           
  3701                           
  3702                           ; 1 bytes @ 0x24
  3703  00C4                     	ds	1
  3704  00C5                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3705                           
  3706                           ; 1 bytes @ 0x25
  3707  00C5                     	ds	1
  3708  00C6                     Sensor_Acq_ExecutePacket@activeSensor:	
  3709                           
  3710                           ; 1 bytes @ 0x26
  3711  00C6                     	ds	1
  3712  00C7                     Sensor_Acq_ExecutePacket@last_a:	
  3713  00C7                     _dtoa$2177:	
  3714                           ; 2 bytes @ 0x27
  3715                           
  3716                           
  3717                           ; 2 bytes @ 0x27
  3718  00C7                     	ds	2
  3719  00C9                     dtoa@fp:	
  3720  00C9                     Sensor_Acq_ExecutePacket@last_b:	
  3721                           ; 1 bytes @ 0x29
  3722                           
  3723                           
  3724                           ; 2 bytes @ 0x29
  3725  00C9                     	ds	1
  3726  00CA                     dtoa@p:	
  3727                           
  3728                           ; 2 bytes @ 0x2A
  3729  00CA                     	ds	1
  3730  00CB                     Sensor_Acq_ExecutePacket@packet_counter:	
  3731                           
  3732                           ; 1 bytes @ 0x2B
  3733  00CB                     	ds	1
  3734  00CC                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3735  00CC                     dtoa@w:	
  3736                           ; 1 bytes @ 0x2C
  3737                           
  3738                           
  3739                           ; 2 bytes @ 0x2C
  3740  00CC                     	ds	1
  3741  00CD                     ?_Sensor_Scanfrequency_Evaluation:	
  3742  00CD                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3743                           ; 1 bytes @ 0x2D
  3744                           
  3745                           
  3746                           ; 1 bytes @ 0x2D
  3747  00CD                     	ds	1
  3748  00CE                     ??_Sensor_Scanfrequency_Evaluation:	
  3749  00CE                     dtoa@s:	
  3750                           ; 1 bytes @ 0x2E
  3751                           
  3752                           
  3753                           ; 2 bytes @ 0x2E
  3754  00CE                     	ds	2
  3755  00D0                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3756  00D0                     dtoa@n:	
  3757                           ; 1 bytes @ 0x30
  3758                           
  3759                           
  3760                           ; 8 bytes @ 0x30
  3761  00D0                     	ds	1
  3762  00D1                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3763                           
  3764                           ; 2 bytes @ 0x31
  3765  00D1                     	ds	2
  3766  00D3                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3767                           
  3768                           ; 1 bytes @ 0x33
  3769  00D3                     	ds	1
  3770  00D4                     Sensor_Scanfrequency_Evaluation@retry:	
  3771                           
  3772                           ; 1 bytes @ 0x34
  3773  00D4                     	ds	1
  3774  00D5                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3775                           
  3776                           ; 4 bytes @ 0x35
  3777  00D5                     	ds	3
  3778  00D8                     dtoa@i:	
  3779                           
  3780                           ; 2 bytes @ 0x38
  3781  00D8                     	ds	1
  3782  00D9                     Sensor_Scanfrequency_Evaluation@i:	
  3783                           
  3784                           ; 1 bytes @ 0x39
  3785  00D9                     	ds	1
  3786  00DA                     ?_Sensor_Acquisition:	
  3787  00DA                     ?_vfpfcnvrt:	
  3788                           ; 1 bytes @ 0x3A
  3789                           
  3790  00DA                     Sensor_Acquisition@sensor_adc2:	
  3791                           ; 2 bytes @ 0x3A
  3792                           
  3793  00DA                     vfpfcnvrt@fmt:	
  3794                           ; 1 bytes @ 0x3A
  3795                           
  3796                           
  3797                           ; 1 bytes @ 0x3A
  3798  00DA                     	ds	1
  3799  00DB                     ??_Sensor_Acquisition:	
  3800  00DB                     vfpfcnvrt@ap:	
  3801                           ; 1 bytes @ 0x3B
  3802                           
  3803                           
  3804                           ; 1 bytes @ 0x3B
  3805  00DB                     	ds	1
  3806  00DC                     ??_vfpfcnvrt:	
  3807  00DC                     Sensor_Acquisition@retry:	
  3808                           ; 1 bytes @ 0x3C
  3809                           
  3810                           
  3811                           ; 1 bytes @ 0x3C
  3812  00DC                     	ds	1
  3813  00DD                     Sensor_Acquisition@sensor_adc1:	
  3814                           
  3815                           ; 1 bytes @ 0x3D
  3816  00DD                     	ds	1
  3817  00DE                     ??_Sensor_Service:	
  3818                           
  3819                           ; 1 bytes @ 0x3E
  3820  00DE                     	ds	3
  3821  00E1                     Sensor_Service@scanGroup:	
  3822  00E1                     vfpfcnvrt@ll:	
  3823                           ; 1 bytes @ 0x41
  3824                           
  3825                           
  3826                           ; 8 bytes @ 0x41
  3827  00E1                     	ds	1
  3828  00E2                     Sensor_Service@error:	
  3829                           
  3830                           ; 1 bytes @ 0x42
  3831  00E2                     	ds	1
  3832  00E3                     Sensor_Service@sensor_adc1:	
  3833                           
  3834                           ; 1 bytes @ 0x43
  3835  00E3                     	ds	1
  3836  00E4                     Sensor_Service@sensor_adc2:	
  3837                           
  3838                           ; 1 bytes @ 0x44
  3839  00E4                     	ds	1
  3840  00E5                     ??_MTOUCH_Sensor_SampleAll:	
  3841                           
  3842                           ; 1 bytes @ 0x45
  3843  00E5                     	ds	1
  3844  00E6                     MTOUCH_Sensor_SampleAll@group:	
  3845                           
  3846                           ; 1 bytes @ 0x46
  3847  00E6                     	ds	3
  3848  00E9                     vfpfcnvrt@c:	
  3849                           
  3850                           ; 1 bytes @ 0x49
  3851  00E9                     	ds	1
  3852  00EA                     vfpfcnvrt@fp:	
  3853                           
  3854                           ; 1 bytes @ 0x4A
  3855  00EA                     	ds	1
  3856  00EB                     ?_vfprintf:	
  3857  00EB                     vfprintf@fmt:	
  3858                           ; 2 bytes @ 0x4B
  3859                           
  3860                           
  3861                           ; 2 bytes @ 0x4B
  3862  00EB                     	ds	2
  3863  00ED                     vfprintf@ap:	
  3864                           
  3865                           ; 1 bytes @ 0x4D
  3866  00ED                     	ds	1
  3867  00EE                     ??_printf:	
  3868                           
  3869                           ; 1 bytes @ 0x4E
  3870  00EE                     	ds	1
  3871  00EF                     ??_Button_DefaultCallback:	
  3872  00EF                     ??_myButtonPressedCallback:	
  3873                           ; 1 bytes @ 0x4F
  3874                           
  3875                           
  3876                           	psect	cstackCOMMON
  3877  0070                     __pcstackCOMMON:	
  3878                           ; 1 bytes @ 0x4F
  3879                           
  3880  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  3881  0070                     ?_MTOUCH_Button_InitializeAll:	
  3882                           ; 1 bytes @ 0x0
  3883                           
  3884  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  3885                           ; 1 bytes @ 0x0
  3886                           
  3887  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  3888                           ; 1 bytes @ 0x0
  3889                           
  3890  0070                     ?_MTOUCH_Sensor_SampleAll:	
  3891                           ; 1 bytes @ 0x0
  3892                           
  3893  0070                     ?_MTOUCH_Button_ServiceAll:	
  3894                           ; 1 bytes @ 0x0
  3895                           
  3896  0070                     ?_MTOUCH_needReburst:	
  3897                           ; 1 bytes @ 0x0
  3898                           
  3899  0070                     ?_MTOUCH_Tick:	
  3900                           ; 1 bytes @ 0x0
  3901                           
  3902  0070                     ?_MTOUCH_Button_Tick:	
  3903                           ; 1 bytes @ 0x0
  3904                           
  3905  0070                     ?_MTOUCH_Sensor_Enable:	
  3906                           ; 1 bytes @ 0x0
  3907                           
  3908  0070                     ?_MTOUCH_Sensor_Calibrate:	
  3909                           ; 1 bytes @ 0x0
  3910                           
  3911  0070                     ?_Sensor_Sampled_Reset:	
  3912                           ; 1 bytes @ 0x0
  3913                           
  3914  0070                     ?_Sensor_Service:	
  3915                           ; 1 bytes @ 0x0
  3916                           
  3917  0070                     ?_Sensor_isEnabled:	
  3918                           ; 1 bytes @ 0x0
  3919                           
  3920  0070                     ?_Sensor_RawSample_Update:	
  3921                           ; 1 bytes @ 0x0
  3922                           
  3923  0070                     ?_Sensor_setSampled:	
  3924                           ; 1 bytes @ 0x0
  3925                           
  3926  0070                     ?_Sensor_postAcquisitionProcess:	
  3927                           ; 1 bytes @ 0x0
  3928                           
  3929  0070                     ?_Sensor_isActive:	
  3930                           ; 1 bytes @ 0x0
  3931                           
  3932  0070                     ?_Sensor_isCalibrated:	
  3933                           ; 1 bytes @ 0x0
  3934                           
  3935  0070                     ?_Sensor_setActive:	
  3936                           ; 1 bytes @ 0x0
  3937                           
  3938  0070                     ?_Sensor_setInactive:	
  3939                           ; 1 bytes @ 0x0
  3940                           
  3941  0070                     ?_Sensor_isCalibratingAcqTime:	
  3942                           ; 1 bytes @ 0x0
  3943                           
  3944  0070                     ?_TMR2_LoadPeriodRegister:	
  3945                           ; 1 bytes @ 0x0
  3946                           
  3947  0070                     ?_TMR2_StartTimer:	
  3948                           ; 1 bytes @ 0x0
  3949                           
  3950  0070                     ?_TMR2_StopTimer:	
  3951                           ; 1 bytes @ 0x0
  3952                           
  3953  0070                     ?_Sensor_autoCalibration:	
  3954                           ; 1 bytes @ 0x0
  3955                           
  3956  0070                     ?_Sensor_setCalibratAcqTime:	
  3957                           ; 1 bytes @ 0x0
  3958                           
  3959  0070                     ?_Sensor_setCalibrated:	
  3960                           ; 1 bytes @ 0x0
  3961                           
  3962  0070                     ?_Button_Service:	
  3963                           ; 1 bytes @ 0x0
  3964                           
  3965  0070                     ?_Button_Reading_Update:	
  3966                           ; 1 bytes @ 0x0
  3967                           
  3968  0070                     ?_Button_Deviation_Update:	
  3969                           ; 1 bytes @ 0x0
  3970                           
  3971  0070                     ?_Button_Baseline_Initialize:	
  3972                           ; 1 bytes @ 0x0
  3973                           
  3974  0070                     ?_Button_Baseline_Update:	
  3975                           ; 1 bytes @ 0x0
  3976                           
  3977  0070                     ?_Button_Tick_helper:	
  3978                           ; 1 bytes @ 0x0
  3979                           
  3980  0070                     ?_Button_Reading_Update_Helper:	
  3981                           ; 1 bytes @ 0x0
  3982                           
  3983  0070                     ?_EUSART_Receive_ISR:	
  3984                           ; 1 bytes @ 0x0
  3985                           
  3986  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3987                           ; 1 bytes @ 0x0
  3988                           
  3989  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3990                           ; 1 bytes @ 0x0
  3991                           
  3992  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3993                           ; 1 bytes @ 0x0
  3994                           
  3995  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3996                           ; 1 bytes @ 0x0
  3997                           
  3998  0070                     ?_EUSART_DefaultErrorHandler:	
  3999                           ; 1 bytes @ 0x0
  4000                           
  4001  0070                     ?_EUSART_RxDataHandler:	
  4002                           ; 1 bytes @ 0x0
  4003                           
  4004  0070                     ??_EUSART_RxDataHandler:	
  4005                           ; 1 bytes @ 0x0
  4006                           
  4007  0070                     ?_TMR0_ISR:	
  4008                           ; 1 bytes @ 0x0
  4009                           
  4010  0070                     ?_TMR1_ISR:	
  4011                           ; 1 bytes @ 0x0
  4012                           
  4013  0070                     ?_PIN_MANAGER_Initialize:	
  4014                           ; 1 bytes @ 0x0
  4015                           
  4016  0070                     ?_OSCILLATOR_Initialize:	
  4017                           ; 1 bytes @ 0x0
  4018                           
  4019  0070                     ?_WDT_Initialize:	
  4020                           ; 1 bytes @ 0x0
  4021                           
  4022  0070                     ?_TMR1_Initialize:	
  4023                           ; 1 bytes @ 0x0
  4024                           
  4025  0070                     ?_TMR0_Initialize:	
  4026                           ; 1 bytes @ 0x0
  4027                           
  4028  0070                     ?_TMR0_DefaultInterruptHandler:	
  4029                           ; 1 bytes @ 0x0
  4030                           
  4031  0070                     ??_TMR0_DefaultInterruptHandler:	
  4032                           ; 1 bytes @ 0x0
  4033                           
  4034  0070                     ?_TMR0_CallBack:	
  4035                           ; 1 bytes @ 0x0
  4036                           
  4037  0070                     ?_TMR1_DefaultInterruptHandler:	
  4038                           ; 1 bytes @ 0x0
  4039                           
  4040  0070                     ??_TMR1_DefaultInterruptHandler:	
  4041                           ; 1 bytes @ 0x0
  4042                           
  4043  0070                     ?_TMR1_CallBack:	
  4044                           ; 1 bytes @ 0x0
  4045                           
  4046  0070                     ??_TMR1_CallBack:	
  4047                           ; 1 bytes @ 0x0
  4048                           
  4049  0070                     ?_LED_EN:	
  4050                           ; 1 bytes @ 0x0
  4051                           
  4052  0070                     ?_DATA_PROCESS:	
  4053                           ; 1 bytes @ 0x0
  4054                           
  4055  0070                     ?_MTOUCH_Initialize:	
  4056                           ; 1 bytes @ 0x0
  4057                           
  4058  0070                     ?_MTOUCH_Service_Mainloop:	
  4059                           ; 1 bytes @ 0x0
  4060                           
  4061  0070                     ?_MTOUCH_Sensor_Initialize:	
  4062                           ; 1 bytes @ 0x0
  4063                           
  4064  0070                     ?_Sensor_getScanGroupIndex:	
  4065                           ; 1 bytes @ 0x0
  4066                           
  4067  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  4068                           ; 1 bytes @ 0x0
  4069                           
  4070  0070                     ?_MTOUCH_Sensor_wasSampled:	
  4071                           ; 1 bytes @ 0x0
  4072                           
  4073  0070                     ?_MTOUCH_Button_Initialize:	
  4074                           ; 1 bytes @ 0x0
  4075                           
  4076  0070                     ?_MTOUCH_Button_isPressed:	
  4077                           ; 1 bytes @ 0x0
  4078                           
  4079  0070                     ?_EUSART_Initialize:	
  4080                           ; 1 bytes @ 0x0
  4081                           
  4082  0070                     ?_EUSART_is_rx_ready:	
  4083                           ; 1 bytes @ 0x0
  4084                           
  4085  0070                     ?_EUSART_Read:	
  4086                           ; 1 bytes @ 0x0
  4087                           
  4088  0070                     ?_EUSART_Write:	
  4089                           ; 1 bytes @ 0x0
  4090                           
  4091  0070                     ?_putch:	
  4092                           ; 1 bytes @ 0x0
  4093                           
  4094  0070                     ?_TMR2_Initialize:	
  4095                           ; 1 bytes @ 0x0
  4096                           
  4097  0070                     ?_INTERRUPT_InterruptManager:	
  4098                           ; 1 bytes @ 0x0
  4099                           
  4100  0070                     ?_SYSTEM_Initialize:	
  4101                           ; 1 bytes @ 0x0
  4102                           
  4103  0070                     ?_TMR1_WriteTimer:	
  4104                           ; 1 bytes @ 0x0
  4105                           
  4106  0070                     ?_check_message:	
  4107                           ; 1 bytes @ 0x0
  4108                           
  4109  0070                     ?_check_data:	
  4110                           ; 1 bytes @ 0x0
  4111                           
  4112  0070                     ?_main:	
  4113                           ; 1 bytes @ 0x0
  4114                           
  4115  0070                     ?_update_state:	
  4116                           ; 1 bytes @ 0x0
  4117                           
  4118  0070                     ?i1_EUSART_Write:	
  4119                           ; 1 bytes @ 0x0
  4120                           
  4121  0070                     ??i1_EUSART_Write:	
  4122                           ; 1 bytes @ 0x0
  4123                           
  4124  0070                     ?i1_putch:	
  4125                           ; 1 bytes @ 0x0
  4126                           
  4127  0070                     ??i1___aodiv:	
  4128                           ; 1 bytes @ 0x0
  4129                           
  4130  0070                     ??i1___aomod:	
  4131                           ; 1 bytes @ 0x0
  4132                           
  4133  0070                     ?i1_strlen:	
  4134                           ; 1 bytes @ 0x0
  4135                           
  4136  0070                     i1EUSART_Write@txData:	
  4137                           ; 2 bytes @ 0x0
  4138                           
  4139  0070                     TMR1_WriteTimer@timerVal:	
  4140                           ; 1 bytes @ 0x0
  4141                           
  4142                           
  4143                           ; 2 bytes @ 0x0
  4144  0070                     	ds	1
  4145  0071                     ??_EUSART_Receive_ISR:	
  4146  0071                     ??_EUSART_DefaultErrorHandler:	
  4147                           ; 1 bytes @ 0x1
  4148                           
  4149  0071                     ??i1_putch:	
  4150                           ; 1 bytes @ 0x1
  4151                           
  4152  0071                     i1putch@txData:	
  4153                           ; 1 bytes @ 0x1
  4154                           
  4155  0071                     i1___aodiv@counter:	
  4156                           ; 1 bytes @ 0x1
  4157                           
  4158  0071                     i1___aomod@counter:	
  4159                           ; 1 bytes @ 0x1
  4160                           
  4161                           
  4162                           ; 1 bytes @ 0x1
  4163  0071                     	ds	1
  4164  0072                     ??_TMR1_ISR:	
  4165  0072                     ??_TMR1_WriteTimer:	
  4166                           ; 1 bytes @ 0x2
  4167                           
  4168  0072                     ??i1_strlen:	
  4169                           ; 1 bytes @ 0x2
  4170                           
  4171  0072                     ?i1_fputc:	
  4172                           ; 1 bytes @ 0x2
  4173                           
  4174  0072                     i1___aodiv@sign:	
  4175                           ; 2 bytes @ 0x2
  4176                           
  4177  0072                     i1___aomod@sign:	
  4178                           ; 1 bytes @ 0x2
  4179                           
  4180  0072                     i1fputc@c:	
  4181                           ; 1 bytes @ 0x2
  4182                           
  4183                           
  4184                           ; 2 bytes @ 0x2
  4185  0072                     	ds	1
  4186  0073                     ?i1_abs:	
  4187  0073                     i1strlen@a:	
  4188                           ; 2 bytes @ 0x3
  4189                           
  4190  0073                     i1abs@a:	
  4191                           ; 1 bytes @ 0x3
  4192                           
  4193  0073                     i1___aodiv@quotient:	
  4194                           ; 2 bytes @ 0x3
  4195                           
  4196                           
  4197                           ; 8 bytes @ 0x3
  4198  0073                     	ds	1
  4199  0074                     i1fputc@fp:	
  4200  0074                     i1strlen@s:	
  4201                           ; 1 bytes @ 0x4
  4202                           
  4203                           
  4204                           ; 1 bytes @ 0x4
  4205  0074                     	ds	1
  4206  0075                     ??i1_abs:	
  4207  0075                     ??i1_fputc:	
  4208                           ; 1 bytes @ 0x5
  4209                           
  4210                           
  4211                           ; 1 bytes @ 0x5
  4212  0075                     	ds	5
  4213  007A                     ?i1_fputs:	
  4214  007A                     i1fputs@fp:	
  4215                           ; 2 bytes @ 0xA
  4216                           
  4217                           
  4218                           ; 1 bytes @ 0xA
  4219  007A                     	ds	1
  4220  007B                     ??i1_fputs:	
  4221                           
  4222                           ; 1 bytes @ 0xB
  4223  007B                     	ds	3
  4224  007E                     ??_TMR0_ISR:	
  4225  007E                     ??_INTERRUPT_InterruptManager:	
  4226                           ; 1 bytes @ 0xE
  4227                           
  4228  007E                     ??i1_printf:	
  4229                           ; 1 bytes @ 0xE
  4230                           
  4231                           
  4232                           	psect	cstackBANK0
  4233  0020                     __pcstackBANK0:	
  4234                           ; 1 bytes @ 0xE
  4235                           
  4236  0020                     ?i1___aodiv:	
  4237  0020                     ?i1___aomod:	
  4238                           ; 8 bytes @ 0x0
  4239                           
  4240  0020                     i1fputs@s:	
  4241                           ; 8 bytes @ 0x0
  4242                           
  4243  0020                     i1___aodiv@divisor:	
  4244                           ; 1 bytes @ 0x0
  4245                           
  4246  0020                     i1___aomod@divisor:	
  4247                           ; 8 bytes @ 0x0
  4248                           
  4249                           
  4250                           ; 8 bytes @ 0x0
  4251  0020                     	ds	1
  4252  0021                     i1fputs@c:	
  4253                           
  4254                           ; 1 bytes @ 0x1
  4255  0021                     	ds	1
  4256  0022                     i1fputs@i:	
  4257                           
  4258                           ; 2 bytes @ 0x2
  4259  0022                     	ds	2
  4260  0024                     ?i1_pad:	
  4261  0024                     i1pad@buf:	
  4262                           ; 2 bytes @ 0x4
  4263                           
  4264                           
  4265                           ; 1 bytes @ 0x4
  4266  0024                     	ds	1
  4267  0025                     i1pad@p:	
  4268                           
  4269                           ; 2 bytes @ 0x5
  4270  0025                     	ds	2
  4271  0027                     ??i1_pad:	
  4272                           
  4273                           ; 1 bytes @ 0x7
  4274  0027                     	ds	1
  4275  0028                     i1pad@i:	
  4276  0028                     i1___aodiv@dividend:	
  4277                           ; 2 bytes @ 0x8
  4278                           
  4279  0028                     i1___aomod@dividend:	
  4280                           ; 8 bytes @ 0x8
  4281                           
  4282                           
  4283                           ; 8 bytes @ 0x8
  4284  0028                     	ds	2
  4285  002A                     i1pad@w:	
  4286                           
  4287                           ; 2 bytes @ 0xA
  4288  002A                     	ds	2
  4289  002C                     i1pad@fp:	
  4290                           
  4291                           ; 1 bytes @ 0xC
  4292  002C                     	ds	1
  4293  002D                     ?i1_ctoa:	
  4294  002D                     i1ctoa@c:	
  4295                           ; 2 bytes @ 0xD
  4296                           
  4297                           
  4298                           ; 1 bytes @ 0xD
  4299  002D                     	ds	2
  4300  002F                     ??i1_ctoa:	
  4301                           
  4302                           ; 1 bytes @ 0xF
  4303  002F                     	ds	1
  4304  0030                     ?i1_dtoa:	
  4305  0030                     i1ctoa@fp:	
  4306                           ; 2 bytes @ 0x10
  4307                           
  4308  0030                     i1dtoa@d:	
  4309                           ; 1 bytes @ 0x10
  4310                           
  4311                           
  4312                           ; 8 bytes @ 0x10
  4313  0030                     	ds	1
  4314  0031                     i1ctoa@w:	
  4315                           
  4316                           ; 2 bytes @ 0x11
  4317  0031                     	ds	7
  4318  0038                     ??i1_dtoa:	
  4319                           
  4320                           ; 1 bytes @ 0x18
  4321  0038                     	ds	3
  4322  003B                     i1dtoa@fp:	
  4323                           
  4324                           ; 1 bytes @ 0x1B
  4325  003B                     	ds	1
  4326  003C                     i1_dtoa$2177:	
  4327                           
  4328                           ; 2 bytes @ 0x1C
  4329  003C                     	ds	2
  4330  003E                     i1dtoa@p:	
  4331                           
  4332                           ; 2 bytes @ 0x1E
  4333  003E                     	ds	2
  4334  0040                     i1dtoa@w:	
  4335                           
  4336                           ; 2 bytes @ 0x20
  4337  0040                     	ds	2
  4338  0042                     i1dtoa@s:	
  4339                           
  4340                           ; 2 bytes @ 0x22
  4341  0042                     	ds	2
  4342  0044                     i1dtoa@n:	
  4343                           
  4344                           ; 8 bytes @ 0x24
  4345  0044                     	ds	8
  4346  004C                     i1dtoa@i:	
  4347                           
  4348                           ; 2 bytes @ 0x2C
  4349  004C                     	ds	2
  4350  004E                     ?i1_vfpfcnvrt:	
  4351  004E                     i1vfpfcnvrt@fmt:	
  4352                           ; 2 bytes @ 0x2E
  4353                           
  4354                           
  4355                           ; 2 bytes @ 0x2E
  4356  004E                     	ds	2
  4357  0050                     i1vfpfcnvrt@ap:	
  4358                           
  4359                           ; 2 bytes @ 0x30
  4360  0050                     	ds	2
  4361  0052                     ??i1_vfpfcnvrt:	
  4362                           
  4363                           ; 1 bytes @ 0x32
  4364  0052                     	ds	5
  4365  0057                     i1vfpfcnvrt@ll:	
  4366                           
  4367                           ; 8 bytes @ 0x37
  4368  0057                     	ds	8
  4369  005F                     i1vfpfcnvrt@c:	
  4370                           
  4371                           ; 1 bytes @ 0x3F
  4372  005F                     	ds	1
  4373  0060                     i1vfpfcnvrt@fp:	
  4374                           
  4375                           ; 1 bytes @ 0x40
  4376  0060                     	ds	1
  4377  0061                     ?i1_vfprintf:	
  4378  0061                     i1vfprintf@fmt:	
  4379                           ; 2 bytes @ 0x41
  4380                           
  4381                           
  4382                           ; 2 bytes @ 0x41
  4383  0061                     	ds	2
  4384  0063                     i1vfprintf@ap:	
  4385                           
  4386                           ; 2 bytes @ 0x43
  4387  0063                     	ds	2
  4388  0065                     ??i1_vfprintf:	
  4389                           
  4390                           ; 1 bytes @ 0x45
  4391  0065                     	ds	1
  4392  0066                     i1vfprintf@fp:	
  4393                           
  4394                           ; 1 bytes @ 0x46
  4395  0066                     	ds	1
  4396  0067                     i1vfprintf@cfmt:	
  4397                           
  4398                           ; 2 bytes @ 0x47
  4399  0067                     	ds	2
  4400  0069                     ?i1_printf:	
  4401  0069                     i1printf@fmt:	
  4402                           ; 2 bytes @ 0x49
  4403                           
  4404                           
  4405                           ; 2 bytes @ 0x49
  4406  0069                     	ds	4
  4407  006D                     i1printf@ap:	
  4408                           
  4409                           ; 1 bytes @ 0x4D
  4410  006D                     	ds	1
  4411                           
  4412                           	psect	maintext
  4413  005D                     __pmaintext:	
  4414 ;;
  4415 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4416 ;;
  4417 ;; *************** function _main *****************
  4418 ;; Defined at:
  4419 ;;		line 87 in file "main.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;  rxData          1    3[BANK3 ] volatile unsigned char 
  4424 ;;  blink_count     1    1[BANK3 ] unsigned char 
  4425 ;;  blink           1    0[BANK3 ] _Bool 
  4426 ;;  prcData         1    2[BANK3 ] volatile unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : B1F/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4436 ;;      Params:         0       0       0       0       0       0       0       0
  4437 ;;      Locals:         0       0       0       0       4       0       0       0
  4438 ;;      Temps:          0       0       0       2       0       0       0       0
  4439 ;;      Totals:         0       0       0       2       4       0       0       0
  4440 ;;Total ram usage:        6 bytes
  4441 ;; Hardware stack levels required when called:   26
  4442 ;; This function calls:
  4443 ;;		_DATA_PROCESS
  4444 ;;		_EUSART_Read
  4445 ;;		_EUSART_is_rx_ready
  4446 ;;		_LED_EN
  4447 ;;		_LED_PROCESS
  4448 ;;		_MTOUCH_Button_SetNotPressedCallback
  4449 ;;		_MTOUCH_Button_SetPressedCallback
  4450 ;;		_MTOUCH_Button_isPressed
  4451 ;;		_MTOUCH_Initialize
  4452 ;;		_MTOUCH_Service_Mainloop
  4453 ;;		_SYSTEM_Initialize
  4454 ;;		_check_data
  4455 ;;		_check_message
  4456 ;;		_printf
  4457 ;; This function is called by:
  4458 ;;		Startup code after reset
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           
  4463                           ;psect for function _main
  4464  005D                     _main:	
  4465                           
  4466                           ;main.c: 89:     SYSTEM_Initialize();
  4467                           
  4468                           ;incstack = 0
  4469 ;; hardware stack exceeded
  4470                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4471  005D  319C  2494  3180   	fcall	_SYSTEM_Initialize
  4472                           
  4473                           ;main.c: 90:     (INTCONbits.GIE = 1);
  4474  0060  178B               	bsf	11,7	;volatile
  4475                           
  4476                           ;main.c: 91:     (INTCONbits.PEIE = 1);
  4477  0061  170B               	bsf	11,6	;volatile
  4478                           
  4479                           ;main.c: 92:     INTCONbits.TMR0IE = 0;
  4480  0062  128B               	bcf	11,5	;volatile
  4481                           
  4482                           ;main.c: 93:     INTCONbits.TMR0IF = 0;
  4483  0063  110B               	bcf	11,2	;volatile
  4484                           
  4485                           ;main.c: 94:     rest = 0;
  4486  0064  0022               	movlb	2	; select bank2
  4487  0065  01B8               	clrf	_rest^(0+256)	;volatile
  4488                           
  4489                           ;main.c: 95:     busy_flag = 0;
  4490  0066  01B7               	clrf	_busy_flag^(0+256)
  4491                           
  4492                           ;main.c: 96:     bt_status.full_status = 0;
  4493  0067  01AE               	clrf	_bt_status^(0+256)
  4494  0068  01AF               	clrf	(_bt_status+1)^(0+256)
  4495                           
  4496                           ;main.c: 97:     LED_EN();
  4497  0069  3199  21E3  3180   	fcall	_LED_EN
  4498                           
  4499                           ;main.c: 98:     LED_PROCESS(1,0,1);
  4500  006C  0021               	movlb	1	; select bank1
  4501  006D  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4502  006E  01A2               	clrf	LED_PROCESS@red^(0+128)
  4503  006F  0AA2               	incf	LED_PROCESS@red^(0+128),f
  4504  0070  3001               	movlw	1
  4505  0071  3192  2213  3180   	fcall	_LED_PROCESS
  4506                           
  4507                           ;main.c: 99:     LED_PROCESS(2,0,1);
  4508  0074  0021               	movlb	1	; select bank1
  4509  0075  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4510  0076  01A2               	clrf	LED_PROCESS@red^(0+128)
  4511  0077  0AA2               	incf	LED_PROCESS@red^(0+128),f
  4512  0078  3002               	movlw	2
  4513  0079  3192  2213  3180   	fcall	_LED_PROCESS
  4514                           
  4515                           ;main.c: 100:     LED_PROCESS(3,0,1);
  4516  007C  0021               	movlb	1	; select bank1
  4517  007D  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4518  007E  01A2               	clrf	LED_PROCESS@red^(0+128)
  4519  007F  0AA2               	incf	LED_PROCESS@red^(0+128),f
  4520  0080  3003               	movlw	3
  4521  0081  3192  2213  3180   	fcall	_LED_PROCESS
  4522  0084  0022               	movlb	2	; select bank2
  4523  0085  168C               	bsf	12,5	;volatile
  4524  0086  160C               	bsf	12,4	;volatile
  4525  0087  170D               	bsf	13,6	;volatile
  4526                           
  4527                           ;main.c: 104:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  4528  0088  3035               	movlw	low _myButtonPressedCallback
  4529  0089  0021               	movlb	1	; select bank1
  4530  008A  00A1               	movwf	MTOUCH_Button_SetPressedCallback@callback^(0+128)
  4531  008B  3015               	movlw	high _myButtonPressedCallback
  4532  008C  00A2               	movwf	(MTOUCH_Button_SetPressedCallback@callback^(0+128)+1)
  4533  008D  319A  223A  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  4534                           
  4535                           ;main.c: 105:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  4536  0090  30BD               	movlw	low _myButtonReleasedCallback
  4537  0091  0021               	movlb	1	; select bank1
  4538  0092  00A1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback^(0+128)
  4539  0093  301E               	movlw	high _myButtonReleasedCallback
  4540  0094  00A2               	movwf	(MTOUCH_Button_SetNotPressedCallback@callback^(0+128)+1)
  4541  0095  319A  2231  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  4542                           
  4543                           ;main.c: 106:     volatile uint8_t rxData;;main.c: 107:     volatile uint8_t prcData;;ma
      +                          in.c: 108:     check_request = 0;
  4544  0098  0022               	movlb	2	; select bank2
  4545  0099  01B9               	clrf	_check_request^(0+256)	;volatile
  4546                           
  4547                           ;main.c: 109:     config_status = 0;
  4548  009A  01BA               	clrf	_config_status^(0+256)	;volatile
  4549                           
  4550                           ;main.c: 110:     _Bool blink;;main.c: 111:     uint8_t blink_count = 0;
  4551  009B  0023               	movlb	3	; select bank3
  4552  009C  01D8               	clrf	main@blink_count^(0+384)
  4553  009D                     l8648:	
  4554                           
  4555                           ;main.c: 113:     {;main.c: 115:         if(rest == 1)
  4556  009D  0022               	movlb	2	; select bank2
  4557  009E  0338               	decf	_rest^(0+256),w	;volatile
  4558  009F  1D03               	btfss	3,2
  4559  00A0  28D5               	goto	l8672
  4560                           
  4561                           ;main.c: 116:         {;main.c: 117:             if(bt_status.BT_1_ON_OFF == 1)
  4562  00A1  1E2E               	btfss	_bt_status^(0+256),4
  4563  00A2  28A8               	goto	l8654
  4564                           
  4565                           ;main.c: 118:             {;main.c: 119:                 LED_PROCESS(1,1,0);
  4566  00A3  0021               	movlb	1	; select bank1
  4567  00A4  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4568  00A5  0AA1               	incf	LED_PROCESS@blue^(0+128),f
  4569  00A6  01A2               	clrf	LED_PROCESS@red^(0+128)
  4570  00A7  28AC               	goto	L1
  4571  00A8                     l8654:	
  4572                           ;main.c: 120:             }
  4573                           
  4574                           
  4575                           ;main.c: 122:             {;main.c: 123:                 LED_PROCESS(1,0,1);
  4576  00A8  0021               	movlb	1	; select bank1
  4577  00A9  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4578  00AA  01A2               	clrf	LED_PROCESS@red^(0+128)
  4579  00AB  0AA2               	incf	LED_PROCESS@red^(0+128),f
  4580  00AC                     L1:	
  4581  00AC  3001               	movlw	1
  4582  00AD  3192  2213  3180   	fcall	_LED_PROCESS
  4583                           
  4584                           ;main.c: 125:             if(bt_status.BT_2_ON_OFF == 1)
  4585  00B0  0022               	movlb	2	; select bank2
  4586  00B1  1EAE               	btfss	_bt_status^(0+256),5
  4587  00B2  28B8               	goto	l8660
  4588                           
  4589                           ;main.c: 126:             {;main.c: 127:                 LED_PROCESS(2,1,0);
  4590  00B3  0021               	movlb	1	; select bank1
  4591  00B4  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4592  00B5  0AA1               	incf	LED_PROCESS@blue^(0+128),f
  4593  00B6  01A2               	clrf	LED_PROCESS@red^(0+128)
  4594  00B7  28BC               	goto	L2
  4595  00B8                     l8660:	
  4596                           ;main.c: 128:             }
  4597                           
  4598                           
  4599                           ;main.c: 130:             {;main.c: 131:                 LED_PROCESS(2,0,1);
  4600  00B8  0021               	movlb	1	; select bank1
  4601  00B9  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4602  00BA  01A2               	clrf	LED_PROCESS@red^(0+128)
  4603  00BB  0AA2               	incf	LED_PROCESS@red^(0+128),f
  4604  00BC                     L2:	
  4605  00BC  3002               	movlw	2
  4606  00BD  3192  2213  3180   	fcall	_LED_PROCESS
  4607                           
  4608                           ;main.c: 133:             if(bt_status.BT_3_ON_OFF == 1)
  4609  00C0  0022               	movlb	2	; select bank2
  4610  00C1  1F2E               	btfss	_bt_status^(0+256),6
  4611  00C2  28C8               	goto	l8666
  4612                           
  4613                           ;main.c: 134:             {;main.c: 135:                 LED_PROCESS(3,1,0);
  4614  00C3  0021               	movlb	1	; select bank1
  4615  00C4  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4616  00C5  0AA1               	incf	LED_PROCESS@blue^(0+128),f
  4617  00C6  01A2               	clrf	LED_PROCESS@red^(0+128)
  4618  00C7  28CC               	goto	L3
  4619  00C8                     l8666:	
  4620                           ;main.c: 136:             }
  4621                           
  4622                           
  4623                           ;main.c: 138:             {;main.c: 139:                 LED_PROCESS(3,0,1);
  4624  00C8  0021               	movlb	1	; select bank1
  4625  00C9  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4626  00CA  01A2               	clrf	LED_PROCESS@red^(0+128)
  4627  00CB  0AA2               	incf	LED_PROCESS@red^(0+128),f
  4628  00CC                     L3:	
  4629  00CC  3003               	movlw	3
  4630  00CD  3192  2213  3180   	fcall	_LED_PROCESS
  4631                           
  4632                           ;main.c: 141:             rest = 0;
  4633  00D0  0022               	movlb	2	; select bank2
  4634  00D1  01B8               	clrf	_rest^(0+256)	;volatile
  4635                           
  4636                           ;main.c: 142:             MTOUCH_Initialize();
  4637  00D2  3187  27F4  3180   	fcall	_MTOUCH_Initialize
  4638  00D5                     l8672:	
  4639                           
  4640                           ;main.c: 144:         if(EUSART_is_rx_ready())
  4641  00D5  3199  21E0  3180   	fcall	_EUSART_is_rx_ready
  4642  00D8  3A00               	xorlw	0
  4643  00D9  1903               	skipnz
  4644  00DA  2A24               	goto	l8742
  4645                           
  4646                           ;main.c: 145:         {;main.c: 146:             rxData = EUSART_Read();
  4647  00DB  319E  2692  3180   	fcall	_EUSART_Read
  4648  00DE  0022               	movlb	2	; select bank2
  4649  00DF  00DB               	movwf	??_main^(0+256)
  4650  00E0  085B               	movf	??_main^(0+256),w
  4651  00E1  0023               	movlb	3	; select bank3
  4652  00E2  00DA               	movwf	main@rxData^(0+384)	;volatile
  4653                           
  4654                           ;main.c: 147:             if(check_data(rxData))
  4655  00E3  085A               	movf	main@rxData^(0+384),w	;volatile
  4656  00E4  3190  205C  3180   	fcall	_check_data
  4657  00E7  3A00               	xorlw	0
  4658  00E8  1903               	skipnz
  4659  00E9  2A24               	goto	l8742
  4660                           
  4661                           ;main.c: 148:             {;main.c: 149:                 if(check_request == 0)
  4662  00EA  0022               	movlb	2	; select bank2
  4663  00EB  0839               	movf	_check_request^(0+256),w	;volatile
  4664  00EC  1D03               	btfss	3,2
  4665  00ED  28FA               	goto	l8684
  4666                           
  4667                           ;main.c: 150:                 {;main.c: 151:                     prcData = rxData;
  4668  00EE  0023               	movlb	3	; select bank3
  4669  00EF  085A               	movf	main@rxData^(0+384),w	;volatile
  4670  00F0  0022               	movlb	2	; select bank2
  4671  00F1  00DB               	movwf	??_main^(0+256)
  4672  00F2  085B               	movf	??_main^(0+256),w
  4673  00F3  0023               	movlb	3	; select bank3
  4674  00F4  00D9               	movwf	main@prcData^(0+384)	;volatile
  4675                           
  4676                           ;main.c: 152:                     check_message(rxData);
  4677  00F5  085A               	movf	main@rxData^(0+384),w	;volatile
  4678  00F6  319E  2669  3180   	fcall	_check_message
  4679                           
  4680                           ;main.c: 153:                 }
  4681  00F9  2A24               	goto	l8742
  4682  00FA                     l8684:	
  4683                           
  4684                           ;main.c: 155:                 {;main.c: 156:                     if(config_status == 1)
  4685  00FA  033A               	decf	_config_status^(0+256),w	;volatile
  4686  00FB  1D03               	btfss	3,2
  4687  00FC  2A14               	goto	l8734
  4688                           
  4689                           ;main.c: 157:                     {;main.c: 158:                         if(rxData == 'T
      +                          ')
  4690  00FD  3054               	movlw	84
  4691  00FE  0023               	movlb	3	; select bank3
  4692  00FF  065A               	xorwf	main@rxData^(0+384),w	;volatile
  4693  0100  1D03               	btfss	3,2
  4694  0101  2988               	goto	l8710
  4695                           
  4696                           ;main.c: 159:                         {;main.c: 160:                             LED_PRO
      +                          CESS(1,1,0);
  4697  0102  0021               	movlb	1	; select bank1
  4698  0103  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4699  0104  0AA1               	incf	LED_PROCESS@blue^(0+128),f
  4700  0105  01A2               	clrf	LED_PROCESS@red^(0+128)
  4701  0106  3001               	movlw	1
  4702  0107  3192  2213  3180   	fcall	_LED_PROCESS
  4703                           
  4704                           ;main.c: 161:                             LED_PROCESS(2,1,0);
  4705  010A  0021               	movlb	1	; select bank1
  4706  010B  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4707  010C  0AA1               	incf	LED_PROCESS@blue^(0+128),f
  4708  010D  01A2               	clrf	LED_PROCESS@red^(0+128)
  4709  010E  3002               	movlw	2
  4710  010F  3192  2213  3180   	fcall	_LED_PROCESS
  4711                           
  4712                           ;main.c: 162:                             LED_PROCESS(3,1,0);
  4713  0112  0021               	movlb	1	; select bank1
  4714  0113  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4715  0114  0AA1               	incf	LED_PROCESS@blue^(0+128),f
  4716  0115  01A2               	clrf	LED_PROCESS@red^(0+128)
  4717  0116  3003               	movlw	3
  4718  0117  3192  2213  3180   	fcall	_LED_PROCESS
  4719                           
  4720                           ;main.c: 163:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4721  011A  3015               	movlw	21
  4722  011B  0022               	movlb	2	; select bank2
  4723  011C  00DC               	movwf	(??_main^(0+256)+1)
  4724  011D  304B               	movlw	75
  4725  011E  00DB               	movwf	??_main^(0+256)
  4726  011F  30BE               	movlw	190
  4727  0120                     u10037:	
  4728  0120  0B89               	decfsz	9,f
  4729  0121  2920               	goto	u10037
  4730  0122  0BDB               	decfsz	??_main^(0+256),f
  4731  0123  2920               	goto	u10037
  4732  0124  0BDC               	decfsz	(??_main^(0+256)+1),f
  4733  0125  2920               	goto	u10037
  4734  0126  0000               	nop
  4735                           
  4736                           ;main.c: 164:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4737  0127  3015               	movlw	21
  4738  0128  0022               	movlb	2	; select bank2
  4739  0129  00DC               	movwf	(??_main^(0+256)+1)
  4740  012A  304B               	movlw	75
  4741  012B  00DB               	movwf	??_main^(0+256)
  4742  012C  30BE               	movlw	190
  4743  012D                     u10047:	
  4744  012D  0B89               	decfsz	9,f
  4745  012E  292D               	goto	u10047
  4746  012F  0BDB               	decfsz	??_main^(0+256),f
  4747  0130  292D               	goto	u10047
  4748  0131  0BDC               	decfsz	(??_main^(0+256)+1),f
  4749  0132  292D               	goto	u10047
  4750  0133  0000               	nop
  4751                           
  4752                           ;main.c: 165:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4753  0134  3015               	movlw	21
  4754  0135  0022               	movlb	2	; select bank2
  4755  0136  00DC               	movwf	(??_main^(0+256)+1)
  4756  0137  304B               	movlw	75
  4757  0138  00DB               	movwf	??_main^(0+256)
  4758  0139  30BE               	movlw	190
  4759  013A                     u10057:	
  4760  013A  0B89               	decfsz	9,f
  4761  013B  293A               	goto	u10057
  4762  013C  0BDB               	decfsz	??_main^(0+256),f
  4763  013D  293A               	goto	u10057
  4764  013E  0BDC               	decfsz	(??_main^(0+256)+1),f
  4765  013F  293A               	goto	u10057
  4766  0140  0000               	nop
  4767                           
  4768                           ;main.c: 166:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4769  0141  3015               	movlw	21
  4770  0142  0022               	movlb	2	; select bank2
  4771  0143  00DC               	movwf	(??_main^(0+256)+1)
  4772  0144  304B               	movlw	75
  4773  0145  00DB               	movwf	??_main^(0+256)
  4774  0146  30BE               	movlw	190
  4775  0147                     u10067:	
  4776  0147  0B89               	decfsz	9,f
  4777  0148  2947               	goto	u10067
  4778  0149  0BDB               	decfsz	??_main^(0+256),f
  4779  014A  2947               	goto	u10067
  4780  014B  0BDC               	decfsz	(??_main^(0+256)+1),f
  4781  014C  2947               	goto	u10067
  4782  014D  0000               	nop
  4783                           
  4784                           ;main.c: 167:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4785  014E  3015               	movlw	21
  4786  014F  0022               	movlb	2	; select bank2
  4787  0150  00DC               	movwf	(??_main^(0+256)+1)
  4788  0151  304B               	movlw	75
  4789  0152  00DB               	movwf	??_main^(0+256)
  4790  0153  30BE               	movlw	190
  4791  0154                     u10077:	
  4792  0154  0B89               	decfsz	9,f
  4793  0155  2954               	goto	u10077
  4794  0156  0BDB               	decfsz	??_main^(0+256),f
  4795  0157  2954               	goto	u10077
  4796  0158  0BDC               	decfsz	(??_main^(0+256)+1),f
  4797  0159  2954               	goto	u10077
  4798  015A  0000               	nop
  4799                           
  4800                           ;main.c: 168:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4801  015B  3015               	movlw	21
  4802  015C  0022               	movlb	2	; select bank2
  4803  015D  00DC               	movwf	(??_main^(0+256)+1)
  4804  015E  304B               	movlw	75
  4805  015F  00DB               	movwf	??_main^(0+256)
  4806  0160  30BE               	movlw	190
  4807  0161                     u10087:	
  4808  0161  0B89               	decfsz	9,f
  4809  0162  2961               	goto	u10087
  4810  0163  0BDB               	decfsz	??_main^(0+256),f
  4811  0164  2961               	goto	u10087
  4812  0165  0BDC               	decfsz	(??_main^(0+256)+1),f
  4813  0166  2961               	goto	u10087
  4814  0167  0000               	nop
  4815                           
  4816                           ;main.c: 169:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4817  0168  3015               	movlw	21
  4818  0169  0022               	movlb	2	; select bank2
  4819  016A  00DC               	movwf	(??_main^(0+256)+1)
  4820  016B  304B               	movlw	75
  4821  016C  00DB               	movwf	??_main^(0+256)
  4822  016D  30BE               	movlw	190
  4823  016E                     u10097:	
  4824  016E  0B89               	decfsz	9,f
  4825  016F  296E               	goto	u10097
  4826  0170  0BDB               	decfsz	??_main^(0+256),f
  4827  0171  296E               	goto	u10097
  4828  0172  0BDC               	decfsz	(??_main^(0+256)+1),f
  4829  0173  296E               	goto	u10097
  4830  0174  0000               	nop
  4831                           
  4832                           ;main.c: 170:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4833  0175  3015               	movlw	21
  4834  0176  0022               	movlb	2	; select bank2
  4835  0177  00DC               	movwf	(??_main^(0+256)+1)
  4836  0178  304B               	movlw	75
  4837  0179  00DB               	movwf	??_main^(0+256)
  4838  017A  30BE               	movlw	190
  4839  017B                     u10107:	
  4840  017B  0B89               	decfsz	9,f
  4841  017C  297B               	goto	u10107
  4842  017D  0BDB               	decfsz	??_main^(0+256),f
  4843  017E  297B               	goto	u10107
  4844  017F  0BDC               	decfsz	(??_main^(0+256)+1),f
  4845  0180  297B               	goto	u10107
  4846  0181  0000               	nop
  4847                           
  4848                           ;main.c: 171:                             config_status = 0;
  4849  0182  0022               	movlb	2	; select bank2
  4850  0183  01BA               	clrf	_config_status^(0+256)	;volatile
  4851                           
  4852                           ;main.c: 172:                             rest = 1;
  4853  0184  3001               	movlw	1
  4854  0185  00DB               	movwf	??_main^(0+256)
  4855  0186  085B               	movf	??_main^(0+256),w
  4856  0187  00B8               	movwf	_rest^(0+256)	;volatile
  4857  0188                     l8710:	
  4858                           
  4859                           ;main.c: 174:                         if(rxData == 'F')
  4860  0188  3046               	movlw	70
  4861  0189  0023               	movlb	3	; select bank3
  4862  018A  065A               	xorwf	main@rxData^(0+384),w	;volatile
  4863  018B  1D03               	btfss	3,2
  4864  018C  2A24               	goto	l8742
  4865                           
  4866                           ;main.c: 175:                         {;main.c: 176:                             LED_PRO
      +                          CESS(1,0,1);
  4867  018D  0021               	movlb	1	; select bank1
  4868  018E  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4869  018F  01A2               	clrf	LED_PROCESS@red^(0+128)
  4870  0190  0AA2               	incf	LED_PROCESS@red^(0+128),f
  4871  0191  3001               	movlw	1
  4872  0192  3192  2213  3180   	fcall	_LED_PROCESS
  4873                           
  4874                           ;main.c: 177:                             LED_PROCESS(2,0,1);
  4875  0195  0021               	movlb	1	; select bank1
  4876  0196  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4877  0197  01A2               	clrf	LED_PROCESS@red^(0+128)
  4878  0198  0AA2               	incf	LED_PROCESS@red^(0+128),f
  4879  0199  3002               	movlw	2
  4880  019A  3192  2213  3180   	fcall	_LED_PROCESS
  4881                           
  4882                           ;main.c: 178:                             LED_PROCESS(3,0,1);
  4883  019D  0021               	movlb	1	; select bank1
  4884  019E  01A1               	clrf	LED_PROCESS@blue^(0+128)
  4885  019F  01A2               	clrf	LED_PROCESS@red^(0+128)
  4886  01A0  0AA2               	incf	LED_PROCESS@red^(0+128),f
  4887  01A1  3003               	movlw	3
  4888  01A2  3192  2213  3180   	fcall	_LED_PROCESS
  4889                           
  4890                           ;main.c: 179:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4891  01A5  3015               	movlw	21
  4892  01A6  0022               	movlb	2	; select bank2
  4893  01A7  00DC               	movwf	(??_main^(0+256)+1)
  4894  01A8  304B               	movlw	75
  4895  01A9  00DB               	movwf	??_main^(0+256)
  4896  01AA  30BE               	movlw	190
  4897  01AB                     u10117:	
  4898  01AB  0B89               	decfsz	9,f
  4899  01AC  29AB               	goto	u10117
  4900  01AD  0BDB               	decfsz	??_main^(0+256),f
  4901  01AE  29AB               	goto	u10117
  4902  01AF  0BDC               	decfsz	(??_main^(0+256)+1),f
  4903  01B0  29AB               	goto	u10117
  4904  01B1  0000               	nop
  4905                           
  4906                           ;main.c: 180:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4907  01B2  3015               	movlw	21
  4908  01B3  0022               	movlb	2	; select bank2
  4909  01B4  00DC               	movwf	(??_main^(0+256)+1)
  4910  01B5  304B               	movlw	75
  4911  01B6  00DB               	movwf	??_main^(0+256)
  4912  01B7  30BE               	movlw	190
  4913  01B8                     u10127:	
  4914  01B8  0B89               	decfsz	9,f
  4915  01B9  29B8               	goto	u10127
  4916  01BA  0BDB               	decfsz	??_main^(0+256),f
  4917  01BB  29B8               	goto	u10127
  4918  01BC  0BDC               	decfsz	(??_main^(0+256)+1),f
  4919  01BD  29B8               	goto	u10127
  4920  01BE  0000               	nop
  4921                           
  4922                           ;main.c: 181:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4923  01BF  3015               	movlw	21
  4924  01C0  0022               	movlb	2	; select bank2
  4925  01C1  00DC               	movwf	(??_main^(0+256)+1)
  4926  01C2  304B               	movlw	75
  4927  01C3  00DB               	movwf	??_main^(0+256)
  4928  01C4  30BE               	movlw	190
  4929  01C5                     u10137:	
  4930  01C5  0B89               	decfsz	9,f
  4931  01C6  29C5               	goto	u10137
  4932  01C7  0BDB               	decfsz	??_main^(0+256),f
  4933  01C8  29C5               	goto	u10137
  4934  01C9  0BDC               	decfsz	(??_main^(0+256)+1),f
  4935  01CA  29C5               	goto	u10137
  4936  01CB  0000               	nop
  4937                           
  4938                           ;main.c: 182:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4939  01CC  3015               	movlw	21
  4940  01CD  0022               	movlb	2	; select bank2
  4941  01CE  00DC               	movwf	(??_main^(0+256)+1)
  4942  01CF  304B               	movlw	75
  4943  01D0  00DB               	movwf	??_main^(0+256)
  4944  01D1  30BE               	movlw	190
  4945  01D2                     u10147:	
  4946  01D2  0B89               	decfsz	9,f
  4947  01D3  29D2               	goto	u10147
  4948  01D4  0BDB               	decfsz	??_main^(0+256),f
  4949  01D5  29D2               	goto	u10147
  4950  01D6  0BDC               	decfsz	(??_main^(0+256)+1),f
  4951  01D7  29D2               	goto	u10147
  4952  01D8  0000               	nop
  4953                           
  4954                           ;main.c: 183:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4955  01D9  3015               	movlw	21
  4956  01DA  0022               	movlb	2	; select bank2
  4957  01DB  00DC               	movwf	(??_main^(0+256)+1)
  4958  01DC  304B               	movlw	75
  4959  01DD  00DB               	movwf	??_main^(0+256)
  4960  01DE  30BE               	movlw	190
  4961  01DF                     u10157:	
  4962  01DF  0B89               	decfsz	9,f
  4963  01E0  29DF               	goto	u10157
  4964  01E1  0BDB               	decfsz	??_main^(0+256),f
  4965  01E2  29DF               	goto	u10157
  4966  01E3  0BDC               	decfsz	(??_main^(0+256)+1),f
  4967  01E4  29DF               	goto	u10157
  4968  01E5  0000               	nop
  4969                           
  4970                           ;main.c: 184:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4971  01E6  3015               	movlw	21
  4972  01E7  0022               	movlb	2	; select bank2
  4973  01E8  00DC               	movwf	(??_main^(0+256)+1)
  4974  01E9  304B               	movlw	75
  4975  01EA  00DB               	movwf	??_main^(0+256)
  4976  01EB  30BE               	movlw	190
  4977  01EC                     u10167:	
  4978  01EC  0B89               	decfsz	9,f
  4979  01ED  29EC               	goto	u10167
  4980  01EE  0BDB               	decfsz	??_main^(0+256),f
  4981  01EF  29EC               	goto	u10167
  4982  01F0  0BDC               	decfsz	(??_main^(0+256)+1),f
  4983  01F1  29EC               	goto	u10167
  4984  01F2  0000               	nop
  4985                           
  4986                           ;main.c: 185:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  4987  01F3  3015               	movlw	21
  4988  01F4  0022               	movlb	2	; select bank2
  4989  01F5  00DC               	movwf	(??_main^(0+256)+1)
  4990  01F6  304B               	movlw	75
  4991  01F7  00DB               	movwf	??_main^(0+256)
  4992  01F8  30BE               	movlw	190
  4993  01F9                     u10177:	
  4994  01F9  0B89               	decfsz	9,f
  4995  01FA  29F9               	goto	u10177
  4996  01FB  0BDB               	decfsz	??_main^(0+256),f
  4997  01FC  29F9               	goto	u10177
  4998  01FD  0BDC               	decfsz	(??_main^(0+256)+1),f
  4999  01FE  29F9               	goto	u10177
  5000  01FF  0000               	nop
  5001                           
  5002                           ;main.c: 186:                             _delay((unsigned long)((500)*(32000000/4000.0)
      +                          ));
  5003  0200  3015               	movlw	21
  5004  0201  0022               	movlb	2	; select bank2
  5005  0202  00DC               	movwf	(??_main^(0+256)+1)
  5006  0203  304B               	movlw	75
  5007  0204  00DB               	movwf	??_main^(0+256)
  5008  0205  30BE               	movlw	190
  5009  0206                     u10187:	
  5010  0206  0B89               	decfsz	9,f
  5011  0207  2A06               	goto	u10187
  5012  0208  0BDB               	decfsz	??_main^(0+256),f
  5013  0209  2A06               	goto	u10187
  5014  020A  0BDC               	decfsz	(??_main^(0+256)+1),f
  5015  020B  2A06               	goto	u10187
  5016  020C  0000               	nop
  5017                           
  5018                           ;main.c: 187:                             config_status = 0;
  5019  020D  0022               	movlb	2	; select bank2
  5020  020E  01BA               	clrf	_config_status^(0+256)	;volatile
  5021                           
  5022                           ;main.c: 188:                             rest = 1;
  5023  020F  3001               	movlw	1
  5024  0210  00DB               	movwf	??_main^(0+256)
  5025  0211  085B               	movf	??_main^(0+256),w
  5026  0212  00B8               	movwf	_rest^(0+256)	;volatile
  5027  0213  2A24               	goto	l8742
  5028  0214                     l8734:	
  5029                           
  5030                           ;main.c: 193:                     {;main.c: 194:                         if(rxData == 'T
      +                          ')
  5031  0214  3054               	movlw	84
  5032  0215  0023               	movlb	3	; select bank3
  5033  0216  065A               	xorwf	main@rxData^(0+384),w	;volatile
  5034  0217  1D03               	btfss	3,2
  5035  0218  2A1D               	goto	l8738
  5036                           
  5037                           ;main.c: 195:                         {;main.c: 196:                             DATA_PR
      +                          OCESS(prcData);
  5038  0219  0859               	movf	main@prcData^(0+384),w	;volatile
  5039  021A  318B  2316  3180   	fcall	_DATA_PROCESS
  5040  021D                     l8738:	
  5041                           
  5042                           ;main.c: 198:                         if(rxData == 'F')
  5043  021D  3046               	movlw	70
  5044  021E  0023               	movlb	3	; select bank3
  5045  021F  065A               	xorwf	main@rxData^(0+384),w	;volatile
  5046  0220  1D03               	btfss	3,2
  5047  0221  2A24               	goto	l8742
  5048                           
  5049                           ;main.c: 199:                         {;main.c: 200:                             check_r
      +                          equest = 0;
  5050  0222  0022               	movlb	2	; select bank2
  5051  0223  01B9               	clrf	_check_request^(0+256)	;volatile
  5052  0224                     l8742:	
  5053                           ;main.c: 204:             }
  5054                           
  5055                           
  5056                           ;main.c: 206:         if(MTOUCH_Service_Mainloop())
  5057  0224  319D  2561  3180   	fcall	_MTOUCH_Service_Mainloop
  5058  0227  3A00               	xorlw	0
  5059  0228  1903               	skipnz
  5060  0229  289D               	goto	l8648
  5061                           
  5062                           ;main.c: 207:         {;main.c: 208:             if(config_status == 0)
  5063  022A  0022               	movlb	2	; select bank2
  5064  022B  083A               	movf	_config_status^(0+256),w	;volatile
  5065  022C  1D03               	btfss	3,2
  5066  022D  2A7F               	goto	l8774
  5067                           
  5068                           ;main.c: 209:             {;main.c: 210:                 if(MTOUCH_Button_isPressed(1) =
      +                          = 1 &&
  5069  022E  3001               	movlw	1
  5070  022F  319D  2545  3180   	fcall	_MTOUCH_Button_isPressed
  5071  0232  3A01               	xorlw	1
  5072  0233  1D03               	skipz
  5073  0234  2A7B               	goto	l8772
  5074  0235  3000               	movlw	0
  5075  0236  319D  2545  3180   	fcall	_MTOUCH_Button_isPressed
  5076  0239  3A00               	xorlw	0
  5077  023A  1D03               	skipz
  5078  023B  2A7B               	goto	l8772
  5079  023C  3002               	movlw	2
  5080  023D  319D  2545  3180   	fcall	_MTOUCH_Button_isPressed
  5081  0240  3A00               	xorlw	0
  5082  0241  1D03               	skipz
  5083  0242  2A7B               	goto	l8772
  5084                           
  5085                           ;main.c: 213:                 {;main.c: 215:                     count_conf++;
  5086  0243  3001               	movlw	1
  5087  0244  0022               	movlb	2	; select bank2
  5088  0245  07AC               	addwf	_count_conf^(0+256),f
  5089  0246  3000               	movlw	0
  5090  0247  3DAD               	addwfc	(_count_conf+1)^(0+256),f
  5091                           
  5092                           ;main.c: 216:                     if(count_conf == 1500)
  5093  0248  30DC               	movlw	220
  5094  0249  062C               	xorwf	_count_conf^(0+256),w
  5095  024A  3005               	movlw	5
  5096  024B  1903               	skipnz
  5097  024C  062D               	xorwf	(_count_conf+1)^(0+256),w
  5098  024D  1D03               	btfss	3,2
  5099  024E  289D               	goto	l8648
  5100                           
  5101                           ;main.c: 217:                     {;main.c: 218:                         count_conf = 0;
  5102  024F  01AC               	clrf	_count_conf^(0+256)
  5103  0250  01AD               	clrf	(_count_conf+1)^(0+256)
  5104                           
  5105                           ;main.c: 219:                         printf("PICSMART");
  5106  0251  303E               	movlw	low (STR_3| (0+32768))
  5107  0252  00C5               	movwf	printf@fmt^(0+256)
  5108  0253  3098               	movlw	high (STR_3| (0+32768))
  5109  0254  00C6               	movwf	(printf@fmt^(0+256)+1)
  5110  0255  319B  23AF  3180   	fcall	_printf
  5111                           
  5112                           ;main.c: 220:                         config_status = 1;
  5113  0258  3001               	movlw	1
  5114  0259  0022               	movlb	2	; select bank2
  5115  025A  00DB               	movwf	??_main^(0+256)
  5116  025B  085B               	movf	??_main^(0+256),w
  5117  025C  00BA               	movwf	_config_status^(0+256)	;volatile
  5118                           
  5119                           ;main.c: 221:                         check_request = 1;
  5120  025D  3001               	movlw	1
  5121  025E  00DB               	movwf	??_main^(0+256)
  5122  025F  085B               	movf	??_main^(0+256),w
  5123  0260  00B9               	movwf	_check_request^(0+256)	;volatile
  5124                           
  5125                           ;main.c: 222:                         LED_PROCESS(2,0,1);
  5126  0261  0021               	movlb	1	; select bank1
  5127  0262  01A1               	clrf	LED_PROCESS@blue^(0+128)
  5128  0263  01A2               	clrf	LED_PROCESS@red^(0+128)
  5129  0264  0AA2               	incf	LED_PROCESS@red^(0+128),f
  5130  0265  3002               	movlw	2
  5131  0266  3192  2213  3180   	fcall	_LED_PROCESS
  5132                           
  5133                           ;main.c: 223:                         LED_PROCESS(1,0,1);
  5134  0269  0021               	movlb	1	; select bank1
  5135  026A  01A1               	clrf	LED_PROCESS@blue^(0+128)
  5136  026B  01A2               	clrf	LED_PROCESS@red^(0+128)
  5137  026C  0AA2               	incf	LED_PROCESS@red^(0+128),f
  5138  026D  3001               	movlw	1
  5139  026E  3192  2213  3180   	fcall	_LED_PROCESS
  5140                           
  5141                           ;main.c: 224:                         LED_PROCESS(3,0,1);
  5142  0271  0021               	movlb	1	; select bank1
  5143  0272  01A1               	clrf	LED_PROCESS@blue^(0+128)
  5144  0273  01A2               	clrf	LED_PROCESS@red^(0+128)
  5145  0274  0AA2               	incf	LED_PROCESS@red^(0+128),f
  5146  0275  3003               	movlw	3
  5147  0276  3192  2213  3180   	fcall	_LED_PROCESS
  5148                           
  5149                           ;main.c: 225:                         blink = 0;
  5150  0279  0023               	movlb	3	; select bank3
  5151  027A  2AC6               	goto	L4
  5152  027B                     l8772:	
  5153                           
  5154                           ;main.c: 229:                 {;main.c: 230:                     count_conf = 0;
  5155  027B  0022               	movlb	2	; select bank2
  5156  027C  01AC               	clrf	_count_conf^(0+256)
  5157  027D  01AD               	clrf	(_count_conf+1)^(0+256)
  5158  027E  289D               	goto	l8648
  5159  027F                     l8774:	
  5160                           
  5161                           ;main.c: 234:             {;main.c: 235:                 blink_count++;
  5162  027F  3001               	movlw	1
  5163  0280  00DB               	movwf	??_main^(0+256)
  5164  0281  085B               	movf	??_main^(0+256),w
  5165  0282  0023               	movlb	3	; select bank3
  5166  0283  07D8               	addwf	main@blink_count^(0+384),f
  5167                           
  5168                           ;main.c: 236:                 if(blink == 0)
  5169  0284  0857               	movf	main@blink^(0+384),w
  5170  0285  1D03               	btfss	3,2
  5171  0286  2AA8               	goto	l8784
  5172                           
  5173                           ;main.c: 237:                 {;main.c: 238:                     LED_PROCESS(1,0,1);
  5174  0287  0021               	movlb	1	; select bank1
  5175  0288  01A1               	clrf	LED_PROCESS@blue^(0+128)
  5176  0289  01A2               	clrf	LED_PROCESS@red^(0+128)
  5177  028A  0AA2               	incf	LED_PROCESS@red^(0+128),f
  5178  028B  3001               	movlw	1
  5179  028C  3192  2213  3180   	fcall	_LED_PROCESS
  5180                           
  5181                           ;main.c: 239:                     LED_PROCESS(2,0,1);
  5182  028F  0021               	movlb	1	; select bank1
  5183  0290  01A1               	clrf	LED_PROCESS@blue^(0+128)
  5184  0291  01A2               	clrf	LED_PROCESS@red^(0+128)
  5185  0292  0AA2               	incf	LED_PROCESS@red^(0+128),f
  5186  0293  3002               	movlw	2
  5187  0294  3192  2213  3180   	fcall	_LED_PROCESS
  5188                           
  5189                           ;main.c: 240:                     LED_PROCESS(3,0,1);
  5190  0297  0021               	movlb	1	; select bank1
  5191  0298  01A1               	clrf	LED_PROCESS@blue^(0+128)
  5192  0299  01A2               	clrf	LED_PROCESS@red^(0+128)
  5193  029A  0AA2               	incf	LED_PROCESS@red^(0+128),f
  5194  029B  3003               	movlw	3
  5195  029C  3192  2213  3180   	fcall	_LED_PROCESS
  5196                           
  5197                           ;main.c: 241:                     if(blink_count == 200)
  5198  029F  30C8               	movlw	200
  5199  02A0  0023               	movlb	3	; select bank3
  5200  02A1  0658               	xorwf	main@blink_count^(0+384),w
  5201  02A2  1D03               	btfss	3,2
  5202  02A3  289D               	goto	l8648
  5203                           
  5204                           ;main.c: 242:                     {;main.c: 243:                         blink_count = 0
      +                          ;
  5205  02A4  01D8               	clrf	main@blink_count^(0+384)
  5206                           
  5207                           ;main.c: 244:                         blink = 1;
  5208  02A5  01D7               	clrf	main@blink^(0+384)
  5209  02A6  0AD7               	incf	main@blink^(0+384),f
  5210  02A7  289D               	goto	l8648
  5211  02A8                     l8784:	
  5212                           
  5213                           ;main.c: 248:                 {;main.c: 249:                     LED_PROCESS(1,1,0);
  5214  02A8  0021               	movlb	1	; select bank1
  5215  02A9  01A1               	clrf	LED_PROCESS@blue^(0+128)
  5216  02AA  0AA1               	incf	LED_PROCESS@blue^(0+128),f
  5217  02AB  01A2               	clrf	LED_PROCESS@red^(0+128)
  5218  02AC  3001               	movlw	1
  5219  02AD  3192  2213  3180   	fcall	_LED_PROCESS
  5220                           
  5221                           ;main.c: 250:                     LED_PROCESS(2,1,0);
  5222  02B0  0021               	movlb	1	; select bank1
  5223  02B1  01A1               	clrf	LED_PROCESS@blue^(0+128)
  5224  02B2  0AA1               	incf	LED_PROCESS@blue^(0+128),f
  5225  02B3  01A2               	clrf	LED_PROCESS@red^(0+128)
  5226  02B4  3002               	movlw	2
  5227  02B5  3192  2213  3180   	fcall	_LED_PROCESS
  5228                           
  5229                           ;main.c: 251:                     LED_PROCESS(3,1,0);
  5230  02B8  0021               	movlb	1	; select bank1
  5231  02B9  01A1               	clrf	LED_PROCESS@blue^(0+128)
  5232  02BA  0AA1               	incf	LED_PROCESS@blue^(0+128),f
  5233  02BB  01A2               	clrf	LED_PROCESS@red^(0+128)
  5234  02BC  3003               	movlw	3
  5235  02BD  3192  2213  3180   	fcall	_LED_PROCESS
  5236                           
  5237                           ;main.c: 252:                     if(blink_count == 200)
  5238  02C0  30C8               	movlw	200
  5239  02C1  0023               	movlb	3	; select bank3
  5240  02C2  0658               	xorwf	main@blink_count^(0+384),w
  5241  02C3  1D03               	btfss	3,2
  5242  02C4  289D               	goto	l8648
  5243                           
  5244                           ;main.c: 253:                     {;main.c: 254:                         blink_count = 0
      +                          ;
  5245  02C5  01D8               	clrf	main@blink_count^(0+384)
  5246  02C6                     L4:	
  5247                           
  5248                           ;main.c: 255:                         blink = 0;
  5249  02C6  01D7               	clrf	main@blink^(0+384)
  5250                           
  5251                           ;main.c: 259:         }
  5252  02C7  289D               	goto	l8648
  5253  02C8                     __end_of_main:	
  5254                           
  5255                           	psect	text1
  5256  1E69                     __ptext1:	
  5257 ;; *************** function _check_message *****************
  5258 ;; Defined at:
  5259 ;;		line 47 in file "main.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;  x               1    wreg     unsigned char 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;  x               1   14[BANK2 ] unsigned char 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  1    wreg      void 
  5266 ;; Registers used:
  5267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5273 ;;      Params:         0       0       0       0       0       0       0       0
  5274 ;;      Locals:         0       0       0       1       0       0       0       0
  5275 ;;      Temps:          0       0       0       2       0       0       0       0
  5276 ;;      Totals:         0       0       0       3       0       0       0       0
  5277 ;;Total ram usage:        3 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:   21
  5280 ;; This function calls:
  5281 ;;		_printf
  5282 ;; This function is called by:
  5283 ;;		_main
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           
  5288                           ;psect for function _check_message
  5289  1E69                     _check_message:	
  5290                           
  5291                           ;incstack = 0
  5292 ;; hardware stack exceeded
  5293                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5294                           ;check_message@x stored from wreg
  5295  1E69  0022               	movlb	2	; select bank2
  5296  1E6A  00CE               	movwf	check_message@x^(0+256)
  5297                           
  5298                           ;main.c: 47: void check_message(uint8_t x);main.c: 48: {;main.c: 49:     switch (x)
  5299  1E6B  2E81               	goto	l8328
  5300  1E6C                     l8318:	
  5301                           
  5302                           ;main.c: 52:         {;main.c: 53:             check_request = 0;
  5303  1E6C  01B9               	clrf	_check_request^(0+256)	;volatile
  5304                           
  5305                           ;main.c: 54:             break;
  5306  1E6D  0008               	return
  5307  1E6E                     l8322:	
  5308                           
  5309                           ;main.c: 62:         {;main.c: 63:             printf("%c",x);
  5310  1E6E  3056               	movlw	low (STR_2| (0+32768))
  5311  1E6F  00C5               	movwf	printf@fmt^(0+256)
  5312  1E70  3098               	movlw	high (STR_2| (0+32768))
  5313  1E71  00C6               	movwf	(printf@fmt^(0+256)+1)
  5314  1E72  084E               	movf	check_message@x^(0+256),w
  5315  1E73  00CC               	movwf	??_check_message^(0+256)
  5316  1E74  01CD               	clrf	(??_check_message^(0+256)+1)
  5317  1E75  084C               	movf	??_check_message^(0+256),w
  5318  1E76  00C7               	movwf	(?_printf^(0+256)+2)
  5319  1E77  084D               	movf	(??_check_message+1)^(0+256),w
  5320  1E78  00C8               	movwf	((?_printf+1)^(0+256)+2)
  5321  1E79  319B  23AF         	fcall	_printf
  5322                           
  5323                           ;main.c: 64:             check_request = 1;
  5324  1E7B  3001               	movlw	1
  5325  1E7C  0022               	movlb	2	; select bank2
  5326  1E7D  00CC               	movwf	??_check_message^(0+256)
  5327  1E7E  084C               	movf	??_check_message^(0+256),w
  5328  1E7F  00B9               	movwf	_check_request^(0+256)	;volatile
  5329                           
  5330                           ;main.c: 65:             break;
  5331  1E80  0008               	return
  5332  1E81                     l8328:	
  5333  1E81  084E               	movf	check_message@x^(0+256),w
  5334  1E82  00CC               	movwf	??_check_message^(0+256)
  5335  1E83  01CD               	clrf	(??_check_message^(0+256)+1)
  5336                           
  5337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5338                           ; Switch size 1, requested type "simple"
  5339                           ; Number of cases is 1, Range of values is 0 to 0
  5340                           ; switch strategies available:
  5341                           ; Name         Instructions Cycles
  5342                           ; simple_byte            4     3 (average)
  5343                           ; direct_byte            8     6 (fixed)
  5344                           ; jumptable            260     6 (fixed)
  5345                           ;	Chosen strategy is simple_byte
  5346  1E84  084D               	movf	(??_check_message+1)^(0+256),w
  5347  1E85  3A00               	xorlw	0	; case 0
  5348  1E86  1903               	skipnz
  5349  1E87  2E89               	goto	l8950
  5350  1E88  2E6E               	goto	l8322
  5351  1E89                     l8950:	
  5352                           
  5353                           ; Switch size 1, requested type "simple"
  5354                           ; Number of cases is 2, Range of values is 70 to 84
  5355                           ; switch strategies available:
  5356                           ; Name         Instructions Cycles
  5357                           ; simple_byte            7     4 (average)
  5358                           ; direct_byte           39     9 (fixed)
  5359                           ; jumptable            263     9 (fixed)
  5360                           ;	Chosen strategy is simple_byte
  5361  1E89  084C               	movf	??_check_message^(0+256),w
  5362  1E8A  3A46               	xorlw	70	; case 70
  5363  1E8B  1903               	skipnz
  5364  1E8C  2E6C               	goto	l8318
  5365  1E8D  3A12               	xorlw	18	; case 84
  5366  1E8E  1903               	skipnz
  5367  1E8F  2E6C               	goto	l8318
  5368  1E90  2E6E               	goto	l8322
  5369  1E91  0008               	return
  5370  1E92                     __end_of_check_message:	
  5371                           
  5372                           	psect	text2
  5373  105C                     __ptext2:	
  5374 ;; *************** function _check_data *****************
  5375 ;; Defined at:
  5376 ;;		line 69 in file "main.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;  x               1    wreg     unsigned char 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  x               1    3[BANK1 ] unsigned char 
  5381 ;; Return value:  Size  Location     Type
  5382 ;;                  1    wreg      _Bool 
  5383 ;; Registers used:
  5384 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5390 ;;      Params:         0       0       0       0       0       0       0       0
  5391 ;;      Locals:         0       0       1       0       0       0       0       0
  5392 ;;      Temps:          0       0       2       0       0       0       0       0
  5393 ;;      Totals:         0       0       3       0       0       0       0       0
  5394 ;;Total ram usage:        3 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; Hardware stack levels required when called:   12
  5397 ;; This function calls:
  5398 ;;		Nothing
  5399 ;; This function is called by:
  5400 ;;		_main
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           
  5405                           ;psect for function _check_data
  5406  105C                     _check_data:	
  5407                           
  5408                           ;incstack = 0
  5409                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  5410                           ;check_data@x stored from wreg
  5411  105C  0021               	movlb	1	; select bank1
  5412  105D  00A3               	movwf	check_data@x^(0+128)
  5413                           
  5414                           ;main.c: 69: _Bool check_data(uint8_t x);main.c: 70: {;main.c: 71:     switch(x)
  5415  105E  2863               	goto	l8388
  5416  105F                     l8338:	
  5417  105F  3001               	movlw	1
  5418  1060  0008               	return
  5419  1061                     l8382:	
  5420  1061  3000               	movlw	0
  5421  1062  0008               	return
  5422  1063                     l8388:	
  5423  1063  0823               	movf	check_data@x^(0+128),w
  5424  1064  00A1               	movwf	??_check_data^(0+128)
  5425  1065  01A2               	clrf	(??_check_data^(0+128)+1)
  5426                           
  5427                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5428                           ; Switch size 1, requested type "simple"
  5429                           ; Number of cases is 1, Range of values is 0 to 0
  5430                           ; switch strategies available:
  5431                           ; Name         Instructions Cycles
  5432                           ; simple_byte            4     3 (average)
  5433                           ; direct_byte            8     6 (fixed)
  5434                           ; jumptable            260     6 (fixed)
  5435                           ;	Chosen strategy is simple_byte
  5436  1066  0822               	movf	(??_check_data+1)^(0+128),w
  5437  1067  3A00               	xorlw	0	; case 0
  5438  1068  1903               	skipnz
  5439  1069  286B               	goto	l8952
  5440  106A  2861               	goto	l8382
  5441  106B                     l8952:	
  5442                           
  5443                           ; Switch size 1, requested type "simple"
  5444                           ; Number of cases is 11, Range of values is 48 to 85
  5445                           ; switch strategies available:
  5446                           ; Name         Instructions Cycles
  5447                           ; simple_byte           34    18 (average)
  5448                           ; direct_byte           85     9 (fixed)
  5449                           ; jumptable            263     9 (fixed)
  5450                           ;	Chosen strategy is simple_byte
  5451  106B  0821               	movf	??_check_data^(0+128),w
  5452  106C  3A30               	xorlw	48	; case 48
  5453  106D  1903               	skipnz
  5454  106E  285F               	goto	l8338
  5455  106F  3A01               	xorlw	1	; case 49
  5456  1070  1903               	skipnz
  5457  1071  285F               	goto	l8338
  5458  1072  3A03               	xorlw	3	; case 50
  5459  1073  1903               	skipnz
  5460  1074  285F               	goto	l8338
  5461  1075  3A01               	xorlw	1	; case 51
  5462  1076  1903               	skipnz
  5463  1077  285F               	goto	l8338
  5464  1078  3A07               	xorlw	7	; case 52
  5465  1079  1903               	skipnz
  5466  107A  285F               	goto	l8338
  5467  107B  3A01               	xorlw	1	; case 53
  5468  107C  1903               	skipnz
  5469  107D  285F               	goto	l8338
  5470  107E  3A03               	xorlw	3	; case 54
  5471  107F  1903               	skipnz
  5472  1080  285F               	goto	l8338
  5473  1081  3A01               	xorlw	1	; case 55
  5474  1082  1903               	skipnz
  5475  1083  285F               	goto	l8338
  5476  1084  3A71               	xorlw	113	; case 70
  5477  1085  1903               	skipnz
  5478  1086  285F               	goto	l8338
  5479  1087  3A12               	xorlw	18	; case 84
  5480  1088  1903               	skipnz
  5481  1089  285F               	goto	l8338
  5482  108A  3A01               	xorlw	1	; case 85
  5483  108B  1903               	skipnz
  5484  108C  285F               	goto	l8338
  5485  108D  2861               	goto	l8382
  5486  108E  0008               	return
  5487  108F                     __end_of_check_data:	
  5488                           
  5489                           	psect	text3
  5490  1C94                     __ptext3:	
  5491 ;; *************** function _SYSTEM_Initialize *****************
  5492 ;; Defined at:
  5493 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;		None
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  1    wreg      void 
  5500 ;; Registers used:
  5501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5507 ;;      Params:         0       0       0       0       0       0       0       0
  5508 ;;      Locals:         0       0       0       0       0       0       0       0
  5509 ;;      Temps:          0       0       0       0       0       0       0       0
  5510 ;;      Totals:         0       0       0       0       0       0       0       0
  5511 ;;Total ram usage:        0 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:   17
  5514 ;; This function calls:
  5515 ;;		_EUSART_Initialize
  5516 ;;		_MTOUCH_Initialize
  5517 ;;		_OSCILLATOR_Initialize
  5518 ;;		_PIN_MANAGER_Initialize
  5519 ;;		_TMR0_Initialize
  5520 ;;		_TMR1_Initialize
  5521 ;;		_TMR2_Initialize
  5522 ;;		_WDT_Initialize
  5523 ;; This function is called by:
  5524 ;;		_main
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           
  5529                           ;psect for function _SYSTEM_Initialize
  5530  1C94                     _SYSTEM_Initialize:	
  5531                           
  5532                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  5533                           
  5534                           ;incstack = 0
  5535 ;; hardware stack exceeded
  5536                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5537  1C94  319D  25B7  319C   	fcall	_PIN_MANAGER_Initialize
  5538                           
  5539                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  5540  1C97  319A  2208  319C   	fcall	_OSCILLATOR_Initialize
  5541                           
  5542                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  5543  1C9A  3199  21F3  319C   	fcall	_WDT_Initialize
  5544                           
  5545                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  5546  1C9D  319A  2229  319C   	fcall	_TMR2_Initialize
  5547                           
  5548                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  5549  1CA0  319D  252A  319C   	fcall	_TMR1_Initialize
  5550                           
  5551                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
  5552  1CA3  319C  247C  319C   	fcall	_TMR0_Initialize
  5553                           
  5554                           ;mcc_generated_files/mcc.c: 59:     EUSART_Initialize();
  5555  1CA6  3190  20F8  319C   	fcall	_EUSART_Initialize
  5556                           
  5557                           ;mcc_generated_files/mcc.c: 60:     MTOUCH_Initialize();
  5558  1CA9  3187  27F4         	fcall	_MTOUCH_Initialize
  5559  1CAB  0008               	return
  5560  1CAC                     __end_of_SYSTEM_Initialize:	
  5561                           
  5562                           	psect	text4
  5563  19F3                     __ptext4:	
  5564 ;; *************** function _WDT_Initialize *****************
  5565 ;; Defined at:
  5566 ;;		line 71 in file "mcc_generated_files/mcc.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;		None
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;		None
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  1    wreg      void 
  5573 ;; Registers used:
  5574 ;;		wreg
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5580 ;;      Params:         0       0       0       0       0       0       0       0
  5581 ;;      Locals:         0       0       0       0       0       0       0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0       0
  5583 ;;      Totals:         0       0       0       0       0       0       0       0
  5584 ;;Total ram usage:        0 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:   12
  5587 ;; This function calls:
  5588 ;;		Nothing
  5589 ;; This function is called by:
  5590 ;;		_SYSTEM_Initialize
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           
  5595                           ;psect for function _WDT_Initialize
  5596  19F3                     _WDT_Initialize:	
  5597                           
  5598                           ;mcc_generated_files/mcc.c: 74:     WDTCON = 0x16;
  5599                           
  5600                           ;incstack = 0
  5601                           ; Regs used in _WDT_Initialize: [wreg]
  5602  19F3  3016               	movlw	22
  5603  19F4  0021               	movlb	1	; select bank1
  5604  19F5  0097               	movwf	23	;volatile
  5605  19F6  0008               	return
  5606  19F7                     __end_of_WDT_Initialize:	
  5607                           
  5608                           	psect	text5
  5609  1A29                     __ptext5:	
  5610 ;; *************** function _TMR2_Initialize *****************
  5611 ;; Defined at:
  5612 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;		None
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;		None
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  1    wreg      void 
  5619 ;; Registers used:
  5620 ;;		wreg, status,2
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5626 ;;      Params:         0       0       0       0       0       0       0       0
  5627 ;;      Locals:         0       0       0       0       0       0       0       0
  5628 ;;      Temps:          0       0       0       0       0       0       0       0
  5629 ;;      Totals:         0       0       0       0       0       0       0       0
  5630 ;;Total ram usage:        0 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; Hardware stack levels required when called:   12
  5633 ;; This function calls:
  5634 ;;		Nothing
  5635 ;; This function is called by:
  5636 ;;		_SYSTEM_Initialize
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           
  5641                           ;psect for function _TMR2_Initialize
  5642  1A29                     _TMR2_Initialize:	
  5643                           
  5644                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  5648  1A29  30FF               	movlw	255
  5649  1A2A  0020               	movlb	0	; select bank0
  5650  1A2B  009B               	movwf	27	;volatile
  5651                           
  5652                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  5653  1A2C  019A               	clrf	26	;volatile
  5654                           
  5655                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  5656  1A2D  1091               	bcf	17,1	;volatile
  5657                           
  5658                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  5659  1A2E  3004               	movlw	4
  5660  1A2F  009C               	movwf	28	;volatile
  5661  1A30  0008               	return
  5662  1A31                     __end_of_TMR2_Initialize:	
  5663                           
  5664                           	psect	text6
  5665  1D2A                     __ptext6:	
  5666 ;; *************** function _TMR1_Initialize *****************
  5667 ;; Defined at:
  5668 ;;		line 68 in file "mcc_generated_files/tmr1.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;		None
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;		None
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  1    wreg      void 
  5675 ;; Registers used:
  5676 ;;		wreg, status,2, status,0, pclath, cstack
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5682 ;;      Params:         0       0       0       0       0       0       0       0
  5683 ;;      Locals:         0       0       0       0       0       0       0       0
  5684 ;;      Temps:          0       0       0       0       0       0       0       0
  5685 ;;      Totals:         0       0       0       0       0       0       0       0
  5686 ;;Total ram usage:        0 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; Hardware stack levels required when called:   13
  5689 ;; This function calls:
  5690 ;;		_TMR1_SetInterruptHandler
  5691 ;; This function is called by:
  5692 ;;		_SYSTEM_Initialize
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           
  5697                           ;psect for function _TMR1_Initialize
  5698  1D2A                     _TMR1_Initialize:	
  5699                           
  5700                           ;mcc_generated_files/tmr1.c: 73:     T1GCON = 0x00;
  5701                           
  5702                           ;incstack = 0
  5703                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5704  1D2A  0020               	movlb	0	; select bank0
  5705  1D2B  0199               	clrf	25	;volatile
  5706                           
  5707                           ;mcc_generated_files/tmr1.c: 76:     TMR1H = 0x3C;
  5708  1D2C  303C               	movlw	60
  5709  1D2D  0097               	movwf	23	;volatile
  5710                           
  5711                           ;mcc_generated_files/tmr1.c: 79:     TMR1L = 0xB0;
  5712  1D2E  30B0               	movlw	176
  5713  1D2F  0096               	movwf	22	;volatile
  5714                           
  5715                           ;mcc_generated_files/tmr1.c: 82:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  5716  1D30  0817               	movf	23,w	;volatile
  5717  1D31  0022               	movlb	2	; select bank2
  5718  1D32  00E0               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
  5719  1D33  0020               	movlb	0	; select bank0
  5720  1D34  0816               	movf	22,w	;volatile
  5721  1D35  0022               	movlb	2	; select bank2
  5722  1D36  00DF               	movwf	_timer1ReloadVal^(0+256)	;volatile
  5723                           
  5724                           ;mcc_generated_files/tmr1.c: 85:     PIR1bits.TMR1IF = 0;
  5725  1D37  0020               	movlb	0	; select bank0
  5726  1D38  1011               	bcf	17,0	;volatile
  5727                           
  5728                           ;mcc_generated_files/tmr1.c: 88:     PIE1bits.TMR1IE = 1;
  5729  1D39  0021               	movlb	1	; select bank1
  5730  1D3A  1411               	bsf	17,0	;volatile
  5731                           
  5732                           ;mcc_generated_files/tmr1.c: 91:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  5733  1D3B  30DC               	movlw	low _TMR1_DefaultInterruptHandler
  5734  1D3C  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  5735  1D3D  3019               	movlw	high _TMR1_DefaultInterruptHandler
  5736  1D3E  00A2               	movwf	(TMR1_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5737  1D3F  319A  2294         	fcall	_TMR1_SetInterruptHandler
  5738                           
  5739                           ;mcc_generated_files/tmr1.c: 94:     T1CON = 0x31;
  5740  1D41  3031               	movlw	49
  5741  1D42  0020               	movlb	0	; select bank0
  5742  1D43  0098               	movwf	24	;volatile
  5743  1D44  0008               	return
  5744  1D45                     __end_of_TMR1_Initialize:	
  5745                           
  5746                           	psect	text7
  5747  1A94                     __ptext7:	
  5748 ;; *************** function _TMR1_SetInterruptHandler *****************
  5749 ;; Defined at:
  5750 ;;		line 208 in file "mcc_generated_files/tmr1.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  InterruptHan    2    1[BANK1 ] PTR FTN()void 
  5753 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5765 ;;      Params:         0       0       2       0       0       0       0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0       0
  5768 ;;      Totals:         0       0       2       0       0       0       0       0
  5769 ;;Total ram usage:        2 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:   12
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_TMR1_Initialize
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           
  5780                           ;psect for function _TMR1_SetInterruptHandler
  5781  1A94                     _TMR1_SetInterruptHandler:	
  5782                           
  5783                           ;mcc_generated_files/tmr1.c: 209:     TMR1_InterruptHandler = InterruptHandler;
  5784                           
  5785                           ;incstack = 0
  5786                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  5787  1A94  0021               	movlb	1	; select bank1
  5788  1A95  0822               	movf	(TMR1_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5789  1A96  0022               	movlb	2	; select bank2
  5790  1A97  00DE               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  5791  1A98  0021               	movlb	1	; select bank1
  5792  1A99  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler^(0+128),w
  5793  1A9A  0022               	movlb	2	; select bank2
  5794  1A9B  00DD               	movwf	_TMR1_InterruptHandler^(0+256)
  5795  1A9C  0008               	return
  5796  1A9D                     __end_of_TMR1_SetInterruptHandler:	
  5797                           
  5798                           	psect	text8
  5799  1C7C                     __ptext8:	
  5800 ;; *************** function _TMR0_Initialize *****************
  5801 ;; Defined at:
  5802 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;		None
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;		None
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  1    wreg      void 
  5809 ;; Registers used:
  5810 ;;		wreg, status,2, status,0, pclath, cstack
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5816 ;;      Params:         0       0       0       0       0       0       0       0
  5817 ;;      Locals:         0       0       0       0       0       0       0       0
  5818 ;;      Temps:          0       0       1       0       0       0       0       0
  5819 ;;      Totals:         0       0       1       0       0       0       0       0
  5820 ;;Total ram usage:        1 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:   13
  5823 ;; This function calls:
  5824 ;;		_TMR0_SetInterruptHandler
  5825 ;; This function is called by:
  5826 ;;		_SYSTEM_Initialize
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           
  5831                           ;psect for function _TMR0_Initialize
  5832  1C7C                     _TMR0_Initialize:	
  5833                           
  5834                           ;mcc_generated_files/tmr0.c: 70:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0x57 
      +                          & 0x3F));
  5835                           
  5836                           ;incstack = 0
  5837                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5838  1C7C  0021               	movlb	1	; select bank1
  5839  1C7D  0815               	movf	21,w	;volatile
  5840  1C7E  39C0               	andlw	192
  5841  1C7F  3817               	iorlw	23
  5842  1C80  0095               	movwf	21	;volatile
  5843                           
  5844                           ;mcc_generated_files/tmr0.c: 73:     TMR0 = 0x64;
  5845  1C81  3064               	movlw	100
  5846  1C82  0020               	movlb	0	; select bank0
  5847  1C83  0095               	movwf	21	;volatile
  5848                           
  5849                           ;mcc_generated_files/tmr0.c: 76:     timer0ReloadVal= 100;
  5850  1C84  3064               	movlw	100
  5851  1C85  0021               	movlb	1	; select bank1
  5852  1C86  00A3               	movwf	??_TMR0_Initialize^(0+128)
  5853  1C87  0823               	movf	??_TMR0_Initialize^(0+128),w
  5854  1C88  0022               	movlb	2	; select bank2
  5855  1C89  00E5               	movwf	_timer0ReloadVal^(0+256)	;volatile
  5856                           
  5857                           ;mcc_generated_files/tmr0.c: 79:     INTCONbits.TMR0IF = 0;
  5858  1C8A  110B               	bcf	11,2	;volatile
  5859                           
  5860                           ;mcc_generated_files/tmr0.c: 82:     INTCONbits.TMR0IE = 1;
  5861  1C8B  168B               	bsf	11,5	;volatile
  5862                           
  5863                           ;mcc_generated_files/tmr0.c: 85:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  5864  1C8C  30DB               	movlw	low _TMR0_DefaultInterruptHandler
  5865  1C8D  0021               	movlb	1	; select bank1
  5866  1C8E  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler^(0+128)
  5867  1C8F  3019               	movlw	high _TMR0_DefaultInterruptHandler
  5868  1C90  00A2               	movwf	(TMR0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5869  1C91  319A  228B         	fcall	_TMR0_SetInterruptHandler
  5870  1C93  0008               	return
  5871  1C94                     __end_of_TMR0_Initialize:	
  5872                           
  5873                           	psect	text9
  5874  1A8B                     __ptext9:	
  5875 ;; *************** function _TMR0_SetInterruptHandler *****************
  5876 ;; Defined at:
  5877 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;  InterruptHan    2    1[BANK1 ] PTR FTN()void 
  5880 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      void 
  5885 ;; Registers used:
  5886 ;;		wreg
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5892 ;;      Params:         0       0       2       0       0       0       0       0
  5893 ;;      Locals:         0       0       0       0       0       0       0       0
  5894 ;;      Temps:          0       0       0       0       0       0       0       0
  5895 ;;      Totals:         0       0       2       0       0       0       0       0
  5896 ;;Total ram usage:        2 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:   12
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_TMR0_Initialize
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           
  5907                           ;psect for function _TMR0_SetInterruptHandler
  5908  1A8B                     _TMR0_SetInterruptHandler:	
  5909                           
  5910                           ;mcc_generated_files/tmr0.c: 145:     TMR0_InterruptHandler = InterruptHandler;
  5911                           
  5912                           ;incstack = 0
  5913                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  5914  1A8B  0021               	movlb	1	; select bank1
  5915  1A8C  0822               	movf	(TMR0_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5916  1A8D  0022               	movlb	2	; select bank2
  5917  1A8E  00E2               	movwf	(_TMR0_InterruptHandler+1)^(0+256)
  5918  1A8F  0021               	movlb	1	; select bank1
  5919  1A90  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler^(0+128),w
  5920  1A91  0022               	movlb	2	; select bank2
  5921  1A92  00E1               	movwf	_TMR0_InterruptHandler^(0+256)
  5922  1A93  0008               	return
  5923  1A94                     __end_of_TMR0_SetInterruptHandler:	
  5924                           
  5925                           	psect	text10
  5926  1DB7                     __ptext10:	
  5927 ;; *************** function _PIN_MANAGER_Initialize *****************
  5928 ;; Defined at:
  5929 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;		None
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;		None
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  1    wreg      void 
  5936 ;; Registers used:
  5937 ;;		wreg, status,2
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5943 ;;      Params:         0       0       0       0       0       0       0       0
  5944 ;;      Locals:         0       0       0       0       0       0       0       0
  5945 ;;      Temps:          0       0       0       0       0       0       0       0
  5946 ;;      Totals:         0       0       0       0       0       0       0       0
  5947 ;;Total ram usage:        0 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:   12
  5950 ;; This function calls:
  5951 ;;		Nothing
  5952 ;; This function is called by:
  5953 ;;		_SYSTEM_Initialize
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           
  5958                           ;psect for function _PIN_MANAGER_Initialize
  5959  1DB7                     _PIN_MANAGER_Initialize:	
  5960                           
  5961                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  5962                           
  5963                           ;incstack = 0
  5964                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5965  1DB7  3037               	movlw	55
  5966  1DB8  0022               	movlb	2	; select bank2
  5967  1DB9  008C               	movwf	12	;volatile
  5968                           
  5969                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0xC0;
  5970  1DBA  30C0               	movlw	192
  5971  1DBB  008D               	movwf	13	;volatile
  5972                           
  5973                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xBF;
  5974  1DBC  30BF               	movlw	191
  5975  1DBD  008E               	movwf	14	;volatile
  5976                           
  5977                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  5978  1DBE  3008               	movlw	8
  5979  1DBF  0021               	movlb	1	; select bank1
  5980  1DC0  008C               	movwf	12	;volatile
  5981                           
  5982                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  5983  1DC1  3020               	movlw	32
  5984  1DC2  008D               	movwf	13	;volatile
  5985                           
  5986                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  5987  1DC3  3040               	movlw	64
  5988  1DC4  008E               	movwf	14	;volatile
  5989                           
  5990                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xEC;
  5991  1DC5  30EC               	movlw	236
  5992  1DC6  0023               	movlb	3	; select bank3
  5993  1DC7  008E               	movwf	14	;volatile
  5994                           
  5995                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  5996  1DC8  3040               	movlw	64
  5997  1DC9  008D               	movwf	13	;volatile
  5998                           
  5999                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  6000  1DCA  3037               	movlw	55
  6001  1DCB  008C               	movwf	12	;volatile
  6002                           
  6003                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  6004  1DCC  0024               	movlb	4	; select bank4
  6005  1DCD  018D               	clrf	13	;volatile
  6006                           
  6007                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  6008  1DCE  018C               	clrf	12	;volatile
  6009                           
  6010                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  6011  1DCF  0021               	movlb	1	; select bank1
  6012  1DD0  1795               	bsf	21,7	;volatile
  6013                           
  6014                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  6015  1DD1  0022               	movlb	2	; select bank2
  6016  1DD2  019D               	clrf	29	;volatile
  6017  1DD3  0008               	return
  6018  1DD4                     __end_of_PIN_MANAGER_Initialize:	
  6019                           
  6020                           	psect	text11
  6021  1A08                     __ptext11:	
  6022 ;; *************** function _OSCILLATOR_Initialize *****************
  6023 ;; Defined at:
  6024 ;;		line 63 in file "mcc_generated_files/mcc.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;		None
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  1    wreg      void 
  6031 ;; Registers used:
  6032 ;;		wreg, status,2
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6038 ;;      Params:         0       0       0       0       0       0       0       0
  6039 ;;      Locals:         0       0       0       0       0       0       0       0
  6040 ;;      Temps:          0       0       0       0       0       0       0       0
  6041 ;;      Totals:         0       0       0       0       0       0       0       0
  6042 ;;Total ram usage:        0 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:   12
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_SYSTEM_Initialize
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function _OSCILLATOR_Initialize
  6054  1A08                     _OSCILLATOR_Initialize:	
  6055                           
  6056                           ;mcc_generated_files/mcc.c: 66:     OSCCON = 0xF0;
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6060  1A08  30F0               	movlw	240
  6061  1A09  0021               	movlb	1	; select bank1
  6062  1A0A  0099               	movwf	25	;volatile
  6063                           
  6064                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  6065  1A0B  0022               	movlb	2	; select bank2
  6066  1A0C  0196               	clrf	22	;volatile
  6067  1A0D  0008               	return
  6068  1A0E                     __end_of_OSCILLATOR_Initialize:	
  6069                           
  6070                           	psect	text12
  6071  07F4                     __ptext12:	
  6072 ;; *************** function _MTOUCH_Initialize *****************
  6073 ;; Defined at:
  6074 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;		None
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;		None
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  1    wreg      void 
  6081 ;; Registers used:
  6082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6088 ;;      Params:         0       0       0       0       0       0       0       0
  6089 ;;      Locals:         0       0       0       0       0       0       0       0
  6090 ;;      Temps:          0       0       0       0       0       0       0       0
  6091 ;;      Totals:         0       0       0       0       0       0       0       0
  6092 ;;Total ram usage:        0 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:   16
  6095 ;; This function calls:
  6096 ;;		_MTOUCH_Button_InitializeAll
  6097 ;;		_MTOUCH_Sensor_InitializeAll
  6098 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6099 ;;		_MTOUCH_Sensor_Scan_Initialize
  6100 ;; This function is called by:
  6101 ;;		_SYSTEM_Initialize
  6102 ;;		_main
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           
  6107                           ;psect for function _MTOUCH_Initialize
  6108  07F4                     _MTOUCH_Initialize:	
  6109                           
  6110                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  6111                           
  6112                           ;incstack = 0
  6113 ;; hardware stack exceeded
  6114                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6115  07F4  319B  2344  3187   	fcall	_MTOUCH_Sensor_InitializeAll
  6116                           
  6117                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  6118  07F7  319D  259A  3187   	fcall	_MTOUCH_Button_InitializeAll
  6119                           
  6120                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  6121  07FA  319B  23C4  3187   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6122                           
  6123                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  6124  07FD  319B  2324         	fcall	_MTOUCH_Sensor_Scan_Initialize
  6125  07FF  0008               	return
  6126  0800                     __end_of_MTOUCH_Initialize:	
  6127                           
  6128                           	psect	text13
  6129  1B44                     __ptext13:	
  6130 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6131 ;; Defined at:
  6132 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;		None
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;  sensor          1   10[BANK1 ] enum E2886
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  1    wreg      void 
  6139 ;; Registers used:
  6140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6146 ;;      Params:         0       0       0       0       0       0       0       0
  6147 ;;      Locals:         0       0       1       0       0       0       0       0
  6148 ;;      Temps:          0       0       1       0       0       0       0       0
  6149 ;;      Totals:         0       0       2       0       0       0       0       0
  6150 ;;Total ram usage:        2 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:   15
  6153 ;; This function calls:
  6154 ;;		_MTOUCH_Sensor_Initialize
  6155 ;; This function is called by:
  6156 ;;		_MTOUCH_Initialize
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           
  6161                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6162  1B44                     _MTOUCH_Sensor_InitializeAll:	
  6163                           
  6164                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  6165                           
  6166                           ;incstack = 0
  6167 ;; hardware stack exceeded
  6168                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6169  1B44  0021               	movlb	1	; select bank1
  6170  1B45  01AA               	clrf	MTOUCH_Sensor_InitializeAll@sensor^(0+128)
  6171  1B46                     l7976:	
  6172                           
  6173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  6174  1B46  082A               	movf	MTOUCH_Sensor_InitializeAll@sensor^(0+128),w
  6175  1B47  319C  2464  319B   	fcall	_MTOUCH_Sensor_Initialize
  6176                           
  6177                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  6178  1B4A  3001               	movlw	1
  6179  1B4B  0021               	movlb	1	; select bank1
  6180  1B4C  00A9               	movwf	??_MTOUCH_Sensor_InitializeAll^(0+128)
  6181  1B4D  0829               	movf	??_MTOUCH_Sensor_InitializeAll^(0+128),w
  6182  1B4E  07AA               	addwf	MTOUCH_Sensor_InitializeAll@sensor^(0+128),f
  6183  1B4F  3003               	movlw	3
  6184  1B50  022A               	subwf	MTOUCH_Sensor_InitializeAll@sensor^(0+128),w
  6185  1B51  1803               	btfsc	3,0
  6186  1B52  0008               	return
  6187  1B53  2B46               	goto	l7976
  6188  1B54                     __end_of_MTOUCH_Sensor_InitializeAll:	
  6189                           
  6190                           	psect	text14
  6191  1C64                     __ptext14:	
  6192 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  6193 ;; Defined at:
  6194 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  sensor          1    wreg     enum E2886
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  sensor          1    8[BANK1 ] enum E2886
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  1    wreg      enum E2890
  6201 ;; Registers used:
  6202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6208 ;;      Params:         0       0       0       0       0       0       0       0
  6209 ;;      Locals:         0       0       1       0       0       0       0       0
  6210 ;;      Temps:          0       0       1       0       0       0       0       0
  6211 ;;      Totals:         0       0       2       0       0       0       0       0
  6212 ;;Total ram usage:        2 bytes
  6213 ;; Hardware stack levels used:    1
  6214 ;; Hardware stack levels required when called:   14
  6215 ;; This function calls:
  6216 ;;		_MTOUCH_Sensor_Calibrate
  6217 ;;		_MTOUCH_Sensor_Enable
  6218 ;;		_Sensor_Sampled_Reset
  6219 ;;		___bmul
  6220 ;; This function is called by:
  6221 ;;		_MTOUCH_Sensor_InitializeAll
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           
  6226                           ;psect for function _MTOUCH_Sensor_Initialize
  6227  1C64                     _MTOUCH_Sensor_Initialize:	
  6228                           
  6229                           ;incstack = 0
  6230 ;; hardware stack exceeded
  6231                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6232                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  6233  1C64  0021               	movlb	1	; select bank1
  6234  1C65  00A8               	movwf	MTOUCH_Sensor_Initialize@sensor^(0+128)
  6235                           
  6236                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  6237  1C66  0828               	movf	MTOUCH_Sensor_Initialize@sensor^(0+128),w
  6238  1C67  319B  239C  319C   	fcall	_MTOUCH_Sensor_Enable
  6239                           
  6240                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  6241  1C6A  0021               	movlb	1	; select bank1
  6242  1C6B  0828               	movf	MTOUCH_Sensor_Initialize@sensor^(0+128),w
  6243  1C6C  319B  2389  319C   	fcall	_MTOUCH_Sensor_Calibrate
  6244                           
  6245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  6246  1C6F  3009               	movlw	9
  6247  1C70  0021               	movlb	1	; select bank1
  6248  1C71  00A7               	movwf	??_MTOUCH_Sensor_Initialize^(0+128)
  6249  1C72  0827               	movf	??_MTOUCH_Sensor_Initialize^(0+128),w
  6250  1C73  00A1               	movwf	___bmul@multiplicand^(0+128)
  6251  1C74  0828               	movf	MTOUCH_Sensor_Initialize@sensor^(0+128),w
  6252  1C75  319B  2365  319C   	fcall	___bmul
  6253  1C78  3EA6               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  6254  1C79  319A  225E         	fcall	_Sensor_Sampled_Reset
  6255  1C7B  0008               	return
  6256  1C7C                     __end_of_MTOUCH_Sensor_Initialize:	
  6257                           
  6258                           	psect	text15
  6259  1B9C                     __ptext15:	
  6260 ;; *************** function _MTOUCH_Sensor_Enable *****************
  6261 ;; Defined at:
  6262 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;  sensor          1    wreg     enum E2886
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;  sensor          1    6[BANK1 ] enum E2886
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6276 ;;      Params:         0       0       0       0       0       0       0       0
  6277 ;;      Locals:         0       0       1       0       0       0       0       0
  6278 ;;      Temps:          0       0       1       0       0       0       0       0
  6279 ;;      Totals:         0       0       2       0       0       0       0       0
  6280 ;;Total ram usage:        2 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:   13
  6283 ;; This function calls:
  6284 ;;		___bmul
  6285 ;; This function is called by:
  6286 ;;		_MTOUCH_Sensor_Initialize
  6287 ;; This function uses a non-reentrant model
  6288 ;;
  6289                           
  6290                           
  6291                           ;psect for function _MTOUCH_Sensor_Enable
  6292  1B9C                     _MTOUCH_Sensor_Enable:	
  6293                           
  6294                           ;incstack = 0
  6295 ;; hardware stack exceeded
  6296                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6297                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  6298  1B9C  0021               	movlb	1	; select bank1
  6299  1B9D  00A6               	movwf	MTOUCH_Sensor_Enable@sensor^(0+128)
  6300                           
  6301                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  6302  1B9E  3003               	movlw	3
  6303  1B9F  0226               	subwf	MTOUCH_Sensor_Enable@sensor^(0+128),w
  6304  1BA0  1803               	skipnc
  6305  1BA1  0008               	return
  6306                           
  6307                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  6308  1BA2  3009               	movlw	9
  6309  1BA3  00A5               	movwf	??_MTOUCH_Sensor_Enable^(0+128)
  6310  1BA4  0825               	movf	??_MTOUCH_Sensor_Enable^(0+128),w
  6311  1BA5  00A1               	movwf	___bmul@multiplicand^(0+128)
  6312  1BA6  0826               	movf	MTOUCH_Sensor_Enable@sensor^(0+128),w
  6313  1BA7  319B  2365         	fcall	___bmul
  6314  1BA9  3EAE               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  6315  1BAA  0086               	movwf	6
  6316  1BAB  3001               	movlw	1	; select bank3/4
  6317  1BAC  0087               	movwf	7
  6318  1BAD  1581               	bsf	1,3
  6319  1BAE  0008               	return
  6320  1BAF                     __end_of_MTOUCH_Sensor_Enable:	
  6321                           
  6322                           	psect	text16
  6323  1D9A                     __ptext16:	
  6324 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  6325 ;; Defined at:
  6326 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  button          1   12[BANK1 ] enum E3069
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      void 
  6333 ;; Registers used:
  6334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6340 ;;      Params:         0       0       0       0       0       0       0       0
  6341 ;;      Locals:         0       0       1       0       0       0       0       0
  6342 ;;      Temps:          0       0       1       0       0       0       0       0
  6343 ;;      Totals:         0       0       2       0       0       0       0       0
  6344 ;;Total ram usage:        2 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:   15
  6347 ;; This function calls:
  6348 ;;		_MTOUCH_Button_Initialize
  6349 ;;		_memcpy
  6350 ;; This function is called by:
  6351 ;;		_MTOUCH_Initialize
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           
  6356                           ;psect for function _MTOUCH_Button_InitializeAll
  6357  1D9A                     _MTOUCH_Button_InitializeAll:	
  6358                           
  6359                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  6360                           
  6361                           ;incstack = 0
  6362 ;; hardware stack exceeded
  6363                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6364  1D9A  3000               	movlw	low (_mtouch_button_init| (0+32768))
  6365  1D9B  0021               	movlb	1	; select bank1
  6366  1D9C  00A1               	movwf	memcpy@s1^(0+128)
  6367  1D9D  3098               	movlw	high (_mtouch_button_init| (0+32768))
  6368  1D9E  00A2               	movwf	(memcpy@s1^(0+128)+1)
  6369  1D9F  3030               	movlw	48
  6370  1DA0  00A3               	movwf	memcpy@n^(0+128)
  6371  1DA1  3000               	movlw	0
  6372  1DA2  00A4               	movwf	(memcpy@n^(0+128)+1)
  6373  1DA3  3020               	movlw	(low (_mtouch_button| (0+512)))& (0+255)
  6374  1DA4  3190  2000  319D   	fcall	_memcpy
  6375                           
  6376                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  6377  1DA7  0021               	movlb	1	; select bank1
  6378  1DA8  01AC               	clrf	MTOUCH_Button_InitializeAll@button^(0+128)
  6379  1DA9                     l7990:	
  6380                           
  6381                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  6382  1DA9  082C               	movf	MTOUCH_Button_InitializeAll@button^(0+128),w
  6383  1DAA  3191  2164  319D   	fcall	_MTOUCH_Button_Initialize
  6384                           
  6385                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  6386  1DAD  3001               	movlw	1
  6387  1DAE  0021               	movlb	1	; select bank1
  6388  1DAF  00AB               	movwf	??_MTOUCH_Button_InitializeAll^(0+128)
  6389  1DB0  082B               	movf	??_MTOUCH_Button_InitializeAll^(0+128),w
  6390  1DB1  07AC               	addwf	MTOUCH_Button_InitializeAll@button^(0+128),f
  6391  1DB2  3003               	movlw	3
  6392  1DB3  022C               	subwf	MTOUCH_Button_InitializeAll@button^(0+128),w
  6393  1DB4  1803               	btfsc	3,0
  6394  1DB5  0008               	return
  6395  1DB6  2DA9               	goto	l7990
  6396  1DB7                     __end_of_MTOUCH_Button_InitializeAll:	
  6397                           
  6398                           	psect	text17
  6399  1000                     __ptext17:	
  6400 ;; *************** function _memcpy *****************
  6401 ;; Defined at:
  6402 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;  d1              1    wreg     PTR void 
  6405 ;;		 -> mtouch_button(48), 
  6406 ;;  s1              2    1[BANK1 ] PTR const void 
  6407 ;;		 -> mtouch_button_init(48), 
  6408 ;;  n               2    3[BANK1 ] unsigned int 
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;  d1              1    9[BANK1 ] PTR void 
  6411 ;;		 -> mtouch_button(48), 
  6412 ;;  s               2    7[BANK1 ] PTR const unsigned char 
  6413 ;;		 -> mtouch_button_init(48), 
  6414 ;;  d               1   10[BANK1 ] PTR unsigned char 
  6415 ;;		 -> mtouch_button(48), 
  6416 ;;  tmp             1    6[BANK1 ] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  1    wreg      PTR void 
  6419 ;; Registers used:
  6420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6426 ;;      Params:         0       0       4       0       0       0       0       0
  6427 ;;      Locals:         0       0       5       0       0       0       0       0
  6428 ;;      Temps:          0       0       1       0       0       0       0       0
  6429 ;;      Totals:         0       0      10       0       0       0       0       0
  6430 ;;Total ram usage:       10 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:   12
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_MTOUCH_Button_InitializeAll
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           
  6441                           ;psect for function _memcpy
  6442  1000                     _memcpy:	
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  6446                           ;memcpy@d1 stored from wreg
  6447  1000  0021               	movlb	1	; select bank1
  6448  1001  00A9               	movwf	memcpy@d1^(0+128)
  6449  1002  0822               	movf	(memcpy@s1+1)^(0+128),w
  6450  1003  00A8               	movwf	(memcpy@s+1)^(0+128)
  6451  1004  0821               	movf	memcpy@s1^(0+128),w
  6452  1005  00A7               	movwf	memcpy@s^(0+128)
  6453  1006  0829               	movf	memcpy@d1^(0+128),w
  6454  1007  00A5               	movwf	??_memcpy^(0+128)
  6455  1008  0825               	movf	??_memcpy^(0+128),w
  6456  1009  00AA               	movwf	memcpy@d^(0+128)
  6457  100A                     l7884:	
  6458  100A  3001               	movlw	1
  6459  100B  02A3               	subwf	memcpy@n^(0+128),f
  6460  100C  3000               	movlw	0
  6461  100D  3BA4               	subwfb	(memcpy@n+1)^(0+128),f
  6462  100E  0A23               	incf	memcpy@n^(0+128),w
  6463  100F  1903               	btfsc	3,2
  6464  1010  0A24               	incf	(memcpy@n+1)^(0+128),w
  6465  1011  1903               	btfsc	3,2
  6466  1012  0008               	return
  6467  1013  0827               	movf	memcpy@s^(0+128),w
  6468  1014  0084               	movwf	4
  6469  1015  0828               	movf	(memcpy@s+1)^(0+128),w
  6470  1016  0085               	movwf	5
  6471  1017  0800               	movf	0,w	;code access
  6472  1018  00A5               	movwf	??_memcpy^(0+128)
  6473  1019  0825               	movf	??_memcpy^(0+128),w
  6474  101A  00A6               	movwf	memcpy@tmp^(0+128)
  6475  101B  3001               	movlw	1
  6476  101C  07A7               	addwf	memcpy@s^(0+128),f
  6477  101D  3000               	movlw	0
  6478  101E  3DA8               	addwfc	(memcpy@s+1)^(0+128),f
  6479  101F  0826               	movf	memcpy@tmp^(0+128),w
  6480  1020  00A5               	movwf	??_memcpy^(0+128)
  6481  1021  082A               	movf	memcpy@d^(0+128),w
  6482  1022  0086               	movwf	6
  6483  1023  3002               	movlw	2	; select bank4/5
  6484  1024  0087               	movwf	7
  6485  1025  0825               	movf	??_memcpy^(0+128),w
  6486  1026  0081               	movwf	1
  6487  1027  3001               	movlw	1
  6488  1028  00A5               	movwf	??_memcpy^(0+128)
  6489  1029  0825               	movf	??_memcpy^(0+128),w
  6490  102A  07AA               	addwf	memcpy@d^(0+128),f
  6491  102B  280A               	goto	l7884
  6492  102C                     __end_of_memcpy:	
  6493                           
  6494                           	psect	text18
  6495  10F8                     __ptext18:	
  6496 ;; *************** function _EUSART_Initialize *****************
  6497 ;; Defined at:
  6498 ;;		line 81 in file "mcc_generated_files/eusart.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;		None
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;		None
  6503 ;; Return value:  Size  Location     Type
  6504 ;;                  1    wreg      void 
  6505 ;; Registers used:
  6506 ;;		wreg, status,2, status,0, pclath, cstack
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6512 ;;      Params:         0       0       0       0       0       0       0       0
  6513 ;;      Locals:         0       0       0       0       0       0       0       0
  6514 ;;      Temps:          0       0       0       0       0       0       0       0
  6515 ;;      Totals:         0       0       0       0       0       0       0       0
  6516 ;;Total ram usage:        0 bytes
  6517 ;; Hardware stack levels used:    1
  6518 ;; Hardware stack levels required when called:   13
  6519 ;; This function calls:
  6520 ;;		_EUSART_SetErrorHandler
  6521 ;;		_EUSART_SetFramingErrorHandler
  6522 ;;		_EUSART_SetOverrunErrorHandler
  6523 ;;		_EUSART_SetRxInterruptHandler
  6524 ;; This function is called by:
  6525 ;;		_SYSTEM_Initialize
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function _EUSART_Initialize
  6531  10F8                     _EUSART_Initialize:	
  6532                           
  6533                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  6534                           
  6535                           ;incstack = 0
  6536                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6537  10F8  0021               	movlb	1	; select bank1
  6538  10F9  1291               	bcf	17,5	;volatile
  6539                           
  6540                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6541  10FA  309B               	movlw	low _EUSART_Receive_ISR
  6542  10FB  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  6543  10FC  3011               	movlw	high _EUSART_Receive_ISR
  6544  10FD  00A2               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  6545  10FE  319A  2282  3190   	fcall	_EUSART_SetRxInterruptHandler
  6546                           
  6547                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  6548  1101  3008               	movlw	8
  6549  1102  0023               	movlb	3	; select bank3
  6550  1103  009F               	movwf	31	;volatile
  6551                           
  6552                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  6553  1104  3090               	movlw	144
  6554  1105  009D               	movwf	29	;volatile
  6555                           
  6556                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  6557  1106  3024               	movlw	36
  6558  1107  009E               	movwf	30	;volatile
  6559                           
  6560                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  6561  1108  3040               	movlw	64
  6562  1109  009B               	movwf	27	;volatile
  6563                           
  6564                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  6565  110A  3003               	movlw	3
  6566  110B  009C               	movwf	28	;volatile
  6567                           
  6568                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6569  110C  30DA               	movlw	low _EUSART_DefaultFramingErrorHandler
  6570  110D  0021               	movlb	1	; select bank1
  6571  110E  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  6572  110F  3019               	movlw	high _EUSART_DefaultFramingErrorHandler
  6573  1110  00A2               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  6574  1111  319A  2270  3190   	fcall	_EUSART_SetFramingErrorHandler
  6575                           
  6576                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6577  1114  30EF               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6578  1115  0021               	movlb	1	; select bank1
  6579  1116  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  6580  1117  3019               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6581  1118  00A2               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  6582  1119  319A  2279  3190   	fcall	_EUSART_SetOverrunErrorHandler
  6583                           
  6584                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6585  111C  30DD               	movlw	low _EUSART_DefaultErrorHandler
  6586  111D  0021               	movlb	1	; select bank1
  6587  111E  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  6588  111F  3019               	movlw	high _EUSART_DefaultErrorHandler
  6589  1120  00A2               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  6590  1121  319A  2267         	fcall	_EUSART_SetErrorHandler
  6591                           
  6592                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  6593  1123  0022               	movlb	2	; select bank2
  6594  1124  01BB               	clrf	_eusartRxLastError^(0+256)	;volatile
  6595                           
  6596                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  6597  1125  0020               	movlb	0	; select bank0
  6598  1126  01EE               	clrf	_eusartRxHead	;volatile
  6599                           
  6600                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  6601  1127  0022               	movlb	2	; select bank2
  6602  1128  01BD               	clrf	_eusartRxTail^(0+256)	;volatile
  6603                           
  6604                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  6605  1129  01BC               	clrf	_eusartRxCount^(0+256)	;volatile
  6606                           
  6607                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  6608  112A  0021               	movlb	1	; select bank1
  6609  112B  1691               	bsf	17,5	;volatile
  6610  112C  0008               	return
  6611  112D                     __end_of_EUSART_Initialize:	
  6612                           
  6613                           	psect	text19
  6614  1A82                     __ptext19:	
  6615 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  6616 ;; Defined at:
  6617 ;;		line 241 in file "mcc_generated_files/eusart.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;  interruptHan    2    1[BANK1 ] PTR FTN()void 
  6620 ;;		 -> EUSART_Receive_ISR(1), 
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6632 ;;      Params:         0       0       2       0       0       0       0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0       0
  6635 ;;      Totals:         0       0       2       0       0       0       0       0
  6636 ;;Total ram usage:        2 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:   12
  6639 ;; This function calls:
  6640 ;;		Nothing
  6641 ;; This function is called by:
  6642 ;;		_EUSART_Initialize
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _EUSART_SetRxInterruptHandler
  6648  1A82                     _EUSART_SetRxInterruptHandler:	
  6649                           
  6650                           ;mcc_generated_files/eusart.c: 242:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  6651                           
  6652                           ;incstack = 0
  6653                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  6654  1A82  0021               	movlb	1	; select bank1
  6655  1A83  0822               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  6656  1A84  0022               	movlb	2	; select bank2
  6657  1A85  00E4               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  6658  1A86  0021               	movlb	1	; select bank1
  6659  1A87  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  6660  1A88  0022               	movlb	2	; select bank2
  6661  1A89  00E3               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  6662  1A8A  0008               	return
  6663  1A8B                     __end_of_EUSART_SetRxInterruptHandler:	
  6664                           
  6665                           	psect	text20
  6666  1A79                     __ptext20:	
  6667 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6668 ;; Defined at:
  6669 ;;		line 232 in file "mcc_generated_files/eusart.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  interruptHan    2    1[BANK1 ] PTR FTN()void 
  6672 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;		None
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6684 ;;      Params:         0       0       2       0       0       0       0       0
  6685 ;;      Locals:         0       0       0       0       0       0       0       0
  6686 ;;      Temps:          0       0       0       0       0       0       0       0
  6687 ;;      Totals:         0       0       2       0       0       0       0       0
  6688 ;;Total ram usage:        2 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:   12
  6691 ;; This function calls:
  6692 ;;		Nothing
  6693 ;; This function is called by:
  6694 ;;		_EUSART_Initialize
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           
  6699                           ;psect for function _EUSART_SetOverrunErrorHandler
  6700  1A79                     _EUSART_SetOverrunErrorHandler:	
  6701                           
  6702                           ;mcc_generated_files/eusart.c: 233:     EUSART_OverrunErrorHandler = interruptHandler;
  6703                           
  6704                           ;incstack = 0
  6705                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6706  1A79  0021               	movlb	1	; select bank1
  6707  1A7A  0822               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  6708  1A7B  0023               	movlb	3	; select bank3
  6709  1A7C  00D4               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+384)
  6710  1A7D  0021               	movlb	1	; select bank1
  6711  1A7E  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  6712  1A7F  0023               	movlb	3	; select bank3
  6713  1A80  00D3               	movwf	_EUSART_OverrunErrorHandler^(0+384)
  6714  1A81  0008               	return
  6715  1A82                     __end_of_EUSART_SetOverrunErrorHandler:	
  6716                           
  6717                           	psect	text21
  6718  1A70                     __ptext21:	
  6719 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6720 ;; Defined at:
  6721 ;;		line 228 in file "mcc_generated_files/eusart.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;  interruptHan    2    1[BANK1 ] PTR FTN()void 
  6724 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      void 
  6729 ;; Registers used:
  6730 ;;		wreg
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6736 ;;      Params:         0       0       2       0       0       0       0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0
  6739 ;;      Totals:         0       0       2       0       0       0       0       0
  6740 ;;Total ram usage:        2 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:   12
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		_EUSART_Initialize
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function _EUSART_SetFramingErrorHandler
  6752  1A70                     _EUSART_SetFramingErrorHandler:	
  6753                           
  6754                           ;mcc_generated_files/eusart.c: 229:     EUSART_FramingErrorHandler = interruptHandler;
  6755                           
  6756                           ;incstack = 0
  6757                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6758  1A70  0021               	movlb	1	; select bank1
  6759  1A71  0822               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  6760  1A72  0023               	movlb	3	; select bank3
  6761  1A73  00D6               	movwf	(_EUSART_FramingErrorHandler+1)^(0+384)
  6762  1A74  0021               	movlb	1	; select bank1
  6763  1A75  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  6764  1A76  0023               	movlb	3	; select bank3
  6765  1A77  00D5               	movwf	_EUSART_FramingErrorHandler^(0+384)
  6766  1A78  0008               	return
  6767  1A79                     __end_of_EUSART_SetFramingErrorHandler:	
  6768                           
  6769                           	psect	text22
  6770  1A67                     __ptext22:	
  6771 ;; *************** function _EUSART_SetErrorHandler *****************
  6772 ;; Defined at:
  6773 ;;		line 236 in file "mcc_generated_files/eusart.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;  interruptHan    2    1[BANK1 ] PTR FTN()void 
  6776 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;		None
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      void 
  6781 ;; Registers used:
  6782 ;;		wreg
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6788 ;;      Params:         0       0       2       0       0       0       0       0
  6789 ;;      Locals:         0       0       0       0       0       0       0       0
  6790 ;;      Temps:          0       0       0       0       0       0       0       0
  6791 ;;      Totals:         0       0       2       0       0       0       0       0
  6792 ;;Total ram usage:        2 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:   12
  6795 ;; This function calls:
  6796 ;;		Nothing
  6797 ;; This function is called by:
  6798 ;;		_EUSART_Initialize
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           
  6803                           ;psect for function _EUSART_SetErrorHandler
  6804  1A67                     _EUSART_SetErrorHandler:	
  6805                           
  6806                           ;mcc_generated_files/eusart.c: 237:     EUSART_ErrorHandler = interruptHandler;
  6807                           
  6808                           ;incstack = 0
  6809                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6810  1A67  0021               	movlb	1	; select bank1
  6811  1A68  0822               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  6812  1A69  0023               	movlb	3	; select bank3
  6813  1A6A  00D2               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
  6814  1A6B  0021               	movlb	1	; select bank1
  6815  1A6C  0821               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  6816  1A6D  0023               	movlb	3	; select bank3
  6817  1A6E  00D1               	movwf	_EUSART_ErrorHandler^(0+384)
  6818  1A6F  0008               	return
  6819  1A70                     __end_of_EUSART_SetErrorHandler:	
  6820                           
  6821                           	psect	text23
  6822  1D61                     __ptext23:	
  6823 ;; *************** function _MTOUCH_Service_Mainloop *****************
  6824 ;; Defined at:
  6825 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;		None
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;		None
  6830 ;; Return value:  Size  Location     Type
  6831 ;;                  1    wreg      _Bool 
  6832 ;; Registers used:
  6833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6834 ;; Tracked objects:
  6835 ;;		On entry : 0/0
  6836 ;;		On exit  : 0/0
  6837 ;;		Unchanged: 0/0
  6838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6839 ;;      Params:         0       0       0       0       0       0       0       0
  6840 ;;      Locals:         0       0       0       0       0       0       0       0
  6841 ;;      Temps:          0       0       0       1       0       0       0       0
  6842 ;;      Totals:         0       0       0       1       0       0       0       0
  6843 ;;Total ram usage:        1 bytes
  6844 ;; Hardware stack levels used:    1
  6845 ;; Hardware stack levels required when called:   25
  6846 ;; This function calls:
  6847 ;;		_MTOUCH_Button_ServiceAll
  6848 ;;		_MTOUCH_Sensor_SampleAll
  6849 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6850 ;;		_MTOUCH_Tick
  6851 ;;		_MTOUCH_needReburst
  6852 ;; This function is called by:
  6853 ;;		_main
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           
  6858                           ;psect for function _MTOUCH_Service_Mainloop
  6859  1D61                     _MTOUCH_Service_Mainloop:	
  6860                           
  6861                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  6862                           
  6863                           ;incstack = 0
  6864 ;; hardware stack exceeded
  6865                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6866  1D61  0022               	movlb	2	; select bank2
  6867  1D62  01BF               	clrf	_mtouch_time_toScan^(0+256)
  6868  1D63  0ABF               	incf	_mtouch_time_toScan^(0+256),f
  6869                           
  6870                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  6871                           
  6872                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  6873  1D64  319B  23D9  319D   	fcall	_MTOUCH_Sensor_SampleAll
  6874  1D67  3A00               	xorlw	0
  6875  1D68  1D03               	skipz
  6876  1D69  2D6C               	goto	l8240
  6877                           
  6878                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  6879  1D6A  3000               	movlw	0
  6880  1D6B  0008               	return
  6881  1D6C                     l8240:	
  6882                           
  6883                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  6884  1D6C  319B  2314  319D   	fcall	_MTOUCH_Button_ServiceAll
  6885                           
  6886                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  6887  1D6F  3180  2002  319D   	fcall	_MTOUCH_needReburst
  6888  1D72  0022               	movlb	2	; select bank2
  6889  1D73  00DA               	movwf	??_MTOUCH_Service_Mainloop^(0+256)
  6890  1D74  085A               	movf	??_MTOUCH_Service_Mainloop^(0+256),w
  6891  1D75  00BF               	movwf	_mtouch_time_toScan^(0+256)
  6892                           
  6893                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  6894  1D76  319B  23C4  319D   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6895                           
  6896                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  6897  1D79  3199  21EC         	fcall	_MTOUCH_Tick
  6898                           
  6899                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  6900  1D7B  3001               	movlw	1
  6901  1D7C  0008               	return
  6902  1D7D                     __end_of_MTOUCH_Service_Mainloop:	
  6903                           
  6904                           	psect	text24
  6905  0002                     __ptext24:	
  6906 ;; *************** function _MTOUCH_needReburst *****************
  6907 ;; Defined at:
  6908 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;		None
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;  needReburst     1    0        _Bool 
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  1    wreg      _Bool 
  6915 ;; Registers used:
  6916 ;;		wreg, status,2
  6917 ;; Tracked objects:
  6918 ;;		On entry : 0/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6922 ;;      Params:         0       0       0       0       0       0       0       0
  6923 ;;      Locals:         0       0       1       0       0       0       0       0
  6924 ;;      Temps:          0       0       0       0       0       0       0       0
  6925 ;;      Totals:         0       0       1       0       0       0       0       0
  6926 ;;Total ram usage:        1 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:   12
  6929 ;; This function calls:
  6930 ;;		Nothing
  6931 ;; This function is called by:
  6932 ;;		_MTOUCH_Service_Mainloop
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           
  6937                           ;psect for function _MTOUCH_needReburst
  6938  0002                     _MTOUCH_needReburst:	
  6939                           
  6940                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  6941                           
  6942                           ;incstack = 0
  6943                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  6944  0002  3000               	movlw	0
  6945  0003  0008               	return
  6946  0004                     __end_of_MTOUCH_needReburst:	
  6947                           
  6948                           	psect	text25
  6949  19EC                     __ptext25:	
  6950 ;; *************** function _MTOUCH_Tick *****************
  6951 ;; Defined at:
  6952 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;		None
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;		None
  6957 ;; Return value:  Size  Location     Type
  6958 ;;                  1    wreg      void 
  6959 ;; Registers used:
  6960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6966 ;;      Params:         0       0       0       0       0       0       0       0
  6967 ;;      Locals:         0       0       0       0       0       0       0       0
  6968 ;;      Temps:          0       0       0       0       0       0       0       0
  6969 ;;      Totals:         0       0       0       0       0       0       0       0
  6970 ;;Total ram usage:        0 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; Hardware stack levels required when called:   14
  6973 ;; This function calls:
  6974 ;;		_MTOUCH_Button_Tick
  6975 ;; This function is called by:
  6976 ;;		_MTOUCH_Service_Mainloop
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _MTOUCH_Tick
  6982  19EC                     _MTOUCH_Tick:	
  6983                           
  6984                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  6985                           
  6986                           ;incstack = 0
  6987                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6988  19EC  319C  244C         	fcall	_MTOUCH_Button_Tick
  6989  19EE  0008               	return
  6990  19EF                     __end_of_MTOUCH_Tick:	
  6991                           
  6992                           	psect	text26
  6993  1C4C                     __ptext26:	
  6994 ;; *************** function _MTOUCH_Button_Tick *****************
  6995 ;; Defined at:
  6996 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;		None
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  i               1    5[BANK1 ] unsigned char 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      void 
  7003 ;; Registers used:
  7004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7010 ;;      Params:         0       0       0       0       0       0       0       0
  7011 ;;      Locals:         0       0       1       0       0       0       0       0
  7012 ;;      Temps:          0       0       1       0       0       0       0       0
  7013 ;;      Totals:         0       0       2       0       0       0       0       0
  7014 ;;Total ram usage:        2 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:   13
  7017 ;; This function calls:
  7018 ;;		_Button_Tick_helper
  7019 ;; This function is called by:
  7020 ;;		_MTOUCH_Tick
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           
  7025                           ;psect for function _MTOUCH_Button_Tick
  7026  1C4C                     _MTOUCH_Button_Tick:	
  7027                           
  7028                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  7029                           
  7030                           ;incstack = 0
  7031                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7032  1C4C  0021               	movlb	1	; select bank1
  7033  1C4D  01A5               	clrf	MTOUCH_Button_Tick@i^(0+128)
  7034  1C4E                     l8012:	
  7035                           
  7036                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  7037  1C4E  0825               	movf	MTOUCH_Button_Tick@i^(0+128),w
  7038  1C4F  00A4               	movwf	??_MTOUCH_Button_Tick^(0+128)
  7039  1C50  3003               	movlw	3
  7040  1C51                     u9405:	
  7041  1C51  35A4               	lslf	??_MTOUCH_Button_Tick^(0+128),f
  7042  1C52  3EFF               	addlw	-1
  7043  1C53  1D03               	skipz
  7044  1C54  2C51               	goto	u9405
  7045  1C55  3524               	lslf	??_MTOUCH_Button_Tick^(0+128),w
  7046  1C56  3E20               	addlw	(low (_mtouch_button| (0+512)))& (0+255)
  7047  1C57  319E  2641  319C   	fcall	_Button_Tick_helper
  7048                           
  7049                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  7050  1C5A  3001               	movlw	1
  7051  1C5B  0021               	movlb	1	; select bank1
  7052  1C5C  00A4               	movwf	??_MTOUCH_Button_Tick^(0+128)
  7053  1C5D  0824               	movf	??_MTOUCH_Button_Tick^(0+128),w
  7054  1C5E  07A5               	addwf	MTOUCH_Button_Tick@i^(0+128),f
  7055  1C5F  3003               	movlw	3
  7056  1C60  0225               	subwf	MTOUCH_Button_Tick@i^(0+128),w
  7057  1C61  1803               	btfsc	3,0
  7058  1C62  0008               	return
  7059  1C63  2C4E               	goto	l8012
  7060  1C64                     __end_of_MTOUCH_Button_Tick:	
  7061                           
  7062                           	psect	text27
  7063  1E41                     __ptext27:	
  7064 ;; *************** function _Button_Tick_helper *****************
  7065 ;; Defined at:
  7066 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  button          1    wreg     PTR struct .
  7069 ;;		 -> mtouch_button(48), 
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;  button          1    3[BANK1 ] PTR struct .
  7072 ;;		 -> mtouch_button(48), 
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      void 
  7075 ;; Registers used:
  7076 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7082 ;;      Params:         0       0       0       0       0       0       0       0
  7083 ;;      Locals:         0       0       1       0       0       0       0       0
  7084 ;;      Temps:          0       0       2       0       0       0       0       0
  7085 ;;      Totals:         0       0       3       0       0       0       0       0
  7086 ;;Total ram usage:        3 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:   12
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_MTOUCH_Button_Tick
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           
  7097                           ;psect for function _Button_Tick_helper
  7098  1E41                     _Button_Tick_helper:	
  7099                           
  7100                           ;incstack = 0
  7101                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  7102                           ;Button_Tick_helper@button stored from wreg
  7103  1E41  0021               	movlb	1	; select bank1
  7104  1E42  00A3               	movwf	Button_Tick_helper@button^(0+128)
  7105                           
  7106                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  7107  1E43  0823               	movf	Button_Tick_helper@button^(0+128),w
  7108  1E44  3E02               	addlw	2
  7109  1E45  0086               	movwf	6
  7110  1E46  3002               	movlw	2	; select bank4/5
  7111  1E47  0087               	movwf	7
  7112  1E48  3002               	movlw	2
  7113  1E49  0601               	xorwf	1,w
  7114  1E4A  1D03               	btfss	3,2
  7115  1E4B  0008               	return
  7116                           
  7117                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  7118  1E4C  0823               	movf	Button_Tick_helper@button^(0+128),w
  7119  1E4D  3E0A               	addlw	10
  7120  1E4E  0086               	movwf	6
  7121  1E4F  3002               	movlw	2	; select bank4/5
  7122  1E50  0087               	movwf	7
  7123  1E51  3001               	movlw	1
  7124  1E52  0781               	addwf	1,f
  7125  1E53  3141               	addfsr 1,1
  7126  1E54  1803               	skipnc
  7127  1E55  0A81               	incf	1,f
  7128                           
  7129                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  7130  1E56  0823               	movf	Button_Tick_helper@button^(0+128),w
  7131  1E57  3E0A               	addlw	10
  7132  1E58  0086               	movwf	6
  7133  1E59  3002               	movlw	2	; select bank4/5
  7134  1E5A  0087               	movwf	7
  7135  1E5B  0016               	moviw fsr1++
  7136  1E5C  0401               	iorwf	1,w
  7137  1E5D  1D03               	btfss	3,2
  7138  1E5E  0008               	return
  7139                           
  7140                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  7141  1E5F  0823               	movf	Button_Tick_helper@button^(0+128),w
  7142  1E60  3E0A               	addlw	10
  7143  1E61  0086               	movwf	6
  7144  1E62  3002               	movlw	2	; select bank4/5
  7145  1E63  0087               	movwf	7
  7146  1E64  30FF               	movlw	255
  7147  1E65  3FC0               	movwi [0]fsr1
  7148  1E66  30FF               	movlw	255
  7149  1E67  3FC1               	movwi [1]fsr1
  7150  1E68  0008               	return
  7151  1E69                     __end_of_Button_Tick_helper:	
  7152                           
  7153                           	psect	text28
  7154  1BC4                     __ptext28:	
  7155 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  7156 ;; Defined at:
  7157 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;		None
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;  sensor          1    3[BANK1 ] PTR struct .
  7162 ;;		 -> mtouch_sensor(27), 
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      void 
  7165 ;; Registers used:
  7166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7172 ;;      Params:         0       0       0       0       0       0       0       0
  7173 ;;      Locals:         0       0       1       0       0       0       0       0
  7174 ;;      Temps:          0       0       1       0       0       0       0       0
  7175 ;;      Totals:         0       0       2       0       0       0       0       0
  7176 ;;Total ram usage:        2 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:   13
  7179 ;; This function calls:
  7180 ;;		_Sensor_Sampled_Reset
  7181 ;; This function is called by:
  7182 ;;		_MTOUCH_Initialize
  7183 ;;		_MTOUCH_Service_Mainloop
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           
  7188                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  7189  1BC4                     _MTOUCH_Sensor_Sampled_ResetAll:	
  7190                           
  7191                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  7192                           
  7193                           ;incstack = 0
  7194                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  7195  1BC4  30A6               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7196  1BC5  0021               	movlb	1	; select bank1
  7197  1BC6  00A2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll^(0+128)
  7198  1BC7  0822               	movf	??_MTOUCH_Sensor_Sampled_ResetAll^(0+128),w
  7199  1BC8  00A3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor^(0+128)
  7200  1BC9                     L5:	
  7201  1BC9  30B8               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  7202  1BCA  00A2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll^(0+128)
  7203  1BCB  0823               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor^(0+128),w
  7204  1BCC  0222               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll^(0+128),w
  7205  1BCD  1C03               	btfss	3,0
  7206  1BCE  0008               	return
  7207                           
  7208                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  7209  1BCF  0823               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor^(0+128),w
  7210  1BD0  319A  225E  319B   	fcall	_Sensor_Sampled_Reset
  7211                           
  7212                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  7213  1BD3  3009               	movlw	9
  7214  1BD4  0021               	movlb	1	; select bank1
  7215  1BD5  00A2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll^(0+128)
  7216  1BD6  0822               	movf	??_MTOUCH_Sensor_Sampled_ResetAll^(0+128),w
  7217  1BD7  07A3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor^(0+128),f
  7218  1BD8  2BC9               	goto	L5
  7219  1BD9                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  7220                           
  7221                           	psect	text29
  7222  1A5E                     __ptext29:	
  7223 ;; *************** function _Sensor_Sampled_Reset *****************
  7224 ;; Defined at:
  7225 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;  sensor          1    wreg     PTR struct .
  7228 ;;		 -> mtouch_sensor(27), 
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;  sensor          1    1[BANK1 ] PTR struct .
  7231 ;;		 -> mtouch_sensor(27), 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      void 
  7234 ;; Registers used:
  7235 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7241 ;;      Params:         0       0       0       0       0       0       0       0
  7242 ;;      Locals:         0       0       1       0       0       0       0       0
  7243 ;;      Temps:          0       0       0       0       0       0       0       0
  7244 ;;      Totals:         0       0       1       0       0       0       0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:   12
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_MTOUCH_Sensor_Initialize
  7252 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           
  7257                           ;psect for function _Sensor_Sampled_Reset
  7258  1A5E                     _Sensor_Sampled_Reset:	
  7259                           
  7260                           ;incstack = 0
  7261                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7262                           ;Sensor_Sampled_Reset@sensor stored from wreg
  7263  1A5E  0021               	movlb	1	; select bank1
  7264  1A5F  00A1               	movwf	Sensor_Sampled_Reset@sensor^(0+128)
  7265                           
  7266                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  7267  1A60  0821               	movf	Sensor_Sampled_Reset@sensor^(0+128),w
  7268  1A61  3E08               	addlw	8
  7269  1A62  0086               	movwf	6
  7270  1A63  3001               	movlw	1	; select bank2/3
  7271  1A64  0087               	movwf	7
  7272  1A65  1001               	bcf	1,0
  7273  1A66  0008               	return
  7274  1A67                     __end_of_Sensor_Sampled_Reset:	
  7275                           
  7276                           	psect	text30
  7277  1BD9                     __ptext30:	
  7278 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  7279 ;; Defined at:
  7280 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;		None
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  group           1   70[BANK1 ] unsigned char 
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  1    wreg      _Bool 
  7287 ;; Registers used:
  7288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7294 ;;      Params:         0       0       0       0       0       0       0       0
  7295 ;;      Locals:         0       0       1       0       0       0       0       0
  7296 ;;      Temps:          0       0       1       0       0       0       0       0
  7297 ;;      Totals:         0       0       2       0       0       0       0       0
  7298 ;;Total ram usage:        2 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:   18
  7301 ;; This function calls:
  7302 ;;		_Sensor_Service
  7303 ;; This function is called by:
  7304 ;;		_MTOUCH_Service_Mainloop
  7305 ;; This function uses a non-reentrant model
  7306 ;;
  7307                           
  7308                           
  7309                           ;psect for function _MTOUCH_Sensor_SampleAll
  7310  1BD9                     _MTOUCH_Sensor_SampleAll:	
  7311                           
  7312                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  7313                           
  7314                           ;incstack = 0
  7315 ;; hardware stack exceeded
  7316                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7317  1BD9  0021               	movlb	1	; select bank1
  7318  1BDA  01E6               	clrf	MTOUCH_Sensor_SampleAll@group^(0+128)
  7319  1BDB                     l8104:	
  7320                           
  7321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  7322  1BDB  0866               	movf	MTOUCH_Sensor_SampleAll@group^(0+128),w
  7323  1BDC  3196  26D0  319B   	fcall	_Sensor_Service
  7324  1BDF  3A00               	xorlw	0
  7325  1BE0  1903               	skipnz
  7326  1BE1  2BE4               	goto	l8110
  7327                           
  7328                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  7329  1BE2  3000               	movlw	0
  7330  1BE3  0008               	return
  7331  1BE4                     l8110:	
  7332                           
  7333                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  7334  1BE4  3001               	movlw	1
  7335  1BE5  0021               	movlb	1	; select bank1
  7336  1BE6  00E5               	movwf	??_MTOUCH_Sensor_SampleAll^(0+128)
  7337  1BE7  0865               	movf	??_MTOUCH_Sensor_SampleAll^(0+128),w
  7338  1BE8  07E6               	addwf	MTOUCH_Sensor_SampleAll@group^(0+128),f
  7339  1BE9  3002               	movlw	2
  7340  1BEA  0266               	subwf	MTOUCH_Sensor_SampleAll@group^(0+128),w
  7341  1BEB  1C03               	skipc
  7342  1BEC  2BDB               	goto	l8104
  7343                           
  7344                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  7345  1BED  3001               	movlw	1
  7346  1BEE  0008               	return
  7347  1BEF                     __end_of_MTOUCH_Sensor_SampleAll:	
  7348                           
  7349                           	psect	text31
  7350  16D0                     __ptext31:	
  7351 ;; *************** function _Sensor_Service *****************
  7352 ;; Defined at:
  7353 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;  scanGroup       1    wreg     unsigned char 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  scanGroup       1   65[BANK1 ] unsigned char 
  7358 ;;  sensor_adc2     1   68[BANK1 ] PTR struct .
  7359 ;;		 -> mtouch_sensor(27), 
  7360 ;;  sensor_adc1     1   67[BANK1 ] PTR struct .
  7361 ;;		 -> NULL(0), mtouch_sensor(27), 
  7362 ;;  error           1   66[BANK1 ] enum E2890
  7363 ;; Return value:  Size  Location     Type
  7364 ;;                  1    wreg      enum E2890
  7365 ;; Registers used:
  7366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7372 ;;      Params:         0       0       0       0       0       0       0       0
  7373 ;;      Locals:         0       0       4       0       0       0       0       0
  7374 ;;      Temps:          0       0       3       0       0       0       0       0
  7375 ;;      Totals:         0       0       7       0       0       0       0       0
  7376 ;;Total ram usage:        7 bytes
  7377 ;; Hardware stack levels used:    1
  7378 ;; Hardware stack levels required when called:   17
  7379 ;; This function calls:
  7380 ;;		_Sensor_Acquisition
  7381 ;;		_Sensor_DefaultCallback
  7382 ;;		_Sensor_RawSample_Update
  7383 ;;		_Sensor_isEnabled
  7384 ;;		_Sensor_setSampled
  7385 ;; This function is called by:
  7386 ;;		_MTOUCH_Sensor_SampleAll
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _Sensor_Service
  7392  16D0                     _Sensor_Service:	
  7393                           
  7394                           ;incstack = 0
  7395 ;; hardware stack exceeded
  7396                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7397                           ;Sensor_Service@scanGroup stored from wreg
  7398  16D0  0021               	movlb	1	; select bank1
  7399  16D1  00E1               	movwf	Sensor_Service@scanGroup^(0+128)
  7400                           
  7401                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  7402  16D2  0861               	movf	Sensor_Service@scanGroup^(0+128),w
  7403  16D3  00DE               	movwf	??_Sensor_Service^(0+128)
  7404  16D4  01DF               	clrf	(??_Sensor_Service^(0+128)+1)
  7405  16D5  35DE               	lslf	??_Sensor_Service^(0+128),f
  7406  16D6  0DDF               	rlf	(??_Sensor_Service^(0+128)+1),f
  7407  16D7  3052               	movlw	low (_sensor_scan_group| (0+32768))
  7408  16D8  075E               	addwf	??_Sensor_Service^(0+128),w
  7409  16D9  0084               	movwf	4
  7410  16DA  3098               	movlw	high (_sensor_scan_group| (0+32768))
  7411  16DB  3D5F               	addwfc	(??_Sensor_Service+1)^(0+128),w
  7412  16DC  0085               	movwf	5
  7413  16DD  0800               	movf	0,w	;code access
  7414  16DE  00E0               	movwf	(??_Sensor_Service+2)^(0+128)
  7415  16DF  0860               	movf	(??_Sensor_Service+2)^(0+128),w
  7416  16E0  00E3               	movwf	Sensor_Service@sensor_adc1^(0+128)
  7417                           
  7418                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  7419  16E1  0861               	movf	Sensor_Service@scanGroup^(0+128),w
  7420  16E2  00DE               	movwf	??_Sensor_Service^(0+128)
  7421  16E3  01DF               	clrf	(??_Sensor_Service^(0+128)+1)
  7422  16E4  35DE               	lslf	??_Sensor_Service^(0+128),f
  7423  16E5  0DDF               	rlf	(??_Sensor_Service^(0+128)+1),f
  7424  16E6  3053               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7425  16E7  075E               	addwf	??_Sensor_Service^(0+128),w
  7426  16E8  0084               	movwf	4
  7427  16E9  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7428  16EA  3D5F               	addwfc	(??_Sensor_Service+1)^(0+128),w
  7429  16EB  0085               	movwf	5
  7430  16EC  0800               	movf	0,w	;code access
  7431  16ED  00E0               	movwf	(??_Sensor_Service+2)^(0+128)
  7432  16EE  0860               	movf	(??_Sensor_Service+2)^(0+128),w
  7433  16EF  00E4               	movwf	Sensor_Service@sensor_adc2^(0+128)
  7434                           
  7435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  7436  16F0  0864               	movf	Sensor_Service@sensor_adc2^(0+128),w
  7437  16F1  00DE               	movwf	??_Sensor_Service^(0+128)
  7438  16F2  085E               	movf	??_Sensor_Service^(0+128),w
  7439  16F3  00DA               	movwf	Sensor_Acquisition@sensor_adc2^(0+128)
  7440  16F4  0863               	movf	Sensor_Service@sensor_adc1^(0+128),w
  7441  16F5  3193  23A6  3196   	fcall	_Sensor_Acquisition
  7442  16F8  0021               	movlb	1	; select bank1
  7443  16F9  00DF               	movwf	(??_Sensor_Service+1)^(0+128)
  7444  16FA  085F               	movf	(??_Sensor_Service+1)^(0+128),w
  7445  16FB  00E2               	movwf	Sensor_Service@error^(0+128)
  7446                           
  7447                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  7448  16FC  2F41               	goto	l8044
  7449  16FD                     l8022:	
  7450                           
  7451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  7452  16FD  0863               	movf	Sensor_Service@sensor_adc1^(0+128),w
  7453  16FE  319B  2377  3196   	fcall	_Sensor_isEnabled
  7454  1701  3A00               	xorlw	0
  7455  1702  1903               	skipnz
  7456  1703  2F1E               	goto	l8032
  7457                           
  7458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  7459  1704  0022               	movlb	2	; select bank2
  7460  1705  083E               	movf	_lowpowerActivated^(0+256),w
  7461  1706  1D03               	btfss	3,2
  7462  1707  2F0D               	goto	l8028
  7463                           
  7464                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  7465  1708  0021               	movlb	1	; select bank1
  7466  1709  0863               	movf	Sensor_Service@sensor_adc1^(0+128),w
  7467  170A  319E  26E8  3196   	fcall	_Sensor_RawSample_Update
  7468  170D                     l8028:	
  7469                           
  7470                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  7471  170D  0021               	movlb	1	; select bank1
  7472  170E  0863               	movf	Sensor_Service@sensor_adc1^(0+128),w
  7473  170F  319A  2255  3196   	fcall	_Sensor_setSampled
  7474                           
  7475                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  7476  1712  0021               	movlb	1	; select bank1
  7477  1713  0863               	movf	Sensor_Service@sensor_adc1^(0+128),w
  7478  1714  0086               	movwf	6
  7479  1715  3001               	movlw	1	; select bank2/3
  7480  1716  0087               	movwf	7
  7481  1717  0801               	movf	1,w
  7482  1718  00DE               	movwf	??_Sensor_Service^(0+128)
  7483  1719  085E               	movf	??_Sensor_Service^(0+128),w
  7484  171A  00A1               	movwf	Sensor_DefaultCallback@sensor^(0+128)
  7485  171B  3188  2001  3196   	fcall	_Sensor_DefaultCallback
  7486  171E                     l8032:	
  7487                           
  7488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  7489  171E  0021               	movlb	1	; select bank1
  7490  171F  0864               	movf	Sensor_Service@sensor_adc2^(0+128),w
  7491  1720  319B  2377  3196   	fcall	_Sensor_isEnabled
  7492  1723  3A00               	xorlw	0
  7493  1724  1903               	skipnz
  7494  1725  2F64               	goto	l8046
  7495                           
  7496                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  7497  1726  0022               	movlb	2	; select bank2
  7498  1727  083E               	movf	_lowpowerActivated^(0+256),w
  7499  1728  1D03               	btfss	3,2
  7500  1729  2F2F               	goto	l8038
  7501                           
  7502                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  7503  172A  0021               	movlb	1	; select bank1
  7504  172B  0864               	movf	Sensor_Service@sensor_adc2^(0+128),w
  7505  172C  319E  26E8  3196   	fcall	_Sensor_RawSample_Update
  7506  172F                     l8038:	
  7507                           
  7508                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  7509  172F  0021               	movlb	1	; select bank1
  7510  1730  0864               	movf	Sensor_Service@sensor_adc2^(0+128),w
  7511  1731  319A  2255  3196   	fcall	_Sensor_setSampled
  7512                           
  7513                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  7514  1734  0021               	movlb	1	; select bank1
  7515  1735  0864               	movf	Sensor_Service@sensor_adc2^(0+128),w
  7516  1736  0086               	movwf	6
  7517  1737  3001               	movlw	1	; select bank2/3
  7518  1738  0087               	movwf	7
  7519  1739  0801               	movf	1,w
  7520  173A  00DE               	movwf	??_Sensor_Service^(0+128)
  7521  173B  085E               	movf	??_Sensor_Service^(0+128),w
  7522  173C  00A1               	movwf	Sensor_DefaultCallback@sensor^(0+128)
  7523  173D  3188  2001  3196   	fcall	_Sensor_DefaultCallback
  7524  1740  2F64               	goto	l8046
  7525  1741                     l8044:	
  7526  1741  0862               	movf	Sensor_Service@error^(0+128),w
  7527  1742  00DE               	movwf	??_Sensor_Service^(0+128)
  7528  1743  01DF               	clrf	(??_Sensor_Service^(0+128)+1)
  7529  1744  1BDE               	btfsc	??_Sensor_Service^(0+128),7
  7530  1745  03DF               	decf	(??_Sensor_Service^(0+128)+1),f
  7531                           
  7532                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7533                           ; Switch size 1, requested type "simple"
  7534                           ; Number of cases is 2, Range of values is 0 to 255
  7535                           ; switch strategies available:
  7536                           ; Name         Instructions Cycles
  7537                           ; simple_byte            7     4 (average)
  7538                           ; jumptable            260     6 (fixed)
  7539                           ;	Chosen strategy is simple_byte
  7540  1746  085F               	movf	(??_Sensor_Service+1)^(0+128),w
  7541  1747  3A00               	xorlw	0	; case 0
  7542  1748  1903               	skipnz
  7543  1749  2F4E               	goto	l8954
  7544  174A  3AFF               	xorlw	255	; case 255
  7545  174B  1903               	skipnz
  7546  174C  2F53               	goto	l8956
  7547  174D  2F64               	goto	l8046
  7548  174E                     l8954:	
  7549                           
  7550                           ; Switch size 1, requested type "simple"
  7551                           ; Number of cases is 1, Range of values is 0 to 0
  7552                           ; switch strategies available:
  7553                           ; Name         Instructions Cycles
  7554                           ; simple_byte            4     3 (average)
  7555                           ; direct_byte            8     6 (fixed)
  7556                           ; jumptable            260     6 (fixed)
  7557                           ;	Chosen strategy is simple_byte
  7558  174E  085E               	movf	??_Sensor_Service^(0+128),w
  7559  174F  3A00               	xorlw	0	; case 0
  7560  1750  1903               	skipnz
  7561  1751  2EFD               	goto	l8022
  7562  1752  2F64               	goto	l8046
  7563  1753                     l8956:	
  7564                           
  7565                           ; Switch size 1, requested type "simple"
  7566                           ; Number of cases is 5, Range of values is 251 to 255
  7567                           ; switch strategies available:
  7568                           ; Name         Instructions Cycles
  7569                           ; direct_byte           15     5 (fixed)
  7570                           ; simple_byte           16     9 (average)
  7571                           ; jumptable            263     9 (fixed)
  7572                           ;	Chosen strategy is simple_byte
  7573  1753  085E               	movf	??_Sensor_Service^(0+128),w
  7574  1754  3AFB               	xorlw	251	; case 251
  7575  1755  1903               	skipnz
  7576  1756  2F64               	goto	l8046
  7577  1757  3A07               	xorlw	7	; case 252
  7578  1758  1903               	skipnz
  7579  1759  2F64               	goto	l8046
  7580  175A  3A01               	xorlw	1	; case 253
  7581  175B  1903               	skipnz
  7582  175C  2F64               	goto	l8046
  7583  175D  3A03               	xorlw	3	; case 254
  7584  175E  1903               	skipnz
  7585  175F  2F64               	goto	l8046
  7586  1760  3A01               	xorlw	1	; case 255
  7587  1761  1903               	skipnz
  7588  1762  2F64               	goto	l8046
  7589  1763  2F64               	goto	l8046
  7590  1764                     l8046:	
  7591                           
  7592                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  7593  1764  0021               	movlb	1	; select bank1
  7594  1765  0862               	movf	Sensor_Service@error^(0+128),w
  7595  1766  0008               	return
  7596  1767                     __end_of_Sensor_Service:	
  7597                           
  7598                           	psect	text32
  7599  1A55                     __ptext32:	
  7600 ;; *************** function _Sensor_setSampled *****************
  7601 ;; Defined at:
  7602 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;  sensor          1    wreg     PTR struct .
  7605 ;;		 -> NULL(0), mtouch_sensor(27), 
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;  sensor          1    1[BANK1 ] PTR struct .
  7608 ;;		 -> NULL(0), mtouch_sensor(27), 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7618 ;;      Params:         0       0       0       0       0       0       0       0
  7619 ;;      Locals:         0       0       1       0       0       0       0       0
  7620 ;;      Temps:          0       0       0       0       0       0       0       0
  7621 ;;      Totals:         0       0       1       0       0       0       0       0
  7622 ;;Total ram usage:        1 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:   12
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_Sensor_Service
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           
  7633                           ;psect for function _Sensor_setSampled
  7634  1A55                     _Sensor_setSampled:	
  7635                           
  7636                           ;incstack = 0
  7637                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  7638                           ;Sensor_setSampled@sensor stored from wreg
  7639  1A55  0021               	movlb	1	; select bank1
  7640  1A56  00A1               	movwf	Sensor_setSampled@sensor^(0+128)
  7641                           
  7642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  7643  1A57  0821               	movf	Sensor_setSampled@sensor^(0+128),w
  7644  1A58  3E08               	addlw	8
  7645  1A59  0086               	movwf	6
  7646  1A5A  3001               	movlw	1	; select bank2/3
  7647  1A5B  0087               	movwf	7
  7648  1A5C  1401               	bsf	1,0
  7649  1A5D  0008               	return
  7650  1A5E                     __end_of_Sensor_setSampled:	
  7651                           
  7652                           	psect	text33
  7653  1EE8                     __ptext33:	
  7654 ;; *************** function _Sensor_RawSample_Update *****************
  7655 ;; Defined at:
  7656 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;  sensor          1    wreg     PTR struct .
  7659 ;;		 -> NULL(0), mtouch_sensor(27), 
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;  sensor          1    7[BANK1 ] PTR struct .
  7662 ;;		 -> NULL(0), mtouch_sensor(27), 
  7663 ;;  adcIndex        1    6[BANK1 ] unsigned char 
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      void 
  7666 ;; Registers used:
  7667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7673 ;;      Params:         0       0       0       0       0       0       0       0
  7674 ;;      Locals:         0       0       2       0       0       0       0       0
  7675 ;;      Temps:          0       0       1       0       0       0       0       0
  7676 ;;      Totals:         0       0       3       0       0       0       0       0
  7677 ;;Total ram usage:        3 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:   13
  7680 ;; This function calls:
  7681 ;;		_Sensor_getScanGroupIndex
  7682 ;; This function is called by:
  7683 ;;		_Sensor_Service
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           
  7688                           ;psect for function _Sensor_RawSample_Update
  7689  1EE8                     _Sensor_RawSample_Update:	
  7690                           
  7691                           ;incstack = 0
  7692 ;; hardware stack exceeded
  7693                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7694                           ;Sensor_RawSample_Update@sensor stored from wreg
  7695  1EE8  0021               	movlb	1	; select bank1
  7696  1EE9  00A7               	movwf	Sensor_RawSample_Update@sensor^(0+128)
  7697                           
  7698                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  7699  1EEA  0827               	movf	Sensor_RawSample_Update@sensor^(0+128),w
  7700  1EEB  319F  2714  319E   	fcall	_Sensor_getScanGroupIndex
  7701  1EEE  0021               	movlb	1	; select bank1
  7702  1EEF  00A5               	movwf	??_Sensor_RawSample_Update^(0+128)
  7703  1EF0  0825               	movf	??_Sensor_RawSample_Update^(0+128),w
  7704  1EF1  00A6               	movwf	Sensor_RawSample_Update@adcIndex^(0+128)
  7705                           
  7706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  7707  1EF2  1F8B               	btfss	11,7	;volatile
  7708  1EF3  2F05               	goto	l7854
  7709                           
  7710                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  7711  1EF4  138B               	bcf	11,7	;volatile
  7712                           
  7713                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  7714  1EF5  3526               	lslf	Sensor_RawSample_Update@adcIndex^(0+128),w
  7715  1EF6  3E20               	addlw	(low (_packet_sample| (0+256)))& (0+255)
  7716  1EF7  0086               	movwf	6
  7717  1EF8  3001               	movlw	1	; select bank2/3
  7718  1EF9  0087               	movwf	7
  7719  1EFA  0827               	movf	Sensor_RawSample_Update@sensor^(0+128),w
  7720  1EFB  3E06               	addlw	6
  7721  1EFC  0084               	movwf	4
  7722  1EFD  3001               	movlw	1	; select bank2/3
  7723  1EFE  0085               	movwf	5
  7724  1EFF  3F40               	moviw [0]fsr1
  7725  1F00  3F80               	movwi [0]fsr0
  7726  1F01  3F41               	moviw [1]fsr1
  7727  1F02  3F81               	movwi [1]fsr0
  7728                           
  7729                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  7730  1F03  178B               	bsf	11,7	;volatile
  7731                           
  7732                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  7733  1F04  0008               	return
  7734  1F05                     l7854:	
  7735                           
  7736                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  7737  1F05  3526               	lslf	Sensor_RawSample_Update@adcIndex^(0+128),w
  7738  1F06  3E20               	addlw	(low (_packet_sample| (0+256)))& (0+255)
  7739  1F07  0086               	movwf	6
  7740  1F08  3001               	movlw	1	; select bank2/3
  7741  1F09  0087               	movwf	7
  7742  1F0A  0827               	movf	Sensor_RawSample_Update@sensor^(0+128),w
  7743  1F0B  3E06               	addlw	6
  7744  1F0C  0084               	movwf	4
  7745  1F0D  3001               	movlw	1	; select bank2/3
  7746  1F0E  0085               	movwf	5
  7747  1F0F  3F40               	moviw [0]fsr1
  7748  1F10  3F80               	movwi [0]fsr0
  7749  1F11  3F41               	moviw [1]fsr1
  7750  1F12  3F81               	movwi [1]fsr0
  7751  1F13  0008               	return
  7752  1F14                     __end_of_Sensor_RawSample_Update:	
  7753                           
  7754                           	psect	text34
  7755  0801                     __ptext34:	
  7756 ;; *************** function _Sensor_DefaultCallback *****************
  7757 ;; Defined at:
  7758 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;  sensor          1    1[BANK1 ] enum E2886
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;		None
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		None
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7772 ;;      Params:         0       0       1       0       0       0       0       0
  7773 ;;      Locals:         0       0       0       0       0       0       0       0
  7774 ;;      Temps:          0       0       0       0       0       0       0       0
  7775 ;;      Totals:         0       0       1       0       0       0       0       0
  7776 ;;Total ram usage:        1 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:   12
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		_Sensor_Service
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           
  7787                           ;psect for function _Sensor_DefaultCallback
  7788  0801                     _Sensor_DefaultCallback:	
  7789                           
  7790                           ;incstack = 0
  7791                           ; Regs used in _Sensor_DefaultCallback: []
  7792  0801  0008               	return
  7793  0802                     __end_of_Sensor_DefaultCallback:	
  7794                           
  7795                           	psect	text35
  7796  13A6                     __ptext35:	
  7797 ;; *************** function _Sensor_Acquisition *****************
  7798 ;; Defined at:
  7799 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;  sensor_adc1     1    wreg     PTR struct .
  7802 ;;		 -> NULL(0), mtouch_sensor(27), 
  7803 ;;  sensor_adc2     1   58[BANK1 ] PTR struct .
  7804 ;;		 -> mtouch_sensor(27), 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  sensor_adc1     1   61[BANK1 ] PTR struct .
  7807 ;;		 -> NULL(0), mtouch_sensor(27), 
  7808 ;;  retry           1   60[BANK1 ] unsigned char 
  7809 ;; Return value:  Size  Location     Type
  7810 ;;                  1    wreg      enum E2890
  7811 ;; Registers used:
  7812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7818 ;;      Params:         0       0       1       0       0       0       0       0
  7819 ;;      Locals:         0       0       2       0       0       0       0       0
  7820 ;;      Temps:          0       0       1       0       0       0       0       0
  7821 ;;      Totals:         0       0       4       0       0       0       0       0
  7822 ;;Total ram usage:        4 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; Hardware stack levels required when called:   16
  7825 ;; This function calls:
  7826 ;;		_Sensor_Acq_ExecutePacket
  7827 ;;		_Sensor_Scanfrequency_Evaluation
  7828 ;;		_Sensor_isActive
  7829 ;;		_Sensor_isCalibrated
  7830 ;;		_Sensor_postAcquisitionProcess
  7831 ;; This function is called by:
  7832 ;;		_Sensor_Service
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           
  7837                           ;psect for function _Sensor_Acquisition
  7838  13A6                     _Sensor_Acquisition:	
  7839                           
  7840                           ;incstack = 0
  7841 ;; hardware stack exceeded
  7842                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7843                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  7844  13A6  0021               	movlb	1	; select bank1
  7845  13A7  00DD               	movwf	Sensor_Acquisition@sensor_adc1^(0+128)
  7846                           
  7847                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  7848  13A8  3005               	movlw	5
  7849  13A9  00DB               	movwf	??_Sensor_Acquisition^(0+128)
  7850  13AA  085B               	movf	??_Sensor_Acquisition^(0+128),w
  7851  13AB  00DC               	movwf	Sensor_Acquisition@retry^(0+128)
  7852                           
  7853                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  7854  13AC  085D               	movf	Sensor_Acquisition@sensor_adc1^(0+128),w
  7855  13AD  1D03               	btfss	3,2
  7856  13AE  2BBC               	goto	l7818
  7857  13AF  085A               	movf	Sensor_Acquisition@sensor_adc2^(0+128),w
  7858  13B0  1D03               	btfss	3,2
  7859  13B1  2BBC               	goto	l7818
  7860                           
  7861                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  7862  13B2  30FF               	movlw	255
  7863  13B3  0008               	return
  7864  13B4                     l7812:	
  7865                           
  7866                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  7867  13B4  3001               	movlw	1
  7868  13B5  0021               	movlb	1	; select bank1
  7869  13B6  02DC               	subwf	Sensor_Acquisition@retry^(0+128),f
  7870                           
  7871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  7872  13B7  085C               	movf	Sensor_Acquisition@retry^(0+128),w
  7873  13B8  1D03               	btfss	3,2
  7874  13B9  2BBC               	goto	l7818
  7875                           
  7876                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  7877  13BA  30FC               	movlw	252
  7878  13BB  0008               	return
  7879  13BC                     l7818:	
  7880                           
  7881                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  7882  13BC  085A               	movf	Sensor_Acquisition@sensor_adc2^(0+128),w
  7883  13BD  00DB               	movwf	??_Sensor_Acquisition^(0+128)
  7884  13BE  085B               	movf	??_Sensor_Acquisition^(0+128),w
  7885  13BF  00BE               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128)
  7886  13C0  085D               	movf	Sensor_Acquisition@sensor_adc1^(0+128),w
  7887  13C1  3182  22C8  3193   	fcall	_Sensor_Acq_ExecutePacket
  7888  13C4  3A00               	xorlw	0
  7889  13C5  1D03               	skipz
  7890  13C6  2BB4               	goto	l7812
  7891                           
  7892                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  7893  13C7  0021               	movlb	1	; select bank1
  7894  13C8  085D               	movf	Sensor_Acquisition@sensor_adc1^(0+128),w
  7895  13C9  1903               	btfsc	3,2
  7896  13CA  2BCF               	goto	l7824
  7897                           
  7898                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  7899  13CB  085D               	movf	Sensor_Acquisition@sensor_adc1^(0+128),w
  7900  13CC  3191  21D5  3193   	fcall	_Sensor_postAcquisitionProcess
  7901  13CF                     l7824:	
  7902                           
  7903                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  7904  13CF  0021               	movlb	1	; select bank1
  7905  13D0  085A               	movf	Sensor_Acquisition@sensor_adc2^(0+128),w
  7906  13D1  1903               	btfsc	3,2
  7907  13D2  2BD7               	goto	l7828
  7908                           
  7909                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  7910  13D3  085A               	movf	Sensor_Acquisition@sensor_adc2^(0+128),w
  7911  13D4  3191  21D5  3193   	fcall	_Sensor_postAcquisitionProcess
  7912  13D7                     l7828:	
  7913                           
  7914                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  7915  13D7  0021               	movlb	1	; select bank1
  7916  13D8  085D               	movf	Sensor_Acquisition@sensor_adc1^(0+128),w
  7917  13D9  319A  22F5  3193   	fcall	_Sensor_isActive
  7918  13DC  3A00               	xorlw	0
  7919  13DD  1903               	skipnz
  7920  13DE  2BE7               	goto	l7832
  7921  13DF  0021               	movlb	1	; select bank1
  7922  13E0  085D               	movf	Sensor_Acquisition@sensor_adc1^(0+128),w
  7923  13E1  319A  22B1  3193   	fcall	_Sensor_isCalibrated
  7924  13E4  3A00               	xorlw	0
  7925  13E5  1D03               	skipz
  7926  13E6  2BF7               	goto	l7836
  7927  13E7                     l7832:	
  7928  13E7  0021               	movlb	1	; select bank1
  7929  13E8  085A               	movf	Sensor_Acquisition@sensor_adc2^(0+128),w
  7930  13E9  319A  22F5  3193   	fcall	_Sensor_isActive
  7931  13EC  3A00               	xorlw	0
  7932  13ED  1903               	skipnz
  7933  13EE  2C00               	goto	l7840
  7934  13EF  0021               	movlb	1	; select bank1
  7935  13F0  085A               	movf	Sensor_Acquisition@sensor_adc2^(0+128),w
  7936  13F1  319A  22B1  3193   	fcall	_Sensor_isCalibrated
  7937  13F4  3A00               	xorlw	0
  7938  13F5  1903               	skipnz
  7939  13F6  2C00               	goto	l7840
  7940  13F7                     l7836:	
  7941                           
  7942                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  7943  13F7  0021               	movlb	1	; select bank1
  7944  13F8  085A               	movf	Sensor_Acquisition@sensor_adc2^(0+128),w
  7945  13F9  00DB               	movwf	??_Sensor_Acquisition^(0+128)
  7946  13FA  085B               	movf	??_Sensor_Acquisition^(0+128),w
  7947  13FB  00CD               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2^(0+128)
  7948  13FC  085D               	movf	Sensor_Acquisition@sensor_adc1^(0+128),w
  7949  13FD  3187  274E         	fcall	_Sensor_Scanfrequency_Evaluation
  7950  13FF  0008               	return
  7951  1400                     l7840:	
  7952                           
  7953                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  7954  1400  3000               	movlw	0
  7955  1401  0008               	return
  7956  1402                     __end_of_Sensor_Acquisition:	
  7957                           
  7958                           	psect	text36
  7959  11D5                     __ptext36:	
  7960 ;; *************** function _Sensor_postAcquisitionProcess *****************
  7961 ;; Defined at:
  7962 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7963 ;; Parameters:    Size  Location     Type
  7964 ;;  sensor          1    wreg     PTR struct .
  7965 ;;		 -> NULL(0), mtouch_sensor(27), 
  7966 ;; Auto vars:     Size  Location     Type
  7967 ;;  sensor          1   28[BANK1 ] PTR struct .
  7968 ;;		 -> NULL(0), mtouch_sensor(27), 
  7969 ;;  deviation       2   26[BANK1 ] unsigned short 
  7970 ;;  adcIndex        1   25[BANK1 ] unsigned char 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  1    wreg      void 
  7973 ;; Registers used:
  7974 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7980 ;;      Params:         0       0       0       0       0       0       0       0
  7981 ;;      Locals:         0       0       4       0       0       0       0       0
  7982 ;;      Temps:          0       0       1       0       0       0       0       0
  7983 ;;      Totals:         0       0       5       0       0       0       0       0
  7984 ;;Total ram usage:        5 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; Hardware stack levels required when called:   13
  7987 ;; This function calls:
  7988 ;;		_Sensor_getScanGroupIndex
  7989 ;;		_Sensor_isEnabled
  7990 ;;		_Sensor_setActive
  7991 ;;		_Sensor_setInactive
  7992 ;;		_abs
  7993 ;; This function is called by:
  7994 ;;		_Sensor_Acquisition
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           
  7999                           ;psect for function _Sensor_postAcquisitionProcess
  8000  11D5                     _Sensor_postAcquisitionProcess:	
  8001                           
  8002                           ;incstack = 0
  8003 ;; hardware stack exceeded
  8004                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8005                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  8006  11D5  0021               	movlb	1	; select bank1
  8007  11D6  00BC               	movwf	Sensor_postAcquisitionProcess@sensor^(0+128)
  8008                           
  8009                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  8010  11D7  083C               	movf	Sensor_postAcquisitionProcess@sensor^(0+128),w
  8011  11D8  319F  2714  3191   	fcall	_Sensor_getScanGroupIndex
  8012  11DB  0021               	movlb	1	; select bank1
  8013  11DC  00B8               	movwf	??_Sensor_postAcquisitionProcess^(0+128)
  8014  11DD  0838               	movf	??_Sensor_postAcquisitionProcess^(0+128),w
  8015  11DE  00B9               	movwf	Sensor_postAcquisitionProcess@adcIndex^(0+128)
  8016                           
  8017                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  8018  11DF  083C               	movf	Sensor_postAcquisitionProcess@sensor^(0+128),w
  8019  11E0  319B  2377  3191   	fcall	_Sensor_isEnabled
  8020  11E3  3A00               	xorlw	0
  8021  11E4  1903               	skipnz
  8022  11E5  2A01               	goto	l7600
  8023                           
  8024                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  8025  11E6  0021               	movlb	1	; select bank1
  8026  11E7  083C               	movf	Sensor_postAcquisitionProcess@sensor^(0+128),w
  8027  11E8  3E06               	addlw	6
  8028  11E9  0086               	movwf	6
  8029  11EA  3001               	movlw	1	; select bank2/3
  8030  11EB  0087               	movwf	7
  8031  11EC  3539               	lslf	Sensor_postAcquisitionProcess@adcIndex^(0+128),w
  8032  11ED  3E20               	addlw	(low (_packet_sample| (0+256)))& (0+255)
  8033  11EE  0084               	movwf	4
  8034  11EF  3001               	movlw	1	; select bank2/3
  8035  11F0  0085               	movwf	5
  8036  11F1  3F40               	moviw [0]fsr1
  8037  11F2  0200               	subwf	0,w
  8038  11F3  00B4               	movwf	abs@a^(0+128)
  8039  11F4  3101               	addfsr 0,1
  8040  11F5  3F41               	moviw [1]fsr1
  8041  11F6  3B00               	subwfb	0,w
  8042  11F7  00B5               	movwf	(abs@a^(0+128)+1)
  8043  11F8  319C  24F7  3191   	fcall	_abs
  8044  11FB  0021               	movlb	1	; select bank1
  8045  11FC  0835               	movf	(?_abs+1)^(0+128),w
  8046  11FD  00BB               	movwf	(Sensor_postAcquisitionProcess@deviation+1)^(0+128)
  8047  11FE  0834               	movf	?_abs^(0+128),w
  8048  11FF  00BA               	movwf	Sensor_postAcquisitionProcess@deviation^(0+128)
  8049  1200  2A04               	goto	l7602
  8050  1201                     l7600:	
  8051                           
  8052                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  8053  1201  0021               	movlb	1	; select bank1
  8054  1202  01BA               	clrf	Sensor_postAcquisitionProcess@deviation^(0+128)
  8055  1203  01BB               	clrf	(Sensor_postAcquisitionProcess@deviation+1)^(0+128)
  8056  1204                     l7602:	
  8057                           
  8058                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  8059  1204  3000               	movlw	0
  8060  1205  023B               	subwf	(Sensor_postAcquisitionProcess@deviation+1)^(0+128),w
  8061  1206  3065               	movlw	101
  8062  1207  1903               	skipnz
  8063  1208  023A               	subwf	Sensor_postAcquisitionProcess@deviation^(0+128),w
  8064  1209  1C03               	skipc
  8065  120A  2A0F               	goto	l7606
  8066                           
  8067                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  8068  120B  083C               	movf	Sensor_postAcquisitionProcess@sensor^(0+128),w
  8069  120C  319A  2243         	fcall	_Sensor_setActive
  8070  120E  0008               	return
  8071  120F                     l7606:	
  8072                           
  8073                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  8074  120F  083C               	movf	Sensor_postAcquisitionProcess@sensor^(0+128),w
  8075  1210  319A  224C         	fcall	_Sensor_setInactive
  8076  1212  0008               	return
  8077  1213                     __end_of_Sensor_postAcquisitionProcess:	
  8078                           
  8079                           	psect	text37
  8080  1A4C                     __ptext37:	
  8081 ;; *************** function _Sensor_setInactive *****************
  8082 ;; Defined at:
  8083 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  sensor          1    wreg     PTR struct .
  8086 ;;		 -> NULL(0), mtouch_sensor(27), 
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;  sensor          1    1[BANK1 ] PTR struct .
  8089 ;;		 -> NULL(0), mtouch_sensor(27), 
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  1    wreg      void 
  8092 ;; Registers used:
  8093 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8099 ;;      Params:         0       0       0       0       0       0       0       0
  8100 ;;      Locals:         0       0       1       0       0       0       0       0
  8101 ;;      Temps:          0       0       0       0       0       0       0       0
  8102 ;;      Totals:         0       0       1       0       0       0       0       0
  8103 ;;Total ram usage:        1 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:   12
  8106 ;; This function calls:
  8107 ;;		Nothing
  8108 ;; This function is called by:
  8109 ;;		_Sensor_postAcquisitionProcess
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113                           
  8114                           ;psect for function _Sensor_setInactive
  8115  1A4C                     _Sensor_setInactive:	
  8116                           
  8117                           ;incstack = 0
  8118 ;; hardware stack exceeded
  8119                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8120                           ;Sensor_setInactive@sensor stored from wreg
  8121  1A4C  0021               	movlb	1	; select bank1
  8122  1A4D  00A1               	movwf	Sensor_setInactive@sensor^(0+128)
  8123                           
  8124                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  8125  1A4E  0821               	movf	Sensor_setInactive@sensor^(0+128),w
  8126  1A4F  3E08               	addlw	8
  8127  1A50  0086               	movwf	6
  8128  1A51  3001               	movlw	1	; select bank2/3
  8129  1A52  0087               	movwf	7
  8130  1A53  1081               	bcf	1,1
  8131  1A54  0008               	return
  8132  1A55                     __end_of_Sensor_setInactive:	
  8133                           
  8134                           	psect	text38
  8135  1A43                     __ptext38:	
  8136 ;; *************** function _Sensor_setActive *****************
  8137 ;; Defined at:
  8138 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  sensor          1    wreg     PTR struct .
  8141 ;;		 -> NULL(0), mtouch_sensor(27), 
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  sensor          1    1[BANK1 ] PTR struct .
  8144 ;;		 -> NULL(0), mtouch_sensor(27), 
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  1    wreg      void 
  8147 ;; Registers used:
  8148 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8154 ;;      Params:         0       0       0       0       0       0       0       0
  8155 ;;      Locals:         0       0       1       0       0       0       0       0
  8156 ;;      Temps:          0       0       0       0       0       0       0       0
  8157 ;;      Totals:         0       0       1       0       0       0       0       0
  8158 ;;Total ram usage:        1 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:   12
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_Sensor_postAcquisitionProcess
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           
  8169                           ;psect for function _Sensor_setActive
  8170  1A43                     _Sensor_setActive:	
  8171                           
  8172                           ;incstack = 0
  8173 ;; hardware stack exceeded
  8174                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8175                           ;Sensor_setActive@sensor stored from wreg
  8176  1A43  0021               	movlb	1	; select bank1
  8177  1A44  00A1               	movwf	Sensor_setActive@sensor^(0+128)
  8178                           
  8179                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  8180  1A45  0821               	movf	Sensor_setActive@sensor^(0+128),w
  8181  1A46  3E08               	addlw	8
  8182  1A47  0086               	movwf	6
  8183  1A48  3001               	movlw	1	; select bank2/3
  8184  1A49  0087               	movwf	7
  8185  1A4A  1481               	bsf	1,1
  8186  1A4B  0008               	return
  8187  1A4C                     __end_of_Sensor_setActive:	
  8188                           
  8189                           	psect	text39
  8190  074E                     __ptext39:	
  8191 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  8192 ;; Defined at:
  8193 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8194 ;; Parameters:    Size  Location     Type
  8195 ;;  sensor_adc1     1    wreg     PTR struct .
  8196 ;;		 -> NULL(0), mtouch_sensor(27), 
  8197 ;;  sensor_adc2     1   45[BANK1 ] PTR struct .
  8198 ;;		 -> mtouch_sensor(27), 
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  sensor_adc1     1   48[BANK1 ] PTR struct .
  8201 ;;		 -> NULL(0), mtouch_sensor(27), 
  8202 ;;  best_packet_    4   53[BANK1 ] unsigned short [2]
  8203 ;;  packet_noise    2   49[BANK1 ] unsigned short 
  8204 ;;  i               1   57[BANK1 ] unsigned char 
  8205 ;;  retry           1   52[BANK1 ] unsigned char 
  8206 ;;  best_sample_    1   51[BANK1 ] unsigned char 
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  1    wreg      enum E2890
  8209 ;; Registers used:
  8210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8216 ;;      Params:         0       0       1       0       0       0       0       0
  8217 ;;      Locals:         0       0      10       0       0       0       0       0
  8218 ;;      Temps:          0       0       2       0       0       0       0       0
  8219 ;;      Totals:         0       0      13       0       0       0       0       0
  8220 ;;Total ram usage:       13 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:   15
  8223 ;; This function calls:
  8224 ;;		_Sensor_Acq_ExecutePacket
  8225 ;; This function is called by:
  8226 ;;		_Sensor_Acquisition
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           
  8231                           ;psect for function _Sensor_Scanfrequency_Evaluation
  8232  074E                     _Sensor_Scanfrequency_Evaluation:	
  8233                           
  8234                           ;incstack = 0
  8235 ;; hardware stack exceeded
  8236                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8237                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  8238  074E  0021               	movlb	1	; select bank1
  8239  074F  00D0               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1^(0+128)
  8240                           
  8241                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  8242  0750  0022               	movlb	2	; select bank2
  8243  0751  0835               	movf	(_packet_noise+1)^(0+256),w
  8244  0752  0021               	movlb	1	; select bank1
  8245  0753  00CF               	movwf	(??_Sensor_Scanfrequency_Evaluation^(0+128)+1)
  8246  0754  0022               	movlb	2	; select bank2
  8247  0755  0834               	movf	_packet_noise^(0+256),w
  8248  0756  0021               	movlb	1	; select bank1
  8249  0757  00CE               	movwf	??_Sensor_Scanfrequency_Evaluation^(0+128)
  8250  0758  36CF               	lsrf	(??_Sensor_Scanfrequency_Evaluation^(0+128)+1),f
  8251  0759  0CCE               	rrf	??_Sensor_Scanfrequency_Evaluation^(0+128),f
  8252  075A  36CF               	lsrf	(??_Sensor_Scanfrequency_Evaluation^(0+128)+1),f
  8253  075B  0CCE               	rrf	??_Sensor_Scanfrequency_Evaluation^(0+128),f
  8254  075C  0022               	movlb	2	; select bank2
  8255  075D  0834               	movf	_packet_noise^(0+256),w
  8256  075E  0021               	movlb	1	; select bank1
  8257  075F  074E               	addwf	??_Sensor_Scanfrequency_Evaluation^(0+128),w
  8258  0760  00D1               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max^(0+128)
  8259  0761  0022               	movlb	2	; select bank2
  8260  0762  0835               	movf	(_packet_noise+1)^(0+256),w
  8261  0763  0021               	movlb	1	; select bank1
  8262  0764  3D4F               	addwfc	(??_Sensor_Scanfrequency_Evaluation+1)^(0+128),w
  8263  0765  00D2               	movwf	(Sensor_Scanfrequency_Evaluation@packet_noise_Max+1)^(0+128)
  8264                           
  8265                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  8266  0766  0022               	movlb	2	; select bank2
  8267  0767  086C               	movf	_sample_period^(0+256),w
  8268  0768  0021               	movlb	1	; select bank1
  8269  0769  00CE               	movwf	??_Sensor_Scanfrequency_Evaluation^(0+128)
  8270  076A  084E               	movf	??_Sensor_Scanfrequency_Evaluation^(0+128),w
  8271  076B  00D3               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period^(0+128)
  8272                           
  8273                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  8274  076C  0022               	movlb	2	; select bank2
  8275  076D  0821               	movf	(_packet_sample+1)^(0+256),w
  8276  076E  0021               	movlb	1	; select bank1
  8277  076F  00D6               	movwf	(Sensor_Scanfrequency_Evaluation@best_packet_sample+1)^(0+128)
  8278  0770  0022               	movlb	2	; select bank2
  8279  0771  0820               	movf	_packet_sample^(0+256),w
  8280  0772  0021               	movlb	1	; select bank1
  8281  0773  00D5               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample^(0+128)
  8282                           
  8283                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  8284  0774  0022               	movlb	2	; select bank2
  8285  0775  0823               	movf	((_packet_sample+1)^(0+256)+2),w
  8286  0776  0021               	movlb	1	; select bank1
  8287  0777  00D8               	movwf	((Sensor_Scanfrequency_Evaluation@best_packet_sample+1)^(0+128)+2)
  8288  0778  0022               	movlb	2	; select bank2
  8289  0779  0822               	movf	(_packet_sample^(0+256)+2),w
  8290  077A  0021               	movlb	1	; select bank1
  8291  077B  00D7               	movwf	(Sensor_Scanfrequency_Evaluation@best_packet_sample^(0+128)+2)
  8292                           
  8293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  8294  077C  01D9               	clrf	Sensor_Scanfrequency_Evaluation@i^(0+128)
  8295  077D                     l7622:	
  8296                           
  8297                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  8298  077D  0859               	movf	Sensor_Scanfrequency_Evaluation@i^(0+128),w
  8299  077E  3E4D               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8300  077F  0084               	movwf	4
  8301  0780  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8302  0781  1803               	skipnc
  8303  0782  3E01               	addlw	1
  8304  0783  0085               	movwf	5
  8305  0784  0800               	movf	0,w	;code access
  8306  0785  00CE               	movwf	??_Sensor_Scanfrequency_Evaluation^(0+128)
  8307  0786  084E               	movf	??_Sensor_Scanfrequency_Evaluation^(0+128),w
  8308  0787  0022               	movlb	2	; select bank2
  8309  0788  07EC               	addwf	_sample_period^(0+256),f
  8310                           
  8311                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  8312  0789  30AE               	movlw	174
  8313  078A  026C               	subwf	_sample_period^(0+256),w
  8314  078B  1803               	skipnc
  8315  078C  2F93               	goto	l7630
  8316                           
  8317                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  8318  078D  30AE               	movlw	174
  8319  078E  0021               	movlb	1	; select bank1
  8320  078F  00CE               	movwf	??_Sensor_Scanfrequency_Evaluation^(0+128)
  8321  0790  084E               	movf	??_Sensor_Scanfrequency_Evaluation^(0+128),w
  8322  0791  0022               	movlb	2	; select bank2
  8323  0792  07EC               	addwf	_sample_period^(0+256),f
  8324  0793                     l7630:	
  8325                           
  8326                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  8327  0793  3005               	movlw	5
  8328  0794  0021               	movlb	1	; select bank1
  8329  0795  00CE               	movwf	??_Sensor_Scanfrequency_Evaluation^(0+128)
  8330  0796  084E               	movf	??_Sensor_Scanfrequency_Evaluation^(0+128),w
  8331  0797  00D4               	movwf	Sensor_Scanfrequency_Evaluation@retry^(0+128)
  8332  0798                     l7638:	
  8333                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8334                           
  8335                           
  8336                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8337  0798  084D               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2^(0+128),w
  8338  0799  00CE               	movwf	??_Sensor_Scanfrequency_Evaluation^(0+128)
  8339  079A  084E               	movf	??_Sensor_Scanfrequency_Evaluation^(0+128),w
  8340  079B  00BE               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128)
  8341  079C  0850               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1^(0+128),w
  8342  079D  3182  22C8  3187   	fcall	_Sensor_Acq_ExecutePacket
  8343  07A0  3A00               	xorlw	0
  8344  07A1  1903               	btfsc	3,2
  8345  07A2  2FAB               	goto	l7640
  8346                           
  8347                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  8348  07A3  3001               	movlw	1
  8349  07A4  0021               	movlb	1	; select bank1
  8350  07A5  02D4               	subwf	Sensor_Scanfrequency_Evaluation@retry^(0+128),f
  8351                           
  8352                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  8353  07A6  0854               	movf	Sensor_Scanfrequency_Evaluation@retry^(0+128),w
  8354  07A7  1D03               	btfss	3,2
  8355  07A8  2F98               	goto	l7638
  8356                           
  8357                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8358  07A9  30FC               	movlw	252
  8359  07AA  0008               	return
  8360  07AB                     l7640:	
  8361                           
  8362                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  8363  07AB  0022               	movlb	2	; select bank2
  8364  07AC  0835               	movf	(_packet_noise+1)^(0+256),w
  8365  07AD  0021               	movlb	1	; select bank1
  8366  07AE  0252               	subwf	(Sensor_Scanfrequency_Evaluation@packet_noise_Max+1)^(0+128),w
  8367  07AF  1D03               	skipz
  8368  07B0  2FB5               	goto	u8765
  8369  07B1  0022               	movlb	2	; select bank2
  8370  07B2  0834               	movf	_packet_noise^(0+256),w
  8371  07B3  0021               	movlb	1	; select bank1
  8372  07B4  0251               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max^(0+128),w
  8373  07B5                     u8765:	
  8374  07B5  1803               	skipnc
  8375  07B6  2FD5               	goto	l7644
  8376                           
  8377                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  8378  07B7  0022               	movlb	2	; select bank2
  8379  07B8  0835               	movf	(_packet_noise+1)^(0+256),w
  8380  07B9  0021               	movlb	1	; select bank1
  8381  07BA  00D2               	movwf	(Sensor_Scanfrequency_Evaluation@packet_noise_Max+1)^(0+128)
  8382  07BB  0022               	movlb	2	; select bank2
  8383  07BC  0834               	movf	_packet_noise^(0+256),w
  8384  07BD  0021               	movlb	1	; select bank1
  8385  07BE  00D1               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max^(0+128)
  8386                           
  8387                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  8388  07BF  0022               	movlb	2	; select bank2
  8389  07C0  086C               	movf	_sample_period^(0+256),w
  8390  07C1  0021               	movlb	1	; select bank1
  8391  07C2  00CE               	movwf	??_Sensor_Scanfrequency_Evaluation^(0+128)
  8392  07C3  084E               	movf	??_Sensor_Scanfrequency_Evaluation^(0+128),w
  8393  07C4  00D3               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period^(0+128)
  8394                           
  8395                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  8396  07C5  0022               	movlb	2	; select bank2
  8397  07C6  0821               	movf	(_packet_sample+1)^(0+256),w
  8398  07C7  0021               	movlb	1	; select bank1
  8399  07C8  00D6               	movwf	(Sensor_Scanfrequency_Evaluation@best_packet_sample+1)^(0+128)
  8400  07C9  0022               	movlb	2	; select bank2
  8401  07CA  0820               	movf	_packet_sample^(0+256),w
  8402  07CB  0021               	movlb	1	; select bank1
  8403  07CC  00D5               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample^(0+128)
  8404                           
  8405                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  8406  07CD  0022               	movlb	2	; select bank2
  8407  07CE  0823               	movf	((_packet_sample+1)^(0+256)+2),w
  8408  07CF  0021               	movlb	1	; select bank1
  8409  07D0  00D8               	movwf	((Sensor_Scanfrequency_Evaluation@best_packet_sample+1)^(0+128)+2)
  8410  07D1  0022               	movlb	2	; select bank2
  8411  07D2  0822               	movf	(_packet_sample^(0+256)+2),w
  8412  07D3  0021               	movlb	1	; select bank1
  8413  07D4  00D7               	movwf	(Sensor_Scanfrequency_Evaluation@best_packet_sample^(0+128)+2)
  8414  07D5                     l7644:	
  8415                           
  8416                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  8417  07D5  3001               	movlw	1
  8418  07D6  00CE               	movwf	??_Sensor_Scanfrequency_Evaluation^(0+128)
  8419  07D7  084E               	movf	??_Sensor_Scanfrequency_Evaluation^(0+128),w
  8420  07D8  07D9               	addwf	Sensor_Scanfrequency_Evaluation@i^(0+128),f
  8421  07D9  3005               	movlw	5
  8422  07DA  0259               	subwf	Sensor_Scanfrequency_Evaluation@i^(0+128),w
  8423  07DB  1C03               	skipc
  8424  07DC  2F7D               	goto	l7622
  8425                           
  8426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  8427  07DD  0853               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period^(0+128),w
  8428  07DE  00CE               	movwf	??_Sensor_Scanfrequency_Evaluation^(0+128)
  8429  07DF  084E               	movf	??_Sensor_Scanfrequency_Evaluation^(0+128),w
  8430  07E0  0022               	movlb	2	; select bank2
  8431  07E1  00EC               	movwf	_sample_period^(0+256)
  8432                           
  8433                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  8434  07E2  0021               	movlb	1	; select bank1
  8435  07E3  0856               	movf	(Sensor_Scanfrequency_Evaluation@best_packet_sample+1)^(0+128),w
  8436  07E4  0022               	movlb	2	; select bank2
  8437  07E5  00A1               	movwf	(_packet_sample+1)^(0+256)
  8438  07E6  0021               	movlb	1	; select bank1
  8439  07E7  0855               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample^(0+128),w
  8440  07E8  0022               	movlb	2	; select bank2
  8441  07E9  00A0               	movwf	_packet_sample^(0+256)
  8442                           
  8443                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  8444  07EA  0021               	movlb	1	; select bank1
  8445  07EB  0858               	movf	((Sensor_Scanfrequency_Evaluation@best_packet_sample+1)^(0+128)+2),w
  8446  07EC  0022               	movlb	2	; select bank2
  8447  07ED  00A3               	movwf	((_packet_sample+1)^(0+256)+2)
  8448  07EE  0021               	movlb	1	; select bank1
  8449  07EF  0857               	movf	(Sensor_Scanfrequency_Evaluation@best_packet_sample^(0+128)+2),w
  8450  07F0  0022               	movlb	2	; select bank2
  8451  07F1  00A2               	movwf	(_packet_sample^(0+256)+2)
  8452                           
  8453                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  8454  07F2  3000               	movlw	0
  8455  07F3  0008               	return
  8456  07F4                     __end_of_Sensor_Scanfrequency_Evaluation:	
  8457                           
  8458                           	psect	text40
  8459  02C8                     __ptext40:	
  8460 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  8461 ;; Defined at:
  8462 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  sensor_adc1     1    wreg     PTR struct .
  8465 ;;		 -> NULL(0), mtouch_sensor(27), 
  8466 ;;  sensor_adc2     1   30[BANK1 ] PTR struct .
  8467 ;;		 -> mtouch_sensor(27), 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  sensor_adc1     1   44[BANK1 ] PTR struct .
  8470 ;;		 -> NULL(0), mtouch_sensor(27), 
  8471 ;;  last_b          2   41[BANK1 ] unsigned short 
  8472 ;;  last_a          2   39[BANK1 ] unsigned short 
  8473 ;;  packet_count    1   43[BANK1 ] unsigned char 
  8474 ;;  activeSensor    1   38[BANK1 ] unsigned char 
  8475 ;;  ADxIF_flag      1   37[BANK1 ] unsigned char 
  8476 ;;  sensor2Force    1   36[BANK1 ] unsigned char 
  8477 ;;  sensor1Force    1   35[BANK1 ] unsigned char 
  8478 ;;  AD2CON2_temp    1   34[BANK1 ] unsigned char 
  8479 ;;  AD1CON2_temp    1   33[BANK1 ] unsigned char 
  8480 ;;  ADCOMCON_tem    1   32[BANK1 ] unsigned char 
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  1    wreg      enum E2890
  8483 ;; Registers used:
  8484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8485 ;; Tracked objects:
  8486 ;;		On entry : 0/0
  8487 ;;		On exit  : 0/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8490 ;;      Params:         0       0       1       0       0       0       0       0
  8491 ;;      Locals:         0       0      13       0       0       0       0       0
  8492 ;;      Temps:          0       0       1       0       0       0       0       0
  8493 ;;      Totals:         0       0      15       0       0       0       0       0
  8494 ;;Total ram usage:       15 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; Hardware stack levels required when called:   14
  8497 ;; This function calls:
  8498 ;;		_MTOUCH_Sensor_Scan_Initialize
  8499 ;;		_Sensor_autoCalibration
  8500 ;;		_Sensor_isActive
  8501 ;;		_Sensor_isCalibrated
  8502 ;;		_Sensor_isEnabled
  8503 ;;		_Sensor_loadADCSettings
  8504 ;;		_TMR2_LoadPeriodRegister
  8505 ;;		_TMR2_StartTimer
  8506 ;;		_TMR2_StopTimer
  8507 ;;		_abs
  8508 ;; This function is called by:
  8509 ;;		_Sensor_Acquisition
  8510 ;;		_Sensor_Scanfrequency_Evaluation
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           
  8515                           ;psect for function _Sensor_Acq_ExecutePacket
  8516  02C8                     _Sensor_Acq_ExecutePacket:	
  8517                           
  8518                           ;incstack = 0
  8519 ;; hardware stack exceeded
  8520                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8521                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  8522  02C8  0021               	movlb	1	; select bank1
  8523  02C9  00CC               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128)
  8524                           
  8525                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  8526  02CA  01C7               	clrf	Sensor_Acq_ExecutePacket@last_a^(0+128)
  8527  02CB  01C8               	clrf	(Sensor_Acq_ExecutePacket@last_a+1)^(0+128)
  8528                           
  8529                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  8530  02CC  01C9               	clrf	Sensor_Acq_ExecutePacket@last_b^(0+128)
  8531  02CD  01CA               	clrf	(Sensor_Acq_ExecutePacket@last_b+1)^(0+128)
  8532                           
  8533                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
  8534  02CE  01C6               	clrf	Sensor_Acq_ExecutePacket@activeSensor^(0+128)
  8535                           
  8536                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  8537  02CF  01C3               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled^(0+128)
  8538  02D0  01C4               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled^(0+128)
  8539                           
  8540                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  8541  02D1  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8542  02D2  1903               	btfsc	3,2
  8543  02D3  2B0E               	goto	l7290
  8544  02D4  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8545  02D5  1903               	btfsc	3,2
  8546  02D6  2B0E               	goto	l7290
  8547                           
  8548                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  8549  02D7  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8550  02D8  3E08               	addlw	8
  8551  02D9  0086               	movwf	6
  8552  02DA  3001               	movlw	1	; select bank2/3
  8553  02DB  0087               	movwf	7
  8554  02DC  1981               	btfsc	1,3
  8555  02DD  2AEE               	goto	l7272
  8556  02DE  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8557  02DF  3E08               	addlw	8
  8558  02E0  0086               	movwf	6
  8559  02E1  3001               	movlw	1	; select bank2/3
  8560  02E2  0087               	movwf	7
  8561  02E3  1D81               	btfss	1,3
  8562  02E4  2AEE               	goto	l7272
  8563                           
  8564                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
  8565  02E5  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8566  02E6  3E08               	addlw	8
  8567  02E7  0086               	movwf	6
  8568  02E8  3001               	movlw	1	; select bank2/3
  8569  02E9  0087               	movwf	7
  8570  02EA  1581               	bsf	1,3
  8571                           
  8572                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
  8573  02EB  01C3               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled^(0+128)
  8574  02EC  0AC3               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled^(0+128),f
  8575                           
  8576                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
  8577  02ED  2B23               	goto	l7314
  8578  02EE                     l7272:	
  8579  02EE  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8580  02EF  3E08               	addlw	8
  8581  02F0  0086               	movwf	6
  8582  02F1  3001               	movlw	1	; select bank2/3
  8583  02F2  0087               	movwf	7
  8584  02F3  1981               	btfsc	1,3
  8585  02F4  2B05               	goto	l7280
  8586  02F5  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8587  02F6  3E08               	addlw	8
  8588  02F7  0086               	movwf	6
  8589  02F8  3001               	movlw	1	; select bank2/3
  8590  02F9  0087               	movwf	7
  8591  02FA  1D81               	btfss	1,3
  8592  02FB  2B05               	goto	l7280
  8593                           
  8594                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
  8595  02FC  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8596  02FD  3E08               	addlw	8
  8597  02FE  0086               	movwf	6
  8598  02FF  3001               	movlw	1	; select bank2/3
  8599  0300  0087               	movwf	7
  8600  0301  1581               	bsf	1,3
  8601                           
  8602                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
  8603  0302  01C4               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled^(0+128)
  8604  0303  0AC4               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled^(0+128),f
  8605                           
  8606                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
  8607  0304  2B23               	goto	l7314
  8608  0305                     l7280:	
  8609  0305  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8610  0306  3E08               	addlw	8
  8611  0307  0086               	movwf	6
  8612  0308  3001               	movlw	1	; select bank2/3
  8613  0309  0087               	movwf	7
  8614  030A  1981               	btfsc	1,3
  8615  030B  2B23               	goto	l7314
  8616  030C                     l7282:	
  8617  030C  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8618  030D  2B1B               	goto	L7
  8619  030E                     l7290:	
  8620                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
  8621                           
  8622  030E  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8623  030F  1D03               	btfss	3,2
  8624  0310  2B14               	goto	l7302
  8625  0311  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8626  0312  1D03               	btfss	3,2
  8627  0313  2B0C               	goto	l7282
  8628  0314                     l7302:	
  8629                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
  8630                           
  8631  0314  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8632  0315  1903               	btfsc	3,2
  8633  0316  2B23               	goto	l7314
  8634  0317  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8635  0318  1D03               	btfss	3,2
  8636  0319  2B23               	goto	l7314
  8637                           
  8638                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
  8639  031A  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8640  031B                     L7:	
  8641  031B  3E08               	addlw	8
  8642  031C  0086               	movwf	6
  8643  031D  3001               	movlw	1	; select bank2/3
  8644  031E  0087               	movwf	7
  8645  031F  1981               	btfsc	1,3
  8646  0320  2B23               	goto	l7314
  8647  0321                     l7284:	
  8648                           
  8649                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
  8650  0321  3000               	movlw	0
  8651  0322  0008               	return
  8652  0323                     l7314:	
  8653                           
  8654                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
  8655  0323  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8656  0324  319A  22F5  3182   	fcall	_Sensor_isActive
  8657  0327  3A00               	xorlw	0
  8658  0328  1903               	skipnz
  8659  0329  2B2D               	goto	l7318
  8660                           
  8661                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
  8662  032A  0021               	movlb	1	; select bank1
  8663  032B  01C6               	clrf	Sensor_Acq_ExecutePacket@activeSensor^(0+128)
  8664  032C  0AC6               	incf	Sensor_Acq_ExecutePacket@activeSensor^(0+128),f
  8665  032D                     l7318:	
  8666                           
  8667                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
  8668  032D  002E               	movlb	14	; select bank14
  8669  032E  0812               	movf	18,w	;volatile
  8670  032F  0021               	movlb	1	; select bank1
  8671  0330  00BF               	movwf	??_Sensor_Acq_ExecutePacket^(0+128)
  8672  0331  083F               	movf	??_Sensor_Acq_ExecutePacket^(0+128),w
  8673  0332  00C0               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp^(0+128)
  8674                           
  8675                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
  8676  0333  002E               	movlb	14	; select bank14
  8677  0334  0813               	movf	19,w	;volatile
  8678  0335  0021               	movlb	1	; select bank1
  8679  0336  00BF               	movwf	??_Sensor_Acq_ExecutePacket^(0+128)
  8680  0337  083F               	movf	??_Sensor_Acq_ExecutePacket^(0+128),w
  8681  0338  00C1               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp^(0+128)
  8682                           
  8683                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
  8684  0339  002F               	movlb	15	; select bank15
  8685  033A  0813               	movf	19,w	;volatile
  8686  033B  0021               	movlb	1	; select bank1
  8687  033C  00BF               	movwf	??_Sensor_Acq_ExecutePacket^(0+128)
  8688  033D  083F               	movf	??_Sensor_Acq_ExecutePacket^(0+128),w
  8689  033E  00C2               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp^(0+128)
  8690                           
  8691                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
  8692  033F  319B  2324  3182   	fcall	_MTOUCH_Sensor_Scan_Initialize
  8693                           
  8694                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
  8695  0342  0021               	movlb	1	; select bank1
  8696  0343  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8697  0344  1903               	btfsc	3,2
  8698  0345  2B59               	goto	l7334
  8699                           
  8700                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  8701  0346  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8702  0347  3E04               	addlw	4
  8703  0348  0086               	movwf	6
  8704  0349  3001               	movlw	1	; select bank2/3
  8705  034A  0087               	movwf	7
  8706  034B  0801               	movf	1,w
  8707  034C  3EFF               	addlw	255
  8708  034D  00BF               	movwf	??_Sensor_Acq_ExecutePacket^(0+128)
  8709  034E  083F               	movf	??_Sensor_Acq_ExecutePacket^(0+128),w
  8710  034F  00CB               	movwf	Sensor_Acq_ExecutePacket@packet_counter^(0+128)
  8711                           
  8712                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
  8713  0350  01C5               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag^(0+128)
  8714                           
  8715                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
  8716  0351  3040               	movlw	64
  8717  0352  002E               	movlb	14	; select bank14
  8718  0353  0098               	movwf	24	;volatile
  8719                           
  8720                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
  8721  0354  002F               	movlb	15	; select bank15
  8722  0355  0198               	clrf	24	;volatile
  8723                           
  8724                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x0;
  8725  0356  0022               	movlb	2	; select bank2
  8726  0357  101D               	bcf	29,0	;volatile
  8727                           
  8728                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  8729  0358  2B6C               	goto	l7344
  8730  0359                     l7334:	
  8731                           
  8732                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  8733  0359  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8734  035A  3E04               	addlw	4
  8735  035B  0086               	movwf	6
  8736  035C  3001               	movlw	1	; select bank2/3
  8737  035D  0087               	movwf	7
  8738  035E  0801               	movf	1,w
  8739  035F  3EFF               	addlw	255
  8740  0360  00BF               	movwf	??_Sensor_Acq_ExecutePacket^(0+128)
  8741  0361  083F               	movf	??_Sensor_Acq_ExecutePacket^(0+128),w
  8742  0362  00CB               	movwf	Sensor_Acq_ExecutePacket@packet_counter^(0+128)
  8743                           
  8744                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
  8745  0363  01C5               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag^(0+128)
  8746  0364  0AC5               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag^(0+128),f
  8747                           
  8748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
  8749  0365  002E               	movlb	14	; select bank14
  8750  0366  0198               	clrf	24	;volatile
  8751                           
  8752                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
  8753  0367  3040               	movlw	64
  8754  0368  002F               	movlb	15	; select bank15
  8755  0369  0098               	movwf	24	;volatile
  8756                           
  8757                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x1;
  8758  036A  0022               	movlb	2	; select bank2
  8759  036B  141D               	bsf	29,0	;volatile
  8760  036C                     l7344:	
  8761                           
  8762                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  8763  036C  0021               	movlb	1	; select bank1
  8764  036D  01A2               	clrf	Sensor_loadADCSettings@adc_index^(0+128)
  8765  036E  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  8766  036F  3188  20A5  3182   	fcall	_Sensor_loadADCSettings
  8767                           
  8768                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  8769  0372  0021               	movlb	1	; select bank1
  8770  0373  01A2               	clrf	Sensor_loadADCSettings@adc_index^(0+128)
  8771  0374  0AA2               	incf	Sensor_loadADCSettings@adc_index^(0+128),f
  8772  0375  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  8773  0376  3188  20A5  3182   	fcall	_Sensor_loadADCSettings
  8774                           
  8775                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
  8776  0379  0020               	movlb	0	; select bank0
  8777  037A  106F               	bcf	_sensor_globalFlags,0	;volatile
  8778                           
  8779                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
  8780  037B  116F               	bcf	_sensor_globalFlags,2	;volatile
  8781                           
  8782                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
  8783  037C  11EF               	bcf	_sensor_globalFlags,3	;volatile
  8784                           
  8785                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  8786  037D  0022               	movlb	2	; select bank2
  8787  037E  086C               	movf	_sample_period^(0+256),w
  8788  037F  319A  2202  3182   	fcall	_TMR2_LoadPeriodRegister
  8789                           
  8790                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
  8791  0382  3199  21E6  3182   	fcall	_TMR2_StartTimer
  8792                           
  8793                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
  8794  0385  0022               	movlb	2	; select bank2
  8795  0386  01B4               	clrf	_packet_noise^(0+256)
  8796  0387  01B5               	clrf	(_packet_noise+1)^(0+256)
  8797  0388                     l7360:	
  8798                           
  8799                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
  8800  0388  0021               	movlb	1	; select bank1
  8801  0389  0845               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag^(0+128),w
  8802  038A  1D03               	btfss	3,2
  8803  038B  2B94               	goto	l272
  8804                           
  8805                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  8806  038C  0020               	movlb	0	; select bank0
  8807  038D  1B11               	btfsc	17,6	;volatile
  8808  038E  2B90               	goto	l274
  8809  038F  10EF               	bcf	_sensor_globalFlags,1	;volatile
  8810  0390                     l274:	
  8811  0390  1F11               	btfss	17,6	;volatile
  8812  0391  2B90               	goto	l274
  8813                           
  8814                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
  8815  0392  1311               	bcf	17,6	;volatile
  8816                           
  8817                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
  8818  0393  2B9B               	goto	l7368
  8819  0394                     l272:	
  8820                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
  8821                           
  8822                           
  8823                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  8824  0394  0020               	movlb	0	; select bank0
  8825  0395  1B12               	btfsc	18,6	;volatile
  8826  0396  2B98               	goto	l279
  8827  0397  10EF               	bcf	_sensor_globalFlags,1	;volatile
  8828  0398                     l279:	
  8829  0398  1F12               	btfss	18,6	;volatile
  8830  0399  2B98               	goto	l279
  8831                           
  8832                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
  8833  039A  1312               	bcf	18,6	;volatile
  8834  039B                     l7368:	
  8835                           
  8836                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
  8837  039B  3021               	movlw	33
  8838  039C  0021               	movlb	1	; select bank1
  8839  039D  00BF               	movwf	??_Sensor_Acq_ExecutePacket^(0+128)
  8840  039E  083F               	movf	??_Sensor_Acq_ExecutePacket^(0+128),w
  8841  039F  002E               	movlb	14	; select bank14
  8842  03A0  0698               	xorwf	24,f	;volatile
  8843                           
  8844                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
  8845  03A1  3021               	movlw	33
  8846  03A2  0021               	movlb	1	; select bank1
  8847  03A3  00BF               	movwf	??_Sensor_Acq_ExecutePacket^(0+128)
  8848  03A4  083F               	movf	??_Sensor_Acq_ExecutePacket^(0+128),w
  8849  03A5  002F               	movlb	15	; select bank15
  8850  03A6  0698               	xorwf	24,f	;volatile
  8851                           
  8852                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
  8853  03A7  30C0               	movlw	192
  8854  03A8  0021               	movlb	1	; select bank1
  8855  03A9  00BF               	movwf	??_Sensor_Acq_ExecutePacket^(0+128)
  8856  03AA  083F               	movf	??_Sensor_Acq_ExecutePacket^(0+128),w
  8857  03AB  002E               	movlb	14	; select bank14
  8858  03AC  0694               	xorwf	20,f	;volatile
  8859                           
  8860                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
  8861  03AD  30C0               	movlw	192
  8862  03AE  0021               	movlb	1	; select bank1
  8863  03AF  00BF               	movwf	??_Sensor_Acq_ExecutePacket^(0+128)
  8864  03B0  083F               	movf	??_Sensor_Acq_ExecutePacket^(0+128),w
  8865  03B1  002F               	movlb	15	; select bank15
  8866  03B2  0694               	xorwf	20,f	;volatile
  8867                           
  8868                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
  8869  03B3  0021               	movlb	1	; select bank1
  8870  03B4  184B               	btfsc	Sensor_Acq_ExecutePacket@packet_counter^(0+128),0
  8871  03B5  2C03               	goto	l7384
  8872                           
  8873                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
  8874  03B6  002E               	movlb	14	; select bank14
  8875  03B7  081A               	movf	26,w	;volatile
  8876  03B8  0022               	movlb	2	; select bank2
  8877  03B9  07A0               	addwf	_packet_sample^(0+256),f
  8878  03BA  002E               	movlb	14	; select bank14
  8879  03BB  081B               	movf	27,w	;volatile
  8880  03BC  0022               	movlb	2	; select bank2
  8881  03BD  3DA1               	addwfc	(_packet_sample+1)^(0+256),f
  8882                           
  8883                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
  8884  03BE  002F               	movlb	15	; select bank15
  8885  03BF  081A               	movf	26,w	;volatile
  8886  03C0  0022               	movlb	2	; select bank2
  8887  03C1  07A2               	addwf	(_packet_sample^(0+256)+2),f
  8888  03C2  002F               	movlb	15	; select bank15
  8889  03C3  081B               	movf	27,w	;volatile
  8890  03C4  0022               	movlb	2	; select bank2
  8891  03C5  3DA3               	addwfc	((_packet_sample+1)^(0+256)+2),f
  8892                           
  8893                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
  8894  03C6  0021               	movlb	1	; select bank1
  8895  03C7  0846               	movf	Sensor_Acq_ExecutePacket@activeSensor^(0+128),w
  8896  03C8  1D03               	btfss	3,2
  8897  03C9  2BE5               	goto	l7380
  8898                           
  8899                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  8900  03CA  002E               	movlb	14	; select bank14
  8901  03CB  081A               	movf	26,w	;volatile
  8902  03CC  0021               	movlb	1	; select bank1
  8903  03CD  0249               	subwf	Sensor_Acq_ExecutePacket@last_b^(0+128),w
  8904  03CE  00B4               	movwf	abs@a^(0+128)
  8905  03CF  002E               	movlb	14	; select bank14
  8906  03D0  081B               	movf	27,w	;volatile
  8907  03D1  0021               	movlb	1	; select bank1
  8908  03D2  3B4A               	subwfb	(Sensor_Acq_ExecutePacket@last_b+1)^(0+128),w
  8909  03D3  00B5               	movwf	(abs@a+1)^(0+128)
  8910  03D4  319C  24F7  3182   	fcall	_abs
  8911  03D7  0021               	movlb	1	; select bank1
  8912  03D8  0834               	movf	?_abs^(0+128),w
  8913  03D9  0022               	movlb	2	; select bank2
  8914  03DA  07B4               	addwf	_packet_noise^(0+256),f
  8915  03DB  0021               	movlb	1	; select bank1
  8916  03DC  0835               	movf	(?_abs+1)^(0+128),w
  8917  03DD  0022               	movlb	2	; select bank2
  8918  03DE  3DB5               	addwfc	(_packet_noise+1)^(0+256),f
  8919                           
  8920                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
  8921  03DF  002E               	movlb	14	; select bank14
  8922  03E0  081B               	movf	27,w	;volatile
  8923  03E1  0021               	movlb	1	; select bank1
  8924  03E2  00CA               	movwf	(Sensor_Acq_ExecutePacket@last_b+1)^(0+128)
  8925  03E3  002E               	movlb	14	; select bank14
  8926  03E4  2BFF               	goto	L6
  8927  03E5                     l7380:	
  8928                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
  8929                           
  8930                           
  8931                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  8932  03E5  002F               	movlb	15	; select bank15
  8933  03E6  081A               	movf	26,w	;volatile
  8934  03E7  0021               	movlb	1	; select bank1
  8935  03E8  0249               	subwf	Sensor_Acq_ExecutePacket@last_b^(0+128),w
  8936  03E9  00B4               	movwf	abs@a^(0+128)
  8937  03EA  002F               	movlb	15	; select bank15
  8938  03EB  081B               	movf	27,w	;volatile
  8939  03EC  0021               	movlb	1	; select bank1
  8940  03ED  3B4A               	subwfb	(Sensor_Acq_ExecutePacket@last_b+1)^(0+128),w
  8941  03EE  00B5               	movwf	(abs@a+1)^(0+128)
  8942  03EF  319C  24F7  3182   	fcall	_abs
  8943  03F2  0021               	movlb	1	; select bank1
  8944  03F3  0834               	movf	?_abs^(0+128),w
  8945  03F4  0022               	movlb	2	; select bank2
  8946  03F5  07B4               	addwf	_packet_noise^(0+256),f
  8947  03F6  0021               	movlb	1	; select bank1
  8948  03F7  0835               	movf	(?_abs+1)^(0+128),w
  8949  03F8  0022               	movlb	2	; select bank2
  8950  03F9  3DB5               	addwfc	(_packet_noise+1)^(0+256),f
  8951                           
  8952                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
  8953  03FA  002F               	movlb	15	; select bank15
  8954  03FB  081B               	movf	27,w	;volatile
  8955  03FC  0021               	movlb	1	; select bank1
  8956  03FD  00CA               	movwf	(Sensor_Acq_ExecutePacket@last_b+1)^(0+128)
  8957  03FE  002F               	movlb	15	; select bank15
  8958  03FF                     L6:	
  8959  03FF  081A               	movf	26,w	;volatile
  8960  0400  0021               	movlb	1	; select bank1
  8961  0401  00C9               	movwf	Sensor_Acq_ExecutePacket@last_b^(0+128)
  8962  0402  2C3B               	goto	l7396
  8963  0403                     l7384:	
  8964                           
  8965                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
  8966  0403  002E               	movlb	14	; select bank14
  8967  0404  081A               	movf	26,w	;volatile
  8968  0405  0022               	movlb	2	; select bank2
  8969  0406  02A0               	subwf	_packet_sample^(0+256),f
  8970  0407  002E               	movlb	14	; select bank14
  8971  0408  081B               	movf	27,w	;volatile
  8972  0409  0022               	movlb	2	; select bank2
  8973  040A  3BA1               	subwfb	(_packet_sample+1)^(0+256),f
  8974                           
  8975                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
  8976  040B  002F               	movlb	15	; select bank15
  8977  040C  081A               	movf	26,w	;volatile
  8978  040D  0022               	movlb	2	; select bank2
  8979  040E  02A2               	subwf	(_packet_sample^(0+256)+2),f
  8980  040F  002F               	movlb	15	; select bank15
  8981  0410  081B               	movf	27,w	;volatile
  8982  0411  0022               	movlb	2	; select bank2
  8983  0412  3BA3               	subwfb	((_packet_sample+1)^(0+256)+2),f
  8984                           
  8985                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
  8986  0413  0021               	movlb	1	; select bank1
  8987  0414  0846               	movf	Sensor_Acq_ExecutePacket@activeSensor^(0+128),w
  8988  0415  1D03               	btfss	3,2
  8989  0416  2C1E               	goto	l7392
  8990                           
  8991                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  8992  0417  002E               	movlb	14	; select bank14
  8993  0418  081A               	movf	26,w	;volatile
  8994  0419  0021               	movlb	1	; select bank1
  8995  041A  0247               	subwf	Sensor_Acq_ExecutePacket@last_a^(0+128),w
  8996  041B  00B4               	movwf	abs@a^(0+128)
  8997  041C  002E               	movlb	14	; select bank14
  8998  041D  2C24               	goto	L9
  8999  041E                     l7392:	
  9000                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
  9001                           
  9002                           
  9003                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  9004  041E  002F               	movlb	15	; select bank15
  9005  041F  081A               	movf	26,w	;volatile
  9006  0420  0021               	movlb	1	; select bank1
  9007  0421  0247               	subwf	Sensor_Acq_ExecutePacket@last_a^(0+128),w
  9008  0422  00B4               	movwf	abs@a^(0+128)
  9009  0423  002F               	movlb	15	; select bank15
  9010  0424                     L9:	
  9011  0424  081B               	movf	27,w	;volatile
  9012  0425  0021               	movlb	1	; select bank1
  9013  0426  3B48               	subwfb	(Sensor_Acq_ExecutePacket@last_a+1)^(0+128),w
  9014  0427  00B5               	movwf	(abs@a+1)^(0+128)
  9015  0428  319C  24F7  3182   	fcall	_abs
  9016  042B  0021               	movlb	1	; select bank1
  9017  042C  0834               	movf	?_abs^(0+128),w
  9018  042D  0022               	movlb	2	; select bank2
  9019  042E  07B4               	addwf	_packet_noise^(0+256),f
  9020  042F  0021               	movlb	1	; select bank1
  9021  0430  0835               	movf	(?_abs+1)^(0+128),w
  9022  0431  0022               	movlb	2	; select bank2
  9023  0432  3DB5               	addwfc	(_packet_noise+1)^(0+256),f
  9024                           
  9025                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
  9026  0433  002E               	movlb	14	; select bank14
  9027  0434  081B               	movf	27,w	;volatile
  9028  0435  0021               	movlb	1	; select bank1
  9029  0436  00C8               	movwf	(Sensor_Acq_ExecutePacket@last_a+1)^(0+128)
  9030  0437  002E               	movlb	14	; select bank14
  9031  0438  081A               	movf	26,w	;volatile
  9032  0439  0021               	movlb	1	; select bank1
  9033  043A  00C7               	movwf	Sensor_Acq_ExecutePacket@last_a^(0+128)
  9034  043B                     l7396:	
  9035                           
  9036                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
  9037  043B  084B               	movf	Sensor_Acq_ExecutePacket@packet_counter^(0+128),w
  9038  043C  1D03               	btfss	3,2
  9039  043D  2C40               	goto	l7400
  9040                           
  9041                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
  9042  043E  0020               	movlb	0	; select bank0
  9043  043F  146F               	bsf	_sensor_globalFlags,0	;volatile
  9044  0440                     l7400:	
  9045                           
  9046                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
  9047  0440  3001               	movlw	1
  9048  0441  0021               	movlb	1	; select bank1
  9049  0442  02CB               	subwf	Sensor_Acq_ExecutePacket@packet_counter^(0+128),f
  9050                           
  9051                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
  9052  0443  0020               	movlb	0	; select bank0
  9053  0444  1CEF               	btfss	_sensor_globalFlags,1	;volatile
  9054  0445  2C48               	goto	l289
  9055                           
  9056                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
  9057  0446  156F               	bsf	_sensor_globalFlags,2	;volatile
  9058                           
  9059                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
  9060  0447  146F               	bsf	_sensor_globalFlags,0	;volatile
  9061  0448                     l289:	
  9062                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
  9063                           
  9064                           
  9065                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
  9066  0448  14EF               	bsf	_sensor_globalFlags,1	;volatile
  9067                           
  9068                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
  9069  0449  1C6F               	btfss	_sensor_globalFlags,0	;volatile
  9070  044A  2B88               	goto	l7360
  9071                           
  9072                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
  9073  044B  3199  21E9  3182   	fcall	_TMR2_StopTimer
  9074                           
  9075                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
  9076  044E  0021               	movlb	1	; select bank1
  9077  044F  0840               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp^(0+128),w
  9078  0450  002E               	movlb	14	; select bank14
  9079  0451  0092               	movwf	18	;volatile
  9080                           
  9081                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
  9082  0452  0021               	movlb	1	; select bank1
  9083  0453  0841               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp^(0+128),w
  9084  0454  002E               	movlb	14	; select bank14
  9085  0455  0093               	movwf	19	;volatile
  9086                           
  9087                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
  9088  0456  0021               	movlb	1	; select bank1
  9089  0457  0842               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp^(0+128),w
  9090  0458  002F               	movlb	15	; select bank15
  9091  0459  0093               	movwf	19	;volatile
  9092                           
  9093                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
  9094  045A  0020               	movlb	0	; select bank0
  9095  045B  1D6F               	btfss	_sensor_globalFlags,2	;volatile
  9096  045C  2C5F               	goto	l291
  9097                           
  9098                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  9099  045D  30FB               	movlw	251
  9100  045E  0008               	return
  9101  045F                     l291:	
  9102                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
  9103                           
  9104                           
  9105                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
  9106  045F  1DEF               	btfss	_sensor_globalFlags,3	;volatile
  9107  0460  2C63               	goto	l7424
  9108                           
  9109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  9110  0461  30FA               	movlw	250
  9111  0462  0008               	return
  9112  0463                     l7424:	
  9113                           
  9114                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
  9115  0463  0021               	movlb	1	; select bank1
  9116  0464  0843               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled^(0+128),w
  9117  0465  1903               	btfsc	3,2
  9118  0466  2C6D               	goto	l7428
  9119                           
  9120                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
  9121  0467  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  9122  0468  3E08               	addlw	8
  9123  0469  0086               	movwf	6
  9124  046A  3001               	movlw	1	; select bank2/3
  9125  046B  0087               	movwf	7
  9126  046C  1181               	bcf	1,3
  9127  046D                     l7428:	
  9128                           
  9129                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
  9130  046D  0844               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled^(0+128),w
  9131  046E  1903               	btfsc	3,2
  9132  046F  2C76               	goto	l7432
  9133                           
  9134                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
  9135  0470  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  9136  0471  3E08               	addlw	8
  9137  0472  0086               	movwf	6
  9138  0473  3001               	movlw	1	; select bank2/3
  9139  0474  0087               	movwf	7
  9140  0475  1181               	bcf	1,3
  9141  0476                     l7432:	
  9142                           
  9143                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  9144  0476  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  9145  0477  319B  2377  3182   	fcall	_Sensor_isEnabled
  9146  047A  3A00               	xorlw	0
  9147  047B  1903               	skipnz
  9148  047C  2C8A               	goto	l7438
  9149  047D  0021               	movlb	1	; select bank1
  9150  047E  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  9151  047F  319A  22B1  3182   	fcall	_Sensor_isCalibrated
  9152  0482  3A00               	xorlw	0
  9153  0483  1D03               	skipz
  9154  0484  2C8A               	goto	l7438
  9155                           
  9156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
  9157  0485  0021               	movlb	1	; select bank1
  9158  0486  084C               	movf	Sensor_Acq_ExecutePacket@sensor_adc1^(0+128),w
  9159  0487  3197  2767  3182   	fcall	_Sensor_autoCalibration
  9160  048A                     l7438:	
  9161                           
  9162                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  9163  048A  0021               	movlb	1	; select bank1
  9164  048B  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  9165  048C  319B  2377  3182   	fcall	_Sensor_isEnabled
  9166  048F  3A00               	xorlw	0
  9167  0490  1903               	skipnz
  9168  0491  2C9F               	goto	l7444
  9169  0492  0021               	movlb	1	; select bank1
  9170  0493  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  9171  0494  319A  22B1  3182   	fcall	_Sensor_isCalibrated
  9172  0497  3A00               	xorlw	0
  9173  0498  1D03               	skipz
  9174  0499  2C9F               	goto	l7444
  9175                           
  9176                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
  9177  049A  0021               	movlb	1	; select bank1
  9178  049B  083E               	movf	Sensor_Acq_ExecutePacket@sensor_adc2^(0+128),w
  9179  049C  3197  2767  3182   	fcall	_Sensor_autoCalibration
  9180  049F                     l7444:	
  9181                           
  9182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
  9183  049F  002E               	movlb	14	; select bank14
  9184  04A0  0196               	clrf	22	;volatile
  9185                           
  9186                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
  9187  04A1  002F               	movlb	15	; select bank15
  9188  04A2  0196               	clrf	22	;volatile
  9189                           
  9190                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
  9191  04A3  002E               	movlb	14	; select bank14
  9192  04A4  0197               	clrf	23	;volatile
  9193                           
  9194                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
  9195  04A5  002F               	movlb	15	; select bank15
  9196  04A6  0197               	clrf	23	;volatile
  9197                           
  9198                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
  9199  04A7  002E               	movlb	14	; select bank14
  9200  04A8  1011               	bcf	17,0	;volatile
  9201                           
  9202                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
  9203  04A9  002F               	movlb	15	; select bank15
  9204  04AA  1011               	bcf	17,0	;volatile
  9205  04AB  2B21               	goto	l7284
  9206  04AC                     __end_of_Sensor_Acq_ExecutePacket:	
  9207                           
  9208                           	psect	text41
  9209  19E9                     __ptext41:	
  9210 ;; *************** function _TMR2_StopTimer *****************
  9211 ;; Defined at:
  9212 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;		None
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  1    wreg      void 
  9219 ;; Registers used:
  9220 ;;		None
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9226 ;;      Params:         0       0       0       0       0       0       0       0
  9227 ;;      Locals:         0       0       0       0       0       0       0       0
  9228 ;;      Temps:          0       0       0       0       0       0       0       0
  9229 ;;      Totals:         0       0       0       0       0       0       0       0
  9230 ;;Total ram usage:        0 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:   12
  9233 ;; This function calls:
  9234 ;;		Nothing
  9235 ;; This function is called by:
  9236 ;;		_Sensor_Acq_ExecutePacket
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           
  9241                           ;psect for function _TMR2_StopTimer
  9242  19E9                     _TMR2_StopTimer:	
  9243                           
  9244                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  9245                           
  9246                           ;incstack = 0
  9247 ;; hardware stack exceeded
  9248                           ; Regs used in _TMR2_StopTimer: []
  9249  19E9  0020               	movlb	0	; select bank0
  9250  19EA  111C               	bcf	28,2	;volatile
  9251  19EB  0008               	return
  9252  19EC                     __end_of_TMR2_StopTimer:	
  9253                           
  9254                           	psect	text42
  9255  19E6                     __ptext42:	
  9256 ;; *************** function _TMR2_StartTimer *****************
  9257 ;; Defined at:
  9258 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;		None
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;		None
  9263 ;; Return value:  Size  Location     Type
  9264 ;;                  1    wreg      void 
  9265 ;; Registers used:
  9266 ;;		None
  9267 ;; Tracked objects:
  9268 ;;		On entry : 0/0
  9269 ;;		On exit  : 0/0
  9270 ;;		Unchanged: 0/0
  9271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9272 ;;      Params:         0       0       0       0       0       0       0       0
  9273 ;;      Locals:         0       0       0       0       0       0       0       0
  9274 ;;      Temps:          0       0       0       0       0       0       0       0
  9275 ;;      Totals:         0       0       0       0       0       0       0       0
  9276 ;;Total ram usage:        0 bytes
  9277 ;; Hardware stack levels used:    1
  9278 ;; Hardware stack levels required when called:   12
  9279 ;; This function calls:
  9280 ;;		Nothing
  9281 ;; This function is called by:
  9282 ;;		_Sensor_Acq_ExecutePacket
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           
  9287                           ;psect for function _TMR2_StartTimer
  9288  19E6                     _TMR2_StartTimer:	
  9289                           
  9290                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  9291                           
  9292                           ;incstack = 0
  9293 ;; hardware stack exceeded
  9294                           ; Regs used in _TMR2_StartTimer: []
  9295  19E6  0020               	movlb	0	; select bank0
  9296  19E7  151C               	bsf	28,2	;volatile
  9297  19E8  0008               	return
  9298  19E9                     __end_of_TMR2_StartTimer:	
  9299                           
  9300                           	psect	text43
  9301  1A02                     __ptext43:	
  9302 ;; *************** function _TMR2_LoadPeriodRegister *****************
  9303 ;; Defined at:
  9304 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;  periodVal       1    wreg     unsigned char 
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;  periodVal       1    1[BANK1 ] unsigned char 
  9309 ;; Return value:  Size  Location     Type
  9310 ;;                  1    wreg      void 
  9311 ;; Registers used:
  9312 ;;		wreg
  9313 ;; Tracked objects:
  9314 ;;		On entry : 0/0
  9315 ;;		On exit  : 0/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9318 ;;      Params:         0       0       0       0       0       0       0       0
  9319 ;;      Locals:         0       0       1       0       0       0       0       0
  9320 ;;      Temps:          0       0       0       0       0       0       0       0
  9321 ;;      Totals:         0       0       1       0       0       0       0       0
  9322 ;;Total ram usage:        1 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; Hardware stack levels required when called:   12
  9325 ;; This function calls:
  9326 ;;		Nothing
  9327 ;; This function is called by:
  9328 ;;		_Sensor_Acq_ExecutePacket
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           
  9333                           ;psect for function _TMR2_LoadPeriodRegister
  9334  1A02                     _TMR2_LoadPeriodRegister:	
  9335                           
  9336                           ;incstack = 0
  9337 ;; hardware stack exceeded
  9338                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  9339                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  9340  1A02  0021               	movlb	1	; select bank1
  9341  1A03  00A1               	movwf	TMR2_LoadPeriodRegister@periodVal^(0+128)
  9342                           
  9343                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  9344  1A04  0821               	movf	TMR2_LoadPeriodRegister@periodVal^(0+128),w
  9345  1A05  0020               	movlb	0	; select bank0
  9346  1A06  009B               	movwf	27	;volatile
  9347  1A07  0008               	return
  9348  1A08                     __end_of_TMR2_LoadPeriodRegister:	
  9349                           
  9350                           	psect	text44
  9351  08A5                     __ptext44:	
  9352 ;; *************** function _Sensor_loadADCSettings *****************
  9353 ;; Defined at:
  9354 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9355 ;; Parameters:    Size  Location     Type
  9356 ;;  sensor          1    wreg     PTR struct .
  9357 ;;		 -> NULL(0), mtouch_sensor(27), 
  9358 ;;  adc_index       1    2[BANK1 ] unsigned char 
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;  sensor          1    9[BANK1 ] PTR struct .
  9361 ;;		 -> NULL(0), mtouch_sensor(27), 
  9362 ;;  addressOffse    1    8[BANK1 ] unsigned char 
  9363 ;; Return value:  Size  Location     Type
  9364 ;;                  1    wreg      void 
  9365 ;; Registers used:
  9366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9372 ;;      Params:         0       0       1       0       0       0       0       0
  9373 ;;      Locals:         0       0       4       0       0       0       0       0
  9374 ;;      Temps:          0       0       3       0       0       0       0       0
  9375 ;;      Totals:         0       0       8       0       0       0       0       0
  9376 ;;Total ram usage:        8 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:   13
  9379 ;; This function calls:
  9380 ;;		_Sensor_isCalibrated
  9381 ;;		_Sensor_isCalibratingAcqTime
  9382 ;; This function is called by:
  9383 ;;		_Sensor_Acq_ExecutePacket
  9384 ;; This function uses a non-reentrant model
  9385 ;;
  9386                           
  9387                           
  9388                           ;psect for function _Sensor_loadADCSettings
  9389  08A5                     _Sensor_loadADCSettings:	
  9390                           
  9391                           ;incstack = 0
  9392 ;; hardware stack exceeded
  9393                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9394                           ;Sensor_loadADCSettings@sensor stored from wreg
  9395  08A5  0021               	movlb	1	; select bank1
  9396  08A6  00A9               	movwf	Sensor_loadADCSettings@sensor^(0+128)
  9397                           
  9398                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
  9399  08A7  0829               	movf	Sensor_loadADCSettings@sensor^(0+128),w
  9400  08A8  1903               	btfsc	3,2
  9401  08A9  0008               	return
  9402                           
  9403                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  9404  08AA  0822               	movf	Sensor_loadADCSettings@adc_index^(0+128),w
  9405  08AB  1D03               	btfss	3,2
  9406  08AC  28B0               	goto	l7176
  9407  08AD  01A6               	clrf	_Sensor_loadADCSettings$544^(0+128)
  9408  08AE  01A7               	clrf	(_Sensor_loadADCSettings$544+1)^(0+128)
  9409  08AF  28B4               	goto	l243
  9410  08B0                     l7176:	
  9411  08B0  3080               	movlw	128
  9412  08B1  00A6               	movwf	_Sensor_loadADCSettings$544^(0+128)
  9413  08B2  3000               	movlw	0
  9414  08B3  00A7               	movwf	(_Sensor_loadADCSettings$544^(0+128)+1)
  9415  08B4                     l243:	
  9416  08B4  0826               	movf	_Sensor_loadADCSettings$544^(0+128),w
  9417  08B5  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9418  08B6  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9419  08B7  00A8               	movwf	Sensor_loadADCSettings@addressOffset^(0+128)
  9420                           
  9421                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  9422  08B8  0A29               	incf	Sensor_loadADCSettings@sensor^(0+128),w
  9423  08B9  0086               	movwf	6
  9424  08BA  3001               	movlw	1	; select bank2/3
  9425  08BB  0087               	movwf	7
  9426  08BC  0801               	movf	1,w
  9427  08BD  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9428  08BE  0828               	movf	Sensor_loadADCSettings@addressOffset^(0+128),w
  9429  08BF  3E11               	addlw	17
  9430  08C0  00A4               	movwf	(??_Sensor_loadADCSettings+1)^(0+128)
  9431  08C1  01A5               	clrf	((??_Sensor_loadADCSettings+1)^(0+128)+1)
  9432  08C2  3007               	movlw	7
  9433  08C3  3DA5               	addwfc	((??_Sensor_loadADCSettings+1)^(0+128)+1),f
  9434  08C4  0824               	movf	(??_Sensor_loadADCSettings+1)^(0+128),w
  9435  08C5  0086               	movwf	6
  9436  08C6  0825               	movf	(??_Sensor_loadADCSettings+2)^(0+128),w
  9437  08C7  0087               	movwf	7
  9438  08C8  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9439  08C9  0081               	movwf	1
  9440                           
  9441                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  9442  08CA  0829               	movf	Sensor_loadADCSettings@sensor^(0+128),w
  9443  08CB  3E05               	addlw	5
  9444  08CC  0086               	movwf	6
  9445  08CD  3001               	movlw	1	; select bank2/3
  9446  08CE  0087               	movwf	7
  9447  08CF  0801               	movf	1,w
  9448  08D0  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9449  08D1  0828               	movf	Sensor_loadADCSettings@addressOffset^(0+128),w
  9450  08D2  3E19               	addlw	25
  9451  08D3  00A4               	movwf	(??_Sensor_loadADCSettings+1)^(0+128)
  9452  08D4  01A5               	clrf	((??_Sensor_loadADCSettings+1)^(0+128)+1)
  9453  08D5  3007               	movlw	7
  9454  08D6  3DA5               	addwfc	((??_Sensor_loadADCSettings+1)^(0+128)+1),f
  9455  08D7  0824               	movf	(??_Sensor_loadADCSettings+1)^(0+128),w
  9456  08D8  0086               	movwf	6
  9457  08D9  0825               	movf	(??_Sensor_loadADCSettings+2)^(0+128),w
  9458  08DA  0087               	movwf	7
  9459  08DB  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9460  08DC  0081               	movwf	1
  9461                           
  9462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  9463  08DD  0828               	movf	Sensor_loadADCSettings@addressOffset^(0+128),w
  9464  08DE  3E13               	addlw	19
  9465  08DF  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9466  08E0  01A4               	clrf	(??_Sensor_loadADCSettings^(0+128)+1)
  9467  08E1  3007               	movlw	7
  9468  08E2  3DA4               	addwfc	(??_Sensor_loadADCSettings^(0+128)+1),f
  9469  08E3  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9470  08E4  0086               	movwf	6
  9471  08E5  0824               	movf	(??_Sensor_loadADCSettings+1)^(0+128),w
  9472  08E6  0087               	movwf	7
  9473  08E7  3050               	movlw	80
  9474  08E8  0081               	movwf	1
  9475                           
  9476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  9477  08E9  30FE               	movlw	254
  9478  08EA  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9479  08EB  0828               	movf	Sensor_loadADCSettings@addressOffset^(0+128),w
  9480  08EC  3E18               	addlw	24
  9481  08ED  0086               	movwf	6
  9482  08EE  0187               	clrf	7
  9483  08EF  3007               	movlw	7
  9484  08F0  3D87               	addwfc	7,f
  9485  08F1  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9486  08F2  0581               	andwf	1,f
  9487                           
  9488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
  9489  08F3  0829               	movf	Sensor_loadADCSettings@sensor^(0+128),w
  9490  08F4  319A  22B1  3188   	fcall	_Sensor_isCalibrated
  9491  08F7  3A00               	xorlw	0
  9492  08F8  1903               	skipnz
  9493  08F9  290F               	goto	l7190
  9494                           
  9495                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  9496  08FA  0021               	movlb	1	; select bank1
  9497  08FB  0829               	movf	Sensor_loadADCSettings@sensor^(0+128),w
  9498  08FC  3E02               	addlw	2
  9499  08FD  0086               	movwf	6
  9500  08FE  3001               	movlw	1	; select bank2/3
  9501  08FF  0087               	movwf	7
  9502  0900  0801               	movf	1,w
  9503  0901  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9504  0902  0828               	movf	Sensor_loadADCSettings@addressOffset^(0+128),w
  9505  0903  3E16               	addlw	22
  9506  0904  00A4               	movwf	(??_Sensor_loadADCSettings+1)^(0+128)
  9507  0905  01A5               	clrf	((??_Sensor_loadADCSettings+1)^(0+128)+1)
  9508  0906  3007               	movlw	7
  9509  0907  3DA5               	addwfc	((??_Sensor_loadADCSettings+1)^(0+128)+1),f
  9510  0908  0824               	movf	(??_Sensor_loadADCSettings+1)^(0+128),w
  9511  0909  0086               	movwf	6
  9512  090A  0825               	movf	(??_Sensor_loadADCSettings+2)^(0+128),w
  9513  090B  0087               	movwf	7
  9514  090C  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9515  090D  0081               	movwf	1
  9516  090E  2924               	goto	L11
  9517  090F                     l7190:	
  9518                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
  9519                           
  9520                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  9521                           
  9522                           
  9523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  9524  090F  0021               	movlb	1	; select bank1
  9525  0910  0828               	movf	Sensor_loadADCSettings@addressOffset^(0+128),w
  9526  0911  3E16               	addlw	22
  9527  0912  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9528  0913  01A4               	clrf	(??_Sensor_loadADCSettings^(0+128)+1)
  9529  0914  3007               	movlw	7
  9530  0915  3DA4               	addwfc	(??_Sensor_loadADCSettings^(0+128)+1),f
  9531  0916  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9532  0917  0086               	movwf	6
  9533  0918  0824               	movf	(??_Sensor_loadADCSettings+1)^(0+128),w
  9534  0919  0087               	movwf	7
  9535  091A  3020               	movlw	32
  9536  091B  0081               	movwf	1
  9537                           
  9538                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  9539  091C  0829               	movf	Sensor_loadADCSettings@sensor^(0+128),w
  9540  091D  319A  22A7  3188   	fcall	_Sensor_isCalibratingAcqTime
  9541  0920  3A00               	xorlw	0
  9542  0921  1903               	skipnz
  9543  0922  2937               	goto	l7196
  9544                           
  9545                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  9546  0923  0021               	movlb	1	; select bank1
  9547  0924                     L11:	
  9548  0924  0829               	movf	Sensor_loadADCSettings@sensor^(0+128),w
  9549  0925  3E03               	addlw	3
  9550  0926  0086               	movwf	6
  9551  0927  3001               	movlw	1	; select bank2/3
  9552  0928  0087               	movwf	7
  9553  0929  0801               	movf	1,w
  9554  092A  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9555  092B  0828               	movf	Sensor_loadADCSettings@addressOffset^(0+128),w
  9556  092C  3E17               	addlw	23
  9557  092D  00A4               	movwf	(??_Sensor_loadADCSettings+1)^(0+128)
  9558  092E  01A5               	clrf	((??_Sensor_loadADCSettings+1)^(0+128)+1)
  9559  092F  3007               	movlw	7
  9560  0930  3DA5               	addwfc	((??_Sensor_loadADCSettings+1)^(0+128)+1),f
  9561  0931  0824               	movf	(??_Sensor_loadADCSettings+1)^(0+128),w
  9562  0932  0086               	movwf	6
  9563  0933  0825               	movf	(??_Sensor_loadADCSettings+2)^(0+128),w
  9564  0934  0087               	movwf	7
  9565  0935  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9566  0936  2943               	goto	L10
  9567  0937                     l7196:	
  9568                           
  9569                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  9570  0937  0021               	movlb	1	; select bank1
  9571  0938  0828               	movf	Sensor_loadADCSettings@addressOffset^(0+128),w
  9572  0939  3E17               	addlw	23
  9573  093A  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9574  093B  01A4               	clrf	(??_Sensor_loadADCSettings^(0+128)+1)
  9575  093C  3007               	movlw	7
  9576  093D  3DA4               	addwfc	(??_Sensor_loadADCSettings^(0+128)+1),f
  9577  093E  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9578  093F  0086               	movwf	6
  9579  0940  0824               	movf	(??_Sensor_loadADCSettings+1)^(0+128),w
  9580  0941  0087               	movwf	7
  9581  0942  3020               	movlw	32
  9582  0943                     L10:	
  9583  0943  0081               	movwf	1
  9584                           
  9585                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  9586                           
  9587                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  9588  0944  0829               	movf	Sensor_loadADCSettings@sensor^(0+128),w
  9589  0945  3E04               	addlw	4
  9590  0946  0086               	movwf	6
  9591  0947  3001               	movlw	1	; select bank2/3
  9592  0948  0087               	movwf	7
  9593  0949  0801               	movf	1,w
  9594  094A  00A3               	movwf	??_Sensor_loadADCSettings^(0+128)
  9595  094B  01A4               	clrf	(??_Sensor_loadADCSettings^(0+128)+1)
  9596  094C  3009               	movlw	9
  9597  094D                     u7805:	
  9598  094D  35A3               	lslf	??_Sensor_loadADCSettings^(0+128),f
  9599  094E  0DA4               	rlf	(??_Sensor_loadADCSettings^(0+128)+1),f
  9600  094F  0B89               	decfsz	9,f
  9601  0950  294D               	goto	u7805
  9602  0951  3522               	lslf	Sensor_loadADCSettings@adc_index^(0+128),w
  9603  0952  3E20               	addlw	(low (_packet_sample| (0+256)))& (0+255)
  9604  0953  0086               	movwf	6
  9605  0954  3001               	movlw	1	; select bank2/3
  9606  0955  0087               	movwf	7
  9607  0956  0823               	movf	??_Sensor_loadADCSettings^(0+128),w
  9608  0957  3FC0               	movwi [0]fsr1
  9609  0958  0824               	movf	(??_Sensor_loadADCSettings+1)^(0+128),w
  9610  0959  3FC1               	movwi [1]fsr1
  9611  095A  0008               	return
  9612  095B                     __end_of_Sensor_loadADCSettings:	
  9613                           
  9614                           	psect	text45
  9615  1AB1                     __ptext45:	
  9616 ;; *************** function _Sensor_isCalibrated *****************
  9617 ;; Defined at:
  9618 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;  sensor          1    wreg     PTR struct .
  9621 ;;		 -> NULL(0), mtouch_sensor(27), 
  9622 ;; Auto vars:     Size  Location     Type
  9623 ;;  sensor          1    1[BANK1 ] PTR struct .
  9624 ;;		 -> NULL(0), mtouch_sensor(27), 
  9625 ;; Return value:  Size  Location     Type
  9626 ;;                  1    wreg      _Bool 
  9627 ;; Registers used:
  9628 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9634 ;;      Params:         0       0       0       0       0       0       0       0
  9635 ;;      Locals:         0       0       1       0       0       0       0       0
  9636 ;;      Temps:          0       0       0       0       0       0       0       0
  9637 ;;      Totals:         0       0       1       0       0       0       0       0
  9638 ;;Total ram usage:        1 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:   12
  9641 ;; This function calls:
  9642 ;;		Nothing
  9643 ;; This function is called by:
  9644 ;;		_Sensor_Acquisition
  9645 ;;		_Sensor_loadADCSettings
  9646 ;;		_Sensor_Acq_ExecutePacket
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _Sensor_isCalibrated
  9652  1AB1                     _Sensor_isCalibrated:	
  9653                           
  9654                           ;incstack = 0
  9655 ;; hardware stack exceeded
  9656                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  9657                           ;Sensor_isCalibrated@sensor stored from wreg
  9658  1AB1  0021               	movlb	1	; select bank1
  9659  1AB2  00A1               	movwf	Sensor_isCalibrated@sensor^(0+128)
  9660                           
  9661                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
  9662  1AB3  0821               	movf	Sensor_isCalibrated@sensor^(0+128),w
  9663  1AB4  3E08               	addlw	8
  9664  1AB5  0086               	movwf	6
  9665  1AB6  3001               	movlw	1	; select bank2/3
  9666  1AB7  0087               	movwf	7
  9667  1AB8  0C01               	rrf	1,w
  9668  1AB9  0C89               	rrf	9,f
  9669  1ABA  3901               	andlw	1
  9670  1ABB  0008               	return
  9671  1ABC                     __end_of_Sensor_isCalibrated:	
  9672                           
  9673                           	psect	text46
  9674  1B77                     __ptext46:	
  9675 ;; *************** function _Sensor_isEnabled *****************
  9676 ;; Defined at:
  9677 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9678 ;; Parameters:    Size  Location     Type
  9679 ;;  sensor          1    wreg     PTR struct .
  9680 ;;		 -> NULL(0), mtouch_sensor(27), 
  9681 ;; Auto vars:     Size  Location     Type
  9682 ;;  sensor          1    2[BANK1 ] PTR struct .
  9683 ;;		 -> NULL(0), mtouch_sensor(27), 
  9684 ;; Return value:  Size  Location     Type
  9685 ;;                  1    wreg      _Bool 
  9686 ;; Registers used:
  9687 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9688 ;; Tracked objects:
  9689 ;;		On entry : 0/0
  9690 ;;		On exit  : 0/0
  9691 ;;		Unchanged: 0/0
  9692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9693 ;;      Params:         0       0       0       0       0       0       0       0
  9694 ;;      Locals:         0       0       1       0       0       0       0       0
  9695 ;;      Temps:          0       0       1       0       0       0       0       0
  9696 ;;      Totals:         0       0       2       0       0       0       0       0
  9697 ;;Total ram usage:        2 bytes
  9698 ;; Hardware stack levels used:    1
  9699 ;; Hardware stack levels required when called:   12
  9700 ;; This function calls:
  9701 ;;		Nothing
  9702 ;; This function is called by:
  9703 ;;		_Sensor_Service
  9704 ;;		_Sensor_postAcquisitionProcess
  9705 ;;		_Sensor_Acq_ExecutePacket
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709                           
  9710                           ;psect for function _Sensor_isEnabled
  9711  1B77                     _Sensor_isEnabled:	
  9712                           
  9713                           ;incstack = 0
  9714                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  9715                           ;Sensor_isEnabled@sensor stored from wreg
  9716  1B77  0021               	movlb	1	; select bank1
  9717  1B78  00A2               	movwf	Sensor_isEnabled@sensor^(0+128)
  9718                           
  9719                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
  9720  1B79  0822               	movf	Sensor_isEnabled@sensor^(0+128),w
  9721  1B7A  1903               	btfsc	3,2
  9722  1B7B  2B87               	goto	l7154
  9723                           
  9724                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
  9725  1B7C  0822               	movf	Sensor_isEnabled@sensor^(0+128),w
  9726  1B7D  3E08               	addlw	8
  9727  1B7E  0086               	movwf	6
  9728  1B7F  3001               	movlw	1	; select bank2/3
  9729  1B80  0087               	movwf	7
  9730  1B81  0C01               	rrf	1,w
  9731  1B82  00A1               	movwf	??_Sensor_isEnabled^(0+128)
  9732  1B83  0CA1               	rrf	??_Sensor_isEnabled^(0+128),f
  9733  1B84  0C21               	rrf	??_Sensor_isEnabled^(0+128),w
  9734  1B85  3901               	andlw	1
  9735  1B86  0008               	return
  9736  1B87                     l7154:	
  9737                           
  9738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
  9739  1B87  3000               	movlw	0
  9740  1B88  0008               	return
  9741  1B89                     __end_of_Sensor_isEnabled:	
  9742                           
  9743                           	psect	text47
  9744  1AF5                     __ptext47:	
  9745 ;; *************** function _Sensor_isActive *****************
  9746 ;; Defined at:
  9747 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;  sensor          1    wreg     PTR struct .
  9750 ;;		 -> NULL(0), mtouch_sensor(27), 
  9751 ;; Auto vars:     Size  Location     Type
  9752 ;;  sensor          1    1[BANK1 ] PTR struct .
  9753 ;;		 -> NULL(0), mtouch_sensor(27), 
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  1    wreg      _Bool 
  9756 ;; Registers used:
  9757 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9763 ;;      Params:         0       0       0       0       0       0       0       0
  9764 ;;      Locals:         0       0       1       0       0       0       0       0
  9765 ;;      Temps:          0       0       0       0       0       0       0       0
  9766 ;;      Totals:         0       0       1       0       0       0       0       0
  9767 ;;Total ram usage:        1 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:   12
  9770 ;; This function calls:
  9771 ;;		Nothing
  9772 ;; This function is called by:
  9773 ;;		_Sensor_Acquisition
  9774 ;;		_Sensor_Acq_ExecutePacket
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           
  9779                           ;psect for function _Sensor_isActive
  9780  1AF5                     _Sensor_isActive:	
  9781                           
  9782                           ;incstack = 0
  9783 ;; hardware stack exceeded
  9784                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  9785                           ;Sensor_isActive@sensor stored from wreg
  9786  1AF5  0021               	movlb	1	; select bank1
  9787  1AF6  00A1               	movwf	Sensor_isActive@sensor^(0+128)
  9788                           
  9789                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
  9790  1AF7  0821               	movf	Sensor_isActive@sensor^(0+128),w
  9791  1AF8  1D03               	btfss	3,2
  9792  1AF9  2AFC               	goto	l7164
  9793                           
  9794                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
  9795  1AFA  3000               	movlw	0
  9796  1AFB  0008               	return
  9797  1AFC                     l7164:	
  9798                           
  9799                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
  9800  1AFC  0821               	movf	Sensor_isActive@sensor^(0+128),w
  9801  1AFD  3E08               	addlw	8
  9802  1AFE  0086               	movwf	6
  9803  1AFF  3001               	movlw	1	; select bank2/3
  9804  1B00  0087               	movwf	7
  9805  1B01  0C01               	rrf	1,w
  9806  1B02  3901               	andlw	1
  9807  1B03  0008               	return
  9808  1B04                     __end_of_Sensor_isActive:	
  9809                           
  9810                           	psect	text48
  9811  1767                     __ptext48:	
  9812 ;; *************** function _Sensor_autoCalibration *****************
  9813 ;; Defined at:
  9814 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;  sensor          1    wreg     PTR struct .
  9817 ;;		 -> NULL(0), mtouch_sensor(27), 
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;  sensor          1   29[BANK1 ] PTR struct .
  9820 ;;		 -> NULL(0), mtouch_sensor(27), 
  9821 ;;  adcIndex        1   28[BANK1 ] unsigned char 
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  1    wreg      void 
  9824 ;; Registers used:
  9825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9831 ;;      Params:         0       0       0       0       0       0       0       0
  9832 ;;      Locals:         0       0       2       0       0       0       0       0
  9833 ;;      Temps:          0       0       4       0       0       0       0       0
  9834 ;;      Totals:         0       0       6       0       0       0       0       0
  9835 ;;Total ram usage:        6 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:   13
  9838 ;; This function calls:
  9839 ;;		_Sensor_getScanGroupIndex
  9840 ;;		_Sensor_isCalibratingAcqTime
  9841 ;;		_Sensor_setCalibratAcqTime
  9842 ;;		_Sensor_setCalibrated
  9843 ;;		_abs
  9844 ;; This function is called by:
  9845 ;;		_Sensor_Acq_ExecutePacket
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           
  9850                           ;psect for function _Sensor_autoCalibration
  9851  1767                     _Sensor_autoCalibration:	
  9852                           
  9853                           ;incstack = 0
  9854 ;; hardware stack exceeded
  9855                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9856                           ;Sensor_autoCalibration@sensor stored from wreg
  9857  1767  0021               	movlb	1	; select bank1
  9858  1768  00BD               	movwf	Sensor_autoCalibration@sensor^(0+128)
  9859                           
  9860                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  9861  1769  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9862  176A  319F  2714  3197   	fcall	_Sensor_getScanGroupIndex
  9863  176D  0021               	movlb	1	; select bank1
  9864  176E  00B8               	movwf	??_Sensor_autoCalibration^(0+128)
  9865  176F  0838               	movf	??_Sensor_autoCalibration^(0+128),w
  9866  1770  00BC               	movwf	Sensor_autoCalibration@adcIndex^(0+128)
  9867                           
  9868                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  9869  1771  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9870  1772  319A  22A7  3197   	fcall	_Sensor_isCalibratingAcqTime
  9871  1775  3A00               	xorlw	0
  9872  1776  1D03               	skipz
  9873  1777  2FAC               	goto	l7216
  9874                           
  9875                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  9876  1778  0021               	movlb	1	; select bank1
  9877  1779  353C               	lslf	Sensor_autoCalibration@adcIndex^(0+128),w
  9878  177A  3E20               	addlw	(low (_packet_sample| (0+256)))& (0+255)
  9879  177B  0086               	movwf	6
  9880  177C  3001               	movlw	1	; select bank2/3
  9881  177D  0087               	movwf	7
  9882  177E  3F40               	moviw [0]fsr1
  9883  177F  00B8               	movwf	??_Sensor_autoCalibration^(0+128)
  9884  1780  3F41               	moviw [1]fsr1
  9885  1781  00B9               	movwf	(??_Sensor_autoCalibration^(0+128)+1)
  9886  1782  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9887  1783  3E04               	addlw	4
  9888  1784  0086               	movwf	6
  9889  1785  3001               	movlw	1	; select bank2/3
  9890  1786  0087               	movwf	7
  9891  1787  0801               	movf	1,w
  9892  1788  00BA               	movwf	(??_Sensor_autoCalibration+2)^(0+128)
  9893  1789  01BB               	clrf	((??_Sensor_autoCalibration+2)^(0+128)+1)
  9894  178A  3009               	movlw	9
  9895  178B                     u7825:	
  9896  178B  35BA               	lslf	(??_Sensor_autoCalibration+2)^(0+128),f
  9897  178C  0DBB               	rlf	((??_Sensor_autoCalibration+2)^(0+128)+1),f
  9898  178D  0B89               	decfsz	9,f
  9899  178E  2F8B               	goto	u7825
  9900  178F  0839               	movf	(??_Sensor_autoCalibration+1)^(0+128),w
  9901  1790  023B               	subwf	(??_Sensor_autoCalibration+3)^(0+128),w
  9902  1791  1D03               	skipz
  9903  1792  2F95               	goto	u7835
  9904  1793  0838               	movf	??_Sensor_autoCalibration^(0+128),w
  9905  1794  023A               	subwf	(??_Sensor_autoCalibration+2)^(0+128),w
  9906  1795                     u7835:	
  9907  1795  1803               	skipnc
  9908  1796  2FA8               	goto	l7214
  9909                           
  9910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  9911  1797  3001               	movlw	1
  9912  1798  00B8               	movwf	??_Sensor_autoCalibration^(0+128)
  9913  1799  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9914  179A  3E05               	addlw	5
  9915  179B  0086               	movwf	6
  9916  179C  3001               	movlw	1	; select bank2/3
  9917  179D  0087               	movwf	7
  9918  179E  0838               	movf	??_Sensor_autoCalibration^(0+128),w
  9919  179F  0781               	addwf	1,f
  9920  17A0  300F               	movlw	15
  9921  17A1  0201               	subwf	1,w
  9922  17A2  1C03               	skipc
  9923  17A3  0008               	return
  9924                           
  9925                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  9926  17A4  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9927  17A5  319B  2334         	fcall	_Sensor_setCalibratAcqTime
  9928  17A7  0008               	return
  9929  17A8                     l7214:	
  9930                           
  9931                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
  9932  17A8  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9933  17A9  319B  2334         	fcall	_Sensor_setCalibratAcqTime
  9934  17AB  0008               	return
  9935  17AC                     l7216:	
  9936                           
  9937                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  9938  17AC  0021               	movlb	1	; select bank1
  9939  17AD  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9940  17AE  3E04               	addlw	4
  9941  17AF  0086               	movwf	6
  9942  17B0  3001               	movlw	1	; select bank2/3
  9943  17B1  0087               	movwf	7
  9944  17B2  0801               	movf	1,w
  9945  17B3  00B8               	movwf	??_Sensor_autoCalibration^(0+128)
  9946  17B4  01B9               	clrf	(??_Sensor_autoCalibration^(0+128)+1)
  9947  17B5  35B8               	lslf	??_Sensor_autoCalibration^(0+128),f
  9948  17B6  0DB9               	rlf	(??_Sensor_autoCalibration^(0+128)+1),f
  9949  17B7  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9950  17B8  3E06               	addlw	6
  9951  17B9  0086               	movwf	6
  9952  17BA  3001               	movlw	1	; select bank2/3
  9953  17BB  0087               	movwf	7
  9954  17BC  353C               	lslf	Sensor_autoCalibration@adcIndex^(0+128),w
  9955  17BD  3E20               	addlw	(low (_packet_sample| (0+256)))& (0+255)
  9956  17BE  0084               	movwf	4
  9957  17BF  3001               	movlw	1	; select bank2/3
  9958  17C0  0085               	movwf	5
  9959  17C1  3F40               	moviw [0]fsr1
  9960  17C2  0200               	subwf	0,w
  9961  17C3  00B4               	movwf	abs@a^(0+128)
  9962  17C4  3101               	addfsr 0,1
  9963  17C5  3F41               	moviw [1]fsr1
  9964  17C6  3B00               	subwfb	0,w
  9965  17C7  00B5               	movwf	(abs@a^(0+128)+1)
  9966  17C8  319C  24F7  3197   	fcall	_abs
  9967  17CB  0021               	movlb	1	; select bank1
  9968  17CC  0839               	movf	(??_Sensor_autoCalibration+1)^(0+128),w
  9969  17CD  0235               	subwf	(?_abs+1)^(0+128),w
  9970  17CE  1D03               	skipz
  9971  17CF  2FD2               	goto	u7855
  9972  17D0  0838               	movf	??_Sensor_autoCalibration^(0+128),w
  9973  17D1  0234               	subwf	?_abs^(0+128),w
  9974  17D2                     u7855:	
  9975  17D2  1803               	skipnc
  9976  17D3  2FE1               	goto	l7222
  9977                           
  9978                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  9979  17D4  3020               	movlw	32
  9980  17D5  00B8               	movwf	??_Sensor_autoCalibration^(0+128)
  9981  17D6  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9982  17D7  3E02               	addlw	2
  9983  17D8  0086               	movwf	6
  9984  17D9  3001               	movlw	1	; select bank2/3
  9985  17DA  0087               	movwf	7
  9986  17DB  0838               	movf	??_Sensor_autoCalibration^(0+128),w
  9987  17DC  0081               	movwf	1
  9988                           
  9989                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
  9990  17DD  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
  9991  17DE  319A  22E6         	fcall	_Sensor_setCalibrated
  9992                           
  9993                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
  9994  17E0  0008               	return
  9995  17E1                     l7222:	
  9996                           
  9997                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
  9998  17E1  3002               	movlw	2
  9999  17E2  00B8               	movwf	??_Sensor_autoCalibration^(0+128)
 10000  17E3  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
 10001  17E4  3E03               	addlw	3
 10002  17E5  0086               	movwf	6
 10003  17E6  3001               	movlw	1	; select bank2/3
 10004  17E7  0087               	movwf	7
 10005  17E8  0838               	movf	??_Sensor_autoCalibration^(0+128),w
 10006  17E9  0781               	addwf	1,f
 10007                           
 10008                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 10009  17EA  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
 10010  17EB  3E03               	addlw	3
 10011  17EC  0086               	movwf	6
 10012  17ED  3001               	movlw	1	; select bank2/3
 10013  17EE  0087               	movwf	7
 10014  17EF  3020               	movlw	32
 10015  17F0  0201               	subwf	1,w
 10016  17F1  1C03               	skipc
 10017  17F2  0008               	return
 10018                           
 10019                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 10020  17F3  3020               	movlw	32
 10021  17F4  00B8               	movwf	??_Sensor_autoCalibration^(0+128)
 10022  17F5  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
 10023  17F6  3E02               	addlw	2
 10024  17F7  0086               	movwf	6
 10025  17F8  3001               	movlw	1	; select bank2/3
 10026  17F9  0087               	movwf	7
 10027  17FA  0838               	movf	??_Sensor_autoCalibration^(0+128),w
 10028  17FB  0081               	movwf	1
 10029                           
 10030                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
 10031  17FC  083D               	movf	Sensor_autoCalibration@sensor^(0+128),w
 10032  17FD  319A  22E6         	fcall	_Sensor_setCalibrated
 10033  17FF  0008               	return
 10034  1800                     __end_of_Sensor_autoCalibration:	
 10035                           
 10036                           	psect	text49
 10037  1AE6                     __ptext49:	
 10038 ;; *************** function _Sensor_setCalibrated *****************
 10039 ;; Defined at:
 10040 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;  sensor          1    wreg     PTR struct .
 10043 ;;		 -> NULL(0), mtouch_sensor(27), 
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;  sensor          1    1[BANK1 ] PTR struct .
 10046 ;;		 -> NULL(0), mtouch_sensor(27), 
 10047 ;; Return value:  Size  Location     Type
 10048 ;;                  1    wreg      void 
 10049 ;; Registers used:
 10050 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10051 ;; Tracked objects:
 10052 ;;		On entry : 0/0
 10053 ;;		On exit  : 0/0
 10054 ;;		Unchanged: 0/0
 10055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10056 ;;      Params:         0       0       0       0       0       0       0       0
 10057 ;;      Locals:         0       0       1       0       0       0       0       0
 10058 ;;      Temps:          0       0       0       0       0       0       0       0
 10059 ;;      Totals:         0       0       1       0       0       0       0       0
 10060 ;;Total ram usage:        1 bytes
 10061 ;; Hardware stack levels used:    1
 10062 ;; Hardware stack levels required when called:   12
 10063 ;; This function calls:
 10064 ;;		Nothing
 10065 ;; This function is called by:
 10066 ;;		_Sensor_autoCalibration
 10067 ;; This function uses a non-reentrant model
 10068 ;;
 10069                           
 10070                           
 10071                           ;psect for function _Sensor_setCalibrated
 10072  1AE6                     _Sensor_setCalibrated:	
 10073                           
 10074                           ;incstack = 0
 10075 ;; hardware stack exceeded
 10076                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10077                           ;Sensor_setCalibrated@sensor stored from wreg
 10078  1AE6  0021               	movlb	1	; select bank1
 10079  1AE7  00A1               	movwf	Sensor_setCalibrated@sensor^(0+128)
 10080                           
 10081                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
 10082  1AE8  0821               	movf	Sensor_setCalibrated@sensor^(0+128),w
 10083  1AE9  3E08               	addlw	8
 10084  1AEA  0086               	movwf	6
 10085  1AEB  3001               	movlw	1	; select bank2/3
 10086  1AEC  0087               	movwf	7
 10087  1AED  1501               	bsf	1,2
 10088                           
 10089                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
 10090  1AEE  0821               	movf	Sensor_setCalibrated@sensor^(0+128),w
 10091  1AEF  3E08               	addlw	8
 10092  1AF0  0086               	movwf	6
 10093  1AF1  3001               	movlw	1	; select bank2/3
 10094  1AF2  0087               	movwf	7
 10095  1AF3  1201               	bcf	1,4
 10096  1AF4  0008               	return
 10097  1AF5                     __end_of_Sensor_setCalibrated:	
 10098                           
 10099                           	psect	text50
 10100  1B34                     __ptext50:	
 10101 ;; *************** function _Sensor_setCalibratAcqTime *****************
 10102 ;; Defined at:
 10103 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;  sensor          1    wreg     PTR struct .
 10106 ;;		 -> NULL(0), mtouch_sensor(27), 
 10107 ;; Auto vars:     Size  Location     Type
 10108 ;;  sensor          1    1[BANK1 ] PTR struct .
 10109 ;;		 -> NULL(0), mtouch_sensor(27), 
 10110 ;; Return value:  Size  Location     Type
 10111 ;;                  1    wreg      void 
 10112 ;; Registers used:
 10113 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/0
 10116 ;;		On exit  : 0/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10119 ;;      Params:         0       0       0       0       0       0       0       0
 10120 ;;      Locals:         0       0       1       0       0       0       0       0
 10121 ;;      Temps:          0       0       0       0       0       0       0       0
 10122 ;;      Totals:         0       0       1       0       0       0       0       0
 10123 ;;Total ram usage:        1 bytes
 10124 ;; Hardware stack levels used:    1
 10125 ;; Hardware stack levels required when called:   12
 10126 ;; This function calls:
 10127 ;;		Nothing
 10128 ;; This function is called by:
 10129 ;;		_Sensor_autoCalibration
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           
 10134                           ;psect for function _Sensor_setCalibratAcqTime
 10135  1B34                     _Sensor_setCalibratAcqTime:	
 10136                           
 10137                           ;incstack = 0
 10138 ;; hardware stack exceeded
 10139                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10140                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 10141  1B34  0021               	movlb	1	; select bank1
 10142  1B35  00A1               	movwf	Sensor_setCalibratAcqTime@sensor^(0+128)
 10143                           
 10144                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
 10145  1B36  0821               	movf	Sensor_setCalibratAcqTime@sensor^(0+128),w
 10146  1B37  3E08               	addlw	8
 10147  1B38  0086               	movwf	6
 10148  1B39  3001               	movlw	1	; select bank2/3
 10149  1B3A  0087               	movwf	7
 10150  1B3B  1601               	bsf	1,4
 10151                           
 10152                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 10153  1B3C  0821               	movf	Sensor_setCalibratAcqTime@sensor^(0+128),w
 10154  1B3D  3E03               	addlw	3
 10155  1B3E  0086               	movwf	6
 10156  1B3F  3001               	movlw	1	; select bank2/3
 10157  1B40  0087               	movwf	7
 10158  1B41  0181               	clrf	1
 10159  1B42  0A81               	incf	1,f
 10160  1B43  0008               	return
 10161  1B44                     __end_of_Sensor_setCalibratAcqTime:	
 10162                           
 10163                           	psect	text51
 10164  1AA7                     __ptext51:	
 10165 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 10166 ;; Defined at:
 10167 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  sensor          1    wreg     PTR struct .
 10170 ;;		 -> NULL(0), mtouch_sensor(27), 
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;  sensor          1    1[BANK1 ] PTR struct .
 10173 ;;		 -> NULL(0), mtouch_sensor(27), 
 10174 ;; Return value:  Size  Location     Type
 10175 ;;                  1    wreg      _Bool 
 10176 ;; Registers used:
 10177 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10178 ;; Tracked objects:
 10179 ;;		On entry : 0/0
 10180 ;;		On exit  : 0/0
 10181 ;;		Unchanged: 0/0
 10182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10183 ;;      Params:         0       0       0       0       0       0       0       0
 10184 ;;      Locals:         0       0       1       0       0       0       0       0
 10185 ;;      Temps:          0       0       0       0       0       0       0       0
 10186 ;;      Totals:         0       0       1       0       0       0       0       0
 10187 ;;Total ram usage:        1 bytes
 10188 ;; Hardware stack levels used:    1
 10189 ;; Hardware stack levels required when called:   12
 10190 ;; This function calls:
 10191 ;;		Nothing
 10192 ;; This function is called by:
 10193 ;;		_Sensor_loadADCSettings
 10194 ;;		_Sensor_autoCalibration
 10195 ;; This function uses a non-reentrant model
 10196 ;;
 10197                           
 10198                           
 10199                           ;psect for function _Sensor_isCalibratingAcqTime
 10200  1AA7                     _Sensor_isCalibratingAcqTime:	
 10201                           
 10202                           ;incstack = 0
 10203 ;; hardware stack exceeded
 10204                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10205                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 10206  1AA7  0021               	movlb	1	; select bank1
 10207  1AA8  00A1               	movwf	Sensor_isCalibratingAcqTime@sensor^(0+128)
 10208                           
 10209                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
 10210  1AA9  0821               	movf	Sensor_isCalibratingAcqTime@sensor^(0+128),w
 10211  1AAA  3E08               	addlw	8
 10212  1AAB  0086               	movwf	6
 10213  1AAC  3001               	movlw	1	; select bank2/3
 10214  1AAD  0087               	movwf	7
 10215  1AAE  0E01               	swapf	1,w
 10216  1AAF  3901               	andlw	1
 10217  1AB0  0008               	return
 10218  1AB1                     __end_of_Sensor_isCalibratingAcqTime:	
 10219                           
 10220                           	psect	text52
 10221  1F14                     __ptext52:	
 10222 ;; *************** function _Sensor_getScanGroupIndex *****************
 10223 ;; Defined at:
 10224 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;  sensor          1    wreg     PTR struct .
 10227 ;;		 -> NULL(0), mtouch_sensor(27), 
 10228 ;; Auto vars:     Size  Location     Type
 10229 ;;  sensor          1    3[BANK1 ] PTR struct .
 10230 ;;		 -> NULL(0), mtouch_sensor(27), 
 10231 ;;  sensorGroup     1    4[BANK1 ] unsigned char 
 10232 ;; Return value:  Size  Location     Type
 10233 ;;                  1    wreg      unsigned char 
 10234 ;; Registers used:
 10235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10241 ;;      Params:         0       0       0       0       0       0       0       0
 10242 ;;      Locals:         0       0       2       0       0       0       0       0
 10243 ;;      Temps:          0       0       2       0       0       0       0       0
 10244 ;;      Totals:         0       0       4       0       0       0       0       0
 10245 ;;Total ram usage:        4 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; Hardware stack levels required when called:   12
 10248 ;; This function calls:
 10249 ;;		Nothing
 10250 ;; This function is called by:
 10251 ;;		_Sensor_postAcquisitionProcess
 10252 ;;		_Sensor_autoCalibration
 10253 ;;		_Sensor_RawSample_Update
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           
 10258                           ;psect for function _Sensor_getScanGroupIndex
 10259  1F14                     _Sensor_getScanGroupIndex:	
 10260                           
 10261                           ;incstack = 0
 10262 ;; hardware stack exceeded
 10263                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 10264                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 10265  1F14  0021               	movlb	1	; select bank1
 10266  1F15  00A3               	movwf	Sensor_getScanGroupIndex@sensor^(0+128)
 10267                           
 10268                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
 10269  1F16  01A4               	clrf	Sensor_getScanGroupIndex@sensorGroup^(0+128)
 10270  1F17                     l7048:	
 10271                           
 10272                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 10273  1F17  0824               	movf	Sensor_getScanGroupIndex@sensorGroup^(0+128),w
 10274  1F18  00A1               	movwf	??_Sensor_getScanGroupIndex^(0+128)
 10275  1F19  01A2               	clrf	(??_Sensor_getScanGroupIndex^(0+128)+1)
 10276  1F1A  35A1               	lslf	??_Sensor_getScanGroupIndex^(0+128),f
 10277  1F1B  0DA2               	rlf	(??_Sensor_getScanGroupIndex^(0+128)+1),f
 10278  1F1C  3052               	movlw	low (_sensor_scan_group| (0+32768))
 10279  1F1D  0721               	addwf	??_Sensor_getScanGroupIndex^(0+128),w
 10280  1F1E  0084               	movwf	4
 10281  1F1F  3098               	movlw	high (_sensor_scan_group| (0+32768))
 10282  1F20  3D22               	addwfc	(??_Sensor_getScanGroupIndex+1)^(0+128),w
 10283  1F21  0085               	movwf	5
 10284  1F22  0800               	movf	0,w	;code access
 10285  1F23  0623               	xorwf	Sensor_getScanGroupIndex@sensor^(0+128),w
 10286  1F24  1D03               	skipz
 10287  1F25  2F28               	goto	l7054
 10288  1F26                     l7050:	
 10289                           
 10290                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
 10291  1F26  3000               	movlw	0
 10292  1F27  0008               	return
 10293  1F28                     l7054:	
 10294                           
 10295                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 10296  1F28  0824               	movf	Sensor_getScanGroupIndex@sensorGroup^(0+128),w
 10297  1F29  00A1               	movwf	??_Sensor_getScanGroupIndex^(0+128)
 10298  1F2A  01A2               	clrf	(??_Sensor_getScanGroupIndex^(0+128)+1)
 10299  1F2B  35A1               	lslf	??_Sensor_getScanGroupIndex^(0+128),f
 10300  1F2C  0DA2               	rlf	(??_Sensor_getScanGroupIndex^(0+128)+1),f
 10301  1F2D  3053               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 10302  1F2E  0721               	addwf	??_Sensor_getScanGroupIndex^(0+128),w
 10303  1F2F  0084               	movwf	4
 10304  1F30  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 10305  1F31  3D22               	addwfc	(??_Sensor_getScanGroupIndex+1)^(0+128),w
 10306  1F32  0085               	movwf	5
 10307  1F33  0800               	movf	0,w	;code access
 10308  1F34  0623               	xorwf	Sensor_getScanGroupIndex@sensor^(0+128),w
 10309  1F35  1D03               	skipz
 10310  1F36  2F39               	goto	l7060
 10311                           
 10312                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
 10313  1F37  3001               	movlw	1
 10314  1F38  0008               	return
 10315  1F39                     l7060:	
 10316                           
 10317                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
 10318  1F39  3001               	movlw	1
 10319  1F3A  00A1               	movwf	??_Sensor_getScanGroupIndex^(0+128)
 10320  1F3B  0821               	movf	??_Sensor_getScanGroupIndex^(0+128),w
 10321  1F3C  07A4               	addwf	Sensor_getScanGroupIndex@sensorGroup^(0+128),f
 10322  1F3D  3002               	movlw	2
 10323  1F3E  0224               	subwf	Sensor_getScanGroupIndex@sensorGroup^(0+128),w
 10324  1F3F  1803               	btfsc	3,0
 10325  1F40  2F26               	goto	l7050
 10326  1F41  2F17               	goto	l7048
 10327  1F42                     __end_of_Sensor_getScanGroupIndex:	
 10328                           
 10329                           	psect	text53
 10330  1B24                     __ptext53:	
 10331 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 10332 ;; Defined at:
 10333 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10334 ;; Parameters:    Size  Location     Type
 10335 ;;		None
 10336 ;; Auto vars:     Size  Location     Type
 10337 ;;		None
 10338 ;; Return value:  Size  Location     Type
 10339 ;;                  1    wreg      void 
 10340 ;; Registers used:
 10341 ;;		wreg, status,2, status,0
 10342 ;; Tracked objects:
 10343 ;;		On entry : 0/0
 10344 ;;		On exit  : 0/0
 10345 ;;		Unchanged: 0/0
 10346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10347 ;;      Params:         0       0       0       0       0       0       0       0
 10348 ;;      Locals:         0       0       0       0       0       0       0       0
 10349 ;;      Temps:          0       0       0       0       0       0       0       0
 10350 ;;      Totals:         0       0       0       0       0       0       0       0
 10351 ;;Total ram usage:        0 bytes
 10352 ;; Hardware stack levels used:    1
 10353 ;; Hardware stack levels required when called:   12
 10354 ;; This function calls:
 10355 ;;		Nothing
 10356 ;; This function is called by:
 10357 ;;		_MTOUCH_Initialize
 10358 ;;		_Sensor_Acq_ExecutePacket
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           
 10363                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 10364  1B24                     _MTOUCH_Sensor_Scan_Initialize:	
 10365                           
 10366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
 10367                           
 10368                           ;incstack = 0
 10369                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 10370  1B24  30FC               	movlw	-4
 10371  1B25  0020               	movlb	0	; select bank0
 10372  1B26  059C               	andwf	28,f	;volatile
 10373                           
 10374                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
 10375  1B27  002E               	movlb	14	; select bank14
 10376  1B28  0191               	clrf	17	;volatile
 10377                           
 10378                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
 10379  1B29  002F               	movlb	15	; select bank15
 10380  1B2A  0191               	clrf	17	;volatile
 10381                           
 10382                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 10383  1B2B  3090               	movlw	144
 10384  1B2C  002E               	movlb	14	; select bank14
 10385  1B2D  0092               	movwf	18	;volatile
 10386                           
 10387                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
 10388  1B2E  3040               	movlw	64
 10389  1B2F  0094               	movwf	20	;volatile
 10390                           
 10391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
 10392  1B30  3040               	movlw	64
 10393  1B31  002F               	movlb	15	; select bank15
 10394  1B32  0094               	movwf	20	;volatile
 10395  1B33  0008               	return
 10396  1B34                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 10397                           
 10398                           	psect	text54
 10399  1B14                     __ptext54:	
 10400 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 10401 ;; Defined at:
 10402 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10403 ;; Parameters:    Size  Location     Type
 10404 ;;		None
 10405 ;; Auto vars:     Size  Location     Type
 10406 ;;  button          1   25[BANK2 ] enum E3069
 10407 ;; Return value:  Size  Location     Type
 10408 ;;                  1    wreg      void 
 10409 ;; Registers used:
 10410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10411 ;; Tracked objects:
 10412 ;;		On entry : 0/0
 10413 ;;		On exit  : 0/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10416 ;;      Params:         0       0       0       0       0       0       0       0
 10417 ;;      Locals:         0       0       0       1       0       0       0       0
 10418 ;;      Temps:          0       0       0       1       0       0       0       0
 10419 ;;      Totals:         0       0       0       2       0       0       0       0
 10420 ;;Total ram usage:        2 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:   24
 10423 ;; This function calls:
 10424 ;;		_Button_Service
 10425 ;; This function is called by:
 10426 ;;		_MTOUCH_Service_Mainloop
 10427 ;; This function uses a non-reentrant model
 10428 ;;
 10429                           
 10430                           
 10431                           ;psect for function _MTOUCH_Button_ServiceAll
 10432  1B14                     _MTOUCH_Button_ServiceAll:	
 10433                           
 10434                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
 10435                           
 10436                           ;incstack = 0
 10437 ;; hardware stack exceeded
 10438                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10439  1B14  0022               	movlb	2	; select bank2
 10440  1B15  01D9               	clrf	MTOUCH_Button_ServiceAll@button^(0+256)
 10441  1B16                     l8124:	
 10442                           
 10443                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
 10444  1B16  0859               	movf	MTOUCH_Button_ServiceAll@button^(0+256),w
 10445  1B17  3193  2350  319B   	fcall	_Button_Service
 10446                           
 10447                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
 10448  1B1A  3001               	movlw	1
 10449  1B1B  0022               	movlb	2	; select bank2
 10450  1B1C  00D8               	movwf	??_MTOUCH_Button_ServiceAll^(0+256)
 10451  1B1D  0858               	movf	??_MTOUCH_Button_ServiceAll^(0+256),w
 10452  1B1E  07D9               	addwf	MTOUCH_Button_ServiceAll@button^(0+256),f
 10453  1B1F  3003               	movlw	3
 10454  1B20  0259               	subwf	MTOUCH_Button_ServiceAll@button^(0+256),w
 10455  1B21  1803               	btfsc	3,0
 10456  1B22  0008               	return
 10457  1B23  2B16               	goto	l8124
 10458  1B24                     __end_of_MTOUCH_Button_ServiceAll:	
 10459                           
 10460                           	psect	text55
 10461  1350                     __ptext55:	
 10462 ;; *************** function _Button_Service *****************
 10463 ;; Defined at:
 10464 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10465 ;; Parameters:    Size  Location     Type
 10466 ;;  name            1    wreg     enum E3069
 10467 ;; Auto vars:     Size  Location     Type
 10468 ;;  name            1   22[BANK2 ] enum E3069
 10469 ;;  button          1   23[BANK2 ] PTR struct .
 10470 ;;		 -> mtouch_button(48), 
 10471 ;; Return value:  Size  Location     Type
 10472 ;;                  1    wreg      void 
 10473 ;; Registers used:
 10474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10475 ;; Tracked objects:
 10476 ;;		On entry : 0/0
 10477 ;;		On exit  : 0/0
 10478 ;;		Unchanged: 0/0
 10479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10480 ;;      Params:         0       0       0       0       0       0       0       0
 10481 ;;      Locals:         0       0       0       2       0       0       0       0
 10482 ;;      Temps:          0       0       0       2       0       0       0       0
 10483 ;;      Totals:         0       0       0       4       0       0       0       0
 10484 ;;Total ram usage:        4 bytes
 10485 ;; Hardware stack levels used:    1
 10486 ;; Hardware stack levels required when called:   23
 10487 ;; This function calls:
 10488 ;;		_Button_Deviation_Update
 10489 ;;		_Button_Reading_Update
 10490 ;;		_Button_State_Initializing
 10491 ;;		_Button_State_NotPressed
 10492 ;;		_Button_State_Pressed
 10493 ;;		_MTOUCH_Button_Initialize
 10494 ;;		_MTOUCH_Sensor_isCalibrated
 10495 ;;		_MTOUCH_Sensor_wasSampled
 10496 ;; This function is called by:
 10497 ;;		_MTOUCH_Button_ServiceAll
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           
 10502                           ;psect for function _Button_Service
 10503  1350                     _Button_Service:	
 10504                           
 10505                           ;incstack = 0
 10506 ;; hardware stack exceeded
 10507                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10508                           ;Button_Service@name stored from wreg
 10509  1350  0022               	movlb	2	; select bank2
 10510  1351  00D6               	movwf	Button_Service@name^(0+256)
 10511                           
 10512                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
 10513  1352  0856               	movf	Button_Service@name^(0+256),w
 10514  1353  00D4               	movwf	??_Button_Service^(0+256)
 10515  1354  3003               	movlw	3
 10516  1355                     u9465:	
 10517  1355  35D4               	lslf	??_Button_Service^(0+256),f
 10518  1356  3EFF               	addlw	-1
 10519  1357  1D03               	skipz
 10520  1358  2B55               	goto	u9465
 10521  1359  3554               	lslf	??_Button_Service^(0+256),w
 10522  135A  3E20               	addlw	(low (_mtouch_button| (0+512)))& (0+255)
 10523  135B  00D5               	movwf	(??_Button_Service+1)^(0+256)
 10524  135C  0855               	movf	(??_Button_Service+1)^(0+256),w
 10525  135D  00D7               	movwf	Button_Service@button^(0+256)
 10526                           
 10527                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 10528  135E  0A57               	incf	Button_Service@button^(0+256),w
 10529  135F  0086               	movwf	6
 10530  1360  3002               	movlw	2	; select bank4/5
 10531  1361  0087               	movwf	7
 10532  1362  0801               	movf	1,w
 10533  1363  319B  2304  3193   	fcall	_MTOUCH_Sensor_wasSampled
 10534  1366  3A00               	xorlw	0
 10535  1367  1903               	skipnz
 10536  1368  0008               	return
 10537  1369  0022               	movlb	2	; select bank2
 10538  136A  0A57               	incf	Button_Service@button^(0+256),w
 10539  136B  0086               	movwf	6
 10540  136C  3002               	movlw	2	; select bank4/5
 10541  136D  0087               	movwf	7
 10542  136E  0801               	movf	1,w
 10543  136F  319C  241D  3193   	fcall	_MTOUCH_Sensor_isCalibrated
 10544  1372  3A00               	xorlw	0
 10545  1373  1903               	skipnz
 10546  1374  0008               	return
 10547                           
 10548                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
 10549  1375  0022               	movlb	2	; select bank2
 10550  1376  0857               	movf	Button_Service@button^(0+256),w
 10551  1377  319A  22C9  3193   	fcall	_Button_Reading_Update
 10552                           
 10553                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
 10554  137A  0022               	movlb	2	; select bank2
 10555  137B  0857               	movf	Button_Service@button^(0+256),w
 10556  137C  3195  25B9  3193   	fcall	_Button_Deviation_Update
 10557                           
 10558                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 10559  137F  0022               	movlb	2	; select bank2
 10560  1380  0857               	movf	Button_Service@button^(0+256),w
 10561  1381  3E02               	addlw	2
 10562  1382  0086               	movwf	6
 10563  1383  3002               	movlw	2	; select bank4/5
 10564  1384  0087               	movwf	7
 10565  1385  3003               	movlw	3
 10566  1386  0201               	subwf	1,w
 10567  1387  1C03               	skipc
 10568  1388  2B91               	goto	l8070
 10569                           
 10570                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
 10571  1389  0857               	movf	Button_Service@button^(0+256),w
 10572  138A  0086               	movwf	6
 10573  138B  3002               	movlw	2	; select bank4/5
 10574  138C  0087               	movwf	7
 10575  138D  0801               	movf	1,w
 10576  138E  3191  2164  3193   	fcall	_MTOUCH_Button_Initialize
 10577  1391                     l8070:	
 10578                           
 10579                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 10580  1391  0022               	movlb	2	; select bank2
 10581  1392  0857               	movf	Button_Service@button^(0+256),w
 10582  1393  00D4               	movwf	??_Button_Service^(0+256)
 10583  1394  0854               	movf	??_Button_Service^(0+256),w
 10584  1395  00CF               	movwf	Button_State_Pressed@button^(0+256)
 10585  1396  0857               	movf	Button_Service@button^(0+256),w
 10586  1397  3E02               	addlw	2
 10587  1398  0086               	movwf	6
 10588  1399  3002               	movlw	2	; select bank4/5
 10589  139A  0087               	movwf	7
 10590  139B  3501               	lslf	1,w
 10591  139C  3EA0               	addlw	(low (_Button_StateMachine| (0+256)))& (0+255)
 10592  139D  0086               	movwf	6
 10593  139E  3001               	movlw	1	; select bank3/4
 10594  139F  0087               	movwf	7
 10595  13A0  3F41               	moviw [1]fsr1
 10596  13A1  008A               	movwf	10
 10597  13A2  3F40               	moviw [0]fsr1
 10598  13A3  000A               	callw
 10599  13A4  3193               	pagesel	$
 10600  13A5  0008               	return
 10601  13A6                     __end_of_Button_Service:	
 10602                           
 10603                           	psect	text56
 10604  1B04                     __ptext56:	
 10605 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 10606 ;; Defined at:
 10607 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10608 ;; Parameters:    Size  Location     Type
 10609 ;;  sensor          1    wreg     enum E2886
 10610 ;; Auto vars:     Size  Location     Type
 10611 ;;  sensor          1    6[BANK1 ] enum E2886
 10612 ;; Return value:  Size  Location     Type
 10613 ;;                  1    wreg      _Bool 
 10614 ;; Registers used:
 10615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10616 ;; Tracked objects:
 10617 ;;		On entry : 0/0
 10618 ;;		On exit  : 0/0
 10619 ;;		Unchanged: 0/0
 10620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10621 ;;      Params:         0       0       0       0       0       0       0       0
 10622 ;;      Locals:         0       0       1       0       0       0       0       0
 10623 ;;      Temps:          0       0       1       0       0       0       0       0
 10624 ;;      Totals:         0       0       2       0       0       0       0       0
 10625 ;;Total ram usage:        2 bytes
 10626 ;; Hardware stack levels used:    1
 10627 ;; Hardware stack levels required when called:   13
 10628 ;; This function calls:
 10629 ;;		___bmul
 10630 ;; This function is called by:
 10631 ;;		_Button_Service
 10632 ;; This function uses a non-reentrant model
 10633 ;;
 10634                           
 10635                           
 10636                           ;psect for function _MTOUCH_Sensor_wasSampled
 10637  1B04                     _MTOUCH_Sensor_wasSampled:	
 10638                           
 10639                           ;incstack = 0
 10640 ;; hardware stack exceeded
 10641                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10642                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 10643  1B04  0021               	movlb	1	; select bank1
 10644  1B05  00A6               	movwf	MTOUCH_Sensor_wasSampled@sensor^(0+128)
 10645                           
 10646                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
 10647  1B06  3009               	movlw	9
 10648  1B07  00A5               	movwf	??_MTOUCH_Sensor_wasSampled^(0+128)
 10649  1B08  0825               	movf	??_MTOUCH_Sensor_wasSampled^(0+128),w
 10650  1B09  00A1               	movwf	___bmul@multiplicand^(0+128)
 10651  1B0A  0826               	movf	MTOUCH_Sensor_wasSampled@sensor^(0+128),w
 10652  1B0B  319B  2365         	fcall	___bmul
 10653  1B0D  3EAE               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 10654  1B0E  0086               	movwf	6
 10655  1B0F  3001               	movlw	1	; select bank3/4
 10656  1B10  0087               	movwf	7
 10657  1B11  0801               	movf	1,w
 10658  1B12  3901               	andlw	1
 10659  1B13  0008               	return
 10660  1B14                     __end_of_MTOUCH_Sensor_wasSampled:	
 10661                           
 10662                           	psect	text57
 10663  1C1D                     __ptext57:	
 10664 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 10665 ;; Defined at:
 10666 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10667 ;; Parameters:    Size  Location     Type
 10668 ;;  sensor          1    wreg     enum E2886
 10669 ;; Auto vars:     Size  Location     Type
 10670 ;;  sensor          1    6[BANK1 ] enum E2886
 10671 ;; Return value:  Size  Location     Type
 10672 ;;                  1    wreg      _Bool 
 10673 ;; Registers used:
 10674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10675 ;; Tracked objects:
 10676 ;;		On entry : 0/0
 10677 ;;		On exit  : 0/0
 10678 ;;		Unchanged: 0/0
 10679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10680 ;;      Params:         0       0       0       0       0       0       0       0
 10681 ;;      Locals:         0       0       1       0       0       0       0       0
 10682 ;;      Temps:          0       0       1       0       0       0       0       0
 10683 ;;      Totals:         0       0       2       0       0       0       0       0
 10684 ;;Total ram usage:        2 bytes
 10685 ;; Hardware stack levels used:    1
 10686 ;; Hardware stack levels required when called:   13
 10687 ;; This function calls:
 10688 ;;		___bmul
 10689 ;; This function is called by:
 10690 ;;		_Button_Service
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694                           
 10695                           ;psect for function _MTOUCH_Sensor_isCalibrated
 10696  1C1D                     _MTOUCH_Sensor_isCalibrated:	
 10697                           
 10698                           ;incstack = 0
 10699 ;; hardware stack exceeded
 10700                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10701                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 10702  1C1D  0021               	movlb	1	; select bank1
 10703  1C1E  00A6               	movwf	MTOUCH_Sensor_isCalibrated@sensor^(0+128)
 10704                           
 10705                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
 10706  1C1F  3003               	movlw	3
 10707  1C20  0226               	subwf	MTOUCH_Sensor_isCalibrated@sensor^(0+128),w
 10708  1C21  1803               	skipnc
 10709  1C22  2C32               	goto	l7866
 10710                           
 10711                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
 10712  1C23  3009               	movlw	9
 10713  1C24  00A5               	movwf	??_MTOUCH_Sensor_isCalibrated^(0+128)
 10714  1C25  0825               	movf	??_MTOUCH_Sensor_isCalibrated^(0+128),w
 10715  1C26  00A1               	movwf	___bmul@multiplicand^(0+128)
 10716  1C27  0826               	movf	MTOUCH_Sensor_isCalibrated@sensor^(0+128),w
 10717  1C28  319B  2365         	fcall	___bmul
 10718  1C2A  3EAE               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 10719  1C2B  0086               	movwf	6
 10720  1C2C  3001               	movlw	1	; select bank3/4
 10721  1C2D  0087               	movwf	7
 10722  1C2E  0C01               	rrf	1,w
 10723  1C2F  0C89               	rrf	9,f
 10724  1C30  3901               	andlw	1
 10725  1C31  0008               	return
 10726  1C32                     l7866:	
 10727                           
 10728                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
 10729  1C32  3000               	movlw	0
 10730  1C33  0008               	return
 10731  1C34                     __end_of_MTOUCH_Sensor_isCalibrated:	
 10732                           
 10733                           	psect	text58
 10734  0802                     __ptext58:	
 10735 ;; *************** function _Button_State_NotPressed *****************
 10736 ;; Defined at:
 10737 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;  button          1   15[BANK2 ] PTR struct .
 10740 ;;		 -> mtouch_button(48), 
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;		None
 10743 ;; Return value:  Size  Location     Type
 10744 ;;                  1    wreg      void 
 10745 ;; Registers used:
 10746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10747 ;; Tracked objects:
 10748 ;;		On entry : 0/0
 10749 ;;		On exit  : 0/0
 10750 ;;		Unchanged: 0/0
 10751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10752 ;;      Params:         0       0       0       1       0       0       0       0
 10753 ;;      Locals:         0       0       0       0       0       0       0       0
 10754 ;;      Temps:          0       0       0       2       0       0       0       0
 10755 ;;      Totals:         0       0       0       3       0       0       0       0
 10756 ;;Total ram usage:        3 bytes
 10757 ;; Hardware stack levels used:    1
 10758 ;; Hardware stack levels required when called:   15
 10759 ;; This function calls:
 10760 ;;		_Button_Baseline_Update
 10761 ;;		_Button_DefaultCallback
 10762 ;;		_MTOUCH_Button_Initialize
 10763 ;;		_myButtonPressedCallback
 10764 ;; This function is called by:
 10765 ;;		_Button_Service
 10766 ;; This function uses a non-reentrant model
 10767 ;;
 10768                           
 10769                           
 10770                           ;psect for function _Button_State_NotPressed
 10771  0802                     _Button_State_NotPressed:	
 10772                           
 10773                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 10774                           
 10775                           ;incstack = 0
 10776 ;; hardware stack exceeded
 10777                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10778  0802  0022               	movlb	2	; select bank2
 10779  0803  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10780  0804  3E09               	addlw	9
 10781  0805  0086               	movwf	6
 10782  0806  3002               	movlw	2	; select bank4/5
 10783  0807  0087               	movwf	7
 10784  0808  0801               	movf	1,w
 10785  0809  3A80               	xorlw	128
 10786  080A  00D0               	movwf	??_Button_State_NotPressed^(0+256)
 10787  080B  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10788  080C  3E0E               	addlw	14
 10789  080D  0086               	movwf	6
 10790  080E  3002               	movlw	2	; select bank4/5
 10791  080F  0087               	movwf	7
 10792  0810  0301               	decf	1,w
 10793  0811  3AFF               	xorlw	255
 10794  0812  3A80               	xorlw	128
 10795  0813  02D0               	subwf	??_Button_State_NotPressed^(0+256),f
 10796  0814  1803               	skipnc
 10797  0815  2841               	goto	l7928
 10798                           
 10799                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
 10800  0816  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10801  0817  3E0A               	addlw	10
 10802  0818  0086               	movwf	6
 10803  0819  3002               	movlw	2	; select bank4/5
 10804  081A  0087               	movwf	7
 10805  081B  3001               	movlw	1
 10806  081C  0781               	addwf	1,f
 10807  081D  3141               	addfsr 1,1
 10808  081E  1803               	skipnc
 10809  081F  0A81               	incf	1,f
 10810                           
 10811                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 10812  0820  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10813  0821  3E0A               	addlw	10
 10814  0822  0086               	movwf	6
 10815  0823  3002               	movlw	2	; select bank4/5
 10816  0824  0087               	movwf	7
 10817  0825  3F40               	moviw [0]fsr1
 10818  0826  00D0               	movwf	??_Button_State_NotPressed^(0+256)
 10819  0827  3F41               	moviw [1]fsr1
 10820  0828  00D1               	movwf	(??_Button_State_NotPressed^(0+256)+1)
 10821  0829  3000               	movlw	0
 10822  082A  0251               	subwf	(??_Button_State_NotPressed+1)^(0+256),w
 10823  082B  3041               	movlw	65
 10824  082C  1903               	skipnz
 10825  082D  0250               	subwf	??_Button_State_NotPressed^(0+256),w
 10826  082E  1C03               	skipc
 10827  082F  2882               	goto	l508
 10828                           
 10829                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
 10830  0830  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10831  0831  3E0A               	addlw	10
 10832  0832  0086               	movwf	6
 10833  0833  3002               	movlw	2	; select bank4/5
 10834  0834  0087               	movwf	7
 10835  0835  3000               	movlw	0
 10836  0836  3FC0               	movwi [0]fsr1
 10837  0837  3FC1               	movwi [1]fsr1
 10838                           
 10839                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 10840  0838  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10841  0839  0086               	movwf	6
 10842  083A  3002               	movlw	2	; select bank4/5
 10843  083B  0087               	movwf	7
 10844  083C  0801               	movf	1,w
 10845  083D  3191  2164  3188   	fcall	_MTOUCH_Button_Initialize
 10846  0840  2882               	goto	l508
 10847  0841                     l7928:	
 10848  0841  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10849  0842  3E09               	addlw	9
 10850  0843  0086               	movwf	6
 10851  0844  3002               	movlw	2	; select bank4/5
 10852  0845  0087               	movwf	7
 10853  0846  0801               	movf	1,w
 10854  0847  00D0               	movwf	??_Button_State_NotPressed^(0+256)
 10855  0848  01D1               	clrf	(??_Button_State_NotPressed^(0+256)+1)
 10856  0849  1BD0               	btfsc	??_Button_State_NotPressed^(0+256),7
 10857  084A  03D1               	decf	(??_Button_State_NotPressed^(0+256)+1),f
 10858  084B  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10859  084C  3E0E               	addlw	14
 10860  084D  0086               	movwf	6
 10861  084E  3002               	movlw	2	; select bank4/5
 10862  084F  0087               	movwf	7
 10863  0850  0851               	movf	(??_Button_State_NotPressed+1)^(0+256),w
 10864  0851  3A80               	xorlw	128
 10865  0852  3C80               	sublw	128
 10866  0853  1D03               	skipz
 10867  0854  2857               	goto	u9295
 10868  0855  0850               	movf	??_Button_State_NotPressed^(0+256),w
 10869  0856  0201               	subwf	1,w
 10870  0857                     u9295:	
 10871  0857  1803               	skipnc
 10872  0858  2879               	goto	l7934
 10873                           
 10874                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
 10875  0859  3002               	movlw	2
 10876  085A  0022               	movlb	2	; select bank2
 10877  085B  00D0               	movwf	??_Button_State_NotPressed^(0+256)
 10878  085C  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10879  085D  3E02               	addlw	2
 10880  085E  0086               	movwf	6
 10881  085F  3002               	movlw	2	; select bank4/5
 10882  0860  0087               	movwf	7
 10883  0861  0850               	movf	??_Button_State_NotPressed^(0+256),w
 10884  0862  0081               	movwf	1
 10885                           
 10886                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10887  0863  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10888  0864  3E0A               	addlw	10
 10889  0865  0086               	movwf	6
 10890  0866  3002               	movlw	2	; select bank4/5
 10891  0867  0087               	movwf	7
 10892  0868  3000               	movlw	0
 10893  0869  3FC0               	movwi [0]fsr1
 10894  086A  3FC1               	movwi [1]fsr1
 10895                           
 10896                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
 10897  086B  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10898  086C  0086               	movwf	6
 10899  086D  3002               	movlw	2	; select bank4/5
 10900  086E  0087               	movwf	7
 10901  086F  0801               	movf	1,w
 10902  0870  00D0               	movwf	??_Button_State_NotPressed^(0+256)
 10903  0871  0850               	movf	??_Button_State_NotPressed^(0+256),w
 10904  0872  00CC               	movwf	myButtonPressedCallback@button^(0+256)
 10905  0873  0869               	movf	(_callback_pressed+1)^(0+256),w
 10906  0874  008A               	movwf	10
 10907  0875  0868               	movf	_callback_pressed^(0+256),w
 10908  0876  000A               	callw
 10909  0877  3188               	pagesel	$
 10910                           
 10911                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
 10912  0878  2882               	goto	l508
 10913  0879                     l7934:	
 10914                           
 10915                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
 10916  0879  0022               	movlb	2	; select bank2
 10917  087A  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10918  087B  3E0A               	addlw	10
 10919  087C  0086               	movwf	6
 10920  087D  3002               	movlw	2	; select bank4/5
 10921  087E  0087               	movwf	7
 10922  087F  3000               	movlw	0
 10923  0880  3FC0               	movwi [0]fsr1
 10924  0881  3FC1               	movwi [1]fsr1
 10925  0882                     l508:	
 10926                           
 10927                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
 10928  0882  0022               	movlb	2	; select bank2
 10929  0883  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10930  0884  3E0C               	addlw	12
 10931  0885  0086               	movwf	6
 10932  0886  3002               	movlw	2	; select bank4/5
 10933  0887  0087               	movwf	7
 10934  0888  3001               	movlw	1
 10935  0889  0781               	addwf	1,f
 10936  088A  3141               	addfsr 1,1
 10937  088B  1803               	skipnc
 10938  088C  0A81               	incf	1,f
 10939                           
 10940                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 10941  088D  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10942  088E  3E0C               	addlw	12
 10943  088F  0086               	movwf	6
 10944  0890  3002               	movlw	2	; select bank4/5
 10945  0891  0087               	movwf	7
 10946  0892  0016               	moviw fsr1++
 10947  0893  3A40               	xorlw	64
 10948  0894  00D0               	movwf	??_Button_State_NotPressed^(0+256)
 10949  0895  0016               	moviw fsr1++
 10950  0896  04D0               	iorwf	??_Button_State_NotPressed^(0+256),f
 10951  0897  1D03               	btfss	3,2
 10952  0898  0008               	return
 10953                           
 10954                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 10955  0899  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10956  089A  3E0C               	addlw	12
 10957  089B  0086               	movwf	6
 10958  089C  3002               	movlw	2	; select bank4/5
 10959  089D  0087               	movwf	7
 10960  089E  3000               	movlw	0
 10961  089F  3FC0               	movwi [0]fsr1
 10962  08A0  3FC1               	movwi [1]fsr1
 10963                           
 10964                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
 10965  08A1  084F               	movf	Button_State_NotPressed@button^(0+256),w
 10966  08A2  3196  2640         	fcall	_Button_Baseline_Update
 10967  08A4  0008               	return
 10968  08A5                     __end_of_Button_State_NotPressed:	
 10969                           
 10970                           	psect	text59
 10971  1402                     __ptext59:	
 10972 ;; *************** function _Button_State_Initializing *****************
 10973 ;; Defined at:
 10974 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10975 ;; Parameters:    Size  Location     Type
 10976 ;;  button          1   15[BANK2 ] PTR struct .
 10977 ;;		 -> mtouch_button(48), 
 10978 ;; Auto vars:     Size  Location     Type
 10979 ;;		None
 10980 ;; Return value:  Size  Location     Type
 10981 ;;                  1    wreg      void 
 10982 ;; Registers used:
 10983 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10984 ;; Tracked objects:
 10985 ;;		On entry : 0/0
 10986 ;;		On exit  : 0/0
 10987 ;;		Unchanged: 0/0
 10988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10989 ;;      Params:         0       0       0       1       0       0       0       0
 10990 ;;      Locals:         0       0       0       0       0       0       0       0
 10991 ;;      Temps:          0       0       0       4       0       0       0       0
 10992 ;;      Totals:         0       0       0       5       0       0       0       0
 10993 ;;Total ram usage:        5 bytes
 10994 ;; Hardware stack levels used:    1
 10995 ;; Hardware stack levels required when called:   15
 10996 ;; This function calls:
 10997 ;;		_Button_Baseline_Initialize
 10998 ;;		_Button_Baseline_Update
 10999 ;; This function is called by:
 11000 ;;		_Button_Service
 11001 ;; This function uses a non-reentrant model
 11002 ;;
 11003                           
 11004                           
 11005                           ;psect for function _Button_State_Initializing
 11006  1402                     _Button_State_Initializing:	
 11007                           
 11008                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 11009                           
 11010                           ;incstack = 0
 11011 ;; hardware stack exceeded
 11012                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11013  1402  0022               	movlb	2	; select bank2
 11014  1403  084F               	movf	Button_State_Initializing@button^(0+256),w
 11015  1404  3E0A               	addlw	10
 11016  1405  0086               	movwf	6
 11017  1406  3002               	movlw	2	; select bank4/5
 11018  1407  0087               	movwf	7
 11019  1408  3F40               	moviw [0]fsr1
 11020  1409  00D0               	movwf	??_Button_State_Initializing^(0+256)
 11021  140A  3F41               	moviw [1]fsr1
 11022  140B  00D1               	movwf	(??_Button_State_Initializing^(0+256)+1)
 11023  140C  3000               	movlw	0
 11024  140D  0251               	subwf	(??_Button_State_Initializing+1)^(0+256),w
 11025  140E  3009               	movlw	9
 11026  140F  1903               	skipnz
 11027  1410  0250               	subwf	??_Button_State_Initializing^(0+256),w
 11028  1411  1803               	skipnc
 11029  1412  2C18               	goto	l7912
 11030                           
 11031                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
 11032  1413  084F               	movf	Button_State_Initializing@button^(0+256),w
 11033  1414  319F  2771  3194   	fcall	_Button_Baseline_Initialize
 11034                           
 11035                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
 11036  1417  2C1C               	goto	l7914
 11037  1418                     l7912:	
 11038                           
 11039                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
 11040  1418  084F               	movf	Button_State_Initializing@button^(0+256),w
 11041  1419  3196  2640  3194   	fcall	_Button_Baseline_Update
 11042  141C                     l7914:	
 11043                           
 11044                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
 11045  141C  0022               	movlb	2	; select bank2
 11046  141D  084F               	movf	Button_State_Initializing@button^(0+256),w
 11047  141E  3E0A               	addlw	10
 11048  141F  0086               	movwf	6
 11049  1420  3002               	movlw	2	; select bank4/5
 11050  1421  0087               	movwf	7
 11051  1422  3001               	movlw	1
 11052  1423  0781               	addwf	1,f
 11053  1424  3141               	addfsr 1,1
 11054  1425  1803               	skipnc
 11055  1426  0A81               	incf	1,f
 11056                           
 11057                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 11058  1427  084F               	movf	Button_State_Initializing@button^(0+256),w
 11059  1428  3E0A               	addlw	10
 11060  1429  0086               	movwf	6
 11061  142A  3002               	movlw	2	; select bank4/5
 11062  142B  0087               	movwf	7
 11063  142C  3F40               	moviw [0]fsr1
 11064  142D  00D0               	movwf	??_Button_State_Initializing^(0+256)
 11065  142E  3F41               	moviw [1]fsr1
 11066  142F  00D1               	movwf	(??_Button_State_Initializing^(0+256)+1)
 11067  1430  3000               	movlw	0
 11068  1431  0251               	subwf	(??_Button_State_Initializing+1)^(0+256),w
 11069  1432  3010               	movlw	16
 11070  1433  1903               	skipnz
 11071  1434  0250               	subwf	??_Button_State_Initializing^(0+256),w
 11072  1435  1C03               	skipc
 11073  1436  0008               	return
 11074                           
 11075                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 11076  1437  084F               	movf	Button_State_Initializing@button^(0+256),w
 11077  1438  3E05               	addlw	5
 11078  1439  0086               	movwf	6
 11079  143A  3002               	movlw	2	; select bank4/5
 11080  143B  0087               	movwf	7
 11081  143C  3F40               	moviw [0]fsr1
 11082  143D  00D0               	movwf	??_Button_State_Initializing^(0+256)
 11083  143E  3F41               	moviw [1]fsr1
 11084  143F  00D1               	movwf	(??_Button_State_Initializing^(0+256)+1)
 11085  1440  3F42               	moviw [2]fsr1
 11086  1441  00D2               	movwf	(??_Button_State_Initializing^(0+256)+2)
 11087  1442  3F43               	moviw [3]fsr1
 11088  1443  00D3               	movwf	(??_Button_State_Initializing^(0+256)+3)
 11089  1444  3004               	movlw	4
 11090  1445                     u9265:	
 11091  1445  36D3               	lsrf	(??_Button_State_Initializing^(0+256)+3),f
 11092  1446  0CD2               	rrf	(??_Button_State_Initializing^(0+256)+2),f
 11093  1447  0CD1               	rrf	(??_Button_State_Initializing^(0+256)+1),f
 11094  1448  0CD0               	rrf	??_Button_State_Initializing^(0+256),f
 11095  1449  0B89               	decfsz	9,f
 11096  144A  2C45               	goto	u9265
 11097  144B  084F               	movf	Button_State_Initializing@button^(0+256),w
 11098  144C  3E03               	addlw	3
 11099  144D  0086               	movwf	6
 11100  144E  3002               	movlw	2	; select bank4/5
 11101  144F  0087               	movwf	7
 11102  1450  0850               	movf	??_Button_State_Initializing^(0+256),w
 11103  1451  3FC0               	movwi [0]fsr1
 11104  1452  0851               	movf	(??_Button_State_Initializing+1)^(0+256),w
 11105  1453  3FC1               	movwi [1]fsr1
 11106                           
 11107                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 11108  1454  084F               	movf	Button_State_Initializing@button^(0+256),w
 11109  1455  3E02               	addlw	2
 11110  1456  0086               	movwf	6
 11111  1457  3002               	movlw	2	; select bank4/5
 11112  1458  0087               	movwf	7
 11113  1459  0181               	clrf	1
 11114  145A  0A81               	incf	1,f
 11115                           
 11116                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11117  145B  084F               	movf	Button_State_Initializing@button^(0+256),w
 11118  145C  3E0A               	addlw	10
 11119  145D  0086               	movwf	6
 11120  145E  3002               	movlw	2	; select bank4/5
 11121  145F  0087               	movwf	7
 11122  1460  3000               	movlw	0
 11123  1461  3FC0               	movwi [0]fsr1
 11124  1462  3FC1               	movwi [1]fsr1
 11125  1463  0008               	return
 11126  1464                     __end_of_Button_State_Initializing:	
 11127                           
 11128                           	psect	text60
 11129  1464                     __ptext60:	
 11130 ;; *************** function _Button_State_Pressed *****************
 11131 ;; Defined at:
 11132 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11133 ;; Parameters:    Size  Location     Type
 11134 ;;  button          1   15[BANK2 ] PTR struct .
 11135 ;;		 -> mtouch_button(48), 
 11136 ;; Auto vars:     Size  Location     Type
 11137 ;;		None
 11138 ;; Return value:  Size  Location     Type
 11139 ;;                  1    wreg      void 
 11140 ;; Registers used:
 11141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11142 ;; Tracked objects:
 11143 ;;		On entry : 0/0
 11144 ;;		On exit  : 0/0
 11145 ;;		Unchanged: 0/0
 11146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11147 ;;      Params:         0       0       0       1       0       0       0       0
 11148 ;;      Locals:         0       0       0       0       0       0       0       0
 11149 ;;      Temps:          0       0       0       2       0       0       0       0
 11150 ;;      Totals:         0       0       0       3       0       0       0       0
 11151 ;;Total ram usage:        3 bytes
 11152 ;; Hardware stack levels used:    1
 11153 ;; Hardware stack levels required when called:   22
 11154 ;; This function calls:
 11155 ;;		_Button_DefaultCallback
 11156 ;;		_MTOUCH_Button_Initialize
 11157 ;;		_myButtonReleasedCallback
 11158 ;; This function is called by:
 11159 ;;		_Button_Service
 11160 ;; This function uses a non-reentrant model
 11161 ;;
 11162                           
 11163                           
 11164                           ;psect for function _Button_State_Pressed
 11165  1464                     _Button_State_Pressed:	
 11166                           
 11167                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 11168                           
 11169                           ;incstack = 0
 11170 ;; hardware stack exceeded
 11171                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11172  1464  0022               	movlb	2	; select bank2
 11173  1465  084F               	movf	Button_State_Pressed@button^(0+256),w
 11174  1466  3E0A               	addlw	10
 11175  1467  0086               	movwf	6
 11176  1468  3002               	movlw	2	; select bank4/5
 11177  1469  0087               	movwf	7
 11178  146A  3F40               	moviw [0]fsr1
 11179  146B  00D0               	movwf	??_Button_State_Pressed^(0+256)
 11180  146C  3F41               	moviw [1]fsr1
 11181  146D  00D1               	movwf	(??_Button_State_Pressed^(0+256)+1)
 11182  146E  3007               	movlw	7
 11183  146F  0251               	subwf	(??_Button_State_Pressed+1)^(0+256),w
 11184  1470  30D0               	movlw	208
 11185  1471  1903               	skipnz
 11186  1472  0250               	subwf	??_Button_State_Pressed^(0+256),w
 11187  1473  1C03               	skipc
 11188  1474  2C8C               	goto	l7946
 11189                           
 11190                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
 11191  1475  084F               	movf	Button_State_Pressed@button^(0+256),w
 11192  1476  0086               	movwf	6
 11193  1477  3002               	movlw	2	; select bank4/5
 11194  1478  0087               	movwf	7
 11195  1479  0801               	movf	1,w
 11196  147A  3191  2164  3194   	fcall	_MTOUCH_Button_Initialize
 11197                           
 11198                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
 11199  147D  0022               	movlb	2	; select bank2
 11200  147E  084F               	movf	Button_State_Pressed@button^(0+256),w
 11201  147F  0086               	movwf	6
 11202  1480  3002               	movlw	2	; select bank4/5
 11203  1481  0087               	movwf	7
 11204  1482  0801               	movf	1,w
 11205  1483  00D0               	movwf	??_Button_State_Pressed^(0+256)
 11206  1484  0850               	movf	??_Button_State_Pressed^(0+256),w
 11207  1485  00CC               	movwf	myButtonReleasedCallback@button^(0+256)
 11208  1486  0867               	movf	(_callback_notPressed+1)^(0+256),w
 11209  1487  008A               	movwf	10
 11210  1488  0866               	movf	_callback_notPressed^(0+256),w
 11211  1489  000A               	callw
 11212  148A  3194               	pagesel	$
 11213                           
 11214                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
 11215  148B  0008               	return
 11216  148C                     l7946:	
 11217  148C  084F               	movf	Button_State_Pressed@button^(0+256),w
 11218  148D  3E09               	addlw	9
 11219  148E  0086               	movwf	6
 11220  148F  3002               	movlw	2	; select bank4/5
 11221  1490  0087               	movwf	7
 11222  1491  0801               	movf	1,w
 11223  1492  3A80               	xorlw	128
 11224  1493  00D0               	movwf	??_Button_State_Pressed^(0+256)
 11225  1494  084F               	movf	Button_State_Pressed@button^(0+256),w
 11226  1495  3E0E               	addlw	14
 11227  1496  0086               	movwf	6
 11228  1497  3002               	movlw	2	; select bank4/5
 11229  1498  0087               	movwf	7
 11230  1499  084F               	movf	Button_State_Pressed@button^(0+256),w
 11231  149A  3E0E               	addlw	14
 11232  149B  0084               	movwf	4
 11233  149C  3002               	movlw	2	; select bank4/5
 11234  149D  0085               	movwf	5
 11235  149E  3600               	lsrf	0,w
 11236  149F  0201               	subwf	1,w
 11237  14A0  3A80               	xorlw	128
 11238  14A1  02D0               	subwf	??_Button_State_Pressed^(0+256),f
 11239  14A2  1803               	skipnc
 11240  14A3  0008               	return
 11241                           
 11242                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 11243  14A4  084F               	movf	Button_State_Pressed@button^(0+256),w
 11244  14A5  3E02               	addlw	2
 11245  14A6  0086               	movwf	6
 11246  14A7  3002               	movlw	2	; select bank4/5
 11247  14A8  0087               	movwf	7
 11248  14A9  0181               	clrf	1
 11249  14AA  0A81               	incf	1,f
 11250                           
 11251                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11252  14AB  084F               	movf	Button_State_Pressed@button^(0+256),w
 11253  14AC  3E0A               	addlw	10
 11254  14AD  0086               	movwf	6
 11255  14AE  3002               	movlw	2	; select bank4/5
 11256  14AF  0087               	movwf	7
 11257  14B0  3000               	movlw	0
 11258  14B1  3FC0               	movwi [0]fsr1
 11259  14B2  3FC1               	movwi [1]fsr1
 11260                           
 11261                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11262  14B3  084F               	movf	Button_State_Pressed@button^(0+256),w
 11263  14B4  3E0C               	addlw	12
 11264  14B5  0086               	movwf	6
 11265  14B6  3002               	movlw	2	; select bank4/5
 11266  14B7  0087               	movwf	7
 11267  14B8  30FF               	movlw	255
 11268  14B9  3FC0               	movwi [0]fsr1
 11269  14BA  30FB               	movlw	251
 11270  14BB  3FC1               	movwi [1]fsr1
 11271                           
 11272                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
 11273  14BC  084F               	movf	Button_State_Pressed@button^(0+256),w
 11274  14BD  0086               	movwf	6
 11275  14BE  3002               	movlw	2	; select bank4/5
 11276  14BF  0087               	movwf	7
 11277  14C0  0801               	movf	1,w
 11278  14C1  00D0               	movwf	??_Button_State_Pressed^(0+256)
 11279  14C2  0850               	movf	??_Button_State_Pressed^(0+256),w
 11280  14C3  00CC               	movwf	myButtonReleasedCallback@button^(0+256)
 11281  14C4  0867               	movf	(_callback_notPressed+1)^(0+256),w
 11282  14C5  008A               	movwf	10
 11283  14C6  0866               	movf	_callback_notPressed^(0+256),w
 11284  14C7  000A               	callw
 11285  14C8  3194               	pagesel	$
 11286  14C9  0008               	return
 11287  14CA                     __end_of_Button_State_Pressed:	
 11288                           
 11289                           	psect	text61
 11290  1535                     __ptext61:	
 11291 ;; *************** function _myButtonPressedCallback *****************
 11292 ;; Defined at:
 11293 ;;		line 263 in file "main.c"
 11294 ;; Parameters:    Size  Location     Type
 11295 ;;  button          1   12[BANK2 ] enum E2945
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;		None
 11298 ;; Return value:  Size  Location     Type
 11299 ;;                  1    wreg      void 
 11300 ;; Registers used:
 11301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11302 ;; Tracked objects:
 11303 ;;		On entry : 0/0
 11304 ;;		On exit  : 0/0
 11305 ;;		Unchanged: 0/0
 11306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11307 ;;      Params:         0       0       0       1       0       0       0       0
 11308 ;;      Locals:         0       0       0       0       0       0       0       0
 11309 ;;      Temps:          0       0       0       0       0       0       0       0
 11310 ;;      Totals:         0       0       0       1       0       0       0       0
 11311 ;;Total ram usage:        1 bytes
 11312 ;; Hardware stack levels used:    1
 11313 ;; Hardware stack levels required when called:   13
 11314 ;; This function calls:
 11315 ;;		_LED_PROCESS
 11316 ;;		_PROCESS_RELAY
 11317 ;; This function is called by:
 11318 ;;		_main
 11319 ;;		_Button_State_NotPressed
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           
 11324                           ;psect for function _myButtonPressedCallback
 11325  1535                     _myButtonPressedCallback:	
 11326                           
 11327                           ;main.c: 263: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 264:
      +                           {;main.c: 265:     if(config_status == 0)
 11328                           
 11329                           ;incstack = 0
 11330 ;; hardware stack exceeded
 11331                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11332  1535  0022               	movlb	2	; select bank2
 11333  1536  083A               	movf	_config_status^(0+256),w	;volatile
 11334  1537  1D03               	btfss	3,2
 11335  1538  0008               	return
 11336                           
 11337                           ;main.c: 266:     {;main.c: 267:         count_conf = 0;
 11338  1539  01AC               	clrf	_count_conf^(0+256)
 11339  153A  01AD               	clrf	(_count_conf+1)^(0+256)
 11340                           
 11341                           ;main.c: 268:         if(button == 0)
 11342  153B  084C               	movf	myButtonPressedCallback@button^(0+256),w
 11343  153C  1D03               	btfss	3,2
 11344  153D  2D5F               	goto	l7704
 11345                           
 11346                           ;main.c: 269:         {;main.c: 270:             bt_status.BT_3_ON_OFF = (~bt_status.BT_
      +                          3_ON_OFF);
 11347  153E  1003               	clrc
 11348  153F  1F2E               	btfss	_bt_status^(0+256),6
 11349  1540  1403               	setc
 11350  1541  1C03               	btfss	3,0
 11351  1542  2D46               	goto	u8860
 11352  1543  0022               	movlb	2	; select bank2
 11353  1544  172E               	bsf	_bt_status^(0+256),6
 11354  1545  2D48               	goto	l7694
 11355  1546                     u8860:	
 11356  1546  0022               	movlb	2	; select bank2
 11357  1547  132E               	bcf	_bt_status^(0+256),6
 11358  1548                     l7694:	
 11359                           
 11360                           ;main.c: 271:             if(bt_status.BT_3_ON_OFF == 1)
 11361  1548  1F2E               	btfss	_bt_status^(0+256),6
 11362  1549  2D55               	goto	l7700
 11363                           
 11364                           ;main.c: 272:             {;main.c: 273:                 LED_PROCESS(3,1,0);
 11365  154A  0021               	movlb	1	; select bank1
 11366  154B  01A1               	clrf	LED_PROCESS@blue^(0+128)
 11367  154C  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 11368  154D  01A2               	clrf	LED_PROCESS@red^(0+128)
 11369  154E  3003               	movlw	3
 11370  154F  3192  2213  3195   	fcall	_LED_PROCESS
 11371                           
 11372                           ;main.c: 274:                 bt_status.BT_3 = 1;
 11373  1552  0022               	movlb	2	; select bank2
 11374  1553  15AE               	bsf	_bt_status^(0+256),3
 11375                           
 11376                           ;main.c: 275:             }
 11377  1554  2D5F               	goto	l7704
 11378  1555                     l7700:	
 11379                           
 11380                           ;main.c: 277:             {;main.c: 278:                 LED_PROCESS(3,0,1);
 11381  1555  0021               	movlb	1	; select bank1
 11382  1556  01A1               	clrf	LED_PROCESS@blue^(0+128)
 11383  1557  01A2               	clrf	LED_PROCESS@red^(0+128)
 11384  1558  0AA2               	incf	LED_PROCESS@red^(0+128),f
 11385  1559  3003               	movlw	3
 11386  155A  3192  2213  3195   	fcall	_LED_PROCESS
 11387                           
 11388                           ;main.c: 279:                 bt_status.BT_3 = 0;
 11389  155D  0022               	movlb	2	; select bank2
 11390  155E  11AE               	bcf	_bt_status^(0+256),3
 11391  155F                     l7704:	
 11392                           
 11393                           ;main.c: 282:         if(button == 1)
 11394  155F  034C               	decf	myButtonPressedCallback@button^(0+256),w
 11395  1560  1D03               	btfss	3,2
 11396  1561  2D83               	goto	l7718
 11397                           
 11398                           ;main.c: 283:         {;main.c: 284:             bt_status.BT_2_ON_OFF = (~bt_status.BT_
      +                          2_ON_OFF);
 11399  1562  1003               	clrc
 11400  1563  1EAE               	btfss	_bt_status^(0+256),5
 11401  1564  1403               	setc
 11402  1565  1C03               	btfss	3,0
 11403  1566  2D6A               	goto	u8900
 11404  1567  0022               	movlb	2	; select bank2
 11405  1568  16AE               	bsf	_bt_status^(0+256),5
 11406  1569  2D6C               	goto	l7708
 11407  156A                     u8900:	
 11408  156A  0022               	movlb	2	; select bank2
 11409  156B  12AE               	bcf	_bt_status^(0+256),5
 11410  156C                     l7708:	
 11411                           
 11412                           ;main.c: 285:             if(bt_status.BT_2_ON_OFF == 1)
 11413  156C  1EAE               	btfss	_bt_status^(0+256),5
 11414  156D  2D79               	goto	l7714
 11415                           
 11416                           ;main.c: 286:             {;main.c: 287:                 LED_PROCESS(2,1,0);
 11417  156E  0021               	movlb	1	; select bank1
 11418  156F  01A1               	clrf	LED_PROCESS@blue^(0+128)
 11419  1570  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 11420  1571  01A2               	clrf	LED_PROCESS@red^(0+128)
 11421  1572  3002               	movlw	2
 11422  1573  3192  2213  3195   	fcall	_LED_PROCESS
 11423                           
 11424                           ;main.c: 288:                 bt_status.BT_2 = 1;
 11425  1576  0022               	movlb	2	; select bank2
 11426  1577  152E               	bsf	_bt_status^(0+256),2
 11427                           
 11428                           ;main.c: 289:             }
 11429  1578  2D83               	goto	l7718
 11430  1579                     l7714:	
 11431                           
 11432                           ;main.c: 291:             {;main.c: 292:                 LED_PROCESS(2,0,1);
 11433  1579  0021               	movlb	1	; select bank1
 11434  157A  01A1               	clrf	LED_PROCESS@blue^(0+128)
 11435  157B  01A2               	clrf	LED_PROCESS@red^(0+128)
 11436  157C  0AA2               	incf	LED_PROCESS@red^(0+128),f
 11437  157D  3002               	movlw	2
 11438  157E  3192  2213  3195   	fcall	_LED_PROCESS
 11439                           
 11440                           ;main.c: 293:                 bt_status.BT_2 = 0;
 11441  1581  0022               	movlb	2	; select bank2
 11442  1582  112E               	bcf	_bt_status^(0+256),2
 11443  1583                     l7718:	
 11444                           
 11445                           ;main.c: 296:         if(button == 2)
 11446  1583  3002               	movlw	2
 11447  1584  064C               	xorwf	myButtonPressedCallback@button^(0+256),w
 11448  1585  1D03               	btfss	3,2
 11449  1586  2DA8               	goto	l7732
 11450                           
 11451                           ;main.c: 297:         {;main.c: 298:             bt_status.BT_1_ON_OFF = (~bt_status.BT_
      +                          1_ON_OFF);
 11452  1587  1003               	clrc
 11453  1588  1E2E               	btfss	_bt_status^(0+256),4
 11454  1589  1403               	setc
 11455  158A  1C03               	btfss	3,0
 11456  158B  2D8F               	goto	u8940
 11457  158C  0022               	movlb	2	; select bank2
 11458  158D  162E               	bsf	_bt_status^(0+256),4
 11459  158E  2D91               	goto	l7722
 11460  158F                     u8940:	
 11461  158F  0022               	movlb	2	; select bank2
 11462  1590  122E               	bcf	_bt_status^(0+256),4
 11463  1591                     l7722:	
 11464                           
 11465                           ;main.c: 299:             if(bt_status.BT_1_ON_OFF == 1)
 11466  1591  1E2E               	btfss	_bt_status^(0+256),4
 11467  1592  2D9E               	goto	l7728
 11468                           
 11469                           ;main.c: 300:             {;main.c: 301:                 LED_PROCESS(1,1,0);
 11470  1593  0021               	movlb	1	; select bank1
 11471  1594  01A1               	clrf	LED_PROCESS@blue^(0+128)
 11472  1595  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 11473  1596  01A2               	clrf	LED_PROCESS@red^(0+128)
 11474  1597  3001               	movlw	1
 11475  1598  3192  2213  3195   	fcall	_LED_PROCESS
 11476                           
 11477                           ;main.c: 302:                 bt_status.BT_1 = 1;
 11478  159B  0022               	movlb	2	; select bank2
 11479  159C  14AE               	bsf	_bt_status^(0+256),1
 11480                           
 11481                           ;main.c: 303:             }
 11482  159D  2DA8               	goto	l7732
 11483  159E                     l7728:	
 11484                           
 11485                           ;main.c: 305:             {;main.c: 306:                 LED_PROCESS(1,0,1);
 11486  159E  0021               	movlb	1	; select bank1
 11487  159F  01A1               	clrf	LED_PROCESS@blue^(0+128)
 11488  15A0  01A2               	clrf	LED_PROCESS@red^(0+128)
 11489  15A1  0AA2               	incf	LED_PROCESS@red^(0+128),f
 11490  15A2  3001               	movlw	1
 11491  15A3  3192  2213  3195   	fcall	_LED_PROCESS
 11492                           
 11493                           ;main.c: 307:                 bt_status.BT_1 = 0;
 11494  15A6  0022               	movlb	2	; select bank2
 11495  15A7  10AE               	bcf	_bt_status^(0+256),1
 11496  15A8                     l7732:	
 11497                           
 11498                           ;main.c: 310:         PROCESS_RELAY(bt_status.BT_1,bt_status.BT_2,bt_status.BT_3);
 11499  15A8  3000               	movlw	0
 11500  15A9  192E               	btfsc	_bt_status^(0+256),2
 11501  15AA  3001               	movlw	1
 11502  15AB  0021               	movlb	1	; select bank1
 11503  15AC  00A1               	movwf	PROCESS_RELAY@relay_2^(0+128)
 11504  15AD  3000               	movlw	0
 11505  15AE  0022               	movlb	2	; select bank2
 11506  15AF  19AE               	btfsc	_bt_status^(0+256),3
 11507  15B0  3001               	movlw	1
 11508  15B1  0021               	movlb	1	; select bank1
 11509  15B2  00A2               	movwf	PROCESS_RELAY@relay_3^(0+128)
 11510  15B3  0022               	movlb	2	; select bank2
 11511  15B4  0C2E               	rrf	_bt_status^(0+256),w
 11512  15B5  3901               	andlw	1
 11513  15B6  319D  257D         	fcall	_PROCESS_RELAY
 11514  15B8  0008               	return
 11515  15B9                     __end_of_myButtonPressedCallback:	
 11516                           
 11517                           	psect	text62
 11518  0800                     __ptext62:	
 11519 ;; *************** function _Button_DefaultCallback *****************
 11520 ;; Defined at:
 11521 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11522 ;; Parameters:    Size  Location     Type
 11523 ;;  button          1   12[BANK2 ] enum E3069
 11524 ;; Auto vars:     Size  Location     Type
 11525 ;;		None
 11526 ;; Return value:  Size  Location     Type
 11527 ;;                  1    wreg      void 
 11528 ;; Registers used:
 11529 ;;		None
 11530 ;; Tracked objects:
 11531 ;;		On entry : 0/0
 11532 ;;		On exit  : 0/0
 11533 ;;		Unchanged: 0/0
 11534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11535 ;;      Params:         0       0       0       1       0       0       0       0
 11536 ;;      Locals:         0       0       0       0       0       0       0       0
 11537 ;;      Temps:          0       0       0       0       0       0       0       0
 11538 ;;      Totals:         0       0       0       1       0       0       0       0
 11539 ;;Total ram usage:        1 bytes
 11540 ;; Hardware stack levels used:    1
 11541 ;; Hardware stack levels required when called:   12
 11542 ;; This function calls:
 11543 ;;		Nothing
 11544 ;; This function is called by:
 11545 ;;		_Button_State_NotPressed
 11546 ;;		_Button_State_Pressed
 11547 ;; This function uses a non-reentrant model
 11548 ;;
 11549                           
 11550                           
 11551                           ;psect for function _Button_DefaultCallback
 11552  0800                     _Button_DefaultCallback:	
 11553                           
 11554                           ;incstack = 0
 11555 ;; hardware stack exceeded
 11556                           ; Regs used in _Button_DefaultCallback: []
 11557  0800  0008               	return
 11558  0801                     __end_of_Button_DefaultCallback:	
 11559                           
 11560                           	psect	text63
 11561  1EBD                     __ptext63:	
 11562 ;; *************** function _myButtonReleasedCallback *****************
 11563 ;; Defined at:
 11564 ;;		line 331 in file "main.c"
 11565 ;; Parameters:    Size  Location     Type
 11566 ;;  button          1   12[BANK2 ] enum E2945
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;		None
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  1    wreg      void 
 11571 ;; Registers used:
 11572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11578 ;;      Params:         0       0       0       1       0       0       0       0
 11579 ;;      Locals:         0       0       0       0       0       0       0       0
 11580 ;;      Temps:          0       0       0       2       0       0       0       0
 11581 ;;      Totals:         0       0       0       3       0       0       0       0
 11582 ;;Total ram usage:        3 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:   21
 11585 ;; This function calls:
 11586 ;;		_MTOUCH_Button_isPressed
 11587 ;;		_printf
 11588 ;;		_update_state
 11589 ;; This function is called by:
 11590 ;;		_main
 11591 ;;		_Button_State_Pressed
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           
 11596                           ;psect for function _myButtonReleasedCallback
 11597  1EBD                     _myButtonReleasedCallback:	
 11598                           
 11599                           ;main.c: 331: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 332
      +                          : {;main.c: 334:     if(config_status == 0)
 11600                           
 11601                           ;incstack = 0
 11602 ;; hardware stack exceeded
 11603                           ; Regs used in _myButtonReleasedCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11604  1EBD  0022               	movlb	2	; select bank2
 11605  1EBE  083A               	movf	_config_status^(0+256),w	;volatile
 11606  1EBF  1D03               	btfss	3,2
 11607  1EC0  0008               	return
 11608                           
 11609                           ;main.c: 335:     {;main.c: 336:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0&&MTOUCH_Button_isPressed(2)==0)
 11610  1EC1  3000               	movlw	0
 11611  1EC2  319D  2545  319E   	fcall	_MTOUCH_Button_isPressed
 11612  1EC5  3A00               	xorlw	0
 11613  1EC6  1D03               	skipz
 11614  1EC7  0008               	return
 11615  1EC8  3001               	movlw	1
 11616  1EC9  319D  2545  319E   	fcall	_MTOUCH_Button_isPressed
 11617  1ECC  3A00               	xorlw	0
 11618  1ECD  1D03               	skipz
 11619  1ECE  0008               	return
 11620  1ECF  3002               	movlw	2
 11621  1ED0  319D  2545  319E   	fcall	_MTOUCH_Button_isPressed
 11622  1ED3  3A00               	xorlw	0
 11623  1ED4  1D03               	skipz
 11624  1ED5  0008               	return
 11625                           
 11626                           ;main.c: 337:         {;main.c: 338:             printf("PIC%d",update_state());
 11627  1ED6  3047               	movlw	low (STR_4| (0+32768))
 11628  1ED7  0022               	movlb	2	; select bank2
 11629  1ED8  00C5               	movwf	printf@fmt^(0+256)
 11630  1ED9  3098               	movlw	high (STR_4| (0+32768))
 11631  1EDA  00C6               	movwf	(printf@fmt^(0+256)+1)
 11632  1EDB  3194  24CA  319E   	fcall	_update_state
 11633  1EDE  0022               	movlb	2	; select bank2
 11634  1EDF  00CD               	movwf	??_myButtonReleasedCallback^(0+256)
 11635  1EE0  01CE               	clrf	(??_myButtonReleasedCallback^(0+256)+1)
 11636  1EE1  084D               	movf	??_myButtonReleasedCallback^(0+256),w
 11637  1EE2  00C7               	movwf	(?_printf^(0+256)+2)
 11638  1EE3  084E               	movf	(??_myButtonReleasedCallback+1)^(0+256),w
 11639  1EE4  00C8               	movwf	((?_printf+1)^(0+256)+2)
 11640  1EE5  319B  23AF         	fcall	_printf
 11641  1EE7  0008               	return
 11642  1EE8                     __end_of_myButtonReleasedCallback:	
 11643                           
 11644                           	psect	text64
 11645  1D45                     __ptext64:	
 11646 ;; *************** function _MTOUCH_Button_isPressed *****************
 11647 ;; Defined at:
 11648 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;  name            1    wreg     enum E3069
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;  name            1    2[BANK1 ] enum E3069
 11653 ;; Return value:  Size  Location     Type
 11654 ;;                  1    wreg      _Bool 
 11655 ;; Registers used:
 11656 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11657 ;; Tracked objects:
 11658 ;;		On entry : 0/0
 11659 ;;		On exit  : 0/0
 11660 ;;		Unchanged: 0/0
 11661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11662 ;;      Params:         0       0       0       0       0       0       0       0
 11663 ;;      Locals:         0       0       1       0       0       0       0       0
 11664 ;;      Temps:          0       0       1       0       0       0       0       0
 11665 ;;      Totals:         0       0       2       0       0       0       0       0
 11666 ;;Total ram usage:        2 bytes
 11667 ;; Hardware stack levels used:    1
 11668 ;; Hardware stack levels required when called:   12
 11669 ;; This function calls:
 11670 ;;		Nothing
 11671 ;; This function is called by:
 11672 ;;		_main
 11673 ;;		_myButtonReleasedCallback
 11674 ;;		_MTOUCH_Button_Buttonmask_Get
 11675 ;; This function uses a non-reentrant model
 11676 ;;
 11677                           
 11678                           
 11679                           ;psect for function _MTOUCH_Button_isPressed
 11680  1D45                     _MTOUCH_Button_isPressed:	
 11681                           
 11682                           ;incstack = 0
 11683 ;; hardware stack exceeded
 11684                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 11685                           ;MTOUCH_Button_isPressed@name stored from wreg
 11686  1D45  0021               	movlb	1	; select bank1
 11687  1D46  00A2               	movwf	MTOUCH_Button_isPressed@name^(0+128)
 11688                           
 11689                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 11690  1D47  3003               	movlw	3
 11691  1D48  0222               	subwf	MTOUCH_Button_isPressed@name^(0+128),w
 11692  1D49  1803               	skipnc
 11693  1D4A  2D5F               	goto	l7484
 11694                           
 11695                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 11696  1D4B  0822               	movf	MTOUCH_Button_isPressed@name^(0+128),w
 11697  1D4C  00A1               	movwf	??_MTOUCH_Button_isPressed^(0+128)
 11698  1D4D  3003               	movlw	3
 11699  1D4E                     u8285:	
 11700  1D4E  35A1               	lslf	??_MTOUCH_Button_isPressed^(0+128),f
 11701  1D4F  3EFF               	addlw	-1
 11702  1D50  1D03               	skipz
 11703  1D51  2D4E               	goto	u8285
 11704  1D52  3521               	lslf	??_MTOUCH_Button_isPressed^(0+128),w
 11705  1D53  3E22               	addlw	(low ((_mtouch_button| (0+512)+2)))& (0+255)
 11706  1D54  0086               	movwf	6
 11707  1D55  3002               	movlw	2	; select bank4/5
 11708  1D56  0087               	movwf	7
 11709  1D57  3002               	movlw	2
 11710  1D58  0601               	xorwf	1,w
 11711  1D59  1D03               	btfss	3,2
 11712  1D5A  2D5D               	goto	u8290
 11713  1D5B  3001               	movlw	1
 11714  1D5C  0008               	return
 11715  1D5D                     u8290:	
 11716  1D5D  3000               	movlw	0
 11717  1D5E  0008               	return
 11718  1D5F                     l7484:	
 11719                           
 11720                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 11721  1D5F  3000               	movlw	0
 11722  1D60  0008               	return
 11723  1D61                     __end_of_MTOUCH_Button_isPressed:	
 11724                           
 11725                           	psect	text65
 11726  1164                     __ptext65:	
 11727 ;; *************** function _MTOUCH_Button_Initialize *****************
 11728 ;; Defined at:
 11729 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11730 ;; Parameters:    Size  Location     Type
 11731 ;;  name            1    wreg     enum E3069
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;  name            1    9[BANK1 ] enum E3069
 11734 ;;  button          1   10[BANK1 ] PTR struct .
 11735 ;;		 -> mtouch_button(48), 
 11736 ;; Return value:  Size  Location     Type
 11737 ;;                  1    wreg      void 
 11738 ;; Registers used:
 11739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11745 ;;      Params:         0       0       0       0       0       0       0       0
 11746 ;;      Locals:         0       0       2       0       0       0       0       0
 11747 ;;      Temps:          0       0       2       0       0       0       0       0
 11748 ;;      Totals:         0       0       4       0       0       0       0       0
 11749 ;;Total ram usage:        4 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:   14
 11752 ;; This function calls:
 11753 ;;		_MTOUCH_Sensor_Calibrate
 11754 ;; This function is called by:
 11755 ;;		_MTOUCH_Button_InitializeAll
 11756 ;;		_Button_Service
 11757 ;;		_Button_State_NotPressed
 11758 ;;		_Button_State_Pressed
 11759 ;; This function uses a non-reentrant model
 11760 ;;
 11761                           
 11762                           
 11763                           ;psect for function _MTOUCH_Button_Initialize
 11764  1164                     _MTOUCH_Button_Initialize:	
 11765                           
 11766                           ;incstack = 0
 11767 ;; hardware stack exceeded
 11768                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11769                           ;MTOUCH_Button_Initialize@name stored from wreg
 11770  1164  0021               	movlb	1	; select bank1
 11771  1165  00A9               	movwf	MTOUCH_Button_Initialize@name^(0+128)
 11772                           
 11773                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 11774  1166  0829               	movf	MTOUCH_Button_Initialize@name^(0+128),w
 11775  1167  00A7               	movwf	??_MTOUCH_Button_Initialize^(0+128)
 11776  1168  3003               	movlw	3
 11777  1169                     u8785:	
 11778  1169  35A7               	lslf	??_MTOUCH_Button_Initialize^(0+128),f
 11779  116A  3EFF               	addlw	-1
 11780  116B  1D03               	skipz
 11781  116C  2969               	goto	u8785
 11782  116D  3527               	lslf	??_MTOUCH_Button_Initialize^(0+128),w
 11783  116E  3E20               	addlw	(low (_mtouch_button| (0+512)))& (0+255)
 11784  116F  00A8               	movwf	(??_MTOUCH_Button_Initialize+1)^(0+128)
 11785  1170  0828               	movf	(??_MTOUCH_Button_Initialize+1)^(0+128),w
 11786  1171  00AA               	movwf	MTOUCH_Button_Initialize@button^(0+128)
 11787                           
 11788                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 11789  1172  082A               	movf	MTOUCH_Button_Initialize@button^(0+128),w
 11790  1173  3E02               	addlw	2
 11791  1174  0086               	movwf	6
 11792  1175  3002               	movlw	2	; select bank4/5
 11793  1176  0087               	movwf	7
 11794  1177  0181               	clrf	1
 11795                           
 11796                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 11797  1178  082A               	movf	MTOUCH_Button_Initialize@button^(0+128),w
 11798  1179  3E05               	addlw	5
 11799  117A  0086               	movwf	6
 11800  117B  3002               	movlw	2	; select bank4/5
 11801  117C  0087               	movwf	7
 11802  117D  3000               	movlw	0
 11803  117E  3FC0               	movwi [0]fsr1
 11804  117F  3000               	movlw	0
 11805  1180  3FC1               	movwi [1]fsr1
 11806  1181  3FC2               	movwi [2]fsr1
 11807  1182  3FC3               	movwi [3]fsr1
 11808                           
 11809                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 11810  1183  082A               	movf	MTOUCH_Button_Initialize@button^(0+128),w
 11811  1184  3E0A               	addlw	10
 11812  1185  0086               	movwf	6
 11813  1186  3002               	movlw	2	; select bank4/5
 11814  1187  0087               	movwf	7
 11815  1188  3000               	movlw	0
 11816  1189  3FC0               	movwi [0]fsr1
 11817  118A  3FC1               	movwi [1]fsr1
 11818                           
 11819                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 11820  118B  082A               	movf	MTOUCH_Button_Initialize@button^(0+128),w
 11821  118C  3E0C               	addlw	12
 11822  118D  0086               	movwf	6
 11823  118E  3002               	movlw	2	; select bank4/5
 11824  118F  0087               	movwf	7
 11825  1190  3000               	movlw	0
 11826  1191  3FC0               	movwi [0]fsr1
 11827  1192  3FC1               	movwi [1]fsr1
 11828                           
 11829                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 11830  1193  0A2A               	incf	MTOUCH_Button_Initialize@button^(0+128),w
 11831  1194  0086               	movwf	6
 11832  1195  3002               	movlw	2	; select bank4/5
 11833  1196  0087               	movwf	7
 11834  1197  0801               	movf	1,w
 11835  1198  319B  2389         	fcall	_MTOUCH_Sensor_Calibrate
 11836  119A  0008               	return
 11837  119B                     __end_of_MTOUCH_Button_Initialize:	
 11838                           
 11839                           	psect	text66
 11840  1B89                     __ptext66:	
 11841 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 11842 ;; Defined at:
 11843 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11844 ;; Parameters:    Size  Location     Type
 11845 ;;  sensor          1    wreg     enum E2886
 11846 ;; Auto vars:     Size  Location     Type
 11847 ;;  sensor          1    6[BANK1 ] enum E2886
 11848 ;; Return value:  Size  Location     Type
 11849 ;;                  1    wreg      void 
 11850 ;; Registers used:
 11851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11852 ;; Tracked objects:
 11853 ;;		On entry : 0/0
 11854 ;;		On exit  : 0/0
 11855 ;;		Unchanged: 0/0
 11856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11857 ;;      Params:         0       0       0       0       0       0       0       0
 11858 ;;      Locals:         0       0       1       0       0       0       0       0
 11859 ;;      Temps:          0       0       1       0       0       0       0       0
 11860 ;;      Totals:         0       0       2       0       0       0       0       0
 11861 ;;Total ram usage:        2 bytes
 11862 ;; Hardware stack levels used:    1
 11863 ;; Hardware stack levels required when called:   13
 11864 ;; This function calls:
 11865 ;;		___bmul
 11866 ;; This function is called by:
 11867 ;;		_MTOUCH_Sensor_Initialize
 11868 ;;		_MTOUCH_Button_Initialize
 11869 ;; This function uses a non-reentrant model
 11870 ;;
 11871                           
 11872                           
 11873                           ;psect for function _MTOUCH_Sensor_Calibrate
 11874  1B89                     _MTOUCH_Sensor_Calibrate:	
 11875                           
 11876                           ;incstack = 0
 11877 ;; hardware stack exceeded
 11878                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11879                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 11880  1B89  0021               	movlb	1	; select bank1
 11881  1B8A  00A6               	movwf	MTOUCH_Sensor_Calibrate@sensor^(0+128)
 11882                           
 11883                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 11884  1B8B  3003               	movlw	3
 11885  1B8C  0226               	subwf	MTOUCH_Sensor_Calibrate@sensor^(0+128),w
 11886  1B8D  1803               	skipnc
 11887  1B8E  0008               	return
 11888                           
 11889                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 11890  1B8F  3009               	movlw	9
 11891  1B90  00A5               	movwf	??_MTOUCH_Sensor_Calibrate^(0+128)
 11892  1B91  0825               	movf	??_MTOUCH_Sensor_Calibrate^(0+128),w
 11893  1B92  00A1               	movwf	___bmul@multiplicand^(0+128)
 11894  1B93  0826               	movf	MTOUCH_Sensor_Calibrate@sensor^(0+128),w
 11895  1B94  319B  2365         	fcall	___bmul
 11896  1B96  3EAE               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11897  1B97  0086               	movwf	6
 11898  1B98  3001               	movlw	1	; select bank3/4
 11899  1B99  0087               	movwf	7
 11900  1B9A  1101               	bcf	1,2
 11901  1B9B  0008               	return
 11902  1B9C                     __end_of_MTOUCH_Sensor_Calibrate:	
 11903                           
 11904                           	psect	text67
 11905  1640                     __ptext67:	
 11906 ;; *************** function _Button_Baseline_Update *****************
 11907 ;; Defined at:
 11908 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;  button          1    wreg     PTR struct .
 11911 ;;		 -> mtouch_button(48), 
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;  button          1    7[BANK1 ] PTR struct .
 11914 ;;		 -> mtouch_button(48), 
 11915 ;; Return value:  Size  Location     Type
 11916 ;;                  1    wreg      void 
 11917 ;; Registers used:
 11918 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11924 ;;      Params:         0       0       0       0       0       0       0       0
 11925 ;;      Locals:         0       0       1       0       0       0       0       0
 11926 ;;      Temps:          0       0       6       0       0       0       0       0
 11927 ;;      Totals:         0       0       7       0       0       0       0       0
 11928 ;;Total ram usage:        7 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:   12
 11931 ;; This function calls:
 11932 ;;		Nothing
 11933 ;; This function is called by:
 11934 ;;		_Button_State_Initializing
 11935 ;;		_Button_State_NotPressed
 11936 ;; This function uses a non-reentrant model
 11937 ;;
 11938                           
 11939                           
 11940                           ;psect for function _Button_Baseline_Update
 11941  1640                     _Button_Baseline_Update:	
 11942                           
 11943                           ;incstack = 0
 11944 ;; hardware stack exceeded
 11945                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 11946                           ;Button_Baseline_Update@button stored from wreg
 11947  1640  0021               	movlb	1	; select bank1
 11948  1641  00A7               	movwf	Button_Baseline_Update@button^(0+128)
 11949                           
 11950                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 11951  1642  1F8B               	btfss	11,7	;volatile
 11952  1643  2E8B               	goto	l7676
 11953                           
 11954                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 11955  1644  138B               	bcf	11,7	;volatile
 11956                           
 11957                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 11958  1645  0827               	movf	Button_Baseline_Update@button^(0+128),w
 11959  1646  3E05               	addlw	5
 11960  1647  0086               	movwf	6
 11961  1648  3002               	movlw	2	; select bank4/5
 11962  1649  0087               	movwf	7
 11963  164A  3F40               	moviw [0]fsr1
 11964  164B  00A1               	movwf	??_Button_Baseline_Update^(0+128)
 11965  164C  3F41               	moviw [1]fsr1
 11966  164D  00A2               	movwf	(??_Button_Baseline_Update^(0+128)+1)
 11967  164E  3F42               	moviw [2]fsr1
 11968  164F  00A3               	movwf	(??_Button_Baseline_Update^(0+128)+2)
 11969  1650  3F43               	moviw [3]fsr1
 11970  1651  00A4               	movwf	(??_Button_Baseline_Update^(0+128)+3)
 11971  1652  3004               	movlw	4
 11972  1653                     u8815:	
 11973  1653  36A4               	lsrf	(??_Button_Baseline_Update^(0+128)+3),f
 11974  1654  0CA3               	rrf	(??_Button_Baseline_Update^(0+128)+2),f
 11975  1655  0CA2               	rrf	(??_Button_Baseline_Update^(0+128)+1),f
 11976  1656  0CA1               	rrf	??_Button_Baseline_Update^(0+128),f
 11977  1657  0B89               	decfsz	9,f
 11978  1658  2E53               	goto	u8815
 11979  1659  0827               	movf	Button_Baseline_Update@button^(0+128),w
 11980  165A  3E05               	addlw	5
 11981  165B  0086               	movwf	6
 11982  165C  3002               	movlw	2	; select bank4/5
 11983  165D  0087               	movwf	7
 11984  165E  0821               	movf	??_Button_Baseline_Update^(0+128),w
 11985  165F  0281               	subwf	1,f
 11986  1660  3141               	addfsr 1,1
 11987  1661  0822               	movf	(??_Button_Baseline_Update+1)^(0+128),w
 11988  1662  3B81               	subwfb	1,f
 11989  1663  3141               	addfsr 1,1
 11990  1664  0823               	movf	(??_Button_Baseline_Update+2)^(0+128),w
 11991  1665  3B81               	subwfb	1,f
 11992  1666  3141               	addfsr 1,1
 11993  1667  0824               	movf	(??_Button_Baseline_Update+3)^(0+128),w
 11994  1668  3B81               	subwfb	1,f
 11995  1669  317D               	addfsr 1,-3
 11996                           
 11997                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 11998  166A  0827               	movf	Button_Baseline_Update@button^(0+128),w
 11999  166B  3E03               	addlw	3
 12000  166C  0086               	movwf	6
 12001  166D  3002               	movlw	2	; select bank4/5
 12002  166E  0087               	movwf	7
 12003  166F  3F40               	moviw [0]fsr1
 12004  1670  00A1               	movwf	??_Button_Baseline_Update^(0+128)
 12005  1671  3F41               	moviw [1]fsr1
 12006  1672  00A2               	movwf	(??_Button_Baseline_Update^(0+128)+1)
 12007  1673  0821               	movf	??_Button_Baseline_Update^(0+128),w
 12008  1674  00A3               	movwf	(??_Button_Baseline_Update+2)^(0+128)
 12009  1675  0822               	movf	(??_Button_Baseline_Update+1)^(0+128),w
 12010  1676  00A4               	movwf	((??_Button_Baseline_Update+2)^(0+128)+1)
 12011  1677  01A5               	clrf	((??_Button_Baseline_Update+2)^(0+128)+2)
 12012  1678  01A6               	clrf	((??_Button_Baseline_Update+2)^(0+128)+3)
 12013  1679  0827               	movf	Button_Baseline_Update@button^(0+128),w
 12014  167A  3E05               	addlw	5
 12015  167B  0086               	movwf	6
 12016  167C  3002               	movlw	2	; select bank4/5
 12017  167D  0087               	movwf	7
 12018  167E  0823               	movf	(??_Button_Baseline_Update+2)^(0+128),w
 12019  167F  0781               	addwf	1,f
 12020  1680  3141               	addfsr 1,1
 12021  1681  0824               	movf	(??_Button_Baseline_Update+3)^(0+128),w
 12022  1682  3D81               	addwfc	1,f
 12023  1683  3141               	addfsr 1,1
 12024  1684  0825               	movf	(??_Button_Baseline_Update+4)^(0+128),w
 12025  1685  3D81               	addwfc	1,f
 12026  1686  3141               	addfsr 1,1
 12027  1687  0826               	movf	(??_Button_Baseline_Update+5)^(0+128),w
 12028  1688  3D81               	addwfc	1,f
 12029                           
 12030                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 12031  1689  178B               	bsf	11,7	;volatile
 12032                           
 12033                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 12034  168A  0008               	return
 12035  168B                     l7676:	
 12036                           
 12037                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 12038  168B  0827               	movf	Button_Baseline_Update@button^(0+128),w
 12039  168C  3E05               	addlw	5
 12040  168D  0086               	movwf	6
 12041  168E  3002               	movlw	2	; select bank4/5
 12042  168F  0087               	movwf	7
 12043  1690  3F40               	moviw [0]fsr1
 12044  1691  00A1               	movwf	??_Button_Baseline_Update^(0+128)
 12045  1692  3F41               	moviw [1]fsr1
 12046  1693  00A2               	movwf	(??_Button_Baseline_Update^(0+128)+1)
 12047  1694  3F42               	moviw [2]fsr1
 12048  1695  00A3               	movwf	(??_Button_Baseline_Update^(0+128)+2)
 12049  1696  3F43               	moviw [3]fsr1
 12050  1697  00A4               	movwf	(??_Button_Baseline_Update^(0+128)+3)
 12051  1698  3004               	movlw	4
 12052  1699                     u8825:	
 12053  1699  36A4               	lsrf	(??_Button_Baseline_Update^(0+128)+3),f
 12054  169A  0CA3               	rrf	(??_Button_Baseline_Update^(0+128)+2),f
 12055  169B  0CA2               	rrf	(??_Button_Baseline_Update^(0+128)+1),f
 12056  169C  0CA1               	rrf	??_Button_Baseline_Update^(0+128),f
 12057  169D  0B89               	decfsz	9,f
 12058  169E  2E99               	goto	u8825
 12059  169F  0827               	movf	Button_Baseline_Update@button^(0+128),w
 12060  16A0  3E05               	addlw	5
 12061  16A1  0086               	movwf	6
 12062  16A2  3002               	movlw	2	; select bank4/5
 12063  16A3  0087               	movwf	7
 12064  16A4  0821               	movf	??_Button_Baseline_Update^(0+128),w
 12065  16A5  0281               	subwf	1,f
 12066  16A6  3141               	addfsr 1,1
 12067  16A7  0822               	movf	(??_Button_Baseline_Update+1)^(0+128),w
 12068  16A8  3B81               	subwfb	1,f
 12069  16A9  3141               	addfsr 1,1
 12070  16AA  0823               	movf	(??_Button_Baseline_Update+2)^(0+128),w
 12071  16AB  3B81               	subwfb	1,f
 12072  16AC  3141               	addfsr 1,1
 12073  16AD  0824               	movf	(??_Button_Baseline_Update+3)^(0+128),w
 12074  16AE  3B81               	subwfb	1,f
 12075  16AF  317D               	addfsr 1,-3
 12076                           
 12077                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 12078  16B0  0827               	movf	Button_Baseline_Update@button^(0+128),w
 12079  16B1  3E03               	addlw	3
 12080  16B2  0086               	movwf	6
 12081  16B3  3002               	movlw	2	; select bank4/5
 12082  16B4  0087               	movwf	7
 12083  16B5  3F40               	moviw [0]fsr1
 12084  16B6  00A1               	movwf	??_Button_Baseline_Update^(0+128)
 12085  16B7  3F41               	moviw [1]fsr1
 12086  16B8  00A2               	movwf	(??_Button_Baseline_Update^(0+128)+1)
 12087  16B9  0821               	movf	??_Button_Baseline_Update^(0+128),w
 12088  16BA  00A3               	movwf	(??_Button_Baseline_Update+2)^(0+128)
 12089  16BB  0822               	movf	(??_Button_Baseline_Update+1)^(0+128),w
 12090  16BC  00A4               	movwf	((??_Button_Baseline_Update+2)^(0+128)+1)
 12091  16BD  01A5               	clrf	((??_Button_Baseline_Update+2)^(0+128)+2)
 12092  16BE  01A6               	clrf	((??_Button_Baseline_Update+2)^(0+128)+3)
 12093  16BF  0827               	movf	Button_Baseline_Update@button^(0+128),w
 12094  16C0  3E05               	addlw	5
 12095  16C1  0086               	movwf	6
 12096  16C2  3002               	movlw	2	; select bank4/5
 12097  16C3  0087               	movwf	7
 12098  16C4  0823               	movf	(??_Button_Baseline_Update+2)^(0+128),w
 12099  16C5  0781               	addwf	1,f
 12100  16C6  3141               	addfsr 1,1
 12101  16C7  0824               	movf	(??_Button_Baseline_Update+3)^(0+128),w
 12102  16C8  3D81               	addwfc	1,f
 12103  16C9  3141               	addfsr 1,1
 12104  16CA  0825               	movf	(??_Button_Baseline_Update+4)^(0+128),w
 12105  16CB  3D81               	addwfc	1,f
 12106  16CC  3141               	addfsr 1,1
 12107  16CD  0826               	movf	(??_Button_Baseline_Update+5)^(0+128),w
 12108  16CE  3D81               	addwfc	1,f
 12109  16CF  0008               	return
 12110  16D0                     __end_of_Button_Baseline_Update:	
 12111                           
 12112                           	psect	text68
 12113  1F71                     __ptext68:	
 12114 ;; *************** function _Button_Baseline_Initialize *****************
 12115 ;; Defined at:
 12116 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12117 ;; Parameters:    Size  Location     Type
 12118 ;;  button          1    wreg     PTR struct .
 12119 ;;		 -> mtouch_button(48), 
 12120 ;; Auto vars:     Size  Location     Type
 12121 ;;  button          1   13[BANK1 ] PTR struct .
 12122 ;;		 -> mtouch_button(48), 
 12123 ;; Return value:  Size  Location     Type
 12124 ;;                  1    wreg      void 
 12125 ;; Registers used:
 12126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12127 ;; Tracked objects:
 12128 ;;		On entry : 0/0
 12129 ;;		On exit  : 0/0
 12130 ;;		Unchanged: 0/0
 12131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12132 ;;      Params:         0       0       0       0       0       0       0       0
 12133 ;;      Locals:         0       0       1       0       0       0       0       0
 12134 ;;      Temps:          0       0       4       0       0       0       0       0
 12135 ;;      Totals:         0       0       5       0       0       0       0       0
 12136 ;;Total ram usage:        5 bytes
 12137 ;; Hardware stack levels used:    1
 12138 ;; Hardware stack levels required when called:   14
 12139 ;; This function calls:
 12140 ;;		_MTOUCH_Sensor_RawSample_Get
 12141 ;; This function is called by:
 12142 ;;		_Button_State_Initializing
 12143 ;; This function uses a non-reentrant model
 12144 ;;
 12145                           
 12146                           
 12147                           ;psect for function _Button_Baseline_Initialize
 12148  1F71                     _Button_Baseline_Initialize:	
 12149                           
 12150                           ;incstack = 0
 12151 ;; hardware stack exceeded
 12152                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12153                           ;Button_Baseline_Initialize@button stored from wreg
 12154  1F71  0021               	movlb	1	; select bank1
 12155  1F72  00AD               	movwf	Button_Baseline_Initialize@button^(0+128)
 12156                           
 12157                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 12158  1F73  0A2D               	incf	Button_Baseline_Initialize@button^(0+128),w
 12159  1F74  0086               	movwf	6
 12160  1F75  3002               	movlw	2	; select bank4/5
 12161  1F76  0087               	movwf	7
 12162  1F77  0801               	movf	1,w
 12163  1F78  319D  2510  319F   	fcall	_MTOUCH_Sensor_RawSample_Get
 12164  1F7B  0021               	movlb	1	; select bank1
 12165  1F7C  0825               	movf	?_MTOUCH_Sensor_RawSample_Get^(0+128),w
 12166  1F7D  00A9               	movwf	??_Button_Baseline_Initialize^(0+128)
 12167  1F7E  0826               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)^(0+128),w
 12168  1F7F  00AA               	movwf	(??_Button_Baseline_Initialize^(0+128)+1)
 12169  1F80  01AB               	clrf	(??_Button_Baseline_Initialize^(0+128)+2)
 12170  1F81  01AC               	clrf	(??_Button_Baseline_Initialize^(0+128)+3)
 12171  1F82  082D               	movf	Button_Baseline_Initialize@button^(0+128),w
 12172  1F83  3E05               	addlw	5
 12173  1F84  0086               	movwf	6
 12174  1F85  3002               	movlw	2	; select bank4/5
 12175  1F86  0087               	movwf	7
 12176  1F87  0829               	movf	??_Button_Baseline_Initialize^(0+128),w
 12177  1F88  3FC0               	movwi [0]fsr1
 12178  1F89  082A               	movf	(??_Button_Baseline_Initialize+1)^(0+128),w
 12179  1F8A  3FC1               	movwi [1]fsr1
 12180  1F8B  082B               	movf	(??_Button_Baseline_Initialize+2)^(0+128),w
 12181  1F8C  3FC2               	movwi [2]fsr1
 12182  1F8D  082C               	movf	(??_Button_Baseline_Initialize+3)^(0+128),w
 12183  1F8E  3FC3               	movwi [3]fsr1
 12184                           
 12185                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 12186  1F8F  082D               	movf	Button_Baseline_Initialize@button^(0+128),w
 12187  1F90  3E05               	addlw	5
 12188  1F91  0086               	movwf	6
 12189  1F92  3002               	movlw	2	; select bank4/5
 12190  1F93  0087               	movwf	7
 12191  1F94  3004               	movlw	4
 12192  1F95                     u8795:	
 12193  1F95  3581               	lslf	1,f
 12194  1F96  3141               	addfsr 1,1
 12195  1F97  0D81               	rlf	1,f
 12196  1F98  3141               	addfsr 1,1
 12197  1F99  0D81               	rlf	1,f
 12198  1F9A  3141               	addfsr 1,1
 12199  1F9B  0D81               	rlf	1,f
 12200  1F9C  317D               	addfsr 1,-3
 12201  1F9D  0B89               	decfsz	9,f
 12202  1F9E  2F95               	goto	u8795
 12203  1F9F  0008               	return
 12204  1FA0                     __end_of_Button_Baseline_Initialize:	
 12205                           
 12206                           	psect	text69
 12207  1AC9                     __ptext69:	
 12208 ;; *************** function _Button_Reading_Update *****************
 12209 ;; Defined at:
 12210 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;  button          1    wreg     PTR struct .
 12213 ;;		 -> mtouch_button(48), 
 12214 ;; Auto vars:     Size  Location     Type
 12215 ;;  button          1   12[BANK1 ] PTR struct .
 12216 ;;		 -> mtouch_button(48), 
 12217 ;; Return value:  Size  Location     Type
 12218 ;;                  1    wreg      void 
 12219 ;; Registers used:
 12220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12221 ;; Tracked objects:
 12222 ;;		On entry : 0/0
 12223 ;;		On exit  : 0/0
 12224 ;;		Unchanged: 0/0
 12225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12226 ;;      Params:         0       0       0       0       0       0       0       0
 12227 ;;      Locals:         0       0       1       0       0       0       0       0
 12228 ;;      Temps:          0       0       0       0       0       0       0       0
 12229 ;;      Totals:         0       0       1       0       0       0       0       0
 12230 ;;Total ram usage:        1 bytes
 12231 ;; Hardware stack levels used:    1
 12232 ;; Hardware stack levels required when called:   15
 12233 ;; This function calls:
 12234 ;;		_Button_Reading_Update_Helper
 12235 ;; This function is called by:
 12236 ;;		_Button_Service
 12237 ;; This function uses a non-reentrant model
 12238 ;;
 12239                           
 12240                           
 12241                           ;psect for function _Button_Reading_Update
 12242  1AC9                     _Button_Reading_Update:	
 12243                           
 12244                           ;incstack = 0
 12245 ;; hardware stack exceeded
 12246                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12247                           ;Button_Reading_Update@button stored from wreg
 12248  1AC9  0021               	movlb	1	; select bank1
 12249  1ACA  00AC               	movwf	Button_Reading_Update@button^(0+128)
 12250                           
 12251                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 12252  1ACB  1F8B               	btfss	11,7	;volatile
 12253  1ACC  2AD3               	goto	l7894
 12254                           
 12255                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 12256  1ACD  138B               	bcf	11,7	;volatile
 12257                           
 12258                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 12259  1ACE  082C               	movf	Button_Reading_Update@button^(0+128),w
 12260  1ACF  3193  2300         	fcall	_Button_Reading_Update_Helper
 12261                           
 12262                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 12263  1AD1  178B               	bsf	11,7	;volatile
 12264                           
 12265                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 12266  1AD2  0008               	return
 12267  1AD3                     l7894:	
 12268                           
 12269                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 12270  1AD3  082C               	movf	Button_Reading_Update@button^(0+128),w
 12271  1AD4  3193  2300         	fcall	_Button_Reading_Update_Helper
 12272  1AD6  0008               	return
 12273  1AD7                     __end_of_Button_Reading_Update:	
 12274                           
 12275                           	psect	text70
 12276  1300                     __ptext70:	
 12277 ;; *************** function _Button_Reading_Update_Helper *****************
 12278 ;; Defined at:
 12279 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12280 ;; Parameters:    Size  Location     Type
 12281 ;;  button          1    wreg     PTR struct .
 12282 ;;		 -> mtouch_button(48), 
 12283 ;; Auto vars:     Size  Location     Type
 12284 ;;  button          1   11[BANK1 ] PTR struct .
 12285 ;;		 -> mtouch_button(48), 
 12286 ;; Return value:  Size  Location     Type
 12287 ;;                  1    wreg      void 
 12288 ;; Registers used:
 12289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12290 ;; Tracked objects:
 12291 ;;		On entry : 0/0
 12292 ;;		On exit  : 0/0
 12293 ;;		Unchanged: 0/0
 12294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12295 ;;      Params:         0       0       0       0       0       0       0       0
 12296 ;;      Locals:         0       0       1       0       0       0       0       0
 12297 ;;      Temps:          0       0       2       0       0       0       0       0
 12298 ;;      Totals:         0       0       3       0       0       0       0       0
 12299 ;;Total ram usage:        3 bytes
 12300 ;; Hardware stack levels used:    1
 12301 ;; Hardware stack levels required when called:   14
 12302 ;; This function calls:
 12303 ;;		_MTOUCH_Sensor_RawSample_Get
 12304 ;; This function is called by:
 12305 ;;		_Button_Reading_Update
 12306 ;; This function uses a non-reentrant model
 12307 ;;
 12308                           
 12309                           
 12310                           ;psect for function _Button_Reading_Update_Helper
 12311  1300                     _Button_Reading_Update_Helper:	
 12312                           
 12313                           ;incstack = 0
 12314 ;; hardware stack exceeded
 12315                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12316                           ;Button_Reading_Update_Helper@button stored from wreg
 12317  1300  0021               	movlb	1	; select bank1
 12318  1301  00AB               	movwf	Button_Reading_Update_Helper@button^(0+128)
 12319                           
 12320                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12321  1302  082B               	movf	Button_Reading_Update_Helper@button^(0+128),w
 12322  1303  3E02               	addlw	2
 12323  1304  0086               	movwf	6
 12324  1305  3002               	movlw	2	; select bank4/5
 12325  1306  0087               	movwf	7
 12326  1307  0801               	movf	1,w
 12327  1308  1903               	btfsc	3,2
 12328  1309  2B3E               	goto	l7684
 12329                           
 12330                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 12331  130A  082B               	movf	Button_Reading_Update_Helper@button^(0+128),w
 12332  130B  3E03               	addlw	3
 12333  130C  0086               	movwf	6
 12334  130D  3002               	movlw	2	; select bank4/5
 12335  130E  0087               	movwf	7
 12336  130F  3F40               	moviw [0]fsr1
 12337  1310  00A9               	movwf	??_Button_Reading_Update_Helper^(0+128)
 12338  1311  3F41               	moviw [1]fsr1
 12339  1312  00AA               	movwf	(??_Button_Reading_Update_Helper^(0+128)+1)
 12340  1313  36AA               	lsrf	(??_Button_Reading_Update_Helper^(0+128)+1),f
 12341  1314  0CA9               	rrf	??_Button_Reading_Update_Helper^(0+128),f
 12342  1315  36AA               	lsrf	(??_Button_Reading_Update_Helper^(0+128)+1),f
 12343  1316  0CA9               	rrf	??_Button_Reading_Update_Helper^(0+128),f
 12344  1317  082B               	movf	Button_Reading_Update_Helper@button^(0+128),w
 12345  1318  3E03               	addlw	3
 12346  1319  0086               	movwf	6
 12347  131A  3002               	movlw	2	; select bank4/5
 12348  131B  0087               	movwf	7
 12349  131C  0829               	movf	??_Button_Reading_Update_Helper^(0+128),w
 12350  131D  0281               	subwf	1,f
 12351  131E  3141               	addfsr 1,1
 12352  131F  082A               	movf	(??_Button_Reading_Update_Helper+1)^(0+128),w
 12353  1320  3B81               	subwfb	1,f
 12354  1321  317F               	addfsr 1,-1
 12355                           
 12356                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12357  1322  0A2B               	incf	Button_Reading_Update_Helper@button^(0+128),w
 12358  1323  0086               	movwf	6
 12359  1324  3002               	movlw	2	; select bank4/5
 12360  1325  0087               	movwf	7
 12361  1326  0801               	movf	1,w
 12362  1327  319D  2510         	fcall	_MTOUCH_Sensor_RawSample_Get
 12363  1329  0021               	movlb	1	; select bank1
 12364  132A  0825               	movf	?_MTOUCH_Sensor_RawSample_Get^(0+128),w
 12365  132B  00A9               	movwf	??_Button_Reading_Update_Helper^(0+128)
 12366  132C  0826               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)^(0+128),w
 12367  132D  00AA               	movwf	(??_Button_Reading_Update_Helper^(0+128)+1)
 12368  132E  36AA               	lsrf	(??_Button_Reading_Update_Helper^(0+128)+1),f
 12369  132F  0CA9               	rrf	??_Button_Reading_Update_Helper^(0+128),f
 12370  1330  36AA               	lsrf	(??_Button_Reading_Update_Helper^(0+128)+1),f
 12371  1331  0CA9               	rrf	??_Button_Reading_Update_Helper^(0+128),f
 12372  1332  082B               	movf	Button_Reading_Update_Helper@button^(0+128),w
 12373  1333  3E03               	addlw	3
 12374  1334  0086               	movwf	6
 12375  1335  3002               	movlw	2	; select bank4/5
 12376  1336  0087               	movwf	7
 12377  1337  0829               	movf	??_Button_Reading_Update_Helper^(0+128),w
 12378  1338  0781               	addwf	1,f
 12379  1339  3141               	addfsr 1,1
 12380  133A  082A               	movf	(??_Button_Reading_Update_Helper+1)^(0+128),w
 12381  133B  3D81               	addwfc	1,f
 12382  133C  317F               	addfsr 1,-1
 12383                           
 12384                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 12385  133D  0008               	return
 12386  133E                     l7684:	
 12387                           
 12388                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12389  133E  0A2B               	incf	Button_Reading_Update_Helper@button^(0+128),w
 12390  133F  0086               	movwf	6
 12391  1340  3002               	movlw	2	; select bank4/5
 12392  1341  0087               	movwf	7
 12393  1342  0801               	movf	1,w
 12394  1343  319D  2510         	fcall	_MTOUCH_Sensor_RawSample_Get
 12395  1345  0021               	movlb	1	; select bank1
 12396  1346  082B               	movf	Button_Reading_Update_Helper@button^(0+128),w
 12397  1347  3E03               	addlw	3
 12398  1348  0086               	movwf	6
 12399  1349  3002               	movlw	2	; select bank4/5
 12400  134A  0087               	movwf	7
 12401  134B  0825               	movf	?_MTOUCH_Sensor_RawSample_Get^(0+128),w
 12402  134C  3FC0               	movwi [0]fsr1
 12403  134D  0826               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)^(0+128),w
 12404  134E  3FC1               	movwi [1]fsr1
 12405  134F  0008               	return
 12406  1350                     __end_of_Button_Reading_Update_Helper:	
 12407                           
 12408                           	psect	text71
 12409  1D10                     __ptext71:	
 12410 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12411 ;; Defined at:
 12412 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12413 ;; Parameters:    Size  Location     Type
 12414 ;;  name            1    wreg     enum E2886
 12415 ;; Auto vars:     Size  Location     Type
 12416 ;;  name            1    8[BANK1 ] enum E2886
 12417 ;; Return value:  Size  Location     Type
 12418 ;;                  2    5[BANK1 ] unsigned short 
 12419 ;; Registers used:
 12420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12421 ;; Tracked objects:
 12422 ;;		On entry : 0/0
 12423 ;;		On exit  : 0/0
 12424 ;;		Unchanged: 0/0
 12425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12426 ;;      Params:         0       0       2       0       0       0       0       0
 12427 ;;      Locals:         0       0       1       0       0       0       0       0
 12428 ;;      Temps:          0       0       1       0       0       0       0       0
 12429 ;;      Totals:         0       0       4       0       0       0       0       0
 12430 ;;Total ram usage:        4 bytes
 12431 ;; Hardware stack levels used:    1
 12432 ;; Hardware stack levels required when called:   13
 12433 ;; This function calls:
 12434 ;;		___bmul
 12435 ;; This function is called by:
 12436 ;;		_Button_Reading_Update_Helper
 12437 ;;		_Button_Baseline_Initialize
 12438 ;; This function uses a non-reentrant model
 12439 ;;
 12440                           
 12441                           
 12442                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12443  1D10                     _MTOUCH_Sensor_RawSample_Get:	
 12444                           
 12445                           ;incstack = 0
 12446 ;; hardware stack exceeded
 12447                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12448                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12449  1D10  0021               	movlb	1	; select bank1
 12450  1D11  00A8               	movwf	MTOUCH_Sensor_RawSample_Get@name^(0+128)
 12451                           
 12452                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 12453  1D12  3003               	movlw	3
 12454  1D13  0228               	subwf	MTOUCH_Sensor_RawSample_Get@name^(0+128),w
 12455  1D14  1803               	skipnc
 12456  1D15  2D27               	goto	l7472
 12457                           
 12458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 12459  1D16  3009               	movlw	9
 12460  1D17  00A7               	movwf	??_MTOUCH_Sensor_RawSample_Get^(0+128)
 12461  1D18  0827               	movf	??_MTOUCH_Sensor_RawSample_Get^(0+128),w
 12462  1D19  00A1               	movwf	___bmul@multiplicand^(0+128)
 12463  1D1A  0828               	movf	MTOUCH_Sensor_RawSample_Get@name^(0+128),w
 12464  1D1B  319B  2365         	fcall	___bmul
 12465  1D1D  3EAC               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 12466  1D1E  0086               	movwf	6
 12467  1D1F  3001               	movlw	1	; select bank3/4
 12468  1D20  0087               	movwf	7
 12469  1D21  3F40               	moviw [0]fsr1
 12470  1D22  0021               	movlb	1	; select bank1
 12471  1D23  00A5               	movwf	?_MTOUCH_Sensor_RawSample_Get^(0+128)
 12472  1D24  3F41               	moviw [1]fsr1
 12473  1D25  00A6               	movwf	(?_MTOUCH_Sensor_RawSample_Get+1)^(0+128)
 12474  1D26  0008               	return
 12475  1D27                     l7472:	
 12476                           
 12477                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 12478  1D27  01A5               	clrf	?_MTOUCH_Sensor_RawSample_Get^(0+128)
 12479  1D28  01A6               	clrf	(?_MTOUCH_Sensor_RawSample_Get+1)^(0+128)
 12480  1D29  0008               	return
 12481  1D2A                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 12482                           
 12483                           	psect	text72
 12484  1B65                     __ptext72:	
 12485 ;; *************** function ___bmul *****************
 12486 ;; Defined at:
 12487 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;  multiplier      1    wreg     unsigned char 
 12490 ;;  multiplicand    1    1[BANK1 ] unsigned char 
 12491 ;; Auto vars:     Size  Location     Type
 12492 ;;  multiplier      1    4[BANK1 ] unsigned char 
 12493 ;;  product         1    3[BANK1 ] unsigned char 
 12494 ;; Return value:  Size  Location     Type
 12495 ;;                  1    wreg      unsigned char 
 12496 ;; Registers used:
 12497 ;;		wreg, status,2, status,0
 12498 ;; Tracked objects:
 12499 ;;		On entry : 0/0
 12500 ;;		On exit  : 0/0
 12501 ;;		Unchanged: 0/0
 12502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12503 ;;      Params:         0       0       1       0       0       0       0       0
 12504 ;;      Locals:         0       0       2       0       0       0       0       0
 12505 ;;      Temps:          0       0       1       0       0       0       0       0
 12506 ;;      Totals:         0       0       4       0       0       0       0       0
 12507 ;;Total ram usage:        4 bytes
 12508 ;; Hardware stack levels used:    1
 12509 ;; Hardware stack levels required when called:   12
 12510 ;; This function calls:
 12511 ;;		Nothing
 12512 ;; This function is called by:
 12513 ;;		_MTOUCH_Sensor_Initialize
 12514 ;;		_MTOUCH_Sensor_RawSample_Get
 12515 ;;		_MTOUCH_Sensor_Enable
 12516 ;;		_MTOUCH_Sensor_Calibrate
 12517 ;;		_MTOUCH_Sensor_isCalibrated
 12518 ;;		_MTOUCH_Sensor_wasSampled
 12519 ;;		_MTOUCH_Sensor_isAnySensorActive
 12520 ;;		_MTOUCH_Sensor_Disable
 12521 ;;		_MTOUCH_Sensor_isEnabled
 12522 ;;		_MTOUCH_Sensor_isActive
 12523 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 12524 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 12525 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 12526 ;;		_MTOUCH_Sensor_Oversampling_Get
 12527 ;;		_MTOUCH_Sensor_Oversampling_Set
 12528 ;; This function uses a non-reentrant model
 12529 ;;
 12530                           
 12531                           
 12532                           ;psect for function ___bmul
 12533  1B65                     ___bmul:	
 12534                           
 12535                           ;incstack = 0
 12536 ;; hardware stack exceeded
 12537                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12538                           ;___bmul@multiplier stored from wreg
 12539  1B65  0021               	movlb	1	; select bank1
 12540  1B66  00A4               	movwf	___bmul@multiplier^(0+128)
 12541  1B67  01A3               	clrf	___bmul@product^(0+128)
 12542  1B68                     l7242:	
 12543  1B68  1C24               	btfss	___bmul@multiplier^(0+128),0
 12544  1B69  2B6E               	goto	l7246
 12545  1B6A  0821               	movf	___bmul@multiplicand^(0+128),w
 12546  1B6B  00A2               	movwf	??___bmul^(0+128)
 12547  1B6C  0822               	movf	??___bmul^(0+128),w
 12548  1B6D  07A3               	addwf	___bmul@product^(0+128),f
 12549  1B6E                     l7246:	
 12550  1B6E  1003               	clrc
 12551  1B6F  0DA1               	rlf	___bmul@multiplicand^(0+128),f
 12552  1B70  1003               	clrc
 12553  1B71  0CA4               	rrf	___bmul@multiplier^(0+128),f
 12554  1B72  0824               	movf	___bmul@multiplier^(0+128),w
 12555  1B73  1D03               	btfss	3,2
 12556  1B74  2B68               	goto	l7242
 12557  1B75  0823               	movf	___bmul@product^(0+128),w
 12558  1B76  0008               	return
 12559  1B77                     __end_of___bmul:	
 12560                           
 12561                           	psect	text73
 12562  15B9                     __ptext73:	
 12563 ;; *************** function _Button_Deviation_Update *****************
 12564 ;; Defined at:
 12565 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12566 ;; Parameters:    Size  Location     Type
 12567 ;;  button          1    wreg     PTR struct .
 12568 ;;		 -> mtouch_button(48), 
 12569 ;; Auto vars:     Size  Location     Type
 12570 ;;  button          1   11[BANK1 ] PTR struct .
 12571 ;;		 -> mtouch_button(48), 
 12572 ;;  deviation       4   12[BANK1 ] long 
 12573 ;; Return value:  Size  Location     Type
 12574 ;;                  1    wreg      void 
 12575 ;; Registers used:
 12576 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12577 ;; Tracked objects:
 12578 ;;		On entry : 0/0
 12579 ;;		On exit  : 0/0
 12580 ;;		Unchanged: 0/0
 12581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12582 ;;      Params:         0       0       0       0       0       0       0       0
 12583 ;;      Locals:         0       0       5       0       0       0       0       0
 12584 ;;      Temps:          0       0      10       0       0       0       0       0
 12585 ;;      Totals:         0       0      15       0       0       0       0       0
 12586 ;;Total ram usage:       15 bytes
 12587 ;; Hardware stack levels used:    1
 12588 ;; Hardware stack levels required when called:   12
 12589 ;; This function calls:
 12590 ;;		Nothing
 12591 ;; This function is called by:
 12592 ;;		_Button_Service
 12593 ;; This function uses a non-reentrant model
 12594 ;;
 12595                           
 12596                           
 12597                           ;psect for function _Button_Deviation_Update
 12598  15B9                     _Button_Deviation_Update:	
 12599                           
 12600                           ;incstack = 0
 12601                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12602                           ;Button_Deviation_Update@button stored from wreg
 12603  15B9  0021               	movlb	1	; select bank1
 12604  15BA  00AB               	movwf	Button_Deviation_Update@button^(0+128)
 12605                           
 12606                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 12607  15BB  082B               	movf	Button_Deviation_Update@button^(0+128),w
 12608  15BC  3E05               	addlw	5
 12609  15BD  0086               	movwf	6
 12610  15BE  3002               	movlw	2	; select bank4/5
 12611  15BF  0087               	movwf	7
 12612  15C0  3F40               	moviw [0]fsr1
 12613  15C1  00A1               	movwf	??_Button_Deviation_Update^(0+128)
 12614  15C2  3F41               	moviw [1]fsr1
 12615  15C3  00A2               	movwf	(??_Button_Deviation_Update^(0+128)+1)
 12616  15C4  3F42               	moviw [2]fsr1
 12617  15C5  00A3               	movwf	(??_Button_Deviation_Update^(0+128)+2)
 12618  15C6  3F43               	moviw [3]fsr1
 12619  15C7  00A4               	movwf	(??_Button_Deviation_Update^(0+128)+3)
 12620  15C8  3004               	movlw	4
 12621  15C9                     u9205:	
 12622  15C9  36A4               	lsrf	(??_Button_Deviation_Update^(0+128)+3),f
 12623  15CA  0CA3               	rrf	(??_Button_Deviation_Update^(0+128)+2),f
 12624  15CB  0CA2               	rrf	(??_Button_Deviation_Update^(0+128)+1),f
 12625  15CC  0CA1               	rrf	??_Button_Deviation_Update^(0+128),f
 12626  15CD  0B89               	decfsz	9,f
 12627  15CE  2DC9               	goto	u9205
 12628  15CF  082B               	movf	Button_Deviation_Update@button^(0+128),w
 12629  15D0  3E03               	addlw	3
 12630  15D1  0086               	movwf	6
 12631  15D2  3002               	movlw	2	; select bank4/5
 12632  15D3  0087               	movwf	7
 12633  15D4  3F40               	moviw [0]fsr1
 12634  15D5  00A5               	movwf	(??_Button_Deviation_Update+4)^(0+128)
 12635  15D6  3F41               	moviw [1]fsr1
 12636  15D7  00A6               	movwf	((??_Button_Deviation_Update+4)^(0+128)+1)
 12637  15D8  0825               	movf	(??_Button_Deviation_Update+4)^(0+128),w
 12638  15D9  00A7               	movwf	(??_Button_Deviation_Update+6)^(0+128)
 12639  15DA  0826               	movf	(??_Button_Deviation_Update+5)^(0+128),w
 12640  15DB  00A8               	movwf	((??_Button_Deviation_Update+6)^(0+128)+1)
 12641  15DC  01A9               	clrf	((??_Button_Deviation_Update+6)^(0+128)+2)
 12642  15DD  01AA               	clrf	((??_Button_Deviation_Update+6)^(0+128)+3)
 12643  15DE  0821               	movf	??_Button_Deviation_Update^(0+128),w
 12644  15DF  02A7               	subwf	(??_Button_Deviation_Update+6)^(0+128),f
 12645  15E0  0822               	movf	(??_Button_Deviation_Update+1)^(0+128),w
 12646  15E1  3BA8               	subwfb	((??_Button_Deviation_Update+6)^(0+128)+1),f
 12647  15E2  0823               	movf	(??_Button_Deviation_Update+2)^(0+128),w
 12648  15E3  3BA9               	subwfb	((??_Button_Deviation_Update+6)^(0+128)+2),f
 12649  15E4  0824               	movf	(??_Button_Deviation_Update+3)^(0+128),w
 12650  15E5  3BAA               	subwfb	((??_Button_Deviation_Update+6)^(0+128)+3),f
 12651  15E6  082A               	movf	(??_Button_Deviation_Update+9)^(0+128),w
 12652  15E7  00AF               	movwf	(Button_Deviation_Update@deviation+3)^(0+128)
 12653  15E8  0829               	movf	(??_Button_Deviation_Update+8)^(0+128),w
 12654  15E9  00AE               	movwf	(Button_Deviation_Update@deviation+2)^(0+128)
 12655  15EA  0828               	movf	(??_Button_Deviation_Update+7)^(0+128),w
 12656  15EB  00AD               	movwf	(Button_Deviation_Update@deviation+1)^(0+128)
 12657  15EC  0827               	movf	(??_Button_Deviation_Update+6)^(0+128),w
 12658  15ED  00AC               	movwf	Button_Deviation_Update@deviation^(0+128)
 12659                           
 12660                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 12661  15EE  082C               	movf	Button_Deviation_Update@deviation^(0+128),w
 12662  15EF  00A1               	movwf	??_Button_Deviation_Update^(0+128)
 12663  15F0  082D               	movf	(Button_Deviation_Update@deviation+1)^(0+128),w
 12664  15F1  00A2               	movwf	(??_Button_Deviation_Update^(0+128)+1)
 12665  15F2  082E               	movf	(Button_Deviation_Update@deviation+2)^(0+128),w
 12666  15F3  00A3               	movwf	(??_Button_Deviation_Update^(0+128)+2)
 12667  15F4  082F               	movf	(Button_Deviation_Update@deviation+3)^(0+128),w
 12668  15F5  00A4               	movwf	(??_Button_Deviation_Update^(0+128)+3)
 12669  15F6  082B               	movf	Button_Deviation_Update@button^(0+128),w
 12670  15F7  3E0F               	addlw	15
 12671  15F8  0086               	movwf	6
 12672  15F9  3002               	movlw	2	; select bank4/5
 12673  15FA  0087               	movwf	7
 12674  15FB  0A01               	incf	1,w
 12675  15FC  2E01               	goto	u9210
 12676  15FD                     u9215:	
 12677  15FD  37A4               	asrf	(??_Button_Deviation_Update^(0+128)+3),f
 12678  15FE  0CA3               	rrf	(??_Button_Deviation_Update^(0+128)+2),f
 12679  15FF  0CA2               	rrf	(??_Button_Deviation_Update^(0+128)+1),f
 12680  1600  0CA1               	rrf	??_Button_Deviation_Update^(0+128),f
 12681  1601                     u9210:	
 12682  1601  0B89               	decfsz	9,f
 12683  1602  2DFD               	goto	u9215
 12684  1603  0824               	movf	(??_Button_Deviation_Update+3)^(0+128),w
 12685  1604  00AF               	movwf	(Button_Deviation_Update@deviation+3)^(0+128)
 12686  1605  0823               	movf	(??_Button_Deviation_Update+2)^(0+128),w
 12687  1606  00AE               	movwf	(Button_Deviation_Update@deviation+2)^(0+128)
 12688  1607  0822               	movf	(??_Button_Deviation_Update+1)^(0+128),w
 12689  1608  00AD               	movwf	(Button_Deviation_Update@deviation+1)^(0+128)
 12690  1609  0821               	movf	??_Button_Deviation_Update^(0+128),w
 12691  160A  00AC               	movwf	Button_Deviation_Update@deviation^(0+128)
 12692                           
 12693                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 12694  160B  1BAF               	btfsc	(Button_Deviation_Update@deviation+3)^(0+128),7
 12695  160C  2E22               	goto	l7902
 12696  160D  082F               	movf	(Button_Deviation_Update@deviation+3)^(0+128),w
 12697  160E  1D03               	btfss	3,2
 12698  160F  2E1A               	goto	l7900
 12699  1610  082E               	movf	(Button_Deviation_Update@deviation+2)^(0+128),w
 12700  1611  1D03               	btfss	3,2
 12701  1612  2E1A               	goto	l7900
 12702  1613  082D               	movf	(Button_Deviation_Update@deviation+1)^(0+128),w
 12703  1614  1D03               	btfss	3,2
 12704  1615  2E1A               	goto	l7900
 12705  1616  3080               	movlw	128
 12706  1617  022C               	subwf	Button_Deviation_Update@deviation^(0+128),w
 12707  1618  1C03               	btfss	3,0
 12708  1619  2E22               	goto	l7902
 12709  161A                     l7900:	
 12710                           
 12711                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 12712  161A  3000               	movlw	0
 12713  161B  00AF               	movwf	(Button_Deviation_Update@deviation+3)^(0+128)
 12714  161C  3000               	movlw	0
 12715  161D  00AE               	movwf	(Button_Deviation_Update@deviation+2)^(0+128)
 12716  161E  3000               	movlw	0
 12717  161F  00AD               	movwf	(Button_Deviation_Update@deviation+1)^(0+128)
 12718  1620  307F               	movlw	127
 12719  1621  00AC               	movwf	Button_Deviation_Update@deviation^(0+128)
 12720  1622                     l7902:	
 12721                           
 12722                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 12723  1622  1FAF               	btfss	(Button_Deviation_Update@deviation+3)^(0+128),7
 12724  1623  2E36               	goto	l7906
 12725  1624  3080               	movlw	128
 12726  1625  022C               	subwf	Button_Deviation_Update@deviation^(0+128),w
 12727  1626  30FF               	movlw	255
 12728  1627  3B2D               	subwfb	(Button_Deviation_Update@deviation+1)^(0+128),w
 12729  1628  30FF               	movlw	255
 12730  1629  3B2E               	subwfb	(Button_Deviation_Update@deviation+2)^(0+128),w
 12731  162A  30FF               	movlw	255
 12732  162B  3B2F               	subwfb	(Button_Deviation_Update@deviation+3)^(0+128),w
 12733  162C  1803               	btfsc	3,0
 12734  162D  2E36               	goto	l7906
 12735                           
 12736                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 12737  162E  30FF               	movlw	255
 12738  162F  00AF               	movwf	(Button_Deviation_Update@deviation+3)^(0+128)
 12739  1630  30FF               	movlw	255
 12740  1631  00AE               	movwf	(Button_Deviation_Update@deviation+2)^(0+128)
 12741  1632  30FF               	movlw	255
 12742  1633  00AD               	movwf	(Button_Deviation_Update@deviation+1)^(0+128)
 12743  1634  3080               	movlw	128
 12744  1635  00AC               	movwf	Button_Deviation_Update@deviation^(0+128)
 12745  1636                     l7906:	
 12746                           
 12747                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 12748  1636  082C               	movf	Button_Deviation_Update@deviation^(0+128),w
 12749  1637  00A1               	movwf	??_Button_Deviation_Update^(0+128)
 12750  1638  082B               	movf	Button_Deviation_Update@button^(0+128),w
 12751  1639  3E09               	addlw	9
 12752  163A  0086               	movwf	6
 12753  163B  3002               	movlw	2	; select bank4/5
 12754  163C  0087               	movwf	7
 12755  163D  0821               	movf	??_Button_Deviation_Update^(0+128),w
 12756  163E  0081               	movwf	1
 12757  163F  0008               	return
 12758  1640                     __end_of_Button_Deviation_Update:	
 12759                           
 12760                           	psect	text74
 12761  1A3A                     __ptext74:	
 12762 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 12763 ;; Defined at:
 12764 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12765 ;; Parameters:    Size  Location     Type
 12766 ;;  callback        2    1[BANK1 ] PTR FTN(enum E3069,)void
 12767 ;;		 -> myButtonPressedCallback(1), 
 12768 ;; Auto vars:     Size  Location     Type
 12769 ;;		None
 12770 ;; Return value:  Size  Location     Type
 12771 ;;                  1    wreg      void 
 12772 ;; Registers used:
 12773 ;;		wreg
 12774 ;; Tracked objects:
 12775 ;;		On entry : 0/0
 12776 ;;		On exit  : 0/0
 12777 ;;		Unchanged: 0/0
 12778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12779 ;;      Params:         0       0       2       0       0       0       0       0
 12780 ;;      Locals:         0       0       0       0       0       0       0       0
 12781 ;;      Temps:          0       0       0       0       0       0       0       0
 12782 ;;      Totals:         0       0       2       0       0       0       0       0
 12783 ;;Total ram usage:        2 bytes
 12784 ;; Hardware stack levels used:    1
 12785 ;; Hardware stack levels required when called:   12
 12786 ;; This function calls:
 12787 ;;		Nothing
 12788 ;; This function is called by:
 12789 ;;		_main
 12790 ;; This function uses a non-reentrant model
 12791 ;;
 12792                           
 12793                           
 12794                           ;psect for function _MTOUCH_Button_SetPressedCallback
 12795  1A3A                     _MTOUCH_Button_SetPressedCallback:	
 12796                           
 12797                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 12798                           
 12799                           ;incstack = 0
 12800                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 12801  1A3A  0021               	movlb	1	; select bank1
 12802  1A3B  0822               	movf	(MTOUCH_Button_SetPressedCallback@callback+1)^(0+128),w
 12803  1A3C  0022               	movlb	2	; select bank2
 12804  1A3D  00E9               	movwf	(_callback_pressed+1)^(0+256)
 12805  1A3E  0021               	movlb	1	; select bank1
 12806  1A3F  0821               	movf	MTOUCH_Button_SetPressedCallback@callback^(0+128),w
 12807  1A40  0022               	movlb	2	; select bank2
 12808  1A41  00E8               	movwf	_callback_pressed^(0+256)
 12809  1A42  0008               	return
 12810  1A43                     __end_of_MTOUCH_Button_SetPressedCallback:	
 12811                           
 12812                           	psect	text75
 12813  1A31                     __ptext75:	
 12814 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 12815 ;; Defined at:
 12816 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12817 ;; Parameters:    Size  Location     Type
 12818 ;;  callback        2    1[BANK1 ] PTR FTN(enum E3069,)void
 12819 ;;		 -> myButtonReleasedCallback(1), 
 12820 ;; Auto vars:     Size  Location     Type
 12821 ;;		None
 12822 ;; Return value:  Size  Location     Type
 12823 ;;                  1    wreg      void 
 12824 ;; Registers used:
 12825 ;;		wreg
 12826 ;; Tracked objects:
 12827 ;;		On entry : 0/0
 12828 ;;		On exit  : 0/0
 12829 ;;		Unchanged: 0/0
 12830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12831 ;;      Params:         0       0       2       0       0       0       0       0
 12832 ;;      Locals:         0       0       0       0       0       0       0       0
 12833 ;;      Temps:          0       0       0       0       0       0       0       0
 12834 ;;      Totals:         0       0       2       0       0       0       0       0
 12835 ;;Total ram usage:        2 bytes
 12836 ;; Hardware stack levels used:    1
 12837 ;; Hardware stack levels required when called:   12
 12838 ;; This function calls:
 12839 ;;		Nothing
 12840 ;; This function is called by:
 12841 ;;		_main
 12842 ;; This function uses a non-reentrant model
 12843 ;;
 12844                           
 12845                           
 12846                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 12847  1A31                     _MTOUCH_Button_SetNotPressedCallback:	
 12848                           
 12849                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 12850                           
 12851                           ;incstack = 0
 12852                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 12853  1A31  0021               	movlb	1	; select bank1
 12854  1A32  0822               	movf	(MTOUCH_Button_SetNotPressedCallback@callback+1)^(0+128),w
 12855  1A33  0022               	movlb	2	; select bank2
 12856  1A34  00E7               	movwf	(_callback_notPressed+1)^(0+256)
 12857  1A35  0021               	movlb	1	; select bank1
 12858  1A36  0821               	movf	MTOUCH_Button_SetNotPressedCallback@callback^(0+128),w
 12859  1A37  0022               	movlb	2	; select bank2
 12860  1A38  00E6               	movwf	_callback_notPressed^(0+256)
 12861  1A39  0008               	return
 12862  1A3A                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 12863                           
 12864                           	psect	text76
 12865  19E3                     __ptext76:	
 12866 ;; *************** function _LED_EN *****************
 12867 ;; Defined at:
 12868 ;;		line 10 in file "led.c"
 12869 ;; Parameters:    Size  Location     Type
 12870 ;;		None
 12871 ;; Auto vars:     Size  Location     Type
 12872 ;;		None
 12873 ;; Return value:  Size  Location     Type
 12874 ;;                  1    wreg      void 
 12875 ;; Registers used:
 12876 ;;		None
 12877 ;; Tracked objects:
 12878 ;;		On entry : 0/0
 12879 ;;		On exit  : 0/0
 12880 ;;		Unchanged: 0/0
 12881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12882 ;;      Params:         0       0       0       0       0       0       0       0
 12883 ;;      Locals:         0       0       0       0       0       0       0       0
 12884 ;;      Temps:          0       0       0       0       0       0       0       0
 12885 ;;      Totals:         0       0       0       0       0       0       0       0
 12886 ;;Total ram usage:        0 bytes
 12887 ;; Hardware stack levels used:    1
 12888 ;; Hardware stack levels required when called:   12
 12889 ;; This function calls:
 12890 ;;		Nothing
 12891 ;; This function is called by:
 12892 ;;		_main
 12893 ;; This function uses a non-reentrant model
 12894 ;;
 12895                           
 12896                           
 12897                           ;psect for function _LED_EN
 12898  19E3                     _LED_EN:	
 12899                           
 12900                           ;incstack = 0
 12901                           ; Regs used in _LED_EN: []
 12902                           ;led.c: 12:     do { LATAbits.LATA2 = 0; } while(0);
 12903  19E3  0022               	movlb	2	; select bank2
 12904  19E4  110C               	bcf	12,2	;volatile
 12905  19E5  0008               	return
 12906  19E6                     __end_of_LED_EN:	
 12907                           
 12908                           	psect	text77
 12909  19E0                     __ptext77:	
 12910 ;; *************** function _EUSART_is_rx_ready *****************
 12911 ;; Defined at:
 12912 ;;		line 124 in file "mcc_generated_files/eusart.c"
 12913 ;; Parameters:    Size  Location     Type
 12914 ;;		None
 12915 ;; Auto vars:     Size  Location     Type
 12916 ;;		None
 12917 ;; Return value:  Size  Location     Type
 12918 ;;                  1    wreg      unsigned char 
 12919 ;; Registers used:
 12920 ;;		wreg
 12921 ;; Tracked objects:
 12922 ;;		On entry : 0/0
 12923 ;;		On exit  : 0/0
 12924 ;;		Unchanged: 0/0
 12925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12926 ;;      Params:         0       0       0       0       0       0       0       0
 12927 ;;      Locals:         0       0       0       0       0       0       0       0
 12928 ;;      Temps:          0       0       0       0       0       0       0       0
 12929 ;;      Totals:         0       0       0       0       0       0       0       0
 12930 ;;Total ram usage:        0 bytes
 12931 ;; Hardware stack levels used:    1
 12932 ;; Hardware stack levels required when called:   12
 12933 ;; This function calls:
 12934 ;;		Nothing
 12935 ;; This function is called by:
 12936 ;;		_main
 12937 ;; This function uses a non-reentrant model
 12938 ;;
 12939                           
 12940                           
 12941                           ;psect for function _EUSART_is_rx_ready
 12942  19E0                     _EUSART_is_rx_ready:	
 12943                           
 12944                           ;mcc_generated_files/eusart.c: 126:     return eusartRxCount;
 12945                           
 12946                           ;incstack = 0
 12947                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 12948  19E0  0022               	movlb	2	; select bank2
 12949  19E1  083C               	movf	_eusartRxCount^(0+256),w	;volatile
 12950  19E2  0008               	return
 12951  19E3                     __end_of_EUSART_is_rx_ready:	
 12952                           
 12953                           	psect	text78
 12954  1E92                     __ptext78:	
 12955 ;; *************** function _EUSART_Read *****************
 12956 ;; Defined at:
 12957 ;;		line 138 in file "mcc_generated_files/eusart.c"
 12958 ;; Parameters:    Size  Location     Type
 12959 ;;		None
 12960 ;; Auto vars:     Size  Location     Type
 12961 ;;  readValue       1    2[BANK1 ] unsigned char 
 12962 ;; Return value:  Size  Location     Type
 12963 ;;                  1    wreg      unsigned char 
 12964 ;; Registers used:
 12965 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12966 ;; Tracked objects:
 12967 ;;		On entry : 0/0
 12968 ;;		On exit  : 0/0
 12969 ;;		Unchanged: 0/0
 12970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12971 ;;      Params:         0       0       0       0       0       0       0       0
 12972 ;;      Locals:         0       0       1       0       0       0       0       0
 12973 ;;      Temps:          0       0       1       0       0       0       0       0
 12974 ;;      Totals:         0       0       2       0       0       0       0       0
 12975 ;;Total ram usage:        2 bytes
 12976 ;; Hardware stack levels used:    1
 12977 ;; Hardware stack levels required when called:   12
 12978 ;; This function calls:
 12979 ;;		Nothing
 12980 ;; This function is called by:
 12981 ;;		_main
 12982 ;;		_getch
 12983 ;; This function uses a non-reentrant model
 12984 ;;
 12985                           
 12986                           
 12987                           ;psect for function _EUSART_Read
 12988  1E92                     _EUSART_Read:	
 12989  1E92                     l8284:	
 12990                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 12991                           
 12992                           ;incstack = 0
 12993                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12994                           
 12995                           
 12996                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 12997  1E92  0022               	movlb	2	; select bank2
 12998  1E93  083C               	movf	_eusartRxCount^(0+256),w	;volatile
 12999  1E94  1903               	btfsc	3,2
 13000  1E95  2E92               	goto	l8284
 13001                           
 13002                           ;mcc_generated_files/eusart.c: 146:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 13003  1E96  083D               	movf	_eusartRxTail^(0+256),w	;volatile
 13004  1E97  3EC1               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 13005  1E98  0086               	movwf	6
 13006  1E99  3001               	movlw	1	; select bank3/4
 13007  1E9A  0087               	movwf	7
 13008  1E9B  0801               	movf	1,w
 13009  1E9C  0021               	movlb	1	; select bank1
 13010  1E9D  00A1               	movwf	??_EUSART_Read^(0+128)
 13011  1E9E  0821               	movf	??_EUSART_Read^(0+128),w
 13012  1E9F  0022               	movlb	2	; select bank2
 13013  1EA0  00BB               	movwf	_eusartRxLastError^(0+256)	;volatile
 13014                           
 13015                           ;mcc_generated_files/eusart.c: 148:     readValue = eusartRxBuffer[eusartRxTail++];
 13016  1EA1  083D               	movf	_eusartRxTail^(0+256),w
 13017  1EA2  3EC9               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 13018  1EA3  0086               	movwf	6
 13019  1EA4  3001               	movlw	1	; select bank3/4
 13020  1EA5  0087               	movwf	7
 13021  1EA6  0801               	movf	1,w
 13022  1EA7  0021               	movlb	1	; select bank1
 13023  1EA8  00A1               	movwf	??_EUSART_Read^(0+128)
 13024  1EA9  0821               	movf	??_EUSART_Read^(0+128),w
 13025  1EAA  00A2               	movwf	EUSART_Read@readValue^(0+128)
 13026  1EAB  3001               	movlw	1
 13027  1EAC  00A1               	movwf	??_EUSART_Read^(0+128)
 13028  1EAD  0821               	movf	??_EUSART_Read^(0+128),w
 13029  1EAE  0022               	movlb	2	; select bank2
 13030  1EAF  07BD               	addwf	_eusartRxTail^(0+256),f	;volatile
 13031                           
 13032                           ;mcc_generated_files/eusart.c: 149:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 13033  1EB0  3008               	movlw	8
 13034  1EB1  023D               	subwf	_eusartRxTail^(0+256),w	;volatile
 13035  1EB2  1803               	btfsc	3,0
 13036                           
 13037                           ;mcc_generated_files/eusart.c: 150:     {;mcc_generated_files/eusart.c: 151:         eus
      +                          artRxTail = 0;
 13038  1EB3  01BD               	clrf	_eusartRxTail^(0+256)	;volatile
 13039                           
 13040                           ;mcc_generated_files/eusart.c: 153:     PIE1bits.RCIE = 0;
 13041  1EB4  0021               	movlb	1	; select bank1
 13042  1EB5  1291               	bcf	17,5	;volatile
 13043                           
 13044                           ;mcc_generated_files/eusart.c: 154:     eusartRxCount--;
 13045  1EB6  3001               	movlw	1
 13046  1EB7  0022               	movlb	2	; select bank2
 13047  1EB8  02BC               	subwf	_eusartRxCount^(0+256),f	;volatile
 13048                           
 13049                           ;mcc_generated_files/eusart.c: 155:     PIE1bits.RCIE = 1;
 13050  1EB9  0021               	movlb	1	; select bank1
 13051  1EBA  1691               	bsf	17,5	;volatile
 13052                           
 13053                           ;mcc_generated_files/eusart.c: 157:     return readValue;
 13054  1EBB  0822               	movf	EUSART_Read@readValue^(0+128),w
 13055  1EBC  0008               	return
 13056  1EBD                     __end_of_EUSART_Read:	
 13057                           
 13058                           	psect	text79
 13059  0B16                     __ptext79:	
 13060 ;; *************** function _DATA_PROCESS *****************
 13061 ;; Defined at:
 13062 ;;		line 344 in file "main.c"
 13063 ;; Parameters:    Size  Location     Type
 13064 ;;  x               1    wreg     unsigned char 
 13065 ;; Auto vars:     Size  Location     Type
 13066 ;;  x               1   14[BANK2 ] unsigned char 
 13067 ;; Return value:  Size  Location     Type
 13068 ;;                  1    wreg      void 
 13069 ;; Registers used:
 13070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13071 ;; Tracked objects:
 13072 ;;		On entry : 0/0
 13073 ;;		On exit  : 0/0
 13074 ;;		Unchanged: 0/0
 13075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13076 ;;      Params:         0       0       0       0       0       0       0       0
 13077 ;;      Locals:         0       0       0       1       0       0       0       0
 13078 ;;      Temps:          0       0       0       2       0       0       0       0
 13079 ;;      Totals:         0       0       0       3       0       0       0       0
 13080 ;;Total ram usage:        3 bytes
 13081 ;; Hardware stack levels used:    1
 13082 ;; Hardware stack levels required when called:   21
 13083 ;; This function calls:
 13084 ;;		_LED_PROCESS
 13085 ;;		_PROCESS_RELAY
 13086 ;;		_printf
 13087 ;;		_update_state
 13088 ;; This function is called by:
 13089 ;;		_main
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093                           
 13094                           ;psect for function _DATA_PROCESS
 13095  0B16                     _DATA_PROCESS:	
 13096                           
 13097                           ;incstack = 0
 13098 ;; hardware stack exceeded
 13099                           ; Regs used in _DATA_PROCESS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13100                           ;DATA_PROCESS@x stored from wreg
 13101  0B16  0022               	movlb	2	; select bank2
 13102  0B17  00CE               	movwf	DATA_PROCESS@x^(0+256)
 13103                           
 13104                           ;main.c: 344: void DATA_PROCESS(char x);main.c: 345: {;main.c: 346:     switch(x)
 13105  0B18  2BD0               	goto	l8500
 13106  0B19                     l8398:	
 13107                           
 13108                           ;main.c: 349:         {;main.c: 350:             LED_PROCESS(1,0,1); bt_status.BT_1_ON_O
      +                          FF = 0;
 13109  0B19  0021               	movlb	1	; select bank1
 13110  0B1A  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13111  0B1B  01A2               	clrf	LED_PROCESS@red^(0+128)
 13112  0B1C  0AA2               	incf	LED_PROCESS@red^(0+128),f
 13113  0B1D  3001               	movlw	1
 13114  0B1E  3192  2213  318B   	fcall	_LED_PROCESS
 13115  0B21  0022               	movlb	2	; select bank2
 13116  0B22  122E               	bcf	_bt_status^(0+256),4
 13117  0B23                     L18:	
 13118                           
 13119                           ;main.c: 351:             LED_PROCESS(2,0,1); bt_status.BT_2_ON_OFF = 0;
 13120  0B23  0021               	movlb	1	; select bank1
 13121  0B24  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13122  0B25  01A2               	clrf	LED_PROCESS@red^(0+128)
 13123  0B26  0AA2               	incf	LED_PROCESS@red^(0+128),f
 13124  0B27  3002               	movlw	2
 13125  0B28  3192  2213  318B   	fcall	_LED_PROCESS
 13126  0B2B  0022               	movlb	2	; select bank2
 13127  0B2C  12AE               	bcf	_bt_status^(0+256),5
 13128  0B2D                     L14:	
 13129                           
 13130                           ;main.c: 352:             LED_PROCESS(3,0,1); bt_status.BT_3_ON_OFF = 0;
 13131  0B2D  0021               	movlb	1	; select bank1
 13132  0B2E  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13133  0B2F  01A2               	clrf	LED_PROCESS@red^(0+128)
 13134  0B30  0AA2               	incf	LED_PROCESS@red^(0+128),f
 13135  0B31  3003               	movlw	3
 13136  0B32  3192  2213  318B   	fcall	_LED_PROCESS
 13137  0B35  0022               	movlb	2	; select bank2
 13138  0B36  132E               	bcf	_bt_status^(0+256),6
 13139  0B37                     L12:	
 13140                           
 13141                           ;main.c: 353:             PROCESS_RELAY(bt_status.BT_1_ON_OFF,bt_status.BT_2_ON_OFF,bt_s
      +                          tatus.BT_3_ON_OFF);
 13142  0B37  3000               	movlw	0
 13143  0B38  1AAE               	btfsc	_bt_status^(0+256),5
 13144  0B39  3001               	movlw	1
 13145  0B3A  0021               	movlb	1	; select bank1
 13146  0B3B  00A1               	movwf	PROCESS_RELAY@relay_2^(0+128)
 13147  0B3C  3000               	movlw	0
 13148  0B3D  0022               	movlb	2	; select bank2
 13149  0B3E  1B2E               	btfsc	_bt_status^(0+256),6
 13150  0B3F  3001               	movlw	1
 13151  0B40  0021               	movlb	1	; select bank1
 13152  0B41  00A2               	movwf	PROCESS_RELAY@relay_3^(0+128)
 13153  0B42  0022               	movlb	2	; select bank2
 13154  0B43  0E2E               	swapf	_bt_status^(0+256),w
 13155  0B44  3901               	andlw	1
 13156  0B45  319D  257D         	fcall	_PROCESS_RELAY
 13157  0B47                     l8408:	
 13158                           
 13159                           ;main.c: 354:             check_request = 0;
 13160  0B47  0022               	movlb	2	; select bank2
 13161  0B48  01B9               	clrf	_check_request^(0+256)	;volatile
 13162                           
 13163                           ;main.c: 355:             break;
 13164  0B49  0008               	return
 13165  0B4A                     l8410:	
 13166                           
 13167                           ;main.c: 358:         {;main.c: 359:             LED_PROCESS(1,0,1); bt_status.BT_1_ON_O
      +                          FF = 0;
 13168  0B4A  0021               	movlb	1	; select bank1
 13169  0B4B  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13170  0B4C  01A2               	clrf	LED_PROCESS@red^(0+128)
 13171  0B4D  0AA2               	incf	LED_PROCESS@red^(0+128),f
 13172  0B4E  3001               	movlw	1
 13173  0B4F  3192  2213  318B   	fcall	_LED_PROCESS
 13174  0B52  0022               	movlb	2	; select bank2
 13175  0B53  122E               	bcf	_bt_status^(0+256),4
 13176  0B54  2B80               	goto	L23
 13177  0B55                     l8422:	
 13178                           ;main.c: 362:             PROCESS_RELAY(bt_status.BT_1_ON_OFF,bt_status.BT_2_ON_OFF,bt_s
      +                          tatus.BT_3_ON_OFF);
 13179                           
 13180                           ;main.c: 361:             LED_PROCESS(3,1,0); bt_status.BT_3_ON_OFF = 1;
 13181                           
 13182                           ;main.c: 360:             LED_PROCESS(2,0,1); bt_status.BT_2_ON_OFF = 0;
 13183                           
 13184                           
 13185                           ;main.c: 367:         {;main.c: 368:             LED_PROCESS(1,0,1); bt_status.BT_1_ON_O
      +                          FF = 0;
 13186  0B55  0021               	movlb	1	; select bank1
 13187  0B56  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13188  0B57  01A2               	clrf	LED_PROCESS@red^(0+128)
 13189  0B58  0AA2               	incf	LED_PROCESS@red^(0+128),f
 13190  0B59  3001               	movlw	1
 13191  0B5A  3192  2213  318B   	fcall	_LED_PROCESS
 13192  0B5D  0022               	movlb	2	; select bank2
 13193  0B5E  122E               	bcf	_bt_status^(0+256),4
 13194  0B5F  2B95               	goto	L19
 13195  0B60                     l8434:	
 13196                           ;main.c: 371:             PROCESS_RELAY(bt_status.BT_1_ON_OFF,bt_status.BT_2_ON_OFF,bt_s
      +                          tatus.BT_3_ON_OFF);
 13197                           
 13198                           ;main.c: 370:             LED_PROCESS(3,0,1); bt_status.BT_3_ON_OFF = 0;
 13199                           
 13200                           ;main.c: 369:             LED_PROCESS(2,1,0); bt_status.BT_2_ON_OFF = 1;
 13201                           
 13202                           
 13203                           ;main.c: 376:         {;main.c: 377:             LED_PROCESS(1,0,1); bt_status.BT_1_ON_O
      +                          FF = 0;
 13204  0B60  0021               	movlb	1	; select bank1
 13205  0B61  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13206  0B62  01A2               	clrf	LED_PROCESS@red^(0+128)
 13207  0B63  0AA2               	incf	LED_PROCESS@red^(0+128),f
 13208  0B64  3001               	movlw	1
 13209  0B65  3192  2213  318B   	fcall	_LED_PROCESS
 13210  0B68  0022               	movlb	2	; select bank2
 13211  0B69  122E               	bcf	_bt_status^(0+256),4
 13212  0B6A  2BAA               	goto	L20
 13213  0B6B                     l8446:	
 13214                           ;main.c: 380:             PROCESS_RELAY(bt_status.BT_1_ON_OFF,bt_status.BT_2_ON_OFF,bt_s
      +                          tatus.BT_3_ON_OFF);
 13215                           
 13216                           ;main.c: 379:             LED_PROCESS(3,1,0); bt_status.BT_3_ON_OFF = 1;
 13217                           
 13218                           ;main.c: 378:             LED_PROCESS(2,1,0); bt_status.BT_2_ON_OFF = 1;
 13219                           
 13220                           
 13221                           ;main.c: 385:         {;main.c: 386:             LED_PROCESS(1,1,0); bt_status.BT_1_ON_O
      +                          FF = 1;
 13222  0B6B  0021               	movlb	1	; select bank1
 13223  0B6C  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13224  0B6D  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 13225  0B6E  01A2               	clrf	LED_PROCESS@red^(0+128)
 13226  0B6F  3001               	movlw	1
 13227  0B70  3192  2213  318B   	fcall	_LED_PROCESS
 13228  0B73  0022               	movlb	2	; select bank2
 13229  0B74  162E               	bsf	_bt_status^(0+256),4
 13230  0B75  2B23               	goto	L18
 13231  0B76                     l8458:	
 13232                           ;main.c: 389:             PROCESS_RELAY(bt_status.BT_1_ON_OFF,bt_status.BT_2_ON_OFF,bt_s
      +                          tatus.BT_3_ON_OFF);
 13233                           
 13234                           ;main.c: 388:             LED_PROCESS(3,0,1); bt_status.BT_3_ON_OFF = 0;
 13235                           
 13236                           ;main.c: 387:             LED_PROCESS(2,0,1); bt_status.BT_2_ON_OFF = 0;
 13237                           
 13238                           
 13239                           ;main.c: 394:         {;main.c: 395:             LED_PROCESS(1,1,0); bt_status.BT_1_ON_O
      +                          FF = 1;
 13240  0B76  0021               	movlb	1	; select bank1
 13241  0B77  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13242  0B78  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 13243  0B79  01A2               	clrf	LED_PROCESS@red^(0+128)
 13244  0B7A  3001               	movlw	1
 13245  0B7B  3192  2213  318B   	fcall	_LED_PROCESS
 13246  0B7E  0022               	movlb	2	; select bank2
 13247  0B7F  162E               	bsf	_bt_status^(0+256),4
 13248  0B80                     L23:	
 13249                           
 13250                           ;main.c: 396:             LED_PROCESS(2,0,1); bt_status.BT_2_ON_OFF = 0;
 13251  0B80  0021               	movlb	1	; select bank1
 13252  0B81  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13253  0B82  01A2               	clrf	LED_PROCESS@red^(0+128)
 13254  0B83  0AA2               	incf	LED_PROCESS@red^(0+128),f
 13255  0B84  3002               	movlw	2
 13256  0B85  3192  2213  318B   	fcall	_LED_PROCESS
 13257  0B88  0022               	movlb	2	; select bank2
 13258  0B89  12AE               	bcf	_bt_status^(0+256),5
 13259  0B8A  2BB4               	goto	L21
 13260  0B8B                     l8470:	
 13261                           ;main.c: 398:             PROCESS_RELAY(bt_status.BT_1_ON_OFF,bt_status.BT_2_ON_OFF,bt_s
      +                          tatus.BT_3_ON_OFF);
 13262                           
 13263                           ;main.c: 397:             LED_PROCESS(3,1,0); bt_status.BT_3_ON_OFF = 1;
 13264                           
 13265                           
 13266                           ;main.c: 403:         {;main.c: 404:             LED_PROCESS(1,1,0); bt_status.BT_1_ON_O
      +                          FF = 1;
 13267  0B8B  0021               	movlb	1	; select bank1
 13268  0B8C  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13269  0B8D  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 13270  0B8E  01A2               	clrf	LED_PROCESS@red^(0+128)
 13271  0B8F  3001               	movlw	1
 13272  0B90  3192  2213  318B   	fcall	_LED_PROCESS
 13273  0B93  0022               	movlb	2	; select bank2
 13274  0B94  162E               	bsf	_bt_status^(0+256),4
 13275  0B95                     L19:	
 13276                           
 13277                           ;main.c: 405:             LED_PROCESS(2,1,0); bt_status.BT_2_ON_OFF = 1;
 13278  0B95  0021               	movlb	1	; select bank1
 13279  0B96  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13280  0B97  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 13281  0B98  01A2               	clrf	LED_PROCESS@red^(0+128)
 13282  0B99  3002               	movlw	2
 13283  0B9A  3192  2213  318B   	fcall	_LED_PROCESS
 13284  0B9D  0022               	movlb	2	; select bank2
 13285  0B9E  16AE               	bsf	_bt_status^(0+256),5
 13286  0B9F  2B2D               	goto	L14
 13287  0BA0                     l8482:	
 13288                           ;main.c: 407:             PROCESS_RELAY(bt_status.BT_1_ON_OFF,bt_status.BT_2_ON_OFF,bt_s
      +                          tatus.BT_3_ON_OFF);
 13289                           
 13290                           ;main.c: 406:             LED_PROCESS(3,0,1); bt_status.BT_3_ON_OFF = 0;
 13291                           
 13292                           
 13293                           ;main.c: 412:         {;main.c: 413:             LED_PROCESS(1,1,0); bt_status.BT_1_ON_O
      +                          FF = 1;
 13294  0BA0  0021               	movlb	1	; select bank1
 13295  0BA1  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13296  0BA2  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 13297  0BA3  01A2               	clrf	LED_PROCESS@red^(0+128)
 13298  0BA4  3001               	movlw	1
 13299  0BA5  3192  2213  318B   	fcall	_LED_PROCESS
 13300  0BA8  0022               	movlb	2	; select bank2
 13301  0BA9  162E               	bsf	_bt_status^(0+256),4
 13302  0BAA                     L20:	
 13303                           
 13304                           ;main.c: 414:             LED_PROCESS(2,1,0); bt_status.BT_2_ON_OFF = 1;
 13305  0BAA  0021               	movlb	1	; select bank1
 13306  0BAB  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13307  0BAC  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 13308  0BAD  01A2               	clrf	LED_PROCESS@red^(0+128)
 13309  0BAE  3002               	movlw	2
 13310  0BAF  3192  2213  318B   	fcall	_LED_PROCESS
 13311  0BB2  0022               	movlb	2	; select bank2
 13312  0BB3  16AE               	bsf	_bt_status^(0+256),5
 13313  0BB4                     L21:	
 13314                           
 13315                           ;main.c: 415:             LED_PROCESS(3,1,0); bt_status.BT_3_ON_OFF = 1;
 13316  0BB4  0021               	movlb	1	; select bank1
 13317  0BB5  01A1               	clrf	LED_PROCESS@blue^(0+128)
 13318  0BB6  0AA1               	incf	LED_PROCESS@blue^(0+128),f
 13319  0BB7  01A2               	clrf	LED_PROCESS@red^(0+128)
 13320  0BB8  3003               	movlw	3
 13321  0BB9  3192  2213  318B   	fcall	_LED_PROCESS
 13322  0BBC  0022               	movlb	2	; select bank2
 13323  0BBD  172E               	bsf	_bt_status^(0+256),6
 13324  0BBE  2B37               	goto	L12
 13325  0BBF                     l8494:	
 13326                           ;main.c: 416:             PROCESS_RELAY(bt_status.BT_1_ON_OFF,bt_status.BT_2_ON_OFF,bt_s
      +                          tatus.BT_3_ON_OFF);
 13327                           
 13328                           
 13329                           ;main.c: 421:         {;main.c: 422:             printf("PIC%d",update_state());
 13330  0BBF  3047               	movlw	low (STR_4| (0+32768))
 13331  0BC0  00C5               	movwf	printf@fmt^(0+256)
 13332  0BC1  3098               	movlw	high (STR_4| (0+32768))
 13333  0BC2  00C6               	movwf	(printf@fmt^(0+256)+1)
 13334  0BC3  3194  24CA  318B   	fcall	_update_state
 13335  0BC6  0022               	movlb	2	; select bank2
 13336  0BC7  00CC               	movwf	??_DATA_PROCESS^(0+256)
 13337  0BC8  01CD               	clrf	(??_DATA_PROCESS^(0+256)+1)
 13338  0BC9  084C               	movf	??_DATA_PROCESS^(0+256),w
 13339  0BCA  00C7               	movwf	(?_printf^(0+256)+2)
 13340  0BCB  084D               	movf	(??_DATA_PROCESS+1)^(0+256),w
 13341  0BCC  00C8               	movwf	((?_printf+1)^(0+256)+2)
 13342  0BCD  319B  23AF         	fcall	_printf
 13343                           
 13344                           ;main.c: 423:             break;
 13345  0BCF  0008               	return
 13346  0BD0                     l8500:	
 13347  0BD0  084E               	movf	DATA_PROCESS@x^(0+256),w
 13348  0BD1  00CC               	movwf	??_DATA_PROCESS^(0+256)
 13349  0BD2  01CD               	clrf	(??_DATA_PROCESS^(0+256)+1)
 13350                           
 13351                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13352                           ; Switch size 1, requested type "simple"
 13353                           ; Number of cases is 1, Range of values is 0 to 0
 13354                           ; switch strategies available:
 13355                           ; Name         Instructions Cycles
 13356                           ; simple_byte            4     3 (average)
 13357                           ; direct_byte            8     6 (fixed)
 13358                           ; jumptable            260     6 (fixed)
 13359                           ;	Chosen strategy is simple_byte
 13360  0BD3  084D               	movf	(??_DATA_PROCESS+1)^(0+256),w
 13361  0BD4  3A00               	xorlw	0	; case 0
 13362  0BD5  1903               	skipnz
 13363  0BD6  2BD8               	goto	l8958
 13364  0BD7  2B47               	goto	l8408
 13365  0BD8                     l8958:	
 13366                           
 13367                           ; Switch size 1, requested type "simple"
 13368                           ; Number of cases is 9, Range of values is 48 to 85
 13369                           ; switch strategies available:
 13370                           ; Name         Instructions Cycles
 13371                           ; simple_byte           28    15 (average)
 13372                           ; direct_byte           85     9 (fixed)
 13373                           ; jumptable            263     9 (fixed)
 13374                           ;	Chosen strategy is simple_byte
 13375  0BD8  084C               	movf	??_DATA_PROCESS^(0+256),w
 13376  0BD9  3A30               	xorlw	48	; case 48
 13377  0BDA  1903               	skipnz
 13378  0BDB  2B19               	goto	l8398
 13379  0BDC  3A01               	xorlw	1	; case 49
 13380  0BDD  1903               	skipnz
 13381  0BDE  2B4A               	goto	l8410
 13382  0BDF  3A03               	xorlw	3	; case 50
 13383  0BE0  1903               	skipnz
 13384  0BE1  2B55               	goto	l8422
 13385  0BE2  3A01               	xorlw	1	; case 51
 13386  0BE3  1903               	skipnz
 13387  0BE4  2B60               	goto	l8434
 13388  0BE5  3A07               	xorlw	7	; case 52
 13389  0BE6  1903               	skipnz
 13390  0BE7  2B6B               	goto	l8446
 13391  0BE8  3A01               	xorlw	1	; case 53
 13392  0BE9  1903               	skipnz
 13393  0BEA  2B76               	goto	l8458
 13394  0BEB  3A03               	xorlw	3	; case 54
 13395  0BEC  1903               	skipnz
 13396  0BED  2B8B               	goto	l8470
 13397  0BEE  3A01               	xorlw	1	; case 55
 13398  0BEF  1903               	skipnz
 13399  0BF0  2BA0               	goto	l8482
 13400  0BF1  3A62               	xorlw	98	; case 85
 13401  0BF2  1903               	skipnz
 13402  0BF3  2BBF               	goto	l8494
 13403  0BF4  2B47               	goto	l8408
 13404  0BF5  0008               	return
 13405  0BF6                     __end_of_DATA_PROCESS:	
 13406                           
 13407                           	psect	text80
 13408  14CA                     __ptext80:	
 13409 ;; *************** function _update_state *****************
 13410 ;; Defined at:
 13411 ;;		line 313 in file "main.c"
 13412 ;; Parameters:    Size  Location     Type
 13413 ;;		None
 13414 ;; Auto vars:     Size  Location     Type
 13415 ;;  state           1    2[BANK1 ] unsigned char 
 13416 ;; Return value:  Size  Location     Type
 13417 ;;                  1    wreg      unsigned char 
 13418 ;; Registers used:
 13419 ;;		wreg, status,2
 13420 ;; Tracked objects:
 13421 ;;		On entry : 0/0
 13422 ;;		On exit  : 0/0
 13423 ;;		Unchanged: 0/0
 13424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13425 ;;      Params:         0       0       0       0       0       0       0       0
 13426 ;;      Locals:         0       0       1       0       0       0       0       0
 13427 ;;      Temps:          0       0       1       0       0       0       0       0
 13428 ;;      Totals:         0       0       2       0       0       0       0       0
 13429 ;;Total ram usage:        2 bytes
 13430 ;; Hardware stack levels used:    1
 13431 ;; Hardware stack levels required when called:   12
 13432 ;; This function calls:
 13433 ;;		Nothing
 13434 ;; This function is called by:
 13435 ;;		_myButtonReleasedCallback
 13436 ;;		_DATA_PROCESS
 13437 ;; This function uses a non-reentrant model
 13438 ;;
 13439                           
 13440                           
 13441                           ;psect for function _update_state
 13442  14CA                     _update_state:	
 13443                           
 13444                           ;main.c: 316:     bt_status.BT_1 = bt_status.BT_1_ON_OFF;
 13445                           
 13446                           ;incstack = 0
 13447 ;; hardware stack exceeded
 13448                           ; Regs used in _update_state: [wreg+status,2]
 13449  14CA  0022               	movlb	2	; select bank2
 13450  14CB  1E2E               	btfss	_bt_status^(0+256),4
 13451  14CC  2CD0               	goto	u8400
 13452  14CD  0022               	movlb	2	; select bank2
 13453  14CE  14AE               	bsf	_bt_status^(0+256),1
 13454  14CF  2CD2               	goto	u8414
 13455  14D0                     u8400:	
 13456  14D0  0022               	movlb	2	; select bank2
 13457  14D1  10AE               	bcf	_bt_status^(0+256),1
 13458  14D2                     u8414:	
 13459                           
 13460                           ;main.c: 317:     bt_status.BT_2 = bt_status.BT_2_ON_OFF;
 13461  14D2  1EAE               	btfss	_bt_status^(0+256),5
 13462  14D3  2CD7               	goto	u8420
 13463  14D4  0022               	movlb	2	; select bank2
 13464  14D5  152E               	bsf	_bt_status^(0+256),2
 13465  14D6  2CD9               	goto	u8434
 13466  14D7                     u8420:	
 13467  14D7  0022               	movlb	2	; select bank2
 13468  14D8  112E               	bcf	_bt_status^(0+256),2
 13469  14D9                     u8434:	
 13470                           
 13471                           ;main.c: 318:     bt_status.BT_3 = bt_status.BT_3_ON_OFF;
 13472  14D9  1F2E               	btfss	_bt_status^(0+256),6
 13473  14DA  2CDE               	goto	u8440
 13474  14DB  0022               	movlb	2	; select bank2
 13475  14DC  15AE               	bsf	_bt_status^(0+256),3
 13476  14DD  2CE0               	goto	u8454
 13477  14DE                     u8440:	
 13478  14DE  0022               	movlb	2	; select bank2
 13479  14DF  11AE               	bcf	_bt_status^(0+256),3
 13480  14E0                     u8454:	
 13481                           
 13482                           ;main.c: 320:     uint8_t state;;main.c: 321:     if(bt_status.BT_1==0&&bt_status.BT_2==
      +                          0&&bt_status.BT_3==0) state = 0;
 13483  14E0  1CAE               	btfss	_bt_status^(0+256),1
 13484  14E1  192E               	btfsc	_bt_status^(0+256),2
 13485  14E2  2CE7               	goto	l7532
 13486  14E3  19AE               	btfsc	_bt_status^(0+256),3
 13487  14E4  2CE7               	goto	l7532
 13488  14E5  0021               	movlb	1	; select bank1
 13489  14E6  01A2               	clrf	update_state@state^(0+128)
 13490  14E7                     l7532:	
 13491                           
 13492                           ;main.c: 322:     if(bt_status.BT_1==0&&bt_status.BT_2==0&&bt_status.BT_3==1) state = 1;
 13493  14E7  0022               	movlb	2	; select bank2
 13494  14E8  1CAE               	btfss	_bt_status^(0+256),1
 13495  14E9  192E               	btfsc	_bt_status^(0+256),2
 13496  14EA  2CF0               	goto	l1161
 13497  14EB  1DAE               	btfss	_bt_status^(0+256),3
 13498  14EC  2CF0               	goto	l1161
 13499  14ED  0021               	movlb	1	; select bank1
 13500  14EE  01A2               	clrf	update_state@state^(0+128)
 13501  14EF  0AA2               	incf	update_state@state^(0+128),f
 13502  14F0                     l1161:	
 13503                           
 13504                           ;main.c: 323:     if(bt_status.BT_1==0&&bt_status.BT_2==1&&bt_status.BT_3==0) state = 2;
 13505  14F0  0022               	movlb	2	; select bank2
 13506  14F1  1CAE               	btfss	_bt_status^(0+256),1
 13507  14F2  1D2E               	btfss	_bt_status^(0+256),2
 13508  14F3  2CFB               	goto	l7546
 13509  14F4  19AE               	btfsc	_bt_status^(0+256),3
 13510  14F5  2CFB               	goto	l7546
 13511  14F6  3002               	movlw	2
 13512  14F7  0021               	movlb	1	; select bank1
 13513  14F8  00A1               	movwf	??_update_state^(0+128)
 13514  14F9  0821               	movf	??_update_state^(0+128),w
 13515  14FA  00A2               	movwf	update_state@state^(0+128)
 13516  14FB                     l7546:	
 13517                           
 13518                           ;main.c: 324:     if(bt_status.BT_1==0&&bt_status.BT_2==1&&bt_status.BT_3==1) state = 3;
 13519  14FB  0022               	movlb	2	; select bank2
 13520  14FC  1CAE               	btfss	_bt_status^(0+256),1
 13521  14FD  1D2E               	btfss	_bt_status^(0+256),2
 13522  14FE  2D06               	goto	l7554
 13523  14FF  1DAE               	btfss	_bt_status^(0+256),3
 13524  1500  2D06               	goto	l7554
 13525  1501  3003               	movlw	3
 13526  1502  0021               	movlb	1	; select bank1
 13527  1503  00A1               	movwf	??_update_state^(0+128)
 13528  1504  0821               	movf	??_update_state^(0+128),w
 13529  1505  00A2               	movwf	update_state@state^(0+128)
 13530  1506                     l7554:	
 13531                           
 13532                           ;main.c: 325:     if(bt_status.BT_1==1&&bt_status.BT_2==0&&bt_status.BT_3==0) state = 4;
 13533  1506  0022               	movlb	2	; select bank2
 13534  1507  18AE               	btfsc	_bt_status^(0+256),1
 13535  1508  192E               	btfsc	_bt_status^(0+256),2
 13536  1509  2D11               	goto	l7562
 13537  150A  19AE               	btfsc	_bt_status^(0+256),3
 13538  150B  2D11               	goto	l7562
 13539  150C  3004               	movlw	4
 13540  150D  0021               	movlb	1	; select bank1
 13541  150E  00A1               	movwf	??_update_state^(0+128)
 13542  150F  0821               	movf	??_update_state^(0+128),w
 13543  1510  00A2               	movwf	update_state@state^(0+128)
 13544  1511                     l7562:	
 13545                           
 13546                           ;main.c: 326:     if(bt_status.BT_1==1&&bt_status.BT_2==0&&bt_status.BT_3==1) state = 5;
 13547  1511  0022               	movlb	2	; select bank2
 13548  1512  18AE               	btfsc	_bt_status^(0+256),1
 13549  1513  192E               	btfsc	_bt_status^(0+256),2
 13550  1514  2D1C               	goto	l7570
 13551  1515  1DAE               	btfss	_bt_status^(0+256),3
 13552  1516  2D1C               	goto	l7570
 13553  1517  3005               	movlw	5
 13554  1518  0021               	movlb	1	; select bank1
 13555  1519  00A1               	movwf	??_update_state^(0+128)
 13556  151A  0821               	movf	??_update_state^(0+128),w
 13557  151B  00A2               	movwf	update_state@state^(0+128)
 13558  151C                     l7570:	
 13559                           
 13560                           ;main.c: 327:     if(bt_status.BT_1==1&&bt_status.BT_2==1&&bt_status.BT_3==0) state = 6;
 13561  151C  0022               	movlb	2	; select bank2
 13562  151D  18AE               	btfsc	_bt_status^(0+256),1
 13563  151E  1D2E               	btfss	_bt_status^(0+256),2
 13564  151F  2D27               	goto	l7578
 13565  1520  19AE               	btfsc	_bt_status^(0+256),3
 13566  1521  2D27               	goto	l7578
 13567  1522  3006               	movlw	6
 13568  1523  0021               	movlb	1	; select bank1
 13569  1524  00A1               	movwf	??_update_state^(0+128)
 13570  1525  0821               	movf	??_update_state^(0+128),w
 13571  1526  00A2               	movwf	update_state@state^(0+128)
 13572  1527                     l7578:	
 13573                           
 13574                           ;main.c: 328:     if(bt_status.BT_1==1&&bt_status.BT_2==1&&bt_status.BT_3==1) state = 7 
      +                          ;
 13575  1527  0022               	movlb	2	; select bank2
 13576  1528  18AE               	btfsc	_bt_status^(0+256),1
 13577  1529  1D2E               	btfss	_bt_status^(0+256),2
 13578  152A  2D32               	goto	l1167
 13579  152B  1DAE               	btfss	_bt_status^(0+256),3
 13580  152C  2D32               	goto	l1167
 13581  152D  3007               	movlw	7
 13582  152E  0021               	movlb	1	; select bank1
 13583  152F  00A1               	movwf	??_update_state^(0+128)
 13584  1530  0821               	movf	??_update_state^(0+128),w
 13585  1531  00A2               	movwf	update_state@state^(0+128)
 13586  1532                     l1167:	
 13587                           
 13588                           ;main.c: 329:     return state;
 13589  1532  0021               	movlb	1	; select bank1
 13590  1533  0822               	movf	update_state@state^(0+128),w
 13591  1534  0008               	return
 13592  1535                     __end_of_update_state:	
 13593                           
 13594                           	psect	text81
 13595  1BAF                     __ptext81:	
 13596 ;; *************** function _printf *****************
 13597 ;; Defined at:
 13598 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;  fmt             2    5[BANK2 ] PTR const unsigned char 
 13601 ;;		 -> STR_5(6), STR_4(6), STR_3(9), STR_2(3), 
 13602 ;;		 -> STR_1(14), 
 13603 ;; Auto vars:     Size  Location     Type
 13604 ;;  ret             2    0        int 
 13605 ;;  ap              1   11[BANK2 ] PTR void [1]
 13606 ;;		 -> ?_printf(2), 
 13607 ;; Return value:  Size  Location     Type
 13608 ;;                  2    5[BANK2 ] int 
 13609 ;; Registers used:
 13610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13611 ;; Tracked objects:
 13612 ;;		On entry : 0/0
 13613 ;;		On exit  : 0/0
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13616 ;;      Params:         0       0       0       4       0       0       0       0
 13617 ;;      Locals:         0       0       0       3       0       0       0       0
 13618 ;;      Temps:          0       0       1       0       0       0       0       0
 13619 ;;      Totals:         0       0       1       7       0       0       0       0
 13620 ;;Total ram usage:        8 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; Hardware stack levels required when called:   20
 13623 ;; This function calls:
 13624 ;;		_vfprintf
 13625 ;; This function is called by:
 13626 ;;		_check_message
 13627 ;;		_main
 13628 ;;		_myButtonReleasedCallback
 13629 ;;		_DATA_PROCESS
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           
 13634                           ;psect for function _printf
 13635  1BAF                     _printf:	
 13636                           
 13637                           ;incstack = 0
 13638 ;; hardware stack exceeded
 13639                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13640  1BAF  3047               	movlw	(low ((?_printf| (0+256)+2)))& (0+255)
 13641  1BB0  0021               	movlb	1	; select bank1
 13642  1BB1  00EE               	movwf	??_printf^(0+128)
 13643  1BB2  086E               	movf	??_printf^(0+128),w
 13644  1BB3  0022               	movlb	2	; select bank2
 13645  1BB4  00CB               	movwf	printf@ap^(0+256)
 13646  1BB5  0846               	movf	(printf@fmt+1)^(0+256),w
 13647  1BB6  0021               	movlb	1	; select bank1
 13648  1BB7  00EC               	movwf	(vfprintf@fmt+1)^(0+128)
 13649  1BB8  0022               	movlb	2	; select bank2
 13650  1BB9  0845               	movf	printf@fmt^(0+256),w
 13651  1BBA  0021               	movlb	1	; select bank1
 13652  1BBB  00EB               	movwf	vfprintf@fmt^(0+128)
 13653  1BBC  304B               	movlw	(low (printf@ap| (0+256)))& (0+255)
 13654  1BBD  00EE               	movwf	??_printf^(0+128)
 13655  1BBE  086E               	movf	??_printf^(0+128),w
 13656  1BBF  00ED               	movwf	vfprintf@ap^(0+128)
 13657  1BC0  3000               	movlw	0
 13658  1BC1  3190  208F         	fcall	_vfprintf
 13659  1BC3  0008               	return
 13660  1BC4                     __end_of_printf:	
 13661                           
 13662                           	psect	text82
 13663  108F                     __ptext82:	
 13664 ;; *************** function _vfprintf *****************
 13665 ;; Defined at:
 13666 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 13667 ;; Parameters:    Size  Location     Type
 13668 ;;  fp              1    wreg     PTR struct _IO_FILE
 13669 ;;		 -> NULL(0), 
 13670 ;;  fmt             2   75[BANK1 ] PTR const unsigned char 
 13671 ;;		 -> STR_5(6), STR_4(6), STR_3(9), STR_2(3), 
 13672 ;;		 -> STR_1(14), 
 13673 ;;  ap              1   77[BANK1 ] PTR PTR void 
 13674 ;;		 -> printf@ap(1), 
 13675 ;; Auto vars:     Size  Location     Type
 13676 ;;  fp              1    2[BANK2 ] PTR struct _IO_FILE
 13677 ;;		 -> NULL(0), 
 13678 ;;  cfmt            2    3[BANK2 ] PTR unsigned char 
 13679 ;;		 -> STR_5(6), STR_4(6), STR_3(9), STR_2(3), 
 13680 ;;		 -> STR_1(14), 
 13681 ;; Return value:  Size  Location     Type
 13682 ;;                  2   75[BANK1 ] int 
 13683 ;; Registers used:
 13684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13685 ;; Tracked objects:
 13686 ;;		On entry : 0/0
 13687 ;;		On exit  : 0/0
 13688 ;;		Unchanged: 0/0
 13689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13690 ;;      Params:         0       0       3       0       0       0       0       0
 13691 ;;      Locals:         0       0       0       3       0       0       0       0
 13692 ;;      Temps:          0       0       0       2       0       0       0       0
 13693 ;;      Totals:         0       0       3       5       0       0       0       0
 13694 ;;Total ram usage:        8 bytes
 13695 ;; Hardware stack levels used:    1
 13696 ;; Hardware stack levels required when called:   19
 13697 ;; This function calls:
 13698 ;;		_vfpfcnvrt
 13699 ;; This function is called by:
 13700 ;;		_printf
 13701 ;; This function uses a non-reentrant model
 13702 ;;
 13703                           
 13704                           
 13705                           ;psect for function _vfprintf
 13706  108F                     _vfprintf:	
 13707                           
 13708                           ;incstack = 0
 13709 ;; hardware stack exceeded
 13710                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13711                           ;vfprintf@fp stored from wreg
 13712  108F  0022               	movlb	2	; select bank2
 13713  1090  00C2               	movwf	vfprintf@fp^(0+256)
 13714                           
 13715                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 13716  1091  0021               	movlb	1	; select bank1
 13717  1092  086C               	movf	(vfprintf@fmt+1)^(0+128),w
 13718  1093  0022               	movlb	2	; select bank2
 13719  1094  00C4               	movwf	(vfprintf@cfmt+1)^(0+256)
 13720  1095  0021               	movlb	1	; select bank1
 13721  1096  086B               	movf	vfprintf@fmt^(0+128),w
 13722  1097  0022               	movlb	2	; select bank2
 13723  1098  00C3               	movwf	vfprintf@cfmt^(0+256)
 13724                           
 13725                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 13726  1099  01A4               	clrf	_nout^(0+256)
 13727  109A  01A5               	clrf	(_nout+1)^(0+256)
 13728  109B                     l7234:	
 13729                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 13730                           
 13731                           
 13732                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 13733  109B  0843               	movf	vfprintf@cfmt^(0+256),w
 13734  109C  0084               	movwf	4
 13735  109D  0844               	movf	(vfprintf@cfmt+1)^(0+256),w
 13736  109E  0085               	movwf	5
 13737  109F  0012               	moviw fsr0++
 13738  10A0  1903               	btfsc	3,2
 13739  10A1  28BB               	goto	l7236
 13740                           
 13741                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 13742  10A2  3043               	movlw	(low (vfprintf@cfmt| (0+256)))& (0+255)
 13743  10A3  00C0               	movwf	??_vfprintf^(0+256)
 13744  10A4  0840               	movf	??_vfprintf^(0+256),w
 13745  10A5  0021               	movlb	1	; select bank1
 13746  10A6  00DA               	movwf	vfpfcnvrt@fmt^(0+128)
 13747  10A7  086D               	movf	vfprintf@ap^(0+128),w
 13748  10A8  0022               	movlb	2	; select bank2
 13749  10A9  00C1               	movwf	(??_vfprintf+1)^(0+256)
 13750  10AA  0841               	movf	(??_vfprintf+1)^(0+256),w
 13751  10AB  0021               	movlb	1	; select bank1
 13752  10AC  00DB               	movwf	vfpfcnvrt@ap^(0+128)
 13753  10AD  0022               	movlb	2	; select bank2
 13754  10AE  0842               	movf	vfprintf@fp^(0+256),w
 13755  10AF  318E  26F0  3190   	fcall	_vfpfcnvrt
 13756  10B2  0021               	movlb	1	; select bank1
 13757  10B3  085A               	movf	?_vfpfcnvrt^(0+128),w
 13758  10B4  0022               	movlb	2	; select bank2
 13759  10B5  07A4               	addwf	_nout^(0+256),f
 13760  10B6  0021               	movlb	1	; select bank1
 13761  10B7  085B               	movf	(?_vfpfcnvrt+1)^(0+128),w
 13762  10B8  0022               	movlb	2	; select bank2
 13763  10B9  3DA5               	addwfc	(_nout+1)^(0+256),f
 13764  10BA  289B               	goto	l7234
 13765  10BB                     l7236:	
 13766                           
 13767                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 13768  10BB  0825               	movf	(_nout+1)^(0+256),w
 13769  10BC  0021               	movlb	1	; select bank1
 13770  10BD  00EC               	movwf	(?_vfprintf+1)^(0+128)
 13771  10BE  0022               	movlb	2	; select bank2
 13772  10BF  0824               	movf	_nout^(0+256),w
 13773  10C0  0021               	movlb	1	; select bank1
 13774  10C1  00EB               	movwf	?_vfprintf^(0+128)
 13775  10C2  0008               	return
 13776  10C3                     __end_of_vfprintf:	
 13777                           
 13778                           	psect	text83
 13779  0EF0                     __ptext83:	
 13780 ;; *************** function _vfpfcnvrt *****************
 13781 ;; Defined at:
 13782 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 13783 ;; Parameters:    Size  Location     Type
 13784 ;;  fp              1    wreg     PTR struct _IO_FILE
 13785 ;;		 -> NULL(0), 
 13786 ;;  fmt             1   58[BANK1 ] PTR PTR unsigned char 
 13787 ;;		 -> vfprintf@cfmt(2), 
 13788 ;;  ap              1   59[BANK1 ] PTR PTR void 
 13789 ;;		 -> printf@ap(1), 
 13790 ;; Auto vars:     Size  Location     Type
 13791 ;;  fp              1   74[BANK1 ] PTR struct _IO_FILE
 13792 ;;		 -> NULL(0), 
 13793 ;;  ll              8   65[BANK1 ] long long 
 13794 ;;  llu             8    0        unsigned long long 
 13795 ;;  f               4    0        unsigned long long 
 13796 ;;  ct              3    0        unsigned char [3]
 13797 ;;  vp              2    0        PTR void 
 13798 ;;  i               2    0        int 
 13799 ;;  done            2    0        int 
 13800 ;;  cp              2    0        PTR unsigned char 
 13801 ;;  c               1   73[BANK1 ] unsigned char 
 13802 ;; Return value:  Size  Location     Type
 13803 ;;                  2   58[BANK1 ] int 
 13804 ;; Registers used:
 13805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13811 ;;      Params:         0       0       2       0       0       0       0       0
 13812 ;;      Locals:         0       0      10       0       0       0       0       0
 13813 ;;      Temps:          0       0       5       0       0       0       0       0
 13814 ;;      Totals:         0       0      17       0       0       0       0       0
 13815 ;;Total ram usage:       17 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; Hardware stack levels required when called:   18
 13818 ;; This function calls:
 13819 ;;		_ctoa
 13820 ;;		_dtoa
 13821 ;;		_fputc
 13822 ;; This function is called by:
 13823 ;;		_vfprintf
 13824 ;; This function uses a non-reentrant model
 13825 ;;
 13826                           
 13827                           
 13828                           ;psect for function _vfpfcnvrt
 13829  0EF0                     _vfpfcnvrt:	
 13830                           
 13831                           ;incstack = 0
 13832 ;; hardware stack exceeded
 13833                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13834                           ;vfpfcnvrt@fp stored from wreg
 13835  0EF0  0021               	movlb	1	; select bank1
 13836  0EF1  00EA               	movwf	vfpfcnvrt@fp^(0+128)
 13837                           
 13838                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 13839  0EF2  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 13840  0EF3  0086               	movwf	6
 13841  0EF4  3001               	movlw	1	; select bank2/3
 13842  0EF5  0087               	movwf	7
 13843  0EF6  3F40               	moviw [0]fsr1
 13844  0EF7  00DC               	movwf	??_vfpfcnvrt^(0+128)
 13845  0EF8  3F41               	moviw [1]fsr1
 13846  0EF9  00DD               	movwf	(??_vfpfcnvrt^(0+128)+1)
 13847  0EFA  085C               	movf	??_vfpfcnvrt^(0+128),w
 13848  0EFB  0084               	movwf	4
 13849  0EFC  085D               	movf	(??_vfpfcnvrt+1)^(0+128),w
 13850  0EFD  0085               	movwf	5
 13851  0EFE  0012               	moviw fsr0++
 13852  0EFF  3A25               	xorlw	37
 13853  0F00  1D03               	btfss	3,2
 13854  0F01  2FDB               	goto	l7126
 13855                           
 13856                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 13857  0F02  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 13858  0F03  0086               	movwf	6
 13859  0F04  3001               	movlw	1	; select bank2/3
 13860  0F05  0087               	movwf	7
 13861  0F06  3001               	movlw	1
 13862  0F07  0781               	addwf	1,f
 13863  0F08  3141               	addfsr 1,1
 13864  0F09  1803               	skipnc
 13865  0F0A  0A81               	incf	1,f
 13866                           
 13867                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 13868  0F0B  0022               	movlb	2	; select bank2
 13869  0F0C  01A6               	clrf	_width^(0+256)
 13870  0F0D  01A7               	clrf	(_width+1)^(0+256)
 13871  0F0E  01AA               	clrf	_flags^(0+256)
 13872  0F0F  01AB               	clrf	(_flags+1)^(0+256)
 13873                           
 13874                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 13875  0F10  30FF               	movlw	255
 13876  0F11  00A8               	movwf	_prec^(0+256)
 13877  0F12  30FF               	movlw	255
 13878  0F13  00A9               	movwf	(_prec^(0+256)+1)
 13879                           
 13880                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
 13881  0F14  0021               	movlb	1	; select bank1
 13882  0F15  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 13883  0F16  0086               	movwf	6
 13884  0F17  3001               	movlw	1	; select bank2/3
 13885  0F18  0087               	movwf	7
 13886  0F19  3F40               	moviw [0]fsr1
 13887  0F1A  00DC               	movwf	??_vfpfcnvrt^(0+128)
 13888  0F1B  3F41               	moviw [1]fsr1
 13889  0F1C  00DD               	movwf	(??_vfpfcnvrt^(0+128)+1)
 13890  0F1D  085C               	movf	??_vfpfcnvrt^(0+128),w
 13891  0F1E  0084               	movwf	4
 13892  0F1F  085D               	movf	(??_vfpfcnvrt+1)^(0+128),w
 13893  0F20  0085               	movwf	5
 13894  0F21  0012               	moviw fsr0++
 13895  0F22  3A63               	xorlw	99
 13896  0F23  1D03               	btfss	3,2
 13897  0F24  2F49               	goto	l7098
 13898                           
 13899                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
 13900  0F25  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 13901  0F26  0086               	movwf	6
 13902  0F27  3001               	movlw	1	; select bank2/3
 13903  0F28  0087               	movwf	7
 13904  0F29  3001               	movlw	1
 13905  0F2A  0781               	addwf	1,f
 13906  0F2B  3141               	addfsr 1,1
 13907  0F2C  1803               	skipnc
 13908  0F2D  0A81               	incf	1,f
 13909                           
 13910                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
 13911  0F2E  085B               	movf	vfpfcnvrt@ap^(0+128),w
 13912  0F2F  0086               	movwf	6
 13913  0F30  3001               	movlw	1	; select bank2/3
 13914  0F31  0087               	movwf	7
 13915  0F32  0801               	movf	1,w
 13916  0F33  0084               	movwf	4
 13917  0F34  3001               	movlw	1	; select bank2/3
 13918  0F35  0085               	movwf	5
 13919  0F36  3002               	movlw	2
 13920  0F37  0781               	addwf	1,f
 13921  0F38  0800               	movf	0,w
 13922  0F39  00DC               	movwf	??_vfpfcnvrt^(0+128)
 13923  0F3A  085C               	movf	??_vfpfcnvrt^(0+128),w
 13924  0F3B  00E9               	movwf	vfpfcnvrt@c^(0+128)
 13925                           
 13926                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
 13927  0F3C  0869               	movf	vfpfcnvrt@c^(0+128),w
 13928  0F3D  00DC               	movwf	??_vfpfcnvrt^(0+128)
 13929  0F3E  085C               	movf	??_vfpfcnvrt^(0+128),w
 13930  0F3F  00BC               	movwf	ctoa@c^(0+128)
 13931  0F40  086A               	movf	vfpfcnvrt@fp^(0+128),w
 13932  0F41  3190  202C         	fcall	_ctoa
 13933  0F43  0021               	movlb	1	; select bank1
 13934  0F44  083D               	movf	(?_ctoa+1)^(0+128),w
 13935  0F45  00DB               	movwf	(?_vfpfcnvrt+1)^(0+128)
 13936  0F46  083C               	movf	?_ctoa^(0+128),w
 13937  0F47  00DA               	movwf	?_vfpfcnvrt^(0+128)
 13938  0F48  0008               	return
 13939  0F49                     l7098:	
 13940                           
 13941                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 13942  0F49  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 13943  0F4A  0086               	movwf	6
 13944  0F4B  3001               	movlw	1	; select bank2/3
 13945  0F4C  0087               	movwf	7
 13946  0F4D  3F40               	moviw [0]fsr1
 13947  0F4E  00DC               	movwf	??_vfpfcnvrt^(0+128)
 13948  0F4F  3F41               	moviw [1]fsr1
 13949  0F50  00DD               	movwf	(??_vfpfcnvrt^(0+128)+1)
 13950  0F51  085C               	movf	??_vfpfcnvrt^(0+128),w
 13951  0F52  0084               	movwf	4
 13952  0F53  085D               	movf	(??_vfpfcnvrt+1)^(0+128),w
 13953  0F54  0085               	movwf	5
 13954  0F55  0012               	moviw fsr0++
 13955  0F56  3A64               	xorlw	100
 13956  0F57  1903               	btfsc	3,2
 13957  0F58  2F69               	goto	l7102
 13958  0F59  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 13959  0F5A  0086               	movwf	6
 13960  0F5B  3001               	movlw	1	; select bank2/3
 13961  0F5C  0087               	movwf	7
 13962  0F5D  3F40               	moviw [0]fsr1
 13963  0F5E  00DC               	movwf	??_vfpfcnvrt^(0+128)
 13964  0F5F  3F41               	moviw [1]fsr1
 13965  0F60  00DD               	movwf	(??_vfpfcnvrt^(0+128)+1)
 13966  0F61  085C               	movf	??_vfpfcnvrt^(0+128),w
 13967  0F62  0084               	movwf	4
 13968  0F63  085D               	movf	(??_vfpfcnvrt+1)^(0+128),w
 13969  0F64  0085               	movwf	5
 13970  0F65  0012               	moviw fsr0++
 13971  0F66  3A69               	xorlw	105
 13972  0F67  1D03               	btfss	3,2
 13973  0F68  2FA6               	goto	l7110
 13974  0F69                     l7102:	
 13975                           
 13976                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
 13977  0F69  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 13978  0F6A  0086               	movwf	6
 13979  0F6B  3001               	movlw	1	; select bank2/3
 13980  0F6C  0087               	movwf	7
 13981  0F6D  3001               	movlw	1
 13982  0F6E  0781               	addwf	1,f
 13983  0F6F  3141               	addfsr 1,1
 13984  0F70  1803               	skipnc
 13985  0F71  0A81               	incf	1,f
 13986                           
 13987                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 13988  0F72  085B               	movf	vfpfcnvrt@ap^(0+128),w
 13989  0F73  0086               	movwf	6
 13990  0F74  3001               	movlw	1	; select bank2/3
 13991  0F75  0087               	movwf	7
 13992  0F76  0801               	movf	1,w
 13993  0F77  0084               	movwf	4
 13994  0F78  3001               	movlw	1	; select bank2/3
 13995  0F79  0085               	movwf	5
 13996  0F7A  3002               	movlw	2
 13997  0F7B  0781               	addwf	1,f
 13998  0F7C  3F00               	moviw [0]fsr0
 13999  0F7D  00DC               	movwf	??_vfpfcnvrt^(0+128)
 14000  0F7E  3F01               	moviw [1]fsr0
 14001  0F7F  00DD               	movwf	(??_vfpfcnvrt^(0+128)+1)
 14002  0F80  085C               	movf	??_vfpfcnvrt^(0+128),w
 14003  0F81  00E1               	movwf	vfpfcnvrt@ll^(0+128)
 14004  0F82  085D               	movf	(??_vfpfcnvrt+1)^(0+128),w
 14005  0F83  00E2               	movwf	(vfpfcnvrt@ll+1)^(0+128)
 14006  0F84  0D89               	rlf	9,f
 14007  0F85  3B89               	subwfb	9,f
 14008  0F86  0989               	comf	9,f
 14009  0F87  00E3               	movwf	(vfpfcnvrt@ll+2)^(0+128)
 14010  0F88  00E4               	movwf	(vfpfcnvrt@ll+3)^(0+128)
 14011  0F89  00E5               	movwf	(vfpfcnvrt@ll+4)^(0+128)
 14012  0F8A  00E6               	movwf	(vfpfcnvrt@ll+5)^(0+128)
 14013  0F8B  00E7               	movwf	(vfpfcnvrt@ll+6)^(0+128)
 14014  0F8C  00E8               	movwf	(vfpfcnvrt@ll+7)^(0+128)
 14015                           
 14016                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
 14017  0F8D  0861               	movf	vfpfcnvrt@ll^(0+128),w
 14018  0F8E  00BC               	movwf	dtoa@d^(0+128)
 14019  0F8F  0862               	movf	(vfpfcnvrt@ll+1)^(0+128),w
 14020  0F90  00BD               	movwf	(dtoa@d+1)^(0+128)
 14021  0F91  0863               	movf	(vfpfcnvrt@ll+2)^(0+128),w
 14022  0F92  00BE               	movwf	(dtoa@d+2)^(0+128)
 14023  0F93  0864               	movf	(vfpfcnvrt@ll+3)^(0+128),w
 14024  0F94  00BF               	movwf	(dtoa@d+3)^(0+128)
 14025  0F95  0865               	movf	(vfpfcnvrt@ll+4)^(0+128),w
 14026  0F96  00C0               	movwf	(dtoa@d+4)^(0+128)
 14027  0F97  0866               	movf	(vfpfcnvrt@ll+5)^(0+128),w
 14028  0F98  00C1               	movwf	(dtoa@d+5)^(0+128)
 14029  0F99  0867               	movf	(vfpfcnvrt@ll+6)^(0+128),w
 14030  0F9A  00C2               	movwf	(dtoa@d+6)^(0+128)
 14031  0F9B  0868               	movf	(vfpfcnvrt@ll+7)^(0+128),w
 14032  0F9C  00C3               	movwf	(dtoa@d+7)^(0+128)
 14033  0F9D  086A               	movf	vfpfcnvrt@fp^(0+128),w
 14034  0F9E  3184  24AC         	fcall	_dtoa
 14035  0FA0  0021               	movlb	1	; select bank1
 14036  0FA1  083D               	movf	(?_dtoa+1)^(0+128),w
 14037  0FA2  00DB               	movwf	(?_vfpfcnvrt+1)^(0+128)
 14038  0FA3  083C               	movf	?_dtoa^(0+128),w
 14039  0FA4  00DA               	movwf	?_vfpfcnvrt^(0+128)
 14040  0FA5  0008               	return
 14041  0FA6                     l7110:	
 14042                           
 14043                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 14044  0FA6  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 14045  0FA7  0086               	movwf	6
 14046  0FA8  3001               	movlw	1	; select bank2/3
 14047  0FA9  0087               	movwf	7
 14048  0FAA  3F40               	moviw [0]fsr1
 14049  0FAB  00DC               	movwf	??_vfpfcnvrt^(0+128)
 14050  0FAC  3F41               	moviw [1]fsr1
 14051  0FAD  00DD               	movwf	(??_vfpfcnvrt^(0+128)+1)
 14052  0FAE  085C               	movf	??_vfpfcnvrt^(0+128),w
 14053  0FAF  0084               	movwf	4
 14054  0FB0  085D               	movf	(??_vfpfcnvrt+1)^(0+128),w
 14055  0FB1  0085               	movwf	5
 14056  0FB2  0012               	moviw fsr0++
 14057  0FB3  3A25               	xorlw	37
 14058  0FB4  1D03               	btfss	3,2
 14059  0FB5  2FCF               	goto	l7120
 14060                           
 14061                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 14062  0FB6  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 14063  0FB7  0086               	movwf	6
 14064  0FB8  3001               	movlw	1	; select bank2/3
 14065  0FB9  0087               	movwf	7
 14066  0FBA  3001               	movlw	1
 14067  0FBB  0781               	addwf	1,f
 14068  0FBC  3141               	addfsr 1,1
 14069  0FBD  1803               	skipnc
 14070  0FBE  0A81               	incf	1,f
 14071                           
 14072                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 14073  0FBF  3025               	movlw	37
 14074  0FC0  00A3               	movwf	fputc@c^(0+128)
 14075  0FC1  3000               	movlw	0
 14076  0FC2  00A4               	movwf	(fputc@c^(0+128)+1)
 14077  0FC3  086A               	movf	vfpfcnvrt@fp^(0+128),w
 14078  0FC4  00DC               	movwf	??_vfpfcnvrt^(0+128)
 14079  0FC5  085C               	movf	??_vfpfcnvrt^(0+128),w
 14080  0FC6  00A5               	movwf	fputc@fp^(0+128)
 14081  0FC7  3191  212D         	fcall	_fputc
 14082  0FC9                     l7116:	
 14083                           
 14084                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 14085  0FC9  3001               	movlw	1
 14086  0FCA  0021               	movlb	1	; select bank1
 14087  0FCB  00DA               	movwf	?_vfpfcnvrt^(0+128)
 14088  0FCC  3000               	movlw	0
 14089  0FCD  00DB               	movwf	(?_vfpfcnvrt^(0+128)+1)
 14090  0FCE  0008               	return
 14091  0FCF                     l7120:	
 14092                           
 14093                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 14094  0FCF  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 14095  0FD0  0086               	movwf	6
 14096  0FD1  3001               	movlw	1	; select bank2/3
 14097  0FD2  0087               	movwf	7
 14098  0FD3  3001               	movlw	1
 14099  0FD4  0781               	addwf	1,f
 14100  0FD5  3141               	addfsr 1,1
 14101  0FD6  1803               	skipnc
 14102  0FD7  0A81               	incf	1,f
 14103                           
 14104                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 14105  0FD8  01DA               	clrf	?_vfpfcnvrt^(0+128)
 14106  0FD9  01DB               	clrf	(?_vfpfcnvrt+1)^(0+128)
 14107  0FDA  0008               	return
 14108  0FDB                     l7126:	
 14109                           
 14110                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 14111  0FDB  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 14112  0FDC  0086               	movwf	6
 14113  0FDD  3001               	movlw	1	; select bank2/3
 14114  0FDE  0087               	movwf	7
 14115  0FDF  3F40               	moviw [0]fsr1
 14116  0FE0  00DC               	movwf	??_vfpfcnvrt^(0+128)
 14117  0FE1  3F41               	moviw [1]fsr1
 14118  0FE2  00DD               	movwf	(??_vfpfcnvrt^(0+128)+1)
 14119  0FE3  085C               	movf	??_vfpfcnvrt^(0+128),w
 14120  0FE4  0084               	movwf	4
 14121  0FE5  085D               	movf	(??_vfpfcnvrt+1)^(0+128),w
 14122  0FE6  0085               	movwf	5
 14123  0FE7  0800               	movf	0,w	;code access
 14124  0FE8  00DE               	movwf	(??_vfpfcnvrt+2)^(0+128)
 14125  0FE9  01DF               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
 14126  0FEA  085E               	movf	(??_vfpfcnvrt+2)^(0+128),w
 14127  0FEB  00A3               	movwf	fputc@c^(0+128)
 14128  0FEC  085F               	movf	(??_vfpfcnvrt+3)^(0+128),w
 14129  0FED  00A4               	movwf	(fputc@c+1)^(0+128)
 14130  0FEE  086A               	movf	vfpfcnvrt@fp^(0+128),w
 14131  0FEF  00E0               	movwf	(??_vfpfcnvrt+4)^(0+128)
 14132  0FF0  0860               	movf	(??_vfpfcnvrt+4)^(0+128),w
 14133  0FF1  00A5               	movwf	fputc@fp^(0+128)
 14134  0FF2  3191  212D  318E   	fcall	_fputc
 14135                           
 14136                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 14137  0FF5  0021               	movlb	1	; select bank1
 14138  0FF6  085A               	movf	vfpfcnvrt@fmt^(0+128),w
 14139  0FF7  0086               	movwf	6
 14140  0FF8  3001               	movlw	1	; select bank2/3
 14141  0FF9  0087               	movwf	7
 14142  0FFA  3001               	movlw	1
 14143  0FFB  0781               	addwf	1,f
 14144  0FFC  3141               	addfsr 1,1
 14145  0FFD  1803               	skipnc
 14146  0FFE  0A81               	incf	1,f
 14147  0FFF  2FC9               	goto	l7116
 14148  1000                     __end_of_vfpfcnvrt:	
 14149                           
 14150                           	psect	text84
 14151  04AC                     __ptext84:	
 14152 ;; *************** function _dtoa *****************
 14153 ;; Defined at:
 14154 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 14155 ;; Parameters:    Size  Location     Type
 14156 ;;  fp              1    wreg     PTR struct _IO_FILE
 14157 ;;		 -> NULL(0), 
 14158 ;;  d               8   28[BANK1 ] long long 
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;  fp              1   41[BANK1 ] PTR struct _IO_FILE
 14161 ;;		 -> NULL(0), 
 14162 ;;  n               8   48[BANK1 ] long long 
 14163 ;;  i               2   56[BANK1 ] int 
 14164 ;;  s               2   46[BANK1 ] int 
 14165 ;;  w               2   44[BANK1 ] int 
 14166 ;;  p               2   42[BANK1 ] int 
 14167 ;; Return value:  Size  Location     Type
 14168 ;;                  2   28[BANK1 ] int 
 14169 ;; Registers used:
 14170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14171 ;; Tracked objects:
 14172 ;;		On entry : 0/0
 14173 ;;		On exit  : 0/0
 14174 ;;		Unchanged: 0/0
 14175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14176 ;;      Params:         0       0       8       0       0       0       0       0
 14177 ;;      Locals:         0       0      19       0       0       0       0       0
 14178 ;;      Temps:          0       0       3       0       0       0       0       0
 14179 ;;      Totals:         0       0      30       0       0       0       0       0
 14180 ;;Total ram usage:       30 bytes
 14181 ;; Hardware stack levels used:    1
 14182 ;; Hardware stack levels required when called:   17
 14183 ;; This function calls:
 14184 ;;		___aodiv
 14185 ;;		___aomod
 14186 ;;		_abs
 14187 ;;		_pad
 14188 ;; This function is called by:
 14189 ;;		_vfpfcnvrt
 14190 ;; This function uses a non-reentrant model
 14191 ;;
 14192                           
 14193                           
 14194                           ;psect for function _dtoa
 14195  04AC                     _dtoa:	
 14196                           
 14197                           ;incstack = 0
 14198 ;; hardware stack exceeded
 14199                           ; Regs used in _dtoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14200                           ;dtoa@fp stored from wreg
 14201  04AC  0021               	movlb	1	; select bank1
 14202  04AD  00C9               	movwf	dtoa@fp^(0+128)
 14203                           
 14204                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
 14205  04AE  083C               	movf	dtoa@d^(0+128),w
 14206  04AF  00D0               	movwf	dtoa@n^(0+128)
 14207  04B0  083D               	movf	(dtoa@d+1)^(0+128),w
 14208  04B1  00D1               	movwf	(dtoa@n+1)^(0+128)
 14209  04B2  083E               	movf	(dtoa@d+2)^(0+128),w
 14210  04B3  00D2               	movwf	(dtoa@n+2)^(0+128)
 14211  04B4  083F               	movf	(dtoa@d+3)^(0+128),w
 14212  04B5  00D3               	movwf	(dtoa@n+3)^(0+128)
 14213  04B6  0840               	movf	(dtoa@d+4)^(0+128),w
 14214  04B7  00D4               	movwf	(dtoa@n+4)^(0+128)
 14215  04B8  0841               	movf	(dtoa@d+5)^(0+128),w
 14216  04B9  00D5               	movwf	(dtoa@n+5)^(0+128)
 14217  04BA  0842               	movf	(dtoa@d+6)^(0+128),w
 14218  04BB  00D6               	movwf	(dtoa@n+6)^(0+128)
 14219  04BC  0843               	movf	(dtoa@d+7)^(0+128),w
 14220  04BD  00D7               	movwf	(dtoa@n+7)^(0+128)
 14221                           
 14222                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 14223  04BE  30D0               	movlw	low dtoa@n
 14224  04BF  0086               	movwf	6
 14225  04C0  3000               	movlw	high dtoa@n
 14226  04C1  0087               	movwf	7
 14227  04C2  3F47               	moviw [7]fsr1
 14228  04C3  00C4               	movwf	??_dtoa^(0+128)
 14229  04C4  1FC4               	btfss	??_dtoa^(0+128),7
 14230  04C5  2CC8               	goto	u7500
 14231  04C6  3001               	movlw	1
 14232  04C7  2CC9               	goto	u7510
 14233  04C8                     u7500:	
 14234  04C8  3000               	movlw	0
 14235  04C9                     u7510:	
 14236  04C9  0021               	movlb	1	; select bank1
 14237  04CA  00C5               	movwf	(??_dtoa+1)^(0+128)
 14238  04CB  01C6               	clrf	((??_dtoa+1)^(0+128)+1)
 14239  04CC  0845               	movf	(??_dtoa+1)^(0+128),w
 14240  04CD  00CE               	movwf	dtoa@s^(0+128)
 14241  04CE  0846               	movf	(??_dtoa+2)^(0+128),w
 14242  04CF  00CF               	movwf	(dtoa@s+1)^(0+128)
 14243                           
 14244                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 14245  04D0  084E               	movf	dtoa@s^(0+128),w
 14246  04D1  044F               	iorwf	(dtoa@s+1)^(0+128),w
 14247  04D2  1903               	btfsc	3,2
 14248  04D3  2CF2               	goto	l1354
 14249                           
 14250                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 14251  04D4  09D0               	comf	dtoa@n^(0+128),f
 14252  04D5  09D1               	comf	(dtoa@n+1)^(0+128),f
 14253  04D6  09D2               	comf	(dtoa@n+2)^(0+128),f
 14254  04D7  09D3               	comf	(dtoa@n+3)^(0+128),f
 14255  04D8  09D4               	comf	(dtoa@n+4)^(0+128),f
 14256  04D9  09D5               	comf	(dtoa@n+5)^(0+128),f
 14257  04DA  09D6               	comf	(dtoa@n+6)^(0+128),f
 14258  04DB  09D7               	comf	(dtoa@n+7)^(0+128),f
 14259  04DC  0AD0               	incf	dtoa@n^(0+128),f
 14260  04DD  1D03               	skipz
 14261  04DE  2CF2               	goto	l1354
 14262  04DF  0AD1               	incf	(dtoa@n+1)^(0+128),f
 14263  04E0  1D03               	skipz
 14264  04E1  2CF2               	goto	l1354
 14265  04E2  0AD2               	incf	(dtoa@n+2)^(0+128),f
 14266  04E3  1D03               	skipz
 14267  04E4  2CF2               	goto	l1354
 14268  04E5  0AD3               	incf	(dtoa@n+3)^(0+128),f
 14269  04E6  1D03               	skipz
 14270  04E7  2CF2               	goto	l1354
 14271  04E8  0AD4               	incf	(dtoa@n+4)^(0+128),f
 14272  04E9  1D03               	skipz
 14273  04EA  2CF2               	goto	l1354
 14274  04EB  0AD5               	incf	(dtoa@n+5)^(0+128),f
 14275  04EC  1D03               	skipz
 14276  04ED  2CF2               	goto	l1354
 14277  04EE  0AD6               	incf	(dtoa@n+6)^(0+128),f
 14278  04EF  1D03               	skipz
 14279  04F0  2CF2               	goto	l1354
 14280  04F1  0AD7               	incf	(dtoa@n+7)^(0+128),f
 14281  04F2                     l1354:	
 14282                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
 14283                           
 14284                           
 14285                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 14286  04F2  0022               	movlb	2	; select bank2
 14287  04F3  1BA9               	btfsc	(_prec+1)^(0+256),7
 14288  04F4  2CF9               	goto	l1355
 14289                           
 14290                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 14291  04F5  30FD               	movlw	253
 14292  04F6  05AA               	andwf	_flags^(0+256),f
 14293  04F7  30FF               	movlw	255
 14294  04F8  05AB               	andwf	(_flags+1)^(0+256),f
 14295  04F9                     l1355:	
 14296                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
 14297                           
 14298                           
 14299                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 14300  04F9  0829               	movf	(_prec+1)^(0+256),w
 14301  04FA  3A80               	xorlw	128
 14302  04FB  0021               	movlb	1	; select bank1
 14303  04FC  00C4               	movwf	??_dtoa^(0+128)
 14304  04FD  3080               	movlw	128
 14305  04FE  0244               	subwf	??_dtoa^(0+128),w
 14306  04FF  1D03               	skipz
 14307  0500  2D04               	goto	u7555
 14308  0501  3001               	movlw	1
 14309  0502  0022               	movlb	2	; select bank2
 14310  0503  0228               	subwf	_prec^(0+256),w
 14311  0504                     u7555:	
 14312  0504  1803               	skipnc
 14313  0505  2D0C               	goto	l6996
 14314  0506  3001               	movlw	1
 14315  0507  0021               	movlb	1	; select bank1
 14316  0508  00CA               	movwf	dtoa@p^(0+128)
 14317  0509  3000               	movlw	0
 14318  050A  00CB               	movwf	(dtoa@p^(0+128)+1)
 14319  050B  2D14               	goto	l1359
 14320  050C                     l6996:	
 14321  050C  0022               	movlb	2	; select bank2
 14322  050D  0829               	movf	(_prec+1)^(0+256),w
 14323  050E  0021               	movlb	1	; select bank1
 14324  050F  00CB               	movwf	(dtoa@p+1)^(0+128)
 14325  0510  0022               	movlb	2	; select bank2
 14326  0511  0828               	movf	_prec^(0+256),w
 14327  0512  0021               	movlb	1	; select bank1
 14328  0513  00CA               	movwf	dtoa@p^(0+128)
 14329  0514                     l1359:	
 14330                           
 14331                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 14332  0514  0022               	movlb	2	; select bank2
 14333  0515  0827               	movf	(_width+1)^(0+256),w
 14334  0516  0021               	movlb	1	; select bank1
 14335  0517  00CD               	movwf	(dtoa@w+1)^(0+128)
 14336  0518  0022               	movlb	2	; select bank2
 14337  0519  0826               	movf	_width^(0+256),w
 14338  051A  0021               	movlb	1	; select bank1
 14339  051B  00CC               	movwf	dtoa@w^(0+128)
 14340                           
 14341                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 14342  051C  084E               	movf	dtoa@s^(0+128),w
 14343  051D  044F               	iorwf	(dtoa@s+1)^(0+128),w
 14344  051E  1D03               	btfss	3,2
 14345  051F  2D23               	goto	l7002
 14346  0520  0022               	movlb	2	; select bank2
 14347  0521  1D2A               	btfss	_flags^(0+256),2
 14348  0522  2D28               	goto	l1360
 14349  0523                     l7002:	
 14350                           
 14351                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 14352  0523  30FF               	movlw	255
 14353  0524  0021               	movlb	1	; select bank1
 14354  0525  07CC               	addwf	dtoa@w^(0+128),f
 14355  0526  30FF               	movlw	255
 14356  0527  3DCD               	addwfc	(dtoa@w+1)^(0+128),f
 14357  0528                     l1360:	
 14358                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
 14359                           
 14360                           
 14361                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 14362  0528  301F               	movlw	31
 14363  0529  0021               	movlb	1	; select bank1
 14364  052A  00D8               	movwf	dtoa@i^(0+128)
 14365  052B  3000               	movlw	0
 14366  052C  00D9               	movwf	(dtoa@i^(0+128)+1)
 14367                           
 14368                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 14369  052D  0024               	movlb	4	; select bank4
 14370  052E  01EF               	clrf	(_dbuf^(0+512)+31)
 14371                           
 14372                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 14373  052F  2DBE               	goto	l1363
 14374  0530                     l7016:	
 14375  0530  0021               	movlb	1	; select bank1
 14376  0531  0850               	movf	dtoa@n^(0+128),w
 14377  0532  0451               	iorwf	(dtoa@n+1)^(0+128),w
 14378  0533  0452               	iorwf	(dtoa@n+2)^(0+128),w
 14379  0534  0453               	iorwf	(dtoa@n+3)^(0+128),w
 14380  0535  0454               	iorwf	(dtoa@n+4)^(0+128),w
 14381  0536  0455               	iorwf	(dtoa@n+5)^(0+128),w
 14382  0537  0456               	iorwf	(dtoa@n+6)^(0+128),w
 14383  0538  0457               	iorwf	(dtoa@n+7)^(0+128),w
 14384  0539  1D03               	skipz
 14385  053A  2D55               	goto	l7006
 14386  053B  084B               	movf	(dtoa@p+1)^(0+128),w
 14387  053C  3A80               	xorlw	128
 14388  053D  00C4               	movwf	??_dtoa^(0+128)
 14389  053E  3080               	movlw	128
 14390  053F  0244               	subwf	??_dtoa^(0+128),w
 14391  0540  1D03               	skipz
 14392  0541  2D44               	goto	u7605
 14393  0542  3001               	movlw	1
 14394  0543  024A               	subwf	dtoa@p^(0+128),w
 14395  0544                     u7605:	
 14396  0544  1803               	skipnc
 14397  0545  2D55               	goto	l7006
 14398  0546  0021               	movlb	1	; select bank1
 14399  0547  084D               	movf	(dtoa@w+1)^(0+128),w
 14400  0548  3A80               	xorlw	128
 14401  0549  00C4               	movwf	??_dtoa^(0+128)
 14402  054A  3080               	movlw	128
 14403  054B  0244               	subwf	??_dtoa^(0+128),w
 14404  054C  1D03               	skipz
 14405  054D  2D50               	goto	u7615
 14406  054E  3001               	movlw	1
 14407  054F  024C               	subwf	dtoa@w^(0+128),w
 14408  0550                     u7615:	
 14409  0550  1C03               	skipc
 14410  0551  2DCA               	goto	l7024
 14411  0552  0022               	movlb	2	; select bank2
 14412  0553  1CAA               	btfss	_flags^(0+256),1
 14413  0554  2DCA               	goto	l7024
 14414  0555                     l7006:	
 14415                           
 14416                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 14417  0555  30FF               	movlw	255
 14418  0556  0021               	movlb	1	; select bank1
 14419  0557  07D8               	addwf	dtoa@i^(0+128),f
 14420  0558  30FF               	movlw	255
 14421  0559  3DD9               	addwfc	(dtoa@i+1)^(0+128),f
 14422                           
 14423                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 14424  055A  300A               	movlw	10
 14425  055B  00A1               	movwf	___aomod@divisor^(0+128)
 14426  055C  01A2               	clrf	(___aomod@divisor+1)^(0+128)
 14427  055D  01A3               	clrf	(___aomod@divisor+2)^(0+128)
 14428  055E  01A4               	clrf	(___aomod@divisor+3)^(0+128)
 14429  055F  01A5               	clrf	(___aomod@divisor+4)^(0+128)
 14430  0560  01A6               	clrf	(___aomod@divisor+5)^(0+128)
 14431  0561  01A7               	clrf	(___aomod@divisor+6)^(0+128)
 14432  0562  01A8               	clrf	(___aomod@divisor+7)^(0+128)
 14433  0563  0850               	movf	dtoa@n^(0+128),w
 14434  0564  00A9               	movwf	___aomod@dividend^(0+128)
 14435  0565  0851               	movf	(dtoa@n+1)^(0+128),w
 14436  0566  00AA               	movwf	(___aomod@dividend+1)^(0+128)
 14437  0567  0852               	movf	(dtoa@n+2)^(0+128),w
 14438  0568  00AB               	movwf	(___aomod@dividend+2)^(0+128)
 14439  0569  0853               	movf	(dtoa@n+3)^(0+128),w
 14440  056A  00AC               	movwf	(___aomod@dividend+3)^(0+128)
 14441  056B  0854               	movf	(dtoa@n+4)^(0+128),w
 14442  056C  00AD               	movwf	(___aomod@dividend+4)^(0+128)
 14443  056D  0855               	movf	(dtoa@n+5)^(0+128),w
 14444  056E  00AE               	movwf	(___aomod@dividend+5)^(0+128)
 14445  056F  0856               	movf	(dtoa@n+6)^(0+128),w
 14446  0570  00AF               	movwf	(___aomod@dividend+6)^(0+128)
 14447  0571  0857               	movf	(dtoa@n+7)^(0+128),w
 14448  0572  00B0               	movwf	(___aomod@dividend+7)^(0+128)
 14449  0573  318A  2237  3184   	fcall	___aomod
 14450  0576  0021               	movlb	1	; select bank1
 14451  0577  0822               	movf	(?___aomod+1)^(0+128),w
 14452  0578  00B5               	movwf	(abs@a+1)^(0+128)
 14453  0579  0821               	movf	?___aomod^(0+128),w
 14454  057A  00B4               	movwf	abs@a^(0+128)
 14455  057B  319C  24F7  3184   	fcall	_abs
 14456  057E  0021               	movlb	1	; select bank1
 14457  057F  0834               	movf	?_abs^(0+128),w
 14458  0580  3E30               	addlw	48
 14459  0581  00C4               	movwf	??_dtoa^(0+128)
 14460  0582  0858               	movf	dtoa@i^(0+128),w
 14461  0583  3E50               	addlw	(low (_dbuf| (0+512)))& (0+255)
 14462  0584  0086               	movwf	6
 14463  0585  3002               	movlw	2	; select bank4/5
 14464  0586  0087               	movwf	7
 14465  0587  0844               	movf	??_dtoa^(0+128),w
 14466  0588  0081               	movwf	1
 14467                           
 14468                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 14469  0589  30FF               	movlw	255
 14470  058A  07CA               	addwf	dtoa@p^(0+128),f
 14471  058B  30FF               	movlw	255
 14472  058C  3DCB               	addwfc	(dtoa@p+1)^(0+128),f
 14473                           
 14474                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 14475  058D  30FF               	movlw	255
 14476  058E  07CC               	addwf	dtoa@w^(0+128),f
 14477  058F  30FF               	movlw	255
 14478  0590  3DCD               	addwfc	(dtoa@w+1)^(0+128),f
 14479                           
 14480                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 14481  0591  300A               	movlw	10
 14482  0592  00A1               	movwf	___aodiv@divisor^(0+128)
 14483  0593  01A2               	clrf	(___aodiv@divisor+1)^(0+128)
 14484  0594  01A3               	clrf	(___aodiv@divisor+2)^(0+128)
 14485  0595  01A4               	clrf	(___aodiv@divisor+3)^(0+128)
 14486  0596  01A5               	clrf	(___aodiv@divisor+4)^(0+128)
 14487  0597  01A6               	clrf	(___aodiv@divisor+5)^(0+128)
 14488  0598  01A7               	clrf	(___aodiv@divisor+6)^(0+128)
 14489  0599  01A8               	clrf	(___aodiv@divisor+7)^(0+128)
 14490  059A  0850               	movf	dtoa@n^(0+128),w
 14491  059B  00A9               	movwf	___aodiv@dividend^(0+128)
 14492  059C  0851               	movf	(dtoa@n+1)^(0+128),w
 14493  059D  00AA               	movwf	(___aodiv@dividend+1)^(0+128)
 14494  059E  0852               	movf	(dtoa@n+2)^(0+128),w
 14495  059F  00AB               	movwf	(___aodiv@dividend+2)^(0+128)
 14496  05A0  0853               	movf	(dtoa@n+3)^(0+128),w
 14497  05A1  00AC               	movwf	(___aodiv@dividend+3)^(0+128)
 14498  05A2  0854               	movf	(dtoa@n+4)^(0+128),w
 14499  05A3  00AD               	movwf	(___aodiv@dividend+4)^(0+128)
 14500  05A4  0855               	movf	(dtoa@n+5)^(0+128),w
 14501  05A5  00AE               	movwf	(___aodiv@dividend+5)^(0+128)
 14502  05A6  0856               	movf	(dtoa@n+6)^(0+128),w
 14503  05A7  00AF               	movwf	(___aodiv@dividend+6)^(0+128)
 14504  05A8  0857               	movf	(dtoa@n+7)^(0+128),w
 14505  05A9  00B0               	movwf	(___aodiv@dividend+7)^(0+128)
 14506  05AA  318C  24E9  3184   	fcall	___aodiv
 14507  05AD  0021               	movlb	1	; select bank1
 14508  05AE  0821               	movf	?___aodiv^(0+128),w
 14509  05AF  00D0               	movwf	dtoa@n^(0+128)
 14510  05B0  0822               	movf	(?___aodiv+1)^(0+128),w
 14511  05B1  00D1               	movwf	(dtoa@n+1)^(0+128)
 14512  05B2  0823               	movf	(?___aodiv+2)^(0+128),w
 14513  05B3  00D2               	movwf	(dtoa@n+2)^(0+128)
 14514  05B4  0824               	movf	(?___aodiv+3)^(0+128),w
 14515  05B5  00D3               	movwf	(dtoa@n+3)^(0+128)
 14516  05B6  0825               	movf	(?___aodiv+4)^(0+128),w
 14517  05B7  00D4               	movwf	(dtoa@n+4)^(0+128)
 14518  05B8  0826               	movf	(?___aodiv+5)^(0+128),w
 14519  05B9  00D5               	movwf	(dtoa@n+5)^(0+128)
 14520  05BA  0827               	movf	(?___aodiv+6)^(0+128),w
 14521  05BB  00D6               	movwf	(dtoa@n+6)^(0+128)
 14522  05BC  0828               	movf	(?___aodiv+7)^(0+128),w
 14523  05BD  00D7               	movwf	(dtoa@n+7)^(0+128)
 14524  05BE                     l1363:	
 14525                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
 14526                           
 14527                           
 14528                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 14529  05BE  0021               	movlb	1	; select bank1
 14530  05BF  0859               	movf	(dtoa@i+1)^(0+128),w
 14531  05C0  3A80               	xorlw	128
 14532  05C1  00C4               	movwf	??_dtoa^(0+128)
 14533  05C2  3080               	movlw	128
 14534  05C3  0244               	subwf	??_dtoa^(0+128),w
 14535  05C4  1D03               	skipz
 14536  05C5  2DC8               	goto	u7585
 14537  05C6  3001               	movlw	1
 14538  05C7  0258               	subwf	dtoa@i^(0+128),w
 14539  05C8                     u7585:	
 14540  05C8  1803               	btfsc	3,0
 14541  05C9  2D30               	goto	l7016
 14542  05CA                     l7024:	
 14543                           
 14544                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 14545  05CA  0021               	movlb	1	; select bank1
 14546  05CB  084E               	movf	dtoa@s^(0+128),w
 14547  05CC  044F               	iorwf	(dtoa@s+1)^(0+128),w
 14548  05CD  1D03               	btfss	3,2
 14549  05CE  2DD2               	goto	l7028
 14550  05CF  0022               	movlb	2	; select bank2
 14551  05D0  1D2A               	btfss	_flags^(0+256),2
 14552  05D1  2DEA               	goto	l7038
 14553  05D2                     l7028:	
 14554                           
 14555                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 14556  05D2  30FF               	movlw	255
 14557  05D3  0021               	movlb	1	; select bank1
 14558  05D4  07D8               	addwf	dtoa@i^(0+128),f
 14559  05D5  30FF               	movlw	255
 14560  05D6  3DD9               	addwfc	(dtoa@i+1)^(0+128),f
 14561                           
 14562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 14563  05D7  084E               	movf	dtoa@s^(0+128),w
 14564  05D8  044F               	iorwf	(dtoa@s+1)^(0+128),w
 14565  05D9  1D03               	btfss	3,2
 14566  05DA  2DDD               	goto	l7034
 14567  05DB  302B               	movlw	43
 14568  05DC  2DDE               	goto	L24
 14569  05DD                     l7034:	
 14570  05DD  302D               	movlw	45
 14571  05DE                     L24:	
 14572  05DE  00C7               	movwf	_dtoa$2177^(0+128)
 14573  05DF  3000               	movlw	0
 14574  05E0  00C8               	movwf	(_dtoa$2177^(0+128)+1)
 14575  05E1  0847               	movf	_dtoa$2177^(0+128),w
 14576  05E2  00C4               	movwf	??_dtoa^(0+128)
 14577  05E3  0858               	movf	dtoa@i^(0+128),w
 14578  05E4  3E50               	addlw	(low (_dbuf| (0+512)))& (0+255)
 14579  05E5  0086               	movwf	6
 14580  05E6  3002               	movlw	2	; select bank4/5
 14581  05E7  0087               	movwf	7
 14582  05E8  0844               	movf	??_dtoa^(0+128),w
 14583  05E9  0081               	movwf	1
 14584  05EA                     l7038:	
 14585                           
 14586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 14587  05EA  0021               	movlb	1	; select bank1
 14588  05EB  0858               	movf	dtoa@i^(0+128),w
 14589  05EC  3E50               	addlw	(low (_dbuf| (0+512)))& (0+255)
 14590  05ED  00C4               	movwf	??_dtoa^(0+128)
 14591  05EE  0844               	movf	??_dtoa^(0+128),w
 14592  05EF  00B3               	movwf	pad@buf^(0+128)
 14593  05F0  084D               	movf	(dtoa@w+1)^(0+128),w
 14594  05F1  00B5               	movwf	(pad@p+1)^(0+128)
 14595  05F2  084C               	movf	dtoa@w^(0+128),w
 14596  05F3  00B4               	movwf	pad@p^(0+128)
 14597  05F4  0849               	movf	dtoa@fp^(0+128),w
 14598  05F5  3192  22B0         	fcall	_pad
 14599  05F7  0021               	movlb	1	; select bank1
 14600  05F8  0834               	movf	(?_pad+1)^(0+128),w
 14601  05F9  00BD               	movwf	(?_dtoa+1)^(0+128)
 14602  05FA  0833               	movf	?_pad^(0+128),w
 14603  05FB  00BC               	movwf	?_dtoa^(0+128)
 14604  05FC  0008               	return
 14605  05FD                     __end_of_dtoa:	
 14606                           
 14607                           	psect	text85
 14608  1CF7                     __ptext85:	
 14609 ;; *************** function _abs *****************
 14610 ;; Defined at:
 14611 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 14612 ;; Parameters:    Size  Location     Type
 14613 ;;  a               2   20[BANK1 ] int 
 14614 ;; Auto vars:     Size  Location     Type
 14615 ;;		None
 14616 ;; Return value:  Size  Location     Type
 14617 ;;                  2   20[BANK1 ] int 
 14618 ;; Registers used:
 14619 ;;		wreg, status,2, status,0
 14620 ;; Tracked objects:
 14621 ;;		On entry : 0/0
 14622 ;;		On exit  : 0/0
 14623 ;;		Unchanged: 0/0
 14624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14625 ;;      Params:         0       0       2       0       0       0       0       0
 14626 ;;      Locals:         0       0       0       0       0       0       0       0
 14627 ;;      Temps:          0       0       2       0       0       0       0       0
 14628 ;;      Totals:         0       0       4       0       0       0       0       0
 14629 ;;Total ram usage:        4 bytes
 14630 ;; Hardware stack levels used:    1
 14631 ;; Hardware stack levels required when called:   12
 14632 ;; This function calls:
 14633 ;;		Nothing
 14634 ;; This function is called by:
 14635 ;;		_Sensor_postAcquisitionProcess
 14636 ;;		_Sensor_Acq_ExecutePacket
 14637 ;;		_Sensor_autoCalibration
 14638 ;;		_dtoa
 14639 ;; This function uses a non-reentrant model
 14640 ;;
 14641                           
 14642                           
 14643                           ;psect for function _abs
 14644  1CF7                     _abs:	
 14645                           
 14646                           ;incstack = 0
 14647 ;; hardware stack exceeded
 14648                           ; Regs used in _abs: [wreg+status,2+status,0]
 14649  1CF7  0021               	movlb	1	; select bank1
 14650  1CF8  0835               	movf	(abs@a+1)^(0+128),w
 14651  1CF9  3A80               	xorlw	128
 14652  1CFA  00B6               	movwf	??_abs^(0+128)
 14653  1CFB  3080               	movlw	128
 14654  1CFC  0236               	subwf	??_abs^(0+128),w
 14655  1CFD  1D03               	skipz
 14656  1CFE  2D01               	goto	u7235
 14657  1CFF  3001               	movlw	1
 14658  1D00  0234               	subwf	abs@a^(0+128),w
 14659  1D01                     u7235:	
 14660  1D01  1803               	skipnc
 14661  1D02  0008               	return
 14662  1D03  0021               	movlb	1	; select bank1
 14663  1D04  0934               	comf	abs@a^(0+128),w
 14664  1D05  00B6               	movwf	??_abs^(0+128)
 14665  1D06  0935               	comf	(abs@a+1)^(0+128),w
 14666  1D07  00B7               	movwf	(??_abs^(0+128)+1)
 14667  1D08  0AB6               	incf	??_abs^(0+128),f
 14668  1D09  1903               	skipnz
 14669  1D0A  0AB7               	incf	(??_abs^(0+128)+1),f
 14670  1D0B  0836               	movf	??_abs^(0+128),w
 14671  1D0C  00B4               	movwf	?_abs^(0+128)
 14672  1D0D  0837               	movf	(??_abs+1)^(0+128),w
 14673  1D0E  00B5               	movwf	(?_abs+1)^(0+128)
 14674  1D0F  0008               	return
 14675  1D10                     __end_of_abs:	
 14676                           
 14677                           	psect	text86
 14678  0A37                     __ptext86:	
 14679 ;; *************** function ___aomod *****************
 14680 ;; Defined at:
 14681 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
 14682 ;; Parameters:    Size  Location     Type
 14683 ;;  divisor         8    1[BANK1 ] long long 
 14684 ;;  dividend        8    9[BANK1 ] long long 
 14685 ;; Auto vars:     Size  Location     Type
 14686 ;;  sign            1   19[BANK1 ] unsigned char 
 14687 ;;  counter         1   18[BANK1 ] unsigned char 
 14688 ;; Return value:  Size  Location     Type
 14689 ;;                  8    1[BANK1 ] long long 
 14690 ;; Registers used:
 14691 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14692 ;; Tracked objects:
 14693 ;;		On entry : 0/0
 14694 ;;		On exit  : 0/0
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14697 ;;      Params:         0       0      16       0       0       0       0       0
 14698 ;;      Locals:         0       0       2       0       0       0       0       0
 14699 ;;      Temps:          0       0       1       0       0       0       0       0
 14700 ;;      Totals:         0       0      19       0       0       0       0       0
 14701 ;;Total ram usage:       19 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; Hardware stack levels required when called:   12
 14704 ;; This function calls:
 14705 ;;		Nothing
 14706 ;; This function is called by:
 14707 ;;		_dtoa
 14708 ;; This function uses a non-reentrant model
 14709 ;;
 14710                           
 14711                           
 14712                           ;psect for function ___aomod
 14713  0A37                     ___aomod:	
 14714                           
 14715                           ;incstack = 0
 14716 ;; hardware stack exceeded
 14717                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
 14718  0A37  0021               	movlb	1	; select bank1
 14719  0A38  01B3               	clrf	___aomod@sign^(0+128)
 14720  0A39  30A9               	movlw	low ___aomod@dividend
 14721  0A3A  0086               	movwf	6
 14722  0A3B  3000               	movlw	high ___aomod@dividend
 14723  0A3C  0087               	movwf	7
 14724  0A3D  3F47               	moviw [7]fsr1
 14725  0A3E  00B1               	movwf	??___aomod^(0+128)
 14726  0A3F  1FB1               	btfss	??___aomod^(0+128),7
 14727  0A40  2A63               	goto	l6946
 14728  0A41  0021               	movlb	1	; select bank1
 14729  0A42  09A9               	comf	___aomod@dividend^(0+128),f
 14730  0A43  09AA               	comf	(___aomod@dividend+1)^(0+128),f
 14731  0A44  09AB               	comf	(___aomod@dividend+2)^(0+128),f
 14732  0A45  09AC               	comf	(___aomod@dividend+3)^(0+128),f
 14733  0A46  09AD               	comf	(___aomod@dividend+4)^(0+128),f
 14734  0A47  09AE               	comf	(___aomod@dividend+5)^(0+128),f
 14735  0A48  09AF               	comf	(___aomod@dividend+6)^(0+128),f
 14736  0A49  09B0               	comf	(___aomod@dividend+7)^(0+128),f
 14737  0A4A  0AA9               	incf	___aomod@dividend^(0+128),f
 14738  0A4B  1D03               	skipz
 14739  0A4C  2A60               	goto	u740lld
 14740  0A4D  0AAA               	incf	(___aomod@dividend+1)^(0+128),f
 14741  0A4E  1D03               	skipz
 14742  0A4F  2A60               	goto	u740lld
 14743  0A50  0AAB               	incf	(___aomod@dividend+2)^(0+128),f
 14744  0A51  1D03               	skipz
 14745  0A52  2A60               	goto	u740lld
 14746  0A53  0AAC               	incf	(___aomod@dividend+3)^(0+128),f
 14747  0A54  1D03               	skipz
 14748  0A55  2A60               	goto	u740lld
 14749  0A56  0AAD               	incf	(___aomod@dividend+4)^(0+128),f
 14750  0A57  1D03               	skipz
 14751  0A58  2A60               	goto	u740lld
 14752  0A59  0AAE               	incf	(___aomod@dividend+5)^(0+128),f
 14753  0A5A  1D03               	skipz
 14754  0A5B  2A60               	goto	u740lld
 14755  0A5C  0AAF               	incf	(___aomod@dividend+6)^(0+128),f
 14756  0A5D  1D03               	skipz
 14757  0A5E  2A60               	goto	u740lld
 14758  0A5F  0AB0               	incf	(___aomod@dividend+7)^(0+128),f
 14759  0A60                     u740lld:	
 14760  0A60  0021               	movlb	1	; select bank1
 14761  0A61  01B3               	clrf	___aomod@sign^(0+128)
 14762  0A62  0AB3               	incf	___aomod@sign^(0+128),f
 14763  0A63                     l6946:	
 14764  0A63  30A1               	movlw	low ___aomod@divisor
 14765  0A64  0086               	movwf	6
 14766  0A65  3000               	movlw	high ___aomod@divisor
 14767  0A66  0087               	movwf	7
 14768  0A67  3F47               	moviw [7]fsr1
 14769  0A68  0021               	movlb	1	; select bank1
 14770  0A69  00B1               	movwf	??___aomod^(0+128)
 14771  0A6A  1FB1               	btfss	??___aomod^(0+128),7
 14772  0A6B  2A8B               	goto	l6950
 14773  0A6C  0021               	movlb	1	; select bank1
 14774  0A6D  09A1               	comf	___aomod@divisor^(0+128),f
 14775  0A6E  09A2               	comf	(___aomod@divisor+1)^(0+128),f
 14776  0A6F  09A3               	comf	(___aomod@divisor+2)^(0+128),f
 14777  0A70  09A4               	comf	(___aomod@divisor+3)^(0+128),f
 14778  0A71  09A5               	comf	(___aomod@divisor+4)^(0+128),f
 14779  0A72  09A6               	comf	(___aomod@divisor+5)^(0+128),f
 14780  0A73  09A7               	comf	(___aomod@divisor+6)^(0+128),f
 14781  0A74  09A8               	comf	(___aomod@divisor+7)^(0+128),f
 14782  0A75  0AA1               	incf	___aomod@divisor^(0+128),f
 14783  0A76  1D03               	skipz
 14784  0A77  2A8B               	goto	l6950
 14785  0A78  0AA2               	incf	(___aomod@divisor+1)^(0+128),f
 14786  0A79  1D03               	skipz
 14787  0A7A  2A8B               	goto	l6950
 14788  0A7B  0AA3               	incf	(___aomod@divisor+2)^(0+128),f
 14789  0A7C  1D03               	skipz
 14790  0A7D  2A8B               	goto	l6950
 14791  0A7E  0AA4               	incf	(___aomod@divisor+3)^(0+128),f
 14792  0A7F  1D03               	skipz
 14793  0A80  2A8B               	goto	l6950
 14794  0A81  0AA5               	incf	(___aomod@divisor+4)^(0+128),f
 14795  0A82  1D03               	skipz
 14796  0A83  2A8B               	goto	l6950
 14797  0A84  0AA6               	incf	(___aomod@divisor+5)^(0+128),f
 14798  0A85  1D03               	skipz
 14799  0A86  2A8B               	goto	l6950
 14800  0A87  0AA7               	incf	(___aomod@divisor+6)^(0+128),f
 14801  0A88  1D03               	skipz
 14802  0A89  2A8B               	goto	l6950
 14803  0A8A  0AA8               	incf	(___aomod@divisor+7)^(0+128),f
 14804  0A8B                     l6950:	
 14805  0A8B  0021               	movlb	1	; select bank1
 14806  0A8C  0821               	movf	___aomod@divisor^(0+128),w
 14807  0A8D  0422               	iorwf	(___aomod@divisor+1)^(0+128),w
 14808  0A8E  0423               	iorwf	(___aomod@divisor+2)^(0+128),w
 14809  0A8F  0424               	iorwf	(___aomod@divisor+3)^(0+128),w
 14810  0A90  0425               	iorwf	(___aomod@divisor+4)^(0+128),w
 14811  0A91  0426               	iorwf	(___aomod@divisor+5)^(0+128),w
 14812  0A92  0427               	iorwf	(___aomod@divisor+6)^(0+128),w
 14813  0A93  0428               	iorwf	(___aomod@divisor+7)^(0+128),w
 14814  0A94  1903               	skipnz
 14815  0A95  2AE3               	goto	l6966
 14816  0A96  01B2               	clrf	___aomod@counter^(0+128)
 14817  0A97  0AB2               	incf	___aomod@counter^(0+128),f
 14818  0A98                     l6958:	
 14819  0A98  1BA8               	btfsc	(___aomod@divisor+7)^(0+128),7
 14820  0A99  2AA7               	goto	l6960
 14821  0A9A  35A1               	lslf	___aomod@divisor^(0+128),f
 14822  0A9B  0DA2               	rlf	(___aomod@divisor+1)^(0+128),f
 14823  0A9C  0DA3               	rlf	(___aomod@divisor+2)^(0+128),f
 14824  0A9D  0DA4               	rlf	(___aomod@divisor+3)^(0+128),f
 14825  0A9E  0DA5               	rlf	(___aomod@divisor+4)^(0+128),f
 14826  0A9F  0DA6               	rlf	(___aomod@divisor+5)^(0+128),f
 14827  0AA0  0DA7               	rlf	(___aomod@divisor+6)^(0+128),f
 14828  0AA1  0DA8               	rlf	(___aomod@divisor+7)^(0+128),f
 14829  0AA2  3001               	movlw	1
 14830  0AA3  00B1               	movwf	??___aomod^(0+128)
 14831  0AA4  0831               	movf	??___aomod^(0+128),w
 14832  0AA5  07B2               	addwf	___aomod@counter^(0+128),f
 14833  0AA6  2A98               	goto	l6958
 14834  0AA7                     l6960:	
 14835  0AA7  0828               	movf	(___aomod@divisor+7)^(0+128),w
 14836  0AA8  0230               	subwf	(___aomod@dividend+7)^(0+128),w
 14837  0AA9  1D03               	skipz
 14838  0AAA  2AC5               	goto	u7455
 14839  0AAB  0827               	movf	(___aomod@divisor+6)^(0+128),w
 14840  0AAC  022F               	subwf	(___aomod@dividend+6)^(0+128),w
 14841  0AAD  1D03               	skipz
 14842  0AAE  2AC5               	goto	u7455
 14843  0AAF  0826               	movf	(___aomod@divisor+5)^(0+128),w
 14844  0AB0  022E               	subwf	(___aomod@dividend+5)^(0+128),w
 14845  0AB1  1D03               	skipz
 14846  0AB2  2AC5               	goto	u7455
 14847  0AB3  0825               	movf	(___aomod@divisor+4)^(0+128),w
 14848  0AB4  022D               	subwf	(___aomod@dividend+4)^(0+128),w
 14849  0AB5  1D03               	skipz
 14850  0AB6  2AC5               	goto	u7455
 14851  0AB7  0824               	movf	(___aomod@divisor+3)^(0+128),w
 14852  0AB8  022C               	subwf	(___aomod@dividend+3)^(0+128),w
 14853  0AB9  1D03               	skipz
 14854  0ABA  2AC5               	goto	u7455
 14855  0ABB  0823               	movf	(___aomod@divisor+2)^(0+128),w
 14856  0ABC  022B               	subwf	(___aomod@dividend+2)^(0+128),w
 14857  0ABD  1D03               	skipz
 14858  0ABE  2AC5               	goto	u7455
 14859  0ABF  0822               	movf	(___aomod@divisor+1)^(0+128),w
 14860  0AC0  022A               	subwf	(___aomod@dividend+1)^(0+128),w
 14861  0AC1  1D03               	skipz
 14862  0AC2  2AC5               	goto	u7455
 14863  0AC3  0821               	movf	___aomod@divisor^(0+128),w
 14864  0AC4  0229               	subwf	___aomod@dividend^(0+128),w
 14865  0AC5                     u7455:	
 14866  0AC5  1C03               	skipc
 14867  0AC6  2AD7               	goto	l6964
 14868  0AC7  0821               	movf	___aomod@divisor^(0+128),w
 14869  0AC8  02A9               	subwf	___aomod@dividend^(0+128),f
 14870  0AC9  0822               	movf	(___aomod@divisor+1)^(0+128),w
 14871  0ACA  3BAA               	subwfb	(___aomod@dividend+1)^(0+128),f
 14872  0ACB  0823               	movf	(___aomod@divisor+2)^(0+128),w
 14873  0ACC  3BAB               	subwfb	(___aomod@dividend+2)^(0+128),f
 14874  0ACD  0824               	movf	(___aomod@divisor+3)^(0+128),w
 14875  0ACE  3BAC               	subwfb	(___aomod@dividend+3)^(0+128),f
 14876  0ACF  0825               	movf	(___aomod@divisor+4)^(0+128),w
 14877  0AD0  3BAD               	subwfb	(___aomod@dividend+4)^(0+128),f
 14878  0AD1  0826               	movf	(___aomod@divisor+5)^(0+128),w
 14879  0AD2  3BAE               	subwfb	(___aomod@dividend+5)^(0+128),f
 14880  0AD3  0827               	movf	(___aomod@divisor+6)^(0+128),w
 14881  0AD4  3BAF               	subwfb	(___aomod@dividend+6)^(0+128),f
 14882  0AD5  0828               	movf	(___aomod@divisor+7)^(0+128),w
 14883  0AD6  3BB0               	subwfb	(___aomod@dividend+7)^(0+128),f
 14884  0AD7                     l6964:	
 14885  0AD7  36A8               	lsrf	(___aomod@divisor+7)^(0+128),f
 14886  0AD8  0CA7               	rrf	(___aomod@divisor+6)^(0+128),f
 14887  0AD9  0CA6               	rrf	(___aomod@divisor+5)^(0+128),f
 14888  0ADA  0CA5               	rrf	(___aomod@divisor+4)^(0+128),f
 14889  0ADB  0CA4               	rrf	(___aomod@divisor+3)^(0+128),f
 14890  0ADC  0CA3               	rrf	(___aomod@divisor+2)^(0+128),f
 14891  0ADD  0CA2               	rrf	(___aomod@divisor+1)^(0+128),f
 14892  0ADE  0CA1               	rrf	___aomod@divisor^(0+128),f
 14893  0ADF  3001               	movlw	1
 14894  0AE0  02B2               	subwf	___aomod@counter^(0+128),f
 14895  0AE1  1D03               	btfss	3,2
 14896  0AE2  2AA7               	goto	l6960
 14897  0AE3                     l6966:	
 14898  0AE3  0833               	movf	___aomod@sign^(0+128),w
 14899  0AE4  1903               	btfsc	3,2
 14900  0AE5  2B04               	goto	l1509
 14901  0AE6  09A9               	comf	___aomod@dividend^(0+128),f
 14902  0AE7  09AA               	comf	(___aomod@dividend+1)^(0+128),f
 14903  0AE8  09AB               	comf	(___aomod@dividend+2)^(0+128),f
 14904  0AE9  09AC               	comf	(___aomod@dividend+3)^(0+128),f
 14905  0AEA  09AD               	comf	(___aomod@dividend+4)^(0+128),f
 14906  0AEB  09AE               	comf	(___aomod@dividend+5)^(0+128),f
 14907  0AEC  09AF               	comf	(___aomod@dividend+6)^(0+128),f
 14908  0AED  09B0               	comf	(___aomod@dividend+7)^(0+128),f
 14909  0AEE  0AA9               	incf	___aomod@dividend^(0+128),f
 14910  0AEF  1D03               	skipz
 14911  0AF0  2B04               	goto	l1509
 14912  0AF1  0AAA               	incf	(___aomod@dividend+1)^(0+128),f
 14913  0AF2  1D03               	skipz
 14914  0AF3  2B04               	goto	l1509
 14915  0AF4  0AAB               	incf	(___aomod@dividend+2)^(0+128),f
 14916  0AF5  1D03               	skipz
 14917  0AF6  2B04               	goto	l1509
 14918  0AF7  0AAC               	incf	(___aomod@dividend+3)^(0+128),f
 14919  0AF8  1D03               	skipz
 14920  0AF9  2B04               	goto	l1509
 14921  0AFA  0AAD               	incf	(___aomod@dividend+4)^(0+128),f
 14922  0AFB  1D03               	skipz
 14923  0AFC  2B04               	goto	l1509
 14924  0AFD  0AAE               	incf	(___aomod@dividend+5)^(0+128),f
 14925  0AFE  1D03               	skipz
 14926  0AFF  2B04               	goto	l1509
 14927  0B00  0AAF               	incf	(___aomod@dividend+6)^(0+128),f
 14928  0B01  1D03               	skipz
 14929  0B02  2B04               	goto	l1509
 14930  0B03  0AB0               	incf	(___aomod@dividend+7)^(0+128),f
 14931  0B04                     l1509:	
 14932  0B04  0021               	movlb	1	; select bank1
 14933  0B05  0829               	movf	___aomod@dividend^(0+128),w
 14934  0B06  00A1               	movwf	?___aomod^(0+128)
 14935  0B07  082A               	movf	(___aomod@dividend+1)^(0+128),w
 14936  0B08  00A2               	movwf	(?___aomod+1)^(0+128)
 14937  0B09  082B               	movf	(___aomod@dividend+2)^(0+128),w
 14938  0B0A  00A3               	movwf	(?___aomod+2)^(0+128)
 14939  0B0B  082C               	movf	(___aomod@dividend+3)^(0+128),w
 14940  0B0C  00A4               	movwf	(?___aomod+3)^(0+128)
 14941  0B0D  082D               	movf	(___aomod@dividend+4)^(0+128),w
 14942  0B0E  00A5               	movwf	(?___aomod+4)^(0+128)
 14943  0B0F  082E               	movf	(___aomod@dividend+5)^(0+128),w
 14944  0B10  00A6               	movwf	(?___aomod+5)^(0+128)
 14945  0B11  082F               	movf	(___aomod@dividend+6)^(0+128),w
 14946  0B12  00A7               	movwf	(?___aomod+6)^(0+128)
 14947  0B13  0830               	movf	(___aomod@dividend+7)^(0+128),w
 14948  0B14  00A8               	movwf	(?___aomod+7)^(0+128)
 14949  0B15  0008               	return
 14950  0B16                     __end_of___aomod:	
 14951                           
 14952                           	psect	text87
 14953  0CE9                     __ptext87:	
 14954 ;; *************** function ___aodiv *****************
 14955 ;; Defined at:
 14956 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
 14957 ;; Parameters:    Size  Location     Type
 14958 ;;  divisor         8    1[BANK1 ] long long 
 14959 ;;  dividend        8    9[BANK1 ] long long 
 14960 ;; Auto vars:     Size  Location     Type
 14961 ;;  quotient        8   20[BANK1 ] long long 
 14962 ;;  sign            1   19[BANK1 ] unsigned char 
 14963 ;;  counter         1   18[BANK1 ] unsigned char 
 14964 ;; Return value:  Size  Location     Type
 14965 ;;                  8    1[BANK1 ] long long 
 14966 ;; Registers used:
 14967 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14968 ;; Tracked objects:
 14969 ;;		On entry : 0/0
 14970 ;;		On exit  : 0/0
 14971 ;;		Unchanged: 0/0
 14972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14973 ;;      Params:         0       0      16       0       0       0       0       0
 14974 ;;      Locals:         0       0      10       0       0       0       0       0
 14975 ;;      Temps:          0       0       1       0       0       0       0       0
 14976 ;;      Totals:         0       0      27       0       0       0       0       0
 14977 ;;Total ram usage:       27 bytes
 14978 ;; Hardware stack levels used:    1
 14979 ;; Hardware stack levels required when called:   12
 14980 ;; This function calls:
 14981 ;;		Nothing
 14982 ;; This function is called by:
 14983 ;;		_dtoa
 14984 ;; This function uses a non-reentrant model
 14985 ;;
 14986                           
 14987                           
 14988                           ;psect for function ___aodiv
 14989  0CE9                     ___aodiv:	
 14990                           
 14991                           ;incstack = 0
 14992 ;; hardware stack exceeded
 14993                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 14994  0CE9  0021               	movlb	1	; select bank1
 14995  0CEA  01B3               	clrf	___aodiv@sign^(0+128)
 14996  0CEB  30A1               	movlw	low ___aodiv@divisor
 14997  0CEC  0086               	movwf	6
 14998  0CED  3000               	movlw	high ___aodiv@divisor
 14999  0CEE  0087               	movwf	7
 15000  0CEF  3F47               	moviw [7]fsr1
 15001  0CF0  00B1               	movwf	??___aodiv^(0+128)
 15002  0CF1  1FB1               	btfss	??___aodiv^(0+128),7
 15003  0CF2  2D15               	goto	l6908
 15004  0CF3  0021               	movlb	1	; select bank1
 15005  0CF4  09A1               	comf	___aodiv@divisor^(0+128),f
 15006  0CF5  09A2               	comf	(___aodiv@divisor+1)^(0+128),f
 15007  0CF6  09A3               	comf	(___aodiv@divisor+2)^(0+128),f
 15008  0CF7  09A4               	comf	(___aodiv@divisor+3)^(0+128),f
 15009  0CF8  09A5               	comf	(___aodiv@divisor+4)^(0+128),f
 15010  0CF9  09A6               	comf	(___aodiv@divisor+5)^(0+128),f
 15011  0CFA  09A7               	comf	(___aodiv@divisor+6)^(0+128),f
 15012  0CFB  09A8               	comf	(___aodiv@divisor+7)^(0+128),f
 15013  0CFC  0AA1               	incf	___aodiv@divisor^(0+128),f
 15014  0CFD  1D03               	skipz
 15015  0CFE  2D12               	goto	u729lld
 15016  0CFF  0AA2               	incf	(___aodiv@divisor+1)^(0+128),f
 15017  0D00  1D03               	skipz
 15018  0D01  2D12               	goto	u729lld
 15019  0D02  0AA3               	incf	(___aodiv@divisor+2)^(0+128),f
 15020  0D03  1D03               	skipz
 15021  0D04  2D12               	goto	u729lld
 15022  0D05  0AA4               	incf	(___aodiv@divisor+3)^(0+128),f
 15023  0D06  1D03               	skipz
 15024  0D07  2D12               	goto	u729lld
 15025  0D08  0AA5               	incf	(___aodiv@divisor+4)^(0+128),f
 15026  0D09  1D03               	skipz
 15027  0D0A  2D12               	goto	u729lld
 15028  0D0B  0AA6               	incf	(___aodiv@divisor+5)^(0+128),f
 15029  0D0C  1D03               	skipz
 15030  0D0D  2D12               	goto	u729lld
 15031  0D0E  0AA7               	incf	(___aodiv@divisor+6)^(0+128),f
 15032  0D0F  1D03               	skipz
 15033  0D10  2D12               	goto	u729lld
 15034  0D11  0AA8               	incf	(___aodiv@divisor+7)^(0+128),f
 15035  0D12                     u729lld:	
 15036  0D12  0021               	movlb	1	; select bank1
 15037  0D13  01B3               	clrf	___aodiv@sign^(0+128)
 15038  0D14  0AB3               	incf	___aodiv@sign^(0+128),f
 15039  0D15                     l6908:	
 15040  0D15  30A9               	movlw	low ___aodiv@dividend
 15041  0D16  0086               	movwf	6
 15042  0D17  3000               	movlw	high ___aodiv@dividend
 15043  0D18  0087               	movwf	7
 15044  0D19  3F47               	moviw [7]fsr1
 15045  0D1A  0021               	movlb	1	; select bank1
 15046  0D1B  00B1               	movwf	??___aodiv^(0+128)
 15047  0D1C  1FB1               	btfss	??___aodiv^(0+128),7
 15048  0D1D  2D42               	goto	l6914
 15049  0D1E  0021               	movlb	1	; select bank1
 15050  0D1F  09A9               	comf	___aodiv@dividend^(0+128),f
 15051  0D20  09AA               	comf	(___aodiv@dividend+1)^(0+128),f
 15052  0D21  09AB               	comf	(___aodiv@dividend+2)^(0+128),f
 15053  0D22  09AC               	comf	(___aodiv@dividend+3)^(0+128),f
 15054  0D23  09AD               	comf	(___aodiv@dividend+4)^(0+128),f
 15055  0D24  09AE               	comf	(___aodiv@dividend+5)^(0+128),f
 15056  0D25  09AF               	comf	(___aodiv@dividend+6)^(0+128),f
 15057  0D26  09B0               	comf	(___aodiv@dividend+7)^(0+128),f
 15058  0D27  0AA9               	incf	___aodiv@dividend^(0+128),f
 15059  0D28  1D03               	skipz
 15060  0D29  2D3D               	goto	l6912
 15061  0D2A  0AAA               	incf	(___aodiv@dividend+1)^(0+128),f
 15062  0D2B  1D03               	skipz
 15063  0D2C  2D3D               	goto	l6912
 15064  0D2D  0AAB               	incf	(___aodiv@dividend+2)^(0+128),f
 15065  0D2E  1D03               	skipz
 15066  0D2F  2D3D               	goto	l6912
 15067  0D30  0AAC               	incf	(___aodiv@dividend+3)^(0+128),f
 15068  0D31  1D03               	skipz
 15069  0D32  2D3D               	goto	l6912
 15070  0D33  0AAD               	incf	(___aodiv@dividend+4)^(0+128),f
 15071  0D34  1D03               	skipz
 15072  0D35  2D3D               	goto	l6912
 15073  0D36  0AAE               	incf	(___aodiv@dividend+5)^(0+128),f
 15074  0D37  1D03               	skipz
 15075  0D38  2D3D               	goto	l6912
 15076  0D39  0AAF               	incf	(___aodiv@dividend+6)^(0+128),f
 15077  0D3A  1D03               	skipz
 15078  0D3B  2D3D               	goto	l6912
 15079  0D3C  0AB0               	incf	(___aodiv@dividend+7)^(0+128),f
 15080  0D3D                     l6912:	
 15081  0D3D  3001               	movlw	1
 15082  0D3E  0021               	movlb	1	; select bank1
 15083  0D3F  00B1               	movwf	??___aodiv^(0+128)
 15084  0D40  0831               	movf	??___aodiv^(0+128),w
 15085  0D41  06B3               	xorwf	___aodiv@sign^(0+128),f
 15086  0D42                     l6914:	
 15087  0D42  30B4               	movlw	low ___aodiv@quotient
 15088  0D43  0086               	movwf	6
 15089  0D44  3000               	movlw	high ___aodiv@quotient
 15090  0D45  0087               	movwf	7
 15091  0D46  3008               	movlw	8
 15092  0D47  0021               	movlb	1	; select bank1
 15093  0D48  00B1               	movwf	??___aodiv^(0+128)
 15094  0D49  3000               	movlw	0
 15095  0D4A                     u7320:	
 15096  0D4A  001E               	movwi fsr1++
 15097  0D4B  0BB1               	decfsz	??___aodiv^(0+128),f
 15098  0D4C  2D4A               	goto	u7320
 15099  0D4D  0821               	movf	___aodiv@divisor^(0+128),w
 15100  0D4E  0422               	iorwf	(___aodiv@divisor+1)^(0+128),w
 15101  0D4F  0423               	iorwf	(___aodiv@divisor+2)^(0+128),w
 15102  0D50  0424               	iorwf	(___aodiv@divisor+3)^(0+128),w
 15103  0D51  0425               	iorwf	(___aodiv@divisor+4)^(0+128),w
 15104  0D52  0426               	iorwf	(___aodiv@divisor+5)^(0+128),w
 15105  0D53  0427               	iorwf	(___aodiv@divisor+6)^(0+128),w
 15106  0D54  0428               	iorwf	(___aodiv@divisor+7)^(0+128),w
 15107  0D55  1903               	skipnz
 15108  0D56  2DAD               	goto	l6936
 15109  0D57  01B2               	clrf	___aodiv@counter^(0+128)
 15110  0D58  0AB2               	incf	___aodiv@counter^(0+128),f
 15111  0D59                     l6924:	
 15112  0D59  1BA8               	btfsc	(___aodiv@divisor+7)^(0+128),7
 15113  0D5A  2D68               	goto	l6926
 15114  0D5B  35A1               	lslf	___aodiv@divisor^(0+128),f
 15115  0D5C  0DA2               	rlf	(___aodiv@divisor+1)^(0+128),f
 15116  0D5D  0DA3               	rlf	(___aodiv@divisor+2)^(0+128),f
 15117  0D5E  0DA4               	rlf	(___aodiv@divisor+3)^(0+128),f
 15118  0D5F  0DA5               	rlf	(___aodiv@divisor+4)^(0+128),f
 15119  0D60  0DA6               	rlf	(___aodiv@divisor+5)^(0+128),f
 15120  0D61  0DA7               	rlf	(___aodiv@divisor+6)^(0+128),f
 15121  0D62  0DA8               	rlf	(___aodiv@divisor+7)^(0+128),f
 15122  0D63  3001               	movlw	1
 15123  0D64  00B1               	movwf	??___aodiv^(0+128)
 15124  0D65  0831               	movf	??___aodiv^(0+128),w
 15125  0D66  07B2               	addwf	___aodiv@counter^(0+128),f
 15126  0D67  2D59               	goto	l6924
 15127  0D68                     l6926:	
 15128  0D68  35B4               	lslf	___aodiv@quotient^(0+128),f
 15129  0D69  0DB5               	rlf	(___aodiv@quotient+1)^(0+128),f
 15130  0D6A  0DB6               	rlf	(___aodiv@quotient+2)^(0+128),f
 15131  0D6B  0DB7               	rlf	(___aodiv@quotient+3)^(0+128),f
 15132  0D6C  0DB8               	rlf	(___aodiv@quotient+4)^(0+128),f
 15133  0D6D  0DB9               	rlf	(___aodiv@quotient+5)^(0+128),f
 15134  0D6E  0DBA               	rlf	(___aodiv@quotient+6)^(0+128),f
 15135  0D6F  0DBB               	rlf	(___aodiv@quotient+7)^(0+128),f
 15136  0D70  0828               	movf	(___aodiv@divisor+7)^(0+128),w
 15137  0D71  0230               	subwf	(___aodiv@dividend+7)^(0+128),w
 15138  0D72  1D03               	skipz
 15139  0D73  2D8E               	goto	u7355
 15140  0D74  0827               	movf	(___aodiv@divisor+6)^(0+128),w
 15141  0D75  022F               	subwf	(___aodiv@dividend+6)^(0+128),w
 15142  0D76  1D03               	skipz
 15143  0D77  2D8E               	goto	u7355
 15144  0D78  0826               	movf	(___aodiv@divisor+5)^(0+128),w
 15145  0D79  022E               	subwf	(___aodiv@dividend+5)^(0+128),w
 15146  0D7A  1D03               	skipz
 15147  0D7B  2D8E               	goto	u7355
 15148  0D7C  0825               	movf	(___aodiv@divisor+4)^(0+128),w
 15149  0D7D  022D               	subwf	(___aodiv@dividend+4)^(0+128),w
 15150  0D7E  1D03               	skipz
 15151  0D7F  2D8E               	goto	u7355
 15152  0D80  0824               	movf	(___aodiv@divisor+3)^(0+128),w
 15153  0D81  022C               	subwf	(___aodiv@dividend+3)^(0+128),w
 15154  0D82  1D03               	skipz
 15155  0D83  2D8E               	goto	u7355
 15156  0D84  0823               	movf	(___aodiv@divisor+2)^(0+128),w
 15157  0D85  022B               	subwf	(___aodiv@dividend+2)^(0+128),w
 15158  0D86  1D03               	skipz
 15159  0D87  2D8E               	goto	u7355
 15160  0D88  0822               	movf	(___aodiv@divisor+1)^(0+128),w
 15161  0D89  022A               	subwf	(___aodiv@dividend+1)^(0+128),w
 15162  0D8A  1D03               	skipz
 15163  0D8B  2D8E               	goto	u7355
 15164  0D8C  0821               	movf	___aodiv@divisor^(0+128),w
 15165  0D8D  0229               	subwf	___aodiv@dividend^(0+128),w
 15166  0D8E                     u7355:	
 15167  0D8E  1C03               	skipc
 15168  0D8F  2DA1               	goto	l6934
 15169  0D90  0821               	movf	___aodiv@divisor^(0+128),w
 15170  0D91  02A9               	subwf	___aodiv@dividend^(0+128),f
 15171  0D92  0822               	movf	(___aodiv@divisor+1)^(0+128),w
 15172  0D93  3BAA               	subwfb	(___aodiv@dividend+1)^(0+128),f
 15173  0D94  0823               	movf	(___aodiv@divisor+2)^(0+128),w
 15174  0D95  3BAB               	subwfb	(___aodiv@dividend+2)^(0+128),f
 15175  0D96  0824               	movf	(___aodiv@divisor+3)^(0+128),w
 15176  0D97  3BAC               	subwfb	(___aodiv@dividend+3)^(0+128),f
 15177  0D98  0825               	movf	(___aodiv@divisor+4)^(0+128),w
 15178  0D99  3BAD               	subwfb	(___aodiv@dividend+4)^(0+128),f
 15179  0D9A  0826               	movf	(___aodiv@divisor+5)^(0+128),w
 15180  0D9B  3BAE               	subwfb	(___aodiv@dividend+5)^(0+128),f
 15181  0D9C  0827               	movf	(___aodiv@divisor+6)^(0+128),w
 15182  0D9D  3BAF               	subwfb	(___aodiv@dividend+6)^(0+128),f
 15183  0D9E  0828               	movf	(___aodiv@divisor+7)^(0+128),w
 15184  0D9F  3BB0               	subwfb	(___aodiv@dividend+7)^(0+128),f
 15185  0DA0  1434               	bsf	___aodiv@quotient^(0+128),0
 15186  0DA1                     l6934:	
 15187  0DA1  36A8               	lsrf	(___aodiv@divisor+7)^(0+128),f
 15188  0DA2  0CA7               	rrf	(___aodiv@divisor+6)^(0+128),f
 15189  0DA3  0CA6               	rrf	(___aodiv@divisor+5)^(0+128),f
 15190  0DA4  0CA5               	rrf	(___aodiv@divisor+4)^(0+128),f
 15191  0DA5  0CA4               	rrf	(___aodiv@divisor+3)^(0+128),f
 15192  0DA6  0CA3               	rrf	(___aodiv@divisor+2)^(0+128),f
 15193  0DA7  0CA2               	rrf	(___aodiv@divisor+1)^(0+128),f
 15194  0DA8  0CA1               	rrf	___aodiv@divisor^(0+128),f
 15195  0DA9  3001               	movlw	1
 15196  0DAA  02B2               	subwf	___aodiv@counter^(0+128),f
 15197  0DAB  1D03               	btfss	3,2
 15198  0DAC  2D68               	goto	l6926
 15199  0DAD                     l6936:	
 15200  0DAD  0833               	movf	___aodiv@sign^(0+128),w
 15201  0DAE  1903               	btfsc	3,2
 15202  0DAF  2DCE               	goto	l1496
 15203  0DB0  09B4               	comf	___aodiv@quotient^(0+128),f
 15204  0DB1  09B5               	comf	(___aodiv@quotient+1)^(0+128),f
 15205  0DB2  09B6               	comf	(___aodiv@quotient+2)^(0+128),f
 15206  0DB3  09B7               	comf	(___aodiv@quotient+3)^(0+128),f
 15207  0DB4  09B8               	comf	(___aodiv@quotient+4)^(0+128),f
 15208  0DB5  09B9               	comf	(___aodiv@quotient+5)^(0+128),f
 15209  0DB6  09BA               	comf	(___aodiv@quotient+6)^(0+128),f
 15210  0DB7  09BB               	comf	(___aodiv@quotient+7)^(0+128),f
 15211  0DB8  0AB4               	incf	___aodiv@quotient^(0+128),f
 15212  0DB9  1D03               	skipz
 15213  0DBA  2DCE               	goto	l1496
 15214  0DBB  0AB5               	incf	(___aodiv@quotient+1)^(0+128),f
 15215  0DBC  1D03               	skipz
 15216  0DBD  2DCE               	goto	l1496
 15217  0DBE  0AB6               	incf	(___aodiv@quotient+2)^(0+128),f
 15218  0DBF  1D03               	skipz
 15219  0DC0  2DCE               	goto	l1496
 15220  0DC1  0AB7               	incf	(___aodiv@quotient+3)^(0+128),f
 15221  0DC2  1D03               	skipz
 15222  0DC3  2DCE               	goto	l1496
 15223  0DC4  0AB8               	incf	(___aodiv@quotient+4)^(0+128),f
 15224  0DC5  1D03               	skipz
 15225  0DC6  2DCE               	goto	l1496
 15226  0DC7  0AB9               	incf	(___aodiv@quotient+5)^(0+128),f
 15227  0DC8  1D03               	skipz
 15228  0DC9  2DCE               	goto	l1496
 15229  0DCA  0ABA               	incf	(___aodiv@quotient+6)^(0+128),f
 15230  0DCB  1D03               	skipz
 15231  0DCC  2DCE               	goto	l1496
 15232  0DCD  0ABB               	incf	(___aodiv@quotient+7)^(0+128),f
 15233  0DCE                     l1496:	
 15234  0DCE  0021               	movlb	1	; select bank1
 15235  0DCF  0834               	movf	___aodiv@quotient^(0+128),w
 15236  0DD0  00A1               	movwf	?___aodiv^(0+128)
 15237  0DD1  0835               	movf	(___aodiv@quotient+1)^(0+128),w
 15238  0DD2  00A2               	movwf	(?___aodiv+1)^(0+128)
 15239  0DD3  0836               	movf	(___aodiv@quotient+2)^(0+128),w
 15240  0DD4  00A3               	movwf	(?___aodiv+2)^(0+128)
 15241  0DD5  0837               	movf	(___aodiv@quotient+3)^(0+128),w
 15242  0DD6  00A4               	movwf	(?___aodiv+3)^(0+128)
 15243  0DD7  0838               	movf	(___aodiv@quotient+4)^(0+128),w
 15244  0DD8  00A5               	movwf	(?___aodiv+4)^(0+128)
 15245  0DD9  0839               	movf	(___aodiv@quotient+5)^(0+128),w
 15246  0DDA  00A6               	movwf	(?___aodiv+5)^(0+128)
 15247  0DDB  083A               	movf	(___aodiv@quotient+6)^(0+128),w
 15248  0DDC  00A7               	movwf	(?___aodiv+6)^(0+128)
 15249  0DDD  083B               	movf	(___aodiv@quotient+7)^(0+128),w
 15250  0DDE  00A8               	movwf	(?___aodiv+7)^(0+128)
 15251  0DDF  0008               	return
 15252  0DE0                     __end_of___aodiv:	
 15253                           
 15254                           	psect	text88
 15255  102C                     __ptext88:	
 15256 ;; *************** function _ctoa *****************
 15257 ;; Defined at:
 15258 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 15259 ;; Parameters:    Size  Location     Type
 15260 ;;  fp              1    wreg     PTR struct _IO_FILE
 15261 ;;		 -> NULL(0), 
 15262 ;;  c               1   28[BANK1 ] unsigned char 
 15263 ;; Auto vars:     Size  Location     Type
 15264 ;;  fp              1   33[BANK1 ] PTR struct _IO_FILE
 15265 ;;		 -> NULL(0), 
 15266 ;;  w               2   31[BANK1 ] int 
 15267 ;;  l               2    0        int 
 15268 ;; Return value:  Size  Location     Type
 15269 ;;                  2   28[BANK1 ] int 
 15270 ;; Registers used:
 15271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15272 ;; Tracked objects:
 15273 ;;		On entry : 0/0
 15274 ;;		On exit  : 0/0
 15275 ;;		Unchanged: 0/0
 15276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15277 ;;      Params:         0       0       2       0       0       0       0       0
 15278 ;;      Locals:         0       0       3       0       0       0       0       0
 15279 ;;      Temps:          0       0       1       0       0       0       0       0
 15280 ;;      Totals:         0       0       6       0       0       0       0       0
 15281 ;;Total ram usage:        6 bytes
 15282 ;; Hardware stack levels used:    1
 15283 ;; Hardware stack levels required when called:   17
 15284 ;; This function calls:
 15285 ;;		_pad
 15286 ;; This function is called by:
 15287 ;;		_vfpfcnvrt
 15288 ;; This function uses a non-reentrant model
 15289 ;;
 15290                           
 15291                           
 15292                           ;psect for function _ctoa
 15293  102C                     _ctoa:	
 15294                           
 15295                           ;incstack = 0
 15296 ;; hardware stack exceeded
 15297                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15298                           ;ctoa@fp stored from wreg
 15299  102C  0021               	movlb	1	; select bank1
 15300  102D  00C1               	movwf	ctoa@fp^(0+128)
 15301                           
 15302                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
 15303  102E  0022               	movlb	2	; select bank2
 15304  102F  0826               	movf	_width^(0+256),w
 15305  1030  0427               	iorwf	(_width+1)^(0+256),w
 15306  1031  1D03               	btfss	3,2
 15307  1032  283B               	goto	l6974
 15308  1033  0827               	movf	(_width+1)^(0+256),w
 15309  1034  0021               	movlb	1	; select bank1
 15310  1035  00C0               	movwf	(ctoa@w+1)^(0+128)
 15311  1036  0022               	movlb	2	; select bank2
 15312  1037  0826               	movf	_width^(0+256),w
 15313  1038  0021               	movlb	1	; select bank1
 15314  1039  00BF               	movwf	ctoa@w^(0+128)
 15315  103A  2844               	goto	l6976
 15316  103B                     l6974:	
 15317  103B  0826               	movf	_width^(0+256),w
 15318  103C  3EFF               	addlw	255
 15319  103D  0021               	movlb	1	; select bank1
 15320  103E  00BF               	movwf	ctoa@w^(0+128)
 15321  103F  30FF               	movlw	255
 15322  1040  0022               	movlb	2	; select bank2
 15323  1041  3D27               	addwfc	(_width+1)^(0+256),w
 15324  1042  0021               	movlb	1	; select bank1
 15325  1043  00C0               	movwf	(ctoa@w+1)^(0+128)
 15326  1044                     l6976:	
 15327                           
 15328                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
 15329  1044  083C               	movf	ctoa@c^(0+128),w
 15330  1045  00BE               	movwf	??_ctoa^(0+128)
 15331  1046  083E               	movf	??_ctoa^(0+128),w
 15332  1047  0024               	movlb	4	; select bank4
 15333  1048  00D0               	movwf	_dbuf^(0+512)
 15334                           
 15335                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
 15336  1049  01D1               	clrf	(_dbuf^(0+512)+1)
 15337                           
 15338                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
 15339  104A  3050               	movlw	(low (_dbuf| (0+512)))& (0+255)
 15340  104B  0021               	movlb	1	; select bank1
 15341  104C  00BE               	movwf	??_ctoa^(0+128)
 15342  104D  083E               	movf	??_ctoa^(0+128),w
 15343  104E  00B3               	movwf	pad@buf^(0+128)
 15344  104F  0840               	movf	(ctoa@w+1)^(0+128),w
 15345  1050  00B5               	movwf	(pad@p+1)^(0+128)
 15346  1051  083F               	movf	ctoa@w^(0+128),w
 15347  1052  00B4               	movwf	pad@p^(0+128)
 15348  1053  0841               	movf	ctoa@fp^(0+128),w
 15349  1054  3192  22B0         	fcall	_pad
 15350  1056  0021               	movlb	1	; select bank1
 15351  1057  0834               	movf	(?_pad+1)^(0+128),w
 15352  1058  00BD               	movwf	(?_ctoa+1)^(0+128)
 15353  1059  0833               	movf	?_pad^(0+128),w
 15354  105A  00BC               	movwf	?_ctoa^(0+128)
 15355  105B  0008               	return
 15356  105C                     __end_of_ctoa:	
 15357                           
 15358                           	psect	text89
 15359  12B0                     __ptext89:	
 15360 ;; *************** function _pad *****************
 15361 ;; Defined at:
 15362 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 15363 ;; Parameters:    Size  Location     Type
 15364 ;;  fp              1    wreg     PTR struct _IO_FILE
 15365 ;;		 -> NULL(0), 
 15366 ;;  buf             1   19[BANK1 ] PTR unsigned char 
 15367 ;;		 -> dbuf(32), 
 15368 ;;  p               2   20[BANK1 ] int 
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;  fp              1   27[BANK1 ] PTR struct _IO_FILE
 15371 ;;		 -> NULL(0), 
 15372 ;;  w               2   25[BANK1 ] int 
 15373 ;;  i               2   23[BANK1 ] int 
 15374 ;; Return value:  Size  Location     Type
 15375 ;;                  2   19[BANK1 ] int 
 15376 ;; Registers used:
 15377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15378 ;; Tracked objects:
 15379 ;;		On entry : 0/0
 15380 ;;		On exit  : 0/0
 15381 ;;		Unchanged: 0/0
 15382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15383 ;;      Params:         0       0       3       0       0       0       0       0
 15384 ;;      Locals:         0       0       5       0       0       0       0       0
 15385 ;;      Temps:          0       0       1       0       0       0       0       0
 15386 ;;      Totals:         0       0       9       0       0       0       0       0
 15387 ;;Total ram usage:        9 bytes
 15388 ;; Hardware stack levels used:    1
 15389 ;; Hardware stack levels required when called:   16
 15390 ;; This function calls:
 15391 ;;		_fputc
 15392 ;;		_fputs
 15393 ;;		_strlen
 15394 ;; This function is called by:
 15395 ;;		_ctoa
 15396 ;;		_dtoa
 15397 ;; This function uses a non-reentrant model
 15398 ;;
 15399                           
 15400                           
 15401                           ;psect for function _pad
 15402  12B0                     _pad:	
 15403                           
 15404                           ;incstack = 0
 15405 ;; hardware stack exceeded
 15406                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15407                           ;pad@fp stored from wreg
 15408  12B0  0021               	movlb	1	; select bank1
 15409  12B1  00BB               	movwf	pad@fp^(0+128)
 15410                           
 15411                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 15412  12B2  0022               	movlb	2	; select bank2
 15413  12B3  1C2A               	btfss	_flags^(0+256),0
 15414  12B4  2ABE               	goto	l6886
 15415                           
 15416                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 15417  12B5  0021               	movlb	1	; select bank1
 15418  12B6  083B               	movf	pad@fp^(0+128),w
 15419  12B7  00B6               	movwf	??_pad^(0+128)
 15420  12B8  0836               	movf	??_pad^(0+128),w
 15421  12B9  00AB               	movwf	fputs@fp^(0+128)
 15422  12BA  0833               	movf	pad@buf^(0+128),w
 15423  12BB  319E  261B  3192   	fcall	_fputs
 15424  12BE                     l6886:	
 15425                           
 15426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 15427  12BE  0021               	movlb	1	; select bank1
 15428  12BF  1BB5               	btfsc	(pad@p+1)^(0+128),7
 15429  12C0  2AC6               	goto	l6890
 15430  12C1  0835               	movf	(pad@p+1)^(0+128),w
 15431  12C2  00BA               	movwf	(pad@w+1)^(0+128)
 15432  12C3  0834               	movf	pad@p^(0+128),w
 15433  12C4  00B9               	movwf	pad@w^(0+128)
 15434  12C5  2AC8               	goto	l1339
 15435  12C6                     l6890:	
 15436  12C6  01B9               	clrf	pad@w^(0+128)
 15437  12C7  01BA               	clrf	(pad@w+1)^(0+128)
 15438  12C8                     l1339:	
 15439                           
 15440                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 15441  12C8  01B7               	clrf	pad@i^(0+128)
 15442  12C9  01B8               	clrf	(pad@i+1)^(0+128)
 15443  12CA                     l6896:	
 15444                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 15445                           
 15446                           
 15447                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 15448  12CA  0838               	movf	(pad@i+1)^(0+128),w
 15449  12CB  3A80               	xorlw	128
 15450  12CC  00B6               	movwf	??_pad^(0+128)
 15451  12CD  083A               	movf	(pad@w+1)^(0+128),w
 15452  12CE  3A80               	xorlw	128
 15453  12CF  0236               	subwf	??_pad^(0+128),w
 15454  12D0  1D03               	skipz
 15455  12D1  2AD4               	goto	u7265
 15456  12D2  0839               	movf	pad@w^(0+128),w
 15457  12D3  0237               	subwf	pad@i^(0+128),w
 15458  12D4                     u7265:	
 15459  12D4  1803               	btfsc	3,0
 15460  12D5  2AE8               	goto	l1342
 15461                           
 15462                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 15463  12D6  3020               	movlw	32
 15464  12D7  0021               	movlb	1	; select bank1
 15465  12D8  00A3               	movwf	fputc@c^(0+128)
 15466  12D9  3000               	movlw	0
 15467  12DA  00A4               	movwf	(fputc@c^(0+128)+1)
 15468  12DB  083B               	movf	pad@fp^(0+128),w
 15469  12DC  00B6               	movwf	??_pad^(0+128)
 15470  12DD  0836               	movf	??_pad^(0+128),w
 15471  12DE  00A5               	movwf	fputc@fp^(0+128)
 15472  12DF  3191  212D  3192   	fcall	_fputc
 15473                           
 15474                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 15475  12E2  3001               	movlw	1
 15476  12E3  0021               	movlb	1	; select bank1
 15477  12E4  07B7               	addwf	pad@i^(0+128),f
 15478  12E5  3000               	movlw	0
 15479  12E6  3DB8               	addwfc	(pad@i+1)^(0+128),f
 15480  12E7  2ACA               	goto	l6896
 15481  12E8                     l1342:	
 15482                           
 15483                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 15484  12E8  0022               	movlb	2	; select bank2
 15485  12E9  182A               	btfsc	_flags^(0+256),0
 15486  12EA  2AF4               	goto	l1343
 15487                           
 15488                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 15489  12EB  0021               	movlb	1	; select bank1
 15490  12EC  083B               	movf	pad@fp^(0+128),w
 15491  12ED  00B6               	movwf	??_pad^(0+128)
 15492  12EE  0836               	movf	??_pad^(0+128),w
 15493  12EF  00AB               	movwf	fputs@fp^(0+128)
 15494  12F0  0833               	movf	pad@buf^(0+128),w
 15495  12F1  319E  261B  3192   	fcall	_fputs
 15496  12F4                     l1343:	
 15497                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
 15498                           
 15499                           
 15500                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 15501  12F4  0021               	movlb	1	; select bank1
 15502  12F5  0833               	movf	pad@buf^(0+128),w
 15503  12F6  319C  24DE         	fcall	_strlen
 15504  12F8  0021               	movlb	1	; select bank1
 15505  12F9  0839               	movf	pad@w^(0+128),w
 15506  12FA  0721               	addwf	?_strlen^(0+128),w
 15507  12FB  00B3               	movwf	?_pad^(0+128)
 15508  12FC  083A               	movf	(pad@w+1)^(0+128),w
 15509  12FD  3D22               	addwfc	(?_strlen+1)^(0+128),w
 15510  12FE  00B4               	movwf	(?_pad+1)^(0+128)
 15511  12FF  0008               	return
 15512  1300                     __end_of_pad:	
 15513                           
 15514                           	psect	text90
 15515  1CDE                     __ptext90:	
 15516 ;; *************** function _strlen *****************
 15517 ;; Defined at:
 15518 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 15519 ;; Parameters:    Size  Location     Type
 15520 ;;  s               1    wreg     PTR const unsigned char 
 15521 ;;		 -> dbuf(32), 
 15522 ;; Auto vars:     Size  Location     Type
 15523 ;;  s               1    5[BANK1 ] PTR const unsigned char 
 15524 ;;		 -> dbuf(32), 
 15525 ;;  a               1    4[BANK1 ] PTR const unsigned char 
 15526 ;;		 -> dbuf(32), 
 15527 ;; Return value:  Size  Location     Type
 15528 ;;                  2    1[BANK1 ] unsigned int 
 15529 ;; Registers used:
 15530 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15531 ;; Tracked objects:
 15532 ;;		On entry : 0/0
 15533 ;;		On exit  : 0/0
 15534 ;;		Unchanged: 0/0
 15535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15536 ;;      Params:         0       0       2       0       0       0       0       0
 15537 ;;      Locals:         0       0       2       0       0       0       0       0
 15538 ;;      Temps:          0       0       1       0       0       0       0       0
 15539 ;;      Totals:         0       0       5       0       0       0       0       0
 15540 ;;Total ram usage:        5 bytes
 15541 ;; Hardware stack levels used:    1
 15542 ;; Hardware stack levels required when called:   12
 15543 ;; This function calls:
 15544 ;;		Nothing
 15545 ;; This function is called by:
 15546 ;;		_pad
 15547 ;; This function uses a non-reentrant model
 15548 ;;
 15549                           
 15550                           
 15551                           ;psect for function _strlen
 15552  1CDE                     _strlen:	
 15553                           
 15554                           ;incstack = 0
 15555 ;; hardware stack exceeded
 15556                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 15557                           ;strlen@s stored from wreg
 15558  1CDE  0021               	movlb	1	; select bank1
 15559  1CDF  00A5               	movwf	strlen@s^(0+128)
 15560  1CE0  0825               	movf	strlen@s^(0+128),w
 15561  1CE1  00A3               	movwf	??_strlen^(0+128)
 15562  1CE2  0823               	movf	??_strlen^(0+128),w
 15563  1CE3  00A4               	movwf	strlen@a^(0+128)
 15564  1CE4                     l6872:	
 15565  1CE4  0825               	movf	strlen@s^(0+128),w
 15566  1CE5  0086               	movwf	6
 15567  1CE6  3002               	movlw	2	; select bank4/5
 15568  1CE7  0087               	movwf	7
 15569  1CE8  0801               	movf	1,w
 15570  1CE9  1903               	btfsc	3,2
 15571  1CEA  2CF0               	goto	l6874
 15572  1CEB  3001               	movlw	1
 15573  1CEC  00A3               	movwf	??_strlen^(0+128)
 15574  1CED  0823               	movf	??_strlen^(0+128),w
 15575  1CEE  07A5               	addwf	strlen@s^(0+128),f
 15576  1CEF  2CE4               	goto	l6872
 15577  1CF0                     l6874:	
 15578  1CF0  0824               	movf	strlen@a^(0+128),w
 15579  1CF1  0225               	subwf	strlen@s^(0+128),w
 15580  1CF2  00A1               	movwf	?_strlen^(0+128)
 15581  1CF3  01A2               	clrf	(?_strlen+1)^(0+128)
 15582  1CF4  1BA1               	btfsc	?_strlen^(0+128),7
 15583  1CF5  03A2               	decf	(?_strlen+1)^(0+128),f
 15584  1CF6  0008               	return
 15585  1CF7                     __end_of_strlen:	
 15586                           
 15587                           	psect	text91
 15588  1E1B                     __ptext91:	
 15589 ;; *************** function _fputs *****************
 15590 ;; Defined at:
 15591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 15592 ;; Parameters:    Size  Location     Type
 15593 ;;  s               1    wreg     PTR const unsigned char 
 15594 ;;		 -> dbuf(32), 
 15595 ;;  fp              1   11[BANK1 ] PTR struct _IO_FILE
 15596 ;;		 -> NULL(0), 
 15597 ;; Auto vars:     Size  Location     Type
 15598 ;;  s               1   18[BANK1 ] PTR const unsigned char 
 15599 ;;		 -> dbuf(32), 
 15600 ;;  i               2   16[BANK1 ] int 
 15601 ;;  c               1   15[BANK1 ] unsigned char 
 15602 ;; Return value:  Size  Location     Type
 15603 ;;                  2   11[BANK1 ] int 
 15604 ;; Registers used:
 15605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15606 ;; Tracked objects:
 15607 ;;		On entry : 0/0
 15608 ;;		On exit  : 0/0
 15609 ;;		Unchanged: 0/0
 15610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15611 ;;      Params:         0       0       1       0       0       0       0       0
 15612 ;;      Locals:         0       0       4       0       0       0       0       0
 15613 ;;      Temps:          0       0       3       0       0       0       0       0
 15614 ;;      Totals:         0       0       8       0       0       0       0       0
 15615 ;;Total ram usage:        8 bytes
 15616 ;; Hardware stack levels used:    1
 15617 ;; Hardware stack levels required when called:   15
 15618 ;; This function calls:
 15619 ;;		_fputc
 15620 ;; This function is called by:
 15621 ;;		_pad
 15622 ;; This function uses a non-reentrant model
 15623 ;;
 15624                           
 15625                           
 15626                           ;psect for function _fputs
 15627  1E1B                     _fputs:	
 15628                           
 15629                           ;incstack = 0
 15630 ;; hardware stack exceeded
 15631                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15632                           ;fputs@s stored from wreg
 15633  1E1B  0021               	movlb	1	; select bank1
 15634  1E1C  00B2               	movwf	fputs@s^(0+128)
 15635  1E1D  01B0               	clrf	fputs@i^(0+128)
 15636  1E1E  01B1               	clrf	(fputs@i+1)^(0+128)
 15637  1E1F                     l6866:	
 15638  1E1F  0830               	movf	fputs@i^(0+128),w
 15639  1E20  0732               	addwf	fputs@s^(0+128),w
 15640  1E21  00AC               	movwf	??_fputs^(0+128)
 15641  1E22  082C               	movf	??_fputs^(0+128),w
 15642  1E23  0086               	movwf	6
 15643  1E24  3002               	movlw	2	; select bank4/5
 15644  1E25  0087               	movwf	7
 15645  1E26  0801               	movf	1,w
 15646  1E27  00AD               	movwf	(??_fputs+1)^(0+128)
 15647  1E28  082D               	movf	(??_fputs+1)^(0+128),w
 15648  1E29  00AF               	movwf	fputs@c^(0+128)
 15649  1E2A  082F               	movf	fputs@c^(0+128),w
 15650  1E2B  1903               	btfsc	3,2
 15651  1E2C  0008               	return
 15652  1E2D  082F               	movf	fputs@c^(0+128),w
 15653  1E2E  00AC               	movwf	??_fputs^(0+128)
 15654  1E2F  01AD               	clrf	(??_fputs^(0+128)+1)
 15655  1E30  082C               	movf	??_fputs^(0+128),w
 15656  1E31  00A3               	movwf	fputc@c^(0+128)
 15657  1E32  082D               	movf	(??_fputs+1)^(0+128),w
 15658  1E33  00A4               	movwf	(fputc@c+1)^(0+128)
 15659  1E34  082B               	movf	fputs@fp^(0+128),w
 15660  1E35  00AE               	movwf	(??_fputs+2)^(0+128)
 15661  1E36  082E               	movf	(??_fputs+2)^(0+128),w
 15662  1E37  00A5               	movwf	fputc@fp^(0+128)
 15663  1E38  3191  212D  319E   	fcall	_fputc
 15664  1E3B  3001               	movlw	1
 15665  1E3C  0021               	movlb	1	; select bank1
 15666  1E3D  07B0               	addwf	fputs@i^(0+128),f
 15667  1E3E  3000               	movlw	0
 15668  1E3F  3DB1               	addwfc	(fputs@i+1)^(0+128),f
 15669  1E40  2E1F               	goto	l6866
 15670  1E41                     __end_of_fputs:	
 15671                           
 15672                           	psect	text92
 15673  112D                     __ptext92:	
 15674 ;; *************** function _fputc *****************
 15675 ;; Defined at:
 15676 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 15677 ;; Parameters:    Size  Location     Type
 15678 ;;  c               2    3[BANK1 ] int 
 15679 ;;  fp              1    5[BANK1 ] PTR struct _IO_FILE
 15680 ;;		 -> NULL(0), 
 15681 ;; Auto vars:     Size  Location     Type
 15682 ;;		None
 15683 ;; Return value:  Size  Location     Type
 15684 ;;                  2    3[BANK1 ] int 
 15685 ;; Registers used:
 15686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15687 ;; Tracked objects:
 15688 ;;		On entry : 0/0
 15689 ;;		On exit  : 0/0
 15690 ;;		Unchanged: 0/0
 15691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15692 ;;      Params:         0       0       3       0       0       0       0       0
 15693 ;;      Locals:         0       0       0       0       0       0       0       0
 15694 ;;      Temps:          0       0       5       0       0       0       0       0
 15695 ;;      Totals:         0       0       8       0       0       0       0       0
 15696 ;;Total ram usage:        8 bytes
 15697 ;; Hardware stack levels used:    1
 15698 ;; Hardware stack levels required when called:   14
 15699 ;; This function calls:
 15700 ;;		_putch
 15701 ;; This function is called by:
 15702 ;;		_pad
 15703 ;;		_vfpfcnvrt
 15704 ;;		_fputs
 15705 ;; This function uses a non-reentrant model
 15706 ;;
 15707                           
 15708                           
 15709                           ;psect for function _fputc
 15710  112D                     _fputc:	
 15711                           
 15712                           ;incstack = 0
 15713 ;; hardware stack exceeded
 15714                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15715  112D  0021               	movlb	1	; select bank1
 15716  112E  0825               	movf	fputc@fp^(0+128),w
 15717  112F  1D03               	btfss	3,2
 15718  1130  0825               	movf	fputc@fp^(0+128),w
 15719  1131  1D03               	btfss	3,2
 15720  1132  2937               	goto	l6852
 15721  1133  0823               	movf	fputc@c^(0+128),w
 15722  1134  3199  21FC         	fcall	_putch
 15723  1136  0008               	return
 15724  1137                     l6852:	
 15725  1137  0825               	movf	fputc@fp^(0+128),w
 15726  1138  3E03               	addlw	3
 15727  1139  0086               	movwf	6
 15728  113A  0187               	clrf	7
 15729  113B  0016               	moviw fsr1++
 15730  113C  0401               	iorwf	1,w
 15731  113D  1903               	btfsc	3,2
 15732  113E  295A               	goto	l6856
 15733  113F  0825               	movf	fputc@fp^(0+128),w
 15734  1140  3E03               	addlw	3
 15735  1141  0086               	movwf	6
 15736  1142  0187               	clrf	7
 15737  1143  3F40               	moviw [0]fsr1
 15738  1144  00A6               	movwf	??_fputc^(0+128)
 15739  1145  3F41               	moviw [1]fsr1
 15740  1146  00A7               	movwf	(??_fputc^(0+128)+1)
 15741  1147  0A25               	incf	fputc@fp^(0+128),w
 15742  1148  0086               	movwf	6
 15743  1149  0187               	clrf	7
 15744  114A  3F40               	moviw [0]fsr1
 15745  114B  00A8               	movwf	(??_fputc+2)^(0+128)
 15746  114C  3F41               	moviw [1]fsr1
 15747  114D  00A9               	movwf	((??_fputc+2)^(0+128)+1)
 15748  114E  0829               	movf	(??_fputc+3)^(0+128),w
 15749  114F  3A80               	xorlw	128
 15750  1150  00AA               	movwf	(??_fputc+4)^(0+128)
 15751  1151  0827               	movf	(??_fputc+1)^(0+128),w
 15752  1152  3A80               	xorlw	128
 15753  1153  022A               	subwf	(??_fputc+4)^(0+128),w
 15754  1154  1D03               	skipz
 15755  1155  2958               	goto	u7205
 15756  1156  0826               	movf	??_fputc^(0+128),w
 15757  1157  0228               	subwf	(??_fputc+2)^(0+128),w
 15758  1158                     u7205:	
 15759  1158  1803               	skipnc
 15760  1159  0008               	return
 15761  115A                     l6856:	
 15762  115A  0021               	movlb	1	; select bank1
 15763  115B  0A25               	incf	fputc@fp^(0+128),w
 15764  115C  0086               	movwf	6
 15765  115D  0187               	clrf	7
 15766  115E  3001               	movlw	1
 15767  115F  0781               	addwf	1,f
 15768  1160  3141               	addfsr 1,1
 15769  1161  1803               	skipnc
 15770  1162  0A81               	incf	1,f
 15771  1163  0008               	return
 15772  1164                     __end_of_fputc:	
 15773                           
 15774                           	psect	text93
 15775  19FC                     __ptext93:	
 15776 ;; *************** function _putch *****************
 15777 ;; Defined at:
 15778 ;;		line 174 in file "mcc_generated_files/eusart.c"
 15779 ;; Parameters:    Size  Location     Type
 15780 ;;  txData          1    wreg     unsigned char 
 15781 ;; Auto vars:     Size  Location     Type
 15782 ;;  txData          1    2[BANK1 ] unsigned char 
 15783 ;; Return value:  Size  Location     Type
 15784 ;;                  1    wreg      void 
 15785 ;; Registers used:
 15786 ;;		wreg, status,2, status,0, pclath, cstack
 15787 ;; Tracked objects:
 15788 ;;		On entry : 0/0
 15789 ;;		On exit  : 0/0
 15790 ;;		Unchanged: 0/0
 15791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15792 ;;      Params:         0       0       0       0       0       0       0       0
 15793 ;;      Locals:         0       0       1       0       0       0       0       0
 15794 ;;      Temps:          0       0       0       0       0       0       0       0
 15795 ;;      Totals:         0       0       1       0       0       0       0       0
 15796 ;;Total ram usage:        1 bytes
 15797 ;; Hardware stack levels used:    1
 15798 ;; Hardware stack levels required when called:   13
 15799 ;; This function calls:
 15800 ;;		_EUSART_Write
 15801 ;; This function is called by:
 15802 ;;		_fputc
 15803 ;; This function uses a non-reentrant model
 15804 ;;
 15805                           
 15806                           
 15807                           ;psect for function _putch
 15808  19FC                     _putch:	
 15809                           
 15810                           ;incstack = 0
 15811 ;; hardware stack exceeded
 15812                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
 15813                           ;putch@txData stored from wreg
 15814  19FC  0021               	movlb	1	; select bank1
 15815  19FD  00A2               	movwf	putch@txData^(0+128)
 15816                           
 15817                           ;mcc_generated_files/eusart.c: 174: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 175: {;mcc_generated_files/eusart.c: 176:     EUSART_Write(txData);
 15818  19FE  0822               	movf	putch@txData^(0+128),w
 15819  19FF  319A  229D         	fcall	_EUSART_Write
 15820  1A01  0008               	return
 15821  1A02                     __end_of_putch:	
 15822                           
 15823                           	psect	text94
 15824  1A9D                     __ptext94:	
 15825 ;; *************** function _EUSART_Write *****************
 15826 ;; Defined at:
 15827 ;;		line 160 in file "mcc_generated_files/eusart.c"
 15828 ;; Parameters:    Size  Location     Type
 15829 ;;  txData          1    wreg     unsigned char 
 15830 ;; Auto vars:     Size  Location     Type
 15831 ;;  txData          1    1[BANK1 ] unsigned char 
 15832 ;; Return value:  Size  Location     Type
 15833 ;;                  1    wreg      void 
 15834 ;; Registers used:
 15835 ;;		wreg
 15836 ;; Tracked objects:
 15837 ;;		On entry : 0/0
 15838 ;;		On exit  : 0/0
 15839 ;;		Unchanged: 0/0
 15840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15841 ;;      Params:         0       0       0       0       0       0       0       0
 15842 ;;      Locals:         0       0       1       0       0       0       0       0
 15843 ;;      Temps:          0       0       0       0       0       0       0       0
 15844 ;;      Totals:         0       0       1       0       0       0       0       0
 15845 ;;Total ram usage:        1 bytes
 15846 ;; Hardware stack levels used:    1
 15847 ;; Hardware stack levels required when called:   12
 15848 ;; This function calls:
 15849 ;;		Nothing
 15850 ;; This function is called by:
 15851 ;;		_putch
 15852 ;; This function uses a non-reentrant model
 15853 ;;
 15854                           
 15855                           
 15856                           ;psect for function _EUSART_Write
 15857  1A9D                     _EUSART_Write:	
 15858                           
 15859                           ;incstack = 0
 15860 ;; hardware stack exceeded
 15861                           ; Regs used in _EUSART_Write: [wreg]
 15862                           ;EUSART_Write@txData stored from wreg
 15863  1A9D  0021               	movlb	1	; select bank1
 15864  1A9E  00A1               	movwf	EUSART_Write@txData^(0+128)
 15865  1A9F                     l715:	
 15866                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:     }
 15867                           
 15868                           
 15869                           ;mcc_generated_files/eusart.c: 162:     while(0 == PIR1bits.TXIF)
 15870  1A9F  0020               	movlb	0	; select bank0
 15871  1AA0  1E11               	btfss	17,4	;volatile
 15872  1AA1  2A9F               	goto	l715
 15873                           
 15874                           ;mcc_generated_files/eusart.c: 166:     TXREG = txData;
 15875  1AA2  0021               	movlb	1	; select bank1
 15876  1AA3  0821               	movf	EUSART_Write@txData^(0+128),w
 15877  1AA4  0023               	movlb	3	; select bank3
 15878  1AA5  009A               	movwf	26	;volatile
 15879  1AA6  0008               	return
 15880  1AA7                     __end_of_EUSART_Write:	
 15881                           
 15882                           	psect	text95
 15883  1D7D                     __ptext95:	
 15884 ;; *************** function _PROCESS_RELAY *****************
 15885 ;; Defined at:
 15886 ;;		line 15 in file "main.c"
 15887 ;; Parameters:    Size  Location     Type
 15888 ;;  relay_1         1    wreg     _Bool 
 15889 ;;  relay_2         1    1[BANK1 ] _Bool 
 15890 ;;  relay_3         1    2[BANK1 ] _Bool 
 15891 ;; Auto vars:     Size  Location     Type
 15892 ;;  relay_1         1    3[BANK1 ] _Bool 
 15893 ;; Return value:  Size  Location     Type
 15894 ;;                  1    wreg      void 
 15895 ;; Registers used:
 15896 ;;		wreg, status,2, status,0
 15897 ;; Tracked objects:
 15898 ;;		On entry : 0/0
 15899 ;;		On exit  : 0/0
 15900 ;;		Unchanged: 0/0
 15901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15902 ;;      Params:         0       0       2       0       0       0       0       0
 15903 ;;      Locals:         0       0       1       0       0       0       0       0
 15904 ;;      Temps:          0       0       0       0       0       0       0       0
 15905 ;;      Totals:         0       0       3       0       0       0       0       0
 15906 ;;Total ram usage:        3 bytes
 15907 ;; Hardware stack levels used:    1
 15908 ;; Hardware stack levels required when called:   12
 15909 ;; This function calls:
 15910 ;;		Nothing
 15911 ;; This function is called by:
 15912 ;;		_myButtonPressedCallback
 15913 ;;		_DATA_PROCESS
 15914 ;; This function uses a non-reentrant model
 15915 ;;
 15916                           
 15917                           
 15918                           ;psect for function _PROCESS_RELAY
 15919  1D7D                     _PROCESS_RELAY:	
 15920                           
 15921                           ;incstack = 0
 15922 ;; hardware stack exceeded
 15923                           ; Regs used in _PROCESS_RELAY: [wreg+status,2+status,0]
 15924                           ;PROCESS_RELAY@relay_1 stored from wreg
 15925  1D7D  0021               	movlb	1	; select bank1
 15926  1D7E  00A3               	movwf	PROCESS_RELAY@relay_1^(0+128)
 15927                           
 15928                           ;main.c: 15: void PROCESS_RELAY(_Bool relay_1,_Bool relay_2,_Bool relay_3);main.c: 16: {
      +                          ;main.c: 17:     if(relay_1)
 15929  1D7F  0823               	movf	PROCESS_RELAY@relay_1^(0+128),w
 15930  1D80  1903               	btfsc	3,2
 15931  1D81  2D85               	goto	l1064
 15932                           
 15933                           ;main.c: 18:     {;main.c: 19:         do { LATAbits.LATA5 = 0; } while(0);
 15934  1D82  0022               	movlb	2	; select bank2
 15935  1D83  128C               	bcf	12,5	;volatile
 15936  1D84  2D87               	goto	l7496
 15937  1D85                     l1064:	
 15938                           ;main.c: 22:     {;main.c: 23:         do { LATAbits.LATA5 = 1; } while(0);
 15939                           
 15940  1D85  0022               	movlb	2	; select bank2
 15941  1D86  168C               	bsf	12,5	;volatile
 15942  1D87                     l7496:	
 15943                           
 15944                           ;main.c: 26:     if(relay_2)
 15945  1D87  0021               	movlb	1	; select bank1
 15946  1D88  0821               	movf	PROCESS_RELAY@relay_2^(0+128),w
 15947  1D89  1903               	btfsc	3,2
 15948  1D8A  2D8E               	goto	l1070
 15949                           
 15950                           ;main.c: 27:     {;main.c: 28:         do { LATAbits.LATA4 = 0; } while(0);
 15951  1D8B  0022               	movlb	2	; select bank2
 15952  1D8C  120C               	bcf	12,4	;volatile
 15953  1D8D  2D90               	goto	l7498
 15954  1D8E                     l1070:	
 15955                           ;main.c: 31:     {;main.c: 32:         do { LATAbits.LATA4 = 1; } while(0);
 15956                           
 15957  1D8E  0022               	movlb	2	; select bank2
 15958  1D8F  160C               	bsf	12,4	;volatile
 15959  1D90                     l7498:	
 15960                           
 15961                           ;main.c: 35:     if(relay_3)
 15962  1D90  0021               	movlb	1	; select bank1
 15963  1D91  0822               	movf	PROCESS_RELAY@relay_3^(0+128),w
 15964  1D92  1903               	btfsc	3,2
 15965  1D93  2D97               	goto	l1076
 15966                           
 15967                           ;main.c: 36:     {;main.c: 37:         do { LATBbits.LATB6 = 0; } while(0);
 15968  1D94  0022               	movlb	2	; select bank2
 15969  1D95  130D               	bcf	13,6	;volatile
 15970  1D96  0008               	return
 15971  1D97                     l1076:	
 15972                           ;main.c: 40:     {;main.c: 41:         do { LATBbits.LATB6 = 1; } while(0);
 15973                           
 15974  1D97  0022               	movlb	2	; select bank2
 15975  1D98  170D               	bsf	13,6	;volatile
 15976  1D99  0008               	return
 15977  1D9A                     __end_of_PROCESS_RELAY:	
 15978                           
 15979                           	psect	text96
 15980  1213                     __ptext96:	
 15981 ;; *************** function _LED_PROCESS *****************
 15982 ;; Defined at:
 15983 ;;		line 14 in file "led.c"
 15984 ;; Parameters:    Size  Location     Type
 15985 ;;  led_name        1    wreg     unsigned char 
 15986 ;;  blue            1    1[BANK1 ] _Bool 
 15987 ;;  red             1    2[BANK1 ] _Bool 
 15988 ;; Auto vars:     Size  Location     Type
 15989 ;;  led_name        1    5[BANK1 ] unsigned char 
 15990 ;; Return value:  Size  Location     Type
 15991 ;;                  1    wreg      void 
 15992 ;; Registers used:
 15993 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15994 ;; Tracked objects:
 15995 ;;		On entry : 0/0
 15996 ;;		On exit  : 0/0
 15997 ;;		Unchanged: 0/0
 15998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15999 ;;      Params:         0       0       2       0       0       0       0       0
 16000 ;;      Locals:         0       0       1       0       0       0       0       0
 16001 ;;      Temps:          0       0       2       0       0       0       0       0
 16002 ;;      Totals:         0       0       5       0       0       0       0       0
 16003 ;;Total ram usage:        5 bytes
 16004 ;; Hardware stack levels used:    1
 16005 ;; Hardware stack levels required when called:   12
 16006 ;; This function calls:
 16007 ;;		Nothing
 16008 ;; This function is called by:
 16009 ;;		_main
 16010 ;;		_myButtonPressedCallback
 16011 ;;		_DATA_PROCESS
 16012 ;; This function uses a non-reentrant model
 16013 ;;
 16014                           
 16015                           
 16016                           ;psect for function _LED_PROCESS
 16017  1213                     _LED_PROCESS:	
 16018                           
 16019                           ;incstack = 0
 16020 ;; hardware stack exceeded
 16021                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0]
 16022                           ;LED_PROCESS@led_name stored from wreg
 16023  1213  0021               	movlb	1	; select bank1
 16024  1214  00A5               	movwf	LED_PROCESS@led_name^(0+128)
 16025                           
 16026                           ;led.c: 14: void LED_PROCESS(uint8_t led_name,_Bool blue,_Bool red);led.c: 15: {;led.c: 
      +                          16:     switch(led_name)
 16027  1215  2A4C               	goto	l7516
 16028  1216                     l7502:	
 16029                           
 16030                           ;led.c: 19:         {;led.c: 20:             if(blue) do { LATCbits.LATC3 = 0; } while(0
      +                          );
 16031  1216  0821               	movf	LED_PROCESS@blue^(0+128),w
 16032  1217  1903               	btfsc	3,2
 16033  1218  2A1C               	goto	l1206
 16034  1219  0022               	movlb	2	; select bank2
 16035  121A  118E               	bcf	14,3	;volatile
 16036  121B  2A1E               	goto	l7504
 16037  121C                     l1206:	
 16038  121C  0022               	movlb	2	; select bank2
 16039  121D  158E               	bsf	14,3	;volatile
 16040  121E                     l7504:	
 16041                           
 16042                           ;led.c: 22:             if(red) do { LATCbits.LATC2 = 0; } while(0);
 16043  121E  0021               	movlb	1	; select bank1
 16044  121F  0822               	movf	LED_PROCESS@red^(0+128),w
 16045  1220  1903               	btfsc	3,2
 16046  1221  2A25               	goto	l1212
 16047  1222  0022               	movlb	2	; select bank2
 16048  1223  110E               	bcf	14,2	;volatile
 16049  1224  0008               	return
 16050  1225                     l1212:	
 16051  1225  0022               	movlb	2	; select bank2
 16052  1226  150E               	bsf	14,2	;volatile
 16053  1227  0008               	return
 16054  1228                     l7506:	
 16055                           
 16056                           ;led.c: 27:         {;led.c: 28:             if(blue) do { LATCbits.LATC7 = 0; } while(0
      +                          );
 16057  1228  0821               	movf	LED_PROCESS@blue^(0+128),w
 16058  1229  1903               	btfsc	3,2
 16059  122A  2A2E               	goto	l1220
 16060  122B  0022               	movlb	2	; select bank2
 16061  122C  138E               	bcf	14,7	;volatile
 16062  122D  2A30               	goto	l7508
 16063  122E                     l1220:	
 16064  122E  0022               	movlb	2	; select bank2
 16065  122F  178E               	bsf	14,7	;volatile
 16066  1230                     l7508:	
 16067                           
 16068                           ;led.c: 30:             if(red) do { LATCbits.LATC5 = 0; } while(0);
 16069  1230  0021               	movlb	1	; select bank1
 16070  1231  0822               	movf	LED_PROCESS@red^(0+128),w
 16071  1232  1903               	btfsc	3,2
 16072  1233  2A37               	goto	l1226
 16073  1234  0022               	movlb	2	; select bank2
 16074  1235  128E               	bcf	14,5	;volatile
 16075  1236  0008               	return
 16076  1237                     l1226:	
 16077  1237  0022               	movlb	2	; select bank2
 16078  1238  168E               	bsf	14,5	;volatile
 16079  1239  0008               	return
 16080  123A                     l7510:	
 16081                           
 16082                           ;led.c: 35:         {;led.c: 36:             if(blue) do { LATAbits.LATA1 = 0; } while(0
      +                          );
 16083  123A  0821               	movf	LED_PROCESS@blue^(0+128),w
 16084  123B  1903               	btfsc	3,2
 16085  123C  2A40               	goto	l1233
 16086  123D  0022               	movlb	2	; select bank2
 16087  123E  108C               	bcf	12,1	;volatile
 16088  123F  2A42               	goto	l7512
 16089  1240                     l1233:	
 16090  1240  0022               	movlb	2	; select bank2
 16091  1241  148C               	bsf	12,1	;volatile
 16092  1242                     l7512:	
 16093                           
 16094                           ;led.c: 38:             if(red) do { LATAbits.LATA0 = 0; } while(0);
 16095  1242  0021               	movlb	1	; select bank1
 16096  1243  0822               	movf	LED_PROCESS@red^(0+128),w
 16097  1244  1903               	btfsc	3,2
 16098  1245  2A49               	goto	l1239
 16099  1246  0022               	movlb	2	; select bank2
 16100  1247  100C               	bcf	12,0	;volatile
 16101  1248  0008               	return
 16102  1249                     l1239:	
 16103  1249  0022               	movlb	2	; select bank2
 16104  124A  140C               	bsf	12,0	;volatile
 16105  124B  0008               	return
 16106  124C                     l7516:	
 16107  124C  0825               	movf	LED_PROCESS@led_name^(0+128),w
 16108  124D  00A3               	movwf	??_LED_PROCESS^(0+128)
 16109  124E  01A4               	clrf	(??_LED_PROCESS^(0+128)+1)
 16110                           
 16111                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16112                           ; Switch size 1, requested type "simple"
 16113                           ; Number of cases is 1, Range of values is 0 to 0
 16114                           ; switch strategies available:
 16115                           ; Name         Instructions Cycles
 16116                           ; simple_byte            4     3 (average)
 16117                           ; direct_byte            8     6 (fixed)
 16118                           ; jumptable            260     6 (fixed)
 16119                           ;	Chosen strategy is simple_byte
 16120  124F  0824               	movf	(??_LED_PROCESS+1)^(0+128),w
 16121  1250  3A00               	xorlw	0	; case 0
 16122  1251  1903               	skipnz
 16123  1252  2A54               	goto	l8960
 16124  1253  2A5F               	goto	l1242
 16125  1254                     l8960:	
 16126                           
 16127                           ; Switch size 1, requested type "simple"
 16128                           ; Number of cases is 3, Range of values is 1 to 3
 16129                           ; switch strategies available:
 16130                           ; Name         Instructions Cycles
 16131                           ; simple_byte           10     6 (average)
 16132                           ; direct_byte           15     9 (fixed)
 16133                           ; jumptable            263     9 (fixed)
 16134                           ;	Chosen strategy is simple_byte
 16135  1254  0823               	movf	??_LED_PROCESS^(0+128),w
 16136  1255  3A01               	xorlw	1	; case 1
 16137  1256  1903               	skipnz
 16138  1257  2A16               	goto	l7502
 16139  1258  3A03               	xorlw	3	; case 2
 16140  1259  1903               	skipnz
 16141  125A  2A28               	goto	l7506
 16142  125B  3A01               	xorlw	1	; case 3
 16143  125C  1903               	skipnz
 16144  125D  2A3A               	goto	l7510
 16145  125E  2A5F               	goto	l1242
 16146  125F                     l1242:	
 16147  125F  0008               	return
 16148  1260                     __end_of_LED_PROCESS:	
 16149                           
 16150                           	psect	intentry
 16151  0004                     __pintentry:	
 16152 ;; *************** function _INTERRUPT_InterruptManager *****************
 16153 ;; Defined at:
 16154 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 16155 ;; Parameters:    Size  Location     Type
 16156 ;;		None
 16157 ;; Auto vars:     Size  Location     Type
 16158 ;;		None
 16159 ;; Return value:  Size  Location     Type
 16160 ;;                  1    wreg      void 
 16161 ;; Registers used:
 16162 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16163 ;; Tracked objects:
 16164 ;;		On entry : 0/0
 16165 ;;		On exit  : 0/0
 16166 ;;		Unchanged: 0/0
 16167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16168 ;;      Params:         0       0       0       0       0       0       0       0
 16169 ;;      Locals:         0       0       0       0       0       0       0       0
 16170 ;;      Temps:          0       0       0       0       0       0       0       0
 16171 ;;      Totals:         0       0       0       0       0       0       0       0
 16172 ;;Total ram usage:        0 bytes
 16173 ;; Hardware stack levels used:    1
 16174 ;; Hardware stack levels required when called:   11
 16175 ;; This function calls:
 16176 ;;		Absolute function
 16177 ;;		_EUSART_Receive_ISR
 16178 ;;		_TMR0_ISR
 16179 ;;		_TMR1_ISR
 16180 ;; This function is called by:
 16181 ;;		Interrupt level 1
 16182 ;; This function uses a non-reentrant model
 16183 ;;
 16184                           
 16185  0004                     _INTERRUPT_InterruptManager:	
 16186                           
 16187                           ;incstack = 0
 16188 ;; hardware stack exceeded
 16189  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 16190                           
 16191                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16192  0005  3180               	pagesel	$
 16193                           
 16194                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 16195  0006  1A8B               	btfsc	11,5	;volatile
 16196  0007  1D0B               	btfss	11,2	;volatile
 16197  0008  280D               	goto	i1l805
 16198                           
 16199                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 16200  0009  319C  2406  3180   	fcall	_TMR0_ISR
 16201                           
 16202                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 16203  000C  2824               	goto	i1l813
 16204  000D                     i1l805:	
 16205                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 16206                           
 16207  000D  1F0B               	btfss	11,6	;volatile
 16208  000E  2824               	goto	i1l813
 16209                           
 16210                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 16211  000F  0021               	movlb	1	; select bank1
 16212  0010  1E91               	btfss	17,5	;volatile
 16213  0011  281C               	goto	i1l808
 16214  0012  0020               	movlb	0	; select bank0
 16215  0013  1E91               	btfss	17,5	;volatile
 16216  0014  281C               	goto	i1l808
 16217                           
 16218                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 16219  0015  0022               	movlb	2	; select bank2
 16220  0016  0864               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 16221  0017  008A               	movwf	10
 16222  0018  0863               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 16223  0019  000A               	callw
 16224  001A  3180               	pagesel	$
 16225                           
 16226                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 16227  001B  2824               	goto	i1l813
 16228  001C                     i1l808:	
 16229                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 16230                           
 16231  001C  0021               	movlb	1	; select bank1
 16232  001D  1C11               	btfss	17,0	;volatile
 16233  001E  2824               	goto	i1l813
 16234  001F  0020               	movlb	0	; select bank0
 16235  0020  1C11               	btfss	17,0	;volatile
 16236  0021  2824               	goto	i1l813
 16237                           
 16238                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             TMR1_ISR();
 16239  0022  319F  27D0         	fcall	_TMR1_ISR
 16240  0024                     i1l813:	
 16241                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 16242                           
 16243                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 16244                           
 16245  0024  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 16246  0025  0009               	retfie
 16247  0026                     __end_of_INTERRUPT_InterruptManager:	
 16248                           
 16249                           	psect	text98
 16250  1FD0                     __ptext98:	
 16251 ;; *************** function _TMR1_ISR *****************
 16252 ;; Defined at:
 16253 ;;		line 161 in file "mcc_generated_files/tmr1.c"
 16254 ;; Parameters:    Size  Location     Type
 16255 ;;		None
 16256 ;; Auto vars:     Size  Location     Type
 16257 ;;		None
 16258 ;; Return value:  Size  Location     Type
 16259 ;;                  1    wreg      void 
 16260 ;; Registers used:
 16261 ;;		wreg, status,2, status,0, pclath, cstack
 16262 ;; Tracked objects:
 16263 ;;		On entry : 0/0
 16264 ;;		On exit  : 0/0
 16265 ;;		Unchanged: 0/0
 16266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16267 ;;      Params:         0       0       0       0       0       0       0       0
 16268 ;;      Locals:         0       0       0       0       0       0       0       0
 16269 ;;      Temps:          1       0       0       0       0       0       0       0
 16270 ;;      Totals:         1       0       0       0       0       0       0       0
 16271 ;;Total ram usage:        1 bytes
 16272 ;; Hardware stack levels used:    1
 16273 ;; Hardware stack levels required when called:    2
 16274 ;; This function calls:
 16275 ;;		_TMR1_CallBack
 16276 ;;		_TMR1_WriteTimer
 16277 ;; This function is called by:
 16278 ;;		_INTERRUPT_InterruptManager
 16279 ;; This function uses a non-reentrant model
 16280 ;;
 16281                           
 16282                           
 16283                           ;psect for function _TMR1_ISR
 16284  1FD0                     _TMR1_ISR:	
 16285                           
 16286                           ;mcc_generated_files/tmr1.c: 163:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr1.c: 166:     PIR1bits.TMR1IF = 0;
 16287                           
 16288                           ;incstack = 0
 16289 ;; hardware stack exceeded
 16290                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 16291  1FD0  0020               	movlb	0	; select bank0
 16292  1FD1  1011               	bcf	17,0	;volatile
 16293                           
 16294                           ;mcc_generated_files/tmr1.c: 167:     TMR1_WriteTimer(timer1ReloadVal);
 16295  1FD2  0022               	movlb	2	; select bank2
 16296  1FD3  0860               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 16297  1FD4  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 16298  1FD5  085F               	movf	_timer1ReloadVal^(0+256),w	;volatile
 16299  1FD6  00F0               	movwf	TMR1_WriteTimer@timerVal
 16300  1FD7  319A  22D7  319F   	fcall	_TMR1_WriteTimer
 16301                           
 16302                           ;mcc_generated_files/tmr1.c: 170:     if(config_status == 1)
 16303  1FDA  0022               	movlb	2	; select bank2
 16304  1FDB  033A               	decf	_config_status^(0+256),w	;volatile
 16305  1FDC  1D03               	btfss	3,2
 16306  1FDD  2FF4               	goto	i1l6158
 16307                           
 16308                           ;mcc_generated_files/tmr1.c: 171:     {;mcc_generated_files/tmr1.c: 172:         if (++C
      +                          ountCallBack >= 3000)
 16309  1FDE  3001               	movlw	1
 16310  1FDF  07B0               	addwf	TMR1_ISR@CountCallBack^(0+256),f	;volatile
 16311  1FE0  3000               	movlw	0
 16312  1FE1  3DB1               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+256),f	;volatile
 16313  1FE2  300B               	movlw	11
 16314  1FE3  0231               	subwf	(TMR1_ISR@CountCallBack+1)^(0+256),w	;volatile
 16315  1FE4  30B8               	movlw	184
 16316  1FE5  1903               	skipnz
 16317  1FE6  0230               	subwf	TMR1_ISR@CountCallBack^(0+256),w	;volatile
 16318  1FE7  1C03               	skipc
 16319  1FE8  0008               	return
 16320                           
 16321                           ;mcc_generated_files/tmr1.c: 173:         {;mcc_generated_files/tmr1.c: 176:            
      +                           config_status = 0;
 16322  1FE9  01BA               	clrf	_config_status^(0+256)	;volatile
 16323                           
 16324                           ;mcc_generated_files/tmr1.c: 177:             rest = 1;
 16325  1FEA  3001               	movlw	1
 16326  1FEB  00F2               	movwf	??_TMR1_ISR
 16327  1FEC  0872               	movf	??_TMR1_ISR,w
 16328  1FED  00B8               	movwf	_rest^(0+256)	;volatile
 16329  1FEE                     i1l6154:	
 16330                           
 16331                           ;mcc_generated_files/tmr1.c: 178:             TMR1_CallBack();
 16332  1FEE  319A  22BC         	fcall	_TMR1_CallBack
 16333                           
 16334                           ;mcc_generated_files/tmr1.c: 181:             CountCallBack = 0;
 16335  1FF0  0022               	movlb	2	; select bank2
 16336  1FF1  01B0               	clrf	TMR1_ISR@CountCallBack^(0+256)	;volatile
 16337  1FF2  01B1               	clrf	(TMR1_ISR@CountCallBack+1)^(0+256)	;volatile
 16338  1FF3  0008               	return
 16339  1FF4                     i1l6158:	
 16340                           
 16341                           ;mcc_generated_files/tmr1.c: 185:     {;mcc_generated_files/tmr1.c: 186:         if (++C
      +                          ountCallBack >= 10)
 16342  1FF4  3001               	movlw	1
 16343  1FF5  07B0               	addwf	TMR1_ISR@CountCallBack^(0+256),f	;volatile
 16344  1FF6  3000               	movlw	0
 16345  1FF7  3DB1               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+256),f	;volatile
 16346  1FF8  3000               	movlw	0
 16347  1FF9  0231               	subwf	(TMR1_ISR@CountCallBack+1)^(0+256),w	;volatile
 16348  1FFA  300A               	movlw	10
 16349  1FFB  1903               	skipnz
 16350  1FFC  0230               	subwf	TMR1_ISR@CountCallBack^(0+256),w	;volatile
 16351  1FFD  1C03               	skipc
 16352  1FFE  0008               	return
 16353  1FFF  2FEE               	goto	i1l6154
 16354  2000                     __end_of_TMR1_ISR:	
 16355                           
 16356                           	psect	text99
 16357  1AD7                     __ptext99:	
 16358 ;; *************** function _TMR1_WriteTimer *****************
 16359 ;; Defined at:
 16360 ;;		line 124 in file "mcc_generated_files/tmr1.c"
 16361 ;; Parameters:    Size  Location     Type
 16362 ;;  timerVal        2    0[COMMON] unsigned short 
 16363 ;; Auto vars:     Size  Location     Type
 16364 ;;		None
 16365 ;; Return value:  Size  Location     Type
 16366 ;;                  1    wreg      void 
 16367 ;; Registers used:
 16368 ;;		wreg, status,2
 16369 ;; Tracked objects:
 16370 ;;		On entry : 0/0
 16371 ;;		On exit  : 0/0
 16372 ;;		Unchanged: 0/0
 16373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16374 ;;      Params:         2       0       0       0       0       0       0       0
 16375 ;;      Locals:         0       0       0       0       0       0       0       0
 16376 ;;      Temps:          0       0       0       0       0       0       0       0
 16377 ;;      Totals:         2       0       0       0       0       0       0       0
 16378 ;;Total ram usage:        2 bytes
 16379 ;; Hardware stack levels used:    1
 16380 ;; This function calls:
 16381 ;;		Nothing
 16382 ;; This function is called by:
 16383 ;;		_TMR1_ISR
 16384 ;;		_TMR1_Reload
 16385 ;; This function uses a non-reentrant model
 16386 ;;
 16387                           
 16388                           
 16389                           ;psect for function _TMR1_WriteTimer
 16390  1AD7                     _TMR1_WriteTimer:	
 16391                           
 16392                           ;mcc_generated_files/tmr1.c: 124: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 125: {;mcc_generated_files/tmr1.c: 126:     if (T1CONbits.nT1SYNC == 1)
 16393                           
 16394                           ;incstack = 0
 16395 ;; hardware stack exceeded
 16396                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 16397  1AD7  0020               	movlb	0	; select bank0
 16398  1AD8  1D18               	btfss	24,2	;volatile
 16399  1AD9  2AE1               	goto	i1l6028
 16400                           
 16401                           ;mcc_generated_files/tmr1.c: 127:     {;mcc_generated_files/tmr1.c: 129:         T1CONbi
      +                          ts.TMR1ON = 0;
 16402  1ADA  1018               	bcf	24,0	;volatile
 16403                           
 16404                           ;mcc_generated_files/tmr1.c: 132:         TMR1H = (timerVal >> 8);
 16405  1ADB  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 16406  1ADC  0097               	movwf	23	;volatile
 16407                           
 16408                           ;mcc_generated_files/tmr1.c: 133:         TMR1L = timerVal;
 16409  1ADD  0870               	movf	TMR1_WriteTimer@timerVal,w
 16410  1ADE  0096               	movwf	22	;volatile
 16411                           
 16412                           ;mcc_generated_files/tmr1.c: 136:         T1CONbits.TMR1ON =1;
 16413  1ADF  1418               	bsf	24,0	;volatile
 16414                           
 16415                           ;mcc_generated_files/tmr1.c: 137:     }
 16416  1AE0  0008               	return
 16417  1AE1                     i1l6028:	
 16418                           
 16419                           ;mcc_generated_files/tmr1.c: 139:     {;mcc_generated_files/tmr1.c: 141:         TMR1H =
      +                           (timerVal >> 8);
 16420  1AE1  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 16421  1AE2  0097               	movwf	23	;volatile
 16422                           
 16423                           ;mcc_generated_files/tmr1.c: 142:         TMR1L = timerVal;
 16424  1AE3  0870               	movf	TMR1_WriteTimer@timerVal,w
 16425  1AE4  0096               	movwf	22	;volatile
 16426  1AE5  0008               	return
 16427  1AE6                     __end_of_TMR1_WriteTimer:	
 16428                           
 16429                           	psect	text100
 16430  1ABC                     __ptext100:	
 16431 ;; *************** function _TMR1_CallBack *****************
 16432 ;; Defined at:
 16433 ;;		line 197 in file "mcc_generated_files/tmr1.c"
 16434 ;; Parameters:    Size  Location     Type
 16435 ;;		None
 16436 ;; Auto vars:     Size  Location     Type
 16437 ;;		None
 16438 ;; Return value:  Size  Location     Type
 16439 ;;                  1    wreg      void 
 16440 ;; Registers used:
 16441 ;;		wreg, status,2, status,0, pclath, cstack
 16442 ;; Tracked objects:
 16443 ;;		On entry : 0/0
 16444 ;;		On exit  : 0/0
 16445 ;;		Unchanged: 0/0
 16446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16447 ;;      Params:         0       0       0       0       0       0       0       0
 16448 ;;      Locals:         0       0       0       0       0       0       0       0
 16449 ;;      Temps:          0       0       0       0       0       0       0       0
 16450 ;;      Totals:         0       0       0       0       0       0       0       0
 16451 ;;Total ram usage:        0 bytes
 16452 ;; Hardware stack levels used:    1
 16453 ;; Hardware stack levels required when called:    1
 16454 ;; This function calls:
 16455 ;;		Absolute function
 16456 ;;		_TMR1_DefaultInterruptHandler
 16457 ;; This function is called by:
 16458 ;;		_TMR1_ISR
 16459 ;; This function uses a non-reentrant model
 16460 ;;
 16461                           
 16462                           
 16463                           ;psect for function _TMR1_CallBack
 16464  1ABC                     _TMR1_CallBack:	
 16465                           
 16466                           ;mcc_generated_files/tmr1.c: 200:     INTCONbits.TMR0IE = 0;
 16467                           
 16468                           ;incstack = 0
 16469 ;; hardware stack exceeded
 16470                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 16471  1ABC  128B               	bcf	11,5	;volatile
 16472                           
 16473                           ;mcc_generated_files/tmr1.c: 201:     check_request = 0;
 16474  1ABD  0022               	movlb	2	; select bank2
 16475  1ABE  01B9               	clrf	_check_request^(0+256)	;volatile
 16476                           
 16477                           ;mcc_generated_files/tmr1.c: 202:     if(TMR1_InterruptHandler)
 16478  1ABF  085D               	movf	_TMR1_InterruptHandler^(0+256),w
 16479  1AC0  045E               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 16480  1AC1  1903               	btfsc	3,2
 16481  1AC2  0008               	return
 16482                           
 16483                           ;mcc_generated_files/tmr1.c: 203:     {;mcc_generated_files/tmr1.c: 204:         TMR1_In
      +                          terruptHandler();
 16484  1AC3  085E               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 16485  1AC4  008A               	movwf	10
 16486  1AC5  085D               	movf	_TMR1_InterruptHandler^(0+256),w
 16487  1AC6  000A               	callw
 16488  1AC7  319A               	pagesel	$
 16489  1AC8  0008               	return
 16490  1AC9                     __end_of_TMR1_CallBack:	
 16491                           
 16492                           	psect	text101
 16493  19DC                     __ptext101:	
 16494 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 16495 ;; Defined at:
 16496 ;;		line 212 in file "mcc_generated_files/tmr1.c"
 16497 ;; Parameters:    Size  Location     Type
 16498 ;;		None
 16499 ;; Auto vars:     Size  Location     Type
 16500 ;;		None
 16501 ;; Return value:  Size  Location     Type
 16502 ;;                  1    wreg      void 
 16503 ;; Registers used:
 16504 ;;		None
 16505 ;; Tracked objects:
 16506 ;;		On entry : 0/0
 16507 ;;		On exit  : 0/0
 16508 ;;		Unchanged: 0/0
 16509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16510 ;;      Params:         0       0       0       0       0       0       0       0
 16511 ;;      Locals:         0       0       0       0       0       0       0       0
 16512 ;;      Temps:          0       0       0       0       0       0       0       0
 16513 ;;      Totals:         0       0       0       0       0       0       0       0
 16514 ;;Total ram usage:        0 bytes
 16515 ;; Hardware stack levels used:    1
 16516 ;; This function calls:
 16517 ;;		Nothing
 16518 ;; This function is called by:
 16519 ;;		_TMR1_Initialize
 16520 ;;		_TMR1_CallBack
 16521 ;; This function uses a non-reentrant model
 16522 ;;
 16523                           
 16524                           
 16525                           ;psect for function _TMR1_DefaultInterruptHandler
 16526  19DC                     _TMR1_DefaultInterruptHandler:	
 16527                           
 16528                           ;incstack = 0
 16529 ;; hardware stack exceeded
 16530                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 16531  19DC  0008               	return
 16532  19DD                     __end_of_TMR1_DefaultInterruptHandler:	
 16533                           
 16534                           	psect	text102
 16535  1C06                     __ptext102:	
 16536 ;; *************** function _TMR0_ISR *****************
 16537 ;; Defined at:
 16538 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;		None
 16541 ;; Auto vars:     Size  Location     Type
 16542 ;;		None
 16543 ;; Return value:  Size  Location     Type
 16544 ;;                  1    wreg      void 
 16545 ;; Registers used:
 16546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16547 ;; Tracked objects:
 16548 ;;		On entry : 0/0
 16549 ;;		On exit  : 0/0
 16550 ;;		Unchanged: 0/0
 16551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16552 ;;      Params:         0       0       0       0       0       0       0       0
 16553 ;;      Locals:         0       0       0       0       0       0       0       0
 16554 ;;      Temps:          0       0       0       0       0       0       0       0
 16555 ;;      Totals:         0       0       0       0       0       0       0       0
 16556 ;;Total ram usage:        0 bytes
 16557 ;; Hardware stack levels used:    1
 16558 ;; Hardware stack levels required when called:   10
 16559 ;; This function calls:
 16560 ;;		_TMR0_CallBack
 16561 ;; This function is called by:
 16562 ;;		_INTERRUPT_InterruptManager
 16563 ;; This function uses a non-reentrant model
 16564 ;;
 16565                           
 16566                           
 16567                           ;psect for function _TMR0_ISR
 16568  1C06                     _TMR0_ISR:	
 16569                           
 16570                           ;mcc_generated_files/tmr0.c: 111:     static volatile uint16_t CountCallBack = 0;;mcc_ge
      +                          nerated_files/tmr0.c: 114:     INTCONbits.TMR0IF = 0;
 16571                           
 16572                           ;incstack = 0
 16573 ;; hardware stack exceeded
 16574                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16575  1C06  110B               	bcf	11,2	;volatile
 16576                           
 16577                           ;mcc_generated_files/tmr0.c: 116:     TMR0 = timer0ReloadVal;
 16578  1C07  0022               	movlb	2	; select bank2
 16579  1C08  0865               	movf	_timer0ReloadVal^(0+256),w	;volatile
 16580  1C09  0020               	movlb	0	; select bank0
 16581  1C0A  0095               	movwf	21	;volatile
 16582                           
 16583                           ;mcc_generated_files/tmr0.c: 119:     if (++CountCallBack >= 1000)
 16584  1C0B  3001               	movlw	1
 16585  1C0C  0022               	movlb	2	; select bank2
 16586  1C0D  07B2               	addwf	TMR0_ISR@CountCallBack^(0+256),f	;volatile
 16587  1C0E  3000               	movlw	0
 16588  1C0F  3DB3               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+256),f	;volatile
 16589  1C10  3003               	movlw	3
 16590  1C11  0233               	subwf	(TMR0_ISR@CountCallBack+1)^(0+256),w	;volatile
 16591  1C12  30E8               	movlw	232
 16592  1C13  1903               	skipnz
 16593  1C14  0232               	subwf	TMR0_ISR@CountCallBack^(0+256),w	;volatile
 16594  1C15  1C03               	skipc
 16595  1C16  0008               	return
 16596                           
 16597                           ;mcc_generated_files/tmr0.c: 120:     {;mcc_generated_files/tmr0.c: 122:         TMR0_Ca
      +                          llBack();
 16598  1C17  319C  24C5         	fcall	_TMR0_CallBack
 16599                           
 16600                           ;mcc_generated_files/tmr0.c: 125:         CountCallBack = 0;
 16601  1C19  0022               	movlb	2	; select bank2
 16602  1C1A  01B2               	clrf	TMR0_ISR@CountCallBack^(0+256)	;volatile
 16603  1C1B  01B3               	clrf	(TMR0_ISR@CountCallBack+1)^(0+256)	;volatile
 16604  1C1C  0008               	return
 16605  1C1D                     __end_of_TMR0_ISR:	
 16606                           
 16607                           	psect	text103
 16608  1CC5                     __ptext103:	
 16609 ;; *************** function _TMR0_CallBack *****************
 16610 ;; Defined at:
 16611 ;;		line 131 in file "mcc_generated_files/tmr0.c"
 16612 ;; Parameters:    Size  Location     Type
 16613 ;;		None
 16614 ;; Auto vars:     Size  Location     Type
 16615 ;;		None
 16616 ;; Return value:  Size  Location     Type
 16617 ;;                  1    wreg      void 
 16618 ;; Registers used:
 16619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16620 ;; Tracked objects:
 16621 ;;		On entry : 0/0
 16622 ;;		On exit  : 0/0
 16623 ;;		Unchanged: 0/0
 16624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16625 ;;      Params:         0       0       0       0       0       0       0       0
 16626 ;;      Locals:         0       0       0       0       0       0       0       0
 16627 ;;      Temps:          0       0       1       0       0       0       0       0
 16628 ;;      Totals:         0       0       1       0       0       0       0       0
 16629 ;;Total ram usage:        1 bytes
 16630 ;; Hardware stack levels used:    1
 16631 ;; Hardware stack levels required when called:    9
 16632 ;; This function calls:
 16633 ;;		Absolute function
 16634 ;;		_TMR0_DefaultInterruptHandler
 16635 ;;		i1_printf
 16636 ;; This function is called by:
 16637 ;;		_TMR0_ISR
 16638 ;; This function uses a non-reentrant model
 16639 ;;
 16640                           
 16641                           
 16642                           ;psect for function _TMR0_CallBack
 16643  1CC5                     _TMR0_CallBack:	
 16644                           
 16645                           ;mcc_generated_files/tmr0.c: 135:     printf("SMART CONFIG\n");
 16646                           
 16647                           ;incstack = 0
 16648 ;; hardware stack exceeded
 16649                           ; Regs used in _TMR0_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16650  1CC5  3030               	movlw	low (STR_1| (0+32768))
 16651  1CC6  0020               	movlb	0	; select bank0
 16652  1CC7  00E9               	movwf	i1printf@fmt
 16653  1CC8  3098               	movlw	high (STR_1| (0+32768))
 16654  1CC9  00EA               	movwf	i1printf@fmt+1
 16655  1CCA  319B  2354  319C   	fcall	i1_printf
 16656                           
 16657                           ;mcc_generated_files/tmr0.c: 136:     config_status = 1;
 16658  1CCD  3001               	movlw	1
 16659  1CCE  0021               	movlb	1	; select bank1
 16660  1CCF  00A0               	movwf	??_TMR0_CallBack^(0+128)
 16661  1CD0  0820               	movf	??_TMR0_CallBack^(0+128),w
 16662  1CD1  0022               	movlb	2	; select bank2
 16663  1CD2  00BA               	movwf	_config_status^(0+256)	;volatile
 16664                           
 16665                           ;mcc_generated_files/tmr0.c: 137:     INTCONbits.TMR0IE = 0;
 16666  1CD3  128B               	bcf	11,5	;volatile
 16667                           
 16668                           ;mcc_generated_files/tmr0.c: 138:     if(TMR0_InterruptHandler)
 16669  1CD4  0861               	movf	_TMR0_InterruptHandler^(0+256),w
 16670  1CD5  0462               	iorwf	(_TMR0_InterruptHandler+1)^(0+256),w
 16671  1CD6  1903               	btfsc	3,2
 16672  1CD7  0008               	return
 16673                           
 16674                           ;mcc_generated_files/tmr0.c: 139:     {;mcc_generated_files/tmr0.c: 140:         TMR0_In
      +                          terruptHandler();
 16675  1CD8  0862               	movf	(_TMR0_InterruptHandler+1)^(0+256),w
 16676  1CD9  008A               	movwf	10
 16677  1CDA  0861               	movf	_TMR0_InterruptHandler^(0+256),w
 16678  1CDB  000A               	callw
 16679  1CDC  319C               	pagesel	$
 16680  1CDD  0008               	return
 16681  1CDE                     __end_of_TMR0_CallBack:	
 16682                           
 16683                           	psect	text104
 16684  1B54                     __ptext104:	
 16685 ;; *************** function i1_printf *****************
 16686 ;; Defined at:
 16687 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;  fmt             2   73[BANK0 ] PTR const unsigned char 
 16690 ;;		 -> STR_5(6), STR_4(6), STR_3(9), STR_2(3), 
 16691 ;;		 -> STR_1(14), 
 16692 ;; Auto vars:     Size  Location     Type
 16693 ;;  printf          2    0        int 
 16694 ;;  printf          1   77[BANK0 ] PTR void [1]
 16695 ;;		 -> ?i1_printf(2), ?_printf(2), 
 16696 ;; Return value:  Size  Location     Type
 16697 ;;                  2   73[BANK0 ] int 
 16698 ;; Registers used:
 16699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16700 ;; Tracked objects:
 16701 ;;		On entry : 0/0
 16702 ;;		On exit  : 0/0
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16705 ;;      Params:         0       2       0       0       0       0       0       0
 16706 ;;      Locals:         0       3       0       0       0       0       0       0
 16707 ;;      Temps:          0       0       0       0       0       0       0       0
 16708 ;;      Totals:         0       5       0       0       0       0       0       0
 16709 ;;Total ram usage:        5 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; Hardware stack levels required when called:    8
 16712 ;; This function calls:
 16713 ;;		i1_vfprintf
 16714 ;; This function is called by:
 16715 ;;		_TMR0_CallBack
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719                           
 16720                           ;psect for function i1_printf
 16721  1B54                     i1_printf:	
 16722                           
 16723                           ;incstack = 0
 16724 ;; hardware stack exceeded
 16725                           ; Regs used in i1_printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16726  1B54  306B               	movlw	low (?i1_printf+2)
 16727  1B55  0020               	movlb	0	; select bank0
 16728  1B56  00ED               	movwf	i1printf@ap
 16729  1B57  3000               	movlw	high (?i1_printf+2)
 16730  1B58  00EE               	movwf	i1printf@ap+1
 16731  1B59  086A               	movf	i1printf@fmt+1,w
 16732  1B5A  00E2               	movwf	i1vfprintf@fmt+1
 16733  1B5B  0869               	movf	i1printf@fmt,w
 16734  1B5C  00E1               	movwf	i1vfprintf@fmt
 16735  1B5D  306D               	movlw	low i1printf@ap
 16736  1B5E  00E3               	movwf	i1vfprintf@ap
 16737  1B5F  3000               	movlw	high i1printf@ap
 16738  1B60  00E4               	movwf	i1vfprintf@ap+1
 16739  1B61  3000               	movlw	0
 16740  1B62  319F  2742         	fcall	i1_vfprintf
 16741  1B64  0008               	return
 16742  1B65                     __end_ofi1_printf:	
 16743                           
 16744                           	psect	text105
 16745  1F42                     __ptext105:	
 16746 ;; *************** function i1_vfprintf *****************
 16747 ;; Defined at:
 16748 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 16749 ;; Parameters:    Size  Location     Type
 16750 ;;  fp              1    wreg     PTR struct _IO_FILE
 16751 ;;		 -> NULL(0), 
 16752 ;;  fmt             2   65[BANK0 ] PTR const unsigned char 
 16753 ;;		 -> STR_5(6), STR_4(6), STR_3(9), STR_2(3), 
 16754 ;;		 -> STR_1(14), 
 16755 ;;  ap              2   67[BANK0 ] PTR PTR void 
 16756 ;;		 -> i1printf@ap(1), printf@ap(1), 
 16757 ;; Auto vars:     Size  Location     Type
 16758 ;;  fp              1   70[BANK0 ] PTR struct _IO_FILE
 16759 ;;		 -> NULL(0), 
 16760 ;;  vfprintf        2   71[BANK0 ] PTR unsigned char 
 16761 ;;		 -> STR_5(6), STR_4(6), STR_3(9), STR_2(3), 
 16762 ;;		 -> STR_1(14), 
 16763 ;; Return value:  Size  Location     Type
 16764 ;;                  2   65[BANK0 ] int 
 16765 ;; Registers used:
 16766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16767 ;; Tracked objects:
 16768 ;;		On entry : 0/0
 16769 ;;		On exit  : 0/0
 16770 ;;		Unchanged: 0/0
 16771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16772 ;;      Params:         0       4       0       0       0       0       0       0
 16773 ;;      Locals:         0       3       0       0       0       0       0       0
 16774 ;;      Temps:          0       1       0       0       0       0       0       0
 16775 ;;      Totals:         0       8       0       0       0       0       0       0
 16776 ;;Total ram usage:        8 bytes
 16777 ;; Hardware stack levels used:    1
 16778 ;; Hardware stack levels required when called:    7
 16779 ;; This function calls:
 16780 ;;		i1_vfpfcnvrt
 16781 ;; This function is called by:
 16782 ;;		i1_printf
 16783 ;; This function uses a non-reentrant model
 16784 ;;
 16785                           
 16786                           
 16787                           ;psect for function i1_vfprintf
 16788  1F42                     i1_vfprintf:	
 16789                           
 16790                           ;incstack = 0
 16791 ;; hardware stack exceeded
 16792                           ; Regs used in i1_vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16793                           ;i1vfprintf@fp stored from wreg
 16794  1F42  0020               	movlb	0	; select bank0
 16795  1F43  00E6               	movwf	i1vfprintf@fp
 16796                           
 16797                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 16798  1F44  0862               	movf	i1vfprintf@fmt+1,w
 16799  1F45  00E8               	movwf	i1vfprintf@cfmt+1
 16800  1F46  0861               	movf	i1vfprintf@fmt,w
 16801  1F47  00E7               	movwf	i1vfprintf@cfmt
 16802                           
 16803                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 16804  1F48  0022               	movlb	2	; select bank2
 16805  1F49  01A4               	clrf	_nout^(0+256)
 16806  1F4A  01A5               	clrf	(_nout+1)^(0+256)
 16807  1F4B                     i1l7964:	
 16808                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 16809                           
 16810                           
 16811                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 16812  1F4B  0020               	movlb	0	; select bank0
 16813  1F4C  0867               	movf	i1vfprintf@cfmt,w
 16814  1F4D  0084               	movwf	4
 16815  1F4E  0868               	movf	i1vfprintf@cfmt+1,w
 16816  1F4F  0085               	movwf	5
 16817  1F50  0012               	moviw fsr0++
 16818  1F51  1903               	btfsc	3,2
 16819  1F52  2F68               	goto	i1l7966
 16820                           
 16821                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 16822  1F53  3067               	movlw	low i1vfprintf@cfmt
 16823  1F54  00CE               	movwf	i1vfpfcnvrt@fmt
 16824  1F55  3000               	movlw	high i1vfprintf@cfmt
 16825  1F56  00CF               	movwf	i1vfpfcnvrt@fmt+1
 16826  1F57  0864               	movf	i1vfprintf@ap+1,w
 16827  1F58  00D1               	movwf	i1vfpfcnvrt@ap+1
 16828  1F59  0863               	movf	i1vfprintf@ap,w
 16829  1F5A  00D0               	movwf	i1vfpfcnvrt@ap
 16830  1F5B  0866               	movf	i1vfprintf@fp,w
 16831  1F5C  318D  25E0  319F   	fcall	i1_vfpfcnvrt
 16832  1F5F  0020               	movlb	0	; select bank0
 16833  1F60  084E               	movf	?i1_vfpfcnvrt,w
 16834  1F61  0022               	movlb	2	; select bank2
 16835  1F62  07A4               	addwf	_nout^(0+256),f
 16836  1F63  0020               	movlb	0	; select bank0
 16837  1F64  084F               	movf	?i1_vfpfcnvrt+1,w
 16838  1F65  0022               	movlb	2	; select bank2
 16839  1F66  3DA5               	addwfc	(_nout+1)^(0+256),f
 16840  1F67  2F4B               	goto	i1l7964
 16841  1F68                     i1l7966:	
 16842                           
 16843                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 16844  1F68  0022               	movlb	2	; select bank2
 16845  1F69  0825               	movf	(_nout+1)^(0+256),w
 16846  1F6A  0020               	movlb	0	; select bank0
 16847  1F6B  00E2               	movwf	?i1_vfprintf+1
 16848  1F6C  0022               	movlb	2	; select bank2
 16849  1F6D  0824               	movf	_nout^(0+256),w
 16850  1F6E  0020               	movlb	0	; select bank0
 16851  1F6F  00E1               	movwf	?i1_vfprintf
 16852  1F70  0008               	return
 16853  1F71                     __end_ofi1_vfprintf:	
 16854                           
 16855                           	psect	text106
 16856  0DE0                     __ptext106:	
 16857 ;; *************** function i1_vfpfcnvrt *****************
 16858 ;; Defined at:
 16859 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 16860 ;; Parameters:    Size  Location     Type
 16861 ;;  fp              1    wreg     PTR struct _IO_FILE
 16862 ;;		 -> NULL(0), 
 16863 ;;  fmt             2   46[BANK0 ] PTR PTR unsigned char 
 16864 ;;		 -> i1vfprintf@cfmt(2), vfprintf@cfmt(2), 
 16865 ;;  ap              2   48[BANK0 ] PTR PTR void 
 16866 ;;		 -> i1printf@ap(1), printf@ap(1), 
 16867 ;; Auto vars:     Size  Location     Type
 16868 ;;  fp              1   64[BANK0 ] PTR struct _IO_FILE
 16869 ;;		 -> NULL(0), 
 16870 ;;  vfpfcnvrt       8   55[BANK0 ] long long 
 16871 ;;  vfpfcnvrt       8    0        unsigned long long 
 16872 ;;  vfpfcnvrt       4    0        unsigned long long 
 16873 ;;  vfpfcnvrt       3    0        unsigned char [3]
 16874 ;;  vfpfcnvrt       2    0        PTR void 
 16875 ;;  vfpfcnvrt       2    0        int 
 16876 ;;  vfpfcnvrt       2    0        int 
 16877 ;;  vfpfcnvrt       2    0        PTR unsigned char 
 16878 ;;  vfpfcnvrt       1   63[BANK0 ] unsigned char 
 16879 ;; Return value:  Size  Location     Type
 16880 ;;                  2   46[BANK0 ] int 
 16881 ;; Registers used:
 16882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16883 ;; Tracked objects:
 16884 ;;		On entry : 0/0
 16885 ;;		On exit  : 0/0
 16886 ;;		Unchanged: 0/0
 16887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16888 ;;      Params:         0       4       0       0       0       0       0       0
 16889 ;;      Locals:         0      10       0       0       0       0       0       0
 16890 ;;      Temps:          0       5       0       0       0       0       0       0
 16891 ;;      Totals:         0      19       0       0       0       0       0       0
 16892 ;;Total ram usage:       19 bytes
 16893 ;; Hardware stack levels used:    1
 16894 ;; Hardware stack levels required when called:    6
 16895 ;; This function calls:
 16896 ;;		i1_ctoa
 16897 ;;		i1_dtoa
 16898 ;;		i1_fputc
 16899 ;; This function is called by:
 16900 ;;		i1_vfprintf
 16901 ;; This function uses a non-reentrant model
 16902 ;;
 16903                           
 16904                           
 16905                           ;psect for function i1_vfpfcnvrt
 16906  0DE0                     i1_vfpfcnvrt:	
 16907                           
 16908                           ;incstack = 0
 16909 ;; hardware stack exceeded
 16910                           ; Regs used in i1_vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16911                           ;i1vfpfcnvrt@fp stored from wreg
 16912  0DE0  0020               	movlb	0	; select bank0
 16913  0DE1  00E0               	movwf	i1vfpfcnvrt@fp
 16914                           
 16915                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 16916  0DE2  084E               	movf	i1vfpfcnvrt@fmt,w
 16917  0DE3  0086               	movwf	6
 16918  0DE4  084F               	movf	i1vfpfcnvrt@fmt+1,w
 16919  0DE5  0087               	movwf	7
 16920  0DE6  3F40               	moviw [0]fsr1
 16921  0DE7  00D2               	movwf	??i1_vfpfcnvrt
 16922  0DE8  3F41               	moviw [1]fsr1
 16923  0DE9  00D3               	movwf	??i1_vfpfcnvrt+1
 16924  0DEA  0852               	movf	??i1_vfpfcnvrt,w
 16925  0DEB  0084               	movwf	4
 16926  0DEC  0853               	movf	??i1_vfpfcnvrt+1,w
 16927  0DED  0085               	movwf	5
 16928  0DEE  0012               	moviw fsr0++
 16929  0DEF  3A25               	xorlw	37
 16930  0DF0  1D03               	btfss	3,2
 16931  0DF1  2ECB               	goto	i1l7790
 16932                           
 16933                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 16934  0DF2  084E               	movf	i1vfpfcnvrt@fmt,w
 16935  0DF3  0086               	movwf	6
 16936  0DF4  084F               	movf	i1vfpfcnvrt@fmt+1,w
 16937  0DF5  0087               	movwf	7
 16938  0DF6  3001               	movlw	1
 16939  0DF7  0781               	addwf	1,f
 16940  0DF8  3141               	addfsr 1,1
 16941  0DF9  1803               	skipnc
 16942  0DFA  0A81               	incf	1,f
 16943                           
 16944                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 16945  0DFB  0022               	movlb	2	; select bank2
 16946  0DFC  01A6               	clrf	_width^(0+256)
 16947  0DFD  01A7               	clrf	(_width+1)^(0+256)
 16948  0DFE  01AA               	clrf	_flags^(0+256)
 16949  0DFF  01AB               	clrf	(_flags+1)^(0+256)
 16950                           
 16951                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 16952  0E00  30FF               	movlw	255
 16953  0E01  00A8               	movwf	_prec^(0+256)
 16954  0E02  30FF               	movlw	255
 16955  0E03  00A9               	movwf	(_prec^(0+256)+1)
 16956                           
 16957                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
 16958  0E04  0020               	movlb	0	; select bank0
 16959  0E05  084E               	movf	i1vfpfcnvrt@fmt,w
 16960  0E06  0086               	movwf	6
 16961  0E07  084F               	movf	i1vfpfcnvrt@fmt+1,w
 16962  0E08  0087               	movwf	7
 16963  0E09  3F40               	moviw [0]fsr1
 16964  0E0A  00D2               	movwf	??i1_vfpfcnvrt
 16965  0E0B  3F41               	moviw [1]fsr1
 16966  0E0C  00D3               	movwf	??i1_vfpfcnvrt+1
 16967  0E0D  0852               	movf	??i1_vfpfcnvrt,w
 16968  0E0E  0084               	movwf	4
 16969  0E0F  0853               	movf	??i1_vfpfcnvrt+1,w
 16970  0E10  0085               	movwf	5
 16971  0E11  0012               	moviw fsr0++
 16972  0E12  3A63               	xorlw	99
 16973  0E13  1D03               	btfss	3,2
 16974  0E14  2E39               	goto	i1l7762
 16975                           
 16976                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
 16977  0E15  084E               	movf	i1vfpfcnvrt@fmt,w
 16978  0E16  0086               	movwf	6
 16979  0E17  084F               	movf	i1vfpfcnvrt@fmt+1,w
 16980  0E18  0087               	movwf	7
 16981  0E19  3001               	movlw	1
 16982  0E1A  0781               	addwf	1,f
 16983  0E1B  3141               	addfsr 1,1
 16984  0E1C  1803               	skipnc
 16985  0E1D  0A81               	incf	1,f
 16986                           
 16987                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
 16988  0E1E  0850               	movf	i1vfpfcnvrt@ap,w
 16989  0E1F  0086               	movwf	6
 16990  0E20  0851               	movf	i1vfpfcnvrt@ap+1,w
 16991  0E21  0087               	movwf	7
 16992  0E22  0801               	movf	1,w
 16993  0E23  0084               	movwf	4
 16994  0E24  3001               	movlw	1	; select bank2/3
 16995  0E25  0085               	movwf	5
 16996  0E26  3002               	movlw	2
 16997  0E27  0781               	addwf	1,f
 16998  0E28  0800               	movf	0,w
 16999  0E29  00D2               	movwf	??i1_vfpfcnvrt
 17000  0E2A  0852               	movf	??i1_vfpfcnvrt,w
 17001  0E2B  00DF               	movwf	i1vfpfcnvrt@c
 17002                           
 17003                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
 17004  0E2C  085F               	movf	i1vfpfcnvrt@c,w
 17005  0E2D  00D2               	movwf	??i1_vfpfcnvrt
 17006  0E2E  0852               	movf	??i1_vfpfcnvrt,w
 17007  0E2F  00AD               	movwf	i1ctoa@c
 17008  0E30  0860               	movf	i1vfpfcnvrt@fp,w
 17009  0E31  319F  27A0         	fcall	i1_ctoa
 17010  0E33  0020               	movlb	0	; select bank0
 17011  0E34  082E               	movf	?i1_ctoa+1,w
 17012  0E35  00CF               	movwf	?i1_vfpfcnvrt+1
 17013  0E36  082D               	movf	?i1_ctoa,w
 17014  0E37  00CE               	movwf	?i1_vfpfcnvrt
 17015  0E38  0008               	return
 17016  0E39                     i1l7762:	
 17017                           
 17018                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 17019  0E39  084E               	movf	i1vfpfcnvrt@fmt,w
 17020  0E3A  0086               	movwf	6
 17021  0E3B  084F               	movf	i1vfpfcnvrt@fmt+1,w
 17022  0E3C  0087               	movwf	7
 17023  0E3D  3F40               	moviw [0]fsr1
 17024  0E3E  00D2               	movwf	??i1_vfpfcnvrt
 17025  0E3F  3F41               	moviw [1]fsr1
 17026  0E40  00D3               	movwf	??i1_vfpfcnvrt+1
 17027  0E41  0852               	movf	??i1_vfpfcnvrt,w
 17028  0E42  0084               	movwf	4
 17029  0E43  0853               	movf	??i1_vfpfcnvrt+1,w
 17030  0E44  0085               	movwf	5
 17031  0E45  0012               	moviw fsr0++
 17032  0E46  3A64               	xorlw	100
 17033  0E47  1903               	btfsc	3,2
 17034  0E48  2E59               	goto	i1l7766
 17035  0E49  084E               	movf	i1vfpfcnvrt@fmt,w
 17036  0E4A  0086               	movwf	6
 17037  0E4B  084F               	movf	i1vfpfcnvrt@fmt+1,w
 17038  0E4C  0087               	movwf	7
 17039  0E4D  3F40               	moviw [0]fsr1
 17040  0E4E  00D2               	movwf	??i1_vfpfcnvrt
 17041  0E4F  3F41               	moviw [1]fsr1
 17042  0E50  00D3               	movwf	??i1_vfpfcnvrt+1
 17043  0E51  0852               	movf	??i1_vfpfcnvrt,w
 17044  0E52  0084               	movwf	4
 17045  0E53  0853               	movf	??i1_vfpfcnvrt+1,w
 17046  0E54  0085               	movwf	5
 17047  0E55  0012               	moviw fsr0++
 17048  0E56  3A69               	xorlw	105
 17049  0E57  1D03               	btfss	3,2
 17050  0E58  2E96               	goto	i1l7774
 17051  0E59                     i1l7766:	
 17052                           
 17053                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
 17054  0E59  084E               	movf	i1vfpfcnvrt@fmt,w
 17055  0E5A  0086               	movwf	6
 17056  0E5B  084F               	movf	i1vfpfcnvrt@fmt+1,w
 17057  0E5C  0087               	movwf	7
 17058  0E5D  3001               	movlw	1
 17059  0E5E  0781               	addwf	1,f
 17060  0E5F  3141               	addfsr 1,1
 17061  0E60  1803               	skipnc
 17062  0E61  0A81               	incf	1,f
 17063                           
 17064                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 17065  0E62  0850               	movf	i1vfpfcnvrt@ap,w
 17066  0E63  0086               	movwf	6
 17067  0E64  0851               	movf	i1vfpfcnvrt@ap+1,w
 17068  0E65  0087               	movwf	7
 17069  0E66  0801               	movf	1,w
 17070  0E67  0084               	movwf	4
 17071  0E68  3001               	movlw	1	; select bank2/3
 17072  0E69  0085               	movwf	5
 17073  0E6A  3002               	movlw	2
 17074  0E6B  0781               	addwf	1,f
 17075  0E6C  3F00               	moviw [0]fsr0
 17076  0E6D  00D2               	movwf	??i1_vfpfcnvrt
 17077  0E6E  3F01               	moviw [1]fsr0
 17078  0E6F  00D3               	movwf	??i1_vfpfcnvrt+1
 17079  0E70  0852               	movf	??i1_vfpfcnvrt,w
 17080  0E71  00D7               	movwf	i1vfpfcnvrt@ll
 17081  0E72  0853               	movf	??i1_vfpfcnvrt+1,w
 17082  0E73  00D8               	movwf	i1vfpfcnvrt@ll+1
 17083  0E74  0D89               	rlf	9,f
 17084  0E75  3B89               	subwfb	9,f
 17085  0E76  0989               	comf	9,f
 17086  0E77  00D9               	movwf	i1vfpfcnvrt@ll+2
 17087  0E78  00DA               	movwf	i1vfpfcnvrt@ll+3
 17088  0E79  00DB               	movwf	i1vfpfcnvrt@ll+4
 17089  0E7A  00DC               	movwf	i1vfpfcnvrt@ll+5
 17090  0E7B  00DD               	movwf	i1vfpfcnvrt@ll+6
 17091  0E7C  00DE               	movwf	i1vfpfcnvrt@ll+7
 17092                           
 17093                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
 17094  0E7D  0857               	movf	i1vfpfcnvrt@ll,w
 17095  0E7E  00B0               	movwf	i1dtoa@d
 17096  0E7F  0858               	movf	i1vfpfcnvrt@ll+1,w
 17097  0E80  00B1               	movwf	i1dtoa@d+1
 17098  0E81  0859               	movf	i1vfpfcnvrt@ll+2,w
 17099  0E82  00B2               	movwf	i1dtoa@d+2
 17100  0E83  085A               	movf	i1vfpfcnvrt@ll+3,w
 17101  0E84  00B3               	movwf	i1dtoa@d+3
 17102  0E85  085B               	movf	i1vfpfcnvrt@ll+4,w
 17103  0E86  00B4               	movwf	i1dtoa@d+4
 17104  0E87  085C               	movf	i1vfpfcnvrt@ll+5,w
 17105  0E88  00B5               	movwf	i1dtoa@d+5
 17106  0E89  085D               	movf	i1vfpfcnvrt@ll+6,w
 17107  0E8A  00B6               	movwf	i1dtoa@d+6
 17108  0E8B  085E               	movf	i1vfpfcnvrt@ll+7,w
 17109  0E8C  00B7               	movwf	i1dtoa@d+7
 17110  0E8D  0860               	movf	i1vfpfcnvrt@fp,w
 17111  0E8E  3185  25FD         	fcall	i1_dtoa
 17112  0E90  0020               	movlb	0	; select bank0
 17113  0E91  0831               	movf	?i1_dtoa+1,w
 17114  0E92  00CF               	movwf	?i1_vfpfcnvrt+1
 17115  0E93  0830               	movf	?i1_dtoa,w
 17116  0E94  00CE               	movwf	?i1_vfpfcnvrt
 17117  0E95  0008               	return
 17118  0E96                     i1l7774:	
 17119                           
 17120                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 17121  0E96  084E               	movf	i1vfpfcnvrt@fmt,w
 17122  0E97  0086               	movwf	6
 17123  0E98  084F               	movf	i1vfpfcnvrt@fmt+1,w
 17124  0E99  0087               	movwf	7
 17125  0E9A  3F40               	moviw [0]fsr1
 17126  0E9B  00D2               	movwf	??i1_vfpfcnvrt
 17127  0E9C  3F41               	moviw [1]fsr1
 17128  0E9D  00D3               	movwf	??i1_vfpfcnvrt+1
 17129  0E9E  0852               	movf	??i1_vfpfcnvrt,w
 17130  0E9F  0084               	movwf	4
 17131  0EA0  0853               	movf	??i1_vfpfcnvrt+1,w
 17132  0EA1  0085               	movwf	5
 17133  0EA2  0012               	moviw fsr0++
 17134  0EA3  3A25               	xorlw	37
 17135  0EA4  1D03               	btfss	3,2
 17136  0EA5  2EBF               	goto	i1l7784
 17137                           
 17138                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 17139  0EA6  084E               	movf	i1vfpfcnvrt@fmt,w
 17140  0EA7  0086               	movwf	6
 17141  0EA8  084F               	movf	i1vfpfcnvrt@fmt+1,w
 17142  0EA9  0087               	movwf	7
 17143  0EAA  3001               	movlw	1
 17144  0EAB  0781               	addwf	1,f
 17145  0EAC  3141               	addfsr 1,1
 17146  0EAD  1803               	skipnc
 17147  0EAE  0A81               	incf	1,f
 17148                           
 17149                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 17150  0EAF  3025               	movlw	37
 17151  0EB0  00F2               	movwf	i1fputc@c
 17152  0EB1  3000               	movlw	0
 17153  0EB2  00F3               	movwf	i1fputc@c+1
 17154  0EB3  0860               	movf	i1vfpfcnvrt@fp,w
 17155  0EB4  00D2               	movwf	??i1_vfpfcnvrt
 17156  0EB5  0852               	movf	??i1_vfpfcnvrt,w
 17157  0EB6  00F4               	movwf	i1fputc@fp
 17158  0EB7  3190  20C3         	fcall	i1_fputc
 17159  0EB9                     i1l7780:	
 17160                           
 17161                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 17162  0EB9  3001               	movlw	1
 17163  0EBA  0020               	movlb	0	; select bank0
 17164  0EBB  00CE               	movwf	?i1_vfpfcnvrt
 17165  0EBC  3000               	movlw	0
 17166  0EBD  00CF               	movwf	?i1_vfpfcnvrt+1
 17167  0EBE  0008               	return
 17168  0EBF                     i1l7784:	
 17169                           
 17170                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 17171  0EBF  084E               	movf	i1vfpfcnvrt@fmt,w
 17172  0EC0  0086               	movwf	6
 17173  0EC1  084F               	movf	i1vfpfcnvrt@fmt+1,w
 17174  0EC2  0087               	movwf	7
 17175  0EC3  3001               	movlw	1
 17176  0EC4  0781               	addwf	1,f
 17177  0EC5  3141               	addfsr 1,1
 17178  0EC6  1803               	skipnc
 17179  0EC7  0A81               	incf	1,f
 17180                           
 17181                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 17182  0EC8  01CE               	clrf	?i1_vfpfcnvrt
 17183  0EC9  01CF               	clrf	?i1_vfpfcnvrt+1
 17184  0ECA  0008               	return
 17185  0ECB                     i1l7790:	
 17186                           
 17187                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 17188  0ECB  084E               	movf	i1vfpfcnvrt@fmt,w
 17189  0ECC  0086               	movwf	6
 17190  0ECD  084F               	movf	i1vfpfcnvrt@fmt+1,w
 17191  0ECE  0087               	movwf	7
 17192  0ECF  3F40               	moviw [0]fsr1
 17193  0ED0  00D2               	movwf	??i1_vfpfcnvrt
 17194  0ED1  3F41               	moviw [1]fsr1
 17195  0ED2  00D3               	movwf	??i1_vfpfcnvrt+1
 17196  0ED3  0852               	movf	??i1_vfpfcnvrt,w
 17197  0ED4  0084               	movwf	4
 17198  0ED5  0853               	movf	??i1_vfpfcnvrt+1,w
 17199  0ED6  0085               	movwf	5
 17200  0ED7  0800               	movf	0,w	;code access
 17201  0ED8  00D4               	movwf	??i1_vfpfcnvrt+2
 17202  0ED9  01D5               	clrf	??i1_vfpfcnvrt+3
 17203  0EDA  0854               	movf	??i1_vfpfcnvrt+2,w
 17204  0EDB  00F2               	movwf	i1fputc@c
 17205  0EDC  0855               	movf	??i1_vfpfcnvrt+3,w
 17206  0EDD  00F3               	movwf	i1fputc@c+1
 17207  0EDE  0860               	movf	i1vfpfcnvrt@fp,w
 17208  0EDF  00D6               	movwf	??i1_vfpfcnvrt+4
 17209  0EE0  0856               	movf	??i1_vfpfcnvrt+4,w
 17210  0EE1  00F4               	movwf	i1fputc@fp
 17211  0EE2  3190  20C3  318D   	fcall	i1_fputc
 17212                           
 17213                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 17214  0EE5  0020               	movlb	0	; select bank0
 17215  0EE6  084E               	movf	i1vfpfcnvrt@fmt,w
 17216  0EE7  0086               	movwf	6
 17217  0EE8  084F               	movf	i1vfpfcnvrt@fmt+1,w
 17218  0EE9  0087               	movwf	7
 17219  0EEA  3001               	movlw	1
 17220  0EEB  0781               	addwf	1,f
 17221  0EEC  3141               	addfsr 1,1
 17222  0EED  1803               	skipnc
 17223  0EEE  0A81               	incf	1,f
 17224  0EEF  2EB9               	goto	i1l7780
 17225  0EF0                     __end_ofi1_vfpfcnvrt:	
 17226                           
 17227                           	psect	text107
 17228  05FD                     __ptext107:	
 17229 ;; *************** function i1_dtoa *****************
 17230 ;; Defined at:
 17231 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 17232 ;; Parameters:    Size  Location     Type
 17233 ;;  fp              1    wreg     PTR struct _IO_FILE
 17234 ;;		 -> NULL(0), 
 17235 ;;  d               8   16[BANK0 ] long long 
 17236 ;; Auto vars:     Size  Location     Type
 17237 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
 17238 ;;		 -> NULL(0), 
 17239 ;;  dtoa            8   36[BANK0 ] long long 
 17240 ;;  dtoa            2   44[BANK0 ] int 
 17241 ;;  dtoa            2   34[BANK0 ] int 
 17242 ;;  dtoa            2   32[BANK0 ] int 
 17243 ;;  dtoa            2   30[BANK0 ] int 
 17244 ;; Return value:  Size  Location     Type
 17245 ;;                  2   16[BANK0 ] int 
 17246 ;; Registers used:
 17247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17248 ;; Tracked objects:
 17249 ;;		On entry : 0/0
 17250 ;;		On exit  : 0/0
 17251 ;;		Unchanged: 0/0
 17252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17253 ;;      Params:         0       8       0       0       0       0       0       0
 17254 ;;      Locals:         0      19       0       0       0       0       0       0
 17255 ;;      Temps:          0       3       0       0       0       0       0       0
 17256 ;;      Totals:         0      30       0       0       0       0       0       0
 17257 ;;Total ram usage:       30 bytes
 17258 ;; Hardware stack levels used:    1
 17259 ;; Hardware stack levels required when called:    5
 17260 ;; This function calls:
 17261 ;;		i1___aodiv
 17262 ;;		i1___aomod
 17263 ;;		i1_abs
 17264 ;;		i1_pad
 17265 ;; This function is called by:
 17266 ;;		i1_vfpfcnvrt
 17267 ;; This function uses a non-reentrant model
 17268 ;;
 17269                           
 17270                           
 17271                           ;psect for function i1_dtoa
 17272  05FD                     i1_dtoa:	
 17273                           
 17274                           ;incstack = 0
 17275 ;; hardware stack exceeded
 17276                           ; Regs used in i1_dtoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17277                           ;i1dtoa@fp stored from wreg
 17278  05FD  0020               	movlb	0	; select bank0
 17279  05FE  00BB               	movwf	i1dtoa@fp
 17280                           
 17281                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
 17282  05FF  0830               	movf	i1dtoa@d,w
 17283  0600  00C4               	movwf	i1dtoa@n
 17284  0601  0831               	movf	i1dtoa@d+1,w
 17285  0602  00C5               	movwf	i1dtoa@n+1
 17286  0603  0832               	movf	i1dtoa@d+2,w
 17287  0604  00C6               	movwf	i1dtoa@n+2
 17288  0605  0833               	movf	i1dtoa@d+3,w
 17289  0606  00C7               	movwf	i1dtoa@n+3
 17290  0607  0834               	movf	i1dtoa@d+4,w
 17291  0608  00C8               	movwf	i1dtoa@n+4
 17292  0609  0835               	movf	i1dtoa@d+5,w
 17293  060A  00C9               	movwf	i1dtoa@n+5
 17294  060B  0836               	movf	i1dtoa@d+6,w
 17295  060C  00CA               	movwf	i1dtoa@n+6
 17296  060D  0837               	movf	i1dtoa@d+7,w
 17297  060E  00CB               	movwf	i1dtoa@n+7
 17298                           
 17299                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 17300  060F  3044               	movlw	low i1dtoa@n
 17301  0610  0086               	movwf	6
 17302  0611  3000               	movlw	high i1dtoa@n
 17303  0612  0087               	movwf	7
 17304  0613  3F47               	moviw [7]fsr1
 17305  0614  00B8               	movwf	??i1_dtoa
 17306  0615  1FB8               	btfss	??i1_dtoa,7
 17307  0616  2E19               	goto	u548_20
 17308  0617  3001               	movlw	1
 17309  0618  2E1A               	goto	u549_20
 17310  0619                     u548_20:	
 17311  0619  3000               	movlw	0
 17312  061A                     u549_20:	
 17313  061A  0020               	movlb	0	; select bank0
 17314  061B  00B9               	movwf	??i1_dtoa+1
 17315  061C  01BA               	clrf	??i1_dtoa+2
 17316  061D  0839               	movf	??i1_dtoa+1,w
 17317  061E  00C2               	movwf	i1dtoa@s
 17318  061F  083A               	movf	??i1_dtoa+2,w
 17319  0620  00C3               	movwf	i1dtoa@s+1
 17320                           
 17321                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 17322  0621  0842               	movf	i1dtoa@s,w
 17323  0622  0443               	iorwf	i1dtoa@s+1,w
 17324  0623  1903               	btfsc	3,2
 17325  0624  2E43               	goto	i1l1354
 17326                           
 17327                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 17328  0625  09C4               	comf	i1dtoa@n,f
 17329  0626  09C5               	comf	i1dtoa@n+1,f
 17330  0627  09C6               	comf	i1dtoa@n+2,f
 17331  0628  09C7               	comf	i1dtoa@n+3,f
 17332  0629  09C8               	comf	i1dtoa@n+4,f
 17333  062A  09C9               	comf	i1dtoa@n+5,f
 17334  062B  09CA               	comf	i1dtoa@n+6,f
 17335  062C  09CB               	comf	i1dtoa@n+7,f
 17336  062D  0AC4               	incf	i1dtoa@n,f
 17337  062E  1D03               	skipz
 17338  062F  2E43               	goto	i1l1354
 17339  0630  0AC5               	incf	i1dtoa@n+1,f
 17340  0631  1D03               	skipz
 17341  0632  2E43               	goto	i1l1354
 17342  0633  0AC6               	incf	i1dtoa@n+2,f
 17343  0634  1D03               	skipz
 17344  0635  2E43               	goto	i1l1354
 17345  0636  0AC7               	incf	i1dtoa@n+3,f
 17346  0637  1D03               	skipz
 17347  0638  2E43               	goto	i1l1354
 17348  0639  0AC8               	incf	i1dtoa@n+4,f
 17349  063A  1D03               	skipz
 17350  063B  2E43               	goto	i1l1354
 17351  063C  0AC9               	incf	i1dtoa@n+5,f
 17352  063D  1D03               	skipz
 17353  063E  2E43               	goto	i1l1354
 17354  063F  0ACA               	incf	i1dtoa@n+6,f
 17355  0640  1D03               	skipz
 17356  0641  2E43               	goto	i1l1354
 17357  0642  0ACB               	incf	i1dtoa@n+7,f
 17358  0643                     i1l1354:	
 17359                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
 17360                           
 17361                           
 17362                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 17363  0643  0022               	movlb	2	; select bank2
 17364  0644  1BA9               	btfsc	(_prec+1)^(0+256),7
 17365  0645  2E4A               	goto	i1l1355
 17366                           
 17367                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 17368  0646  30FD               	movlw	253
 17369  0647  05AA               	andwf	_flags^(0+256),f
 17370  0648  30FF               	movlw	255
 17371  0649  05AB               	andwf	(_flags+1)^(0+256),f
 17372  064A                     i1l1355:	
 17373                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
 17374                           
 17375                           
 17376                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 17377  064A  0829               	movf	(_prec+1)^(0+256),w
 17378  064B  3A80               	xorlw	128
 17379  064C  0020               	movlb	0	; select bank0
 17380  064D  00B8               	movwf	??i1_dtoa
 17381  064E  3080               	movlw	128
 17382  064F  0238               	subwf	??i1_dtoa,w
 17383  0650  1D03               	skipz
 17384  0651  2E55               	goto	u553_25
 17385  0652  3001               	movlw	1
 17386  0653  0022               	movlb	2	; select bank2
 17387  0654  0228               	subwf	_prec^(0+256),w
 17388  0655                     u553_25:	
 17389  0655  1803               	skipnc
 17390  0656  2E5D               	goto	i1l5316
 17391  0657  3001               	movlw	1
 17392  0658  0020               	movlb	0	; select bank0
 17393  0659  00BE               	movwf	i1dtoa@p
 17394  065A  3000               	movlw	0
 17395  065B  00BF               	movwf	i1dtoa@p+1
 17396  065C  2E65               	goto	i1l1359
 17397  065D                     i1l5316:	
 17398  065D  0022               	movlb	2	; select bank2
 17399  065E  0829               	movf	(_prec+1)^(0+256),w
 17400  065F  0020               	movlb	0	; select bank0
 17401  0660  00BF               	movwf	i1dtoa@p+1
 17402  0661  0022               	movlb	2	; select bank2
 17403  0662  0828               	movf	_prec^(0+256),w
 17404  0663  0020               	movlb	0	; select bank0
 17405  0664  00BE               	movwf	i1dtoa@p
 17406  0665                     i1l1359:	
 17407                           
 17408                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 17409  0665  0022               	movlb	2	; select bank2
 17410  0666  0827               	movf	(_width+1)^(0+256),w
 17411  0667  0020               	movlb	0	; select bank0
 17412  0668  00C1               	movwf	i1dtoa@w+1
 17413  0669  0022               	movlb	2	; select bank2
 17414  066A  0826               	movf	_width^(0+256),w
 17415  066B  0020               	movlb	0	; select bank0
 17416  066C  00C0               	movwf	i1dtoa@w
 17417                           
 17418                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 17419  066D  0842               	movf	i1dtoa@s,w
 17420  066E  0443               	iorwf	i1dtoa@s+1,w
 17421  066F  1D03               	btfss	3,2
 17422  0670  2E74               	goto	i1l5322
 17423  0671  0022               	movlb	2	; select bank2
 17424  0672  1D2A               	btfss	_flags^(0+256),2
 17425  0673  2E79               	goto	i1l1360
 17426  0674                     i1l5322:	
 17427                           
 17428                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 17429  0674  30FF               	movlw	255
 17430  0675  0020               	movlb	0	; select bank0
 17431  0676  07C0               	addwf	i1dtoa@w,f
 17432  0677  30FF               	movlw	255
 17433  0678  3DC1               	addwfc	i1dtoa@w+1,f
 17434  0679                     i1l1360:	
 17435                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
 17436                           
 17437                           
 17438                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 17439  0679  301F               	movlw	31
 17440  067A  0020               	movlb	0	; select bank0
 17441  067B  00CC               	movwf	i1dtoa@i
 17442  067C  3000               	movlw	0
 17443  067D  00CD               	movwf	i1dtoa@i+1
 17444                           
 17445                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 17446  067E  0024               	movlb	4	; select bank4
 17447  067F  01EF               	clrf	(_dbuf^(0+512)+31)
 17448                           
 17449                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 17450  0680  2F0F               	goto	i1l1363
 17451  0681                     i1l5336:	
 17452  0681  0020               	movlb	0	; select bank0
 17453  0682  0844               	movf	i1dtoa@n,w
 17454  0683  0445               	iorwf	i1dtoa@n+1,w
 17455  0684  0446               	iorwf	i1dtoa@n+2,w
 17456  0685  0447               	iorwf	i1dtoa@n+3,w
 17457  0686  0448               	iorwf	i1dtoa@n+4,w
 17458  0687  0449               	iorwf	i1dtoa@n+5,w
 17459  0688  044A               	iorwf	i1dtoa@n+6,w
 17460  0689  044B               	iorwf	i1dtoa@n+7,w
 17461  068A  1D03               	skipz
 17462  068B  2EA6               	goto	i1l5326
 17463  068C  083F               	movf	i1dtoa@p+1,w
 17464  068D  3A80               	xorlw	128
 17465  068E  00B8               	movwf	??i1_dtoa
 17466  068F  3080               	movlw	128
 17467  0690  0238               	subwf	??i1_dtoa,w
 17468  0691  1D03               	skipz
 17469  0692  2E95               	goto	u558_25
 17470  0693  3001               	movlw	1
 17471  0694  023E               	subwf	i1dtoa@p,w
 17472  0695                     u558_25:	
 17473  0695  1803               	skipnc
 17474  0696  2EA6               	goto	i1l5326
 17475  0697  0020               	movlb	0	; select bank0
 17476  0698  0841               	movf	i1dtoa@w+1,w
 17477  0699  3A80               	xorlw	128
 17478  069A  00B8               	movwf	??i1_dtoa
 17479  069B  3080               	movlw	128
 17480  069C  0238               	subwf	??i1_dtoa,w
 17481  069D  1D03               	skipz
 17482  069E  2EA1               	goto	u559_25
 17483  069F  3001               	movlw	1
 17484  06A0  0240               	subwf	i1dtoa@w,w
 17485  06A1                     u559_25:	
 17486  06A1  1C03               	skipc
 17487  06A2  2F1B               	goto	i1l5344
 17488  06A3  0022               	movlb	2	; select bank2
 17489  06A4  1CAA               	btfss	_flags^(0+256),1
 17490  06A5  2F1B               	goto	i1l5344
 17491  06A6                     i1l5326:	
 17492                           
 17493                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 17494  06A6  30FF               	movlw	255
 17495  06A7  0020               	movlb	0	; select bank0
 17496  06A8  07CC               	addwf	i1dtoa@i,f
 17497  06A9  30FF               	movlw	255
 17498  06AA  3DCD               	addwfc	i1dtoa@i+1,f
 17499                           
 17500                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 17501  06AB  300A               	movlw	10
 17502  06AC  00A0               	movwf	i1___aomod@divisor
 17503  06AD  01A1               	clrf	i1___aomod@divisor+1
 17504  06AE  01A2               	clrf	i1___aomod@divisor+2
 17505  06AF  01A3               	clrf	i1___aomod@divisor+3
 17506  06B0  01A4               	clrf	i1___aomod@divisor+4
 17507  06B1  01A5               	clrf	i1___aomod@divisor+5
 17508  06B2  01A6               	clrf	i1___aomod@divisor+6
 17509  06B3  01A7               	clrf	i1___aomod@divisor+7
 17510  06B4  0844               	movf	i1dtoa@n,w
 17511  06B5  00A8               	movwf	i1___aomod@dividend
 17512  06B6  0845               	movf	i1dtoa@n+1,w
 17513  06B7  00A9               	movwf	i1___aomod@dividend+1
 17514  06B8  0846               	movf	i1dtoa@n+2,w
 17515  06B9  00AA               	movwf	i1___aomod@dividend+2
 17516  06BA  0847               	movf	i1dtoa@n+3,w
 17517  06BB  00AB               	movwf	i1___aomod@dividend+3
 17518  06BC  0848               	movf	i1dtoa@n+4,w
 17519  06BD  00AC               	movwf	i1___aomod@dividend+4
 17520  06BE  0849               	movf	i1dtoa@n+5,w
 17521  06BF  00AD               	movwf	i1___aomod@dividend+5
 17522  06C0  084A               	movf	i1dtoa@n+6,w
 17523  06C1  00AE               	movwf	i1___aomod@dividend+6
 17524  06C2  084B               	movf	i1dtoa@n+7,w
 17525  06C3  00AF               	movwf	i1___aomod@dividend+7
 17526  06C4  3189  215B  3185   	fcall	i1___aomod
 17527  06C7  0020               	movlb	0	; select bank0
 17528  06C8  0821               	movf	?i1___aomod+1,w
 17529  06C9  00F4               	movwf	i1abs@a+1
 17530  06CA  0820               	movf	?i1___aomod,w
 17531  06CB  00F3               	movwf	i1abs@a
 17532  06CC  319B  23EF  3185   	fcall	i1_abs
 17533  06CF  0873               	movf	?i1_abs,w
 17534  06D0  3E30               	addlw	48
 17535  06D1  0020               	movlb	0	; select bank0
 17536  06D2  00B8               	movwf	??i1_dtoa
 17537  06D3  084C               	movf	i1dtoa@i,w
 17538  06D4  3E50               	addlw	(low (_dbuf| (0+512)))& (0+255)
 17539  06D5  0086               	movwf	6
 17540  06D6  3002               	movlw	2	; select bank4/5
 17541  06D7  0087               	movwf	7
 17542  06D8  0838               	movf	??i1_dtoa,w
 17543  06D9  0081               	movwf	1
 17544                           
 17545                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 17546  06DA  30FF               	movlw	255
 17547  06DB  07BE               	addwf	i1dtoa@p,f
 17548  06DC  30FF               	movlw	255
 17549  06DD  3DBF               	addwfc	i1dtoa@p+1,f
 17550                           
 17551                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 17552  06DE  30FF               	movlw	255
 17553  06DF  07C0               	addwf	i1dtoa@w,f
 17554  06E0  30FF               	movlw	255
 17555  06E1  3DC1               	addwfc	i1dtoa@w+1,f
 17556                           
 17557                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 17558  06E2  300A               	movlw	10
 17559  06E3  00A0               	movwf	i1___aodiv@divisor
 17560  06E4  01A1               	clrf	i1___aodiv@divisor+1
 17561  06E5  01A2               	clrf	i1___aodiv@divisor+2
 17562  06E6  01A3               	clrf	i1___aodiv@divisor+3
 17563  06E7  01A4               	clrf	i1___aodiv@divisor+4
 17564  06E8  01A5               	clrf	i1___aodiv@divisor+5
 17565  06E9  01A6               	clrf	i1___aodiv@divisor+6
 17566  06EA  01A7               	clrf	i1___aodiv@divisor+7
 17567  06EB  0844               	movf	i1dtoa@n,w
 17568  06EC  00A8               	movwf	i1___aodiv@dividend
 17569  06ED  0845               	movf	i1dtoa@n+1,w
 17570  06EE  00A9               	movwf	i1___aodiv@dividend+1
 17571  06EF  0846               	movf	i1dtoa@n+2,w
 17572  06F0  00AA               	movwf	i1___aodiv@dividend+2
 17573  06F1  0847               	movf	i1dtoa@n+3,w
 17574  06F2  00AB               	movwf	i1___aodiv@dividend+3
 17575  06F3  0848               	movf	i1dtoa@n+4,w
 17576  06F4  00AC               	movwf	i1___aodiv@dividend+4
 17577  06F5  0849               	movf	i1dtoa@n+5,w
 17578  06F6  00AD               	movwf	i1___aodiv@dividend+5
 17579  06F7  084A               	movf	i1dtoa@n+6,w
 17580  06F8  00AE               	movwf	i1___aodiv@dividend+6
 17581  06F9  084B               	movf	i1dtoa@n+7,w
 17582  06FA  00AF               	movwf	i1___aodiv@dividend+7
 17583  06FB  318B  23F6  3185   	fcall	i1___aodiv
 17584  06FE  0020               	movlb	0	; select bank0
 17585  06FF  0820               	movf	?i1___aodiv,w
 17586  0700  00C4               	movwf	i1dtoa@n
 17587  0701  0821               	movf	?i1___aodiv+1,w
 17588  0702  00C5               	movwf	i1dtoa@n+1
 17589  0703  0822               	movf	?i1___aodiv+2,w
 17590  0704  00C6               	movwf	i1dtoa@n+2
 17591  0705  0823               	movf	?i1___aodiv+3,w
 17592  0706  00C7               	movwf	i1dtoa@n+3
 17593  0707  0824               	movf	?i1___aodiv+4,w
 17594  0708  00C8               	movwf	i1dtoa@n+4
 17595  0709  0825               	movf	?i1___aodiv+5,w
 17596  070A  00C9               	movwf	i1dtoa@n+5
 17597  070B  0826               	movf	?i1___aodiv+6,w
 17598  070C  00CA               	movwf	i1dtoa@n+6
 17599  070D  0827               	movf	?i1___aodiv+7,w
 17600  070E  00CB               	movwf	i1dtoa@n+7
 17601  070F                     i1l1363:	
 17602                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
 17603                           
 17604                           
 17605                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 17606  070F  0020               	movlb	0	; select bank0
 17607  0710  084D               	movf	i1dtoa@i+1,w
 17608  0711  3A80               	xorlw	128
 17609  0712  00B8               	movwf	??i1_dtoa
 17610  0713  3080               	movlw	128
 17611  0714  0238               	subwf	??i1_dtoa,w
 17612  0715  1D03               	skipz
 17613  0716  2F19               	goto	u556_25
 17614  0717  3001               	movlw	1
 17615  0718  024C               	subwf	i1dtoa@i,w
 17616  0719                     u556_25:	
 17617  0719  1803               	btfsc	3,0
 17618  071A  2E81               	goto	i1l5336
 17619  071B                     i1l5344:	
 17620                           
 17621                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 17622  071B  0020               	movlb	0	; select bank0
 17623  071C  0842               	movf	i1dtoa@s,w
 17624  071D  0443               	iorwf	i1dtoa@s+1,w
 17625  071E  1D03               	btfss	3,2
 17626  071F  2F23               	goto	i1l5348
 17627  0720  0022               	movlb	2	; select bank2
 17628  0721  1D2A               	btfss	_flags^(0+256),2
 17629  0722  2F3B               	goto	i1l5358
 17630  0723                     i1l5348:	
 17631                           
 17632                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 17633  0723  30FF               	movlw	255
 17634  0724  0020               	movlb	0	; select bank0
 17635  0725  07CC               	addwf	i1dtoa@i,f
 17636  0726  30FF               	movlw	255
 17637  0727  3DCD               	addwfc	i1dtoa@i+1,f
 17638                           
 17639                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 17640  0728  0842               	movf	i1dtoa@s,w
 17641  0729  0443               	iorwf	i1dtoa@s+1,w
 17642  072A  1D03               	btfss	3,2
 17643  072B  2F2E               	goto	i1l5354
 17644  072C  302B               	movlw	43
 17645  072D  2F2F               	goto	L25
 17646  072E                     i1l5354:	
 17647  072E  302D               	movlw	45
 17648  072F                     L25:	
 17649  072F  00BC               	movwf	i1_dtoa$2177
 17650  0730  3000               	movlw	0
 17651  0731  00BD               	movwf	i1_dtoa$2177+1
 17652  0732  083C               	movf	i1_dtoa$2177,w
 17653  0733  00B8               	movwf	??i1_dtoa
 17654  0734  084C               	movf	i1dtoa@i,w
 17655  0735  3E50               	addlw	(low (_dbuf| (0+512)))& (0+255)
 17656  0736  0086               	movwf	6
 17657  0737  3002               	movlw	2	; select bank4/5
 17658  0738  0087               	movwf	7
 17659  0739  0838               	movf	??i1_dtoa,w
 17660  073A  0081               	movwf	1
 17661  073B                     i1l5358:	
 17662                           
 17663                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 17664  073B  0020               	movlb	0	; select bank0
 17665  073C  084C               	movf	i1dtoa@i,w
 17666  073D  3E50               	addlw	(low (_dbuf| (0+512)))& (0+255)
 17667  073E  00B8               	movwf	??i1_dtoa
 17668  073F  0838               	movf	??i1_dtoa,w
 17669  0740  00A4               	movwf	i1pad@buf
 17670  0741  0841               	movf	i1dtoa@w+1,w
 17671  0742  00A6               	movwf	i1pad@p+1
 17672  0743  0840               	movf	i1dtoa@w,w
 17673  0744  00A5               	movwf	i1pad@p
 17674  0745  083B               	movf	i1dtoa@fp,w
 17675  0746  3192  2260         	fcall	i1_pad
 17676  0748  0020               	movlb	0	; select bank0
 17677  0749  0825               	movf	?i1_pad+1,w
 17678  074A  00B1               	movwf	?i1_dtoa+1
 17679  074B  0824               	movf	?i1_pad,w
 17680  074C  00B0               	movwf	?i1_dtoa
 17681  074D  0008               	return
 17682  074E                     __end_ofi1_dtoa:	
 17683                           
 17684                           	psect	text108
 17685  1BEF                     __ptext108:	
 17686 ;; *************** function i1_abs *****************
 17687 ;; Defined at:
 17688 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 17689 ;; Parameters:    Size  Location     Type
 17690 ;;  a               2    3[COMMON] int 
 17691 ;; Auto vars:     Size  Location     Type
 17692 ;;		None
 17693 ;; Return value:  Size  Location     Type
 17694 ;;                  2    3[COMMON] int 
 17695 ;; Registers used:
 17696 ;;		wreg, status,2, status,0
 17697 ;; Tracked objects:
 17698 ;;		On entry : 0/0
 17699 ;;		On exit  : 0/0
 17700 ;;		Unchanged: 0/0
 17701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17702 ;;      Params:         2       0       0       0       0       0       0       0
 17703 ;;      Locals:         0       0       0       0       0       0       0       0
 17704 ;;      Temps:          2       0       0       0       0       0       0       0
 17705 ;;      Totals:         4       0       0       0       0       0       0       0
 17706 ;;Total ram usage:        4 bytes
 17707 ;; Hardware stack levels used:    1
 17708 ;; This function calls:
 17709 ;;		Nothing
 17710 ;; This function is called by:
 17711 ;;		i1_dtoa
 17712 ;; This function uses a non-reentrant model
 17713 ;;
 17714                           
 17715                           
 17716                           ;psect for function i1_abs
 17717  1BEF                     i1_abs:	
 17718                           
 17719                           ;incstack = 0
 17720 ;; hardware stack exceeded
 17721                           ; Regs used in i1_abs: [wreg+status,2+status,0]
 17722  1BEF  0874               	movf	i1abs@a+1,w
 17723  1BF0  3A80               	xorlw	128
 17724  1BF1  00F5               	movwf	??i1_abs
 17725  1BF2  3080               	movlw	128
 17726  1BF3  0275               	subwf	??i1_abs,w
 17727  1BF4  1D03               	skipz
 17728  1BF5  2BF8               	goto	u466_25
 17729  1BF6  3001               	movlw	1
 17730  1BF7  0273               	subwf	i1abs@a,w
 17731  1BF8                     u466_25:	
 17732  1BF8  1803               	skipnc
 17733  1BF9  0008               	return
 17734  1BFA  0973               	comf	i1abs@a,w
 17735  1BFB  00F5               	movwf	??i1_abs
 17736  1BFC  0974               	comf	i1abs@a+1,w
 17737  1BFD  00F6               	movwf	??i1_abs+1
 17738  1BFE  0AF5               	incf	??i1_abs,f
 17739  1BFF  1903               	skipnz
 17740  1C00  0AF6               	incf	??i1_abs+1,f
 17741  1C01  0875               	movf	??i1_abs,w
 17742  1C02  00F3               	movwf	?i1_abs
 17743  1C03  0876               	movf	??i1_abs+1,w
 17744  1C04  00F4               	movwf	?i1_abs+1
 17745  1C05  0008               	return
 17746  1C06                     __end_ofi1_abs:	
 17747                           
 17748                           	psect	text109
 17749  095B                     __ptext109:	
 17750 ;; *************** function i1___aomod *****************
 17751 ;; Defined at:
 17752 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
 17753 ;; Parameters:    Size  Location     Type
 17754 ;;  divisor         8    0[BANK0 ] long long 
 17755 ;;  dividend        8    8[BANK0 ] long long 
 17756 ;; Auto vars:     Size  Location     Type
 17757 ;;  __aomod         1    2[COMMON] unsigned char 
 17758 ;;  __aomod         1    1[COMMON] unsigned char 
 17759 ;; Return value:  Size  Location     Type
 17760 ;;                  8    0[BANK0 ] long long 
 17761 ;; Registers used:
 17762 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17763 ;; Tracked objects:
 17764 ;;		On entry : 0/0
 17765 ;;		On exit  : 0/0
 17766 ;;		Unchanged: 0/0
 17767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17768 ;;      Params:         0      16       0       0       0       0       0       0
 17769 ;;      Locals:         2       0       0       0       0       0       0       0
 17770 ;;      Temps:          1       0       0       0       0       0       0       0
 17771 ;;      Totals:         3      16       0       0       0       0       0       0
 17772 ;;Total ram usage:       19 bytes
 17773 ;; Hardware stack levels used:    1
 17774 ;; This function calls:
 17775 ;;		Nothing
 17776 ;; This function is called by:
 17777 ;;		i1_dtoa
 17778 ;; This function uses a non-reentrant model
 17779 ;;
 17780                           
 17781                           
 17782                           ;psect for function i1___aomod
 17783  095B                     i1___aomod:	
 17784                           
 17785                           ;incstack = 0
 17786 ;; hardware stack exceeded
 17787                           ; Regs used in i1___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
 17788  095B  01F2               	clrf	i1___aomod@sign
 17789  095C  3028               	movlw	low i1___aomod@dividend
 17790  095D  0086               	movwf	6
 17791  095E  3000               	movlw	high i1___aomod@dividend
 17792  095F  0087               	movwf	7
 17793  0960  3F47               	moviw [7]fsr1
 17794  0961  00F0               	movwf	??i1___aomod
 17795  0962  1FF0               	btfss	??i1___aomod,7
 17796  0963  2985               	goto	i1l4928
 17797  0964  0020               	movlb	0	; select bank0
 17798  0965  09A8               	comf	i1___aomod@dividend,f
 17799  0966  09A9               	comf	i1___aomod@dividend+1,f
 17800  0967  09AA               	comf	i1___aomod@dividend+2,f
 17801  0968  09AB               	comf	i1___aomod@dividend+3,f
 17802  0969  09AC               	comf	i1___aomod@dividend+4,f
 17803  096A  09AD               	comf	i1___aomod@dividend+5,f
 17804  096B  09AE               	comf	i1___aomod@dividend+6,f
 17805  096C  09AF               	comf	i1___aomod@dividend+7,f
 17806  096D  0AA8               	incf	i1___aomod@dividend,f
 17807  096E  1D03               	skipz
 17808  096F  2983               	goto	u457_2lld
 17809  0970  0AA9               	incf	i1___aomod@dividend+1,f
 17810  0971  1D03               	skipz
 17811  0972  2983               	goto	u457_2lld
 17812  0973  0AAA               	incf	i1___aomod@dividend+2,f
 17813  0974  1D03               	skipz
 17814  0975  2983               	goto	u457_2lld
 17815  0976  0AAB               	incf	i1___aomod@dividend+3,f
 17816  0977  1D03               	skipz
 17817  0978  2983               	goto	u457_2lld
 17818  0979  0AAC               	incf	i1___aomod@dividend+4,f
 17819  097A  1D03               	skipz
 17820  097B  2983               	goto	u457_2lld
 17821  097C  0AAD               	incf	i1___aomod@dividend+5,f
 17822  097D  1D03               	skipz
 17823  097E  2983               	goto	u457_2lld
 17824  097F  0AAE               	incf	i1___aomod@dividend+6,f
 17825  0980  1D03               	skipz
 17826  0981  2983               	goto	u457_2lld
 17827  0982  0AAF               	incf	i1___aomod@dividend+7,f
 17828  0983                     u457_2lld:	
 17829  0983  01F2               	clrf	i1___aomod@sign
 17830  0984  0AF2               	incf	i1___aomod@sign,f
 17831  0985                     i1l4928:	
 17832  0985  3020               	movlw	low i1___aomod@divisor
 17833  0986  0086               	movwf	6
 17834  0987  3000               	movlw	high i1___aomod@divisor
 17835  0988  0087               	movwf	7
 17836  0989  3F47               	moviw [7]fsr1
 17837  098A  00F0               	movwf	??i1___aomod
 17838  098B  1FF0               	btfss	??i1___aomod,7
 17839  098C  29AC               	goto	i1l4932
 17840  098D  0020               	movlb	0	; select bank0
 17841  098E  09A0               	comf	i1___aomod@divisor,f
 17842  098F  09A1               	comf	i1___aomod@divisor+1,f
 17843  0990  09A2               	comf	i1___aomod@divisor+2,f
 17844  0991  09A3               	comf	i1___aomod@divisor+3,f
 17845  0992  09A4               	comf	i1___aomod@divisor+4,f
 17846  0993  09A5               	comf	i1___aomod@divisor+5,f
 17847  0994  09A6               	comf	i1___aomod@divisor+6,f
 17848  0995  09A7               	comf	i1___aomod@divisor+7,f
 17849  0996  0AA0               	incf	i1___aomod@divisor,f
 17850  0997  1D03               	skipz
 17851  0998  29AC               	goto	i1l4932
 17852  0999  0AA1               	incf	i1___aomod@divisor+1,f
 17853  099A  1D03               	skipz
 17854  099B  29AC               	goto	i1l4932
 17855  099C  0AA2               	incf	i1___aomod@divisor+2,f
 17856  099D  1D03               	skipz
 17857  099E  29AC               	goto	i1l4932
 17858  099F  0AA3               	incf	i1___aomod@divisor+3,f
 17859  09A0  1D03               	skipz
 17860  09A1  29AC               	goto	i1l4932
 17861  09A2  0AA4               	incf	i1___aomod@divisor+4,f
 17862  09A3  1D03               	skipz
 17863  09A4  29AC               	goto	i1l4932
 17864  09A5  0AA5               	incf	i1___aomod@divisor+5,f
 17865  09A6  1D03               	skipz
 17866  09A7  29AC               	goto	i1l4932
 17867  09A8  0AA6               	incf	i1___aomod@divisor+6,f
 17868  09A9  1D03               	skipz
 17869  09AA  29AC               	goto	i1l4932
 17870  09AB  0AA7               	incf	i1___aomod@divisor+7,f
 17871  09AC                     i1l4932:	
 17872  09AC  0020               	movlb	0	; select bank0
 17873  09AD  0820               	movf	i1___aomod@divisor,w
 17874  09AE  0421               	iorwf	i1___aomod@divisor+1,w
 17875  09AF  0422               	iorwf	i1___aomod@divisor+2,w
 17876  09B0  0423               	iorwf	i1___aomod@divisor+3,w
 17877  09B1  0424               	iorwf	i1___aomod@divisor+4,w
 17878  09B2  0425               	iorwf	i1___aomod@divisor+5,w
 17879  09B3  0426               	iorwf	i1___aomod@divisor+6,w
 17880  09B4  0427               	iorwf	i1___aomod@divisor+7,w
 17881  09B5  1903               	skipnz
 17882  09B6  2A04               	goto	i1l4948
 17883  09B7  01F1               	clrf	i1___aomod@counter
 17884  09B8  0AF1               	incf	i1___aomod@counter,f
 17885  09B9                     i1l4940:	
 17886  09B9  1BA7               	btfsc	i1___aomod@divisor+7,7
 17887  09BA  29C8               	goto	i1l4942
 17888  09BB  35A0               	lslf	i1___aomod@divisor,f
 17889  09BC  0DA1               	rlf	i1___aomod@divisor+1,f
 17890  09BD  0DA2               	rlf	i1___aomod@divisor+2,f
 17891  09BE  0DA3               	rlf	i1___aomod@divisor+3,f
 17892  09BF  0DA4               	rlf	i1___aomod@divisor+4,f
 17893  09C0  0DA5               	rlf	i1___aomod@divisor+5,f
 17894  09C1  0DA6               	rlf	i1___aomod@divisor+6,f
 17895  09C2  0DA7               	rlf	i1___aomod@divisor+7,f
 17896  09C3  3001               	movlw	1
 17897  09C4  00F0               	movwf	??i1___aomod
 17898  09C5  0870               	movf	??i1___aomod,w
 17899  09C6  07F1               	addwf	i1___aomod@counter,f
 17900  09C7  29B9               	goto	i1l4940
 17901  09C8                     i1l4942:	
 17902  09C8  0827               	movf	i1___aomod@divisor+7,w
 17903  09C9  022F               	subwf	i1___aomod@dividend+7,w
 17904  09CA  1D03               	skipz
 17905  09CB  29E6               	goto	u462_25
 17906  09CC  0826               	movf	i1___aomod@divisor+6,w
 17907  09CD  022E               	subwf	i1___aomod@dividend+6,w
 17908  09CE  1D03               	skipz
 17909  09CF  29E6               	goto	u462_25
 17910  09D0  0825               	movf	i1___aomod@divisor+5,w
 17911  09D1  022D               	subwf	i1___aomod@dividend+5,w
 17912  09D2  1D03               	skipz
 17913  09D3  29E6               	goto	u462_25
 17914  09D4  0824               	movf	i1___aomod@divisor+4,w
 17915  09D5  022C               	subwf	i1___aomod@dividend+4,w
 17916  09D6  1D03               	skipz
 17917  09D7  29E6               	goto	u462_25
 17918  09D8  0823               	movf	i1___aomod@divisor+3,w
 17919  09D9  022B               	subwf	i1___aomod@dividend+3,w
 17920  09DA  1D03               	skipz
 17921  09DB  29E6               	goto	u462_25
 17922  09DC  0822               	movf	i1___aomod@divisor+2,w
 17923  09DD  022A               	subwf	i1___aomod@dividend+2,w
 17924  09DE  1D03               	skipz
 17925  09DF  29E6               	goto	u462_25
 17926  09E0  0821               	movf	i1___aomod@divisor+1,w
 17927  09E1  0229               	subwf	i1___aomod@dividend+1,w
 17928  09E2  1D03               	skipz
 17929  09E3  29E6               	goto	u462_25
 17930  09E4  0820               	movf	i1___aomod@divisor,w
 17931  09E5  0228               	subwf	i1___aomod@dividend,w
 17932  09E6                     u462_25:	
 17933  09E6  1C03               	skipc
 17934  09E7  29F8               	goto	i1l4946
 17935  09E8  0820               	movf	i1___aomod@divisor,w
 17936  09E9  02A8               	subwf	i1___aomod@dividend,f
 17937  09EA  0821               	movf	i1___aomod@divisor+1,w
 17938  09EB  3BA9               	subwfb	i1___aomod@dividend+1,f
 17939  09EC  0822               	movf	i1___aomod@divisor+2,w
 17940  09ED  3BAA               	subwfb	i1___aomod@dividend+2,f
 17941  09EE  0823               	movf	i1___aomod@divisor+3,w
 17942  09EF  3BAB               	subwfb	i1___aomod@dividend+3,f
 17943  09F0  0824               	movf	i1___aomod@divisor+4,w
 17944  09F1  3BAC               	subwfb	i1___aomod@dividend+4,f
 17945  09F2  0825               	movf	i1___aomod@divisor+5,w
 17946  09F3  3BAD               	subwfb	i1___aomod@dividend+5,f
 17947  09F4  0826               	movf	i1___aomod@divisor+6,w
 17948  09F5  3BAE               	subwfb	i1___aomod@dividend+6,f
 17949  09F6  0827               	movf	i1___aomod@divisor+7,w
 17950  09F7  3BAF               	subwfb	i1___aomod@dividend+7,f
 17951  09F8                     i1l4946:	
 17952  09F8  36A7               	lsrf	i1___aomod@divisor+7,f
 17953  09F9  0CA6               	rrf	i1___aomod@divisor+6,f
 17954  09FA  0CA5               	rrf	i1___aomod@divisor+5,f
 17955  09FB  0CA4               	rrf	i1___aomod@divisor+4,f
 17956  09FC  0CA3               	rrf	i1___aomod@divisor+3,f
 17957  09FD  0CA2               	rrf	i1___aomod@divisor+2,f
 17958  09FE  0CA1               	rrf	i1___aomod@divisor+1,f
 17959  09FF  0CA0               	rrf	i1___aomod@divisor,f
 17960  0A00  3001               	movlw	1
 17961  0A01  02F1               	subwf	i1___aomod@counter,f
 17962  0A02  1D03               	btfss	3,2
 17963  0A03  29C8               	goto	i1l4942
 17964  0A04                     i1l4948:	
 17965  0A04  0872               	movf	i1___aomod@sign,w
 17966  0A05  1903               	btfsc	3,2
 17967  0A06  2A25               	goto	i1l1509
 17968  0A07  09A8               	comf	i1___aomod@dividend,f
 17969  0A08  09A9               	comf	i1___aomod@dividend+1,f
 17970  0A09  09AA               	comf	i1___aomod@dividend+2,f
 17971  0A0A  09AB               	comf	i1___aomod@dividend+3,f
 17972  0A0B  09AC               	comf	i1___aomod@dividend+4,f
 17973  0A0C  09AD               	comf	i1___aomod@dividend+5,f
 17974  0A0D  09AE               	comf	i1___aomod@dividend+6,f
 17975  0A0E  09AF               	comf	i1___aomod@dividend+7,f
 17976  0A0F  0AA8               	incf	i1___aomod@dividend,f
 17977  0A10  1D03               	skipz
 17978  0A11  2A25               	goto	i1l1509
 17979  0A12  0AA9               	incf	i1___aomod@dividend+1,f
 17980  0A13  1D03               	skipz
 17981  0A14  2A25               	goto	i1l1509
 17982  0A15  0AAA               	incf	i1___aomod@dividend+2,f
 17983  0A16  1D03               	skipz
 17984  0A17  2A25               	goto	i1l1509
 17985  0A18  0AAB               	incf	i1___aomod@dividend+3,f
 17986  0A19  1D03               	skipz
 17987  0A1A  2A25               	goto	i1l1509
 17988  0A1B  0AAC               	incf	i1___aomod@dividend+4,f
 17989  0A1C  1D03               	skipz
 17990  0A1D  2A25               	goto	i1l1509
 17991  0A1E  0AAD               	incf	i1___aomod@dividend+5,f
 17992  0A1F  1D03               	skipz
 17993  0A20  2A25               	goto	i1l1509
 17994  0A21  0AAE               	incf	i1___aomod@dividend+6,f
 17995  0A22  1D03               	skipz
 17996  0A23  2A25               	goto	i1l1509
 17997  0A24  0AAF               	incf	i1___aomod@dividend+7,f
 17998  0A25                     i1l1509:	
 17999  0A25  0020               	movlb	0	; select bank0
 18000  0A26  0828               	movf	i1___aomod@dividend,w
 18001  0A27  00A0               	movwf	?i1___aomod
 18002  0A28  0829               	movf	i1___aomod@dividend+1,w
 18003  0A29  00A1               	movwf	?i1___aomod+1
 18004  0A2A  082A               	movf	i1___aomod@dividend+2,w
 18005  0A2B  00A2               	movwf	?i1___aomod+2
 18006  0A2C  082B               	movf	i1___aomod@dividend+3,w
 18007  0A2D  00A3               	movwf	?i1___aomod+3
 18008  0A2E  082C               	movf	i1___aomod@dividend+4,w
 18009  0A2F  00A4               	movwf	?i1___aomod+4
 18010  0A30  082D               	movf	i1___aomod@dividend+5,w
 18011  0A31  00A5               	movwf	?i1___aomod+5
 18012  0A32  082E               	movf	i1___aomod@dividend+6,w
 18013  0A33  00A6               	movwf	?i1___aomod+6
 18014  0A34  082F               	movf	i1___aomod@dividend+7,w
 18015  0A35  00A7               	movwf	?i1___aomod+7
 18016  0A36  0008               	return
 18017  0A37                     __end_ofi1___aomod:	
 18018                           
 18019                           	psect	text110
 18020  0BF6                     __ptext110:	
 18021 ;; *************** function i1___aodiv *****************
 18022 ;; Defined at:
 18023 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
 18024 ;; Parameters:    Size  Location     Type
 18025 ;;  divisor         8    0[BANK0 ] long long 
 18026 ;;  dividend        8    8[BANK0 ] long long 
 18027 ;; Auto vars:     Size  Location     Type
 18028 ;;  __aodiv         8    3[COMMON] long long 
 18029 ;;  __aodiv         1    2[COMMON] unsigned char 
 18030 ;;  __aodiv         1    1[COMMON] unsigned char 
 18031 ;; Return value:  Size  Location     Type
 18032 ;;                  8    0[BANK0 ] long long 
 18033 ;; Registers used:
 18034 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18035 ;; Tracked objects:
 18036 ;;		On entry : 0/0
 18037 ;;		On exit  : 0/0
 18038 ;;		Unchanged: 0/0
 18039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18040 ;;      Params:         0      16       0       0       0       0       0       0
 18041 ;;      Locals:        10       0       0       0       0       0       0       0
 18042 ;;      Temps:          1       0       0       0       0       0       0       0
 18043 ;;      Totals:        11      16       0       0       0       0       0       0
 18044 ;;Total ram usage:       27 bytes
 18045 ;; Hardware stack levels used:    1
 18046 ;; This function calls:
 18047 ;;		Nothing
 18048 ;; This function is called by:
 18049 ;;		i1_dtoa
 18050 ;; This function uses a non-reentrant model
 18051 ;;
 18052                           
 18053                           
 18054                           ;psect for function i1___aodiv
 18055  0BF6                     i1___aodiv:	
 18056                           
 18057                           ;incstack = 0
 18058 ;; hardware stack exceeded
 18059                           ; Regs used in i1___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 18060  0BF6  01F2               	clrf	i1___aodiv@sign
 18061  0BF7  3020               	movlw	low i1___aodiv@divisor
 18062  0BF8  0086               	movwf	6
 18063  0BF9  3000               	movlw	high i1___aodiv@divisor
 18064  0BFA  0087               	movwf	7
 18065  0BFB  3F47               	moviw [7]fsr1
 18066  0BFC  00F0               	movwf	??i1___aodiv
 18067  0BFD  1FF0               	btfss	??i1___aodiv,7
 18068  0BFE  2C20               	goto	i1l4890
 18069  0BFF  0020               	movlb	0	; select bank0
 18070  0C00  09A0               	comf	i1___aodiv@divisor,f
 18071  0C01  09A1               	comf	i1___aodiv@divisor+1,f
 18072  0C02  09A2               	comf	i1___aodiv@divisor+2,f
 18073  0C03  09A3               	comf	i1___aodiv@divisor+3,f
 18074  0C04  09A4               	comf	i1___aodiv@divisor+4,f
 18075  0C05  09A5               	comf	i1___aodiv@divisor+5,f
 18076  0C06  09A6               	comf	i1___aodiv@divisor+6,f
 18077  0C07  09A7               	comf	i1___aodiv@divisor+7,f
 18078  0C08  0AA0               	incf	i1___aodiv@divisor,f
 18079  0C09  1D03               	skipz
 18080  0C0A  2C1E               	goto	u446_2lld
 18081  0C0B  0AA1               	incf	i1___aodiv@divisor+1,f
 18082  0C0C  1D03               	skipz
 18083  0C0D  2C1E               	goto	u446_2lld
 18084  0C0E  0AA2               	incf	i1___aodiv@divisor+2,f
 18085  0C0F  1D03               	skipz
 18086  0C10  2C1E               	goto	u446_2lld
 18087  0C11  0AA3               	incf	i1___aodiv@divisor+3,f
 18088  0C12  1D03               	skipz
 18089  0C13  2C1E               	goto	u446_2lld
 18090  0C14  0AA4               	incf	i1___aodiv@divisor+4,f
 18091  0C15  1D03               	skipz
 18092  0C16  2C1E               	goto	u446_2lld
 18093  0C17  0AA5               	incf	i1___aodiv@divisor+5,f
 18094  0C18  1D03               	skipz
 18095  0C19  2C1E               	goto	u446_2lld
 18096  0C1A  0AA6               	incf	i1___aodiv@divisor+6,f
 18097  0C1B  1D03               	skipz
 18098  0C1C  2C1E               	goto	u446_2lld
 18099  0C1D  0AA7               	incf	i1___aodiv@divisor+7,f
 18100  0C1E                     u446_2lld:	
 18101  0C1E  01F2               	clrf	i1___aodiv@sign
 18102  0C1F  0AF2               	incf	i1___aodiv@sign,f
 18103  0C20                     i1l4890:	
 18104  0C20  3028               	movlw	low i1___aodiv@dividend
 18105  0C21  0086               	movwf	6
 18106  0C22  3000               	movlw	high i1___aodiv@dividend
 18107  0C23  0087               	movwf	7
 18108  0C24  3F47               	moviw [7]fsr1
 18109  0C25  00F0               	movwf	??i1___aodiv
 18110  0C26  1FF0               	btfss	??i1___aodiv,7
 18111  0C27  2C4B               	goto	i1l4896
 18112  0C28  0020               	movlb	0	; select bank0
 18113  0C29  09A8               	comf	i1___aodiv@dividend,f
 18114  0C2A  09A9               	comf	i1___aodiv@dividend+1,f
 18115  0C2B  09AA               	comf	i1___aodiv@dividend+2,f
 18116  0C2C  09AB               	comf	i1___aodiv@dividend+3,f
 18117  0C2D  09AC               	comf	i1___aodiv@dividend+4,f
 18118  0C2E  09AD               	comf	i1___aodiv@dividend+5,f
 18119  0C2F  09AE               	comf	i1___aodiv@dividend+6,f
 18120  0C30  09AF               	comf	i1___aodiv@dividend+7,f
 18121  0C31  0AA8               	incf	i1___aodiv@dividend,f
 18122  0C32  1D03               	skipz
 18123  0C33  2C47               	goto	i1l4894
 18124  0C34  0AA9               	incf	i1___aodiv@dividend+1,f
 18125  0C35  1D03               	skipz
 18126  0C36  2C47               	goto	i1l4894
 18127  0C37  0AAA               	incf	i1___aodiv@dividend+2,f
 18128  0C38  1D03               	skipz
 18129  0C39  2C47               	goto	i1l4894
 18130  0C3A  0AAB               	incf	i1___aodiv@dividend+3,f
 18131  0C3B  1D03               	skipz
 18132  0C3C  2C47               	goto	i1l4894
 18133  0C3D  0AAC               	incf	i1___aodiv@dividend+4,f
 18134  0C3E  1D03               	skipz
 18135  0C3F  2C47               	goto	i1l4894
 18136  0C40  0AAD               	incf	i1___aodiv@dividend+5,f
 18137  0C41  1D03               	skipz
 18138  0C42  2C47               	goto	i1l4894
 18139  0C43  0AAE               	incf	i1___aodiv@dividend+6,f
 18140  0C44  1D03               	skipz
 18141  0C45  2C47               	goto	i1l4894
 18142  0C46  0AAF               	incf	i1___aodiv@dividend+7,f
 18143  0C47                     i1l4894:	
 18144  0C47  3001               	movlw	1
 18145  0C48  00F0               	movwf	??i1___aodiv
 18146  0C49  0870               	movf	??i1___aodiv,w
 18147  0C4A  06F2               	xorwf	i1___aodiv@sign,f
 18148  0C4B                     i1l4896:	
 18149  0C4B  3073               	movlw	low i1___aodiv@quotient
 18150  0C4C  0086               	movwf	6
 18151  0C4D  3000               	movlw	high i1___aodiv@quotient
 18152  0C4E  0087               	movwf	7
 18153  0C4F  3008               	movlw	8
 18154  0C50  00F0               	movwf	??i1___aodiv
 18155  0C51  3000               	movlw	0
 18156  0C52                     u449_20:	
 18157  0C52  001E               	movwi fsr1++
 18158  0C53  0BF0               	decfsz	??i1___aodiv,f
 18159  0C54  2C52               	goto	u449_20
 18160  0C55  0020               	movlb	0	; select bank0
 18161  0C56  0820               	movf	i1___aodiv@divisor,w
 18162  0C57  0421               	iorwf	i1___aodiv@divisor+1,w
 18163  0C58  0422               	iorwf	i1___aodiv@divisor+2,w
 18164  0C59  0423               	iorwf	i1___aodiv@divisor+3,w
 18165  0C5A  0424               	iorwf	i1___aodiv@divisor+4,w
 18166  0C5B  0425               	iorwf	i1___aodiv@divisor+5,w
 18167  0C5C  0426               	iorwf	i1___aodiv@divisor+6,w
 18168  0C5D  0427               	iorwf	i1___aodiv@divisor+7,w
 18169  0C5E  1903               	skipnz
 18170  0C5F  2CB6               	goto	i1l4918
 18171  0C60  01F1               	clrf	i1___aodiv@counter
 18172  0C61  0AF1               	incf	i1___aodiv@counter,f
 18173  0C62                     i1l4906:	
 18174  0C62  1BA7               	btfsc	i1___aodiv@divisor+7,7
 18175  0C63  2C71               	goto	i1l4908
 18176  0C64  35A0               	lslf	i1___aodiv@divisor,f
 18177  0C65  0DA1               	rlf	i1___aodiv@divisor+1,f
 18178  0C66  0DA2               	rlf	i1___aodiv@divisor+2,f
 18179  0C67  0DA3               	rlf	i1___aodiv@divisor+3,f
 18180  0C68  0DA4               	rlf	i1___aodiv@divisor+4,f
 18181  0C69  0DA5               	rlf	i1___aodiv@divisor+5,f
 18182  0C6A  0DA6               	rlf	i1___aodiv@divisor+6,f
 18183  0C6B  0DA7               	rlf	i1___aodiv@divisor+7,f
 18184  0C6C  3001               	movlw	1
 18185  0C6D  00F0               	movwf	??i1___aodiv
 18186  0C6E  0870               	movf	??i1___aodiv,w
 18187  0C6F  07F1               	addwf	i1___aodiv@counter,f
 18188  0C70  2C62               	goto	i1l4906
 18189  0C71                     i1l4908:	
 18190  0C71  35F3               	lslf	i1___aodiv@quotient,f
 18191  0C72  0DF4               	rlf	i1___aodiv@quotient+1,f
 18192  0C73  0DF5               	rlf	i1___aodiv@quotient+2,f
 18193  0C74  0DF6               	rlf	i1___aodiv@quotient+3,f
 18194  0C75  0DF7               	rlf	i1___aodiv@quotient+4,f
 18195  0C76  0DF8               	rlf	i1___aodiv@quotient+5,f
 18196  0C77  0DF9               	rlf	i1___aodiv@quotient+6,f
 18197  0C78  0DFA               	rlf	i1___aodiv@quotient+7,f
 18198  0C79  0827               	movf	i1___aodiv@divisor+7,w
 18199  0C7A  022F               	subwf	i1___aodiv@dividend+7,w
 18200  0C7B  1D03               	skipz
 18201  0C7C  2C97               	goto	u452_25
 18202  0C7D  0826               	movf	i1___aodiv@divisor+6,w
 18203  0C7E  022E               	subwf	i1___aodiv@dividend+6,w
 18204  0C7F  1D03               	skipz
 18205  0C80  2C97               	goto	u452_25
 18206  0C81  0825               	movf	i1___aodiv@divisor+5,w
 18207  0C82  022D               	subwf	i1___aodiv@dividend+5,w
 18208  0C83  1D03               	skipz
 18209  0C84  2C97               	goto	u452_25
 18210  0C85  0824               	movf	i1___aodiv@divisor+4,w
 18211  0C86  022C               	subwf	i1___aodiv@dividend+4,w
 18212  0C87  1D03               	skipz
 18213  0C88  2C97               	goto	u452_25
 18214  0C89  0823               	movf	i1___aodiv@divisor+3,w
 18215  0C8A  022B               	subwf	i1___aodiv@dividend+3,w
 18216  0C8B  1D03               	skipz
 18217  0C8C  2C97               	goto	u452_25
 18218  0C8D  0822               	movf	i1___aodiv@divisor+2,w
 18219  0C8E  022A               	subwf	i1___aodiv@dividend+2,w
 18220  0C8F  1D03               	skipz
 18221  0C90  2C97               	goto	u452_25
 18222  0C91  0821               	movf	i1___aodiv@divisor+1,w
 18223  0C92  0229               	subwf	i1___aodiv@dividend+1,w
 18224  0C93  1D03               	skipz
 18225  0C94  2C97               	goto	u452_25
 18226  0C95  0820               	movf	i1___aodiv@divisor,w
 18227  0C96  0228               	subwf	i1___aodiv@dividend,w
 18228  0C97                     u452_25:	
 18229  0C97  1C03               	skipc
 18230  0C98  2CAA               	goto	i1l4916
 18231  0C99  0820               	movf	i1___aodiv@divisor,w
 18232  0C9A  02A8               	subwf	i1___aodiv@dividend,f
 18233  0C9B  0821               	movf	i1___aodiv@divisor+1,w
 18234  0C9C  3BA9               	subwfb	i1___aodiv@dividend+1,f
 18235  0C9D  0822               	movf	i1___aodiv@divisor+2,w
 18236  0C9E  3BAA               	subwfb	i1___aodiv@dividend+2,f
 18237  0C9F  0823               	movf	i1___aodiv@divisor+3,w
 18238  0CA0  3BAB               	subwfb	i1___aodiv@dividend+3,f
 18239  0CA1  0824               	movf	i1___aodiv@divisor+4,w
 18240  0CA2  3BAC               	subwfb	i1___aodiv@dividend+4,f
 18241  0CA3  0825               	movf	i1___aodiv@divisor+5,w
 18242  0CA4  3BAD               	subwfb	i1___aodiv@dividend+5,f
 18243  0CA5  0826               	movf	i1___aodiv@divisor+6,w
 18244  0CA6  3BAE               	subwfb	i1___aodiv@dividend+6,f
 18245  0CA7  0827               	movf	i1___aodiv@divisor+7,w
 18246  0CA8  3BAF               	subwfb	i1___aodiv@dividend+7,f
 18247  0CA9  1473               	bsf	i1___aodiv@quotient,0
 18248  0CAA                     i1l4916:	
 18249  0CAA  36A7               	lsrf	i1___aodiv@divisor+7,f
 18250  0CAB  0CA6               	rrf	i1___aodiv@divisor+6,f
 18251  0CAC  0CA5               	rrf	i1___aodiv@divisor+5,f
 18252  0CAD  0CA4               	rrf	i1___aodiv@divisor+4,f
 18253  0CAE  0CA3               	rrf	i1___aodiv@divisor+3,f
 18254  0CAF  0CA2               	rrf	i1___aodiv@divisor+2,f
 18255  0CB0  0CA1               	rrf	i1___aodiv@divisor+1,f
 18256  0CB1  0CA0               	rrf	i1___aodiv@divisor,f
 18257  0CB2  3001               	movlw	1
 18258  0CB3  02F1               	subwf	i1___aodiv@counter,f
 18259  0CB4  1D03               	btfss	3,2
 18260  0CB5  2C71               	goto	i1l4908
 18261  0CB6                     i1l4918:	
 18262  0CB6  0872               	movf	i1___aodiv@sign,w
 18263  0CB7  1903               	btfsc	3,2
 18264  0CB8  2CD7               	goto	i1l1496
 18265  0CB9  09F3               	comf	i1___aodiv@quotient,f
 18266  0CBA  09F4               	comf	i1___aodiv@quotient+1,f
 18267  0CBB  09F5               	comf	i1___aodiv@quotient+2,f
 18268  0CBC  09F6               	comf	i1___aodiv@quotient+3,f
 18269  0CBD  09F7               	comf	i1___aodiv@quotient+4,f
 18270  0CBE  09F8               	comf	i1___aodiv@quotient+5,f
 18271  0CBF  09F9               	comf	i1___aodiv@quotient+6,f
 18272  0CC0  09FA               	comf	i1___aodiv@quotient+7,f
 18273  0CC1  0AF3               	incf	i1___aodiv@quotient,f
 18274  0CC2  1D03               	skipz
 18275  0CC3  2CD7               	goto	i1l1496
 18276  0CC4  0AF4               	incf	i1___aodiv@quotient+1,f
 18277  0CC5  1D03               	skipz
 18278  0CC6  2CD7               	goto	i1l1496
 18279  0CC7  0AF5               	incf	i1___aodiv@quotient+2,f
 18280  0CC8  1D03               	skipz
 18281  0CC9  2CD7               	goto	i1l1496
 18282  0CCA  0AF6               	incf	i1___aodiv@quotient+3,f
 18283  0CCB  1D03               	skipz
 18284  0CCC  2CD7               	goto	i1l1496
 18285  0CCD  0AF7               	incf	i1___aodiv@quotient+4,f
 18286  0CCE  1D03               	skipz
 18287  0CCF  2CD7               	goto	i1l1496
 18288  0CD0  0AF8               	incf	i1___aodiv@quotient+5,f
 18289  0CD1  1D03               	skipz
 18290  0CD2  2CD7               	goto	i1l1496
 18291  0CD3  0AF9               	incf	i1___aodiv@quotient+6,f
 18292  0CD4  1D03               	skipz
 18293  0CD5  2CD7               	goto	i1l1496
 18294  0CD6  0AFA               	incf	i1___aodiv@quotient+7,f
 18295  0CD7                     i1l1496:	
 18296  0CD7  0873               	movf	i1___aodiv@quotient,w
 18297  0CD8  0020               	movlb	0	; select bank0
 18298  0CD9  00A0               	movwf	?i1___aodiv
 18299  0CDA  0874               	movf	i1___aodiv@quotient+1,w
 18300  0CDB  00A1               	movwf	?i1___aodiv+1
 18301  0CDC  0875               	movf	i1___aodiv@quotient+2,w
 18302  0CDD  00A2               	movwf	?i1___aodiv+2
 18303  0CDE  0876               	movf	i1___aodiv@quotient+3,w
 18304  0CDF  00A3               	movwf	?i1___aodiv+3
 18305  0CE0  0877               	movf	i1___aodiv@quotient+4,w
 18306  0CE1  00A4               	movwf	?i1___aodiv+4
 18307  0CE2  0878               	movf	i1___aodiv@quotient+5,w
 18308  0CE3  00A5               	movwf	?i1___aodiv+5
 18309  0CE4  0879               	movf	i1___aodiv@quotient+6,w
 18310  0CE5  00A6               	movwf	?i1___aodiv+6
 18311  0CE6  087A               	movf	i1___aodiv@quotient+7,w
 18312  0CE7  00A7               	movwf	?i1___aodiv+7
 18313  0CE8  0008               	return
 18314  0CE9                     __end_ofi1___aodiv:	
 18315                           
 18316                           	psect	text111
 18317  1FA0                     __ptext111:	
 18318 ;; *************** function i1_ctoa *****************
 18319 ;; Defined at:
 18320 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 18321 ;; Parameters:    Size  Location     Type
 18322 ;;  fp              1    wreg     PTR struct _IO_FILE
 18323 ;;		 -> NULL(0), 
 18324 ;;  c               1   13[BANK0 ] unsigned char 
 18325 ;; Auto vars:     Size  Location     Type
 18326 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
 18327 ;;		 -> NULL(0), 
 18328 ;;  ctoa            2   17[BANK0 ] int 
 18329 ;;  ctoa            2    0        int 
 18330 ;; Return value:  Size  Location     Type
 18331 ;;                  2   13[BANK0 ] int 
 18332 ;; Registers used:
 18333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18334 ;; Tracked objects:
 18335 ;;		On entry : 0/0
 18336 ;;		On exit  : 0/0
 18337 ;;		Unchanged: 0/0
 18338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18339 ;;      Params:         0       2       0       0       0       0       0       0
 18340 ;;      Locals:         0       3       0       0       0       0       0       0
 18341 ;;      Temps:          0       1       0       0       0       0       0       0
 18342 ;;      Totals:         0       6       0       0       0       0       0       0
 18343 ;;Total ram usage:        6 bytes
 18344 ;; Hardware stack levels used:    1
 18345 ;; Hardware stack levels required when called:    5
 18346 ;; This function calls:
 18347 ;;		i1_pad
 18348 ;; This function is called by:
 18349 ;;		i1_vfpfcnvrt
 18350 ;; This function uses a non-reentrant model
 18351 ;;
 18352                           
 18353                           
 18354                           ;psect for function i1_ctoa
 18355  1FA0                     i1_ctoa:	
 18356                           
 18357                           ;incstack = 0
 18358 ;; hardware stack exceeded
 18359                           ; Regs used in i1_ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18360                           ;i1ctoa@fp stored from wreg
 18361  1FA0  0020               	movlb	0	; select bank0
 18362  1FA1  00B0               	movwf	i1ctoa@fp
 18363                           
 18364                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
 18365  1FA2  0022               	movlb	2	; select bank2
 18366  1FA3  0826               	movf	_width^(0+256),w
 18367  1FA4  0427               	iorwf	(_width+1)^(0+256),w
 18368  1FA5  1D03               	btfss	3,2
 18369  1FA6  2FAF               	goto	i1l5294
 18370  1FA7  0827               	movf	(_width+1)^(0+256),w
 18371  1FA8  0020               	movlb	0	; select bank0
 18372  1FA9  00B2               	movwf	i1ctoa@w+1
 18373  1FAA  0022               	movlb	2	; select bank2
 18374  1FAB  0826               	movf	_width^(0+256),w
 18375  1FAC  0020               	movlb	0	; select bank0
 18376  1FAD  00B1               	movwf	i1ctoa@w
 18377  1FAE  2FB8               	goto	i1l5296
 18378  1FAF                     i1l5294:	
 18379  1FAF  0826               	movf	_width^(0+256),w
 18380  1FB0  3EFF               	addlw	255
 18381  1FB1  0020               	movlb	0	; select bank0
 18382  1FB2  00B1               	movwf	i1ctoa@w
 18383  1FB3  30FF               	movlw	255
 18384  1FB4  0022               	movlb	2	; select bank2
 18385  1FB5  3D27               	addwfc	(_width+1)^(0+256),w
 18386  1FB6  0020               	movlb	0	; select bank0
 18387  1FB7  00B2               	movwf	i1ctoa@w+1
 18388  1FB8                     i1l5296:	
 18389                           
 18390                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
 18391  1FB8  082D               	movf	i1ctoa@c,w
 18392  1FB9  00AF               	movwf	??i1_ctoa
 18393  1FBA  082F               	movf	??i1_ctoa,w
 18394  1FBB  0024               	movlb	4	; select bank4
 18395  1FBC  00D0               	movwf	_dbuf^(0+512)
 18396                           
 18397                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
 18398  1FBD  01D1               	clrf	(_dbuf^(0+512)+1)
 18399                           
 18400                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
 18401  1FBE  3050               	movlw	(low (_dbuf| (0+512)))& (0+255)
 18402  1FBF  0020               	movlb	0	; select bank0
 18403  1FC0  00AF               	movwf	??i1_ctoa
 18404  1FC1  082F               	movf	??i1_ctoa,w
 18405  1FC2  00A4               	movwf	i1pad@buf
 18406  1FC3  0832               	movf	i1ctoa@w+1,w
 18407  1FC4  00A6               	movwf	i1pad@p+1
 18408  1FC5  0831               	movf	i1ctoa@w,w
 18409  1FC6  00A5               	movwf	i1pad@p
 18410  1FC7  0830               	movf	i1ctoa@fp,w
 18411  1FC8  3192  2260         	fcall	i1_pad
 18412  1FCA  0020               	movlb	0	; select bank0
 18413  1FCB  0825               	movf	?i1_pad+1,w
 18414  1FCC  00AE               	movwf	?i1_ctoa+1
 18415  1FCD  0824               	movf	?i1_pad,w
 18416  1FCE  00AD               	movwf	?i1_ctoa
 18417  1FCF  0008               	return
 18418  1FD0                     __end_ofi1_ctoa:	
 18419                           
 18420                           	psect	text112
 18421  1260                     __ptext112:	
 18422 ;; *************** function i1_pad *****************
 18423 ;; Defined at:
 18424 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 18425 ;; Parameters:    Size  Location     Type
 18426 ;;  fp              1    wreg     PTR struct _IO_FILE
 18427 ;;		 -> NULL(0), 
 18428 ;;  buf             1    4[BANK0 ] PTR unsigned char 
 18429 ;;		 -> dbuf(32), 
 18430 ;;  p               2    5[BANK0 ] int 
 18431 ;; Auto vars:     Size  Location     Type
 18432 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
 18433 ;;		 -> NULL(0), 
 18434 ;;  pad             2   10[BANK0 ] int 
 18435 ;;  pad             2    8[BANK0 ] int 
 18436 ;; Return value:  Size  Location     Type
 18437 ;;                  2    4[BANK0 ] int 
 18438 ;; Registers used:
 18439 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18440 ;; Tracked objects:
 18441 ;;		On entry : 0/0
 18442 ;;		On exit  : 0/0
 18443 ;;		Unchanged: 0/0
 18444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18445 ;;      Params:         0       3       0       0       0       0       0       0
 18446 ;;      Locals:         0       5       0       0       0       0       0       0
 18447 ;;      Temps:          0       1       0       0       0       0       0       0
 18448 ;;      Totals:         0       9       0       0       0       0       0       0
 18449 ;;Total ram usage:        9 bytes
 18450 ;; Hardware stack levels used:    1
 18451 ;; Hardware stack levels required when called:    4
 18452 ;; This function calls:
 18453 ;;		i1_fputc
 18454 ;;		i1_fputs
 18455 ;;		i1_strlen
 18456 ;; This function is called by:
 18457 ;;		i1_ctoa
 18458 ;;		i1_dtoa
 18459 ;; This function uses a non-reentrant model
 18460 ;;
 18461                           
 18462                           
 18463                           ;psect for function i1_pad
 18464  1260                     i1_pad:	
 18465                           
 18466                           ;incstack = 0
 18467 ;; hardware stack exceeded
 18468                           ; Regs used in i1_pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18469                           ;i1pad@fp stored from wreg
 18470  1260  0020               	movlb	0	; select bank0
 18471  1261  00AC               	movwf	i1pad@fp
 18472                           
 18473                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 18474  1262  0022               	movlb	2	; select bank2
 18475  1263  1C2A               	btfss	_flags^(0+256),0
 18476  1264  2A6E               	goto	i1l4868
 18477                           
 18478                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 18479  1265  0020               	movlb	0	; select bank0
 18480  1266  082C               	movf	i1pad@fp,w
 18481  1267  00A7               	movwf	??i1_pad
 18482  1268  0827               	movf	??i1_pad,w
 18483  1269  00FA               	movwf	i1fputs@fp
 18484  126A  0824               	movf	i1pad@buf,w
 18485  126B  319D  25F5  3192   	fcall	i1_fputs
 18486  126E                     i1l4868:	
 18487                           
 18488                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 18489  126E  0020               	movlb	0	; select bank0
 18490  126F  1BA6               	btfsc	i1pad@p+1,7
 18491  1270  2A76               	goto	i1l4872
 18492  1271  0826               	movf	i1pad@p+1,w
 18493  1272  00AB               	movwf	i1pad@w+1
 18494  1273  0825               	movf	i1pad@p,w
 18495  1274  00AA               	movwf	i1pad@w
 18496  1275  2A78               	goto	i1l1339
 18497  1276                     i1l4872:	
 18498  1276  01AA               	clrf	i1pad@w
 18499  1277  01AB               	clrf	i1pad@w+1
 18500  1278                     i1l1339:	
 18501                           
 18502                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 18503  1278  01A8               	clrf	i1pad@i
 18504  1279  01A9               	clrf	i1pad@i+1
 18505  127A                     i1l4878:	
 18506                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 18507                           
 18508                           
 18509                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 18510  127A  0829               	movf	i1pad@i+1,w
 18511  127B  3A80               	xorlw	128
 18512  127C  00A7               	movwf	??i1_pad
 18513  127D  082B               	movf	i1pad@w+1,w
 18514  127E  3A80               	xorlw	128
 18515  127F  0227               	subwf	??i1_pad,w
 18516  1280  1D03               	skipz
 18517  1281  2A84               	goto	u443_25
 18518  1282  082A               	movf	i1pad@w,w
 18519  1283  0228               	subwf	i1pad@i,w
 18520  1284                     u443_25:	
 18521  1284  1803               	btfsc	3,0
 18522  1285  2A98               	goto	i1l1342
 18523                           
 18524                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 18525  1286  3020               	movlw	32
 18526  1287  00F2               	movwf	i1fputc@c
 18527  1288  3000               	movlw	0
 18528  1289  00F3               	movwf	i1fputc@c+1
 18529  128A  0020               	movlb	0	; select bank0
 18530  128B  082C               	movf	i1pad@fp,w
 18531  128C  00A7               	movwf	??i1_pad
 18532  128D  0827               	movf	??i1_pad,w
 18533  128E  00F4               	movwf	i1fputc@fp
 18534  128F  3190  20C3  3192   	fcall	i1_fputc
 18535                           
 18536                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 18537  1292  3001               	movlw	1
 18538  1293  0020               	movlb	0	; select bank0
 18539  1294  07A8               	addwf	i1pad@i,f
 18540  1295  3000               	movlw	0
 18541  1296  3DA9               	addwfc	i1pad@i+1,f
 18542  1297  2A7A               	goto	i1l4878
 18543  1298                     i1l1342:	
 18544                           
 18545                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 18546  1298  0022               	movlb	2	; select bank2
 18547  1299  182A               	btfsc	_flags^(0+256),0
 18548  129A  2AA4               	goto	i1l1343
 18549                           
 18550                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 18551  129B  0020               	movlb	0	; select bank0
 18552  129C  082C               	movf	i1pad@fp,w
 18553  129D  00A7               	movwf	??i1_pad
 18554  129E  0827               	movf	??i1_pad,w
 18555  129F  00FA               	movwf	i1fputs@fp
 18556  12A0  0824               	movf	i1pad@buf,w
 18557  12A1  319D  25F5  3192   	fcall	i1_fputs
 18558  12A4                     i1l1343:	
 18559                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
 18560                           
 18561                           
 18562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 18563  12A4  0020               	movlb	0	; select bank0
 18564  12A5  0824               	movf	i1pad@buf,w
 18565  12A6  319C  2434         	fcall	i1_strlen
 18566  12A8  0020               	movlb	0	; select bank0
 18567  12A9  082A               	movf	i1pad@w,w
 18568  12AA  0770               	addwf	?i1_strlen,w
 18569  12AB  00A4               	movwf	?i1_pad
 18570  12AC  082B               	movf	i1pad@w+1,w
 18571  12AD  3D71               	addwfc	?i1_strlen+1,w
 18572  12AE  00A5               	movwf	?i1_pad+1
 18573  12AF  0008               	return
 18574  12B0                     __end_ofi1_pad:	
 18575                           
 18576                           	psect	text113
 18577  1C34                     __ptext113:	
 18578 ;; *************** function i1_strlen *****************
 18579 ;; Defined at:
 18580 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 18581 ;; Parameters:    Size  Location     Type
 18582 ;;  s               1    wreg     PTR const unsigned char 
 18583 ;;		 -> dbuf(32), 
 18584 ;; Auto vars:     Size  Location     Type
 18585 ;;  s               1    4[COMMON] PTR const unsigned char 
 18586 ;;		 -> dbuf(32), 
 18587 ;;  strlen          1    3[COMMON] PTR const unsigned char 
 18588 ;;		 -> dbuf(32), 
 18589 ;; Return value:  Size  Location     Type
 18590 ;;                  2    0[COMMON] unsigned int 
 18591 ;; Registers used:
 18592 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18593 ;; Tracked objects:
 18594 ;;		On entry : 0/0
 18595 ;;		On exit  : 0/0
 18596 ;;		Unchanged: 0/0
 18597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18598 ;;      Params:         2       0       0       0       0       0       0       0
 18599 ;;      Locals:         2       0       0       0       0       0       0       0
 18600 ;;      Temps:          1       0       0       0       0       0       0       0
 18601 ;;      Totals:         5       0       0       0       0       0       0       0
 18602 ;;Total ram usage:        5 bytes
 18603 ;; Hardware stack levels used:    1
 18604 ;; This function calls:
 18605 ;;		Nothing
 18606 ;; This function is called by:
 18607 ;;		i1_pad
 18608 ;; This function uses a non-reentrant model
 18609 ;;
 18610                           
 18611                           
 18612                           ;psect for function i1_strlen
 18613  1C34                     i1_strlen:	
 18614                           
 18615                           ;incstack = 0
 18616 ;; hardware stack exceeded
 18617                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 18618                           ;i1strlen@s stored from wreg
 18619  1C34  00F4               	movwf	i1strlen@s
 18620  1C35  0874               	movf	i1strlen@s,w
 18621  1C36  00F2               	movwf	??i1_strlen
 18622  1C37  0872               	movf	??i1_strlen,w
 18623  1C38  00F3               	movwf	i1strlen@a
 18624  1C39                     i1l4738:	
 18625  1C39  0874               	movf	i1strlen@s,w
 18626  1C3A  0086               	movwf	6
 18627  1C3B  3002               	movlw	2	; select bank4/5
 18628  1C3C  0087               	movwf	7
 18629  1C3D  0801               	movf	1,w
 18630  1C3E  1903               	btfsc	3,2
 18631  1C3F  2C45               	goto	i1l4740
 18632  1C40  3001               	movlw	1
 18633  1C41  00F2               	movwf	??i1_strlen
 18634  1C42  0872               	movf	??i1_strlen,w
 18635  1C43  07F4               	addwf	i1strlen@s,f
 18636  1C44  2C39               	goto	i1l4738
 18637  1C45                     i1l4740:	
 18638  1C45  0873               	movf	i1strlen@a,w
 18639  1C46  0274               	subwf	i1strlen@s,w
 18640  1C47  00F0               	movwf	?i1_strlen
 18641  1C48  01F1               	clrf	?i1_strlen+1
 18642  1C49  1BF0               	btfsc	?i1_strlen,7
 18643  1C4A  03F1               	decf	?i1_strlen+1,f
 18644  1C4B  0008               	return
 18645  1C4C                     __end_ofi1_strlen:	
 18646                           
 18647                           	psect	text114
 18648  1DF5                     __ptext114:	
 18649 ;; *************** function i1_fputs *****************
 18650 ;; Defined at:
 18651 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 18652 ;; Parameters:    Size  Location     Type
 18653 ;;  s               1    wreg     PTR const unsigned char 
 18654 ;;		 -> dbuf(32), 
 18655 ;;  fp              1   10[COMMON] PTR struct _IO_FILE
 18656 ;;		 -> NULL(0), 
 18657 ;; Auto vars:     Size  Location     Type
 18658 ;;  s               1    0[BANK0 ] PTR const unsigned char 
 18659 ;;		 -> dbuf(32), 
 18660 ;;  fputs           2    2[BANK0 ] int 
 18661 ;;  fputs           1    1[BANK0 ] unsigned char 
 18662 ;; Return value:  Size  Location     Type
 18663 ;;                  2   10[COMMON] int 
 18664 ;; Registers used:
 18665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18666 ;; Tracked objects:
 18667 ;;		On entry : 0/0
 18668 ;;		On exit  : 0/0
 18669 ;;		Unchanged: 0/0
 18670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18671 ;;      Params:         1       0       0       0       0       0       0       0
 18672 ;;      Locals:         0       4       0       0       0       0       0       0
 18673 ;;      Temps:          3       0       0       0       0       0       0       0
 18674 ;;      Totals:         4       4       0       0       0       0       0       0
 18675 ;;Total ram usage:        8 bytes
 18676 ;; Hardware stack levels used:    1
 18677 ;; Hardware stack levels required when called:    3
 18678 ;; This function calls:
 18679 ;;		i1_fputc
 18680 ;; This function is called by:
 18681 ;;		i1_pad
 18682 ;; This function uses a non-reentrant model
 18683 ;;
 18684                           
 18685                           
 18686                           ;psect for function i1_fputs
 18687  1DF5                     i1_fputs:	
 18688                           
 18689                           ;incstack = 0
 18690 ;; hardware stack exceeded
 18691                           ; Regs used in i1_fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18692                           ;i1fputs@s stored from wreg
 18693  1DF5  0020               	movlb	0	; select bank0
 18694  1DF6  00A0               	movwf	i1fputs@s
 18695  1DF7  01A2               	clrf	i1fputs@i
 18696  1DF8  01A3               	clrf	i1fputs@i+1
 18697  1DF9                     i1l4732:	
 18698  1DF9  0822               	movf	i1fputs@i,w
 18699  1DFA  0720               	addwf	i1fputs@s,w
 18700  1DFB  00FB               	movwf	??i1_fputs
 18701  1DFC  087B               	movf	??i1_fputs,w
 18702  1DFD  0086               	movwf	6
 18703  1DFE  3002               	movlw	2	; select bank4/5
 18704  1DFF  0087               	movwf	7
 18705  1E00  0801               	movf	1,w
 18706  1E01  00FC               	movwf	??i1_fputs+1
 18707  1E02  087C               	movf	??i1_fputs+1,w
 18708  1E03  00A1               	movwf	i1fputs@c
 18709  1E04  0821               	movf	i1fputs@c,w
 18710  1E05  1903               	btfsc	3,2
 18711  1E06  0008               	return
 18712  1E07  0821               	movf	i1fputs@c,w
 18713  1E08  00FB               	movwf	??i1_fputs
 18714  1E09  01FC               	clrf	??i1_fputs+1
 18715  1E0A  087B               	movf	??i1_fputs,w
 18716  1E0B  00F2               	movwf	i1fputc@c
 18717  1E0C  087C               	movf	??i1_fputs+1,w
 18718  1E0D  00F3               	movwf	i1fputc@c+1
 18719  1E0E  087A               	movf	i1fputs@fp,w
 18720  1E0F  00FD               	movwf	??i1_fputs+2
 18721  1E10  087D               	movf	??i1_fputs+2,w
 18722  1E11  00F4               	movwf	i1fputc@fp
 18723  1E12  3190  20C3  319D   	fcall	i1_fputc
 18724  1E15  3001               	movlw	1
 18725  1E16  0020               	movlb	0	; select bank0
 18726  1E17  07A2               	addwf	i1fputs@i,f
 18727  1E18  3000               	movlw	0
 18728  1E19  3DA3               	addwfc	i1fputs@i+1,f
 18729  1E1A  2DF9               	goto	i1l4732
 18730  1E1B                     __end_ofi1_fputs:	
 18731                           
 18732                           	psect	text115
 18733  10C3                     __ptext115:	
 18734 ;; *************** function i1_fputc *****************
 18735 ;; Defined at:
 18736 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 18737 ;; Parameters:    Size  Location     Type
 18738 ;;  c               2    2[COMMON] int 
 18739 ;;  fp              1    4[COMMON] PTR struct _IO_FILE
 18740 ;;		 -> NULL(0), 
 18741 ;; Auto vars:     Size  Location     Type
 18742 ;;		None
 18743 ;; Return value:  Size  Location     Type
 18744 ;;                  2    2[COMMON] int 
 18745 ;; Registers used:
 18746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18747 ;; Tracked objects:
 18748 ;;		On entry : 0/0
 18749 ;;		On exit  : 0/0
 18750 ;;		Unchanged: 0/0
 18751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18752 ;;      Params:         3       0       0       0       0       0       0       0
 18753 ;;      Locals:         0       0       0       0       0       0       0       0
 18754 ;;      Temps:          5       0       0       0       0       0       0       0
 18755 ;;      Totals:         8       0       0       0       0       0       0       0
 18756 ;;Total ram usage:        8 bytes
 18757 ;; Hardware stack levels used:    1
 18758 ;; Hardware stack levels required when called:    2
 18759 ;; This function calls:
 18760 ;;		i1_putch
 18761 ;; This function is called by:
 18762 ;;		i1_pad
 18763 ;;		i1_vfpfcnvrt
 18764 ;;		i1_fputs
 18765 ;; This function uses a non-reentrant model
 18766 ;;
 18767                           
 18768                           
 18769                           ;psect for function i1_fputc
 18770  10C3                     i1_fputc:	
 18771                           
 18772                           ;incstack = 0
 18773 ;; hardware stack exceeded
 18774                           ; Regs used in i1_fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18775  10C3  0874               	movf	i1fputc@fp,w
 18776  10C4  1D03               	btfss	3,2
 18777  10C5  0874               	movf	i1fputc@fp,w
 18778  10C6  1D03               	btfss	3,2
 18779  10C7  28CC               	goto	i1l4626
 18780  10C8  0872               	movf	i1fputc@c,w
 18781  10C9  3199  21F7         	fcall	i1_putch
 18782  10CB  0008               	return
 18783  10CC                     i1l4626:	
 18784  10CC  0874               	movf	i1fputc@fp,w
 18785  10CD  3E03               	addlw	3
 18786  10CE  0086               	movwf	6
 18787  10CF  0187               	clrf	7
 18788  10D0  0016               	moviw fsr1++
 18789  10D1  0401               	iorwf	1,w
 18790  10D2  1903               	btfsc	3,2
 18791  10D3  28EF               	goto	i1l4630
 18792  10D4  0874               	movf	i1fputc@fp,w
 18793  10D5  3E03               	addlw	3
 18794  10D6  0086               	movwf	6
 18795  10D7  0187               	clrf	7
 18796  10D8  3F40               	moviw [0]fsr1
 18797  10D9  00F5               	movwf	??i1_fputc
 18798  10DA  3F41               	moviw [1]fsr1
 18799  10DB  00F6               	movwf	??i1_fputc+1
 18800  10DC  0A74               	incf	i1fputc@fp,w
 18801  10DD  0086               	movwf	6
 18802  10DE  0187               	clrf	7
 18803  10DF  3F40               	moviw [0]fsr1
 18804  10E0  00F7               	movwf	??i1_fputc+2
 18805  10E1  3F41               	moviw [1]fsr1
 18806  10E2  00F8               	movwf	??i1_fputc+3
 18807  10E3  0878               	movf	??i1_fputc+3,w
 18808  10E4  3A80               	xorlw	128
 18809  10E5  00F9               	movwf	??i1_fputc+4
 18810  10E6  0876               	movf	??i1_fputc+1,w
 18811  10E7  3A80               	xorlw	128
 18812  10E8  0279               	subwf	??i1_fputc+4,w
 18813  10E9  1D03               	skipz
 18814  10EA  28ED               	goto	u414_25
 18815  10EB  0875               	movf	??i1_fputc,w
 18816  10EC  0277               	subwf	??i1_fputc+2,w
 18817  10ED                     u414_25:	
 18818  10ED  1803               	skipnc
 18819  10EE  0008               	return
 18820  10EF                     i1l4630:	
 18821  10EF  0A74               	incf	i1fputc@fp,w
 18822  10F0  0086               	movwf	6
 18823  10F1  0187               	clrf	7
 18824  10F2  3001               	movlw	1
 18825  10F3  0781               	addwf	1,f
 18826  10F4  3141               	addfsr 1,1
 18827  10F5  1803               	skipnc
 18828  10F6  0A81               	incf	1,f
 18829  10F7  0008               	return
 18830  10F8                     __end_ofi1_fputc:	
 18831                           
 18832                           	psect	text116
 18833  19F7                     __ptext116:	
 18834 ;; *************** function i1_putch *****************
 18835 ;; Defined at:
 18836 ;;		line 174 in file "mcc_generated_files/eusart.c"
 18837 ;; Parameters:    Size  Location     Type
 18838 ;;  txData          1    wreg     unsigned char 
 18839 ;; Auto vars:     Size  Location     Type
 18840 ;;  txData          1    1[COMMON] unsigned char 
 18841 ;; Return value:  Size  Location     Type
 18842 ;;                  1    wreg      void 
 18843 ;; Registers used:
 18844 ;;		wreg, status,2, status,0, pclath, cstack
 18845 ;; Tracked objects:
 18846 ;;		On entry : 0/0
 18847 ;;		On exit  : 0/0
 18848 ;;		Unchanged: 0/0
 18849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18850 ;;      Params:         0       0       0       0       0       0       0       0
 18851 ;;      Locals:         1       0       0       0       0       0       0       0
 18852 ;;      Temps:          0       0       0       0       0       0       0       0
 18853 ;;      Totals:         1       0       0       0       0       0       0       0
 18854 ;;Total ram usage:        1 bytes
 18855 ;; Hardware stack levels used:    1
 18856 ;; Hardware stack levels required when called:    1
 18857 ;; This function calls:
 18858 ;;		i1_EUSART_Write
 18859 ;; This function is called by:
 18860 ;;		i1_fputc
 18861 ;; This function uses a non-reentrant model
 18862 ;;
 18863                           
 18864                           
 18865                           ;psect for function i1_putch
 18866  19F7                     i1_putch:	
 18867                           
 18868                           ;incstack = 0
 18869 ;; hardware stack exceeded
 18870                           ; Regs used in i1_putch: [wreg+status,2+status,0+pclath+cstack]
 18871                           ;i1putch@txData stored from wreg
 18872  19F7  00F1               	movwf	i1putch@txData
 18873                           
 18874                           ;mcc_generated_files/eusart.c: 174: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 175: {;mcc_generated_files/eusart.c: 176:     EUSART_Write(txData);
 18875  19F8  0871               	movf	i1putch@txData,w
 18876  19F9  319A  2221         	fcall	i1_EUSART_Write
 18877  19FB  0008               	return
 18878  19FC                     __end_ofi1_putch:	
 18879                           
 18880                           	psect	text117
 18881  1A21                     __ptext117:	
 18882 ;; *************** function i1_EUSART_Write *****************
 18883 ;; Defined at:
 18884 ;;		line 160 in file "mcc_generated_files/eusart.c"
 18885 ;; Parameters:    Size  Location     Type
 18886 ;;  txData          1    wreg     unsigned char 
 18887 ;; Auto vars:     Size  Location     Type
 18888 ;;  txData          1    0[COMMON] unsigned char 
 18889 ;; Return value:  Size  Location     Type
 18890 ;;                  1    wreg      void 
 18891 ;; Registers used:
 18892 ;;		wreg
 18893 ;; Tracked objects:
 18894 ;;		On entry : 0/0
 18895 ;;		On exit  : 0/0
 18896 ;;		Unchanged: 0/0
 18897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18898 ;;      Params:         0       0       0       0       0       0       0       0
 18899 ;;      Locals:         1       0       0       0       0       0       0       0
 18900 ;;      Temps:          0       0       0       0       0       0       0       0
 18901 ;;      Totals:         1       0       0       0       0       0       0       0
 18902 ;;Total ram usage:        1 bytes
 18903 ;; Hardware stack levels used:    1
 18904 ;; This function calls:
 18905 ;;		Nothing
 18906 ;; This function is called by:
 18907 ;;		i1_putch
 18908 ;; This function uses a non-reentrant model
 18909 ;;
 18910                           
 18911                           
 18912                           ;psect for function i1_EUSART_Write
 18913  1A21                     i1_EUSART_Write:	
 18914                           
 18915                           ;incstack = 0
 18916 ;; hardware stack exceeded
 18917                           ; Regs used in i1_EUSART_Write: [wreg]
 18918                           ;i1EUSART_Write@txData stored from wreg
 18919  1A21  00F0               	movwf	i1EUSART_Write@txData
 18920  1A22                     i1l715:	
 18921                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:     }
 18922                           
 18923                           
 18924                           ;mcc_generated_files/eusart.c: 162:     while(0 == PIR1bits.TXIF)
 18925  1A22  0020               	movlb	0	; select bank0
 18926  1A23  1E11               	btfss	17,4	;volatile
 18927  1A24  2A22               	goto	i1l715
 18928                           
 18929                           ;mcc_generated_files/eusart.c: 166:     TXREG = txData;
 18930  1A25  0870               	movf	i1EUSART_Write@txData,w
 18931  1A26  0023               	movlb	3	; select bank3
 18932  1A27  009A               	movwf	26	;volatile
 18933  1A28  0008               	return
 18934  1A29                     __end_ofi1_EUSART_Write:	
 18935                           
 18936                           	psect	text118
 18937  19DB                     __ptext118:	
 18938 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 18939 ;; Defined at:
 18940 ;;		line 148 in file "mcc_generated_files/tmr0.c"
 18941 ;; Parameters:    Size  Location     Type
 18942 ;;		None
 18943 ;; Auto vars:     Size  Location     Type
 18944 ;;		None
 18945 ;; Return value:  Size  Location     Type
 18946 ;;                  1    wreg      void 
 18947 ;; Registers used:
 18948 ;;		None
 18949 ;; Tracked objects:
 18950 ;;		On entry : 0/0
 18951 ;;		On exit  : 0/0
 18952 ;;		Unchanged: 0/0
 18953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18954 ;;      Params:         0       0       0       0       0       0       0       0
 18955 ;;      Locals:         0       0       0       0       0       0       0       0
 18956 ;;      Temps:          0       0       0       0       0       0       0       0
 18957 ;;      Totals:         0       0       0       0       0       0       0       0
 18958 ;;Total ram usage:        0 bytes
 18959 ;; Hardware stack levels used:    1
 18960 ;; This function calls:
 18961 ;;		Nothing
 18962 ;; This function is called by:
 18963 ;;		_TMR0_Initialize
 18964 ;;		_TMR0_CallBack
 18965 ;; This function uses a non-reentrant model
 18966 ;;
 18967                           
 18968                           
 18969                           ;psect for function _TMR0_DefaultInterruptHandler
 18970  19DB                     _TMR0_DefaultInterruptHandler:	
 18971                           
 18972                           ;incstack = 0
 18973 ;; hardware stack exceeded
 18974                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 18975  19DB  0008               	return
 18976  19DC                     __end_of_TMR0_DefaultInterruptHandler:	
 18977                           
 18978                           	psect	text119
 18979  119B                     __ptext119:	
 18980 ;; *************** function _EUSART_Receive_ISR *****************
 18981 ;; Defined at:
 18982 ;;		line 180 in file "mcc_generated_files/eusart.c"
 18983 ;; Parameters:    Size  Location     Type
 18984 ;;		None
 18985 ;; Auto vars:     Size  Location     Type
 18986 ;;		None
 18987 ;; Return value:  Size  Location     Type
 18988 ;;                  1    wreg      void 
 18989 ;; Registers used:
 18990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18991 ;; Tracked objects:
 18992 ;;		On entry : 0/0
 18993 ;;		On exit  : 0/0
 18994 ;;		Unchanged: 0/0
 18995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18996 ;;      Params:         0       0       0       0       0       0       0       0
 18997 ;;      Locals:         0       0       0       0       0       0       0       0
 18998 ;;      Temps:          0       0       0       0       0       0       0       0
 18999 ;;      Totals:         0       0       0       0       0       0       0       0
 19000 ;;Total ram usage:        0 bytes
 19001 ;; Hardware stack levels used:    1
 19002 ;; Hardware stack levels required when called:    2
 19003 ;; This function calls:
 19004 ;;		Absolute function
 19005 ;;		_EUSART_DefaultErrorHandler
 19006 ;;		_EUSART_DefaultFramingErrorHandler
 19007 ;;		_EUSART_DefaultOverrunErrorHandler
 19008 ;;		_EUSART_RxDataHandler
 19009 ;; This function is called by:
 19010 ;;		_EUSART_Initialize
 19011 ;;		_INTERRUPT_InterruptManager
 19012 ;; This function uses a non-reentrant model
 19013 ;;
 19014                           
 19015                           
 19016                           ;psect for function _EUSART_Receive_ISR
 19017  119B                     _EUSART_Receive_ISR:	
 19018                           
 19019                           ;mcc_generated_files/eusart.c: 183:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 19020                           
 19021                           ;incstack = 0
 19022 ;; hardware stack exceeded
 19023                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19024  119B  0020               	movlb	0	; select bank0
 19025  119C  086E               	movf	_eusartRxHead,w	;volatile
 19026  119D  3EC1               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19027  119E  0086               	movwf	6
 19028  119F  3001               	movlw	1	; select bank3/4
 19029  11A0  0087               	movwf	7
 19030  11A1  0181               	clrf	1
 19031                           
 19032                           ;mcc_generated_files/eusart.c: 185:     if(RCSTAbits.FERR){
 19033  11A2  0023               	movlb	3	; select bank3
 19034  11A3  1D1D               	btfss	29,2	;volatile
 19035  11A4  29B2               	goto	i1l6122
 19036                           
 19037                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 19038  11A5  0020               	movlb	0	; select bank0
 19039  11A6  086E               	movf	_eusartRxHead,w	;volatile
 19040  11A7  3EC1               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19041  11A8  0086               	movwf	6
 19042  11A9  3001               	movlw	1	; select bank3/4
 19043  11AA  0087               	movwf	7
 19044  11AB  1481               	bsf	1,1
 19045                           
 19046                           ;mcc_generated_files/eusart.c: 187:         EUSART_FramingErrorHandler();
 19047  11AC  0023               	movlb	3	; select bank3
 19048  11AD  0856               	movf	(_EUSART_FramingErrorHandler+1)^(0+384),w
 19049  11AE  008A               	movwf	10
 19050  11AF  0855               	movf	_EUSART_FramingErrorHandler^(0+384),w
 19051  11B0  000A               	callw
 19052  11B1  3191               	pagesel	$
 19053  11B2                     i1l6122:	
 19054                           
 19055                           ;mcc_generated_files/eusart.c: 190:     if(RCSTAbits.OERR){
 19056  11B2  0023               	movlb	3	; select bank3
 19057  11B3  1C9D               	btfss	29,1	;volatile
 19058  11B4  29C2               	goto	i1l6128
 19059                           
 19060                           ;mcc_generated_files/eusart.c: 191:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 19061  11B5  0020               	movlb	0	; select bank0
 19062  11B6  086E               	movf	_eusartRxHead,w	;volatile
 19063  11B7  3EC1               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19064  11B8  0086               	movwf	6
 19065  11B9  3001               	movlw	1	; select bank3/4
 19066  11BA  0087               	movwf	7
 19067  11BB  1501               	bsf	1,2
 19068                           
 19069                           ;mcc_generated_files/eusart.c: 192:         EUSART_OverrunErrorHandler();
 19070  11BC  0023               	movlb	3	; select bank3
 19071  11BD  0854               	movf	(_EUSART_OverrunErrorHandler+1)^(0+384),w
 19072  11BE  008A               	movwf	10
 19073  11BF  0853               	movf	_EUSART_OverrunErrorHandler^(0+384),w
 19074  11C0  000A               	callw
 19075  11C1  3191               	pagesel	$
 19076  11C2                     i1l6128:	
 19077                           
 19078                           ;mcc_generated_files/eusart.c: 195:     if(eusartRxStatusBuffer[eusartRxHead].status){
 19079  11C2  0020               	movlb	0	; select bank0
 19080  11C3  086E               	movf	_eusartRxHead,w	;volatile
 19081  11C4  3EC1               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19082  11C5  0086               	movwf	6
 19083  11C6  3001               	movlw	1	; select bank3/4
 19084  11C7  0087               	movwf	7
 19085  11C8  0801               	movf	1,w
 19086  11C9  1903               	btfsc	3,2
 19087  11CA  29D2               	goto	i1l6132
 19088                           
 19089                           ;mcc_generated_files/eusart.c: 196:         EUSART_ErrorHandler();
 19090  11CB  0023               	movlb	3	; select bank3
 19091  11CC  0852               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 19092  11CD  008A               	movwf	10
 19093  11CE  0851               	movf	_EUSART_ErrorHandler^(0+384),w
 19094  11CF  000A               	callw
 19095  11D0  3191               	pagesel	$
 19096                           
 19097                           ;mcc_generated_files/eusart.c: 197:     } else {
 19098  11D1  0008               	return
 19099  11D2                     i1l6132:	
 19100                           
 19101                           ;mcc_generated_files/eusart.c: 198:         EUSART_RxDataHandler();
 19102  11D2  319C  24AC         	fcall	_EUSART_RxDataHandler
 19103  11D4  0008               	return
 19104  11D5                     __end_of_EUSART_Receive_ISR:	
 19105                           
 19106                           	psect	text120
 19107  19EF                     __ptext120:	
 19108 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 19109 ;; Defined at:
 19110 ;;		line 216 in file "mcc_generated_files/eusart.c"
 19111 ;; Parameters:    Size  Location     Type
 19112 ;;		None
 19113 ;; Auto vars:     Size  Location     Type
 19114 ;;		None
 19115 ;; Return value:  Size  Location     Type
 19116 ;;                  1    wreg      void 
 19117 ;; Registers used:
 19118 ;;		None
 19119 ;; Tracked objects:
 19120 ;;		On entry : 0/0
 19121 ;;		On exit  : 0/0
 19122 ;;		Unchanged: 0/0
 19123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19124 ;;      Params:         0       0       0       0       0       0       0       0
 19125 ;;      Locals:         0       0       0       0       0       0       0       0
 19126 ;;      Temps:          0       0       0       0       0       0       0       0
 19127 ;;      Totals:         0       0       0       0       0       0       0       0
 19128 ;;Total ram usage:        0 bytes
 19129 ;; Hardware stack levels used:    1
 19130 ;; This function calls:
 19131 ;;		Nothing
 19132 ;; This function is called by:
 19133 ;;		_EUSART_Initialize
 19134 ;;		_EUSART_Receive_ISR
 19135 ;; This function uses a non-reentrant model
 19136 ;;
 19137                           
 19138                           
 19139                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 19140  19EF                     _EUSART_DefaultOverrunErrorHandler:	
 19141                           
 19142                           ;mcc_generated_files/eusart.c: 219:     RCSTAbits.CREN = 0;
 19143                           
 19144                           ;incstack = 0
 19145 ;; hardware stack exceeded
 19146                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 19147  19EF  0023               	movlb	3	; select bank3
 19148  19F0  121D               	bcf	29,4	;volatile
 19149                           
 19150                           ;mcc_generated_files/eusart.c: 220:     RCSTAbits.CREN = 1;
 19151  19F1  161D               	bsf	29,4	;volatile
 19152  19F2  0008               	return
 19153  19F3                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 19154                           
 19155                           	psect	text121
 19156  19DA                     __ptext121:	
 19157 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 19158 ;; Defined at:
 19159 ;;		line 214 in file "mcc_generated_files/eusart.c"
 19160 ;; Parameters:    Size  Location     Type
 19161 ;;		None
 19162 ;; Auto vars:     Size  Location     Type
 19163 ;;		None
 19164 ;; Return value:  Size  Location     Type
 19165 ;;                  1    wreg      void 
 19166 ;; Registers used:
 19167 ;;		None
 19168 ;; Tracked objects:
 19169 ;;		On entry : 0/0
 19170 ;;		On exit  : 0/0
 19171 ;;		Unchanged: 0/0
 19172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19173 ;;      Params:         0       0       0       0       0       0       0       0
 19174 ;;      Locals:         0       0       0       0       0       0       0       0
 19175 ;;      Temps:          0       0       0       0       0       0       0       0
 19176 ;;      Totals:         0       0       0       0       0       0       0       0
 19177 ;;Total ram usage:        0 bytes
 19178 ;; Hardware stack levels used:    1
 19179 ;; This function calls:
 19180 ;;		Nothing
 19181 ;; This function is called by:
 19182 ;;		_EUSART_Initialize
 19183 ;;		_EUSART_Receive_ISR
 19184 ;; This function uses a non-reentrant model
 19185 ;;
 19186                           
 19187                           
 19188                           ;psect for function _EUSART_DefaultFramingErrorHandler
 19189  19DA                     _EUSART_DefaultFramingErrorHandler:	
 19190                           
 19191                           ;incstack = 0
 19192 ;; hardware stack exceeded
 19193                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 19194  19DA  0008               	return
 19195  19DB                     __end_of_EUSART_DefaultFramingErrorHandler:	
 19196                           
 19197                           	psect	text122
 19198  19DD                     __ptext122:	
 19199 ;; *************** function _EUSART_DefaultErrorHandler *****************
 19200 ;; Defined at:
 19201 ;;		line 224 in file "mcc_generated_files/eusart.c"
 19202 ;; Parameters:    Size  Location     Type
 19203 ;;		None
 19204 ;; Auto vars:     Size  Location     Type
 19205 ;;		None
 19206 ;; Return value:  Size  Location     Type
 19207 ;;                  1    wreg      void 
 19208 ;; Registers used:
 19209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19210 ;; Tracked objects:
 19211 ;;		On entry : 0/0
 19212 ;;		On exit  : 0/0
 19213 ;;		Unchanged: 0/0
 19214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19215 ;;      Params:         0       0       0       0       0       0       0       0
 19216 ;;      Locals:         0       0       0       0       0       0       0       0
 19217 ;;      Temps:          0       0       0       0       0       0       0       0
 19218 ;;      Totals:         0       0       0       0       0       0       0       0
 19219 ;;Total ram usage:        0 bytes
 19220 ;; Hardware stack levels used:    1
 19221 ;; Hardware stack levels required when called:    1
 19222 ;; This function calls:
 19223 ;;		_EUSART_RxDataHandler
 19224 ;; This function is called by:
 19225 ;;		_EUSART_Initialize
 19226 ;;		_EUSART_Receive_ISR
 19227 ;; This function uses a non-reentrant model
 19228 ;;
 19229                           
 19230                           
 19231                           ;psect for function _EUSART_DefaultErrorHandler
 19232  19DD                     _EUSART_DefaultErrorHandler:	
 19233                           
 19234                           ;mcc_generated_files/eusart.c: 225:     EUSART_RxDataHandler();
 19235                           
 19236                           ;incstack = 0
 19237 ;; hardware stack exceeded
 19238                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19239  19DD  319C  24AC         	fcall	_EUSART_RxDataHandler
 19240  19DF  0008               	return
 19241  19E0                     __end_of_EUSART_DefaultErrorHandler:	
 19242                           
 19243                           	psect	text123
 19244  1CAC                     __ptext123:	
 19245 ;; *************** function _EUSART_RxDataHandler *****************
 19246 ;; Defined at:
 19247 ;;		line 204 in file "mcc_generated_files/eusart.c"
 19248 ;; Parameters:    Size  Location     Type
 19249 ;;		None
 19250 ;; Auto vars:     Size  Location     Type
 19251 ;;		None
 19252 ;; Return value:  Size  Location     Type
 19253 ;;                  1    wreg      void 
 19254 ;; Registers used:
 19255 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19256 ;; Tracked objects:
 19257 ;;		On entry : 0/0
 19258 ;;		On exit  : 0/0
 19259 ;;		Unchanged: 0/0
 19260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19261 ;;      Params:         0       0       0       0       0       0       0       0
 19262 ;;      Locals:         0       0       0       0       0       0       0       0
 19263 ;;      Temps:          1       0       0       0       0       0       0       0
 19264 ;;      Totals:         1       0       0       0       0       0       0       0
 19265 ;;Total ram usage:        1 bytes
 19266 ;; Hardware stack levels used:    1
 19267 ;; This function calls:
 19268 ;;		Nothing
 19269 ;; This function is called by:
 19270 ;;		_EUSART_Receive_ISR
 19271 ;;		_EUSART_DefaultErrorHandler
 19272 ;; This function uses a non-reentrant model
 19273 ;;
 19274                           
 19275                           
 19276                           ;psect for function _EUSART_RxDataHandler
 19277  1CAC                     _EUSART_RxDataHandler:	
 19278                           
 19279                           ;mcc_generated_files/eusart.c: 206:     eusartRxBuffer[eusartRxHead++] = RCREG;
 19280                           
 19281                           ;incstack = 0
 19282 ;; hardware stack exceeded
 19283                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 19284  1CAC  0023               	movlb	3	; select bank3
 19285  1CAD  0819               	movf	25,w	;volatile
 19286  1CAE  00F0               	movwf	??_EUSART_RxDataHandler
 19287  1CAF  0020               	movlb	0	; select bank0
 19288  1CB0  086E               	movf	_eusartRxHead,w
 19289  1CB1  3EC9               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 19290  1CB2  0086               	movwf	6
 19291  1CB3  3001               	movlw	1	; select bank3/4
 19292  1CB4  0087               	movwf	7
 19293  1CB5  0870               	movf	??_EUSART_RxDataHandler,w
 19294  1CB6  0081               	movwf	1
 19295  1CB7  3001               	movlw	1
 19296  1CB8  00F0               	movwf	??_EUSART_RxDataHandler
 19297  1CB9  0870               	movf	??_EUSART_RxDataHandler,w
 19298  1CBA  07EE               	addwf	_eusartRxHead,f	;volatile
 19299                           
 19300                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 19301  1CBB  3008               	movlw	8
 19302  1CBC  026E               	subwf	_eusartRxHead,w	;volatile
 19303  1CBD  1803               	btfsc	3,0
 19304                           
 19305                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         eus
      +                          artRxHead = 0;
 19306  1CBE  01EE               	clrf	_eusartRxHead	;volatile
 19307                           
 19308                           ;mcc_generated_files/eusart.c: 211:     eusartRxCount++;
 19309  1CBF  3001               	movlw	1
 19310  1CC0  00F0               	movwf	??_EUSART_RxDataHandler
 19311  1CC1  0870               	movf	??_EUSART_RxDataHandler,w
 19312  1CC2  0022               	movlb	2	; select bank2
 19313  1CC3  07BC               	addwf	_eusartRxCount^(0+256),f	;volatile
 19314  1CC4  0008               	return
 19315  1CC5                     __end_of_EUSART_RxDataHandler:	
 19316  007E                     btemp	set	126	;btemp
 19317  007E                     int$flags	set	126
 19318  007E                     wtemp0	set	126


Data Sizes:
    Strings     32
    Constant    57
    Data        40
    BSS         130
    Persistent  47
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      80
    BANK1            80     79      79
    BANK2            80     29      77
    BANK3            80      4      59
    BANK4            80      0      80
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2829$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_Service$2829	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[9]), STR_2(CODE[3]), 
		 -> STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK2[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2483_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 2
		 -> printf@ap(BANK2[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[9]), STR_2(CODE[3]), 
		 -> STR_1(CODE[14]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 14
		 -> STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[9]), STR_2(CODE[3]), 
		 -> STR_1(CODE[14]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 2
		 -> printf@ap(BANK2[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK2[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK4[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    S96$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    S96$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    callback_sampled	PTR FTN(enum E2886,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    i1_abs->i1___aomod
    i1_pad->i1_fputs
    i1_fputs->i1_fputc
    i1_fputc->i1_putch
    i1_putch->i1_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR0_CallBack->i1_printf
    i1_printf->i1_vfprintf
    i1_vfprintf->i1_vfpfcnvrt
    i1_vfpfcnvrt->i1_dtoa
    i1_dtoa->i1___aodiv
    i1_dtoa->i1___aomod
    i1_abs->i1___aomod
    i1_ctoa->i1_pad
    i1_pad->i1_fputs

Critical Paths under _main in BANK1

    _main->_printf
    _check_message->_printf
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _myButtonReleasedCallback->_printf
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _DATA_PROCESS->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    _TMR0_ISR->_TMR0_CallBack

Critical Paths under _main in BANK2

    _main->_MTOUCH_Service_Mainloop
    _check_message->_printf
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Pressed->_myButtonReleasedCallback
    _myButtonReleasedCallback->_printf
    _DATA_PROCESS->_printf
    _printf->_vfprintf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  120450
                                             27 BANK2      2     2      0
                                              0 BANK3      4     4      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                             _LED_EN
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
                  _MTOUCH_Initialize
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0   12745
                                             12 BANK2      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      31
                                              1 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4765
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     121
                                              1 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     121
                                              3 BANK1      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              1 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    4039
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2402
                                              9 BANK1      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2303
                                              7 BANK1      2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 BANK1      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 BANK1      2     2      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 BANK1     10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     484
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              1 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              1 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              1 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              1 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   51122
                                             26 BANK2      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      34
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     259
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     259
                                              4 BANK1      2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     160
                                              1 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     202
                                              2 BANK1      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0     103
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   17259
                                             69 BANK1      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   17160
                                             62 BANK1      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0     103
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     530
                                              5 BANK1      3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     130
                                              1 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   15712
                                             58 BANK1      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1697
                                             24 BANK1      5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      67
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      67
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    6790
                                             45 BANK1     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    6247
                                             30 BANK1     15    14      1
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      31
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1    1226
                                              2 BANK1      8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     211
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     242
                                              1 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     170
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1965
                                             24 BANK1      6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     134
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     134
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0     103
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     300
                                              1 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0   33368
                                             24 BANK2      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0   33269
                                             20 BANK2      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 BANK1      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 BANK1      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1   14217
                                             15 BANK2      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             3     2      1   12930
                                             12 BANK2      3     2      1
            _MTOUCH_Button_isPressed
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              2     2      0      62
                                              1 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1   13556
                                             15 BANK2      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1   11808
                                             12 BANK2      1     0      1
                        _LED_PROCESS
                      _PROCESS_RELAY
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 BANK1      4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 BANK1      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                             12 BANK2      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1481
                                             15 BANK2      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     340
                                              1 BANK1      7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 BANK1      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                             12 BANK1      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 BANK1      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 BANK1      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     296
                                              1 BANK1     15    15      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2     121
                                              1 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2     121
                                              1 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LED_EN                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      37
                                              1 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0   24419
                                             12 BANK2      3     3      0
                        _LED_PROCESS
                      _PROCESS_RELAY
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (6) _update_state                                         2     2      0      55
                                              1 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   12683
                                             78 BANK1      1     1      0
                                              5 BANK2      7     3      4
                       _update_state (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3   12169
                                             75 BANK1      3     0      3
                                              0 BANK2      5     5      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2   11668
                                             58 BANK1     17    15      2
                               _ctoa
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                30    22      8    6164
                                             28 BANK1     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     723
                                             20 BANK1      4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             19     3     16     613
                                              1 BANK1     19     3     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             27    11     16     625
                                              1 BANK1     27    11     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 8     6      2    3637
                                             28 BANK1      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    3393
                                             19 BANK1      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     166
                                              1 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1398
                                             11 BANK1      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3    1006
                                              3 BANK1      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      62
                                              2 BANK1      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         1     1      0      31
                                              1 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (6) _PROCESS_RELAY                                        3     1      2    1713
                                              1 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          5     3      2    9937
                                              1 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _INTERRUPT_InterruptManager                          0     0      0    5945
                   Absolute function *
                 _EUSART_Receive_ISR *
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (16) _TMR1_ISR                                            1     1      0     240
                                              2 COMMON     1     1      0
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (17) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (17) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (18) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _TMR0_ISR                                            0     0      0    5705
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (17) _TMR0_CallBack                                       1     1      0    5705
                                              0 BANK1      1     1      0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                           i1_printf
 ---------------------------------------------------------------------------------
 (18) i1_printf                                            5     3      2    5705
                                             73 BANK0      5     3      2
                         i1_vfprintf
 ---------------------------------------------------------------------------------
 (19) i1_vfprintf                                          8     4      4    5583
                                             65 BANK0      8     4      4
                        i1_vfpfcnvrt
 ---------------------------------------------------------------------------------
 (20) i1_vfpfcnvrt                                        42    38      4    5301
                                             46 BANK0     19    15      4
                             i1_ctoa
                             i1_dtoa
                            i1_fputc
 ---------------------------------------------------------------------------------
 (21) i1_dtoa                                             30    22      8    2686
                                             16 BANK0     30    22      8
                          i1___aodiv
                          i1___aomod
                              i1_abs
                              i1_pad
 ---------------------------------------------------------------------------------
 (22) i1_abs                                               4     2      2      92
                                              3 COMMON     4     2      2
                          i1___aomod (ARG)
 ---------------------------------------------------------------------------------
 (22) i1___aomod                                          19     3     16     348
                                              0 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (22) i1___aodiv                                          27    11     16     352
                                              0 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (21) i1_ctoa                                              8     6      2    1507
                                             13 BANK0      6     4      2
                              i1_pad
 ---------------------------------------------------------------------------------
 (22) i1_pad                                               9     6      3    1413
                                              4 BANK0      9     6      3
                            i1_fputc
                            i1_fputs
                           i1_strlen
 ---------------------------------------------------------------------------------
 (23) i1_strlen                                            5     3      2      90
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (23) i1_fputs                                             8     7      1     561
                                             10 COMMON     4     3      1
                                              0 BANK0      4     4      0
                            i1_fputc
 ---------------------------------------------------------------------------------
 (21) i1_fputc                                             8     5      3     412
                                              2 COMMON     8     5      3
                            i1_putch
 ---------------------------------------------------------------------------------
 (22) i1_putch                                             1     1      0      44
                                              1 COMMON     1     1      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (23) i1_EUSART_Write                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (18) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (18) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 23
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
     _PROCESS_RELAY
     _printf
       _update_state (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
     _update_state
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_EN
   _LED_PROCESS
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Initialize
     _MTOUCH_Button_InitializeAll
       _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_Calibrate
           ___bmul
       _memcpy
     _MTOUCH_Sensor_InitializeAll
       _MTOUCH_Sensor_Initialize
         _MTOUCH_Sensor_Calibrate
           ___bmul
         _MTOUCH_Sensor_Enable
           ___bmul
         _Sensor_Sampled_Reset
         ___bmul
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Sensor_Scan_Initialize
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
             _PROCESS_RELAY
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
             _printf
               _update_state (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _ctoa
                     _pad
                       _fputc
                         _putch
                           _EUSART_Write
                       _fputs
                         _fputc
                           _putch
                             _EUSART_Write
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _putch
                           _EUSART_Write
                       _fputs
                         _fputc
                           _putch
                             _EUSART_Write
                       _strlen
                   _fputc
                     _putch
                       _EUSART_Write
             _update_state
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
                 ___aomod (ARG)
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
               ___aomod (ARG)
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
                   ___aomod (ARG)
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
                 ___aomod (ARG)
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
               ___aomod (ARG)
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _update_state (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _update_state (ARG)
     _vfprintf (ARG)
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       i1_printf *
         i1_vfprintf
           i1_vfpfcnvrt
             i1_ctoa
               i1_pad
                 i1_fputc
                   i1_putch
                     i1_EUSART_Write
                 i1_fputs
                   i1_fputc
                     i1_putch
                       i1_EUSART_Write
                 i1_strlen
             i1_dtoa
               i1___aodiv
               i1___aomod
               i1_abs
                 i1___aomod (ARG)
               i1_pad
                 i1_fputc
                   i1_putch
                     i1_EUSART_Write
                 i1_fputs
                   i1_fputc
                     i1_putch
                       i1_EUSART_Write
                 i1_strlen
             i1_fputc
               i1_putch
                 i1_EUSART_Write
   _TMR1_ISR *
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     185       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4E      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4F      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     1D      4D      10       96.3%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      4      3B      12       73.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      50      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     185      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jul 05 13:23:40 2019

                                    ??i1_EUSART_Write 0070                         ?_EUSART_SetRxInterruptHandler 00A1  
                     Sensor_loadADCSettings@adc_index 00A2                          ?_MTOUCH_Sensor_RawSample_Get 00A5  
                                        _update_state 14CA                                        ___bmul@product 00A3  
                                        ?_LED_PROCESS 00A1                                           __CFG_CP$OFF 0000  
                             ?_Sensor_autoCalibration 0070                            __end_of_Sensor_setInactive 1A55  
                                 __end_ofi1_vfpfcnvrt 0EF0                                       _timer0ReloadVal 0165  
                           _Sensor_setCalibratAcqTime 1B34                                           __CFG_LVP$ON 0000  
                                                 l243 08B4                                                   l272 0394  
                                                 l274 0390                                                   l291 045F  
                                                 l508 0882                                                   l279 0398  
                                                 l289 0448                                                   l715 1A9F  
                                                 _GIE 005F                                                   _PR2 001B  
                                     _timer1ReloadVal 015F                                                   _abs 1CF7  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 12B0  
                      ?_EUSART_SetFramingErrorHandler 00A1                               ?_Sensor_loadADCSettings 00A2  
                                     _TMR2_Initialize 1A29                                          __CFG_BORV$LO 0000  
                                       DATA_PROCESS@x 014E                                                   wreg 0009  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      ??_MTOUCH_Sensor_Sampled_ResetAll 00A2  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 00A3  
                   __size_of_MTOUCH_Sensor_Initialize 0018                             ?_MTOUCH_Sensor_Initialize 0070  
                                        ?_EUSART_Read 0070                                                  ?_abs 00B4  
                                                l1220 122E                                                  l1212 1225  
                                                l1206 121C                                                  l1070 1D8E  
                                                l1064 1D85                                                  l1233 1240  
                                                l1161 14F0                                                  l1226 1237  
                                                l1242 125F                                                  l1076 1D97  
                                                l1342 12E8                                                  l1239 1249  
                                                l1343 12F4                                                  l1167 1532  
                                                l1360 0528                                                  l1354 04F2  
                                                l1339 12C8                                                  l1363 05BE  
                                                l1355 04F9                                                  l1509 0B04  
                                                l1359 0514                                                  l1496 0DCE  
                                                l7002 0523                                                  l7006 0555  
                                                l7110 0FA6                                                  l7102 0F69  
                                                ?_pad 00B3                                                  l7016 0530  
                                                l7024 05CA                                                  l7120 0FCF  
                                                l7034 05DD                                                  l7050 1F26  
                                                l7028 05D2                                                  l7116 0FC9  
                                                l7060 1F39                                                  l8012 1C4E  
                                                l7038 05EA                                                  l7126 0FDB  
                                                l7054 1F28                                                  l7222 17E1  
                                                l7214 17A8                                                  l7302 0314  
                                                l8022 16FD                                                  l8110 1BE4  
                                                l7048 1F17                                                  l7216 17AC  
                                                l7400 0440                                                  l8032 171E  
                                                l8104 1BDB                                                  l7234 109B  
                                                l7242 1B68                                                  l7154 1B87  
                                                l7314 0323                                                  l7236 10BB  
                                                l8124 1B16                                                  l7164 1AFC  
                                                l8028 170D                                                  l8044 1741  
                                                l7510 123A                                                  l7502 1216  
                                                l7246 1B6E                                                  l8070 1391  
                                                l7190 090F                                                  l7334 0359  
                                                l7318 032D                                                  l8038 172F  
                                                l8046 1764                                                  l7512 1242  
                                                l7504 121E                                                  l7176 08B0  
                                                l7432 0476                                                  l7424 0463  
                                                l7360 0388                                                  l7344 036C  
                                                l7280 0305                                                  l7272 02EE  
                                                l7600 1201                                                  l8240 1D6C  
                                                l7506 1228                                                  l7098 0F49  
                                                l8410 0B4A                                                  l7282 030C  
                                                l7290 030E                                                  l7602 1204  
                                                l8322 1E6E                                                  l7508 1230  
                                                l7516 124C                                                  l7532 14E7  
                                                l8500 0BD0                                                  l7700 1555  
                                                l7196 0937                                                  l7444 049F  
                                                l7428 046D                                                  l7380 03E5  
                                                l7284 0321                                                  l8422 0B55  
                                                l7438 048A                                                  l7630 0793  
                                                l7622 077D                                                  l7606 120F  
                                                l8318 1E6C                                                  l6912 0D3D  
                                                l8408 0B47                                                  l7472 1D27  
                                                l7704 155F                                                  l7392 041E  
                                                l7384 0403                                                  l7368 039B  
                                                l7640 07AB                                                  l8328 1E81  
                                                l6914 0D42                                                  l7570 151C  
                                                l7562 1511                                                  l7554 1506  
                                                l7546 14FB                                                  l8434 0B60  
                                                l7722 1591                                                  l7714 1579  
                                                l8338 105F                                                  l6852 1137  
                                                l6924 0D59                                                  l6908 0D15  
                                                l8284 1E92                                                  l7900 161A  
                                                l7484 1D5F                                                  l7732 15A8  
                                                l7708 156C                                                  l7396 043B  
                                                l7644 07D5                                                  l7812 13B4  
                                                l6934 0DA1                                                  l6926 0D68  
                                                l6950 0A8B                                                  l8470 0B8B  
                                                l8446 0B6B                                                  l7902 1622  
                                                l7718 1583                                                  l7638 0798  
                                                l8382 1061                                                  l8710 0188  
                                                l7496 1D87                                                  l6856 115A  
                                                l6872 1CE4                                                  l6936 0DAD  
                                                l6960 0AA7                                                  l7728 159E  
                                                l7912 1418                                                  l7840 1400  
                                                l7832 13E7                                                  l7824 13CF  
                                                l7498 1D90                                                  l6866 1E1F  
                                                l6874 1CF0                                                  l6890 12C6  
                                                l6946 0A63                                                  l7578 1527  
                                                l8482 0BA0                                                  l8458 0B76  
                                                l7906 1636                                                  l7914 141C  
                                                l7818 13BC                                                  l6964 0AD7  
                                                l7684 133E                                                  l7676 168B  
                                                l7836 13F7                                                  l7828 13D7  
                                                l8388 1063                                                  l8660 00B8  
                                                l6886 12BE                                                  l6974 103B  
                                                l6958 0A98                                                  l6966 0AE3  
                                                l8494 0BBF                                                  l8398 0B19  
                                                l7694 1548                                                  l7934 0879  
                                                l7854 1F05                                                  l8734 0214  
                                                l8742 0224                                                  l8654 00A8  
                                                l6896 12CA                                                  l6976 1044  
                                                l7928 0841                                                  l8672 00D5  
                                                l8648 009D                                                  l7946 148C  
                                                l7866 1C32                                                  l8738 021D  
                                                l8666 00C8                                                  l6996 050C  
                                                l7884 100A                                                  l8772 027B  
                                                l8684 00FA                                                  l7894 1AD3  
                                                l7990 1DA9                                                  l8950 1E89  
                                                l8774 027F                                                  l8960 1254  
                                                l7976 1B46                                                  l8952 106B  
                                                l8784 02A8                                                  l8954 174E  
                                                l8956 1753                                                  l8958 0BD8  
                                                STR_1 1830                                                  STR_2 1856  
                                                STR_3 183E                                                  STR_4 1847  
                                                STR_5 1847                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u7205 1158  
                                                u7320 0D4A                                                  u7235 1D01  
                                                u7500 04C8                                                  u7510 04C9  
                                                u8400 14D0                                                  u7265 12D4  
                                                u9210 1601                                                  u7355 0D8E  
                                                u8420 14D7                                                  u7605 0544  
                                                u9205 15C9                                                  u8414 14D2  
                                                u7455 0AC5                                                  u7615 0550  
                                                u9215 15FD                                                  u8440 14DE  
                                                u8434 14D9                                                  u8290 1D5D  
                                                u7555 0504                                                  u8285 1D4E  
                                                u7805 094D                                                  u9405 1C51  
                                                u8454 14E0                                                  u7585 05C8  
                                                u9265 1445                                                  u7825 178B  
                                                u7835 1795                                                  u8900 156A  
                                                u8815 1653                                                  u9295 0857  
                                                u7855 17D2                                                  u8825 1699  
                                                u9465 1355                                                  u8940 158F  
                                                u8860 1546                                                  u8765 07B5  
                          Button_State_Pressed@button 014F                                                  u8785 1169  
                                                u8795 1F95                                                  _TMR0 0015  
                                                _TMR2 001A                                 __end_of_check_message 1E92  
                                                _WPUA 020C                                                  _WPUB 020D  
                   __size_of_Sensor_Acq_ExecutePacket 01E4                              _Sensor_getScanGroupIndex 1F14  
                                         main@prcData 01D9                             ?_Sensor_Acq_ExecutePacket 00BE  
                                         i1_dtoa$2177 003C                                          __CFG_WRT$OFF 0000  
                                  _MTOUCH_needReburst 0002                                                  abs@a 00B4  
                                                _dbuf 0250                                        i1___aodiv@sign 0072  
                                                _ctoa 102C                                                  _main 005D  
                                                _dtoa 04AC                  __size_of_MTOUCH_Button_InitializeAll 001D  
                                                _prec 0128                                                  _rest 0138  
                                                _nout 0124                                                  pad@i 00B7  
                                                pad@p 00B4                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 00B9  
                __size_of_MTOUCH_Sensor_InitializeAll 0010                                                  btemp 007E  
                                                start 0026                                       __end_ofi1_fputc 10F8  
                                     __end_ofi1_fputs 1E1B                                       __end_ofi1_putch 19FC  
                          ??_TMR1_SetInterruptHandler 00A3                                     ___bmul@multiplier 00A4  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                                      i1___aomod@sign 0072                                            i1_vfprintf 1F42  
                                  i1___aomod@dividend 0028                        __end_of_Sensor_autoCalibration 1800  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1852          Sensor_Scanfrequency_Evaluation@frequency_hop 184D  
                            _myButtonReleasedCallback 1EBD                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 001C                         __size_of_Button_State_Pressed 0066  
                                               ??_abs 00B6                                                 ??_pad 00B6  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 00B9  
                             __end_of_TMR0_Initialize 1C94                         ??_MTOUCH_Sensor_RawSample_Get 00A7  
                       Sensor_RawSample_Update@sensor 00A7                         myButtonPressedCallback@button 014C  
                      ??_TMR0_DefaultInterruptHandler 0070                             __size_of_Sensor_isEnabled 0012  
                                       ?_EUSART_Write 0070                        __size_of_OSCILLATOR_Initialize 0006  
                                       i1vfpfcnvrt@ap 0050                                         i1vfpfcnvrt@fp 0060  
                                       i1vfpfcnvrt@ll 0057                         __end_of_OSCILLATOR_Initialize 1A0E  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 00D5                   __end_of_Sensor_isCalibratingAcqTime 1AB1  
                         _Sensor_isCalibratingAcqTime 1AA7                                       __end_of___aodiv 0DE0  
                                               ?_ctoa 00BC                                                 ?_main 0070  
                                               ?_dtoa 00BC                                       __end_of___aomod 0B16  
                                       __CFG_WDTE$OFF 0000                        __end_of_Sensor_loadADCSettings 095B  
                                               u10107 017B                                                 u10117 01AB  
                                               u10037 0120                                                 u10127 01B8  
                                               u10047 012D                                                 u10137 01C5  
                                               u10057 013A                                                 u10147 01D2  
                                               u10067 0147                                                 u10157 01DF  
                                               u10077 0154                                                 u10167 01EC  
                                               u10087 0161                                                 u10177 01F9  
                                               u10097 016E                                                 u10187 0206  
                                               _T1CON 0018                                                 _T2CON 001C  
                             __size_of_Button_Service 0056                                                 i1l715 1A22  
                                               i1l813 0024                                                 i1l805 000D  
                                               i1l808 001C                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 00DA  
                                               _TMR1H 0017                                                 _TMR1L 0016  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 i1_abs 1BEF  
                                               _TXREG 019A                                                 i1_pad 1260  
                                               _TXSTA 019E                     __size_of_TMR0_SetInterruptHandler 0009  
                     __size_of_Button_DefaultCallback 0001                             ?_TMR0_SetInterruptHandler 00A1  
                                ??_MTOUCH_needReburst 00A1                                      __end_of_TMR0_ISR 1C1D  
                                    __end_of_TMR1_ISR 2000                       __size_of_Sensor_DefaultCallback 0001  
                                               _flags 012A                               __size_of_Sensor_Service 0097  
               __end_of_MTOUCH_Sensor_Scan_Initialize 1B34                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 1B24                                        _WDT_Initialize 19F3  
                             Sensor_setSampled@sensor 00A1                                                 _fputc 112D  
                                               _fputs 1E1B                                                 pad@fp 00BB  
                                               _width 0126                                                 ctoa@c 00BC  
                                               _putch 19FC                                                 ctoa@w 00BF  
                    __size_of_Button_State_NotPressed 00A3                                                 dtoa@d 00BC  
                                               dtoa@i 00D8                                                 dtoa@n 00D0  
                                               dtoa@p 00CA                                                 dtoa@s 00CE  
                                               dtoa@w 00CC                               __end_of_TMR1_Initialize 1D45  
                                               pclath 000A                                         i1putch@txData 0071  
                                _Sensor_Sampled_Reset 1A5E                                                 status 0003  
                                               wtemp0 007E                                    __size_ofi1___aodiv 00F3  
                                  __size_ofi1___aomod 00DC                                       _TMR2_StartTimer 19E6  
                    __size_of_TMR2_LoadPeriodRegister 0006                             __size_of_Sensor_setActive 0009  
                                     _TMR1_WriteTimer 1AD7                                Sensor_isEnabled@sensor 00A2  
                                    __end_ofi1_printf 1B65                                      __end_ofi1_strlen 1C4C  
                                          i1printf@ap 006D                                           i1_vfpfcnvrt 0DE0  
                                     __initialization 0028                                          __end_of_ctoa 105C  
                                        __end_of_main 02C8                                          __end_of_dtoa 05FD  
                                       i1vfprintf@fmt 0061                                 __end_of_PROCESS_RELAY 1D9A  
                                _Sensor_setCalibrated 1AE6                                 __size_of_DATA_PROCESS 00E0  
                                      ??_EUSART_Write 00A1                               __end_of_TMR2_Initialize 1A31  
                                      __CFG_LPBOR$OFF 0000                           ?_INTERRUPT_InterruptManager 0070  
                      ??_EUSART_SetRxInterruptHandler 00A3                      __end_of_MTOUCH_Button_Initialize 119B  
                                              ??_ctoa 00BE                                                ??_main 015B  
                                              ??_dtoa 00C4                               _MTOUCH_Sensor_Calibrate 1B89  
                           Sensor_Service@sensor_adc1 00E3                             Sensor_Service@sensor_adc2 00E4  
                             ??_Button_Reading_Update 00AC                                                ?i1_abs 0073  
                                              ?i1_pad 0024                  MTOUCH_Sensor_Sampled_ResetAll@sensor 00A3  
                            ?_Button_Deviation_Update 0070                                __end_of_WDT_Initialize 19F7  
                                      i1vfpfcnvrt@fmt 004E                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 00A7             __end_of_EUSART_DefaultFramingErrorHandler 19DB  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 19DA  
                          _EUSART_OverrunErrorHandler 01D3                  __size_of_MTOUCH_Sensor_RawSample_Get 001A  
                                              ?_fputc 00A3                                                ?_fputs 00AB  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              ?_putch 0070                                                _ANSELB 018D  
                                              _ANSELC 018E                            __end_of_EUSART_is_rx_ready 19E3  
                                              _BORCON 0116                                                _T1GCON 0019  
                             TMR1_WriteTimer@timerVal 0070                                                _LED_EN 19E3  
                                              i1l1342 1298                                                i1l1343 12A4  
                                              i1l1360 0679                                                i1l1354 0643  
                                              i1l1339 1278                                                i1l1363 070F  
                                              i1l1355 064A                                                i1l1509 0A25  
                                              i1l1359 0665                                                i1l1496 0CD7  
                                              i1l6122 11B2                                                i1l5322 0674  
                                              i1l6132 11D2                                                i1l5316 065D  
                                              i1l6028 1AE1                                                i1l4630 10EF  
                                              i1l5326 06A6                                                i1l6128 11C2  
                                              i1l5336 0681                                                i1l5344 071B  
                                              i1l4626 10CC                                                i1l5354 072E  
                                              i1l6154 1FEE                                                i1l4732 1DF9  
                                              i1l4740 1C45                                                i1l5348 0723  
                                              i1l5294 1FAF                                                i1l5358 073B  
                                              i1l6158 1FF4                                                i1l5296 1FB8  
                                              i1l4738 1C39                                                i1l4906 0C62  
                                              i1l4916 0CAA                                                i1l4908 0C71  
                                              i1l4940 09B9                                                i1l4932 09AC  
                                              i1l4918 0CB6                                                i1l4942 09C8  
                                              i1l4872 1276                                                i1l4928 0985  
                                              i1l4890 0C20                                                i1l4946 09F8  
                                              i1l4868 126E                                                i1l4948 0A04  
                                              i1l4878 127A                                                i1l4894 0C47  
                                              i1l4896 0C4B                                                i1l7762 0E39  
                                           ??i1_fputc 0075                                 ?_Sensor_Sampled_Reset 0070  
                                              i1l7780 0EB9                                                i1l7774 0E96  
                                              i1l7766 0E59                                                i1l7790 0ECB  
                                              i1l7784 0EBF                                                i1l7964 1F4B  
                                              i1l7966 1F68                                             ??i1_fputs 007B  
                                              u414_25 10ED                                                u443_25 1284  
                                              u452_25 0C97                                                u462_25 09E6  
                                              u449_20 0C52                                                u553_25 0655  
                                              _OSCCON 0099                                                u466_25 1BF8  
                                              u548_20 0619                                                u556_25 0719  
                                              u549_20 061A                                             ??i1_putch 0071  
                                              u558_25 0695                                                u559_25 06A1  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                                                u740lld 0A60  
                                              u729lld 0D12                     MTOUCH_Button_InitializeAll@button 00AC  
                                              i1abs@a 0073                                                i1_ctoa 1FA0  
                                              i1_dtoa 05FD                                          _DATA_PROCESS 0B16  
                                              i1pad@i 0028                                                i1pad@p 0025  
                                              i1pad@w 002A                        ??_Button_Reading_Update_Helper 00A9  
                              _Button_DefaultCallback 0800                       __end_of_MTOUCH_Service_Mainloop 1D7D  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 1AB1  
                __end_of_TMR1_DefaultInterruptHandler 19DD                 __size_of_TMR1_DefaultInterruptHandler 0001  
                        _TMR1_DefaultInterruptHandler 19DC                                _Sensor_DefaultCallback 0801  
                                        vfprintf@cfmt 0143                                           ?i1_vfprintf 0061  
                                       _packet_sample 0120                                                ___bmul 1B65  
                               ?_Sensor_setCalibrated 0070                                             ??___aodiv 00B1  
                                           ??___aomod 00B1                          Sensor_DefaultCallback@sensor 00A1  
                                      __CFG_STVREN$ON 0000                      __size_of_myButtonPressedCallback 0084  
                                              _memcpy 1000                                      ?_TMR0_Initialize 0070  
                    __end_of_MTOUCH_Button_ServiceAll 1B24                                                _printf 1BAF  
                                              pad@buf 00B3                                  __size_of_LED_PROCESS 004D  
                                              ctoa@fp 00C1                          Sensor_autoCalibration@sensor 00BD  
                                              dtoa@fp 00C9                                                _strlen 1CDE  
                                   __end_ofi1___aodiv 0CE9                                     __end_ofi1___aomod 0A37  
                                              fputc@c 00A3                                                fputs@c 00AF  
                                              fputs@i 00B0                                                fputs@s 00B2  
                             _MTOUCH_Sensor_SampleAll 1BD9                          Button_DefaultCallback@button 014C  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 1402  
                               __end_of_TMR0_CallBack 1CDE                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 10C3                   Sensor_postAcquisitionProcess@sensor 00BC  
                             __end_of_TMR2_StartTimer 19E9              TMR1_SetInterruptHandler@InterruptHandler 00A1  
            TMR0_SetInterruptHandler@InterruptHandler 00A1                    __size_of_Sensor_setCalibratAcqTime 0010  
            __end_of_MTOUCH_Button_SetPressedCallback 1A43             __size_of_MTOUCH_Button_SetPressedCallback 0009  
                  ??_MTOUCH_Button_SetPressedCallback 00A3                     ?_MTOUCH_Button_SetPressedCallback 00A1  
                    _MTOUCH_Button_SetPressedCallback 1A3A                               __end_of_TMR1_WriteTimer 1AE6  
                            __size_of_Sensor_isActive 000F                       MTOUCH_Sensor_RawSample_Get@name 00A8  
                               __end_of_TMR1_CallBack 1AC9                                      ?_TMR1_Initialize 0070  
                 Sensor_getScanGroupIndex@sensorGroup 00A4                                  __size_of_EUSART_Read 002B  
                                   _SYSTEM_Initialize 1C94                               __end_of__initialization 0059  
                 __size_of_Button_Baseline_Initialize 002F                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 00B8                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 01A0                            __end_of_Button_Tick_helper 1E69  
                       MTOUCH_Sensor_Calibrate@sensor 00A6           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 00C3  
                                 ___bmul@multiplicand 00A1                                           i1printf@fmt 0069  
                                       __end_ofi1_abs 1C06                                         __end_ofi1_pad 12B0  
                                      __pcstackCOMMON 0070                               _MTOUCH_Button_isPressed 1D45  
                                        __pidataBANK2 1A1A                                          __pidataBANK3 1DD4  
         __end_of_MTOUCH_Button_SetNotPressedCallback 1A3A          __size_of_MTOUCH_Button_SetNotPressedCallback 0009  
               ??_MTOUCH_Button_SetNotPressedCallback 00A3                  ?_MTOUCH_Button_SetNotPressedCallback 00A1  
                 _MTOUCH_Button_SetNotPressedCallback 1A31                                   ??_SYSTEM_Initialize 00AD  
                                           ?_TMR0_ISR 0070                                             ?_TMR1_ISR 0070  
                       ?_TMR1_DefaultInterruptHandler 0070                            __end_of_MTOUCH_Button_Tick 1C64  
                                      i1vfprintf@cfmt 0067                                         __end_of_fputc 1164  
                                       __end_of_fputs 1E41                      __end_of_MTOUCH_Sensor_Initialize 1C7C  
                                       __end_of_putch 1A02                             ??_MTOUCH_Sensor_Calibrate 00A5  
                                    _Sensor_isEnabled 1B77                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 1640                              Sensor_setInactive@sensor 00A1  
                                      _Button_Service 1350                      __end_of_Sensor_Acq_ExecutePacket 04AC  
                          ?_Button_State_Initializing 014F                                  Button_Service@button 0157  
                                      _OPTION_REGbits 0095                                 TMR0_ISR@CountCallBack 0132  
                                             ??i1_abs 0075                                               ??i1_pad 0027  
                               ??_Sensor_isCalibrated 00A1                            ??_Sensor_getScanGroupIndex 00A1  
                                _eusartRxStatusBuffer 01C1                        __end_of_Button_Baseline_Update 16D0  
                 Sensor_Acq_ExecutePacket@sensor_adc1 00CC                   Sensor_Acq_ExecutePacket@sensor_adc2 00BE  
                                           ?i1_printf 0069                              _MTOUCH_Button_Initialize 1164  
                     ??_EUSART_SetOverrunErrorHandler 00A3                                             ?i1_strlen 0070  
                                      _Sensor_Service 16D0                               _Button_State_NotPressed 0802  
                       __size_of_MTOUCH_Sensor_Enable 0013                                    _Sensor_setInactive 1A4C  
                                   _sensor_scan_group 1852                                               ??_fputc 00A6  
                           __end_of_SYSTEM_Initialize 1CAC                                     _lowpowerActivated 013E  
                                             ??_fputs 00AC                                   __size_ofi1_vfprintf 002F  
                    MTOUCH_Sensor_isCalibrated@sensor 00A6                                ??_Sensor_Sampled_Reset 00A1  
                                             ??_putch 00A2                                            __pbssBANK0 006E  
                                          __pbssBANK2 0120                                            __pbssBANK3 01C1  
                                          __pbssBANK4 0220                                               ?_LED_EN 0070  
                                          _check_data 105C                                  __end_of_EUSART_Write 1AA7  
                             _TMR2_LoadPeriodRegister 1A02                            ??_myButtonReleasedCallback 014D  
                        Sensor_loadADCSettings@sensor 00A9                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 1A43                                               ?i1_ctoa 002D  
                                             ?i1_dtoa 0030                           __size_of_EUSART_Receive_ISR 003A  
                          __end_of_mtouch_button_init 1830           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 00C4  
                              ??_Sensor_setCalibrated 00A1                                            __pmaintext 005D  
                                             ?___bmul 00A1                      __end_of_TMR0_SetInterruptHandler 1A94  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                                            ??_TMR0_ISR 007E  
                                          ??_TMR1_ISR 0072                        MTOUCH_Sensor_wasSampled@sensor 00A6  
                                          __pintentry 0004                                __end_of_Button_Service 13A6  
                                             ?_memcpy 00A1                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 1DB7  
                         _MTOUCH_Button_InitializeAll 1D9A                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0071                   __end_of_MTOUCH_Sensor_InitializeAll 1B54  
                         _MTOUCH_Sensor_InitializeAll 1B44                             ??_MTOUCH_Sensor_SampleAll 00E5  
                                             ?_printf 0145                       __end_of_Sensor_RawSample_Update 1F14  
                                ??_Sensor_setInactive 00A1                                               ?_strlen 00A1  
                   __size_of_MTOUCH_Sensor_wasSampled 0010                             ?_MTOUCH_Sensor_wasSampled 0070  
                                       _eusartRxCount 013C                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 00A1                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 1464                                __end_of_Sensor_Service 1767  
                             Sensor_Service@scanGroup 00E1                              _MTOUCH_Button_ServiceAll 1B14  
                           __end_of_sensor_scan_group 1856                                            ??i1_printf 007E  
                                  __size_of_vfpfcnvrt 0110                         __size_of_EUSART_RxDataHandler 0019  
                    __size_of_MTOUCH_Service_Mainloop 001C                                            ??i1_strlen 0072  
                        __end_of_Button_State_Pressed 14CA                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 00A3                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 00AD                       Sensor_setCalibratAcqTime@sensor 00A1  
                                    ?_TMR1_WriteTimer 0070                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 00A8                  __size_of_Sensor_isCalibratingAcqTime 000A  
                                             i1_fputc 10C3                                               i1_fputs 1DF5  
                                     __size_of_LED_EN 0003                                               i1pad@fp 002C  
                                             i1ctoa@c 002D                                               i1_putch 19F7  
                                             i1ctoa@w 0031                                               i1dtoa@d 0030  
                                             i1dtoa@i 004C                                               i1dtoa@n 0044  
                                             i1dtoa@p 003E                                               i1dtoa@s 0042  
                                             i1dtoa@w 0040                 Sensor_Acq_ExecutePacket@ADCOMCON_temp 00C0  
                                     __size_ofi1_ctoa 0030                                       __size_ofi1_dtoa 0151  
                           ??_MTOUCH_Button_isPressed 00A1                                            _count_conf 012C  
                                   ??_Sensor_isActive 00A1                   __size_of_EUSART_DefaultErrorHandler 0003  
                                        ?i1_vfpfcnvrt 004E                 __end_of_Sensor_postAcquisitionProcess 1213  
              __size_of_Sensor_postAcquisitionProcess 003E                         _Sensor_postAcquisitionProcess 11D5  
                             _myButtonPressedCallback 1535                               Sensor_Acquisition@retry 00DC  
                                     __size_of___bmul 0012                                               ___aodiv 0CE9  
                                         _AD1CON0bits 0711                                               ___aomod 0A37  
                      MTOUCH_Button_Initialize@button 00AA                                     i1___aodiv@divisor 0020  
                                         _AD2CON0bits 0791                                             ?_vfprintf 00EB  
                                   i1___aodiv@counter 0071                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 00D0            Sensor_Scanfrequency_Evaluation@sensor_adc2 00CD  
                                     __size_of_memcpy 002C                                               __ptext1 1E69  
                                             __ptext2 105C                                               __ptext3 1C94  
                                             __ptext4 19F3                                               __ptext5 1A29  
                                             __ptext6 1D2A                                               __ptext7 1A94  
                                             __ptext8 1C7C                                               __ptext9 1A8B  
                                             _dir_mes 0136                                __size_of_check_message 0029  
                                     __size_of_printf 0015                           Button_Reading_Update@button 00AC  
                      ??_TMR1_DefaultInterruptHandler 0070                                       __size_of_strlen 0019  
                                           _T1CONbits 0018                              _MTOUCH_Sensor_Initialize 1C64  
                               _OSCILLATOR_Initialize 1A08                                             _T2CONbits 001C  
                                        __size_of_abs 0019                               __size_ofi1_EUSART_Write 0008  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 0150  
                                     ?_Sensor_Service 0070                     __size_of_TMR1_SetInterruptHandler 0009  
                            ??_PIN_MANAGER_Initialize 00A1                             ?_TMR1_SetInterruptHandler 00A1  
                                PROCESS_RELAY@relay_1 00A3                                  PROCESS_RELAY@relay_2 00A1  
                                PROCESS_RELAY@relay_3 00A2                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                                        LED_PROCESS@red 00A2  
                       __end_of_Button_Reading_Update 1AD7                     MTOUCH_Sensor_InitializeAll@sensor 00AA  
                            _Sensor_Acq_ExecutePacket 02C8                                      _callback_sampled 016A  
                           ??_TMR2_LoadPeriodRegister 00A1                       Sensor_RawSample_Update@adcIndex 00A6  
                          __size_of_SYSTEM_Initialize 0018                                               clrloop0 1A0F  
                                    _callback_pressed 0168                        MTOUCH_Sensor_Initialize@sensor 00A8  
                                end_of_initialization 0059                                           ?_check_data 0070  
                             ?_Button_DefaultCallback 014C                 __end_of_EUSART_SetOverrunErrorHandler 1A82  
              __size_of_EUSART_SetOverrunErrorHandler 0009                         _EUSART_SetOverrunErrorHandler 1A79  
                                             memcpy@d 00AA                                               memcpy@n 00A3  
                                             memcpy@s 00A7                                               fputc@fp 00A5  
                                             init_ram 1A14                                               fputs@fp 00AB  
                                             initloop 1A15                               ?_Sensor_DefaultCallback 00A1  
                       Sensor_Acquisition@sensor_adc1 00DD                         Sensor_Acquisition@sensor_adc2 00DA  
                    __size_of_Button_Deviation_Update 0087                                     _EUSART_Initialize 10F8  
                        ??_MTOUCH_Sensor_isCalibrated 00A5                                    ?_EUSART_Initialize 0070  
                                        ??i1_vfprintf 0065                                     __end_of_vfpfcnvrt 1000  
                 __end_of_MTOUCH_Sensor_RawSample_Get 1D2A                           _MTOUCH_Sensor_RawSample_Get 1D10  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 19E0  
                                          ??_vfprintf 0140                                               strlen@a 00A4  
                                             strlen@s 00A5                                   ??_EUSART_Initialize 00A3  
                                    ??_WDT_Initialize 00A1                              _TMR0_SetInterruptHandler 1A8B  
                                 ?_EUSART_is_rx_ready 0070                                Sensor_setActive@sensor 00A1  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 00D3  
                       Button_Deviation_Update@button 00AB                  Sensor_Acq_ExecutePacket@AD1CON2_temp 00C1  
                               __size_of_EUSART_Write 000A              MTOUCH_Button_SetPressedCallback@callback 00A1  
                                           i1___aodiv 0BF6                            MTOUCH_Sensor_Enable@sensor 00A6  
                                           i1___aomod 095B                  Sensor_Acq_ExecutePacket@AD2CON2_temp 00C2  
                                 _callback_notPressed 0166                   __size_of_MTOUCH_Sensor_isCalibrated 0017  
                      __end_of_Button_DefaultCallback 0801                       __size_of_EUSART_SetErrorHandler 0009  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 00D1                                __size_of_PROCESS_RELAY 001D  
                                  __end_ofi1_vfprintf 1F71                                    _sensor_globalFlags 006F  
                            __end_of_Sensor_isEnabled 1B89                            Sensor_setCalibrated@sensor 00A1  
                      __end_of_Sensor_DefaultCallback 0802                      __end_of_myButtonReleasedCallback 1EE8  
                           __end_of_EUSART_Initialize 112D                                  ??_EUSART_is_rx_ready 00A1  
                                       _check_message 1E69                                        __end_of_LED_EN 19E6  
                          _Sensor_loadADCSettings$544 00A6                              ??_Sensor_autoCalibration 00B8  
                                           _TXSTAbits 019E                                         _check_request 0139  
                                          main@rxData 01DA                             ??_myButtonPressedCallback 00EF  
                    __size_of_Sensor_RawSample_Update 002C                                    _Sensor_Acquisition 13A6  
                                      __end_ofi1_ctoa 1FD0                                        __end_ofi1_dtoa 074E  
                                   i1___aomod@divisor 0020                              ??_Sensor_loadADCSettings 00A3  
                                   i1___aomod@counter 0071                                         ?_update_state 0070  
                                       ??_LED_PROCESS 00A3                                          i1vfpfcnvrt@c 005F  
                                _Button_State_Pressed 1464                                        __end_of___bmul 1B77  
                  __end_of_EUSART_DefaultErrorHandler 19E0                            _EUSART_DefaultErrorHandler 19DD  
                                 ?_Sensor_Acquisition 00DA                                           vfpfcnvrt@ap 00DB  
                                         vfpfcnvrt@fp 00EA                                           vfpfcnvrt@ll 00E1  
                          ??_MTOUCH_Button_Initialize 00A7                                             i1fputc@fp 0074  
         MTOUCH_Button_SetNotPressedCallback@callback 00A1                       ??_MTOUCH_Sensor_Scan_Initialize 00A1  
                      ?_Sensor_postAcquisitionProcess 0070                                             i1fputs@fp 007A  
                                        _EUSART_Write 1A9D                                     __size_of_TMR0_ISR 0017  
                                   __size_of_TMR1_ISR 0030                                   __size_of_check_data 0033  
                                  _Button_Tick_helper 1E41                                        __end_of_memcpy 102C  
                              ?_OSCILLATOR_Initialize 0070                                   MTOUCH_Button_Tick@i 00A5  
                            __end_of_Sensor_setActive 1A4C                      TMR2_LoadPeriodRegister@periodVal 00A1  
                                      __end_of_printf 1BC4                           ??_Button_State_Initializing 0150  
                                      __end_of_strlen 1CF7                                   start_initialization 0028  
                             _MTOUCH_Service_Mainloop 1D61                              __size_of_TMR0_Initialize 0018  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 1C4C  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 1D10  
                                          ?i1___aodiv 0020                                            ?i1___aomod 0020  
                                        i1vfprintf@ap 0063                                           __end_of_pad 1300  
                                        i1vfprintf@fp 0066                                        _TMR2_StopTimer 19E9  
                                       ??_EUSART_Read 00A1          EUSART_SetRxInterruptHandler@interruptHandler 00A1  
                                   __size_ofi1_printf 0011                                           putch@txData 00A2  
                                ??_Sensor_Acquisition 00DB                                             i1strlen@a 0073  
                                           i1strlen@s 0074                                     __size_ofi1_strlen 0018  
                                            ??_LED_EN 00A1                                        ?_check_message 0070  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 014F  
                                            ??i1_ctoa 002F                                              ??i1_dtoa 0038  
                      Sensor_autoCalibration@adcIndex 00BC                        ?_EUSART_SetOverrunErrorHandler 00A1  
                    __end_of_MTOUCH_Sensor_wasSampled 1B14                                  ??_Button_Tick_helper 00A1  
                            __size_of_TMR1_Initialize 001B                          __end_of_MTOUCH_Sensor_Enable 1BAF  
                                         vfprintf@fmt 00EB                                          _packet_noise 0134  
                                      ??_update_state 00A1                            _EUSART_FramingErrorHandler 01D5  
                                            ??___bmul 00A2                                 ?_Button_State_Pressed 014F  
                              _EUSART_SetErrorHandler 1A67                                  __size_ofi1_vfpfcnvrt 0110  
                              __size_of_TMR0_CallBack 0019                                         _PROCESS_RELAY 1D7D  
                          ??_MTOUCH_Button_ServiceAll 0158                                           __pdataBANK2 0166  
                                         __pdataBANK3 01A0                                        check_message@x 014E  
                                            ??_memcpy 00A5                           __end_of_Sensor_isCalibrated 1ABC  
                        ??_Button_Baseline_Initialize 00A9                                         _sample_period 016C  
                                ??_MTOUCH_Button_Tick 00A4                                    _mtouch_button_init 1800  
                              __size_of_TMR1_CallBack 000D                            Sensor_Sampled_Reset@sensor 00A1  
                                            ??_printf 00EE                                       main@blink_count 01D8  
                                            ??_strlen 00A3                          ?_Sensor_isCalibratingAcqTime 0070  
                                      i1_EUSART_Write 1A21                       __end_of_myButtonPressedCallback 15B9  
                                 __end_of_LED_PROCESS 1260                                 TMR1_ISR@CountCallBack 0130  
                              __end_of_TMR2_StopTimer 19EC                                             ___latbits 0002  
                                       __pcstackBANK0 0020                                         __pcstackBANK1 00A0  
                                       __pcstackBANK2 0140                                         __pcstackBANK3 01D7  
                                    ___aodiv@dividend 00A9                              __size_of_TMR2_Initialize 0008  
                                     _Sensor_isActive 1AF5                        MTOUCH_Button_ServiceAll@button 0159  
                                            ?i1_fputc 0072                                   Sensor_Service@error 00E2  
                                            ?i1_fputs 007A                            __end_of_EUSART_Receive_ISR 11D5  
                       __size_of_Sensor_Sampled_Reset 0009                                              ?i1_putch 0070  
                          __size_of_EUSART_Initialize 0035                               _Button_Deviation_Update 15B9  
                          ?_Sensor_setCalibratAcqTime 0070                      _EUSART_RxDefaultInterruptHandler 0163  
                                 __end_of_EUSART_Read 1EBD                             _Button_State_Initializing 1402  
                  __end_of_MTOUCH_Sensor_isCalibrated 1C34                            _MTOUCH_Sensor_isCalibrated 1C1D  
                               _TMR0_InterruptHandler 0161                                             __pnvBANK2 015D  
                                           __pnvBANK3 01D1                       __size_of_Sensor_autoCalibration 0099  
                   __size_of_Sensor_getScanGroupIndex 002E                                     _Sensor_setSampled 1A55  
                           ?_Sensor_getScanGroupIndex 0070                          __end_of_EUSART_RxDataHandler 1CC5  
                              _PIN_MANAGER_Initialize 1DB7                                      ??_Button_Service 0154  
                                           _dtoa$2177 00C7                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 00A2                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 00AB                      __end_of_TMR1_SetInterruptHandler 1A9D  
                          ??_MTOUCH_Sensor_Initialize 00A7                                        ?_PROCESS_RELAY 00A1  
                                            ?___aodiv 00A1                         __size_of_Sensor_setCalibrated 000F  
                                            ?___aomod 00A1                                             __ptext100 1ABC  
                                           __ptext101 19DC                                             __ptext110 0BF6  
                                           __ptext102 1C06                                      ___aodiv@quotient 00B4  
                                           __ptext111 1FA0                                             __ptext103 1CC5  
                                           __ptext120 19EF                                             __ptext112 1260  
                                           __ptext104 1B54                                             __ptext121 19DA  
                                           __ptext113 1C34                                             __ptext105 1F42  
                                           __ptext122 19DD                                             __ptext114 1DF5  
                                           __ptext106 0DE0                                             __ptext123 1CAC  
                                           __ptext115 10C3                                             __ptext107 05FD  
                                           __ptext116 19F7                                             __ptext108 1BEF  
                                           __ptext117 1A21                                             __ptext109 095B  
                                           __ptext118 19DB                                             __ptext119 119B  
                     __size_of_Sensor_loadADCSettings 00B6                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 006E  
                                            _AAD2RES0 079A                                          _eusartRxTail 013D  
                                    ??_Sensor_Service 00DE                                __end_ofi1_EUSART_Write 1A29  
                          ??_Sensor_Acq_ExecutePacket 00BF                          ??_INTERRUPT_InterruptManager 007E  
                                           _bt_status 012E                                   ??_Sensor_setSampled 00A1  
                   __size_of_myButtonReleasedCallback 002B                             ?_myButtonReleasedCallback 014C  
                           ??_MTOUCH_Service_Mainloop 015A                                     __size_of_vfprintf 0034  
                                            _ADCOMCON 0712                           __size_of_Sensor_setInactive 0009  
                      Sensor_Acq_ExecutePacket@last_a 00C7                        Sensor_Acq_ExecutePacket@last_b 00C9  
                                     ?_TMR2_StopTimer 0070                                        __size_ofi1_abs 0017  
                       ??_Sensor_isCalibratingAcqTime 00A1                                        __size_ofi1_pad 0050  
                                       ??_MTOUCH_Tick 00A6                                           ??i1___aodiv 0070  
                                         ??i1___aomod 0070                                             _busy_flag 0137  
                                     ??_check_message 014C                                         _TMR0_CallBack 1CC5  
                                      __size_of_fputc 0037                                        __size_of_fputs 0026  
                                i1EUSART_Write@txData 0070                                        __size_of_putch 0006  
                                        ??_check_data 00A1                                        _eusartRxBuffer 01C9  
                                       _TMR1_CallBack 1ABC                                     ??_TMR0_Initialize 00A3  
                           __end_of_Sensor_setSampled 1A5E                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 00A1                                              _LATBbits 010D  
                                            _LATCbits 010E                                         ?_DATA_PROCESS 0070  
                             _Sensor_RawSample_Update 1EE8                     __end_of_Sensor_setCalibratAcqTime 1B44  
                                           clear_ram0 1A0E                                              _PIE1bits 0091  
                                   _eusartRxLastError 013B                              __size_of_TMR2_StartTimer 0003  
                            __size_of_TMR1_WriteTimer 000F                   __size_of_INTERRUPT_InterruptManager 0022  
                          ??_TMR0_SetInterruptHandler 00A3                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 00A3                Sensor_Acq_ExecutePacket@packet_counter 00CB  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0150  
                                            u446_2lld 0C1E                                              u457_2lld 0983  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 1BD9               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0015  
                      _MTOUCH_Sensor_Sampled_ResetAll 1BC4                              ?_MTOUCH_Sensor_SampleAll 0070  
                                            _TMR0_ISR 1C06             __end_of_EUSART_DefaultOverrunErrorHandler 19F3  
          __size_of_EUSART_DefaultOverrunErrorHandler 0004                   ??_EUSART_DefaultOverrunErrorHandler 0070  
                  ?_EUSART_DefaultOverrunErrorHandler 0070                     _EUSART_DefaultOverrunErrorHandler 19EF  
                                            _TMR1_ISR 1FD0                    Sensor_Acq_ExecutePacket@ADxIF_flag 00C5  
                                         _LED_PROCESS 1213                              _MTOUCH_Sensor_wasSampled 1B04  
                                  _mtouch_time_toScan 013F                                             _vfpfcnvrt 0EF0  
                            ??_Button_Baseline_Update 00A1                                       ?i1_EUSART_Write 0070  
                                   ??_TMR1_Initialize 00A3                                    __end_of_check_data 108F  
                             __end_of_Sensor_isActive 1B04                                _Sensor_autoCalibration 1767  
                          __end_of_MTOUCH_needReburst 0004                                             main@blink 01D7  
                                            i1_printf 1B54                                              i1pad@buf 0024  
                                            i1ctoa@fp 0030                        myButtonReleasedCallback@button 014C  
                                            i1dtoa@fp 003B                                              i1_strlen 1C34  
                                      ?_TMR0_CallBack 0070                                _Sensor_loadADCSettings 08A5  
                                _MTOUCH_Sensor_Enable 1B9C                                           _EUSART_Read 1E92  
                                __end_of_update_state 1535                                            vfpfcnvrt@c 00E9  
                                            i1fputc@c 0072                                              i1fputs@c 0021  
                                            i1fputs@i 0022                                              i1fputs@s 0020  
                            Button_Tick_helper@button 00A3                             ??_Button_Deviation_Update 00A1  
                               _Button_Reading_Update 1AC9                                        ?_TMR1_CallBack 0070  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                      ??_DATA_PROCESS 014C                                     ??_TMR2_Initialize 00A1  
                                    __size_ofi1_fputc 0035                                      __size_ofi1_fputs 0026  
                                 __end_of_MTOUCH_Tick 19EF                                     _MTOUCH_Initialize 07F4  
                     __end_of_MTOUCH_Sensor_Calibrate 1B9C                                      __size_ofi1_putch 0005  
                                  ??_Sensor_isEnabled 00A1                                    ?_MTOUCH_Initialize 0070  
              Sensor_postAcquisitionProcess@deviation 00BA                                       ??_PROCESS_RELAY 00A3  
                                           memcpy@tmp 00A6                                            vfprintf@ap 00ED  
                                          vfprintf@fp 0142                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 00A1                    __end_of_Button_Baseline_Initialize 1FA0  
                          _Button_Baseline_Initialize 1F71                                   _EUSART_ErrorHandler 01D1  
                                    __size_of___aodiv 00F7                                      __size_of___aomod 00DF  
                                 ??_MTOUCH_Initialize 00AD                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 00DA                              ?_Button_State_NotPressed 014F  
                                  i1___aodiv@dividend 0028                                       ___aodiv@divisor 00A1  
                                         check_data@x 00A3                              _TMR1_SetInterruptHandler 1A94  
                                     ___aodiv@counter 00B2                                    Button_Service@name 0156  
                               _TMR1_InterruptHandler 015D                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 00A1  
                                   update_state@state 00A2                  Sensor_Scanfrequency_Evaluation@retry 00D4  
                                  ??_Sensor_setActive 00A1                                  _EUSART_RxDataHandler 1CAC  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 1DB7  
                                            __ptext11 1A08                                              __ptext20 1A79  
                                            __ptext12 07F4                                              __ptext21 1A70  
                                            __ptext13 1B44                                            _T1GCONbits 0019  
                                            __ptext30 1BD9                                              __ptext22 1A67  
                                            __ptext14 1C64                                              __ptext31 16D0  
                                            __ptext23 1D61                                              __ptext15 1B9C  
                                            __ptext40 02C8                                              __ptext32 1A55  
                                            __ptext24 0002                                              __ptext16 1D9A  
                                            __ptext41 19E9                                              __ptext33 1EE8  
                                            __ptext25 19EC                                              __ptext17 1000  
                                            __ptext50 1B34                                              __ptext42 19E6  
                                            __ptext34 0801                                              __ptext26 1C4C  
                                            __ptext18 10F8                                              __ptext51 1AA7  
                                            __ptext43 1A02                                              __ptext35 13A6  
                                            __ptext27 1E41                                              __ptext19 1A82  
                                            __ptext60 1464                                              __ptext52 1F14  
                                            __ptext44 08A5                                              __ptext36 11D5  
                                            __ptext28 1BC4                                              __ptext61 1535  
                                            __ptext53 1B24                                              __ptext45 1AB1  
                                            __ptext37 1A4C                                              __ptext29 1A5E  
                                            __ptext70 1300                                              __ptext62 0800  
                                            __ptext54 1B14                                              __ptext46 1B77  
                                            __ptext38 1A43                                              __ptext71 1D10  
                                            __ptext63 1EBD                                              __ptext55 1350  
                                            __ptext47 1AF5                                              __ptext39 074E  
                                            __ptext80 14CA                                              __ptext72 1B65  
                                            __ptext64 1D45                                              __ptext56 1B04  
                                            __ptext48 1767                                              __ptext81 1BAF  
                                            __ptext73 15B9                                              __ptext65 1164  
                                            __ptext57 1C1D                                              __ptext49 1AE6  
                                            __ptext90 1CDE                                              __ptext82 108F  
                                            __ptext74 1A3A                                              __ptext66 1B89  
                                            __ptext58 0802                                              __ptext91 1E1B  
                                            __ptext83 0EF0                                              __ptext75 1A31  
                                            __ptext67 1640                                              __ptext59 1402  
                                            __ptext92 112D                                              __ptext84 04AC  
                                            __ptext76 19E3                                              __ptext68 1F71  
                                            __ptext93 19FC                                              __ptext85 1CF7  
                                            __ptext77 19E0                                              __ptext69 1AC9  
                                            __ptext94 1A9D                                              __ptext86 0A37  
                                            __ptext78 1E92                                              __ptext95 1D7D  
                                            __ptext87 0CE9                                              __ptext79 0B16  
                                            __ptext96 1213                                              __ptext88 102C  
                                            __ptext89 12B0                                              __ptext98 1FD0  
                                            __ptext99 1AD7                             __end_of_MTOUCH_Initialize 0800  
                           ??_Sensor_RawSample_Update 00A5                            __size_of_Sensor_setSampled 0009  
                         __size_of_EUSART_is_rx_ready 0003                                         __size_of_ctoa 0030  
                                       __size_of_main 026B                                         __size_of_dtoa 0151  
                                  i1___aodiv@quotient 0073                       __end_of_MTOUCH_Sensor_SampleAll 1BEF  
                __end_of_TMR0_DefaultInterruptHandler 19DC                 __size_of_TMR0_DefaultInterruptHandler 0001  
                        _TMR0_DefaultInterruptHandler 19DB                      Sensor_Scanfrequency_Evaluation@i 00D9  
                             ?_EUSART_SetErrorHandler 00A1                                       LED_PROCESS@blue 00A1  
       EUSART_SetOverrunErrorHandler@interruptHandler 00A1                                              int$flags 007E  
                                            _vfprintf 108F                    __size_of_Button_State_Initializing 0062  
                                   ??_TMR2_StartTimer 00A1                    __end_of_INTERRUPT_InterruptManager 0026  
                          _INTERRUPT_InterruptManager 0004                                             printf@fmt 0145  
               __end_of_EUSART_SetFramingErrorHandler 1A79                __size_of_EUSART_SetFramingErrorHandler 0009  
                       _EUSART_SetFramingErrorHandler 1A70                                     ??_TMR1_WriteTimer 0072  
                     __size_of_Button_Baseline_Update 0090                          ?_MTOUCH_Button_InitializeAll 0070  
                                 LED_PROCESS@led_name 00A5                          MTOUCH_Sensor_SampleAll@group 00E6  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ___aomod@dividend 00A9  
                                    ?_Sensor_isActive 0070                                         _mtouch_button 0220  
                                          _INTCONbits 000B                                       ??_TMR0_CallBack 00A0  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 01A6  
                                            memcpy@d1 00A9                                              memcpy@s1 00A1  
                     __end_of_MTOUCH_Button_isPressed 1D61                      __end_of_Sensor_getScanGroupIndex 1F42  
                                   __CFG_BOREN$NSLEEP 0000                                           _MTOUCH_Tick 19EC  
                              ?_Button_Reading_Update 0070                                       ??_TMR1_CallBack 0070  
                    Button_Deviation_Update@deviation 00AC                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 00A9                     __size_of_MTOUCH_Button_Initialize 0037  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 014C  
             __end_of_Sensor_Scanfrequency_Evaluation 07F4              __size_of_Sensor_Scanfrequency_Evaluation 00A6  
                   ??_Sensor_Scanfrequency_Evaluation 00CE                      ?_Sensor_Scanfrequency_Evaluation 00CD  
                     _Sensor_Scanfrequency_Evaluation 074E                               ?_PIN_MANAGER_Initialize 0070  
                         ??_Sensor_setCalibratAcqTime 00A1                        __end_of_EUSART_SetErrorHandler 1A70  
                                   __CFG_CLKOUTEN$OFF 0000                           ?_MTOUCH_Sensor_isCalibrated 0070  
                                       ??i1_vfpfcnvrt 0052                  __end_of_EUSART_SetRxInterruptHandler 1A8B  
               __size_of_EUSART_SetRxInterruptHandler 0009                          _EUSART_SetRxInterruptHandler 1A82  
                       ?_TMR0_DefaultInterruptHandler 0070                                         _config_status 013A  
                         __size_of_Button_Tick_helper 0028                       __end_of_Button_State_NotPressed 08A5  
                                            printf@ap 014B                                    _EUSART_Receive_ISR 119B  
       EUSART_SetFramingErrorHandler@interruptHandler 00A1                                       ___aomod@divisor 00A1  
                        __end_of_Sensor_Sampled_Reset 1A67                                           ??_vfpfcnvrt 00DC  
                                    ??_TMR2_StopTimer 00A1                                       ___aomod@counter 00B2  
                     __end_of_TMR2_LoadPeriodRegister 1A08                           __size_of_MTOUCH_Button_Tick 0018  
                                       __pstringtext1 184D                                         __pstringtext2 1852  
                                       __pstringtext3 1800                                         __pstringtext4 1830  
                                       __pstringtext5 183E                                         __pstringtext6 1847  
                                       __pstringtext7 1856                                         __pstringtext8 0000  
                                __end_of_DATA_PROCESS 0BF6                                            _OPTION_REG 0095  
                                 ?_EUSART_Receive_ISR 0070                                 __size_of_update_state 006B  
                       ??_MTOUCH_Button_InitializeAll 00AB                              ??_Button_DefaultCallback 00EF  
                       ??_MTOUCH_Sensor_InitializeAll 00A9                  Sensor_Acq_ExecutePacket@activeSensor 00C6  
                                     _TMR0_Initialize 1C7C                      __size_of_MTOUCH_Sensor_Calibrate 0013  
                              ??_MTOUCH_Sensor_Enable 00A5                     Sensor_isCalibratingAcqTime@sensor 00A1  
                        __size_of_Sensor_isCalibrated 000B                              ??_Sensor_DefaultCallback 00A2  
                        __end_of_Sensor_setCalibrated 1AF5                  __end_of_Button_Reading_Update_Helper 1350  
               __size_of_Button_Reading_Update_Helper 0050                          _Button_Reading_Update_Helper 1300  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 014F                                    EUSART_Write@txData 00A1  
                                        ___aodiv@sign 00B3                            __size_of_MTOUCH_Initialize 000C  
                      __end_of_PIN_MANAGER_Initialize 1DD4                                _Button_Baseline_Update 1640  
                         MTOUCH_Button_isPressed@name 00A2                                  ??_EUSART_Receive_ISR 0071  
                          ??_MTOUCH_Sensor_wasSampled 00A5                                          ___aomod@sign 00B3  
                                     _TMR1_Initialize 1D2A  
