

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Jul 06 14:44:44 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	cinit,global,class=CODE,merge=1,delta=2
    31                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    32                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    33                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    34                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    37                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    38                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    39                           	psect	inittext,global,class=CODE,delta=2
    40                           	psect	clrtext,global,class=CODE,delta=2
    41                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    42                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    43                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    44                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    45                           	psect	text1,local,class=CODE,merge=1,delta=2
    46                           	psect	text2,local,class=CODE,merge=1,delta=2
    47                           	psect	text3,local,class=CODE,merge=1,delta=2
    48                           	psect	text4,local,class=CODE,merge=1,delta=2
    49                           	psect	text5,local,class=CODE,merge=1,delta=2
    50                           	psect	text6,local,class=CODE,merge=1,delta=2
    51                           	psect	text7,local,class=CODE,merge=1,delta=2
    52                           	psect	text8,local,class=CODE,merge=1,delta=2
    53                           	psect	text9,local,class=CODE,merge=1,delta=2
    54                           	psect	text10,local,class=CODE,merge=1,delta=2
    55                           	psect	text11,local,class=CODE,merge=1,delta=2
    56                           	psect	text12,local,class=CODE,merge=1,delta=2
    57                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text14,local,class=CODE,merge=1,delta=2
    59                           	psect	text15,local,class=CODE,merge=1,delta=2
    60                           	psect	text16,local,class=CODE,merge=1,delta=2
    61                           	psect	text17,local,class=CODE,merge=1,delta=2
    62                           	psect	text18,local,class=CODE,merge=1,delta=2
    63                           	psect	text19,local,class=CODE,merge=1,delta=2
    64                           	psect	text20,local,class=CODE,merge=1,delta=2
    65                           	psect	text21,local,class=CODE,merge=1,delta=2
    66                           	psect	text22,local,class=CODE,merge=1,delta=2
    67                           	psect	text23,local,class=CODE,merge=1,delta=2
    68                           	psect	text24,local,class=CODE,merge=1,delta=2
    69                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text26,local,class=CODE,merge=1,delta=2
    71                           	psect	text27,local,class=CODE,merge=1,delta=2
    72                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text29,local,class=CODE,merge=1,delta=2
    74                           	psect	text30,local,class=CODE,merge=1,delta=2
    75                           	psect	text31,local,class=CODE,merge=1,delta=2
    76                           	psect	text32,local,class=CODE,merge=1,delta=2
    77                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text35,local,class=CODE,merge=1,delta=2
    80                           	psect	text36,local,class=CODE,merge=1,delta=2
    81                           	psect	text37,local,class=CODE,merge=1,delta=2
    82                           	psect	text38,local,class=CODE,merge=1,delta=2
    83                           	psect	text39,local,class=CODE,merge=1,delta=2
    84                           	psect	text40,local,class=CODE,merge=1,delta=2
    85                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text42,local,class=CODE,merge=1,delta=2
    87                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text44,local,class=CODE,merge=1,delta=2
    89                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text49,local,class=CODE,merge=1,delta=2
    94                           	psect	text50,local,class=CODE,merge=1,delta=2
    95                           	psect	text51,local,class=CODE,merge=1,delta=2
    96                           	psect	text52,local,class=CODE,merge=1,delta=2
    97                           	psect	text53,local,class=CODE,merge=1,delta=2
    98                           	psect	text54,local,class=CODE,merge=1,delta=2
    99                           	psect	text55,local,class=CODE,merge=1,delta=2
   100                           	psect	text56,local,class=CODE,merge=1,delta=2
   101                           	psect	text57,local,class=CODE,merge=1,delta=2
   102                           	psect	text58,local,class=CODE,merge=1,delta=2
   103                           	psect	text59,local,class=CODE,merge=1,delta=2
   104                           	psect	text60,local,class=CODE,merge=1,delta=2
   105                           	psect	text61,local,class=CODE,merge=1,delta=2
   106                           	psect	text62,local,class=CODE,merge=1,delta=2
   107                           	psect	text63,local,class=CODE,merge=1,delta=2
   108                           	psect	text64,local,class=CODE,merge=1,delta=2
   109                           	psect	text65,local,class=CODE,merge=1,delta=2
   110                           	psect	text66,local,class=CODE,merge=1,delta=2
   111                           	psect	text67,local,class=CODE,merge=1,delta=2
   112                           	psect	text68,local,class=CODE,merge=1,delta=2
   113                           	psect	text69,local,class=CODE,merge=1,delta=2,group=1
   114                           	psect	text70,local,class=CODE,merge=1,delta=2
   115                           	psect	text71,local,class=CODE,merge=1,delta=2
   116                           	psect	text72,local,class=CODE,merge=1,delta=2
   117                           	psect	text73,local,class=CODE,merge=1,delta=2
   118                           	psect	text74,local,class=CODE,merge=1,delta=2
   119                           	psect	text75,local,class=CODE,merge=1,delta=2
   120                           	psect	text76,local,class=CODE,merge=1,delta=2
   121                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
   122                           	psect	text78,local,class=CODE,merge=1,delta=2
   123                           	psect	text79,local,class=CODE,merge=1,delta=2
   124                           	psect	text80,local,class=CODE,merge=1,delta=2
   125                           	psect	text81,local,class=CODE,merge=1,delta=2
   126                           	psect	text82,local,class=CODE,merge=1,delta=2,group=2
   127                           	psect	text83,local,class=CODE,merge=1,delta=2,group=2
   128                           	psect	text84,local,class=CODE,merge=1,delta=2,group=2
   129                           	psect	text85,local,class=CODE,merge=1,delta=2
   130                           	psect	text86,local,class=CODE,merge=1,delta=2
   131                           	psect	text87,local,class=CODE,merge=1,delta=2
   132                           	psect	text88,local,class=CODE,merge=1,delta=2
   133                           	psect	intentry,global,class=CODE,delta=2
   134                           	psect	text90,local,class=CODE,merge=1,delta=2
   135                           	psect	text91,local,class=CODE,merge=1,delta=2
   136                           	psect	text92,local,class=CODE,merge=1,delta=2
   137                           	psect	text93,local,class=CODE,merge=1,delta=2
   138                           	psect	text94,local,class=CODE,merge=1,delta=2
   139                           	dabs	1,0x7E,2
   140  0000                     
   141                           ; Version 2.05
   142                           ; Generated 20/12/2018 GMT
   143                           ; 
   144                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   145                           ; All rights reserved.
   146                           ; 
   147                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   148                           ; 
   149                           ; Redistribution and use in source and binary forms, with or without modification, are
   150                           ; permitted provided that the following conditions are met:
   151                           ; 
   152                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   153                           ;        conditions and the following disclaimer.
   154                           ; 
   155                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   156                           ;        of conditions and the following disclaimer in the documentation and/or other
   157                           ;        materials provided with the distribution.
   158                           ; 
   159                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   160                           ;        software without specific prior written permission.
   161                           ; 
   162                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   163                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   164                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   165                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   166                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   167                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   168                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   169                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   170                           ; 
   171                           ; 
   172                           ; Code-generator required, PIC16LF1559 Definitions
   173                           ; 
   174                           ; SFR Addresses
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0016                     	;# 
   195  0017                     	;# 
   196  0018                     	;# 
   197  0019                     	;# 
   198  001A                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  011D                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  018E                     	;# 
   226  0191                     	;# 
   227  0191                     	;# 
   228  0192                     	;# 
   229  0193                     	;# 
   230  0193                     	;# 
   231  0194                     	;# 
   232  0195                     	;# 
   233  0196                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019C                     	;# 
   239  019D                     	;# 
   240  019E                     	;# 
   241  019F                     	;# 
   242  020C                     	;# 
   243  020D                     	;# 
   244  0211                     	;# 
   245  0211                     	;# 
   246  0212                     	;# 
   247  0212                     	;# 
   248  0213                     	;# 
   249  0213                     	;# 
   250  0214                     	;# 
   251  0214                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0216                     	;# 
   256  0216                     	;# 
   257  0217                     	;# 
   258  0217                     	;# 
   259  0391                     	;# 
   260  0392                     	;# 
   261  0393                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0611                     	;# 
   266  0612                     	;# 
   267  0613                     	;# 
   268  0613                     	;# 
   269  0614                     	;# 
   270  0615                     	;# 
   271  0616                     	;# 
   272  0616                     	;# 
   273  0711                     	;# 
   274  0711                     	;# 
   275  0711                     	;# 
   276  0712                     	;# 
   277  0712                     	;# 
   278  0713                     	;# 
   279  0713                     	;# 
   280  0713                     	;# 
   281  0714                     	;# 
   282  0714                     	;# 
   283  0714                     	;# 
   284  0715                     	;# 
   285  0715                     	;# 
   286  0716                     	;# 
   287  0716                     	;# 
   288  0716                     	;# 
   289  0716                     	;# 
   290  0717                     	;# 
   291  0717                     	;# 
   292  0717                     	;# 
   293  0717                     	;# 
   294  0718                     	;# 
   295  0718                     	;# 
   296  0718                     	;# 
   297  0719                     	;# 
   298  0719                     	;# 
   299  0719                     	;# 
   300  0719                     	;# 
   301  071A                     	;# 
   302  071A                     	;# 
   303  071A                     	;# 
   304  071A                     	;# 
   305  071A                     	;# 
   306  071B                     	;# 
   307  071B                     	;# 
   308  071C                     	;# 
   309  071C                     	;# 
   310  071C                     	;# 
   311  071C                     	;# 
   312  071C                     	;# 
   313  071D                     	;# 
   314  071D                     	;# 
   315  071E                     	;# 
   316  071E                     	;# 
   317  0791                     	;# 
   318  0791                     	;# 
   319  0793                     	;# 
   320  0793                     	;# 
   321  0794                     	;# 
   322  0794                     	;# 
   323  0796                     	;# 
   324  0796                     	;# 
   325  0796                     	;# 
   326  0797                     	;# 
   327  0797                     	;# 
   328  0797                     	;# 
   329  0798                     	;# 
   330  0798                     	;# 
   331  0799                     	;# 
   332  0799                     	;# 
   333  0799                     	;# 
   334  079A                     	;# 
   335  079A                     	;# 
   336  079A                     	;# 
   337  079B                     	;# 
   338  079C                     	;# 
   339  079C                     	;# 
   340  079C                     	;# 
   341  079D                     	;# 
   342  079E                     	;# 
   343  079E                     	;# 
   344  0F8C                     	;# 
   345  0F8D                     	;# 
   346  0F91                     	;# 
   347  0F96                     	;# 
   348  0F97                     	;# 
   349  0F9C                     	;# 
   350  0F9D                     	;# 
   351  0F9E                     	;# 
   352  0FE3                     	;# 
   353  0FE4                     	;# 
   354  0FE5                     	;# 
   355  0FE6                     	;# 
   356  0FE7                     	;# 
   357  0FE8                     	;# 
   358  0FE9                     	;# 
   359  0FEA                     	;# 
   360  0FEB                     	;# 
   361  0FED                     	;# 
   362  0FEE                     	;# 
   363  0FEF                     	;# 
   364  0000                     	;# 
   365  0001                     	;# 
   366  0002                     	;# 
   367  0003                     	;# 
   368  0004                     	;# 
   369  0005                     	;# 
   370  0006                     	;# 
   371  0007                     	;# 
   372  0008                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  0011                     	;# 
   380  0012                     	;# 
   381  0015                     	;# 
   382  0016                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001C                     	;# 
   390  008C                     	;# 
   391  008D                     	;# 
   392  008E                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0095                     	;# 
   396  0096                     	;# 
   397  0097                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  009F                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  0116                     	;# 
   410  0117                     	;# 
   411  011D                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  018E                     	;# 
   415  0191                     	;# 
   416  0191                     	;# 
   417  0192                     	;# 
   418  0193                     	;# 
   419  0193                     	;# 
   420  0194                     	;# 
   421  0195                     	;# 
   422  0196                     	;# 
   423  0199                     	;# 
   424  019A                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019C                     	;# 
   428  019D                     	;# 
   429  019E                     	;# 
   430  019F                     	;# 
   431  020C                     	;# 
   432  020D                     	;# 
   433  0211                     	;# 
   434  0211                     	;# 
   435  0212                     	;# 
   436  0212                     	;# 
   437  0213                     	;# 
   438  0213                     	;# 
   439  0214                     	;# 
   440  0214                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0216                     	;# 
   445  0216                     	;# 
   446  0217                     	;# 
   447  0217                     	;# 
   448  0391                     	;# 
   449  0392                     	;# 
   450  0393                     	;# 
   451  0394                     	;# 
   452  0395                     	;# 
   453  0396                     	;# 
   454  0611                     	;# 
   455  0612                     	;# 
   456  0613                     	;# 
   457  0613                     	;# 
   458  0614                     	;# 
   459  0615                     	;# 
   460  0616                     	;# 
   461  0616                     	;# 
   462  0711                     	;# 
   463  0711                     	;# 
   464  0711                     	;# 
   465  0712                     	;# 
   466  0712                     	;# 
   467  0713                     	;# 
   468  0713                     	;# 
   469  0713                     	;# 
   470  0714                     	;# 
   471  0714                     	;# 
   472  0714                     	;# 
   473  0715                     	;# 
   474  0715                     	;# 
   475  0716                     	;# 
   476  0716                     	;# 
   477  0716                     	;# 
   478  0716                     	;# 
   479  0717                     	;# 
   480  0717                     	;# 
   481  0717                     	;# 
   482  0717                     	;# 
   483  0718                     	;# 
   484  0718                     	;# 
   485  0718                     	;# 
   486  0719                     	;# 
   487  0719                     	;# 
   488  0719                     	;# 
   489  0719                     	;# 
   490  071A                     	;# 
   491  071A                     	;# 
   492  071A                     	;# 
   493  071A                     	;# 
   494  071A                     	;# 
   495  071B                     	;# 
   496  071B                     	;# 
   497  071C                     	;# 
   498  071C                     	;# 
   499  071C                     	;# 
   500  071C                     	;# 
   501  071C                     	;# 
   502  071D                     	;# 
   503  071D                     	;# 
   504  071E                     	;# 
   505  071E                     	;# 
   506  0791                     	;# 
   507  0791                     	;# 
   508  0793                     	;# 
   509  0793                     	;# 
   510  0794                     	;# 
   511  0794                     	;# 
   512  0796                     	;# 
   513  0796                     	;# 
   514  0796                     	;# 
   515  0797                     	;# 
   516  0797                     	;# 
   517  0797                     	;# 
   518  0798                     	;# 
   519  0798                     	;# 
   520  0799                     	;# 
   521  0799                     	;# 
   522  0799                     	;# 
   523  079A                     	;# 
   524  079A                     	;# 
   525  079A                     	;# 
   526  079B                     	;# 
   527  079C                     	;# 
   528  079C                     	;# 
   529  079C                     	;# 
   530  079D                     	;# 
   531  079E                     	;# 
   532  079E                     	;# 
   533  0F8C                     	;# 
   534  0F8D                     	;# 
   535  0F91                     	;# 
   536  0F96                     	;# 
   537  0F97                     	;# 
   538  0F9C                     	;# 
   539  0F9D                     	;# 
   540  0F9E                     	;# 
   541  0FE3                     	;# 
   542  0FE4                     	;# 
   543  0FE5                     	;# 
   544  0FE6                     	;# 
   545  0FE7                     	;# 
   546  0FE8                     	;# 
   547  0FE9                     	;# 
   548  0FEA                     	;# 
   549  0FEB                     	;# 
   550  0FED                     	;# 
   551  0FEE                     	;# 
   552  0FEF                     	;# 
   553  0000                     	;# 
   554  0001                     	;# 
   555  0002                     	;# 
   556  0003                     	;# 
   557  0004                     	;# 
   558  0005                     	;# 
   559  0006                     	;# 
   560  0007                     	;# 
   561  0008                     	;# 
   562  0009                     	;# 
   563  000A                     	;# 
   564  000B                     	;# 
   565  000C                     	;# 
   566  000D                     	;# 
   567  000E                     	;# 
   568  0011                     	;# 
   569  0012                     	;# 
   570  0015                     	;# 
   571  0016                     	;# 
   572  0016                     	;# 
   573  0017                     	;# 
   574  0018                     	;# 
   575  0019                     	;# 
   576  001A                     	;# 
   577  001B                     	;# 
   578  001C                     	;# 
   579  008C                     	;# 
   580  008D                     	;# 
   581  008E                     	;# 
   582  0091                     	;# 
   583  0092                     	;# 
   584  0095                     	;# 
   585  0096                     	;# 
   586  0097                     	;# 
   587  0099                     	;# 
   588  009A                     	;# 
   589  009B                     	;# 
   590  009B                     	;# 
   591  009C                     	;# 
   592  009D                     	;# 
   593  009E                     	;# 
   594  009F                     	;# 
   595  010C                     	;# 
   596  010D                     	;# 
   597  010E                     	;# 
   598  0116                     	;# 
   599  0117                     	;# 
   600  011D                     	;# 
   601  018C                     	;# 
   602  018D                     	;# 
   603  018E                     	;# 
   604  0191                     	;# 
   605  0191                     	;# 
   606  0192                     	;# 
   607  0193                     	;# 
   608  0193                     	;# 
   609  0194                     	;# 
   610  0195                     	;# 
   611  0196                     	;# 
   612  0199                     	;# 
   613  019A                     	;# 
   614  019B                     	;# 
   615  019B                     	;# 
   616  019C                     	;# 
   617  019D                     	;# 
   618  019E                     	;# 
   619  019F                     	;# 
   620  020C                     	;# 
   621  020D                     	;# 
   622  0211                     	;# 
   623  0211                     	;# 
   624  0212                     	;# 
   625  0212                     	;# 
   626  0213                     	;# 
   627  0213                     	;# 
   628  0214                     	;# 
   629  0214                     	;# 
   630  0215                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0216                     	;# 
   634  0216                     	;# 
   635  0217                     	;# 
   636  0217                     	;# 
   637  0391                     	;# 
   638  0392                     	;# 
   639  0393                     	;# 
   640  0394                     	;# 
   641  0395                     	;# 
   642  0396                     	;# 
   643  0611                     	;# 
   644  0612                     	;# 
   645  0613                     	;# 
   646  0613                     	;# 
   647  0614                     	;# 
   648  0615                     	;# 
   649  0616                     	;# 
   650  0616                     	;# 
   651  0711                     	;# 
   652  0711                     	;# 
   653  0711                     	;# 
   654  0712                     	;# 
   655  0712                     	;# 
   656  0713                     	;# 
   657  0713                     	;# 
   658  0713                     	;# 
   659  0714                     	;# 
   660  0714                     	;# 
   661  0714                     	;# 
   662  0715                     	;# 
   663  0715                     	;# 
   664  0716                     	;# 
   665  0716                     	;# 
   666  0716                     	;# 
   667  0716                     	;# 
   668  0717                     	;# 
   669  0717                     	;# 
   670  0717                     	;# 
   671  0717                     	;# 
   672  0718                     	;# 
   673  0718                     	;# 
   674  0718                     	;# 
   675  0719                     	;# 
   676  0719                     	;# 
   677  0719                     	;# 
   678  0719                     	;# 
   679  071A                     	;# 
   680  071A                     	;# 
   681  071A                     	;# 
   682  071A                     	;# 
   683  071A                     	;# 
   684  071B                     	;# 
   685  071B                     	;# 
   686  071C                     	;# 
   687  071C                     	;# 
   688  071C                     	;# 
   689  071C                     	;# 
   690  071C                     	;# 
   691  071D                     	;# 
   692  071D                     	;# 
   693  071E                     	;# 
   694  071E                     	;# 
   695  0791                     	;# 
   696  0791                     	;# 
   697  0793                     	;# 
   698  0793                     	;# 
   699  0794                     	;# 
   700  0794                     	;# 
   701  0796                     	;# 
   702  0796                     	;# 
   703  0796                     	;# 
   704  0797                     	;# 
   705  0797                     	;# 
   706  0797                     	;# 
   707  0798                     	;# 
   708  0798                     	;# 
   709  0799                     	;# 
   710  0799                     	;# 
   711  0799                     	;# 
   712  079A                     	;# 
   713  079A                     	;# 
   714  079A                     	;# 
   715  079B                     	;# 
   716  079C                     	;# 
   717  079C                     	;# 
   718  079C                     	;# 
   719  079D                     	;# 
   720  079E                     	;# 
   721  079E                     	;# 
   722  0F8C                     	;# 
   723  0F8D                     	;# 
   724  0F91                     	;# 
   725  0F96                     	;# 
   726  0F97                     	;# 
   727  0F9C                     	;# 
   728  0F9D                     	;# 
   729  0F9E                     	;# 
   730  0FE3                     	;# 
   731  0FE4                     	;# 
   732  0FE5                     	;# 
   733  0FE6                     	;# 
   734  0FE7                     	;# 
   735  0FE8                     	;# 
   736  0FE9                     	;# 
   737  0FEA                     	;# 
   738  0FEB                     	;# 
   739  0FED                     	;# 
   740  0FEE                     	;# 
   741  0FEF                     	;# 
   742  0000                     	;# 
   743  0001                     	;# 
   744  0002                     	;# 
   745  0003                     	;# 
   746  0004                     	;# 
   747  0005                     	;# 
   748  0006                     	;# 
   749  0007                     	;# 
   750  0008                     	;# 
   751  0009                     	;# 
   752  000A                     	;# 
   753  000B                     	;# 
   754  000C                     	;# 
   755  000D                     	;# 
   756  000E                     	;# 
   757  0011                     	;# 
   758  0012                     	;# 
   759  0015                     	;# 
   760  0016                     	;# 
   761  0016                     	;# 
   762  0017                     	;# 
   763  0018                     	;# 
   764  0019                     	;# 
   765  001A                     	;# 
   766  001B                     	;# 
   767  001C                     	;# 
   768  008C                     	;# 
   769  008D                     	;# 
   770  008E                     	;# 
   771  0091                     	;# 
   772  0092                     	;# 
   773  0095                     	;# 
   774  0096                     	;# 
   775  0097                     	;# 
   776  0099                     	;# 
   777  009A                     	;# 
   778  009B                     	;# 
   779  009B                     	;# 
   780  009C                     	;# 
   781  009D                     	;# 
   782  009E                     	;# 
   783  009F                     	;# 
   784  010C                     	;# 
   785  010D                     	;# 
   786  010E                     	;# 
   787  0116                     	;# 
   788  0117                     	;# 
   789  011D                     	;# 
   790  018C                     	;# 
   791  018D                     	;# 
   792  018E                     	;# 
   793  0191                     	;# 
   794  0191                     	;# 
   795  0192                     	;# 
   796  0193                     	;# 
   797  0193                     	;# 
   798  0194                     	;# 
   799  0195                     	;# 
   800  0196                     	;# 
   801  0199                     	;# 
   802  019A                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019C                     	;# 
   806  019D                     	;# 
   807  019E                     	;# 
   808  019F                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  0211                     	;# 
   812  0211                     	;# 
   813  0212                     	;# 
   814  0212                     	;# 
   815  0213                     	;# 
   816  0213                     	;# 
   817  0214                     	;# 
   818  0214                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0216                     	;# 
   823  0216                     	;# 
   824  0217                     	;# 
   825  0217                     	;# 
   826  0391                     	;# 
   827  0392                     	;# 
   828  0393                     	;# 
   829  0394                     	;# 
   830  0395                     	;# 
   831  0396                     	;# 
   832  0611                     	;# 
   833  0612                     	;# 
   834  0613                     	;# 
   835  0613                     	;# 
   836  0614                     	;# 
   837  0615                     	;# 
   838  0616                     	;# 
   839  0616                     	;# 
   840  0711                     	;# 
   841  0711                     	;# 
   842  0711                     	;# 
   843  0712                     	;# 
   844  0712                     	;# 
   845  0713                     	;# 
   846  0713                     	;# 
   847  0713                     	;# 
   848  0714                     	;# 
   849  0714                     	;# 
   850  0714                     	;# 
   851  0715                     	;# 
   852  0715                     	;# 
   853  0716                     	;# 
   854  0716                     	;# 
   855  0716                     	;# 
   856  0716                     	;# 
   857  0717                     	;# 
   858  0717                     	;# 
   859  0717                     	;# 
   860  0717                     	;# 
   861  0718                     	;# 
   862  0718                     	;# 
   863  0718                     	;# 
   864  0719                     	;# 
   865  0719                     	;# 
   866  0719                     	;# 
   867  0719                     	;# 
   868  071A                     	;# 
   869  071A                     	;# 
   870  071A                     	;# 
   871  071A                     	;# 
   872  071A                     	;# 
   873  071B                     	;# 
   874  071B                     	;# 
   875  071C                     	;# 
   876  071C                     	;# 
   877  071C                     	;# 
   878  071C                     	;# 
   879  071C                     	;# 
   880  071D                     	;# 
   881  071D                     	;# 
   882  071E                     	;# 
   883  071E                     	;# 
   884  0791                     	;# 
   885  0791                     	;# 
   886  0793                     	;# 
   887  0793                     	;# 
   888  0794                     	;# 
   889  0794                     	;# 
   890  0796                     	;# 
   891  0796                     	;# 
   892  0796                     	;# 
   893  0797                     	;# 
   894  0797                     	;# 
   895  0797                     	;# 
   896  0798                     	;# 
   897  0798                     	;# 
   898  0799                     	;# 
   899  0799                     	;# 
   900  0799                     	;# 
   901  079A                     	;# 
   902  079A                     	;# 
   903  079A                     	;# 
   904  079B                     	;# 
   905  079C                     	;# 
   906  079C                     	;# 
   907  079C                     	;# 
   908  079D                     	;# 
   909  079E                     	;# 
   910  079E                     	;# 
   911  0F8C                     	;# 
   912  0F8D                     	;# 
   913  0F91                     	;# 
   914  0F96                     	;# 
   915  0F97                     	;# 
   916  0F9C                     	;# 
   917  0F9D                     	;# 
   918  0F9E                     	;# 
   919  0FE3                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  008C                     	;# 
   958  008D                     	;# 
   959  008E                     	;# 
   960  0091                     	;# 
   961  0092                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0099                     	;# 
   966  009A                     	;# 
   967  009B                     	;# 
   968  009B                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009E                     	;# 
   972  009F                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0116                     	;# 
   977  0117                     	;# 
   978  011D                     	;# 
   979  018C                     	;# 
   980  018D                     	;# 
   981  018E                     	;# 
   982  0191                     	;# 
   983  0191                     	;# 
   984  0192                     	;# 
   985  0193                     	;# 
   986  0193                     	;# 
   987  0194                     	;# 
   988  0195                     	;# 
   989  0196                     	;# 
   990  0199                     	;# 
   991  019A                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019C                     	;# 
   995  019D                     	;# 
   996  019E                     	;# 
   997  019F                     	;# 
   998  020C                     	;# 
   999  020D                     	;# 
  1000  0211                     	;# 
  1001  0211                     	;# 
  1002  0212                     	;# 
  1003  0212                     	;# 
  1004  0213                     	;# 
  1005  0213                     	;# 
  1006  0214                     	;# 
  1007  0214                     	;# 
  1008  0215                     	;# 
  1009  0215                     	;# 
  1010  0215                     	;# 
  1011  0216                     	;# 
  1012  0216                     	;# 
  1013  0217                     	;# 
  1014  0217                     	;# 
  1015  0391                     	;# 
  1016  0392                     	;# 
  1017  0393                     	;# 
  1018  0394                     	;# 
  1019  0395                     	;# 
  1020  0396                     	;# 
  1021  0611                     	;# 
  1022  0612                     	;# 
  1023  0613                     	;# 
  1024  0613                     	;# 
  1025  0614                     	;# 
  1026  0615                     	;# 
  1027  0616                     	;# 
  1028  0616                     	;# 
  1029  0711                     	;# 
  1030  0711                     	;# 
  1031  0711                     	;# 
  1032  0712                     	;# 
  1033  0712                     	;# 
  1034  0713                     	;# 
  1035  0713                     	;# 
  1036  0713                     	;# 
  1037  0714                     	;# 
  1038  0714                     	;# 
  1039  0714                     	;# 
  1040  0715                     	;# 
  1041  0715                     	;# 
  1042  0716                     	;# 
  1043  0716                     	;# 
  1044  0716                     	;# 
  1045  0716                     	;# 
  1046  0717                     	;# 
  1047  0717                     	;# 
  1048  0717                     	;# 
  1049  0717                     	;# 
  1050  0718                     	;# 
  1051  0718                     	;# 
  1052  0718                     	;# 
  1053  0719                     	;# 
  1054  0719                     	;# 
  1055  0719                     	;# 
  1056  0719                     	;# 
  1057  071A                     	;# 
  1058  071A                     	;# 
  1059  071A                     	;# 
  1060  071A                     	;# 
  1061  071A                     	;# 
  1062  071B                     	;# 
  1063  071B                     	;# 
  1064  071C                     	;# 
  1065  071C                     	;# 
  1066  071C                     	;# 
  1067  071C                     	;# 
  1068  071C                     	;# 
  1069  071D                     	;# 
  1070  071D                     	;# 
  1071  071E                     	;# 
  1072  071E                     	;# 
  1073  0791                     	;# 
  1074  0791                     	;# 
  1075  0793                     	;# 
  1076  0793                     	;# 
  1077  0794                     	;# 
  1078  0794                     	;# 
  1079  0796                     	;# 
  1080  0796                     	;# 
  1081  0796                     	;# 
  1082  0797                     	;# 
  1083  0797                     	;# 
  1084  0797                     	;# 
  1085  0798                     	;# 
  1086  0798                     	;# 
  1087  0799                     	;# 
  1088  0799                     	;# 
  1089  0799                     	;# 
  1090  079A                     	;# 
  1091  079A                     	;# 
  1092  079A                     	;# 
  1093  079B                     	;# 
  1094  079C                     	;# 
  1095  079C                     	;# 
  1096  079C                     	;# 
  1097  079D                     	;# 
  1098  079E                     	;# 
  1099  079E                     	;# 
  1100  0F8C                     	;# 
  1101  0F8D                     	;# 
  1102  0F91                     	;# 
  1103  0F96                     	;# 
  1104  0F97                     	;# 
  1105  0F9C                     	;# 
  1106  0F9D                     	;# 
  1107  0F9E                     	;# 
  1108  0FE3                     	;# 
  1109  0FE4                     	;# 
  1110  0FE5                     	;# 
  1111  0FE6                     	;# 
  1112  0FE7                     	;# 
  1113  0FE8                     	;# 
  1114  0FE9                     	;# 
  1115  0FEA                     	;# 
  1116  0FEB                     	;# 
  1117  0FED                     	;# 
  1118  0FEE                     	;# 
  1119  0FEF                     	;# 
  1120  0000                     	;# 
  1121  0001                     	;# 
  1122  0002                     	;# 
  1123  0003                     	;# 
  1124  0004                     	;# 
  1125  0005                     	;# 
  1126  0006                     	;# 
  1127  0007                     	;# 
  1128  0008                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0095                     	;# 
  1152  0096                     	;# 
  1153  0097                     	;# 
  1154  0099                     	;# 
  1155  009A                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  009F                     	;# 
  1162  010C                     	;# 
  1163  010D                     	;# 
  1164  010E                     	;# 
  1165  0116                     	;# 
  1166  0117                     	;# 
  1167  011D                     	;# 
  1168  018C                     	;# 
  1169  018D                     	;# 
  1170  018E                     	;# 
  1171  0191                     	;# 
  1172  0191                     	;# 
  1173  0192                     	;# 
  1174  0193                     	;# 
  1175  0193                     	;# 
  1176  0194                     	;# 
  1177  0195                     	;# 
  1178  0196                     	;# 
  1179  0199                     	;# 
  1180  019A                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019C                     	;# 
  1184  019D                     	;# 
  1185  019E                     	;# 
  1186  019F                     	;# 
  1187  020C                     	;# 
  1188  020D                     	;# 
  1189  0211                     	;# 
  1190  0211                     	;# 
  1191  0212                     	;# 
  1192  0212                     	;# 
  1193  0213                     	;# 
  1194  0213                     	;# 
  1195  0214                     	;# 
  1196  0214                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0215                     	;# 
  1200  0216                     	;# 
  1201  0216                     	;# 
  1202  0217                     	;# 
  1203  0217                     	;# 
  1204  0391                     	;# 
  1205  0392                     	;# 
  1206  0393                     	;# 
  1207  0394                     	;# 
  1208  0395                     	;# 
  1209  0396                     	;# 
  1210  0611                     	;# 
  1211  0612                     	;# 
  1212  0613                     	;# 
  1213  0613                     	;# 
  1214  0614                     	;# 
  1215  0615                     	;# 
  1216  0616                     	;# 
  1217  0616                     	;# 
  1218  0711                     	;# 
  1219  0711                     	;# 
  1220  0711                     	;# 
  1221  0712                     	;# 
  1222  0712                     	;# 
  1223  0713                     	;# 
  1224  0713                     	;# 
  1225  0713                     	;# 
  1226  0714                     	;# 
  1227  0714                     	;# 
  1228  0714                     	;# 
  1229  0715                     	;# 
  1230  0715                     	;# 
  1231  0716                     	;# 
  1232  0716                     	;# 
  1233  0716                     	;# 
  1234  0716                     	;# 
  1235  0717                     	;# 
  1236  0717                     	;# 
  1237  0717                     	;# 
  1238  0717                     	;# 
  1239  0718                     	;# 
  1240  0718                     	;# 
  1241  0718                     	;# 
  1242  0719                     	;# 
  1243  0719                     	;# 
  1244  0719                     	;# 
  1245  0719                     	;# 
  1246  071A                     	;# 
  1247  071A                     	;# 
  1248  071A                     	;# 
  1249  071A                     	;# 
  1250  071A                     	;# 
  1251  071B                     	;# 
  1252  071B                     	;# 
  1253  071C                     	;# 
  1254  071C                     	;# 
  1255  071C                     	;# 
  1256  071C                     	;# 
  1257  071C                     	;# 
  1258  071D                     	;# 
  1259  071D                     	;# 
  1260  071E                     	;# 
  1261  071E                     	;# 
  1262  0791                     	;# 
  1263  0791                     	;# 
  1264  0793                     	;# 
  1265  0793                     	;# 
  1266  0794                     	;# 
  1267  0794                     	;# 
  1268  0796                     	;# 
  1269  0796                     	;# 
  1270  0796                     	;# 
  1271  0797                     	;# 
  1272  0797                     	;# 
  1273  0797                     	;# 
  1274  0798                     	;# 
  1275  0798                     	;# 
  1276  0799                     	;# 
  1277  0799                     	;# 
  1278  0799                     	;# 
  1279  079A                     	;# 
  1280  079A                     	;# 
  1281  079A                     	;# 
  1282  079B                     	;# 
  1283  079C                     	;# 
  1284  079C                     	;# 
  1285  079C                     	;# 
  1286  079D                     	;# 
  1287  079E                     	;# 
  1288  079E                     	;# 
  1289  0F8C                     	;# 
  1290  0F8D                     	;# 
  1291  0F91                     	;# 
  1292  0F96                     	;# 
  1293  0F97                     	;# 
  1294  0F9C                     	;# 
  1295  0F9D                     	;# 
  1296  0F9E                     	;# 
  1297  0FE3                     	;# 
  1298  0FE4                     	;# 
  1299  0FE5                     	;# 
  1300  0FE6                     	;# 
  1301  0FE7                     	;# 
  1302  0FE8                     	;# 
  1303  0FE9                     	;# 
  1304  0FEA                     	;# 
  1305  0FEB                     	;# 
  1306  0FED                     	;# 
  1307  0FEE                     	;# 
  1308  0FEF                     	;# 
  1309  0000                     	;# 
  1310  0001                     	;# 
  1311  0002                     	;# 
  1312  0003                     	;# 
  1313  0004                     	;# 
  1314  0005                     	;# 
  1315  0006                     	;# 
  1316  0007                     	;# 
  1317  0008                     	;# 
  1318  0009                     	;# 
  1319  000A                     	;# 
  1320  000B                     	;# 
  1321  000C                     	;# 
  1322  000D                     	;# 
  1323  000E                     	;# 
  1324  0011                     	;# 
  1325  0012                     	;# 
  1326  0015                     	;# 
  1327  0016                     	;# 
  1328  0016                     	;# 
  1329  0017                     	;# 
  1330  0018                     	;# 
  1331  0019                     	;# 
  1332  001A                     	;# 
  1333  001B                     	;# 
  1334  001C                     	;# 
  1335  008C                     	;# 
  1336  008D                     	;# 
  1337  008E                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0095                     	;# 
  1341  0096                     	;# 
  1342  0097                     	;# 
  1343  0099                     	;# 
  1344  009A                     	;# 
  1345  009B                     	;# 
  1346  009B                     	;# 
  1347  009C                     	;# 
  1348  009D                     	;# 
  1349  009E                     	;# 
  1350  009F                     	;# 
  1351  010C                     	;# 
  1352  010D                     	;# 
  1353  010E                     	;# 
  1354  0116                     	;# 
  1355  0117                     	;# 
  1356  011D                     	;# 
  1357  018C                     	;# 
  1358  018D                     	;# 
  1359  018E                     	;# 
  1360  0191                     	;# 
  1361  0191                     	;# 
  1362  0192                     	;# 
  1363  0193                     	;# 
  1364  0193                     	;# 
  1365  0194                     	;# 
  1366  0195                     	;# 
  1367  0196                     	;# 
  1368  0199                     	;# 
  1369  019A                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019C                     	;# 
  1373  019D                     	;# 
  1374  019E                     	;# 
  1375  019F                     	;# 
  1376  020C                     	;# 
  1377  020D                     	;# 
  1378  0211                     	;# 
  1379  0211                     	;# 
  1380  0212                     	;# 
  1381  0212                     	;# 
  1382  0213                     	;# 
  1383  0213                     	;# 
  1384  0214                     	;# 
  1385  0214                     	;# 
  1386  0215                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0216                     	;# 
  1390  0216                     	;# 
  1391  0217                     	;# 
  1392  0217                     	;# 
  1393  0391                     	;# 
  1394  0392                     	;# 
  1395  0393                     	;# 
  1396  0394                     	;# 
  1397  0395                     	;# 
  1398  0396                     	;# 
  1399  0611                     	;# 
  1400  0612                     	;# 
  1401  0613                     	;# 
  1402  0613                     	;# 
  1403  0614                     	;# 
  1404  0615                     	;# 
  1405  0616                     	;# 
  1406  0616                     	;# 
  1407  0711                     	;# 
  1408  0711                     	;# 
  1409  0711                     	;# 
  1410  0712                     	;# 
  1411  0712                     	;# 
  1412  0713                     	;# 
  1413  0713                     	;# 
  1414  0713                     	;# 
  1415  0714                     	;# 
  1416  0714                     	;# 
  1417  0714                     	;# 
  1418  0715                     	;# 
  1419  0715                     	;# 
  1420  0716                     	;# 
  1421  0716                     	;# 
  1422  0716                     	;# 
  1423  0716                     	;# 
  1424  0717                     	;# 
  1425  0717                     	;# 
  1426  0717                     	;# 
  1427  0717                     	;# 
  1428  0718                     	;# 
  1429  0718                     	;# 
  1430  0718                     	;# 
  1431  0719                     	;# 
  1432  0719                     	;# 
  1433  0719                     	;# 
  1434  0719                     	;# 
  1435  071A                     	;# 
  1436  071A                     	;# 
  1437  071A                     	;# 
  1438  071A                     	;# 
  1439  071A                     	;# 
  1440  071B                     	;# 
  1441  071B                     	;# 
  1442  071C                     	;# 
  1443  071C                     	;# 
  1444  071C                     	;# 
  1445  071C                     	;# 
  1446  071C                     	;# 
  1447  071D                     	;# 
  1448  071D                     	;# 
  1449  071E                     	;# 
  1450  071E                     	;# 
  1451  0791                     	;# 
  1452  0791                     	;# 
  1453  0793                     	;# 
  1454  0793                     	;# 
  1455  0794                     	;# 
  1456  0794                     	;# 
  1457  0796                     	;# 
  1458  0796                     	;# 
  1459  0796                     	;# 
  1460  0797                     	;# 
  1461  0797                     	;# 
  1462  0797                     	;# 
  1463  0798                     	;# 
  1464  0798                     	;# 
  1465  0799                     	;# 
  1466  0799                     	;# 
  1467  0799                     	;# 
  1468  079A                     	;# 
  1469  079A                     	;# 
  1470  079A                     	;# 
  1471  079B                     	;# 
  1472  079C                     	;# 
  1473  079C                     	;# 
  1474  079C                     	;# 
  1475  079D                     	;# 
  1476  079E                     	;# 
  1477  079E                     	;# 
  1478  0F8C                     	;# 
  1479  0F8D                     	;# 
  1480  0F91                     	;# 
  1481  0F96                     	;# 
  1482  0F97                     	;# 
  1483  0F9C                     	;# 
  1484  0F9D                     	;# 
  1485  0F9E                     	;# 
  1486  0FE3                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0011                     	;# 
  1514  0012                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001C                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  009F                     	;# 
  1540  010C                     	;# 
  1541  010D                     	;# 
  1542  010E                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019C                     	;# 
  1562  019D                     	;# 
  1563  019E                     	;# 
  1564  019F                     	;# 
  1565  020C                     	;# 
  1566  020D                     	;# 
  1567  0211                     	;# 
  1568  0211                     	;# 
  1569  0212                     	;# 
  1570  0212                     	;# 
  1571  0213                     	;# 
  1572  0213                     	;# 
  1573  0214                     	;# 
  1574  0214                     	;# 
  1575  0215                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0216                     	;# 
  1579  0216                     	;# 
  1580  0217                     	;# 
  1581  0217                     	;# 
  1582  0391                     	;# 
  1583  0392                     	;# 
  1584  0393                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0611                     	;# 
  1589  0612                     	;# 
  1590  0613                     	;# 
  1591  0613                     	;# 
  1592  0614                     	;# 
  1593  0615                     	;# 
  1594  0616                     	;# 
  1595  0616                     	;# 
  1596  0711                     	;# 
  1597  0711                     	;# 
  1598  0711                     	;# 
  1599  0712                     	;# 
  1600  0712                     	;# 
  1601  0713                     	;# 
  1602  0713                     	;# 
  1603  0713                     	;# 
  1604  0714                     	;# 
  1605  0714                     	;# 
  1606  0714                     	;# 
  1607  0715                     	;# 
  1608  0715                     	;# 
  1609  0716                     	;# 
  1610  0716                     	;# 
  1611  0716                     	;# 
  1612  0716                     	;# 
  1613  0717                     	;# 
  1614  0717                     	;# 
  1615  0717                     	;# 
  1616  0717                     	;# 
  1617  0718                     	;# 
  1618  0718                     	;# 
  1619  0718                     	;# 
  1620  0719                     	;# 
  1621  0719                     	;# 
  1622  0719                     	;# 
  1623  0719                     	;# 
  1624  071A                     	;# 
  1625  071A                     	;# 
  1626  071A                     	;# 
  1627  071A                     	;# 
  1628  071A                     	;# 
  1629  071B                     	;# 
  1630  071B                     	;# 
  1631  071C                     	;# 
  1632  071C                     	;# 
  1633  071C                     	;# 
  1634  071C                     	;# 
  1635  071C                     	;# 
  1636  071D                     	;# 
  1637  071D                     	;# 
  1638  071E                     	;# 
  1639  071E                     	;# 
  1640  0791                     	;# 
  1641  0791                     	;# 
  1642  0793                     	;# 
  1643  0793                     	;# 
  1644  0794                     	;# 
  1645  0794                     	;# 
  1646  0796                     	;# 
  1647  0796                     	;# 
  1648  0796                     	;# 
  1649  0797                     	;# 
  1650  0797                     	;# 
  1651  0797                     	;# 
  1652  0798                     	;# 
  1653  0798                     	;# 
  1654  0799                     	;# 
  1655  0799                     	;# 
  1656  0799                     	;# 
  1657  079A                     	;# 
  1658  079A                     	;# 
  1659  079A                     	;# 
  1660  079B                     	;# 
  1661  079C                     	;# 
  1662  079C                     	;# 
  1663  079C                     	;# 
  1664  079D                     	;# 
  1665  079E                     	;# 
  1666  079E                     	;# 
  1667  0F8C                     	;# 
  1668  0F8D                     	;# 
  1669  0F91                     	;# 
  1670  0F96                     	;# 
  1671  0F97                     	;# 
  1672  0F9C                     	;# 
  1673  0F9D                     	;# 
  1674  0F9E                     	;# 
  1675  0FE3                     	;# 
  1676  0FE4                     	;# 
  1677  0FE5                     	;# 
  1678  0FE6                     	;# 
  1679  0FE7                     	;# 
  1680  0FE8                     	;# 
  1681  0FE9                     	;# 
  1682  0FEA                     	;# 
  1683  0FEB                     	;# 
  1684  0FED                     	;# 
  1685  0FEE                     	;# 
  1686  0FEF                     	;# 
  1687  0000                     	;# 
  1688  0001                     	;# 
  1689  0002                     	;# 
  1690  0003                     	;# 
  1691  0004                     	;# 
  1692  0005                     	;# 
  1693  0006                     	;# 
  1694  0007                     	;# 
  1695  0008                     	;# 
  1696  0009                     	;# 
  1697  000A                     	;# 
  1698  000B                     	;# 
  1699  000C                     	;# 
  1700  000D                     	;# 
  1701  000E                     	;# 
  1702  0011                     	;# 
  1703  0012                     	;# 
  1704  0015                     	;# 
  1705  0016                     	;# 
  1706  0016                     	;# 
  1707  0017                     	;# 
  1708  0018                     	;# 
  1709  0019                     	;# 
  1710  001A                     	;# 
  1711  001B                     	;# 
  1712  001C                     	;# 
  1713  008C                     	;# 
  1714  008D                     	;# 
  1715  008E                     	;# 
  1716  0091                     	;# 
  1717  0092                     	;# 
  1718  0095                     	;# 
  1719  0096                     	;# 
  1720  0097                     	;# 
  1721  0099                     	;# 
  1722  009A                     	;# 
  1723  009B                     	;# 
  1724  009B                     	;# 
  1725  009C                     	;# 
  1726  009D                     	;# 
  1727  009E                     	;# 
  1728  009F                     	;# 
  1729  010C                     	;# 
  1730  010D                     	;# 
  1731  010E                     	;# 
  1732  0116                     	;# 
  1733  0117                     	;# 
  1734  011D                     	;# 
  1735  018C                     	;# 
  1736  018D                     	;# 
  1737  018E                     	;# 
  1738  0191                     	;# 
  1739  0191                     	;# 
  1740  0192                     	;# 
  1741  0193                     	;# 
  1742  0193                     	;# 
  1743  0194                     	;# 
  1744  0195                     	;# 
  1745  0196                     	;# 
  1746  0199                     	;# 
  1747  019A                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019C                     	;# 
  1751  019D                     	;# 
  1752  019E                     	;# 
  1753  019F                     	;# 
  1754  020C                     	;# 
  1755  020D                     	;# 
  1756  0211                     	;# 
  1757  0211                     	;# 
  1758  0212                     	;# 
  1759  0212                     	;# 
  1760  0213                     	;# 
  1761  0213                     	;# 
  1762  0214                     	;# 
  1763  0214                     	;# 
  1764  0215                     	;# 
  1765  0215                     	;# 
  1766  0215                     	;# 
  1767  0216                     	;# 
  1768  0216                     	;# 
  1769  0217                     	;# 
  1770  0217                     	;# 
  1771  0391                     	;# 
  1772  0392                     	;# 
  1773  0393                     	;# 
  1774  0394                     	;# 
  1775  0395                     	;# 
  1776  0396                     	;# 
  1777  0611                     	;# 
  1778  0612                     	;# 
  1779  0613                     	;# 
  1780  0613                     	;# 
  1781  0614                     	;# 
  1782  0615                     	;# 
  1783  0616                     	;# 
  1784  0616                     	;# 
  1785  0711                     	;# 
  1786  0711                     	;# 
  1787  0711                     	;# 
  1788  0712                     	;# 
  1789  0712                     	;# 
  1790  0713                     	;# 
  1791  0713                     	;# 
  1792  0713                     	;# 
  1793  0714                     	;# 
  1794  0714                     	;# 
  1795  0714                     	;# 
  1796  0715                     	;# 
  1797  0715                     	;# 
  1798  0716                     	;# 
  1799  0716                     	;# 
  1800  0716                     	;# 
  1801  0716                     	;# 
  1802  0717                     	;# 
  1803  0717                     	;# 
  1804  0717                     	;# 
  1805  0717                     	;# 
  1806  0718                     	;# 
  1807  0718                     	;# 
  1808  0718                     	;# 
  1809  0719                     	;# 
  1810  0719                     	;# 
  1811  0719                     	;# 
  1812  0719                     	;# 
  1813  071A                     	;# 
  1814  071A                     	;# 
  1815  071A                     	;# 
  1816  071A                     	;# 
  1817  071A                     	;# 
  1818  071B                     	;# 
  1819  071B                     	;# 
  1820  071C                     	;# 
  1821  071C                     	;# 
  1822  071C                     	;# 
  1823  071C                     	;# 
  1824  071C                     	;# 
  1825  071D                     	;# 
  1826  071D                     	;# 
  1827  071E                     	;# 
  1828  071E                     	;# 
  1829  0791                     	;# 
  1830  0791                     	;# 
  1831  0793                     	;# 
  1832  0793                     	;# 
  1833  0794                     	;# 
  1834  0794                     	;# 
  1835  0796                     	;# 
  1836  0796                     	;# 
  1837  0796                     	;# 
  1838  0797                     	;# 
  1839  0797                     	;# 
  1840  0797                     	;# 
  1841  0798                     	;# 
  1842  0798                     	;# 
  1843  0799                     	;# 
  1844  0799                     	;# 
  1845  0799                     	;# 
  1846  079A                     	;# 
  1847  079A                     	;# 
  1848  079A                     	;# 
  1849  079B                     	;# 
  1850  079C                     	;# 
  1851  079C                     	;# 
  1852  079C                     	;# 
  1853  079D                     	;# 
  1854  079E                     	;# 
  1855  079E                     	;# 
  1856  0F8C                     	;# 
  1857  0F8D                     	;# 
  1858  0F91                     	;# 
  1859  0F96                     	;# 
  1860  0F97                     	;# 
  1861  0F9C                     	;# 
  1862  0F9D                     	;# 
  1863  0F9E                     	;# 
  1864  0FE3                     	;# 
  1865  0FE4                     	;# 
  1866  0FE5                     	;# 
  1867  0FE6                     	;# 
  1868  0FE7                     	;# 
  1869  0FE8                     	;# 
  1870  0FE9                     	;# 
  1871  0FEA                     	;# 
  1872  0FEB                     	;# 
  1873  0FED                     	;# 
  1874  0FEE                     	;# 
  1875  0FEF                     	;# 
  1876  0000                     	;# 
  1877  0001                     	;# 
  1878  0002                     	;# 
  1879  0003                     	;# 
  1880  0004                     	;# 
  1881  0005                     	;# 
  1882  0006                     	;# 
  1883  0007                     	;# 
  1884  0008                     	;# 
  1885  0009                     	;# 
  1886  000A                     	;# 
  1887  000B                     	;# 
  1888  000C                     	;# 
  1889  000D                     	;# 
  1890  000E                     	;# 
  1891  0011                     	;# 
  1892  0012                     	;# 
  1893  0015                     	;# 
  1894  0016                     	;# 
  1895  0016                     	;# 
  1896  0017                     	;# 
  1897  0018                     	;# 
  1898  0019                     	;# 
  1899  001A                     	;# 
  1900  001B                     	;# 
  1901  001C                     	;# 
  1902  008C                     	;# 
  1903  008D                     	;# 
  1904  008E                     	;# 
  1905  0091                     	;# 
  1906  0092                     	;# 
  1907  0095                     	;# 
  1908  0096                     	;# 
  1909  0097                     	;# 
  1910  0099                     	;# 
  1911  009A                     	;# 
  1912  009B                     	;# 
  1913  009B                     	;# 
  1914  009C                     	;# 
  1915  009D                     	;# 
  1916  009E                     	;# 
  1917  009F                     	;# 
  1918  010C                     	;# 
  1919  010D                     	;# 
  1920  010E                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  011D                     	;# 
  1924  018C                     	;# 
  1925  018D                     	;# 
  1926  018E                     	;# 
  1927  0191                     	;# 
  1928  0191                     	;# 
  1929  0192                     	;# 
  1930  0193                     	;# 
  1931  0193                     	;# 
  1932  0194                     	;# 
  1933  0195                     	;# 
  1934  0196                     	;# 
  1935  0199                     	;# 
  1936  019A                     	;# 
  1937  019B                     	;# 
  1938  019B                     	;# 
  1939  019C                     	;# 
  1940  019D                     	;# 
  1941  019E                     	;# 
  1942  019F                     	;# 
  1943  020C                     	;# 
  1944  020D                     	;# 
  1945  0211                     	;# 
  1946  0211                     	;# 
  1947  0212                     	;# 
  1948  0212                     	;# 
  1949  0213                     	;# 
  1950  0213                     	;# 
  1951  0214                     	;# 
  1952  0214                     	;# 
  1953  0215                     	;# 
  1954  0215                     	;# 
  1955  0215                     	;# 
  1956  0216                     	;# 
  1957  0216                     	;# 
  1958  0217                     	;# 
  1959  0217                     	;# 
  1960  0391                     	;# 
  1961  0392                     	;# 
  1962  0393                     	;# 
  1963  0394                     	;# 
  1964  0395                     	;# 
  1965  0396                     	;# 
  1966  0611                     	;# 
  1967  0612                     	;# 
  1968  0613                     	;# 
  1969  0613                     	;# 
  1970  0614                     	;# 
  1971  0615                     	;# 
  1972  0616                     	;# 
  1973  0616                     	;# 
  1974  0711                     	;# 
  1975  0711                     	;# 
  1976  0711                     	;# 
  1977  0712                     	;# 
  1978  0712                     	;# 
  1979  0713                     	;# 
  1980  0713                     	;# 
  1981  0713                     	;# 
  1982  0714                     	;# 
  1983  0714                     	;# 
  1984  0714                     	;# 
  1985  0715                     	;# 
  1986  0715                     	;# 
  1987  0716                     	;# 
  1988  0716                     	;# 
  1989  0716                     	;# 
  1990  0716                     	;# 
  1991  0717                     	;# 
  1992  0717                     	;# 
  1993  0717                     	;# 
  1994  0717                     	;# 
  1995  0718                     	;# 
  1996  0718                     	;# 
  1997  0718                     	;# 
  1998  0719                     	;# 
  1999  0719                     	;# 
  2000  0719                     	;# 
  2001  0719                     	;# 
  2002  071A                     	;# 
  2003  071A                     	;# 
  2004  071A                     	;# 
  2005  071A                     	;# 
  2006  071A                     	;# 
  2007  071B                     	;# 
  2008  071B                     	;# 
  2009  071C                     	;# 
  2010  071C                     	;# 
  2011  071C                     	;# 
  2012  071C                     	;# 
  2013  071C                     	;# 
  2014  071D                     	;# 
  2015  071D                     	;# 
  2016  071E                     	;# 
  2017  071E                     	;# 
  2018  0791                     	;# 
  2019  0791                     	;# 
  2020  0793                     	;# 
  2021  0793                     	;# 
  2022  0794                     	;# 
  2023  0794                     	;# 
  2024  0796                     	;# 
  2025  0796                     	;# 
  2026  0796                     	;# 
  2027  0797                     	;# 
  2028  0797                     	;# 
  2029  0797                     	;# 
  2030  0798                     	;# 
  2031  0798                     	;# 
  2032  0799                     	;# 
  2033  0799                     	;# 
  2034  0799                     	;# 
  2035  079A                     	;# 
  2036  079A                     	;# 
  2037  079A                     	;# 
  2038  079B                     	;# 
  2039  079C                     	;# 
  2040  079C                     	;# 
  2041  079C                     	;# 
  2042  079D                     	;# 
  2043  079E                     	;# 
  2044  079E                     	;# 
  2045  0F8C                     	;# 
  2046  0F8D                     	;# 
  2047  0F91                     	;# 
  2048  0F96                     	;# 
  2049  0F97                     	;# 
  2050  0F9C                     	;# 
  2051  0F9D                     	;# 
  2052  0F9E                     	;# 
  2053  0FE3                     	;# 
  2054  0FE4                     	;# 
  2055  0FE5                     	;# 
  2056  0FE6                     	;# 
  2057  0FE7                     	;# 
  2058  0FE8                     	;# 
  2059  0FE9                     	;# 
  2060  0FEA                     	;# 
  2061  0FEB                     	;# 
  2062  0FED                     	;# 
  2063  0FEE                     	;# 
  2064  0FEF                     	;# 
  2065  0000                     	;# 
  2066  0001                     	;# 
  2067  0002                     	;# 
  2068  0003                     	;# 
  2069  0004                     	;# 
  2070  0005                     	;# 
  2071  0006                     	;# 
  2072  0007                     	;# 
  2073  0008                     	;# 
  2074  0009                     	;# 
  2075  000A                     	;# 
  2076  000B                     	;# 
  2077  000C                     	;# 
  2078  000D                     	;# 
  2079  000E                     	;# 
  2080  0011                     	;# 
  2081  0012                     	;# 
  2082  0015                     	;# 
  2083  0016                     	;# 
  2084  0016                     	;# 
  2085  0017                     	;# 
  2086  0018                     	;# 
  2087  0019                     	;# 
  2088  001A                     	;# 
  2089  001B                     	;# 
  2090  001C                     	;# 
  2091  008C                     	;# 
  2092  008D                     	;# 
  2093  008E                     	;# 
  2094  0091                     	;# 
  2095  0092                     	;# 
  2096  0095                     	;# 
  2097  0096                     	;# 
  2098  0097                     	;# 
  2099  0099                     	;# 
  2100  009A                     	;# 
  2101  009B                     	;# 
  2102  009B                     	;# 
  2103  009C                     	;# 
  2104  009D                     	;# 
  2105  009E                     	;# 
  2106  009F                     	;# 
  2107  010C                     	;# 
  2108  010D                     	;# 
  2109  010E                     	;# 
  2110  0116                     	;# 
  2111  0117                     	;# 
  2112  011D                     	;# 
  2113  018C                     	;# 
  2114  018D                     	;# 
  2115  018E                     	;# 
  2116  0191                     	;# 
  2117  0191                     	;# 
  2118  0192                     	;# 
  2119  0193                     	;# 
  2120  0193                     	;# 
  2121  0194                     	;# 
  2122  0195                     	;# 
  2123  0196                     	;# 
  2124  0199                     	;# 
  2125  019A                     	;# 
  2126  019B                     	;# 
  2127  019B                     	;# 
  2128  019C                     	;# 
  2129  019D                     	;# 
  2130  019E                     	;# 
  2131  019F                     	;# 
  2132  020C                     	;# 
  2133  020D                     	;# 
  2134  0211                     	;# 
  2135  0211                     	;# 
  2136  0212                     	;# 
  2137  0212                     	;# 
  2138  0213                     	;# 
  2139  0213                     	;# 
  2140  0214                     	;# 
  2141  0214                     	;# 
  2142  0215                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0216                     	;# 
  2146  0216                     	;# 
  2147  0217                     	;# 
  2148  0217                     	;# 
  2149  0391                     	;# 
  2150  0392                     	;# 
  2151  0393                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0611                     	;# 
  2156  0612                     	;# 
  2157  0613                     	;# 
  2158  0613                     	;# 
  2159  0614                     	;# 
  2160  0615                     	;# 
  2161  0616                     	;# 
  2162  0616                     	;# 
  2163  0711                     	;# 
  2164  0711                     	;# 
  2165  0711                     	;# 
  2166  0712                     	;# 
  2167  0712                     	;# 
  2168  0713                     	;# 
  2169  0713                     	;# 
  2170  0713                     	;# 
  2171  0714                     	;# 
  2172  0714                     	;# 
  2173  0714                     	;# 
  2174  0715                     	;# 
  2175  0715                     	;# 
  2176  0716                     	;# 
  2177  0716                     	;# 
  2178  0716                     	;# 
  2179  0716                     	;# 
  2180  0717                     	;# 
  2181  0717                     	;# 
  2182  0717                     	;# 
  2183  0717                     	;# 
  2184  0718                     	;# 
  2185  0718                     	;# 
  2186  0718                     	;# 
  2187  0719                     	;# 
  2188  0719                     	;# 
  2189  0719                     	;# 
  2190  0719                     	;# 
  2191  071A                     	;# 
  2192  071A                     	;# 
  2193  071A                     	;# 
  2194  071A                     	;# 
  2195  071A                     	;# 
  2196  071B                     	;# 
  2197  071B                     	;# 
  2198  071C                     	;# 
  2199  071C                     	;# 
  2200  071C                     	;# 
  2201  071C                     	;# 
  2202  071C                     	;# 
  2203  071D                     	;# 
  2204  071D                     	;# 
  2205  071E                     	;# 
  2206  071E                     	;# 
  2207  0791                     	;# 
  2208  0791                     	;# 
  2209  0793                     	;# 
  2210  0793                     	;# 
  2211  0794                     	;# 
  2212  0794                     	;# 
  2213  0796                     	;# 
  2214  0796                     	;# 
  2215  0796                     	;# 
  2216  0797                     	;# 
  2217  0797                     	;# 
  2218  0797                     	;# 
  2219  0798                     	;# 
  2220  0798                     	;# 
  2221  0799                     	;# 
  2222  0799                     	;# 
  2223  0799                     	;# 
  2224  079A                     	;# 
  2225  079A                     	;# 
  2226  079A                     	;# 
  2227  079B                     	;# 
  2228  079C                     	;# 
  2229  079C                     	;# 
  2230  079C                     	;# 
  2231  079D                     	;# 
  2232  079E                     	;# 
  2233  079E                     	;# 
  2234  0F8C                     	;# 
  2235  0F8D                     	;# 
  2236  0F91                     	;# 
  2237  0F96                     	;# 
  2238  0F97                     	;# 
  2239  0F9C                     	;# 
  2240  0F9D                     	;# 
  2241  0F9E                     	;# 
  2242  0FE3                     	;# 
  2243  0FE4                     	;# 
  2244  0FE5                     	;# 
  2245  0FE6                     	;# 
  2246  0FE7                     	;# 
  2247  0FE8                     	;# 
  2248  0FE9                     	;# 
  2249  0FEA                     	;# 
  2250  0FEB                     	;# 
  2251  0FED                     	;# 
  2252  0FEE                     	;# 
  2253  0FEF                     	;# 
  2254                           
  2255                           	psect	idataBANK0
  2256  0800                     __pidataBANK0:	
  2257                           
  2258                           ;initializer for _sample_period
  2259  0800  34AE               	retlw	174
  2260                           
  2261                           	psect	idataBANK1
  2262  14CF                     __pidataBANK1:	
  2263                           
  2264                           ;initializer for _Button_StateMachine
  2265  14CF  349E               	retlw	low _Button_State_Initializing
  2266  14D0  3407               	retlw	high _Button_State_Initializing
  2267  14D1  34FA               	retlw	low _Button_State_NotPressed
  2268  14D2  3406               	retlw	high _Button_State_NotPressed
  2269  14D3  34AB               	retlw	low _Button_State_Pressed
  2270  14D4  340B               	retlw	high _Button_State_Pressed
  2271                           
  2272                           ;initializer for _callback_notPressed
  2273  14D5  3427               	retlw	low _Button_DefaultCallback
  2274  14D6  3414               	retlw	high _Button_DefaultCallback
  2275                           
  2276                           ;initializer for _callback_pressed
  2277  14D7  3427               	retlw	low _Button_DefaultCallback
  2278  14D8  3414               	retlw	high _Button_DefaultCallback
  2279                           
  2280                           ;initializer for _callback_sampled
  2281  14D9  3428               	retlw	low _Sensor_DefaultCallback
  2282  14DA  3414               	retlw	high _Sensor_DefaultCallback
  2283                           
  2284                           	psect	idataBANK2
  2285  0801                     __pidataBANK2:	
  2286                           
  2287                           ;initializer for _mtouch_sensor
  2288  0801  3400               	retlw	0
  2289  0802  3469               	retlw	105
  2290  0803  3430               	retlw	48
  2291  0804  3410               	retlw	16
  2292  0805  3420               	retlw	32
  2293  0806  3400               	retlw	0
  2294  0807  3400               	retlw	0
  2295  0808  3400               	retlw	0
  2296  0809  3400               	retlw	0
  2297  080A  3401               	retlw	1
  2298  080B  3431               	retlw	49
  2299  080C  3430               	retlw	48
  2300  080D  3410               	retlw	16
  2301  080E  3420               	retlw	32
  2302  080F  3400               	retlw	0
  2303  0810  3400               	retlw	0
  2304  0811  3400               	retlw	0
  2305  0812  3400               	retlw	0
  2306  0813  3402               	retlw	2
  2307  0814  345D               	retlw	93
  2308  0815  3430               	retlw	48
  2309  0816  3410               	retlw	16
  2310  0817  3420               	retlw	32
  2311  0818  3400               	retlw	0
  2312  0819  3400               	retlw	0
  2313  081A  3400               	retlw	0
  2314  081B  3400               	retlw	0
  2315  081C  3403               	retlw	3
  2316  081D  3435               	retlw	53
  2317  081E  3430               	retlw	48
  2318  081F  3410               	retlw	16
  2319  0820  3420               	retlw	32
  2320  0821  3400               	retlw	0
  2321  0822  3400               	retlw	0
  2322  0823  3400               	retlw	0
  2323  0824  3400               	retlw	0
  2324                           
  2325                           	psect	stringtext1
  2326  1809                     __pstringtext1:	
  2327  1809                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2328  1809  3400               	retlw	0
  2329  180A  340D               	retlw	13
  2330  180B  341C               	retlw	28
  2331  180C  341E               	retlw	30
  2332  180D  3417               	retlw	23
  2333  180E                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2334                           
  2335                           	psect	stringtext2
  2336  185E                     __pstringtext2:	
  2337  185E                     _sensor_scan_group:	
  2338  185E  3429               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2339  185F  3420               	retlw	low (_mtouch_sensor| (0+256))
  2340  1860  343B               	retlw	low ((_mtouch_sensor| (0+256)+27))
  2341  1861  3432               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2342  1862                     __end_of_sensor_scan_group:	
  2343                           
  2344                           	psect	stringtext3
  2345  1000                     __pstringtext3:	
  2346  1000                     _mtouch_button_init:	
  2347  1000  3400               	retlw	0
  2348  1001  3401               	retlw	1
  2349  1002  3400               	retlw	0
  2350  1003  3400               	retlw	0
  2351  1004  3400               	retlw	0
  2352  1005  3400               	retlw	0
  2353  1006  3400               	retlw	0
  2354  1007  3400               	retlw	0
  2355  1008  3400               	retlw	0
  2356  1009  3400               	retlw	0
  2357  100A  3400               	retlw	0
  2358  100B  3400               	retlw	0
  2359  100C  3400               	retlw	0
  2360  100D  3400               	retlw	0
  2361  100E  3464               	retlw	100
  2362  100F  3401               	retlw	1
  2363  1010  3401               	retlw	1
  2364  1011  3400               	retlw	0
  2365  1012  3400               	retlw	0
  2366  1013  3400               	retlw	0
  2367  1014  3400               	retlw	0
  2368  1015  3400               	retlw	0
  2369  1016  3400               	retlw	0
  2370  1017  3400               	retlw	0
  2371  1018  3400               	retlw	0
  2372  1019  3400               	retlw	0
  2373  101A  3400               	retlw	0
  2374  101B  3400               	retlw	0
  2375  101C  3400               	retlw	0
  2376  101D  3400               	retlw	0
  2377  101E  3464               	retlw	100
  2378  101F  3401               	retlw	1
  2379  1020  3402               	retlw	2
  2380  1021  3403               	retlw	3
  2381  1022  3400               	retlw	0
  2382  1023  3400               	retlw	0
  2383  1024  3400               	retlw	0
  2384  1025  3400               	retlw	0
  2385  1026  3400               	retlw	0
  2386  1027  3400               	retlw	0
  2387  1028  3400               	retlw	0
  2388  1029  3400               	retlw	0
  2389  102A  3400               	retlw	0
  2390  102B  3400               	retlw	0
  2391  102C  3400               	retlw	0
  2392  102D  3400               	retlw	0
  2393  102E  3464               	retlw	100
  2394  102F  3401               	retlw	1
  2395  1030  3403               	retlw	3
  2396  1031  3402               	retlw	2
  2397  1032  3400               	retlw	0
  2398  1033  3400               	retlw	0
  2399  1034  3400               	retlw	0
  2400  1035  3400               	retlw	0
  2401  1036  3400               	retlw	0
  2402  1037  3400               	retlw	0
  2403  1038  3400               	retlw	0
  2404  1039  3400               	retlw	0
  2405  103A  3400               	retlw	0
  2406  103B  3400               	retlw	0
  2407  103C  3400               	retlw	0
  2408  103D  3400               	retlw	0
  2409  103E  3464               	retlw	100
  2410  103F  3401               	retlw	1
  2411  1040                     __end_of_mtouch_button_init:	
  2412                           
  2413                           	psect	nvBANK1
  2414  00CA                     __pnvBANK1:	
  2415  00CA                     _EUSART_ErrorHandler:	
  2416  00CA                     	ds	2
  2417  00CC                     _EUSART_OverrunErrorHandler:	
  2418  00CC                     	ds	2
  2419  00CE                     _EUSART_FramingErrorHandler:	
  2420  00CE                     	ds	2
  2421  00D0                     _EUSART_RxDefaultInterruptHandler:	
  2422  00D0                     	ds	2
  2423  0012                     _PIR2bits	set	18
  2424  001C                     _T2CONbits	set	28
  2425  001C                     _T2CON	set	28
  2426  001A                     _TMR2	set	26
  2427  001B                     _PR2	set	27
  2428  000B                     _INTCONbits	set	11
  2429  0011                     _PIR1bits	set	17
  2430  005F                     _GIE	set	95
  2431  0095                     _OPTION_REGbits	set	149
  2432  008E                     _TRISC	set	142
  2433  008D                     _TRISB	set	141
  2434  008C                     _TRISA	set	140
  2435  0097                     _WDTCON	set	151
  2436  0099                     _OSCCON	set	153
  2437  0091                     _PIE1bits	set	145
  2438  010D                     _LATBbits	set	269
  2439  011D                     _APFCONbits	set	285
  2440  010E                     _LATCbits	set	270
  2441  010C                     _LATAbits	set	268
  2442  011D                     _APFCON	set	285
  2443  010E                     _LATC	set	270
  2444  010D                     _LATB	set	269
  2445  010C                     _LATA	set	268
  2446  0116                     _BORCON	set	278
  2447  018C                     _ANSELA	set	396
  2448  018D                     _ANSELB	set	397
  2449  018E                     _ANSELC	set	398
  2450  0199                     _RCREG	set	409
  2451  019D                     _RCSTAbits	set	413
  2452  019A                     _TXREG	set	410
  2453  019E                     _TXSTAbits	set	414
  2454  019C                     _SPBRGH	set	412
  2455  019B                     _SPBRGL	set	411
  2456  019E                     _TXSTA	set	414
  2457  019D                     _RCSTA	set	413
  2458  019F                     _BAUDCON	set	415
  2459  020C                     _WPUA	set	524
  2460  020D                     _WPUB	set	525
  2461  071A                     _AAD1RES0	set	1818
  2462  0711                     _AD1CON0bits	set	1809
  2463  0714                     _AAD1CON3	set	1812
  2464  0713                     _AD1CON2	set	1811
  2465  0717                     _AD1ACQCON	set	1815
  2466  0716                     _AD1PRECON	set	1814
  2467  0718                     _AAD1GRD	set	1816
  2468  0713                     _AAD1CON2	set	1811
  2469  0719                     _AAD1CAP	set	1817
  2470  0714                     _AD1CON3	set	1812
  2471  0712                     _ADCOMCON	set	1810
  2472  0711                     _AD1CON0	set	1809
  2473  079A                     _AAD2RES0	set	1946
  2474  0791                     _AD2CON0bits	set	1937
  2475  0797                     _AD2ACQCON	set	1943
  2476  0796                     _AD2PRECON	set	1942
  2477  0794                     _AAD2CON3	set	1940
  2478  0798                     _AAD2GRD	set	1944
  2479  0793                     _AD2CON2	set	1939
  2480  0794                     _AD2CON3	set	1940
  2481  0791                     _AD2CON0	set	1937
  2482                           
  2483                           	psect	stringtext4
  2484  1800                     __pstringtext4:	
  2485  1800                     STR_1:	
  2486  1800  3450               	retlw	80	;'P'
  2487  1801  3449               	retlw	73	;'I'
  2488  1802  3443               	retlw	67	;'C'
  2489  1803  3453               	retlw	83	;'S'
  2490  1804  344D               	retlw	77	;'M'
  2491  1805  3441               	retlw	65	;'A'
  2492  1806  3452               	retlw	82	;'R'
  2493  1807  3454               	retlw	84	;'T'
  2494  1808  3400               	retlw	0
  2495                           
  2496                           	psect	stringtext5
  2497  180E                     __pstringtext5:	
  2498  180E                     STR_2:	
  2499  180E  3450               	retlw	80	;'P'
  2500  180F  3449               	retlw	73	;'I'
  2501  1810  3443               	retlw	67	;'C'
  2502  1811  3430               	retlw	48	;'0'
  2503  1812  3400               	retlw	0
  2504                           
  2505                           	psect	stringtext6
  2506  1813                     __pstringtext6:	
  2507  1813                     STR_3:	
  2508  1813  3450               	retlw	80	;'P'
  2509  1814  3449               	retlw	73	;'I'
  2510  1815  3443               	retlw	67	;'C'
  2511  1816  3431               	retlw	49	;'1'
  2512  1817  3400               	retlw	0
  2513                           
  2514                           	psect	stringtext7
  2515  1818                     __pstringtext7:	
  2516  1818                     STR_4:	
  2517  1818  3450               	retlw	80	;'P'
  2518  1819  3449               	retlw	73	;'I'
  2519  181A  3443               	retlw	67	;'C'
  2520  181B  3432               	retlw	50	;'2'
  2521  181C  3400               	retlw	0
  2522                           
  2523                           	psect	stringtext8
  2524  181D                     __pstringtext8:	
  2525  181D                     STR_5:	
  2526  181D  3450               	retlw	80	;'P'
  2527  181E  3449               	retlw	73	;'I'
  2528  181F  3443               	retlw	67	;'C'
  2529  1820  3433               	retlw	51	;'3'
  2530  1821  3400               	retlw	0
  2531                           
  2532                           	psect	stringtext9
  2533  1822                     __pstringtext9:	
  2534  1822                     STR_6:	
  2535  1822  3450               	retlw	80	;'P'
  2536  1823  3449               	retlw	73	;'I'
  2537  1824  3443               	retlw	67	;'C'
  2538  1825  3434               	retlw	52	;'4'
  2539  1826  3400               	retlw	0
  2540                           
  2541                           	psect	stringtext10
  2542  1827                     __pstringtext10:	
  2543  1827                     STR_7:	
  2544  1827  3450               	retlw	80	;'P'
  2545  1828  3449               	retlw	73	;'I'
  2546  1829  3443               	retlw	67	;'C'
  2547  182A  3435               	retlw	53	;'5'
  2548  182B  3400               	retlw	0
  2549                           
  2550                           	psect	stringtext11
  2551  182C                     __pstringtext11:	
  2552  182C                     STR_8:	
  2553  182C  3450               	retlw	80	;'P'
  2554  182D  3449               	retlw	73	;'I'
  2555  182E  3443               	retlw	67	;'C'
  2556  182F  3436               	retlw	54	;'6'
  2557  1830  3400               	retlw	0
  2558                           
  2559                           	psect	stringtext12
  2560  1831                     __pstringtext12:	
  2561  1831                     STR_9:	
  2562  1831  3450               	retlw	80	;'P'
  2563  1832  3449               	retlw	73	;'I'
  2564  1833  3443               	retlw	67	;'C'
  2565  1834  3437               	retlw	55	;'7'
  2566  1835  3400               	retlw	0
  2567                           
  2568                           	psect	stringtext13
  2569  1836                     __pstringtext13:	
  2570  1836                     STR_10:	
  2571  1836  3450               	retlw	80	;'P'
  2572  1837  3449               	retlw	73	;'I'
  2573  1838  3443               	retlw	67	;'C'
  2574  1839  3438               	retlw	56	;'8'
  2575  183A  3400               	retlw	0
  2576                           
  2577                           	psect	stringtext14
  2578  183B                     __pstringtext14:	
  2579  183B                     STR_11:	
  2580  183B  3450               	retlw	80	;'P'
  2581  183C  3449               	retlw	73	;'I'
  2582  183D  3443               	retlw	67	;'C'
  2583  183E  3439               	retlw	57	;'9'
  2584  183F  3400               	retlw	0
  2585                           
  2586                           	psect	stringtext15
  2587  1840                     __pstringtext15:	
  2588  1840                     STR_12:	
  2589  1840  3450               	retlw	80	;'P'
  2590  1841  3449               	retlw	73	;'I'
  2591  1842  3443               	retlw	67	;'C'
  2592  1843  3441               	retlw	65	;'A'
  2593  1844  3400               	retlw	0
  2594                           
  2595                           	psect	stringtext16
  2596  1845                     __pstringtext16:	
  2597  1845                     STR_13:	
  2598  1845  3450               	retlw	80	;'P'
  2599  1846  3449               	retlw	73	;'I'
  2600  1847  3443               	retlw	67	;'C'
  2601  1848  3442               	retlw	66	;'B'
  2602  1849  3400               	retlw	0
  2603                           
  2604                           	psect	stringtext17
  2605  184A                     __pstringtext17:	
  2606  184A                     STR_14:	
  2607  184A  3450               	retlw	80	;'P'
  2608  184B  3449               	retlw	73	;'I'
  2609  184C  3443               	retlw	67	;'C'
  2610  184D  3443               	retlw	67	;'C'
  2611  184E  3400               	retlw	0
  2612                           
  2613                           	psect	stringtext18
  2614  184F                     __pstringtext18:	
  2615  184F                     STR_15:	
  2616  184F  3450               	retlw	80	;'P'
  2617  1850  3449               	retlw	73	;'I'
  2618  1851  3443               	retlw	67	;'C'
  2619  1852  3444               	retlw	68	;'D'
  2620  1853  3400               	retlw	0
  2621                           
  2622                           	psect	stringtext19
  2623  1854                     __pstringtext19:	
  2624  1854                     STR_16:	
  2625  1854  3450               	retlw	80	;'P'
  2626  1855  3449               	retlw	73	;'I'
  2627  1856  3443               	retlw	67	;'C'
  2628  1857  3445               	retlw	69	;'E'
  2629  1858  3400               	retlw	0
  2630                           
  2631                           	psect	stringtext20
  2632  1859                     __pstringtext20:	
  2633  1859                     STR_17:	
  2634  1859  3450               	retlw	80	;'P'
  2635  185A  3449               	retlw	73	;'I'
  2636  185B  3443               	retlw	67	;'C'
  2637  185C  3447               	retlw	71	;'G'
  2638  185D  3400               	retlw	0
  2639                           
  2640                           	psect	stringtext21
  2641  1862                     __pstringtext21:	
  2642  1862                     STR_18:	
  2643  1862  3425               	retlw	37	;'%'
  2644  1863  3463               	retlw	99	;'c'
  2645  1864  3400               	retlw	0
  2646                           
  2647                           	psect	stringtext22
  2648  0000                     __pstringtext22:	
  2649                           
  2650                           ; #config settings
  2651  0000                     
  2652                           	psect	cinit
  2653  0018                     start_initialization:	
  2654  0018                     __initialization:	
  2655                           
  2656                           ; Initialize objects allocated to BANK0
  2657  0018  3188  2000  3180   	fcall	__pidataBANK0	;fetch initializer
  2658  001B  00EE               	movwf	__pdataBANK0& (0+127)
  2659                           
  2660                           ; Initialize objects allocated to BANK1
  2661  001C  30CF               	movlw	low __pidataBANK1
  2662  001D  0084               	movwf	4
  2663  001E  3094               	movlw	(high __pidataBANK1)| (0+128)
  2664  001F  0085               	movwf	5
  2665  0020  30BE               	movlw	low __pdataBANK1
  2666  0021  0086               	movwf	6
  2667  0022  3000               	movlw	high __pdataBANK1
  2668  0023  0087               	movwf	7
  2669  0024  300C               	movlw	12
  2670  0025  3194  247A  3180   	fcall	init_ram
  2671                           
  2672                           ; Initialize objects allocated to BANK2
  2673  0028  3001               	movlw	low __pidataBANK2
  2674  0029  0084               	movwf	4
  2675  002A  3088               	movlw	(high __pidataBANK2)| (0+128)
  2676  002B  0085               	movwf	5
  2677  002C  3020               	movlw	low __pdataBANK2
  2678  002D  0086               	movwf	6
  2679  002E  3001               	movlw	high __pdataBANK2
  2680  002F  0087               	movwf	7
  2681  0030  3024               	movlw	36
  2682  0031  3194  247A  3180   	fcall	init_ram
  2683                           
  2684                           ; Clear objects allocated to COMMON
  2685  0034  01FC               	clrf	__pbssCOMMON& (0+127)
  2686                           
  2687                           ; Clear objects allocated to BANK0
  2688  0035  305C               	movlw	low __pbssBANK0
  2689  0036  0084               	movwf	4
  2690  0037  3000               	movlw	high __pbssBANK0
  2691  0038  0085               	movwf	5
  2692  0039  3012               	movlw	18
  2693  003A  3194  2474  3180   	fcall	clear_ram0
  2694                           
  2695                           ; Clear objects allocated to BANK1
  2696  003D  30A0               	movlw	low __pbssBANK1
  2697  003E  0084               	movwf	4
  2698  003F  3000               	movlw	high __pbssBANK1
  2699  0040  0085               	movwf	5
  2700  0041  301E               	movlw	30
  2701  0042  3194  2474  3180   	fcall	clear_ram0
  2702                           
  2703                           ; Clear objects allocated to BANK2
  2704  0045  3044               	movlw	low __pbssBANK2
  2705  0046  0084               	movwf	4
  2706  0047  3001               	movlw	high __pbssBANK2
  2707  0048  0085               	movwf	5
  2708  0049  3020               	movlw	32
  2709  004A  3194  2474  3180   	fcall	clear_ram0
  2710                           
  2711                           ; Clear objects allocated to BANK3
  2712  004D  30A0               	movlw	low __pbssBANK3
  2713  004E  0084               	movwf	4
  2714  004F  3001               	movlw	high __pbssBANK3
  2715  0050  0085               	movwf	5
  2716  0051  3040               	movlw	64
  2717  0052  3194  2474         	fcall	clear_ram0
  2718  0054                     end_of_initialization:	
  2719                           ;End of C runtime variable initialization code
  2720                           
  2721  0054                     __end_of__initialization:	
  2722  0054  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2723  0055  0020               	movlb	0
  2724  0056  3182  2A22         	ljmp	_main	;jump to C main() function
  2725                           
  2726                           	psect	bssCOMMON
  2727  007C                     __pbssCOMMON:	
  2728  007C                     _eusartRxHead:	
  2729  007C                     	ds	1
  2730                           
  2731                           	psect	bssBANK0
  2732  005C                     __pbssBANK0:	
  2733  005C                     _packet_sample:	
  2734  005C                     	ds	4
  2735  0060                     _packet_noise:	
  2736  0060                     	ds	2
  2737  0062                     _last_touch_status:	
  2738  0062                     	ds	2
  2739  0064                     _sensor_globalFlags:	
  2740  0064                     	ds	1
  2741  0065                     _lowpowerActivated:	
  2742  0065                     	ds	1
  2743  0066                     _blink_count:	
  2744  0066                     	ds	1
  2745  0067                     _blink:	
  2746  0067                     	ds	1
  2747  0068                     _check_request:	
  2748  0068                     	ds	1
  2749  0069                     _config_status:	
  2750  0069                     	ds	1
  2751  006A                     _prcData:	
  2752  006A                     	ds	1
  2753  006B                     _rxData:	
  2754  006B                     	ds	1
  2755  006C                     _eusartRxCount:	
  2756  006C                     	ds	1
  2757  006D                     _eusartRxTail:	
  2758  006D                     	ds	1
  2759                           
  2760                           	psect	dataBANK0
  2761  006E                     __pdataBANK0:	
  2762  006E                     _sample_period:	
  2763  006E                     	ds	1
  2764                           
  2765                           	psect	bssBANK1
  2766  00A0                     __pbssBANK1:	
  2767  00A0                     _eusartRxStatusBuffer:	
  2768  00A0                     	ds	8
  2769  00A8                     _eusartRxBuffer:	
  2770  00A8                     	ds	8
  2771  00B0                     _nout:	
  2772  00B0                     	ds	2
  2773  00B2                     _width:	
  2774  00B2                     	ds	2
  2775  00B4                     _prec:	
  2776  00B4                     	ds	2
  2777  00B6                     _flags:	
  2778  00B6                     	ds	2
  2779  00B8                     _timeout_count:	
  2780  00B8                     	ds	2
  2781  00BA                     _count_conf:	
  2782  00BA                     	ds	2
  2783  00BC                     _mtouch_time_toScan:	
  2784  00BC                     	ds	1
  2785  00BD                     _eusartRxLastError:	
  2786  00BD                     	ds	1
  2787                           
  2788                           	psect	dataBANK1
  2789  00BE                     __pdataBANK1:	
  2790  00BE                     _Button_StateMachine:	
  2791  00BE                     	ds	6
  2792  00C4                     _callback_notPressed:	
  2793  00C4                     	ds	2
  2794  00C6                     _callback_pressed:	
  2795  00C6                     	ds	2
  2796  00C8                     _callback_sampled:	
  2797  00C8                     	ds	2
  2798                           
  2799                           	psect	bssBANK2
  2800  0144                     __pbssBANK2:	
  2801  0144                     _dbuf:	
  2802  0144                     	ds	32
  2803                           
  2804                           	psect	dataBANK2
  2805  0120                     __pdataBANK2:	
  2806  0120                     _mtouch_sensor:	
  2807  0120                     	ds	36
  2808                           
  2809                           	psect	bssBANK3
  2810  01A0                     __pbssBANK3:	
  2811  01A0                     _mtouch_button:	
  2812  01A0                     	ds	64
  2813                           
  2814                           	psect	inittext
  2815  147A                     init_ram:	
  2816  147A  00FE               	movwf	126
  2817  147B                     initloop:	
  2818  147B  0012               	moviw fsr0++
  2819  147C  001E               	movwi fsr1++
  2820  147D  0BFE               	decfsz	126,f
  2821  147E  2C7B               	goto	initloop
  2822  147F  3400               	retlw	0
  2823                           
  2824                           	psect	clrtext
  2825  1474                     clear_ram0:	
  2826                           ;	Called with FSR0 containing the base address, and
  2827                           ;	WREG with the size to clear
  2828                           
  2829  1474  0064               	clrwdt	;clear the watchdog before getting into this loop
  2830  1475                     clrloop0:	
  2831  1475  0180               	clrf	0	;clear RAM location pointed to by FSR
  2832  1476  3101               	addfsr 0,1
  2833  1477  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2834  1478  2C75               	goto	clrloop0	;have we reached the end yet?
  2835  1479  3400               	retlw	0	;all done for this memory range, return
  2836                           
  2837                           	psect	cstackBANK1
  2838  00D2                     __pcstackBANK1:	
  2839  00D2                     ??_main:	
  2840                           
  2841                           ; 1 bytes @ 0x0
  2842  00D2                     	ds	2
  2843                           
  2844                           	psect	cstackCOMMON
  2845  0070                     __pcstackCOMMON:	
  2846  0070                     ?_EUSART_Receive_ISR:	
  2847  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ?_EUSART_DefaultErrorHandler:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?_EUSART_RxDataHandler:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ??_EUSART_RxDataHandler:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_PIN_MANAGER_Initialize:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_OSCILLATOR_Initialize:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_WDT_Initialize:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_TMR2_Initialize:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_MTOUCH_Initialize:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_check_data:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_check_message:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_LED_PROCESS:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_DATA_PROCESS:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_MTOUCH_Service_Mainloop:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_MTOUCH_Button_isPressed:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_RELAY_PROCESS:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_update_state:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_MTOUCH_Button_InitializeAll:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_MTOUCH_Button_ServiceAll:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_MTOUCH_needReburst:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_MTOUCH_Tick:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_MTOUCH_Button_Tick:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_MTOUCH_Sensor_Enable:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_Sensor_Sampled_Reset:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_Sensor_Service:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_Sensor_isEnabled:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_Sensor_RawSample_Update:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_Sensor_setSampled:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_Sensor_postAcquisitionProcess:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_Sensor_isActive:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_Sensor_isCalibrated:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_Sensor_setActive:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_Sensor_setInactive:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_Sensor_isCalibratingAcqTime:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_Sensor_autoCalibration:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?_Sensor_setCalibratAcqTime:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_Sensor_setCalibrated:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ?_Button_Service:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     ?_Button_Reading_Update:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     ?_Button_Deviation_Update:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991  0070                     ?_Button_Baseline_Initialize:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0070                     ?_Button_Baseline_Update:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997  0070                     ?_Button_Tick_helper:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000  0070                     ?_Button_Reading_Update_Helper:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003  0070                     ?_EUSART_Initialize:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006  0070                     ?_EUSART_is_rx_ready:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009  0070                     ?_EUSART_Read:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0070                     ?_EUSART_Write:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0070                     ?_putch:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0070                     ?_INTERRUPT_InterruptManager:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0070                     ?_SYSTEM_Initialize:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0070                     ?_main:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0070                     ?_TMR2_StartTimer:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030  0070                     ?_TMR2_StopTimer:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0070                     ?_TMR2_LoadPeriodRegister:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0070                     ?_MTOUCH_Sensor_Initialize:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0070                     ?_Sensor_getScanGroupIndex:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0070                     ?_MTOUCH_Sensor_wasSampled:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0070                     ?_MTOUCH_Button_Initialize:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051                           
  3052                           ; 1 bytes @ 0x0
  3053  0070                     	ds	1
  3054  0071                     ?_EUSART_SetRxInterruptHandler:	
  3055  0071                     ??_EUSART_Receive_ISR:	
  3056                           ; 1 bytes @ 0x1
  3057                           
  3058  0071                     ?_EUSART_SetFramingErrorHandler:	
  3059                           ; 1 bytes @ 0x1
  3060                           
  3061  0071                     ?_EUSART_SetOverrunErrorHandler:	
  3062                           ; 1 bytes @ 0x1
  3063                           
  3064  0071                     ?_EUSART_SetErrorHandler:	
  3065                           ; 1 bytes @ 0x1
  3066                           
  3067  0071                     ??_EUSART_DefaultErrorHandler:	
  3068                           ; 1 bytes @ 0x1
  3069                           
  3070  0071                     ??_PIN_MANAGER_Initialize:	
  3071                           ; 1 bytes @ 0x1
  3072                           
  3073  0071                     ??_OSCILLATOR_Initialize:	
  3074                           ; 1 bytes @ 0x1
  3075                           
  3076  0071                     ??_WDT_Initialize:	
  3077                           ; 1 bytes @ 0x1
  3078                           
  3079  0071                     ??_TMR2_Initialize:	
  3080                           ; 1 bytes @ 0x1
  3081                           
  3082  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  3083                           ; 1 bytes @ 0x1
  3084                           
  3085  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3086                           ; 1 bytes @ 0x1
  3087                           
  3088  0071                     ??_check_data:	
  3089                           ; 1 bytes @ 0x1
  3090                           
  3091  0071                     ??_LED_PROCESS:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094  0071                     ??_MTOUCH_Button_isPressed:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0071                     ??_RELAY_PROCESS:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103  0071                     ??_MTOUCH_needReburst:	
  3104                           ; 1 bytes @ 0x1
  3105                           
  3106  0071                     ?_Sensor_DefaultCallback:	
  3107                           ; 1 bytes @ 0x1
  3108                           
  3109  0071                     ??_Sensor_Sampled_Reset:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0071                     ??_Sensor_isEnabled:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0071                     ??_Sensor_setSampled:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0071                     ??_Sensor_isActive:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0071                     ??_Sensor_isCalibrated:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0071                     ??_Sensor_setActive:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0071                     ??_Sensor_setInactive:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0071                     ??_Sensor_isCalibratingAcqTime:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133  0071                     ??_Sensor_setCalibratAcqTime:	
  3134                           ; 1 bytes @ 0x1
  3135                           
  3136  0071                     ??_Sensor_setCalibrated:	
  3137                           ; 1 bytes @ 0x1
  3138                           
  3139  0071                     ?_memcpy:	
  3140                           ; 1 bytes @ 0x1
  3141                           
  3142  0071                     ??_Button_Deviation_Update:	
  3143                           ; 1 bytes @ 0x1
  3144                           
  3145  0071                     ??_Button_Baseline_Update:	
  3146                           ; 1 bytes @ 0x1
  3147                           
  3148  0071                     ??_Button_Tick_helper:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0071                     ??_EUSART_is_rx_ready:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154  0071                     ??_EUSART_Read:	
  3155                           ; 1 bytes @ 0x1
  3156                           
  3157  0071                     ??_EUSART_Write:	
  3158                           ; 1 bytes @ 0x1
  3159                           
  3160  0071                     ??_INTERRUPT_InterruptManager:	
  3161                           ; 1 bytes @ 0x1
  3162                           
  3163  0071                     ??_TMR2_StartTimer:	
  3164                           ; 1 bytes @ 0x1
  3165                           
  3166  0071                     ??_TMR2_StopTimer:	
  3167                           ; 1 bytes @ 0x1
  3168                           
  3169  0071                     ??_TMR2_LoadPeriodRegister:	
  3170                           ; 1 bytes @ 0x1
  3171                           
  3172  0071                     ??_Sensor_getScanGroupIndex:	
  3173                           ; 1 bytes @ 0x1
  3174                           
  3175  0071                     ?___bmul:	
  3176                           ; 1 bytes @ 0x1
  3177                           
  3178  0071                     ?_abs:	
  3179                           ; 1 bytes @ 0x1
  3180                           
  3181  0071                     ?_strlen:	
  3182                           ; 2 bytes @ 0x1
  3183                           
  3184  0071                     EUSART_Write@txData:	
  3185                           ; 2 bytes @ 0x1
  3186                           
  3187  0071                     TMR2_LoadPeriodRegister@periodVal:	
  3188                           ; 1 bytes @ 0x1
  3189                           
  3190  0071                     Sensor_DefaultCallback@sensor:	
  3191                           ; 1 bytes @ 0x1
  3192                           
  3193  0071                     Sensor_setActive@sensor:	
  3194                           ; 1 bytes @ 0x1
  3195                           
  3196  0071                     Sensor_setInactive@sensor:	
  3197                           ; 1 bytes @ 0x1
  3198                           
  3199  0071                     Sensor_isActive@sensor:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0071                     Sensor_isCalibrated@sensor:	
  3203                           ; 1 bytes @ 0x1
  3204                           
  3205  0071                     Sensor_setCalibrated@sensor:	
  3206                           ; 1 bytes @ 0x1
  3207                           
  3208  0071                     Sensor_setCalibratAcqTime@sensor:	
  3209                           ; 1 bytes @ 0x1
  3210                           
  3211  0071                     Sensor_isCalibratingAcqTime@sensor:	
  3212                           ; 1 bytes @ 0x1
  3213                           
  3214  0071                     Sensor_Sampled_Reset@sensor:	
  3215                           ; 1 bytes @ 0x1
  3216                           
  3217  0071                     Sensor_setSampled@sensor:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220  0071                     ___bmul@multiplicand:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3224                           ; 1 bytes @ 0x1
  3225                           
  3226  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3227                           ; 2 bytes @ 0x1
  3228                           
  3229  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3230                           ; 2 bytes @ 0x1
  3231                           
  3232  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3233                           ; 2 bytes @ 0x1
  3234                           
  3235  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  3236                           ; 2 bytes @ 0x1
  3237                           
  3238  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3239                           ; 2 bytes @ 0x1
  3240                           
  3241  0071                     abs@a:	
  3242                           ; 2 bytes @ 0x1
  3243                           
  3244  0071                     memcpy@s1:	
  3245                           ; 2 bytes @ 0x1
  3246                           
  3247                           
  3248                           ; 2 bytes @ 0x1
  3249  0071                     	ds	1
  3250  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3251  0072                     ??_Sensor_DefaultCallback:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254  0072                     ??_putch:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257  0072                     ?_Sensor_loadADCSettings:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260  0072                     ??___bmul:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263  0072                     EUSART_Read@readValue:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266  0072                     putch@txData:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269  0072                     Sensor_loadADCSettings@adc_index:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272  0072                     Sensor_isEnabled@sensor:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275  0072                     MTOUCH_Button_isPressed@name:	
  3276                           ; 1 bytes @ 0x2
  3277                           
  3278                           
  3279                           ; 1 bytes @ 0x2
  3280  0072                     	ds	1
  3281  0073                     ??_EUSART_SetRxInterruptHandler:	
  3282  0073                     ??_EUSART_SetFramingErrorHandler:	
  3283                           ; 1 bytes @ 0x3
  3284                           
  3285  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3286                           ; 1 bytes @ 0x3
  3287                           
  3288  0073                     ??_EUSART_SetErrorHandler:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0073                     ??_abs:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0073                     ??_strlen:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0073                     ??_EUSART_Initialize:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0073                     ??_Sensor_loadADCSettings:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0073                     ?_fputc:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0073                     check_data@x:	
  3313                           ; 2 bytes @ 0x3
  3314                           
  3315  0073                     LED_PROCESS@x:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318  0073                     Sensor_getScanGroupIndex@sensor:	
  3319                           ; 1 bytes @ 0x3
  3320                           
  3321  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0073                     Button_Tick_helper@button:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0073                     RELAY_PROCESS@x:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0073                     ___bmul@product:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0073                     memcpy@n:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336  0073                     fputc@c:	
  3337                           ; 2 bytes @ 0x3
  3338                           
  3339                           
  3340                           ; 2 bytes @ 0x3
  3341  0073                     	ds	1
  3342  0074                     ??_myButtonPressedCallback:	
  3343  0074                     ??_MTOUCH_Button_Tick:	
  3344                           ; 1 bytes @ 0x4
  3345                           
  3346  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3347                           ; 1 bytes @ 0x4
  3348                           
  3349  0074                     ___bmul@multiplier:	
  3350                           ; 1 bytes @ 0x4
  3351                           
  3352  0074                     strlen@a:	
  3353                           ; 1 bytes @ 0x4
  3354                           
  3355                           
  3356                           ; 1 bytes @ 0x4
  3357  0074                     	ds	1
  3358  0075                     ??_MTOUCH_Sensor_Enable:	
  3359  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3360                           ; 1 bytes @ 0x5
  3361                           
  3362  0075                     ??_Sensor_RawSample_Update:	
  3363                           ; 1 bytes @ 0x5
  3364                           
  3365  0075                     ??_Sensor_postAcquisitionProcess:	
  3366                           ; 1 bytes @ 0x5
  3367                           
  3368  0075                     ??_Sensor_autoCalibration:	
  3369                           ; 1 bytes @ 0x5
  3370                           
  3371  0075                     ??_memcpy:	
  3372                           ; 1 bytes @ 0x5
  3373                           
  3374  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3375                           ; 1 bytes @ 0x5
  3376                           
  3377  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3378                           ; 1 bytes @ 0x5
  3379                           
  3380  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3381                           ; 1 bytes @ 0x5
  3382                           
  3383  0075                     MTOUCH_Button_Tick@i:	
  3384                           ; 2 bytes @ 0x5
  3385                           
  3386  0075                     fputc@fp:	
  3387                           ; 1 bytes @ 0x5
  3388                           
  3389  0075                     strlen@s:	
  3390                           ; 1 bytes @ 0x5
  3391                           
  3392                           
  3393                           ; 1 bytes @ 0x5
  3394  0075                     	ds	1
  3395  0076                     ??_MTOUCH_Tick:	
  3396  0076                     ??_fputc:	
  3397                           ; 1 bytes @ 0x6
  3398                           
  3399  0076                     Sensor_RawSample_Update@adcIndex:	
  3400                           ; 1 bytes @ 0x6
  3401                           
  3402  0076                     MTOUCH_Sensor_Enable@sensor:	
  3403                           ; 1 bytes @ 0x6
  3404                           
  3405  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3406                           ; 1 bytes @ 0x6
  3407                           
  3408  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3409                           ; 1 bytes @ 0x6
  3410                           
  3411  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3412                           ; 1 bytes @ 0x6
  3413                           
  3414  0076                     memcpy@tmp:	
  3415                           ; 1 bytes @ 0x6
  3416                           
  3417  0076                     Sensor_postAcquisitionProcess@deviation:	
  3418                           ; 1 bytes @ 0x6
  3419                           
  3420  0076                     _Sensor_loadADCSettings$1228:	
  3421                           ; 2 bytes @ 0x6
  3422                           
  3423                           
  3424                           ; 2 bytes @ 0x6
  3425  0076                     	ds	1
  3426  0077                     ??_MTOUCH_Sensor_Initialize:	
  3427  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3428                           ; 1 bytes @ 0x7
  3429                           
  3430  0077                     ??_MTOUCH_Button_Initialize:	
  3431                           ; 1 bytes @ 0x7
  3432                           
  3433  0077                     Sensor_RawSample_Update@sensor:	
  3434                           ; 1 bytes @ 0x7
  3435                           
  3436  0077                     Button_Baseline_Update@button:	
  3437                           ; 1 bytes @ 0x7
  3438                           
  3439  0077                     memcpy@s:	
  3440                           ; 1 bytes @ 0x7
  3441                           
  3442                           
  3443                           ; 2 bytes @ 0x7
  3444  0077                     	ds	1
  3445  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3446  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3447                           ; 1 bytes @ 0x8
  3448                           
  3449  0078                     Sensor_loadADCSettings@addressOffset:	
  3450                           ; 1 bytes @ 0x8
  3451                           
  3452  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3453                           ; 1 bytes @ 0x8
  3454                           
  3455                           
  3456                           ; 1 bytes @ 0x8
  3457  0078                     	ds	1
  3458  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3459  0079                     ??_Button_Reading_Update_Helper:	
  3460                           ; 1 bytes @ 0x9
  3461                           
  3462  0079                     Sensor_postAcquisitionProcess@sensor:	
  3463                           ; 1 bytes @ 0x9
  3464                           
  3465  0079                     Sensor_loadADCSettings@sensor:	
  3466                           ; 1 bytes @ 0x9
  3467                           
  3468  0079                     Sensor_autoCalibration@adcIndex:	
  3469                           ; 1 bytes @ 0x9
  3470                           
  3471  0079                     MTOUCH_Button_Initialize@name:	
  3472                           ; 1 bytes @ 0x9
  3473                           
  3474  0079                     Button_Baseline_Initialize@button:	
  3475                           ; 1 bytes @ 0x9
  3476                           
  3477  0079                     memcpy@d1:	
  3478                           ; 1 bytes @ 0x9
  3479                           
  3480                           
  3481                           ; 1 bytes @ 0x9
  3482  0079                     	ds	1
  3483  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3484  007A                     Sensor_autoCalibration@sensor:	
  3485                           ; 1 bytes @ 0xA
  3486                           
  3487  007A                     MTOUCH_Button_Initialize@button:	
  3488                           ; 1 bytes @ 0xA
  3489                           
  3490  007A                     memcpy@d:	
  3491                           ; 1 bytes @ 0xA
  3492                           
  3493                           
  3494                           ; 1 bytes @ 0xA
  3495  007A                     	ds	1
  3496  007B                     ??_MTOUCH_Button_InitializeAll:	
  3497  007B                     ?_Sensor_Acq_ExecutePacket:	
  3498                           ; 1 bytes @ 0xB
  3499                           
  3500  007B                     ?_fputs:	
  3501                           ; 1 bytes @ 0xB
  3502                           
  3503  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3504                           ; 2 bytes @ 0xB
  3505                           
  3506  007B                     Button_Reading_Update_Helper@button:	
  3507                           ; 1 bytes @ 0xB
  3508                           
  3509  007B                     fputs@fp:	
  3510                           ; 1 bytes @ 0xB
  3511                           
  3512                           
  3513                           ; 1 bytes @ 0xB
  3514  007B                     	ds	1
  3515  007C                     ??_MTOUCH_Initialize:	
  3516  007C                     ??_myButtonReleasedCallback:	
  3517                           ; 1 bytes @ 0xC
  3518                           
  3519  007C                     ??_update_state:	
  3520                           ; 1 bytes @ 0xC
  3521                           
  3522  007C                     ??_Button_DefaultCallback:	
  3523                           ; 1 bytes @ 0xC
  3524                           
  3525  007C                     ??_Button_Reading_Update:	
  3526                           ; 1 bytes @ 0xC
  3527                           
  3528  007C                     ??_SYSTEM_Initialize:	
  3529                           ; 1 bytes @ 0xC
  3530                           
  3531                           
  3532                           	psect	cstackBANK0
  3533  0020                     __pcstackBANK0:	
  3534                           ; 1 bytes @ 0xC
  3535                           
  3536  0020                     ??_Sensor_Acq_ExecutePacket:	
  3537  0020                     ??_Button_Baseline_Initialize:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540  0020                     ??_fputs:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0020                     MTOUCH_Button_InitializeAll@button:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0020                     Button_Deviation_Update@button:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549  0020                     Button_Reading_Update@button:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552                           
  3553                           ; 1 bytes @ 0x0
  3554  0020                     	ds	1
  3555  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3556  0021                     Button_Deviation_Update@deviation:	
  3557                           ; 1 bytes @ 0x1
  3558                           
  3559                           
  3560                           ; 4 bytes @ 0x1
  3561  0021                     	ds	1
  3562  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3563                           
  3564                           ; 1 bytes @ 0x2
  3565  0022                     	ds	1
  3566  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3567  0023                     fputs@c:	
  3568                           ; 1 bytes @ 0x3
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0x3
  3572  0023                     	ds	1
  3573  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3574  0024                     fputs@i:	
  3575                           ; 1 bytes @ 0x4
  3576                           
  3577                           
  3578                           ; 2 bytes @ 0x4
  3579  0024                     	ds	1
  3580  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3581                           
  3582                           ; 1 bytes @ 0x5
  3583  0025                     	ds	1
  3584  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3585  0026                     fputs@s:	
  3586                           ; 1 bytes @ 0x6
  3587                           
  3588                           
  3589                           ; 1 bytes @ 0x6
  3590  0026                     	ds	1
  3591  0027                     ?_pad:	
  3592  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3593                           ; 2 bytes @ 0x7
  3594                           
  3595  0027                     pad@buf:	
  3596                           ; 1 bytes @ 0x7
  3597                           
  3598                           
  3599                           ; 1 bytes @ 0x7
  3600  0027                     	ds	1
  3601  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3602  0028                     pad@p:	
  3603                           ; 2 bytes @ 0x8
  3604                           
  3605                           
  3606                           ; 2 bytes @ 0x8
  3607  0028                     	ds	2
  3608  002A                     ??_pad:	
  3609  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3610                           ; 1 bytes @ 0xA
  3611                           
  3612                           
  3613                           ; 2 bytes @ 0xA
  3614  002A                     	ds	1
  3615  002B                     pad@i:	
  3616                           
  3617                           ; 2 bytes @ 0xB
  3618  002B                     	ds	1
  3619  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3620                           
  3621                           ; 1 bytes @ 0xC
  3622  002C                     	ds	1
  3623  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3624  002D                     pad@w:	
  3625                           ; 1 bytes @ 0xD
  3626                           
  3627                           
  3628                           ; 2 bytes @ 0xD
  3629  002D                     	ds	1
  3630  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3631  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3632                           ; 1 bytes @ 0xE
  3633                           
  3634                           
  3635                           ; 1 bytes @ 0xE
  3636  002E                     	ds	1
  3637  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3638  002F                     pad@fp:	
  3639                           ; 1 bytes @ 0xF
  3640                           
  3641                           
  3642                           ; 1 bytes @ 0xF
  3643  002F                     	ds	1
  3644  0030                     ?_ctoa:	
  3645  0030                     ctoa@c:	
  3646                           ; 2 bytes @ 0x10
  3647                           
  3648                           
  3649                           ; 1 bytes @ 0x10
  3650  0030                     	ds	1
  3651  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3652                           
  3653                           ; 1 bytes @ 0x11
  3654  0031                     	ds	1
  3655  0032                     ??_ctoa:	
  3656  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3657                           ; 1 bytes @ 0x12
  3658                           
  3659                           
  3660                           ; 2 bytes @ 0x12
  3661  0032                     	ds	1
  3662  0033                     ctoa@w:	
  3663                           
  3664                           ; 2 bytes @ 0x13
  3665  0033                     	ds	1
  3666  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3667                           
  3668                           ; 1 bytes @ 0x14
  3669  0034                     	ds	1
  3670  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3671  0035                     ctoa@fp:	
  3672                           ; 1 bytes @ 0x15
  3673                           
  3674                           
  3675                           ; 1 bytes @ 0x15
  3676  0035                     	ds	1
  3677  0036                     ?_vfpfcnvrt:	
  3678  0036                     vfpfcnvrt@fmt:	
  3679                           ; 2 bytes @ 0x16
  3680                           
  3681  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3682                           ; 1 bytes @ 0x16
  3683                           
  3684                           
  3685                           ; 4 bytes @ 0x16
  3686  0036                     	ds	1
  3687  0037                     vfpfcnvrt@ap:	
  3688                           
  3689                           ; 1 bytes @ 0x17
  3690  0037                     	ds	1
  3691  0038                     ??_vfpfcnvrt:	
  3692                           
  3693                           ; 1 bytes @ 0x18
  3694  0038                     	ds	2
  3695  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3696                           
  3697                           ; 1 bytes @ 0x1A
  3698  003A                     	ds	1
  3699  003B                     ?_Sensor_Acquisition:	
  3700  003B                     Sensor_Acquisition@sensor_adc2:	
  3701                           ; 1 bytes @ 0x1B
  3702                           
  3703                           
  3704                           ; 1 bytes @ 0x1B
  3705  003B                     	ds	1
  3706  003C                     ??_Sensor_Acquisition:	
  3707                           
  3708                           ; 1 bytes @ 0x1C
  3709  003C                     	ds	1
  3710  003D                     Sensor_Acquisition@retry:	
  3711  003D                     vfpfcnvrt@c:	
  3712                           ; 1 bytes @ 0x1D
  3713                           
  3714                           
  3715                           ; 1 bytes @ 0x1D
  3716  003D                     	ds	1
  3717  003E                     Sensor_Acquisition@sensor_adc1:	
  3718  003E                     vfpfcnvrt@fp:	
  3719                           ; 1 bytes @ 0x1E
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x1E
  3723  003E                     	ds	1
  3724  003F                     ??_Sensor_Service:	
  3725  003F                     ?_vfprintf:	
  3726                           ; 1 bytes @ 0x1F
  3727                           
  3728  003F                     vfprintf@fmt:	
  3729                           ; 2 bytes @ 0x1F
  3730                           
  3731                           
  3732                           ; 2 bytes @ 0x1F
  3733  003F                     	ds	2
  3734  0041                     vfprintf@ap:	
  3735                           
  3736                           ; 1 bytes @ 0x21
  3737  0041                     	ds	1
  3738  0042                     ??_vfprintf:	
  3739  0042                     Sensor_Service@scanGroup:	
  3740                           ; 1 bytes @ 0x22
  3741                           
  3742                           
  3743                           ; 1 bytes @ 0x22
  3744  0042                     	ds	1
  3745  0043                     Sensor_Service@error:	
  3746                           
  3747                           ; 1 bytes @ 0x23
  3748  0043                     	ds	1
  3749  0044                     Sensor_Service@sensor_adc1:	
  3750  0044                     vfprintf@fp:	
  3751                           ; 1 bytes @ 0x24
  3752                           
  3753                           
  3754                           ; 1 bytes @ 0x24
  3755  0044                     	ds	1
  3756  0045                     Sensor_Service@sensor_adc2:	
  3757  0045                     vfprintf@cfmt:	
  3758                           ; 1 bytes @ 0x25
  3759                           
  3760                           
  3761                           ; 2 bytes @ 0x25
  3762  0045                     	ds	1
  3763  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3764                           
  3765                           ; 1 bytes @ 0x26
  3766  0046                     	ds	1
  3767  0047                     ?_printf:	
  3768  0047                     MTOUCH_Sensor_SampleAll@group:	
  3769                           ; 2 bytes @ 0x27
  3770                           
  3771  0047                     printf@fmt:	
  3772                           ; 1 bytes @ 0x27
  3773                           
  3774                           
  3775                           ; 2 bytes @ 0x27
  3776  0047                     	ds	4
  3777  004B                     ??_printf:	
  3778                           
  3779                           ; 1 bytes @ 0x2B
  3780  004B                     	ds	3
  3781  004E                     printf@ap:	
  3782                           
  3783                           ; 1 bytes @ 0x2E
  3784  004E                     	ds	1
  3785  004F                     ?_myButtonPressedCallback:	
  3786  004F                     ?_myButtonReleasedCallback:	
  3787                           ; 1 bytes @ 0x2F
  3788                           
  3789  004F                     ??_check_message:	
  3790                           ; 1 bytes @ 0x2F
  3791                           
  3792  004F                     ??_DATA_PROCESS:	
  3793                           ; 1 bytes @ 0x2F
  3794                           
  3795  004F                     ?_Button_DefaultCallback:	
  3796                           ; 1 bytes @ 0x2F
  3797                           
  3798  004F                     myButtonPressedCallback@button:	
  3799                           ; 1 bytes @ 0x2F
  3800                           
  3801  004F                     myButtonReleasedCallback@button:	
  3802                           ; 1 bytes @ 0x2F
  3803                           
  3804  004F                     Button_DefaultCallback@button:	
  3805                           ; 1 bytes @ 0x2F
  3806                           
  3807                           
  3808                           ; 1 bytes @ 0x2F
  3809  004F                     	ds	1
  3810  0050                     ?_Button_State_Initializing:	
  3811  0050                     ?_Button_State_NotPressed:	
  3812                           ; 1 bytes @ 0x30
  3813                           
  3814  0050                     ?_Button_State_Pressed:	
  3815                           ; 1 bytes @ 0x30
  3816                           
  3817  0050                     Button_State_Initializing@button:	
  3818                           ; 1 bytes @ 0x30
  3819                           
  3820  0050                     Button_State_NotPressed@button:	
  3821                           ; 1 bytes @ 0x30
  3822                           
  3823  0050                     Button_State_Pressed@button:	
  3824                           ; 1 bytes @ 0x30
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0x30
  3828  0050                     	ds	1
  3829  0051                     ??_Button_State_Initializing:	
  3830  0051                     ??_Button_State_NotPressed:	
  3831                           ; 1 bytes @ 0x31
  3832                           
  3833  0051                     ??_Button_State_Pressed:	
  3834                           ; 1 bytes @ 0x31
  3835                           
  3836  0051                     DATA_PROCESS@x:	
  3837                           ; 1 bytes @ 0x31
  3838                           
  3839  0051                     check_message@x:	
  3840                           ; 1 bytes @ 0x31
  3841                           
  3842                           
  3843                           ; 1 bytes @ 0x31
  3844  0051                     	ds	4
  3845  0055                     ??_Button_Service:	
  3846                           
  3847                           ; 1 bytes @ 0x35
  3848  0055                     	ds	2
  3849  0057                     Button_Service@name:	
  3850                           
  3851                           ; 1 bytes @ 0x37
  3852  0057                     	ds	1
  3853  0058                     Button_Service@button:	
  3854                           
  3855                           ; 1 bytes @ 0x38
  3856  0058                     	ds	1
  3857  0059                     ??_MTOUCH_Button_ServiceAll:	
  3858                           
  3859                           ; 1 bytes @ 0x39
  3860  0059                     	ds	1
  3861  005A                     MTOUCH_Button_ServiceAll@button:	
  3862                           
  3863                           ; 1 bytes @ 0x3A
  3864  005A                     	ds	1
  3865  005B                     ??_MTOUCH_Service_Mainloop:	
  3866                           
  3867                           ; 1 bytes @ 0x3B
  3868  005B                     	ds	1
  3869                           
  3870                           	psect	maintext
  3871  0222                     __pmaintext:	
  3872 ;;
  3873 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3874 ;;
  3875 ;; *************** function _main *****************
  3876 ;; Defined at:
  3877 ;;		line 17 in file "main.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : B1F/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3891 ;;      Params:         0       0       0       0       0       0       0       0
  3892 ;;      Locals:         0       0       0       0       0       0       0       0
  3893 ;;      Temps:          0       0       2       0       0       0       0       0
  3894 ;;      Totals:         0       0       2       0       0       0       0       0
  3895 ;;Total ram usage:        2 bytes
  3896 ;; Hardware stack levels required when called:   19
  3897 ;; This function calls:
  3898 ;;		_DATA_PROCESS
  3899 ;;		_EUSART_Read
  3900 ;;		_EUSART_is_rx_ready
  3901 ;;		_LED_PROCESS
  3902 ;;		_MTOUCH_Button_SetNotPressedCallback
  3903 ;;		_MTOUCH_Button_SetPressedCallback
  3904 ;;		_MTOUCH_Button_isPressed
  3905 ;;		_MTOUCH_Service_Mainloop
  3906 ;;		_SYSTEM_Initialize
  3907 ;;		_check_data
  3908 ;;		_check_message
  3909 ;;		_printf
  3910 ;; This function is called by:
  3911 ;;		Startup code after reset
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           
  3916                           ;psect for function _main
  3917  0222                     _main:	
  3918                           
  3919                           ;main.c: 19:     SYSTEM_Initialize();
  3920                           
  3921                           ;incstack = 0
  3922 ;; hardware stack exceeded
  3923                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3924  0222  3195  25A8  3182   	fcall	_SYSTEM_Initialize
  3925                           
  3926                           ;main.c: 20:     (INTCONbits.GIE = 1);
  3927  0225  178B               	bsf	11,7	;volatile
  3928                           
  3929                           ;main.c: 21:     (INTCONbits.PEIE = 1);
  3930  0226  170B               	bsf	11,6	;volatile
  3931                           
  3932                           ;main.c: 22:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3933  0227  3080               	movlw	low _myButtonPressedCallback
  3934  0228  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3935  0229  3008               	movlw	high _myButtonPressedCallback
  3936  022A  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3937  022B  3194  2450  3182   	fcall	_MTOUCH_Button_SetPressedCallback
  3938                           
  3939                           ;main.c: 23:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3940  022E  30F3               	movlw	low _myButtonReleasedCallback
  3941  022F  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3942  0230  3016               	movlw	high _myButtonReleasedCallback
  3943  0231  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3944  0232  3194  244A  3182   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3945  0235  0022               	movlb	2	; select bank2
  3946  0236  110C               	bcf	12,2	;volatile
  3947                           
  3948                           ;main.c: 25:     last_touch_status.full_status = 0x00;
  3949  0237  0020               	movlb	0	; select bank0
  3950  0238  01E2               	clrf	_last_touch_status
  3951  0239  01E3               	clrf	_last_touch_status+1
  3952  023A                     l6704:	
  3953                           
  3954                           ;main.c: 27:     {;main.c: 28:         if(EUSART_is_rx_ready())
  3955  023A  3194  242C  3182   	fcall	_EUSART_is_rx_ready
  3956  023D  3A00               	xorlw	0
  3957  023E  1903               	skipnz
  3958  023F  2B2A               	goto	l6766
  3959                           
  3960                           ;main.c: 29:         {;main.c: 30:             rxData = EUSART_Read();
  3961  0240  3197  2738  3182   	fcall	_EUSART_Read
  3962  0243  0021               	movlb	1	; select bank1
  3963  0244  00D2               	movwf	??_main^(0+128)
  3964  0245  0852               	movf	??_main^(0+128),w
  3965  0246  0020               	movlb	0	; select bank0
  3966  0247  00EB               	movwf	_rxData
  3967                           
  3968                           ;main.c: 31:             if(check_data(rxData))
  3969  0248  086B               	movf	_rxData,w
  3970  0249  318A  2213  3182   	fcall	_check_data
  3971  024C  3A00               	xorlw	0
  3972  024D  1903               	skipnz
  3973  024E  2B2A               	goto	l6766
  3974                           
  3975                           ;main.c: 32:             {;main.c: 33:                 if(check_request == 0)
  3976  024F  0020               	movlb	0	; select bank0
  3977  0250  0868               	movf	_check_request,w
  3978  0251  1D03               	btfss	3,2
  3979  0252  2A5E               	goto	l6716
  3980                           
  3981                           ;main.c: 34:                 {;main.c: 35:                     prcData = rxData;
  3982  0253  086B               	movf	_rxData,w
  3983  0254  0021               	movlb	1	; select bank1
  3984  0255  00D2               	movwf	??_main^(0+128)
  3985  0256  0852               	movf	??_main^(0+128),w
  3986  0257  0020               	movlb	0	; select bank0
  3987  0258  00EA               	movwf	_prcData
  3988                           
  3989                           ;main.c: 36:                     check_message(rxData);
  3990  0259  086B               	movf	_rxData,w
  3991  025A  3197  2786  3182   	fcall	_check_message
  3992                           
  3993                           ;main.c: 37:                 }
  3994  025D  2B2A               	goto	l6766
  3995  025E                     l6716:	
  3996                           
  3997                           ;main.c: 39:                 {;main.c: 40:                     if(config_status == 1)
  3998  025E  0369               	decf	_config_status,w
  3999  025F  1D03               	btfss	3,2
  4000  0260  2B1D               	goto	l6758
  4001                           
  4002                           ;main.c: 41:                     {;main.c: 42:                         if(rxData == 'T')
  4003  0261  3054               	movlw	84
  4004  0262  066B               	xorwf	_rxData,w
  4005  0263  1D03               	btfss	3,2
  4006  0264  2ABE               	goto	l6738
  4007                           
  4008                           ;main.c: 43:                         {;main.c: 44:                             LED_PROCE
      +                          SS(15);
  4009  0265  300F               	movlw	15
  4010  0266  318E  26C6  3182   	fcall	_LED_PROCESS
  4011                           
  4012                           ;main.c: 45:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4013  0269  3015               	movlw	21
  4014  026A  0021               	movlb	1	; select bank1
  4015  026B  00D3               	movwf	(??_main^(0+128)+1)
  4016  026C  304B               	movlw	75
  4017  026D  00D2               	movwf	??_main^(0+128)
  4018  026E  30BE               	movlw	190
  4019  026F                     u5517:	
  4020  026F  0B89               	decfsz	9,f
  4021  0270  2A6F               	goto	u5517
  4022  0271  0BD2               	decfsz	??_main^(0+128),f
  4023  0272  2A6F               	goto	u5517
  4024  0273  0BD3               	decfsz	(??_main^(0+128)+1),f
  4025  0274  2A6F               	goto	u5517
  4026  0275  0000               	nop
  4027                           
  4028                           ;main.c: 46:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4029  0276  3015               	movlw	21
  4030  0277  0021               	movlb	1	; select bank1
  4031  0278  00D3               	movwf	(??_main^(0+128)+1)
  4032  0279  304B               	movlw	75
  4033  027A  00D2               	movwf	??_main^(0+128)
  4034  027B  30BE               	movlw	190
  4035  027C                     u5527:	
  4036  027C  0B89               	decfsz	9,f
  4037  027D  2A7C               	goto	u5527
  4038  027E  0BD2               	decfsz	??_main^(0+128),f
  4039  027F  2A7C               	goto	u5527
  4040  0280  0BD3               	decfsz	(??_main^(0+128)+1),f
  4041  0281  2A7C               	goto	u5527
  4042  0282  0000               	nop
  4043                           
  4044                           ;main.c: 47:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4045  0283  3015               	movlw	21
  4046  0284  0021               	movlb	1	; select bank1
  4047  0285  00D3               	movwf	(??_main^(0+128)+1)
  4048  0286  304B               	movlw	75
  4049  0287  00D2               	movwf	??_main^(0+128)
  4050  0288  30BE               	movlw	190
  4051  0289                     u5537:	
  4052  0289  0B89               	decfsz	9,f
  4053  028A  2A89               	goto	u5537
  4054  028B  0BD2               	decfsz	??_main^(0+128),f
  4055  028C  2A89               	goto	u5537
  4056  028D  0BD3               	decfsz	(??_main^(0+128)+1),f
  4057  028E  2A89               	goto	u5537
  4058  028F  0000               	nop
  4059                           
  4060                           ;main.c: 48:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4061  0290  3015               	movlw	21
  4062  0291  0021               	movlb	1	; select bank1
  4063  0292  00D3               	movwf	(??_main^(0+128)+1)
  4064  0293  304B               	movlw	75
  4065  0294  00D2               	movwf	??_main^(0+128)
  4066  0295  30BE               	movlw	190
  4067  0296                     u5547:	
  4068  0296  0B89               	decfsz	9,f
  4069  0297  2A96               	goto	u5547
  4070  0298  0BD2               	decfsz	??_main^(0+128),f
  4071  0299  2A96               	goto	u5547
  4072  029A  0BD3               	decfsz	(??_main^(0+128)+1),f
  4073  029B  2A96               	goto	u5547
  4074  029C  0000               	nop
  4075                           
  4076                           ;main.c: 49:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4077  029D  3015               	movlw	21
  4078  029E  0021               	movlb	1	; select bank1
  4079  029F  00D3               	movwf	(??_main^(0+128)+1)
  4080  02A0  304B               	movlw	75
  4081  02A1  00D2               	movwf	??_main^(0+128)
  4082  02A2  30BE               	movlw	190
  4083  02A3                     u5557:	
  4084  02A3  0B89               	decfsz	9,f
  4085  02A4  2AA3               	goto	u5557
  4086  02A5  0BD2               	decfsz	??_main^(0+128),f
  4087  02A6  2AA3               	goto	u5557
  4088  02A7  0BD3               	decfsz	(??_main^(0+128)+1),f
  4089  02A8  2AA3               	goto	u5557
  4090  02A9  0000               	nop
  4091                           
  4092                           ;main.c: 50:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4093  02AA  3015               	movlw	21
  4094  02AB  0021               	movlb	1	; select bank1
  4095  02AC  00D3               	movwf	(??_main^(0+128)+1)
  4096  02AD  304B               	movlw	75
  4097  02AE  00D2               	movwf	??_main^(0+128)
  4098  02AF  30BE               	movlw	190
  4099  02B0                     u5567:	
  4100  02B0  0B89               	decfsz	9,f
  4101  02B1  2AB0               	goto	u5567
  4102  02B2  0BD2               	decfsz	??_main^(0+128),f
  4103  02B3  2AB0               	goto	u5567
  4104  02B4  0BD3               	decfsz	(??_main^(0+128)+1),f
  4105  02B5  2AB0               	goto	u5567
  4106  02B6  0000               	nop
  4107                           
  4108                           ;main.c: 51:                             config_status = 0;
  4109  02B7  0020               	movlb	0	; select bank0
  4110  02B8  01E9               	clrf	_config_status
  4111                           
  4112                           ;main.c: 52:                             check_request = 0;
  4113  02B9  01E8               	clrf	_check_request
  4114                           
  4115                           ;main.c: 53:                             LED_PROCESS(last_touch_status.full_status);
  4116  02BA  0862               	movf	_last_touch_status,w
  4117  02BB  318E  26C6  3182   	fcall	_LED_PROCESS
  4118  02BE                     l6738:	
  4119                           
  4120                           ;main.c: 55:                         if(rxData == 'F')
  4121  02BE  3046               	movlw	70
  4122  02BF  0020               	movlb	0	; select bank0
  4123  02C0  066B               	xorwf	_rxData,w
  4124  02C1  1D03               	btfss	3,2
  4125  02C2  2B2A               	goto	l6766
  4126                           
  4127                           ;main.c: 56:                         {;main.c: 57:                             LED_PROCE
      +                          SS(0);
  4128  02C3  3000               	movlw	0
  4129  02C4  318E  26C6  3182   	fcall	_LED_PROCESS
  4130                           
  4131                           ;main.c: 58:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4132  02C7  3015               	movlw	21
  4133  02C8  0021               	movlb	1	; select bank1
  4134  02C9  00D3               	movwf	(??_main^(0+128)+1)
  4135  02CA  304B               	movlw	75
  4136  02CB  00D2               	movwf	??_main^(0+128)
  4137  02CC  30BE               	movlw	190
  4138  02CD                     u5577:	
  4139  02CD  0B89               	decfsz	9,f
  4140  02CE  2ACD               	goto	u5577
  4141  02CF  0BD2               	decfsz	??_main^(0+128),f
  4142  02D0  2ACD               	goto	u5577
  4143  02D1  0BD3               	decfsz	(??_main^(0+128)+1),f
  4144  02D2  2ACD               	goto	u5577
  4145  02D3  0000               	nop
  4146                           
  4147                           ;main.c: 59:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4148  02D4  3015               	movlw	21
  4149  02D5  0021               	movlb	1	; select bank1
  4150  02D6  00D3               	movwf	(??_main^(0+128)+1)
  4151  02D7  304B               	movlw	75
  4152  02D8  00D2               	movwf	??_main^(0+128)
  4153  02D9  30BE               	movlw	190
  4154  02DA                     u5587:	
  4155  02DA  0B89               	decfsz	9,f
  4156  02DB  2ADA               	goto	u5587
  4157  02DC  0BD2               	decfsz	??_main^(0+128),f
  4158  02DD  2ADA               	goto	u5587
  4159  02DE  0BD3               	decfsz	(??_main^(0+128)+1),f
  4160  02DF  2ADA               	goto	u5587
  4161  02E0  0000               	nop
  4162                           
  4163                           ;main.c: 60:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4164  02E1  3015               	movlw	21
  4165  02E2  0021               	movlb	1	; select bank1
  4166  02E3  00D3               	movwf	(??_main^(0+128)+1)
  4167  02E4  304B               	movlw	75
  4168  02E5  00D2               	movwf	??_main^(0+128)
  4169  02E6  30BE               	movlw	190
  4170  02E7                     u5597:	
  4171  02E7  0B89               	decfsz	9,f
  4172  02E8  2AE7               	goto	u5597
  4173  02E9  0BD2               	decfsz	??_main^(0+128),f
  4174  02EA  2AE7               	goto	u5597
  4175  02EB  0BD3               	decfsz	(??_main^(0+128)+1),f
  4176  02EC  2AE7               	goto	u5597
  4177  02ED  0000               	nop
  4178                           
  4179                           ;main.c: 61:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4180  02EE  3015               	movlw	21
  4181  02EF  0021               	movlb	1	; select bank1
  4182  02F0  00D3               	movwf	(??_main^(0+128)+1)
  4183  02F1  304B               	movlw	75
  4184  02F2  00D2               	movwf	??_main^(0+128)
  4185  02F3  30BE               	movlw	190
  4186  02F4                     u5607:	
  4187  02F4  0B89               	decfsz	9,f
  4188  02F5  2AF4               	goto	u5607
  4189  02F6  0BD2               	decfsz	??_main^(0+128),f
  4190  02F7  2AF4               	goto	u5607
  4191  02F8  0BD3               	decfsz	(??_main^(0+128)+1),f
  4192  02F9  2AF4               	goto	u5607
  4193  02FA  0000               	nop
  4194                           
  4195                           ;main.c: 62:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4196  02FB  3015               	movlw	21
  4197  02FC  0021               	movlb	1	; select bank1
  4198  02FD  00D3               	movwf	(??_main^(0+128)+1)
  4199  02FE  304B               	movlw	75
  4200  02FF  00D2               	movwf	??_main^(0+128)
  4201  0300  30BE               	movlw	190
  4202  0301                     u5617:	
  4203  0301  0B89               	decfsz	9,f
  4204  0302  2B01               	goto	u5617
  4205  0303  0BD2               	decfsz	??_main^(0+128),f
  4206  0304  2B01               	goto	u5617
  4207  0305  0BD3               	decfsz	(??_main^(0+128)+1),f
  4208  0306  2B01               	goto	u5617
  4209  0307  0000               	nop
  4210                           
  4211                           ;main.c: 63:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4212  0308  3015               	movlw	21
  4213  0309  0021               	movlb	1	; select bank1
  4214  030A  00D3               	movwf	(??_main^(0+128)+1)
  4215  030B  304B               	movlw	75
  4216  030C  00D2               	movwf	??_main^(0+128)
  4217  030D  30BE               	movlw	190
  4218  030E                     u5627:	
  4219  030E  0B89               	decfsz	9,f
  4220  030F  2B0E               	goto	u5627
  4221  0310  0BD2               	decfsz	??_main^(0+128),f
  4222  0311  2B0E               	goto	u5627
  4223  0312  0BD3               	decfsz	(??_main^(0+128)+1),f
  4224  0313  2B0E               	goto	u5627
  4225  0314  0000               	nop
  4226                           
  4227                           ;main.c: 64:                             config_status = 0;
  4228  0315  0020               	movlb	0	; select bank0
  4229  0316  01E9               	clrf	_config_status
  4230                           
  4231                           ;main.c: 65:                             check_request = 0;
  4232  0317  01E8               	clrf	_check_request
  4233                           
  4234                           ;main.c: 66:                             LED_PROCESS(last_touch_status.full_status);
  4235  0318  0862               	movf	_last_touch_status,w
  4236  0319  318E  26C6  3182   	fcall	_LED_PROCESS
  4237  031C  2B2A               	goto	l6766
  4238  031D                     l6758:	
  4239                           
  4240                           ;main.c: 70:                     {;main.c: 71:                         if(rxData == 'T')
  4241  031D  3054               	movlw	84
  4242  031E  066B               	xorwf	_rxData,w
  4243  031F  1D03               	btfss	3,2
  4244  0320  2B25               	goto	l6762
  4245                           
  4246                           ;main.c: 72:                         {;main.c: 73:                             DATA_PROC
      +                          ESS(prcData);
  4247  0321  086A               	movf	_prcData,w
  4248  0322  3183  23D4  3182   	fcall	_DATA_PROCESS
  4249  0325                     l6762:	
  4250                           
  4251                           ;main.c: 75:                         if(rxData == 'F')
  4252  0325  3046               	movlw	70
  4253  0326  0020               	movlb	0	; select bank0
  4254  0327  066B               	xorwf	_rxData,w
  4255  0328  1903               	btfsc	3,2
  4256                           
  4257                           ;main.c: 76:                         {;main.c: 77:                             check_req
      +                          uest = 0;
  4258  0329  01E8               	clrf	_check_request
  4259  032A                     l6766:	
  4260                           ;main.c: 81:             }
  4261                           
  4262                           
  4263                           ;main.c: 83:         if(MTOUCH_Service_Mainloop())
  4264  032A  3196  26B9  3182   	fcall	_MTOUCH_Service_Mainloop
  4265  032D  3A00               	xorlw	0
  4266  032E  1903               	skipnz
  4267  032F  2A3A               	goto	l6704
  4268                           
  4269                           ;main.c: 84:         {;main.c: 85:             if(config_status == 0)
  4270  0330  0020               	movlb	0	; select bank0
  4271  0331  0869               	movf	_config_status,w
  4272  0332  1D03               	btfss	3,2
  4273  0333  2B89               	goto	l6806
  4274                           
  4275                           ;main.c: 86:             {;main.c: 87:                 if(check_request == 1)
  4276  0334  0368               	decf	_check_request,w
  4277  0335  1D03               	btfss	3,2
  4278  0336  2B45               	goto	l6778
  4279                           
  4280                           ;main.c: 88:                 {;main.c: 89:                     timeout_count++;
  4281  0337  3001               	movlw	1
  4282  0338  0021               	movlb	1	; select bank1
  4283  0339  07B8               	addwf	_timeout_count^(0+128),f
  4284  033A  3000               	movlw	0
  4285  033B  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4286                           
  4287                           ;main.c: 90:                     if(timeout_count == 20)
  4288  033C  3014               	movlw	20
  4289  033D  0638               	xorwf	_timeout_count^(0+128),w
  4290  033E  0439               	iorwf	(_timeout_count+1)^(0+128),w
  4291  033F  1D03               	btfss	3,2
  4292  0340  2B45               	goto	l6778
  4293                           
  4294                           ;main.c: 91:                     {;main.c: 92:                         timeout_count = 0
      +                          ;
  4295  0341  01B8               	clrf	_timeout_count^(0+128)
  4296  0342  01B9               	clrf	(_timeout_count+1)^(0+128)
  4297                           
  4298                           ;main.c: 93:                         check_request = 0;
  4299  0343  0020               	movlb	0	; select bank0
  4300  0344  01E8               	clrf	_check_request
  4301  0345                     l6778:	
  4302                           
  4303                           ;main.c: 96:                 if(MTOUCH_Button_isPressed(0) == 1 && MTOUCH_Button_isPress
      +                          ed(1) == 0 && MTOUCH_Button_isPressed(2) == 0&& MTOUCH_Button_isPressed(3) == 1)
  4304  0345  3000               	movlw	0
  4305  0346  3196  2682  3182   	fcall	_MTOUCH_Button_isPressed
  4306  0349  3A01               	xorlw	1
  4307  034A  1D03               	skipz
  4308  034B  2B85               	goto	l6804
  4309  034C  3001               	movlw	1
  4310  034D  3196  2682  3182   	fcall	_MTOUCH_Button_isPressed
  4311  0350  3A00               	xorlw	0
  4312  0351  1D03               	skipz
  4313  0352  2B85               	goto	l6804
  4314  0353  3002               	movlw	2
  4315  0354  3196  2682  3182   	fcall	_MTOUCH_Button_isPressed
  4316  0357  3A00               	xorlw	0
  4317  0358  1D03               	skipz
  4318  0359  2B85               	goto	l6804
  4319  035A  3003               	movlw	3
  4320  035B  3196  2682  3182   	fcall	_MTOUCH_Button_isPressed
  4321  035E  3A01               	xorlw	1
  4322  035F  1D03               	skipz
  4323  0360  2B85               	goto	l6804
  4324                           
  4325                           ;main.c: 97:                 {;main.c: 98:                     count_conf++;
  4326  0361  3001               	movlw	1
  4327  0362  0021               	movlb	1	; select bank1
  4328  0363  07BA               	addwf	_count_conf^(0+128),f
  4329  0364  3000               	movlw	0
  4330  0365  3DBB               	addwfc	(_count_conf+1)^(0+128),f
  4331                           
  4332                           ;main.c: 99:                     if(count_conf == 1500)
  4333  0366  30DC               	movlw	220
  4334  0367  063A               	xorwf	_count_conf^(0+128),w
  4335  0368  3005               	movlw	5
  4336  0369  1903               	skipnz
  4337  036A  063B               	xorwf	(_count_conf+1)^(0+128),w
  4338  036B  1D03               	btfss	3,2
  4339  036C  2A3A               	goto	l6704
  4340                           
  4341                           ;main.c: 100:                     {;main.c: 101:                         count_conf = 0;
  4342  036D  01BA               	clrf	_count_conf^(0+128)
  4343  036E  01BB               	clrf	(_count_conf+1)^(0+128)
  4344                           
  4345                           ;main.c: 102:                         printf("PICSMART");
  4346  036F  3000               	movlw	low (STR_1| (0+32768))
  4347  0370  0020               	movlb	0	; select bank0
  4348  0371  00C7               	movwf	printf@fmt
  4349  0372  3098               	movlw	high (STR_1| (0+32768))
  4350  0373  00C8               	movwf	printf@fmt+1
  4351  0374  3195  2551  3182   	fcall	_printf
  4352                           
  4353                           ;main.c: 103:                         config_status = 1;
  4354  0377  0020               	movlb	0	; select bank0
  4355  0378  01E9               	clrf	_config_status
  4356  0379  0AE9               	incf	_config_status,f
  4357                           
  4358                           ;main.c: 104:                         check_request = 1;
  4359  037A  01E8               	clrf	_check_request
  4360  037B  0AE8               	incf	_check_request,f
  4361                           
  4362                           ;main.c: 105:                         timeout_count = 0;
  4363  037C  0021               	movlb	1	; select bank1
  4364  037D  01B8               	clrf	_timeout_count^(0+128)
  4365  037E  01B9               	clrf	(_timeout_count+1)^(0+128)
  4366                           
  4367                           ;main.c: 106:                         LED_PROCESS(0);
  4368  037F  3000               	movlw	0
  4369  0380  318E  26C6  3182   	fcall	_LED_PROCESS
  4370                           
  4371                           ;main.c: 107:                         blink = 0;
  4372  0383  0020               	movlb	0	; select bank0
  4373  0384  2BD2               	goto	L1
  4374  0385                     l6804:	
  4375                           
  4376                           ;main.c: 111:                 {;main.c: 112:                     count_conf = 0;
  4377  0385  0021               	movlb	1	; select bank1
  4378  0386  01BA               	clrf	_count_conf^(0+128)
  4379  0387  01BB               	clrf	(_count_conf+1)^(0+128)
  4380  0388  2A3A               	goto	l6704
  4381  0389                     l6806:	
  4382                           
  4383                           ;main.c: 116:             {;main.c: 117:                 if(check_request == 1)
  4384  0389  0368               	decf	_check_request,w
  4385  038A  1D03               	btfss	3,2
  4386  038B  2BB2               	goto	l6824
  4387                           
  4388                           ;main.c: 118:                 {;main.c: 119:                     timeout_count++;
  4389  038C  3001               	movlw	1
  4390  038D  0021               	movlb	1	; select bank1
  4391  038E  07B8               	addwf	_timeout_count^(0+128),f
  4392  038F  3000               	movlw	0
  4393  0390  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4394                           
  4395                           ;main.c: 120:                     if(timeout_count > 30000)
  4396  0391  3075               	movlw	117
  4397  0392  0239               	subwf	(_timeout_count+1)^(0+128),w
  4398  0393  3031               	movlw	49
  4399  0394  1903               	skipnz
  4400  0395  0238               	subwf	_timeout_count^(0+128),w
  4401  0396  1C03               	skipc
  4402  0397  2BB2               	goto	l6824
  4403                           
  4404                           ;main.c: 121:                     {;main.c: 123:                         LED_PROCESS(0);
  4405  0398  3000               	movlw	0
  4406  0399  318E  26C6  3182   	fcall	_LED_PROCESS
  4407                           
  4408                           ;main.c: 124:                         timeout_count++;
  4409  039C  3001               	movlw	1
  4410  039D  0021               	movlb	1	; select bank1
  4411  039E  07B8               	addwf	_timeout_count^(0+128),f
  4412  039F  3000               	movlw	0
  4413  03A0  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4414                           
  4415                           ;main.c: 125:                         if(timeout_count >= 32000)
  4416  03A1  307D               	movlw	125
  4417  03A2  0239               	subwf	(_timeout_count+1)^(0+128),w
  4418  03A3  3000               	movlw	0
  4419  03A4  1903               	skipnz
  4420  03A5  0238               	subwf	_timeout_count^(0+128),w
  4421  03A6  1C03               	skipc
  4422  03A7  2BB2               	goto	l6824
  4423                           
  4424                           ;main.c: 126:                         {;main.c: 127:                             timeout
      +                          _count = 0;
  4425  03A8  01B8               	clrf	_timeout_count^(0+128)
  4426  03A9  01B9               	clrf	(_timeout_count+1)^(0+128)
  4427                           
  4428                           ;main.c: 128:                             LED_PROCESS(last_touch_status.full_status);
  4429  03AA  0020               	movlb	0	; select bank0
  4430  03AB  0862               	movf	_last_touch_status,w
  4431  03AC  318E  26C6  3182   	fcall	_LED_PROCESS
  4432                           
  4433                           ;main.c: 129:                             check_request = 0;
  4434  03AF  0020               	movlb	0	; select bank0
  4435  03B0  01E8               	clrf	_check_request
  4436                           
  4437                           ;main.c: 130:                             config_status = 0;
  4438  03B1  01E9               	clrf	_config_status
  4439  03B2                     l6824:	
  4440                           
  4441                           ;main.c: 135:                 blink_count++;
  4442  03B2  3001               	movlw	1
  4443  03B3  0021               	movlb	1	; select bank1
  4444  03B4  00D2               	movwf	??_main^(0+128)
  4445  03B5  0852               	movf	??_main^(0+128),w
  4446  03B6  0020               	movlb	0	; select bank0
  4447  03B7  07E6               	addwf	_blink_count,f
  4448                           
  4449                           ;main.c: 136:                 if(blink == 0)
  4450  03B8  0867               	movf	_blink,w
  4451  03B9  1D03               	btfss	3,2
  4452  03BA  2BC8               	goto	l6836
  4453                           
  4454                           ;main.c: 137:                 {;main.c: 138:                     LED_PROCESS(0);
  4455  03BB  3000               	movlw	0
  4456  03BC  318E  26C6  3182   	fcall	_LED_PROCESS
  4457                           
  4458                           ;main.c: 139:                     if(blink_count == 200)
  4459  03BF  30C8               	movlw	200
  4460  03C0  0020               	movlb	0	; select bank0
  4461  03C1  0666               	xorwf	_blink_count,w
  4462  03C2  1D03               	btfss	3,2
  4463  03C3  2A3A               	goto	l6704
  4464                           
  4465                           ;main.c: 140:                     {;main.c: 141:                         blink_count = 0
      +                          ;
  4466  03C4  01E6               	clrf	_blink_count
  4467                           
  4468                           ;main.c: 142:                         blink = 1;
  4469  03C5  01E7               	clrf	_blink
  4470  03C6  0AE7               	incf	_blink,f
  4471  03C7  2A3A               	goto	l6704
  4472  03C8                     l6836:	
  4473                           
  4474                           ;main.c: 146:                 {;main.c: 147:                     LED_PROCESS(15);
  4475  03C8  300F               	movlw	15
  4476  03C9  318E  26C6  3182   	fcall	_LED_PROCESS
  4477                           
  4478                           ;main.c: 148:                     if(blink_count == 200)
  4479  03CC  30C8               	movlw	200
  4480  03CD  0020               	movlb	0	; select bank0
  4481  03CE  0666               	xorwf	_blink_count,w
  4482  03CF  1D03               	btfss	3,2
  4483  03D0  2A3A               	goto	l6704
  4484                           
  4485                           ;main.c: 149:                     {;main.c: 150:                         blink_count = 0
      +                          ;
  4486  03D1  01E6               	clrf	_blink_count
  4487  03D2                     L1:	
  4488                           
  4489                           ;main.c: 151:                         blink = 0;
  4490  03D2  01E7               	clrf	_blink
  4491                           
  4492                           ;main.c: 155:         }
  4493  03D3  2A3A               	goto	l6704
  4494  03D4                     __end_of_main:	
  4495                           
  4496                           	psect	text1
  4497  1786                     __ptext1:	
  4498 ;; *************** function _check_message *****************
  4499 ;; Defined at:
  4500 ;;		line 351 in file "main.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  x               1    wreg     unsigned char 
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;  x               1   49[BANK0 ] unsigned char 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      void 
  4507 ;; Registers used:
  4508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4514 ;;      Params:         0       0       0       0       0       0       0       0
  4515 ;;      Locals:         0       1       0       0       0       0       0       0
  4516 ;;      Temps:          0       2       0       0       0       0       0       0
  4517 ;;      Totals:         0       3       0       0       0       0       0       0
  4518 ;;Total ram usage:        3 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:   13
  4521 ;; This function calls:
  4522 ;;		_printf
  4523 ;; This function is called by:
  4524 ;;		_main
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           
  4529                           ;psect for function _check_message
  4530  1786                     _check_message:	
  4531                           
  4532                           ;incstack = 0
  4533                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4534                           ;check_message@x stored from wreg
  4535  1786  0020               	movlb	0	; select bank0
  4536  1787  00D1               	movwf	check_message@x
  4537                           
  4538                           ;main.c: 351: void check_message(uint8_t x);main.c: 352: {;main.c: 353:     switch (x)
  4539  1788  2F9C               	goto	l6526
  4540  1789                     l6516:	
  4541                           
  4542                           ;main.c: 356:         {;main.c: 357:             check_request = 0;
  4543  1789  01E8               	clrf	_check_request
  4544                           
  4545                           ;main.c: 358:             break;
  4546  178A  0008               	return
  4547  178B                     l6520:	
  4548                           
  4549                           ;main.c: 366:         {;main.c: 367:             printf("%c",x);
  4550  178B  3062               	movlw	low (STR_18| (0+32768))
  4551  178C  00C7               	movwf	printf@fmt
  4552  178D  3098               	movlw	high (STR_18| (0+32768))
  4553  178E  00C8               	movwf	printf@fmt+1
  4554  178F  0851               	movf	check_message@x,w
  4555  1790  00CF               	movwf	??_check_message
  4556  1791  01D0               	clrf	??_check_message+1
  4557  1792  084F               	movf	??_check_message,w
  4558  1793  00C9               	movwf	?_printf+2
  4559  1794  0850               	movf	??_check_message+1,w
  4560  1795  00CA               	movwf	?_printf+3
  4561  1796  3195  2551         	fcall	_printf
  4562                           
  4563                           ;main.c: 368:             check_request = 1;
  4564  1798  0020               	movlb	0	; select bank0
  4565  1799  01E8               	clrf	_check_request
  4566  179A  0AE8               	incf	_check_request,f
  4567                           
  4568                           ;main.c: 369:             break;
  4569  179B  0008               	return
  4570  179C                     l6526:	
  4571  179C  0851               	movf	check_message@x,w
  4572  179D  00CF               	movwf	??_check_message
  4573  179E  01D0               	clrf	??_check_message+1
  4574                           
  4575                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4576                           ; Switch size 1, requested type "simple"
  4577                           ; Number of cases is 1, Range of values is 0 to 0
  4578                           ; switch strategies available:
  4579                           ; Name         Instructions Cycles
  4580                           ; simple_byte            4     3 (average)
  4581                           ; direct_byte            8     6 (fixed)
  4582                           ; jumptable            260     6 (fixed)
  4583                           ;	Chosen strategy is simple_byte
  4584  179F  0850               	movf	??_check_message+1,w
  4585  17A0  3A00               	xorlw	0	; case 0
  4586  17A1  1903               	skipnz
  4587  17A2  2FA4               	goto	l7096
  4588  17A3  2F8B               	goto	l6520
  4589  17A4                     l7096:	
  4590                           
  4591                           ; Switch size 1, requested type "simple"
  4592                           ; Number of cases is 2, Range of values is 70 to 84
  4593                           ; switch strategies available:
  4594                           ; Name         Instructions Cycles
  4595                           ; simple_byte            7     4 (average)
  4596                           ; direct_byte           39     9 (fixed)
  4597                           ; jumptable            263     9 (fixed)
  4598                           ;	Chosen strategy is simple_byte
  4599  17A4  084F               	movf	??_check_message,w
  4600  17A5  3A46               	xorlw	70	; case 70
  4601  17A6  1903               	skipnz
  4602  17A7  2F89               	goto	l6516
  4603  17A8  3A12               	xorlw	18	; case 84
  4604  17A9  1903               	skipnz
  4605  17AA  2F89               	goto	l6516
  4606  17AB  2F8B               	goto	l6520
  4607  17AC  0008               	return
  4608  17AD                     __end_of_check_message:	
  4609                           
  4610                           	psect	text2
  4611  0A13                     __ptext2:	
  4612 ;; *************** function _check_data *****************
  4613 ;; Defined at:
  4614 ;;		line 373 in file "main.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;  x               1    wreg     unsigned char 
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;  x               1    3[COMMON] unsigned char 
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  1    wreg      _Bool 
  4621 ;; Registers used:
  4622 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4628 ;;      Params:         0       0       0       0       0       0       0       0
  4629 ;;      Locals:         1       0       0       0       0       0       0       0
  4630 ;;      Temps:          2       0       0       0       0       0       0       0
  4631 ;;      Totals:         3       0       0       0       0       0       0       0
  4632 ;;Total ram usage:        3 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    4
  4635 ;; This function calls:
  4636 ;;		Nothing
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _check_data
  4644  0A13                     _check_data:	
  4645                           
  4646                           ;incstack = 0
  4647                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  4648                           ;check_data@x stored from wreg
  4649  0A13  00F3               	movwf	check_data@x
  4650                           
  4651                           ;main.c: 373: _Bool check_data(uint8_t x);main.c: 374: {;main.c: 375:     switch(x)
  4652  0A14  2A19               	goto	l5164
  4653  0A15                     l5082:	
  4654  0A15  3001               	movlw	1
  4655  0A16  0008               	return
  4656  0A17                     l5158:	
  4657  0A17  3000               	movlw	0
  4658  0A18  0008               	return
  4659  0A19                     l5164:	
  4660  0A19  0873               	movf	check_data@x,w
  4661  0A1A  00F1               	movwf	??_check_data
  4662  0A1B  01F2               	clrf	??_check_data+1
  4663                           
  4664                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4665                           ; Switch size 1, requested type "simple"
  4666                           ; Number of cases is 1, Range of values is 0 to 0
  4667                           ; switch strategies available:
  4668                           ; Name         Instructions Cycles
  4669                           ; simple_byte            4     3 (average)
  4670                           ; direct_byte            8     6 (fixed)
  4671                           ; jumptable            260     6 (fixed)
  4672                           ;	Chosen strategy is simple_byte
  4673  0A1C  0872               	movf	??_check_data+1,w
  4674  0A1D  3A00               	xorlw	0	; case 0
  4675  0A1E  1903               	skipnz
  4676  0A1F  2A21               	goto	l7098
  4677  0A20  2A17               	goto	l5158
  4678  0A21                     l7098:	
  4679                           
  4680                           ; Switch size 1, requested type "simple"
  4681                           ; Number of cases is 19, Range of values is 48 to 85
  4682                           ; switch strategies available:
  4683                           ; Name         Instructions Cycles
  4684                           ; simple_byte           58    30 (average)
  4685                           ; direct_byte           85     9 (fixed)
  4686                           ; jumptable            263     9 (fixed)
  4687                           ;	Chosen strategy is simple_byte
  4688  0A21  0871               	movf	??_check_data,w
  4689  0A22  3A30               	xorlw	48	; case 48
  4690  0A23  1903               	skipnz
  4691  0A24  2A15               	goto	l5082
  4692  0A25  3A01               	xorlw	1	; case 49
  4693  0A26  1903               	skipnz
  4694  0A27  2A15               	goto	l5082
  4695  0A28  3A03               	xorlw	3	; case 50
  4696  0A29  1903               	skipnz
  4697  0A2A  2A15               	goto	l5082
  4698  0A2B  3A01               	xorlw	1	; case 51
  4699  0A2C  1903               	skipnz
  4700  0A2D  2A15               	goto	l5082
  4701  0A2E  3A07               	xorlw	7	; case 52
  4702  0A2F  1903               	skipnz
  4703  0A30  2A15               	goto	l5082
  4704  0A31  3A01               	xorlw	1	; case 53
  4705  0A32  1903               	skipnz
  4706  0A33  2A15               	goto	l5082
  4707  0A34  3A03               	xorlw	3	; case 54
  4708  0A35  1903               	skipnz
  4709  0A36  2A15               	goto	l5082
  4710  0A37  3A01               	xorlw	1	; case 55
  4711  0A38  1903               	skipnz
  4712  0A39  2A15               	goto	l5082
  4713  0A3A  3A0F               	xorlw	15	; case 56
  4714  0A3B  1903               	skipnz
  4715  0A3C  2A15               	goto	l5082
  4716  0A3D  3A01               	xorlw	1	; case 57
  4717  0A3E  1903               	skipnz
  4718  0A3F  2A15               	goto	l5082
  4719  0A40  3A78               	xorlw	120	; case 65
  4720  0A41  1903               	skipnz
  4721  0A42  2A15               	goto	l5082
  4722  0A43  3A03               	xorlw	3	; case 66
  4723  0A44  1903               	skipnz
  4724  0A45  2A15               	goto	l5082
  4725  0A46  3A01               	xorlw	1	; case 67
  4726  0A47  1903               	skipnz
  4727  0A48  2A15               	goto	l5082
  4728  0A49  3A07               	xorlw	7	; case 68
  4729  0A4A  1903               	skipnz
  4730  0A4B  2A15               	goto	l5082
  4731  0A4C  3A01               	xorlw	1	; case 69
  4732  0A4D  1903               	skipnz
  4733  0A4E  2A15               	goto	l5082
  4734  0A4F  3A03               	xorlw	3	; case 70
  4735  0A50  1903               	skipnz
  4736  0A51  2A15               	goto	l5082
  4737  0A52  3A01               	xorlw	1	; case 71
  4738  0A53  1903               	skipnz
  4739  0A54  2A15               	goto	l5082
  4740  0A55  3A13               	xorlw	19	; case 84
  4741  0A56  1903               	skipnz
  4742  0A57  2A15               	goto	l5082
  4743  0A58  3A01               	xorlw	1	; case 85
  4744  0A59  1903               	skipnz
  4745  0A5A  2A15               	goto	l5082
  4746  0A5B  2A17               	goto	l5158
  4747  0A5C  0008               	return
  4748  0A5D                     __end_of_check_data:	
  4749                           
  4750                           	psect	text3
  4751  15A8                     __ptext3:	
  4752 ;; *************** function _SYSTEM_Initialize *****************
  4753 ;; Defined at:
  4754 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4768 ;;      Params:         0       0       0       0       0       0       0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    9
  4775 ;; This function calls:
  4776 ;;		_EUSART_Initialize
  4777 ;;		_MTOUCH_Initialize
  4778 ;;		_OSCILLATOR_Initialize
  4779 ;;		_PIN_MANAGER_Initialize
  4780 ;;		_TMR2_Initialize
  4781 ;;		_WDT_Initialize
  4782 ;; This function is called by:
  4783 ;;		_main
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           
  4788                           ;psect for function _SYSTEM_Initialize
  4789  15A8                     _SYSTEM_Initialize:	
  4790                           
  4791                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4792                           
  4793                           ;incstack = 0
  4794                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4795  15A8  3196  26D6  3195   	fcall	_PIN_MANAGER_Initialize
  4796                           
  4797                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4798  15AB  3194  246E  3195   	fcall	_OSCILLATOR_Initialize
  4799                           
  4800                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4801  15AE  3194  243C  3195   	fcall	_WDT_Initialize
  4802                           
  4803                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  4804  15B1  3194  24A8  3195   	fcall	_TMR2_Initialize
  4805                           
  4806                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  4807  15B4  3189  210D  3195   	fcall	_EUSART_Initialize
  4808                           
  4809                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  4810  15B7  3194  24C3         	fcall	_MTOUCH_Initialize
  4811  15B9  0008               	return
  4812  15BA                     __end_of_SYSTEM_Initialize:	
  4813                           
  4814                           	psect	text4
  4815  143C                     __ptext4:	
  4816 ;; *************** function _WDT_Initialize *****************
  4817 ;; Defined at:
  4818 ;;		line 69 in file "mcc_generated_files/mcc.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;		None
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      void 
  4825 ;; Registers used:
  4826 ;;		wreg
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4832 ;;      Params:         0       0       0       0       0       0       0       0
  4833 ;;      Locals:         0       0       0       0       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0       0       0       0
  4835 ;;      Totals:         0       0       0       0       0       0       0       0
  4836 ;;Total ram usage:        0 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    4
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_SYSTEM_Initialize
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           
  4847                           ;psect for function _WDT_Initialize
  4848  143C                     _WDT_Initialize:	
  4849                           
  4850                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _WDT_Initialize: [wreg]
  4854  143C  3016               	movlw	22
  4855  143D  0021               	movlb	1	; select bank1
  4856  143E  0097               	movwf	23	;volatile
  4857  143F  0008               	return
  4858  1440                     __end_of_WDT_Initialize:	
  4859                           
  4860                           	psect	text5
  4861  14A8                     __ptext5:	
  4862 ;; *************** function _TMR2_Initialize *****************
  4863 ;; Defined at:
  4864 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;		None
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4878 ;;      Params:         0       0       0       0       0       0       0       0
  4879 ;;      Locals:         0       0       0       0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0
  4881 ;;      Totals:         0       0       0       0       0       0       0       0
  4882 ;;Total ram usage:        0 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    4
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		_SYSTEM_Initialize
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           
  4893                           ;psect for function _TMR2_Initialize
  4894  14A8                     _TMR2_Initialize:	
  4895                           
  4896                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4897                           
  4898                           ;incstack = 0
  4899                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4900  14A8  30FF               	movlw	255
  4901  14A9  0020               	movlb	0	; select bank0
  4902  14AA  009B               	movwf	27	;volatile
  4903                           
  4904                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4905  14AB  019A               	clrf	26	;volatile
  4906                           
  4907                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4908  14AC  1091               	bcf	17,1	;volatile
  4909                           
  4910                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4911  14AD  3004               	movlw	4
  4912  14AE  009C               	movwf	28	;volatile
  4913  14AF  0008               	return
  4914  14B0                     __end_of_TMR2_Initialize:	
  4915                           
  4916                           	psect	text6
  4917  16D6                     __ptext6:	
  4918 ;; *************** function _PIN_MANAGER_Initialize *****************
  4919 ;; Defined at:
  4920 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;		None
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;		None
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg, status,2
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4934 ;;      Params:         0       0       0       0       0       0       0       0
  4935 ;;      Locals:         0       0       0       0       0       0       0       0
  4936 ;;      Temps:          0       0       0       0       0       0       0       0
  4937 ;;      Totals:         0       0       0       0       0       0       0       0
  4938 ;;Total ram usage:        0 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:    4
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_SYSTEM_Initialize
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _PIN_MANAGER_Initialize
  4950  16D6                     _PIN_MANAGER_Initialize:	
  4951                           
  4952                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4956  16D6  3037               	movlw	55
  4957  16D7  0022               	movlb	2	; select bank2
  4958  16D8  008C               	movwf	12	;volatile
  4959                           
  4960                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0xC0;
  4961  16D9  30C0               	movlw	192
  4962  16DA  008D               	movwf	13	;volatile
  4963                           
  4964                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xBF;
  4965  16DB  30BF               	movlw	191
  4966  16DC  008E               	movwf	14	;volatile
  4967                           
  4968                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  4969  16DD  3008               	movlw	8
  4970  16DE  0021               	movlb	1	; select bank1
  4971  16DF  008C               	movwf	12	;volatile
  4972                           
  4973                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  4974  16E0  3020               	movlw	32
  4975  16E1  008D               	movwf	13	;volatile
  4976                           
  4977                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  4978  16E2  3040               	movlw	64
  4979  16E3  008E               	movwf	14	;volatile
  4980                           
  4981                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE8;
  4982  16E4  30E8               	movlw	232
  4983  16E5  0023               	movlb	3	; select bank3
  4984  16E6  008E               	movwf	14	;volatile
  4985                           
  4986                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  4987  16E7  3040               	movlw	64
  4988  16E8  008D               	movwf	13	;volatile
  4989                           
  4990                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  4991  16E9  3037               	movlw	55
  4992  16EA  008C               	movwf	12	;volatile
  4993                           
  4994                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4995  16EB  0024               	movlb	4	; select bank4
  4996  16EC  018D               	clrf	13	;volatile
  4997                           
  4998                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4999  16ED  018C               	clrf	12	;volatile
  5000                           
  5001                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  5002  16EE  0021               	movlb	1	; select bank1
  5003  16EF  1795               	bsf	21,7	;volatile
  5004                           
  5005                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  5006  16F0  0022               	movlb	2	; select bank2
  5007  16F1  019D               	clrf	29	;volatile
  5008  16F2  0008               	return
  5009  16F3                     __end_of_PIN_MANAGER_Initialize:	
  5010                           
  5011                           	psect	text7
  5012  146E                     __ptext7:	
  5013 ;; *************** function _OSCILLATOR_Initialize *****************
  5014 ;; Defined at:
  5015 ;;		line 61 in file "mcc_generated_files/mcc.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;		None
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;		None
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  1    wreg      void 
  5022 ;; Registers used:
  5023 ;;		wreg, status,2
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5029 ;;      Params:         0       0       0       0       0       0       0       0
  5030 ;;      Locals:         0       0       0       0       0       0       0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0
  5032 ;;      Totals:         0       0       0       0       0       0       0       0
  5033 ;;Total ram usage:        0 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    4
  5036 ;; This function calls:
  5037 ;;		Nothing
  5038 ;; This function is called by:
  5039 ;;		_SYSTEM_Initialize
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           
  5044                           ;psect for function _OSCILLATOR_Initialize
  5045  146E                     _OSCILLATOR_Initialize:	
  5046                           
  5047                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5051  146E  30F0               	movlw	240
  5052  146F  0021               	movlb	1	; select bank1
  5053  1470  0099               	movwf	25	;volatile
  5054                           
  5055                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  5056  1471  0022               	movlb	2	; select bank2
  5057  1472  0196               	clrf	22	;volatile
  5058  1473  0008               	return
  5059  1474                     __end_of_OSCILLATOR_Initialize:	
  5060                           
  5061                           	psect	text8
  5062  14C3                     __ptext8:	
  5063 ;; *************** function _MTOUCH_Initialize *****************
  5064 ;; Defined at:
  5065 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;		None
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;		None
  5070 ;; Return value:  Size  Location     Type
  5071 ;;                  1    wreg      void 
  5072 ;; Registers used:
  5073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5079 ;;      Params:         0       0       0       0       0       0       0       0
  5080 ;;      Locals:         0       0       0       0       0       0       0       0
  5081 ;;      Temps:          0       0       0       0       0       0       0       0
  5082 ;;      Totals:         0       0       0       0       0       0       0       0
  5083 ;;Total ram usage:        0 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; Hardware stack levels required when called:    8
  5086 ;; This function calls:
  5087 ;;		_MTOUCH_Button_InitializeAll
  5088 ;;		_MTOUCH_Sensor_InitializeAll
  5089 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5090 ;;		_MTOUCH_Sensor_Scan_Initialize
  5091 ;; This function is called by:
  5092 ;;		_SYSTEM_Initialize
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           
  5097                           ;psect for function _MTOUCH_Initialize
  5098  14C3                     _MTOUCH_Initialize:	
  5099                           
  5100                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  5101                           
  5102                           ;incstack = 0
  5103                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5104  14C3  3195  2505  3194   	fcall	_MTOUCH_Sensor_InitializeAll
  5105                           
  5106                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  5107  14C6  3196  269D  3194   	fcall	_MTOUCH_Button_InitializeAll
  5108                           
  5109                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  5110  14C9  3195  25BA  3194   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5111                           
  5112                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  5113  14CC  3195  2541         	fcall	_MTOUCH_Sensor_Scan_Initialize
  5114  14CE  0008               	return
  5115  14CF                     __end_of_MTOUCH_Initialize:	
  5116                           
  5117                           	psect	text9
  5118  1505                     __ptext9:	
  5119 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  5120 ;; Defined at:
  5121 ;;		line 231 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;		None
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;  sensor          1   10[COMMON] enum E2854
  5126 ;; Return value:  Size  Location     Type
  5127 ;;                  1    wreg      void 
  5128 ;; Registers used:
  5129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5130 ;; Tracked objects:
  5131 ;;		On entry : 0/0
  5132 ;;		On exit  : 0/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5135 ;;      Params:         0       0       0       0       0       0       0       0
  5136 ;;      Locals:         1       0       0       0       0       0       0       0
  5137 ;;      Temps:          1       0       0       0       0       0       0       0
  5138 ;;      Totals:         2       0       0       0       0       0       0       0
  5139 ;;Total ram usage:        2 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    7
  5142 ;; This function calls:
  5143 ;;		_MTOUCH_Sensor_Initialize
  5144 ;; This function is called by:
  5145 ;;		_MTOUCH_Initialize
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function _MTOUCH_Sensor_InitializeAll
  5151  1505                     _MTOUCH_Sensor_InitializeAll:	
  5152                           
  5153                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 233:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 235:     for (sensor = 0; sensor < 4u; sensor
      +                          ++)
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  5157  1505  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  5158  1506                     l6396:	
  5159                           
  5160                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 236:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 237:         MTOUCH_Sensor_Initialize(sensor);
  5161  1506  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  5162  1507  3195  25CD  3195   	fcall	_MTOUCH_Sensor_Initialize
  5163                           
  5164                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 238:     }
  5165  150A  3001               	movlw	1
  5166  150B  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  5167  150C  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  5168  150D  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  5169  150E  3004               	movlw	4
  5170  150F  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  5171  1510  1803               	btfsc	3,0
  5172  1511  0008               	return
  5173  1512  2D06               	goto	l6396
  5174  1513                     __end_of_MTOUCH_Sensor_InitializeAll:	
  5175                           
  5176                           	psect	text10
  5177  15CD                     __ptext10:	
  5178 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  5179 ;; Defined at:
  5180 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  sensor          1    wreg     enum E2854
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  sensor          1    8[COMMON] enum E2854
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      enum E2859
  5187 ;; Registers used:
  5188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5194 ;;      Params:         0       0       0       0       0       0       0       0
  5195 ;;      Locals:         1       0       0       0       0       0       0       0
  5196 ;;      Temps:          1       0       0       0       0       0       0       0
  5197 ;;      Totals:         2       0       0       0       0       0       0       0
  5198 ;;Total ram usage:        2 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    6
  5201 ;; This function calls:
  5202 ;;		_MTOUCH_Sensor_Calibrate
  5203 ;;		_MTOUCH_Sensor_Enable
  5204 ;;		_Sensor_Sampled_Reset
  5205 ;;		___bmul
  5206 ;; This function is called by:
  5207 ;;		_MTOUCH_Sensor_InitializeAll
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           
  5212                           ;psect for function _MTOUCH_Sensor_Initialize
  5213  15CD                     _MTOUCH_Sensor_Initialize:	
  5214                           
  5215                           ;incstack = 0
  5216                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5217                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  5218  15CD  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  5219                           
  5220                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 216: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           217: {;mcc_generated_files/mtouch/mtouch_sensor.c: 219:     MTOUCH_Sensor_Enable(sensor
      +                          );
  5221  15CE  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5222  15CF  3195  2596  3195   	fcall	_MTOUCH_Sensor_Enable
  5223                           
  5224                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 220:     MTOUCH_Sensor_Calibrate(sensor);
  5225  15D2  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5226  15D3  3195  2584  3195   	fcall	_MTOUCH_Sensor_Calibrate
  5227                           
  5228                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 221:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  5229  15D6  3009               	movlw	9
  5230  15D7  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  5231  15D8  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  5232  15D9  00F1               	movwf	___bmul@multiplicand
  5233  15DA  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5234  15DB  3195  2562  3195   	fcall	___bmul
  5235  15DE  3E20               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  5236  15DF  3194  24A0         	fcall	_Sensor_Sampled_Reset
  5237  15E1  0008               	return
  5238  15E2                     __end_of_MTOUCH_Sensor_Initialize:	
  5239                           
  5240                           	psect	text11
  5241  1596                     __ptext11:	
  5242 ;; *************** function _MTOUCH_Sensor_Enable *****************
  5243 ;; Defined at:
  5244 ;;		line 849 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  sensor          1    wreg     enum E2854
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  sensor          1    6[COMMON] enum E2854
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5258 ;;      Params:         0       0       0       0       0       0       0       0
  5259 ;;      Locals:         1       0       0       0       0       0       0       0
  5260 ;;      Temps:          1       0       0       0       0       0       0       0
  5261 ;;      Totals:         2       0       0       0       0       0       0       0
  5262 ;;Total ram usage:        2 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:    5
  5265 ;; This function calls:
  5266 ;;		___bmul
  5267 ;; This function is called by:
  5268 ;;		_MTOUCH_Sensor_Initialize
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           
  5273                           ;psect for function _MTOUCH_Sensor_Enable
  5274  1596                     _MTOUCH_Sensor_Enable:	
  5275                           
  5276                           ;incstack = 0
  5277                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5278                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  5279  1596  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  5280                           
  5281                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 849: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 850: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 851:     if(sensor < 4u)
  5282  1597  3004               	movlw	4
  5283  1598  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  5284  1599  1803               	skipnc
  5285  159A  0008               	return
  5286                           
  5287                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 852:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  5288  159B  3009               	movlw	9
  5289  159C  00F5               	movwf	??_MTOUCH_Sensor_Enable
  5290  159D  0875               	movf	??_MTOUCH_Sensor_Enable,w
  5291  159E  00F1               	movwf	___bmul@multiplicand
  5292  159F  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  5293  15A0  3195  2562         	fcall	___bmul
  5294  15A2  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  5295  15A3  0086               	movwf	6
  5296  15A4  3001               	movlw	1	; select bank2/3
  5297  15A5  0087               	movwf	7
  5298  15A6  1581               	bsf	1,3
  5299  15A7  0008               	return
  5300  15A8                     __end_of_MTOUCH_Sensor_Enable:	
  5301                           
  5302                           	psect	text12
  5303  169D                     __ptext12:	
  5304 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  5305 ;; Defined at:
  5306 ;;		line 179 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;		None
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  button          1    0[BANK0 ] enum E3070
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  1    wreg      void 
  5313 ;; Registers used:
  5314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5320 ;;      Params:         0       0       0       0       0       0       0       0
  5321 ;;      Locals:         0       1       0       0       0       0       0       0
  5322 ;;      Temps:          1       0       0       0       0       0       0       0
  5323 ;;      Totals:         1       1       0       0       0       0       0       0
  5324 ;;Total ram usage:        2 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    7
  5327 ;; This function calls:
  5328 ;;		_MTOUCH_Button_Initialize
  5329 ;;		_memcpy
  5330 ;; This function is called by:
  5331 ;;		_MTOUCH_Initialize
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           
  5336                           ;psect for function _MTOUCH_Button_InitializeAll
  5337  169D                     _MTOUCH_Button_InitializeAll:	
  5338                           
  5339                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 183:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5343  169D  3000               	movlw	low (_mtouch_button_init| (0+32768))
  5344  169E  00F1               	movwf	memcpy@s1
  5345  169F  3090               	movlw	high (_mtouch_button_init| (0+32768))
  5346  16A0  00F2               	movwf	memcpy@s1+1
  5347  16A1  3040               	movlw	64
  5348  16A2  00F3               	movwf	memcpy@n
  5349  16A3  3000               	movlw	0
  5350  16A4  00F4               	movwf	memcpy@n+1
  5351  16A5  30A0               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  5352  16A6  3197  27D5  3196   	fcall	_memcpy
  5353                           
  5354                           ;mcc_generated_files/mtouch/mtouch_button.c: 185:     for (button = 0; button < 4u; butt
      +                          on++)
  5355  16A9  0020               	movlb	0	; select bank0
  5356  16AA  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  5357  16AB                     l6410:	
  5358                           
  5359                           ;mcc_generated_files/mtouch/mtouch_button.c: 186:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 187:         MTOUCH_Button_Initialize(button);
  5360  16AB  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  5361  16AC  3189  21A5  3196   	fcall	_MTOUCH_Button_Initialize
  5362                           
  5363                           ;mcc_generated_files/mtouch/mtouch_button.c: 188:     }
  5364  16AF  3001               	movlw	1
  5365  16B0  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  5366  16B1  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  5367  16B2  0020               	movlb	0	; select bank0
  5368  16B3  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  5369  16B4  3004               	movlw	4
  5370  16B5  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  5371  16B6  1803               	btfsc	3,0
  5372  16B7  0008               	return
  5373  16B8  2EAB               	goto	l6410
  5374  16B9                     __end_of_MTOUCH_Button_InitializeAll:	
  5375                           
  5376                           	psect	text13
  5377  17D5                     __ptext13:	
  5378 ;; *************** function _memcpy *****************
  5379 ;; Defined at:
  5380 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  d1              1    wreg     PTR void 
  5383 ;;		 -> mtouch_button(64), 
  5384 ;;  s1              2    1[COMMON] PTR const void 
  5385 ;;		 -> mtouch_button_init(64), 
  5386 ;;  n               2    3[COMMON] unsigned int 
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  d1              1    9[COMMON] PTR void 
  5389 ;;		 -> mtouch_button(64), 
  5390 ;;  s               2    7[COMMON] PTR const unsigned char 
  5391 ;;		 -> mtouch_button_init(64), 
  5392 ;;  d               1   10[COMMON] PTR unsigned char 
  5393 ;;		 -> mtouch_button(64), 
  5394 ;;  tmp             1    6[COMMON] unsigned char 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      PTR void 
  5397 ;; Registers used:
  5398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5404 ;;      Params:         4       0       0       0       0       0       0       0
  5405 ;;      Locals:         5       0       0       0       0       0       0       0
  5406 ;;      Temps:          1       0       0       0       0       0       0       0
  5407 ;;      Totals:        10       0       0       0       0       0       0       0
  5408 ;;Total ram usage:       10 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    4
  5411 ;; This function calls:
  5412 ;;		Nothing
  5413 ;; This function is called by:
  5414 ;;		_MTOUCH_Button_InitializeAll
  5415 ;; This function uses a non-reentrant model
  5416 ;;
  5417                           
  5418                           
  5419                           ;psect for function _memcpy
  5420  17D5                     _memcpy:	
  5421                           
  5422                           ;incstack = 0
  5423                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  5424                           ;memcpy@d1 stored from wreg
  5425  17D5  00F9               	movwf	memcpy@d1
  5426  17D6  0872               	movf	memcpy@s1+1,w
  5427  17D7  00F8               	movwf	memcpy@s+1
  5428  17D8  0871               	movf	memcpy@s1,w
  5429  17D9  00F7               	movwf	memcpy@s
  5430  17DA  0879               	movf	memcpy@d1,w
  5431  17DB  00F5               	movwf	??_memcpy
  5432  17DC  0875               	movf	??_memcpy,w
  5433  17DD  00FA               	movwf	memcpy@d
  5434  17DE                     l6334:	
  5435  17DE  3001               	movlw	1
  5436  17DF  02F3               	subwf	memcpy@n,f
  5437  17E0  3000               	movlw	0
  5438  17E1  3BF4               	subwfb	memcpy@n+1,f
  5439  17E2  0A73               	incf	memcpy@n,w
  5440  17E3  1903               	btfsc	3,2
  5441  17E4  0A74               	incf	memcpy@n+1,w
  5442  17E5  1903               	btfsc	3,2
  5443  17E6  0008               	return
  5444  17E7  0877               	movf	memcpy@s,w
  5445  17E8  0084               	movwf	4
  5446  17E9  0878               	movf	memcpy@s+1,w
  5447  17EA  0085               	movwf	5
  5448  17EB  0800               	movf	0,w	;code access
  5449  17EC  00F5               	movwf	??_memcpy
  5450  17ED  0875               	movf	??_memcpy,w
  5451  17EE  00F6               	movwf	memcpy@tmp
  5452  17EF  3001               	movlw	1
  5453  17F0  07F7               	addwf	memcpy@s,f
  5454  17F1  3000               	movlw	0
  5455  17F2  3DF8               	addwfc	memcpy@s+1,f
  5456  17F3  0876               	movf	memcpy@tmp,w
  5457  17F4  00F5               	movwf	??_memcpy
  5458  17F5  087A               	movf	memcpy@d,w
  5459  17F6  0086               	movwf	6
  5460  17F7  3001               	movlw	1	; select bank2/3
  5461  17F8  0087               	movwf	7
  5462  17F9  0875               	movf	??_memcpy,w
  5463  17FA  0081               	movwf	1
  5464  17FB  3001               	movlw	1
  5465  17FC  00F5               	movwf	??_memcpy
  5466  17FD  0875               	movf	??_memcpy,w
  5467  17FE  07FA               	addwf	memcpy@d,f
  5468  17FF  2FDE               	goto	l6334
  5469  1800                     __end_of_memcpy:	
  5470                           
  5471                           	psect	text14
  5472  090D                     __ptext14:	
  5473 ;; *************** function _EUSART_Initialize *****************
  5474 ;; Defined at:
  5475 ;;		line 81 in file "mcc_generated_files/eusart.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  1    wreg      void 
  5482 ;; Registers used:
  5483 ;;		wreg, status,2, status,0, pclath, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5489 ;;      Params:         0       0       0       0       0       0       0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0       0
  5492 ;;      Totals:         0       0       0       0       0       0       0       0
  5493 ;;Total ram usage:        0 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:    5
  5496 ;; This function calls:
  5497 ;;		_EUSART_SetErrorHandler
  5498 ;;		_EUSART_SetFramingErrorHandler
  5499 ;;		_EUSART_SetOverrunErrorHandler
  5500 ;;		_EUSART_SetRxInterruptHandler
  5501 ;; This function is called by:
  5502 ;;		_SYSTEM_Initialize
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           
  5507                           ;psect for function _EUSART_Initialize
  5508  090D                     _EUSART_Initialize:	
  5509                           
  5510                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  5511                           
  5512                           ;incstack = 0
  5513                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5514  090D  0021               	movlb	1	; select bank1
  5515  090E  1291               	bcf	17,5	;volatile
  5516                           
  5517                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5518  090F  303E               	movlw	low _EUSART_Receive_ISR
  5519  0910  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5520  0911  3009               	movlw	high _EUSART_Receive_ISR
  5521  0912  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5522  0913  3194  2468  3189   	fcall	_EUSART_SetRxInterruptHandler
  5523                           
  5524                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  5525  0916  3008               	movlw	8
  5526  0917  0023               	movlb	3	; select bank3
  5527  0918  009F               	movwf	31	;volatile
  5528                           
  5529                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  5530  0919  3090               	movlw	144
  5531  091A  009D               	movwf	29	;volatile
  5532                           
  5533                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  5534  091B  3024               	movlw	36
  5535  091C  009E               	movwf	30	;volatile
  5536                           
  5537                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  5538  091D  3040               	movlw	64
  5539  091E  009B               	movwf	27	;volatile
  5540                           
  5541                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  5542  091F  3003               	movlw	3
  5543  0920  009C               	movwf	28	;volatile
  5544                           
  5545                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5546  0921  3026               	movlw	low _EUSART_DefaultFramingErrorHandler
  5547  0922  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5548  0923  3014               	movlw	high _EUSART_DefaultFramingErrorHandler
  5549  0924  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  5550  0925  3194  245C  3189   	fcall	_EUSART_SetFramingErrorHandler
  5551                           
  5552                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5553  0928  3038               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5554  0929  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5555  092A  3014               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5556  092B  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  5557  092C  3194  2462  3189   	fcall	_EUSART_SetOverrunErrorHandler
  5558                           
  5559                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5560  092F  3029               	movlw	low _EUSART_DefaultErrorHandler
  5561  0930  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  5562  0931  3014               	movlw	high _EUSART_DefaultErrorHandler
  5563  0932  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  5564  0933  3194  2456         	fcall	_EUSART_SetErrorHandler
  5565                           
  5566                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  5567  0935  0021               	movlb	1	; select bank1
  5568  0936  01BD               	clrf	_eusartRxLastError^(0+128)	;volatile
  5569                           
  5570                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  5571  0937  01FC               	clrf	_eusartRxHead	;volatile
  5572                           
  5573                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  5574  0938  0020               	movlb	0	; select bank0
  5575  0939  01ED               	clrf	_eusartRxTail	;volatile
  5576                           
  5577                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  5578  093A  01EC               	clrf	_eusartRxCount	;volatile
  5579                           
  5580                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  5581  093B  0021               	movlb	1	; select bank1
  5582  093C  1691               	bsf	17,5	;volatile
  5583  093D  0008               	return
  5584  093E                     __end_of_EUSART_Initialize:	
  5585                           
  5586                           	psect	text15
  5587  1468                     __ptext15:	
  5588 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5589 ;; Defined at:
  5590 ;;		line 241 in file "mcc_generated_files/eusart.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5593 ;;		 -> EUSART_Receive_ISR(1), 
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;		None
  5596 ;; Return value:  Size  Location     Type
  5597 ;;                  1    wreg      void 
  5598 ;; Registers used:
  5599 ;;		wreg
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5605 ;;      Params:         2       0       0       0       0       0       0       0
  5606 ;;      Locals:         0       0       0       0       0       0       0       0
  5607 ;;      Temps:          0       0       0       0       0       0       0       0
  5608 ;;      Totals:         2       0       0       0       0       0       0       0
  5609 ;;Total ram usage:        2 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    4
  5612 ;; This function calls:
  5613 ;;		Nothing
  5614 ;; This function is called by:
  5615 ;;		_EUSART_Initialize
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           
  5620                           ;psect for function _EUSART_SetRxInterruptHandler
  5621  1468                     _EUSART_SetRxInterruptHandler:	
  5622                           
  5623                           ;mcc_generated_files/eusart.c: 242:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5624                           
  5625                           ;incstack = 0
  5626                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5627  1468  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  5628  1469  0021               	movlb	1	; select bank1
  5629  146A  00D1               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5630  146B  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  5631  146C  00D0               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5632  146D  0008               	return
  5633  146E                     __end_of_EUSART_SetRxInterruptHandler:	
  5634                           
  5635                           	psect	text16
  5636  1462                     __ptext16:	
  5637 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5638 ;; Defined at:
  5639 ;;		line 232 in file "mcc_generated_files/eusart.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5642 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      void 
  5647 ;; Registers used:
  5648 ;;		wreg
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5654 ;;      Params:         2       0       0       0       0       0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0       0
  5657 ;;      Totals:         2       0       0       0       0       0       0       0
  5658 ;;Total ram usage:        2 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    4
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		_EUSART_Initialize
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _EUSART_SetOverrunErrorHandler
  5670  1462                     _EUSART_SetOverrunErrorHandler:	
  5671                           
  5672                           ;mcc_generated_files/eusart.c: 233:     EUSART_OverrunErrorHandler = interruptHandler;
  5673                           
  5674                           ;incstack = 0
  5675                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5676  1462  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  5677  1463  0021               	movlb	1	; select bank1
  5678  1464  00CD               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5679  1465  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  5680  1466  00CC               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5681  1467  0008               	return
  5682  1468                     __end_of_EUSART_SetOverrunErrorHandler:	
  5683                           
  5684                           	psect	text17
  5685  145C                     __ptext17:	
  5686 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5687 ;; Defined at:
  5688 ;;		line 228 in file "mcc_generated_files/eusart.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5691 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      void 
  5696 ;; Registers used:
  5697 ;;		wreg
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5703 ;;      Params:         2       0       0       0       0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0       0
  5706 ;;      Totals:         2       0       0       0       0       0       0       0
  5707 ;;Total ram usage:        2 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    4
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_EUSART_Initialize
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           
  5718                           ;psect for function _EUSART_SetFramingErrorHandler
  5719  145C                     _EUSART_SetFramingErrorHandler:	
  5720                           
  5721                           ;mcc_generated_files/eusart.c: 229:     EUSART_FramingErrorHandler = interruptHandler;
  5722                           
  5723                           ;incstack = 0
  5724                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5725  145C  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  5726  145D  0021               	movlb	1	; select bank1
  5727  145E  00CF               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5728  145F  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5729  1460  00CE               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5730  1461  0008               	return
  5731  1462                     __end_of_EUSART_SetFramingErrorHandler:	
  5732                           
  5733                           	psect	text18
  5734  1456                     __ptext18:	
  5735 ;; *************** function _EUSART_SetErrorHandler *****************
  5736 ;; Defined at:
  5737 ;;		line 236 in file "mcc_generated_files/eusart.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5740 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;		None
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  1    wreg      void 
  5745 ;; Registers used:
  5746 ;;		wreg
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5752 ;;      Params:         2       0       0       0       0       0       0       0
  5753 ;;      Locals:         0       0       0       0       0       0       0       0
  5754 ;;      Temps:          0       0       0       0       0       0       0       0
  5755 ;;      Totals:         2       0       0       0       0       0       0       0
  5756 ;;Total ram usage:        2 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:    4
  5759 ;; This function calls:
  5760 ;;		Nothing
  5761 ;; This function is called by:
  5762 ;;		_EUSART_Initialize
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           
  5767                           ;psect for function _EUSART_SetErrorHandler
  5768  1456                     _EUSART_SetErrorHandler:	
  5769                           
  5770                           ;mcc_generated_files/eusart.c: 237:     EUSART_ErrorHandler = interruptHandler;
  5771                           
  5772                           ;incstack = 0
  5773                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5774  1456  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  5775  1457  0021               	movlb	1	; select bank1
  5776  1458  00CB               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5777  1459  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5778  145A  00CA               	movwf	_EUSART_ErrorHandler^(0+128)
  5779  145B  0008               	return
  5780  145C                     __end_of_EUSART_SetErrorHandler:	
  5781                           
  5782                           	psect	text19
  5783  16B9                     __ptext19:	
  5784 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5785 ;; Defined at:
  5786 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;		None
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;		None
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  1    wreg      _Bool 
  5793 ;; Registers used:
  5794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5800 ;;      Params:         0       0       0       0       0       0       0       0
  5801 ;;      Locals:         0       0       0       0       0       0       0       0
  5802 ;;      Temps:          0       1       0       0       0       0       0       0
  5803 ;;      Totals:         0       1       0       0       0       0       0       0
  5804 ;;Total ram usage:        1 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:   18
  5807 ;; This function calls:
  5808 ;;		_MTOUCH_Button_ServiceAll
  5809 ;;		_MTOUCH_Sensor_SampleAll
  5810 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5811 ;;		_MTOUCH_Tick
  5812 ;;		_MTOUCH_needReburst
  5813 ;; This function is called by:
  5814 ;;		_main
  5815 ;;		_touch_example
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           
  5820                           ;psect for function _MTOUCH_Service_Mainloop
  5821  16B9                     _MTOUCH_Service_Mainloop:	
  5822                           
  5823                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  5824                           
  5825                           ;incstack = 0
  5826 ;; hardware stack exceeded
  5827                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5828  16B9  0021               	movlb	1	; select bank1
  5829  16BA  01BC               	clrf	_mtouch_time_toScan^(0+128)
  5830  16BB  0ABC               	incf	_mtouch_time_toScan^(0+128),f
  5831                           
  5832                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  5833                           
  5834                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  5835  16BC  3195  25F8  3196   	fcall	_MTOUCH_Sensor_SampleAll
  5836  16BF  3A00               	xorlw	0
  5837  16C0  1D03               	skipz
  5838  16C1  2EC4               	goto	l6656
  5839                           
  5840                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  5841  16C2  3000               	movlw	0
  5842  16C3  0008               	return
  5843  16C4                     l6656:	
  5844                           
  5845                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  5846  16C4  3195  2531  3196   	fcall	_MTOUCH_Button_ServiceAll
  5847                           
  5848                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  5849  16C7  3180  2002  3196   	fcall	_MTOUCH_needReburst
  5850  16CA  0020               	movlb	0	; select bank0
  5851  16CB  00DB               	movwf	??_MTOUCH_Service_Mainloop
  5852  16CC  085B               	movf	??_MTOUCH_Service_Mainloop,w
  5853  16CD  0021               	movlb	1	; select bank1
  5854  16CE  00BC               	movwf	_mtouch_time_toScan^(0+128)
  5855                           
  5856                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  5857  16CF  3195  25BA  3196   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5858                           
  5859                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  5860  16D2  3194  2435         	fcall	_MTOUCH_Tick
  5861                           
  5862                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  5863  16D4  3001               	movlw	1
  5864  16D5  0008               	return
  5865  16D6                     __end_of_MTOUCH_Service_Mainloop:	
  5866                           
  5867                           	psect	text20
  5868  0002                     __ptext20:	
  5869 ;; *************** function _MTOUCH_needReburst *****************
  5870 ;; Defined at:
  5871 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;		None
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;  needReburst     1    0        _Bool 
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  1    wreg      _Bool 
  5878 ;; Registers used:
  5879 ;;		wreg, status,2
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5885 ;;      Params:         0       0       0       0       0       0       0       0
  5886 ;;      Locals:         1       0       0       0       0       0       0       0
  5887 ;;      Temps:          0       0       0       0       0       0       0       0
  5888 ;;      Totals:         1       0       0       0       0       0       0       0
  5889 ;;Total ram usage:        1 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    4
  5892 ;; This function calls:
  5893 ;;		Nothing
  5894 ;; This function is called by:
  5895 ;;		_MTOUCH_Service_Mainloop
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           
  5900                           ;psect for function _MTOUCH_needReburst
  5901  0002                     _MTOUCH_needReburst:	
  5902                           
  5903                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  5904                           
  5905                           ;incstack = 0
  5906                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  5907  0002  3000               	movlw	0
  5908  0003  0008               	return
  5909  0004                     __end_of_MTOUCH_needReburst:	
  5910                           
  5911                           	psect	text21
  5912  1435                     __ptext21:	
  5913 ;; *************** function _MTOUCH_Tick *****************
  5914 ;; Defined at:
  5915 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;		None
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;		None
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      void 
  5922 ;; Registers used:
  5923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5929 ;;      Params:         0       0       0       0       0       0       0       0
  5930 ;;      Locals:         0       0       0       0       0       0       0       0
  5931 ;;      Temps:          0       0       0       0       0       0       0       0
  5932 ;;      Totals:         0       0       0       0       0       0       0       0
  5933 ;;Total ram usage:        0 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    6
  5936 ;; This function calls:
  5937 ;;		_MTOUCH_Button_Tick
  5938 ;; This function is called by:
  5939 ;;		_MTOUCH_Service_Mainloop
  5940 ;; This function uses a non-reentrant model
  5941 ;;
  5942                           
  5943                           
  5944                           ;psect for function _MTOUCH_Tick
  5945  1435                     _MTOUCH_Tick:	
  5946                           
  5947                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  5948                           
  5949                           ;incstack = 0
  5950                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5951  1435  3196  260E         	fcall	_MTOUCH_Button_Tick
  5952  1437  0008               	return
  5953  1438                     __end_of_MTOUCH_Tick:	
  5954                           
  5955                           	psect	text22
  5956  160E                     __ptext22:	
  5957 ;; *************** function _MTOUCH_Button_Tick *****************
  5958 ;; Defined at:
  5959 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;		None
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;  i               1    5[COMMON] unsigned char 
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      void 
  5966 ;; Registers used:
  5967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5973 ;;      Params:         0       0       0       0       0       0       0       0
  5974 ;;      Locals:         1       0       0       0       0       0       0       0
  5975 ;;      Temps:          1       0       0       0       0       0       0       0
  5976 ;;      Totals:         2       0       0       0       0       0       0       0
  5977 ;;Total ram usage:        2 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    5
  5980 ;; This function calls:
  5981 ;;		_Button_Tick_helper
  5982 ;; This function is called by:
  5983 ;;		_MTOUCH_Tick
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           
  5988                           ;psect for function _MTOUCH_Button_Tick
  5989  160E                     _MTOUCH_Button_Tick:	
  5990                           
  5991                           ;mcc_generated_files/mtouch/mtouch_button.c: 307:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 308:     for (i = 0; i < 4u; i++)
  5992                           
  5993                           ;incstack = 0
  5994                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5995  160E  01F5               	clrf	MTOUCH_Button_Tick@i
  5996  160F                     l4860:	
  5997                           
  5998                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         Button_Tick_helper(&mtouch_button[i]);
  5999  160F  0875               	movf	MTOUCH_Button_Tick@i,w
  6000  1610  00F4               	movwf	??_MTOUCH_Button_Tick
  6001  1611  3003               	movlw	3
  6002  1612                     u3435:	
  6003  1612  35F4               	lslf	??_MTOUCH_Button_Tick,f
  6004  1613  3EFF               	addlw	-1
  6005  1614  1D03               	skipz
  6006  1615  2E12               	goto	u3435
  6007  1616  3574               	lslf	??_MTOUCH_Button_Tick,w
  6008  1617  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  6009  1618  3197  275F  3196   	fcall	_Button_Tick_helper
  6010                           
  6011                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:     }
  6012  161B  3001               	movlw	1
  6013  161C  00F4               	movwf	??_MTOUCH_Button_Tick
  6014  161D  0874               	movf	??_MTOUCH_Button_Tick,w
  6015  161E  07F5               	addwf	MTOUCH_Button_Tick@i,f
  6016  161F  3004               	movlw	4
  6017  1620  0275               	subwf	MTOUCH_Button_Tick@i,w
  6018  1621  1803               	btfsc	3,0
  6019  1622  0008               	return
  6020  1623  2E0F               	goto	l4860
  6021  1624                     __end_of_MTOUCH_Button_Tick:	
  6022                           
  6023                           	psect	text23
  6024  175F                     __ptext23:	
  6025 ;; *************** function _Button_Tick_helper *****************
  6026 ;; Defined at:
  6027 ;;		line 313 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;  button          1    wreg     PTR struct .
  6030 ;;		 -> mtouch_button(64), 
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;  button          1    3[COMMON] PTR struct .
  6033 ;;		 -> mtouch_button(64), 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  1    wreg      void 
  6036 ;; Registers used:
  6037 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6043 ;;      Params:         0       0       0       0       0       0       0       0
  6044 ;;      Locals:         1       0       0       0       0       0       0       0
  6045 ;;      Temps:          2       0       0       0       0       0       0       0
  6046 ;;      Totals:         3       0       0       0       0       0       0       0
  6047 ;;Total ram usage:        3 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    4
  6050 ;; This function calls:
  6051 ;;		Nothing
  6052 ;; This function is called by:
  6053 ;;		_MTOUCH_Button_Tick
  6054 ;; This function uses a non-reentrant model
  6055 ;;
  6056                           
  6057                           
  6058                           ;psect for function _Button_Tick_helper
  6059  175F                     _Button_Tick_helper:	
  6060                           
  6061                           ;incstack = 0
  6062                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  6063                           ;Button_Tick_helper@button stored from wreg
  6064  175F  00F3               	movwf	Button_Tick_helper@button
  6065                           
  6066                           ;mcc_generated_files/mtouch/mtouch_button.c: 313: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 314: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 316:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  6067  1760  0873               	movf	Button_Tick_helper@button,w
  6068  1761  3E02               	addlw	2
  6069  1762  0086               	movwf	6
  6070  1763  3001               	movlw	1	; select bank2/3
  6071  1764  0087               	movwf	7
  6072  1765  3002               	movlw	2
  6073  1766  0601               	xorwf	1,w
  6074  1767  1D03               	btfss	3,2
  6075  1768  0008               	return
  6076                           
  6077                           ;mcc_generated_files/mtouch/mtouch_button.c: 317:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 318:         (button->counter)++;
  6078  1769  0873               	movf	Button_Tick_helper@button,w
  6079  176A  3E0A               	addlw	10
  6080  176B  0086               	movwf	6
  6081  176C  3001               	movlw	1	; select bank2/3
  6082  176D  0087               	movwf	7
  6083  176E  3001               	movlw	1
  6084  176F  0781               	addwf	1,f
  6085  1770  3141               	addfsr 1,1
  6086  1771  1803               	skipnc
  6087  1772  0A81               	incf	1,f
  6088                           
  6089                           ;mcc_generated_files/mtouch/mtouch_button.c: 319:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  6090  1773  0873               	movf	Button_Tick_helper@button,w
  6091  1774  3E0A               	addlw	10
  6092  1775  0086               	movwf	6
  6093  1776  3001               	movlw	1	; select bank2/3
  6094  1777  0087               	movwf	7
  6095  1778  0016               	moviw fsr1++
  6096  1779  0401               	iorwf	1,w
  6097  177A  1D03               	btfss	3,2
  6098  177B  0008               	return
  6099                           
  6100                           ;mcc_generated_files/mtouch/mtouch_button.c: 320:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 321:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  6101  177C  0873               	movf	Button_Tick_helper@button,w
  6102  177D  3E0A               	addlw	10
  6103  177E  0086               	movwf	6
  6104  177F  3001               	movlw	1	; select bank2/3
  6105  1780  0087               	movwf	7
  6106  1781  30FF               	movlw	255
  6107  1782  3FC0               	movwi [0]fsr1
  6108  1783  30FF               	movlw	255
  6109  1784  3FC1               	movwi [1]fsr1
  6110  1785  0008               	return
  6111  1786                     __end_of_Button_Tick_helper:	
  6112                           
  6113                           	psect	text24
  6114  15BA                     __ptext24:	
  6115 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  6116 ;; Defined at:
  6117 ;;		line 958 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  sensor          1    3[COMMON] PTR struct .
  6122 ;;		 -> mtouch_sensor(36), 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6132 ;;      Params:         0       0       0       0       0       0       0       0
  6133 ;;      Locals:         1       0       0       0       0       0       0       0
  6134 ;;      Temps:          1       0       0       0       0       0       0       0
  6135 ;;      Totals:         2       0       0       0       0       0       0       0
  6136 ;;Total ram usage:        2 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    5
  6139 ;; This function calls:
  6140 ;;		_Sensor_Sampled_Reset
  6141 ;; This function is called by:
  6142 ;;		_MTOUCH_Initialize
  6143 ;;		_MTOUCH_Service_Mainloop
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           
  6148                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  6149  15BA                     _MTOUCH_Sensor_Sampled_ResetAll:	
  6150                           
  6151                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 960:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 961:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[4u -1];sensor++)
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  6155  15BA  3020               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  6156  15BB  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6157  15BC  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6158  15BD  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  6159  15BE                     L2:	
  6160  15BE  303B               	movlw	(low ((_mtouch_sensor| (0+256)+27)))& (0+255)
  6161  15BF  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6162  15C0  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6163  15C1  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6164  15C2  1C03               	btfss	3,0
  6165  15C3  0008               	return
  6166                           
  6167                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 962:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 963:         Sensor_Sampled_Reset(sensor);
  6168  15C4  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6169  15C5  3194  24A0  3195   	fcall	_Sensor_Sampled_Reset
  6170                           
  6171                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964:     }
  6172  15C8  3009               	movlw	9
  6173  15C9  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6174  15CA  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6175  15CB  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  6176  15CC  2DBE               	goto	L2
  6177  15CD                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  6178                           
  6179                           	psect	text25
  6180  14A0                     __ptext25:	
  6181 ;; *************** function _Sensor_Sampled_Reset *****************
  6182 ;; Defined at:
  6183 ;;		line 972 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;  sensor          1    wreg     PTR struct .
  6186 ;;		 -> mtouch_sensor(36), 
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;  sensor          1    1[COMMON] PTR struct .
  6189 ;;		 -> mtouch_sensor(36), 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  1    wreg      void 
  6192 ;; Registers used:
  6193 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6199 ;;      Params:         0       0       0       0       0       0       0       0
  6200 ;;      Locals:         1       0       0       0       0       0       0       0
  6201 ;;      Temps:          0       0       0       0       0       0       0       0
  6202 ;;      Totals:         1       0       0       0       0       0       0       0
  6203 ;;Total ram usage:        1 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    4
  6206 ;; This function calls:
  6207 ;;		Nothing
  6208 ;; This function is called by:
  6209 ;;		_MTOUCH_Sensor_Initialize
  6210 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           
  6215                           ;psect for function _Sensor_Sampled_Reset
  6216  14A0                     _Sensor_Sampled_Reset:	
  6217                           
  6218                           ;incstack = 0
  6219                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6220                           ;Sensor_Sampled_Reset@sensor stored from wreg
  6221  14A0  00F1               	movwf	Sensor_Sampled_Reset@sensor
  6222                           
  6223                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 972: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          973: {;mcc_generated_files/mtouch/mtouch_sensor.c: 974:     sensor->sampled = 0;
  6224  14A1  0871               	movf	Sensor_Sampled_Reset@sensor,w
  6225  14A2  3E08               	addlw	8
  6226  14A3  0086               	movwf	6
  6227  14A4  3001               	movlw	1	; select bank2/3
  6228  14A5  0087               	movwf	7
  6229  14A6  1001               	bcf	1,0
  6230  14A7  0008               	return
  6231  14A8                     __end_of_Sensor_Sampled_Reset:	
  6232                           
  6233                           	psect	text26
  6234  15F8                     __ptext26:	
  6235 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  6236 ;; Defined at:
  6237 ;;		line 266 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;		None
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  group           1   39[BANK0 ] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      _Bool 
  6244 ;; Registers used:
  6245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6251 ;;      Params:         0       0       0       0       0       0       0       0
  6252 ;;      Locals:         0       1       0       0       0       0       0       0
  6253 ;;      Temps:          0       1       0       0       0       0       0       0
  6254 ;;      Totals:         0       2       0       0       0       0       0       0
  6255 ;;Total ram usage:        2 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:   10
  6258 ;; This function calls:
  6259 ;;		_Sensor_Service
  6260 ;; This function is called by:
  6261 ;;		_MTOUCH_Service_Mainloop
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           
  6266                           ;psect for function _MTOUCH_Sensor_SampleAll
  6267  15F8                     _MTOUCH_Sensor_SampleAll:	
  6268                           
  6269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 268:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 269:     for (group = 0; group < 2u; group++)
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6273  15F8  0020               	movlb	0	; select bank0
  6274  15F9  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  6275  15FA                     l6484:	
  6276                           
  6277                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 270:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 271:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  6278  15FA  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  6279  15FB  318E  2631  3195   	fcall	_Sensor_Service
  6280  15FE  3A00               	xorlw	0
  6281  15FF  1903               	skipnz
  6282  1600  2E03               	goto	l6490
  6283                           
  6284                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 272:             return 0;
  6285  1601  3000               	movlw	0
  6286  1602  0008               	return
  6287  1603                     l6490:	
  6288                           
  6289                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 273:     }
  6290  1603  3001               	movlw	1
  6291  1604  0020               	movlb	0	; select bank0
  6292  1605  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  6293  1606  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  6294  1607  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  6295  1608  3002               	movlw	2
  6296  1609  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  6297  160A  1C03               	skipc
  6298  160B  2DFA               	goto	l6484
  6299                           
  6300                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 274:     return 1;
  6301  160C  3001               	movlw	1
  6302  160D  0008               	return
  6303  160E                     __end_of_MTOUCH_Sensor_SampleAll:	
  6304                           
  6305                           	psect	text27
  6306  0E31                     __ptext27:	
  6307 ;; *************** function _Sensor_Service *****************
  6308 ;; Defined at:
  6309 ;;		line 311 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  scanGroup       1    wreg     unsigned char 
  6312 ;; Auto vars:     Size  Location     Type
  6313 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  6314 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  6315 ;;		 -> mtouch_sensor(36), 
  6316 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  6317 ;;		 -> mtouch_sensor(36), 
  6318 ;;  error           1   35[BANK0 ] enum E2859
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      enum E2859
  6321 ;; Registers used:
  6322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6328 ;;      Params:         0       0       0       0       0       0       0       0
  6329 ;;      Locals:         0       4       0       0       0       0       0       0
  6330 ;;      Temps:          0       3       0       0       0       0       0       0
  6331 ;;      Totals:         0       7       0       0       0       0       0       0
  6332 ;;Total ram usage:        7 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    9
  6335 ;; This function calls:
  6336 ;;		_Sensor_Acquisition
  6337 ;;		_Sensor_DefaultCallback
  6338 ;;		_Sensor_RawSample_Update
  6339 ;;		_Sensor_isEnabled
  6340 ;;		_Sensor_setSampled
  6341 ;; This function is called by:
  6342 ;;		_MTOUCH_Sensor_SampleAll
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           
  6347                           ;psect for function _Sensor_Service
  6348  0E31                     _Sensor_Service:	
  6349                           
  6350                           ;incstack = 0
  6351                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6352                           ;Sensor_Service@scanGroup stored from wreg
  6353  0E31  0020               	movlb	0	; select bank0
  6354  0E32  00C2               	movwf	Sensor_Service@scanGroup
  6355                           
  6356                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 312: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 313:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 314:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 316:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  6357  0E33  0842               	movf	Sensor_Service@scanGroup,w
  6358  0E34  00BF               	movwf	??_Sensor_Service
  6359  0E35  01C0               	clrf	??_Sensor_Service+1
  6360  0E36  35BF               	lslf	??_Sensor_Service,f
  6361  0E37  0DC0               	rlf	??_Sensor_Service+1,f
  6362  0E38  305E               	movlw	low (_sensor_scan_group| (0+32768))
  6363  0E39  073F               	addwf	??_Sensor_Service,w
  6364  0E3A  0084               	movwf	4
  6365  0E3B  3098               	movlw	high (_sensor_scan_group| (0+32768))
  6366  0E3C  3D40               	addwfc	??_Sensor_Service+1,w
  6367  0E3D  0085               	movwf	5
  6368  0E3E  0800               	movf	0,w	;code access
  6369  0E3F  00C1               	movwf	??_Sensor_Service+2
  6370  0E40  0841               	movf	??_Sensor_Service+2,w
  6371  0E41  00C4               	movwf	Sensor_Service@sensor_adc1
  6372                           
  6373                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  6374  0E42  0842               	movf	Sensor_Service@scanGroup,w
  6375  0E43  00BF               	movwf	??_Sensor_Service
  6376  0E44  01C0               	clrf	??_Sensor_Service+1
  6377  0E45  35BF               	lslf	??_Sensor_Service,f
  6378  0E46  0DC0               	rlf	??_Sensor_Service+1,f
  6379  0E47  305F               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  6380  0E48  073F               	addwf	??_Sensor_Service,w
  6381  0E49  0084               	movwf	4
  6382  0E4A  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  6383  0E4B  3D40               	addwfc	??_Sensor_Service+1,w
  6384  0E4C  0085               	movwf	5
  6385  0E4D  0800               	movf	0,w	;code access
  6386  0E4E  00C1               	movwf	??_Sensor_Service+2
  6387  0E4F  0841               	movf	??_Sensor_Service+2,w
  6388  0E50  00C5               	movwf	Sensor_Service@sensor_adc2
  6389                           
  6390                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  6391  0E51  0845               	movf	Sensor_Service@sensor_adc2,w
  6392  0E52  00BF               	movwf	??_Sensor_Service
  6393  0E53  083F               	movf	??_Sensor_Service,w
  6394  0E54  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  6395  0E55  0844               	movf	Sensor_Service@sensor_adc1,w
  6396  0E56  318B  234F  318E   	fcall	_Sensor_Acquisition
  6397  0E59  0020               	movlb	0	; select bank0
  6398  0E5A  00C0               	movwf	??_Sensor_Service+1
  6399  0E5B  0840               	movf	??_Sensor_Service+1,w
  6400  0E5C  00C3               	movwf	Sensor_Service@error
  6401                           
  6402                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 322:     switch(error)
  6403  0E5D  2EA0               	goto	l6442
  6404  0E5E                     l6420:	
  6405                           
  6406                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 326:             if(Sensor_isEnabled(sensor_adc1))
  6407  0E5E  0844               	movf	Sensor_Service@sensor_adc1,w
  6408  0E5F  3195  2573  318E   	fcall	_Sensor_isEnabled
  6409  0E62  3A00               	xorlw	0
  6410  0E63  1903               	skipnz
  6411  0E64  2E7E               	goto	l6430
  6412                           
  6413                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 327:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 332:                 if(!lowpowerActivated)
  6414  0E65  0020               	movlb	0	; select bank0
  6415  0E66  0865               	movf	_lowpowerActivated,w
  6416  0E67  1D03               	btfss	3,2
  6417  0E68  2E6D               	goto	l6426
  6418                           
  6419                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 333:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 334:                     Sensor_RawSample_Update(sensor_adc1);
  6420  0E69  0844               	movf	Sensor_Service@sensor_adc1,w
  6421  0E6A  3197  27AD  318E   	fcall	_Sensor_RawSample_Update
  6422  0E6D                     l6426:	
  6423                           
  6424                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 336:                 Sensor_setSampled(sens
      +                          or_adc1);
  6425  0E6D  0020               	movlb	0	; select bank0
  6426  0E6E  0844               	movf	Sensor_Service@sensor_adc1,w
  6427  0E6F  3194  2498  318E   	fcall	_Sensor_setSampled
  6428                           
  6429                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 callback_sampled(senso
      +                          r_adc1->sensor);
  6430  0E72  0020               	movlb	0	; select bank0
  6431  0E73  0844               	movf	Sensor_Service@sensor_adc1,w
  6432  0E74  0086               	movwf	6
  6433  0E75  3001               	movlw	1	; select bank2/3
  6434  0E76  0087               	movwf	7
  6435  0E77  0801               	movf	1,w
  6436  0E78  00BF               	movwf	??_Sensor_Service
  6437  0E79  083F               	movf	??_Sensor_Service,w
  6438  0E7A  00F1               	movwf	Sensor_DefaultCallback@sensor
  6439  0E7B  3194  2428  318E   	fcall	_Sensor_DefaultCallback
  6440  0E7E                     l6430:	
  6441                           
  6442                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 339:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  6443  0E7E  0020               	movlb	0	; select bank0
  6444  0E7F  0845               	movf	Sensor_Service@sensor_adc2,w
  6445  0E80  3195  2573  318E   	fcall	_Sensor_isEnabled
  6446  0E83  3A00               	xorlw	0
  6447  0E84  1903               	skipnz
  6448  0E85  2EC3               	goto	l6444
  6449                           
  6450                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 340:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 341:                 if(!lowpowerActivated)
  6451  0E86  0020               	movlb	0	; select bank0
  6452  0E87  0865               	movf	_lowpowerActivated,w
  6453  0E88  1D03               	btfss	3,2
  6454  0E89  2E8E               	goto	l6436
  6455                           
  6456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 343:                     Sensor_RawSample_Update(sensor_adc2);
  6457  0E8A  0845               	movf	Sensor_Service@sensor_adc2,w
  6458  0E8B  3197  27AD  318E   	fcall	_Sensor_RawSample_Update
  6459  0E8E                     l6436:	
  6460                           
  6461                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345:                 Sensor_setSampled(sens
      +                          or_adc2);
  6462  0E8E  0020               	movlb	0	; select bank0
  6463  0E8F  0845               	movf	Sensor_Service@sensor_adc2,w
  6464  0E90  3194  2498  318E   	fcall	_Sensor_setSampled
  6465                           
  6466                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:                 callback_sampled(senso
      +                          r_adc2->sensor);
  6467  0E93  0020               	movlb	0	; select bank0
  6468  0E94  0845               	movf	Sensor_Service@sensor_adc2,w
  6469  0E95  0086               	movwf	6
  6470  0E96  3001               	movlw	1	; select bank2/3
  6471  0E97  0087               	movwf	7
  6472  0E98  0801               	movf	1,w
  6473  0E99  00BF               	movwf	??_Sensor_Service
  6474  0E9A  083F               	movf	??_Sensor_Service,w
  6475  0E9B  00F1               	movwf	Sensor_DefaultCallback@sensor
  6476  0E9C  3194  2428  318E   	fcall	_Sensor_DefaultCallback
  6477  0E9F  2EC3               	goto	l6444
  6478  0EA0                     l6442:	
  6479  0EA0  0843               	movf	Sensor_Service@error,w
  6480  0EA1  00BF               	movwf	??_Sensor_Service
  6481  0EA2  01C0               	clrf	??_Sensor_Service+1
  6482  0EA3  1BBF               	btfsc	??_Sensor_Service,7
  6483  0EA4  03C0               	decf	??_Sensor_Service+1,f
  6484                           
  6485                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6486                           ; Switch size 1, requested type "simple"
  6487                           ; Number of cases is 2, Range of values is 0 to 255
  6488                           ; switch strategies available:
  6489                           ; Name         Instructions Cycles
  6490                           ; simple_byte            7     4 (average)
  6491                           ; jumptable            260     6 (fixed)
  6492                           ;	Chosen strategy is simple_byte
  6493  0EA5  0840               	movf	??_Sensor_Service+1,w
  6494  0EA6  3A00               	xorlw	0	; case 0
  6495  0EA7  1903               	skipnz
  6496  0EA8  2EAD               	goto	l7100
  6497  0EA9  3AFF               	xorlw	255	; case 255
  6498  0EAA  1903               	skipnz
  6499  0EAB  2EB2               	goto	l7102
  6500  0EAC  2EC3               	goto	l6444
  6501  0EAD                     l7100:	
  6502                           
  6503                           ; Switch size 1, requested type "simple"
  6504                           ; Number of cases is 1, Range of values is 0 to 0
  6505                           ; switch strategies available:
  6506                           ; Name         Instructions Cycles
  6507                           ; simple_byte            4     3 (average)
  6508                           ; direct_byte            8     6 (fixed)
  6509                           ; jumptable            260     6 (fixed)
  6510                           ;	Chosen strategy is simple_byte
  6511  0EAD  083F               	movf	??_Sensor_Service,w
  6512  0EAE  3A00               	xorlw	0	; case 0
  6513  0EAF  1903               	skipnz
  6514  0EB0  2E5E               	goto	l6420
  6515  0EB1  2EC3               	goto	l6444
  6516  0EB2                     l7102:	
  6517                           
  6518                           ; Switch size 1, requested type "simple"
  6519                           ; Number of cases is 5, Range of values is 251 to 255
  6520                           ; switch strategies available:
  6521                           ; Name         Instructions Cycles
  6522                           ; direct_byte           15     5 (fixed)
  6523                           ; simple_byte           16     9 (average)
  6524                           ; jumptable            263     9 (fixed)
  6525                           ;	Chosen strategy is simple_byte
  6526  0EB2  083F               	movf	??_Sensor_Service,w
  6527  0EB3  3AFB               	xorlw	251	; case 251
  6528  0EB4  1903               	skipnz
  6529  0EB5  2EC3               	goto	l6444
  6530  0EB6  3A07               	xorlw	7	; case 252
  6531  0EB7  1903               	skipnz
  6532  0EB8  2EC3               	goto	l6444
  6533  0EB9  3A01               	xorlw	1	; case 253
  6534  0EBA  1903               	skipnz
  6535  0EBB  2EC3               	goto	l6444
  6536  0EBC  3A03               	xorlw	3	; case 254
  6537  0EBD  1903               	skipnz
  6538  0EBE  2EC3               	goto	l6444
  6539  0EBF  3A01               	xorlw	1	; case 255
  6540  0EC0  1903               	skipnz
  6541  0EC1  2EC3               	goto	l6444
  6542  0EC2  2EC3               	goto	l6444
  6543  0EC3                     l6444:	
  6544                           
  6545                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 359:     return error;
  6546  0EC3  0020               	movlb	0	; select bank0
  6547  0EC4  0843               	movf	Sensor_Service@error,w
  6548  0EC5  0008               	return
  6549  0EC6                     __end_of_Sensor_Service:	
  6550                           
  6551                           	psect	text28
  6552  1498                     __ptext28:	
  6553 ;; *************** function _Sensor_setSampled *****************
  6554 ;; Defined at:
  6555 ;;		line 977 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;  sensor          1    wreg     PTR struct .
  6558 ;;		 -> mtouch_sensor(36), 
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;  sensor          1    1[COMMON] PTR struct .
  6561 ;;		 -> mtouch_sensor(36), 
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      void 
  6564 ;; Registers used:
  6565 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6571 ;;      Params:         0       0       0       0       0       0       0       0
  6572 ;;      Locals:         1       0       0       0       0       0       0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0
  6574 ;;      Totals:         1       0       0       0       0       0       0       0
  6575 ;;Total ram usage:        1 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    4
  6578 ;; This function calls:
  6579 ;;		Nothing
  6580 ;; This function is called by:
  6581 ;;		_Sensor_Service
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           
  6586                           ;psect for function _Sensor_setSampled
  6587  1498                     _Sensor_setSampled:	
  6588                           
  6589                           ;incstack = 0
  6590                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  6591                           ;Sensor_setSampled@sensor stored from wreg
  6592  1498  00F1               	movwf	Sensor_setSampled@sensor
  6593                           
  6594                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 977: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 978
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 979:     sensor->sampled = 1;
  6595  1499  0871               	movf	Sensor_setSampled@sensor,w
  6596  149A  3E08               	addlw	8
  6597  149B  0086               	movwf	6
  6598  149C  3001               	movlw	1	; select bank2/3
  6599  149D  0087               	movwf	7
  6600  149E  1401               	bsf	1,0
  6601  149F  0008               	return
  6602  14A0                     __end_of_Sensor_setSampled:	
  6603                           
  6604                           	psect	text29
  6605  17AD                     __ptext29:	
  6606 ;; *************** function _Sensor_RawSample_Update *****************
  6607 ;; Defined at:
  6608 ;;		line 810 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  sensor          1    wreg     PTR struct .
  6611 ;;		 -> mtouch_sensor(36), 
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;  sensor          1    7[COMMON] PTR struct .
  6614 ;;		 -> mtouch_sensor(36), 
  6615 ;;  adcIndex        1    6[COMMON] unsigned char 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      void 
  6618 ;; Registers used:
  6619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6625 ;;      Params:         0       0       0       0       0       0       0       0
  6626 ;;      Locals:         2       0       0       0       0       0       0       0
  6627 ;;      Temps:          1       0       0       0       0       0       0       0
  6628 ;;      Totals:         3       0       0       0       0       0       0       0
  6629 ;;Total ram usage:        3 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    5
  6632 ;; This function calls:
  6633 ;;		_Sensor_getScanGroupIndex
  6634 ;; This function is called by:
  6635 ;;		_Sensor_Service
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           
  6640                           ;psect for function _Sensor_RawSample_Update
  6641  17AD                     _Sensor_RawSample_Update:	
  6642                           
  6643                           ;incstack = 0
  6644                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6645                           ;Sensor_RawSample_Update@sensor stored from wreg
  6646  17AD  00F7               	movwf	Sensor_RawSample_Update@sensor
  6647                           
  6648                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 811: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 812:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  6649  17AE  0877               	movf	Sensor_RawSample_Update@sensor,w
  6650  17AF  3188  2025  3197   	fcall	_Sensor_getScanGroupIndex
  6651  17B2  00F5               	movwf	??_Sensor_RawSample_Update
  6652  17B3  0875               	movf	??_Sensor_RawSample_Update,w
  6653  17B4  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  6654                           
  6655                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 814:     if (INTCONbits.GIE == (uint8_t)1)
  6656  17B5  1F8B               	btfss	11,7	;volatile
  6657  17B6  2FC7               	goto	l4696
  6658                           
  6659                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 815:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 816:         INTCONbits.GIE = (uint8_t)0;
  6660  17B7  138B               	bcf	11,7	;volatile
  6661                           
  6662                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 817:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  6663  17B8  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6664  17B9  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  6665  17BA  0086               	movwf	6
  6666  17BB  0187               	clrf	7
  6667  17BC  0877               	movf	Sensor_RawSample_Update@sensor,w
  6668  17BD  3E06               	addlw	6
  6669  17BE  0084               	movwf	4
  6670  17BF  3001               	movlw	1	; select bank2/3
  6671  17C0  0085               	movwf	5
  6672  17C1  3F40               	moviw [0]fsr1
  6673  17C2  3F80               	movwi [0]fsr0
  6674  17C3  3F41               	moviw [1]fsr1
  6675  17C4  3F81               	movwi [1]fsr0
  6676                           
  6677                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 818:         INTCONbits.GIE = (uint8_t)1;
  6678  17C5  178B               	bsf	11,7	;volatile
  6679                           
  6680                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 819:     }
  6681  17C6  0008               	return
  6682  17C7                     l4696:	
  6683                           
  6684                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 821:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 822:         sensor->rawSample = packet_sample[adcIndex];
  6685  17C7  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6686  17C8  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  6687  17C9  0086               	movwf	6
  6688  17CA  0187               	clrf	7
  6689  17CB  0877               	movf	Sensor_RawSample_Update@sensor,w
  6690  17CC  3E06               	addlw	6
  6691  17CD  0084               	movwf	4
  6692  17CE  3001               	movlw	1	; select bank2/3
  6693  17CF  0085               	movwf	5
  6694  17D0  3F40               	moviw [0]fsr1
  6695  17D1  3F80               	movwi [0]fsr0
  6696  17D2  3F41               	moviw [1]fsr1
  6697  17D3  3F81               	movwi [1]fsr0
  6698  17D4  0008               	return
  6699  17D5                     __end_of_Sensor_RawSample_Update:	
  6700                           
  6701                           	psect	text30
  6702  1428                     __ptext30:	
  6703 ;; *************** function _Sensor_DefaultCallback *****************
  6704 ;; Defined at:
  6705 ;;		line 831 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;  sensor          1    1[COMMON] enum E2854
  6708 ;; Auto vars:     Size  Location     Type
  6709 ;;		None
  6710 ;; Return value:  Size  Location     Type
  6711 ;;                  1    wreg      void 
  6712 ;; Registers used:
  6713 ;;		None
  6714 ;; Tracked objects:
  6715 ;;		On entry : 0/0
  6716 ;;		On exit  : 0/0
  6717 ;;		Unchanged: 0/0
  6718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6719 ;;      Params:         1       0       0       0       0       0       0       0
  6720 ;;      Locals:         0       0       0       0       0       0       0       0
  6721 ;;      Temps:          0       0       0       0       0       0       0       0
  6722 ;;      Totals:         1       0       0       0       0       0       0       0
  6723 ;;Total ram usage:        1 bytes
  6724 ;; Hardware stack levels used:    1
  6725 ;; Hardware stack levels required when called:    4
  6726 ;; This function calls:
  6727 ;;		Nothing
  6728 ;; This function is called by:
  6729 ;;		_Sensor_Service
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           
  6734                           ;psect for function _Sensor_DefaultCallback
  6735  1428                     _Sensor_DefaultCallback:	
  6736                           
  6737                           ;incstack = 0
  6738                           ; Regs used in _Sensor_DefaultCallback: []
  6739  1428  0008               	return
  6740  1429                     __end_of_Sensor_DefaultCallback:	
  6741                           
  6742                           	psect	text31
  6743  0B4F                     __ptext31:	
  6744 ;; *************** function _Sensor_Acquisition *****************
  6745 ;; Defined at:
  6746 ;;		line 380 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  sensor_adc1     1    wreg     PTR struct .
  6749 ;;		 -> mtouch_sensor(36), 
  6750 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  6751 ;;		 -> mtouch_sensor(36), 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  6754 ;;		 -> mtouch_sensor(36), 
  6755 ;;  retry           1   29[BANK0 ] unsigned char 
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      enum E2859
  6758 ;; Registers used:
  6759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6765 ;;      Params:         0       1       0       0       0       0       0       0
  6766 ;;      Locals:         0       2       0       0       0       0       0       0
  6767 ;;      Temps:          0       1       0       0       0       0       0       0
  6768 ;;      Totals:         0       4       0       0       0       0       0       0
  6769 ;;Total ram usage:        4 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    8
  6772 ;; This function calls:
  6773 ;;		_Sensor_Acq_ExecutePacket
  6774 ;;		_Sensor_Scanfrequency_Evaluation
  6775 ;;		_Sensor_isActive
  6776 ;;		_Sensor_isCalibrated
  6777 ;;		_Sensor_postAcquisitionProcess
  6778 ;; This function is called by:
  6779 ;;		_Sensor_Service
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           
  6784                           ;psect for function _Sensor_Acquisition
  6785  0B4F                     _Sensor_Acquisition:	
  6786                           
  6787                           ;incstack = 0
  6788                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6789                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  6790  0B4F  0020               	movlb	0	; select bank0
  6791  0B50  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  6792                           
  6793                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 380: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 381: {;mcc_generated_files/mtouch/mtouch_sensor.c: 382:     
      +                          uint8_t retry = (uint8_t)5;
  6794  0B51  3005               	movlw	5
  6795  0B52  00BC               	movwf	??_Sensor_Acquisition
  6796  0B53  083C               	movf	??_Sensor_Acquisition,w
  6797  0B54  00BD               	movwf	Sensor_Acquisition@retry
  6798                           
  6799                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  6800  0B55  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6801  0B56  1D03               	btfss	3,2
  6802  0B57  2B65               	goto	l6282
  6803  0B58  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6804  0B59  1D03               	btfss	3,2
  6805  0B5A  2B65               	goto	l6282
  6806                           
  6807                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 386:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 387:         return MTOUCH_SENSOR_ERROR_invalid_index;
  6808  0B5B  30FF               	movlw	255
  6809  0B5C  0008               	return
  6810  0B5D                     l6276:	
  6811                           
  6812                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 397:         retry--;
  6813  0B5D  3001               	movlw	1
  6814  0B5E  0020               	movlb	0	; select bank0
  6815  0B5F  02BD               	subwf	Sensor_Acquisition@retry,f
  6816                           
  6817                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 398:         if(retry == 0)
  6818  0B60  083D               	movf	Sensor_Acquisition@retry,w
  6819  0B61  1D03               	btfss	3,2
  6820  0B62  2B65               	goto	l6282
  6821                           
  6822                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 399:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 400:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  6823  0B63  30FC               	movlw	252
  6824  0B64  0008               	return
  6825  0B65                     l6282:	
  6826                           
  6827                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 395:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  6828  0B65  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6829  0B66  00BC               	movwf	??_Sensor_Acquisition
  6830  0B67  083C               	movf	??_Sensor_Acquisition,w
  6831  0B68  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  6832  0B69  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6833  0B6A  3180  2058  318B   	fcall	_Sensor_Acq_ExecutePacket
  6834  0B6D  3A00               	xorlw	0
  6835  0B6E  1D03               	skipz
  6836  0B6F  2B5D               	goto	l6276
  6837                           
  6838                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 404:     if(sensor_adc1 != ((void*)0))
  6839  0B70  0020               	movlb	0	; select bank0
  6840  0B71  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6841  0B72  1903               	btfsc	3,2
  6842  0B73  2B78               	goto	l6288
  6843                           
  6844                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 405:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 406:         Sensor_postAcquisitionProcess(sensor_adc1);
  6845  0B74  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6846  0B75  3189  21DB  318B   	fcall	_Sensor_postAcquisitionProcess
  6847  0B78                     l6288:	
  6848                           
  6849                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:     if(sensor_adc2 !=((void*)0))
  6850  0B78  0020               	movlb	0	; select bank0
  6851  0B79  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6852  0B7A  1903               	btfsc	3,2
  6853  0B7B  2B80               	goto	l6292
  6854                           
  6855                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 411:         Sensor_postAcquisitionProcess(sensor_adc2);
  6856  0B7C  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6857  0B7D  3189  21DB  318B   	fcall	_Sensor_postAcquisitionProcess
  6858  0B80                     l6292:	
  6859                           
  6860                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 414:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  6861  0B80  0020               	movlb	0	; select bank0
  6862  0B81  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6863  0B82  3194  24F7  318B   	fcall	_Sensor_isActive
  6864  0B85  3A00               	xorlw	0
  6865  0B86  1903               	skipnz
  6866  0B87  2B90               	goto	l6296
  6867  0B88  0020               	movlb	0	; select bank0
  6868  0B89  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6869  0B8A  3194  24B9  318B   	fcall	_Sensor_isCalibrated
  6870  0B8D  3A00               	xorlw	0
  6871  0B8E  1D03               	skipz
  6872  0B8F  2BA0               	goto	l6300
  6873  0B90                     l6296:	
  6874  0B90  0020               	movlb	0	; select bank0
  6875  0B91  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6876  0B92  3194  24F7  318B   	fcall	_Sensor_isActive
  6877  0B95  3A00               	xorlw	0
  6878  0B96  1903               	skipnz
  6879  0B97  2BA9               	goto	l6304
  6880  0B98  0020               	movlb	0	; select bank0
  6881  0B99  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6882  0B9A  3194  24B9  318B   	fcall	_Sensor_isCalibrated
  6883  0B9D  3A00               	xorlw	0
  6884  0B9E  1903               	skipnz
  6885  0B9F  2BA9               	goto	l6304
  6886  0BA0                     l6300:	
  6887                           
  6888                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 416:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 417:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  6889  0BA0  0020               	movlb	0	; select bank0
  6890  0BA1  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6891  0BA2  00BC               	movwf	??_Sensor_Acquisition
  6892  0BA3  083C               	movf	??_Sensor_Acquisition,w
  6893  0BA4  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  6894  0BA5  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6895  0BA6  318C  2413         	fcall	_Sensor_Scanfrequency_Evaluation
  6896  0BA8  0008               	return
  6897  0BA9                     l6304:	
  6898                           
  6899                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     return MTOUCH_SENSOR_ERROR_none;
  6900  0BA9  3000               	movlw	0
  6901  0BAA  0008               	return
  6902  0BAB                     __end_of_Sensor_Acquisition:	
  6903                           
  6904                           	psect	text32
  6905  09DB                     __ptext32:	
  6906 ;; *************** function _Sensor_postAcquisitionProcess *****************
  6907 ;; Defined at:
  6908 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;  sensor          1    wreg     PTR struct .
  6911 ;;		 -> mtouch_sensor(36), 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  sensor          1    9[COMMON] PTR struct .
  6914 ;;		 -> mtouch_sensor(36), 
  6915 ;;  deviation       2    6[COMMON] unsigned short 
  6916 ;;  adcIndex        1    8[COMMON] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6926 ;;      Params:         0       0       0       0       0       0       0       0
  6927 ;;      Locals:         4       0       0       0       0       0       0       0
  6928 ;;      Temps:          1       0       0       0       0       0       0       0
  6929 ;;      Totals:         5       0       0       0       0       0       0       0
  6930 ;;Total ram usage:        5 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    5
  6933 ;; This function calls:
  6934 ;;		_Sensor_getScanGroupIndex
  6935 ;;		_Sensor_isEnabled
  6936 ;;		_Sensor_setActive
  6937 ;;		_Sensor_setInactive
  6938 ;;		_abs
  6939 ;; This function is called by:
  6940 ;;		_Sensor_Acquisition
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           
  6945                           ;psect for function _Sensor_postAcquisitionProcess
  6946  09DB                     _Sensor_postAcquisitionProcess:	
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6950                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  6951  09DB  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  6952                           
  6953                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 424: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 425:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 426:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  6954  09DC  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6955  09DD  3188  2025  3189   	fcall	_Sensor_getScanGroupIndex
  6956  09E0  00F5               	movwf	??_Sensor_postAcquisitionProcess
  6957  09E1  0875               	movf	??_Sensor_postAcquisitionProcess,w
  6958  09E2  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  6959                           
  6960                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     if(Sensor_isEnabled(sensor))
  6961  09E3  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6962  09E4  3195  2573  3189   	fcall	_Sensor_isEnabled
  6963  09E7  3A00               	xorlw	0
  6964  09E8  1903               	skipnz
  6965  09E9  2A02               	goto	l4554
  6966                           
  6967                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  6968  09EA  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6969  09EB  3E06               	addlw	6
  6970  09EC  0086               	movwf	6
  6971  09ED  3001               	movlw	1	; select bank2/3
  6972  09EE  0087               	movwf	7
  6973  09EF  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  6974  09F0  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  6975  09F1  0084               	movwf	4
  6976  09F2  0185               	clrf	5
  6977  09F3  3F40               	moviw [0]fsr1
  6978  09F4  0200               	subwf	0,w
  6979  09F5  00F1               	movwf	abs@a
  6980  09F6  3101               	addfsr 0,1
  6981  09F7  3F41               	moviw [1]fsr1
  6982  09F8  3B00               	subwfb	0,w
  6983  09F9  00F2               	movwf	abs@a+1
  6984  09FA  3196  263B  3189   	fcall	_abs
  6985  09FD  0872               	movf	?_abs+1,w
  6986  09FE  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  6987  09FF  0871               	movf	?_abs,w
  6988  0A00  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  6989  0A01  2A04               	goto	l4556
  6990  0A02                     l4554:	
  6991                           
  6992                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 431:         deviation = 0;
  6993  0A02  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  6994  0A03  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  6995  0A04                     l4556:	
  6996                           
  6997                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     if(deviation > 100u)
  6998  0A04  3000               	movlw	0
  6999  0A05  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  7000  0A06  3065               	movlw	101
  7001  0A07  1903               	skipnz
  7002  0A08  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  7003  0A09  1C03               	skipc
  7004  0A0A  2A0F               	goto	l4560
  7005                           
  7006                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 434:         Sensor_setActive(sensor);
  7007  0A0B  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  7008  0A0C  3194  2488         	fcall	_Sensor_setActive
  7009  0A0E  0008               	return
  7010  0A0F                     l4560:	
  7011                           
  7012                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:         Sensor_setInactive(sensor);
  7013  0A0F  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  7014  0A10  3194  2490         	fcall	_Sensor_setInactive
  7015  0A12  0008               	return
  7016  0A13                     __end_of_Sensor_postAcquisitionProcess:	
  7017                           
  7018                           	psect	text33
  7019  1490                     __ptext33:	
  7020 ;; *************** function _Sensor_setInactive *****************
  7021 ;; Defined at:
  7022 ;;		line 885 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;  sensor          1    wreg     PTR struct .
  7025 ;;		 -> mtouch_sensor(36), 
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;  sensor          1    1[COMMON] PTR struct .
  7028 ;;		 -> mtouch_sensor(36), 
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  1    wreg      void 
  7031 ;; Registers used:
  7032 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7038 ;;      Params:         0       0       0       0       0       0       0       0
  7039 ;;      Locals:         1       0       0       0       0       0       0       0
  7040 ;;      Temps:          0       0       0       0       0       0       0       0
  7041 ;;      Totals:         1       0       0       0       0       0       0       0
  7042 ;;Total ram usage:        1 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    4
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_Sensor_postAcquisitionProcess
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _Sensor_setInactive
  7054  1490                     _Sensor_setInactive:	
  7055                           
  7056                           ;incstack = 0
  7057                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7058                           ;Sensor_setInactive@sensor stored from wreg
  7059  1490  00F1               	movwf	Sensor_setInactive@sensor
  7060                           
  7061                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 88
      +                          6: {;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     sensor->active = 0;
  7062  1491  0871               	movf	Sensor_setInactive@sensor,w
  7063  1492  3E08               	addlw	8
  7064  1493  0086               	movwf	6
  7065  1494  3001               	movlw	1	; select bank2/3
  7066  1495  0087               	movwf	7
  7067  1496  1081               	bcf	1,1
  7068  1497  0008               	return
  7069  1498                     __end_of_Sensor_setInactive:	
  7070                           
  7071                           	psect	text34
  7072  1488                     __ptext34:	
  7073 ;; *************** function _Sensor_setActive *****************
  7074 ;; Defined at:
  7075 ;;		line 880 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;  sensor          1    wreg     PTR struct .
  7078 ;;		 -> mtouch_sensor(36), 
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;  sensor          1    1[COMMON] PTR struct .
  7081 ;;		 -> mtouch_sensor(36), 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  1    wreg      void 
  7084 ;; Registers used:
  7085 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7091 ;;      Params:         0       0       0       0       0       0       0       0
  7092 ;;      Locals:         1       0       0       0       0       0       0       0
  7093 ;;      Temps:          0       0       0       0       0       0       0       0
  7094 ;;      Totals:         1       0       0       0       0       0       0       0
  7095 ;;Total ram usage:        1 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    4
  7098 ;; This function calls:
  7099 ;;		Nothing
  7100 ;; This function is called by:
  7101 ;;		_Sensor_postAcquisitionProcess
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           
  7106                           ;psect for function _Sensor_setActive
  7107  1488                     _Sensor_setActive:	
  7108                           
  7109                           ;incstack = 0
  7110                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7111                           ;Sensor_setActive@sensor stored from wreg
  7112  1488  00F1               	movwf	Sensor_setActive@sensor
  7113                           
  7114                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 880: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 881:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 882:     sensor->active = 1;
  7115  1489  0871               	movf	Sensor_setActive@sensor,w
  7116  148A  3E08               	addlw	8
  7117  148B  0086               	movwf	6
  7118  148C  3001               	movlw	1	; select bank2/3
  7119  148D  0087               	movwf	7
  7120  148E  1481               	bsf	1,1
  7121  148F  0008               	return
  7122  1490                     __end_of_Sensor_setActive:	
  7123                           
  7124                           	psect	text35
  7125  0C13                     __ptext35:	
  7126 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  7127 ;; Defined at:
  7128 ;;		line 741 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;  sensor_adc1     1    wreg     PTR struct .
  7131 ;;		 -> mtouch_sensor(36), 
  7132 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  7133 ;;		 -> mtouch_sensor(36), 
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  7136 ;;		 -> mtouch_sensor(36), 
  7137 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  7138 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  7139 ;;  i               1   26[BANK0 ] unsigned char 
  7140 ;;  retry           1   21[BANK0 ] unsigned char 
  7141 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  7142 ;; Return value:  Size  Location     Type
  7143 ;;                  1    wreg      enum E2859
  7144 ;; Registers used:
  7145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7151 ;;      Params:         0       1       0       0       0       0       0       0
  7152 ;;      Locals:         0      10       0       0       0       0       0       0
  7153 ;;      Temps:          0       2       0       0       0       0       0       0
  7154 ;;      Totals:         0      13       0       0       0       0       0       0
  7155 ;;Total ram usage:       13 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    7
  7158 ;; This function calls:
  7159 ;;		_Sensor_Acq_ExecutePacket
  7160 ;; This function is called by:
  7161 ;;		_Sensor_Acquisition
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           
  7166                           ;psect for function _Sensor_Scanfrequency_Evaluation
  7167  0C13                     _Sensor_Scanfrequency_Evaluation:	
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  7171                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  7172  0C13  0020               	movlb	0	; select bank0
  7173  0C14  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  7174                           
  7175                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 741: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 742: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 743:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 745:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 746:     mtouch_sensor_sampleperiod_t best_sample_period;
  7176  0C15  0861               	movf	_packet_noise+1,w
  7177  0C16  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  7178  0C17  0860               	movf	_packet_noise,w
  7179  0C18  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7180  0C19  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  7181  0C1A  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  7182  0C1B  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  7183  0C1C  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  7184  0C1D  0860               	movf	_packet_noise,w
  7185  0C1E  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  7186  0C1F  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  7187  0C20  0861               	movf	_packet_noise+1,w
  7188  0C21  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  7189  0C22  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  7190                           
  7191                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 751:     best_sample_period = sample_period
      +                          ;
  7192  0C23  086E               	movf	_sample_period,w
  7193  0C24  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7194  0C25  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7195  0C26  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  7196                           
  7197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 752:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  7198  0C27  085D               	movf	_packet_sample+1,w
  7199  0C28  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  7200  0C29  085C               	movf	_packet_sample,w
  7201  0C2A  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  7202                           
  7203                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 753:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  7204  0C2B  085F               	movf	_packet_sample+3,w
  7205  0C2C  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  7206  0C2D  085E               	movf	_packet_sample+2,w
  7207  0C2E  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  7208                           
  7209                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  7210  0C2F  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  7211  0C30                     l6208:	
  7212                           
  7213                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 757:         sample_period += frequency_hop[i];
  7214  0C30  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  7215  0C31  3E09               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  7216  0C32  0084               	movwf	4
  7217  0C33  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  7218  0C34  1803               	skipnc
  7219  0C35  3E01               	addlw	1
  7220  0C36  0085               	movwf	5
  7221  0C37  0800               	movf	0,w	;code access
  7222  0C38  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7223  0C39  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7224  0C3A  07EE               	addwf	_sample_period,f
  7225                           
  7226                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  7227  0C3B  30AE               	movlw	174
  7228  0C3C  026E               	subwf	_sample_period,w
  7229  0C3D  1803               	skipnc
  7230  0C3E  2C43               	goto	l6216
  7231                           
  7232                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 765:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  7233  0C3F  30AE               	movlw	174
  7234  0C40  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7235  0C41  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7236  0C42  07EE               	addwf	_sample_period,f
  7237  0C43                     l6216:	
  7238                           
  7239                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 768:         retry = (uint8_t)5;
  7240  0C43  3005               	movlw	5
  7241  0C44  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7242  0C45  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7243  0C46  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  7244  0C47                     l6224:	
  7245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  7246                           
  7247                           
  7248                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  7249  0C47  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  7250  0C48  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7251  0C49  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7252  0C4A  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  7253  0C4B  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  7254  0C4C  3180  2058  318C   	fcall	_Sensor_Acq_ExecutePacket
  7255  0C4F  3A00               	xorlw	0
  7256  0C50  1903               	btfsc	3,2
  7257  0C51  2C5A               	goto	l6226
  7258                           
  7259                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 772:             retry--;
  7260  0C52  3001               	movlw	1
  7261  0C53  0020               	movlb	0	; select bank0
  7262  0C54  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  7263                           
  7264                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 773:             if(retry == 0)
  7265  0C55  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  7266  0C56  1D03               	btfss	3,2
  7267  0C57  2C47               	goto	l6224
  7268                           
  7269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 775:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  7270  0C58  30FC               	movlw	252
  7271  0C59  0008               	return
  7272  0C5A                     l6226:	
  7273                           
  7274                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 779:         if(packet_noise_Max < packet_n
      +                          oise)
  7275  0C5A  0020               	movlb	0	; select bank0
  7276  0C5B  0861               	movf	_packet_noise+1,w
  7277  0C5C  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  7278  0C5D  1D03               	skipz
  7279  0C5E  2C61               	goto	u4725
  7280  0C5F  0860               	movf	_packet_noise,w
  7281  0C60  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  7282  0C61                     u4725:	
  7283  0C61  1803               	skipnc
  7284  0C62  2C73               	goto	l6230
  7285                           
  7286                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 781:             packet_noise_Max = packet_noise;
  7287  0C63  0861               	movf	_packet_noise+1,w
  7288  0C64  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  7289  0C65  0860               	movf	_packet_noise,w
  7290  0C66  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  7291                           
  7292                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:             best_sample_period = sampl
      +                          e_period;
  7293  0C67  086E               	movf	_sample_period,w
  7294  0C68  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7295  0C69  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7296  0C6A  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  7297                           
  7298                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 783:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  7299  0C6B  085D               	movf	_packet_sample+1,w
  7300  0C6C  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  7301  0C6D  085C               	movf	_packet_sample,w
  7302  0C6E  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  7303                           
  7304                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  7305  0C6F  085F               	movf	_packet_sample+3,w
  7306  0C70  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  7307  0C71  085E               	movf	_packet_sample+2,w
  7308  0C72  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  7309  0C73                     l6230:	
  7310                           
  7311                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 786:     }
  7312  0C73  3001               	movlw	1
  7313  0C74  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7314  0C75  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7315  0C76  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  7316  0C77  3005               	movlw	5
  7317  0C78  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  7318  0C79  1C03               	skipc
  7319  0C7A  2C30               	goto	l6208
  7320                           
  7321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 788:     sample_period = best_sample_period
      +                          ;
  7322  0C7B  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  7323  0C7C  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7324  0C7D  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7325  0C7E  00EE               	movwf	_sample_period
  7326                           
  7327                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  7328  0C7F  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  7329  0C80  00DD               	movwf	_packet_sample+1
  7330  0C81  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  7331  0C82  00DC               	movwf	_packet_sample
  7332                           
  7333                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  7334  0C83  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  7335  0C84  00DF               	movwf	_packet_sample+3
  7336  0C85  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  7337  0C86  00DE               	movwf	_packet_sample+2
  7338                           
  7339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792:     return MTOUCH_SENSOR_ERROR_none;
  7340  0C87  3000               	movlw	0
  7341  0C88  0008               	return
  7342  0C89                     __end_of_Sensor_Scanfrequency_Evaluation:	
  7343                           
  7344                           	psect	text36
  7345  0058                     __ptext36:	
  7346 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  7347 ;; Defined at:
  7348 ;;		line 479 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  sensor_adc1     1    wreg     PTR struct .
  7351 ;;		 -> mtouch_sensor(36), 
  7352 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  7353 ;;		 -> mtouch_sensor(36), 
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  7356 ;;		 -> mtouch_sensor(36), 
  7357 ;;  last_b          2   10[BANK0 ] unsigned short 
  7358 ;;  last_a          2    8[BANK0 ] unsigned short 
  7359 ;;  packet_count    1   12[BANK0 ] unsigned char 
  7360 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  7361 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  7362 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  7363 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  7364 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  7365 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  7366 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  1    wreg      enum E2859
  7369 ;; Registers used:
  7370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7376 ;;      Params:         1       0       0       0       0       0       0       0
  7377 ;;      Locals:         0      13       0       0       0       0       0       0
  7378 ;;      Temps:          0       1       0       0       0       0       0       0
  7379 ;;      Totals:         1      14       0       0       0       0       0       0
  7380 ;;Total ram usage:       15 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    6
  7383 ;; This function calls:
  7384 ;;		_MTOUCH_Sensor_Scan_Initialize
  7385 ;;		_Sensor_autoCalibration
  7386 ;;		_Sensor_isActive
  7387 ;;		_Sensor_isCalibrated
  7388 ;;		_Sensor_isEnabled
  7389 ;;		_Sensor_loadADCSettings
  7390 ;;		_TMR2_LoadPeriodRegister
  7391 ;;		_TMR2_StartTimer
  7392 ;;		_TMR2_StopTimer
  7393 ;;		_abs
  7394 ;; This function is called by:
  7395 ;;		_Sensor_Acquisition
  7396 ;;		_Sensor_Scanfrequency_Evaluation
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           
  7401                           ;psect for function _Sensor_Acq_ExecutePacket
  7402  0058                     _Sensor_Acq_ExecutePacket:	
  7403                           
  7404                           ;incstack = 0
  7405                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7406                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  7407  0058  0020               	movlb	0	; select bank0
  7408  0059  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  7409                           
  7410                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 484:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  7411  005A  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  7412  005B  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  7413                           
  7414                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  7415  005C  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  7416  005D  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  7417                           
  7418                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 486:     uint8_t activeSensor = 0;
  7419  005E  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7420                           
  7421                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 489:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 495:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  7422  005F  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7423  0060  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7424                           
  7425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  7426  0061  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7427  0062  1903               	btfsc	3,2
  7428  0063  289E               	goto	l5996
  7429  0064  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7430  0065  1903               	btfsc	3,2
  7431  0066  289E               	goto	l5996
  7432                           
  7433                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 497:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 498:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  7434  0067  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7435  0068  3E08               	addlw	8
  7436  0069  0086               	movwf	6
  7437  006A  3001               	movlw	1	; select bank2/3
  7438  006B  0087               	movwf	7
  7439  006C  1981               	btfsc	1,3
  7440  006D  287E               	goto	l5978
  7441  006E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7442  006F  3E08               	addlw	8
  7443  0070  0086               	movwf	6
  7444  0071  3001               	movlw	1	; select bank2/3
  7445  0072  0087               	movwf	7
  7446  0073  1D81               	btfss	1,3
  7447  0074  287E               	goto	l5978
  7448                           
  7449                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 500:             sensor_adc1->enabled = 1;
  7450  0075  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7451  0076  3E08               	addlw	8
  7452  0077  0086               	movwf	6
  7453  0078  3001               	movlw	1	; select bank2/3
  7454  0079  0087               	movwf	7
  7455  007A  1581               	bsf	1,3
  7456                           
  7457                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:             sensor1ForceEnabled = 1;
  7458  007B  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7459  007C  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  7460                           
  7461                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 502:         }
  7462  007D  28B3               	goto	l6020
  7463  007E                     l5978:	
  7464  007E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7465  007F  3E08               	addlw	8
  7466  0080  0086               	movwf	6
  7467  0081  3001               	movlw	1	; select bank2/3
  7468  0082  0087               	movwf	7
  7469  0083  1981               	btfsc	1,3
  7470  0084  2895               	goto	l5986
  7471  0085  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7472  0086  3E08               	addlw	8
  7473  0087  0086               	movwf	6
  7474  0088  3001               	movlw	1	; select bank2/3
  7475  0089  0087               	movwf	7
  7476  008A  1D81               	btfss	1,3
  7477  008B  2895               	goto	l5986
  7478                           
  7479                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 504:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 505:             sensor_adc2->enabled = 1;
  7480  008C  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7481  008D  3E08               	addlw	8
  7482  008E  0086               	movwf	6
  7483  008F  3001               	movlw	1	; select bank2/3
  7484  0090  0087               	movwf	7
  7485  0091  1581               	bsf	1,3
  7486                           
  7487                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 506:             sensor2ForceEnabled = 1;
  7488  0092  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7489  0093  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  7490                           
  7491                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:         }
  7492  0094  28B3               	goto	l6020
  7493  0095                     l5986:	
  7494  0095  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7495  0096  3E08               	addlw	8
  7496  0097  0086               	movwf	6
  7497  0098  3001               	movlw	1	; select bank2/3
  7498  0099  0087               	movwf	7
  7499  009A  1981               	btfsc	1,3
  7500  009B  28B3               	goto	l6020
  7501  009C                     l5988:	
  7502  009C  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7503  009D  28AB               	goto	L4
  7504  009E                     l5996:	
  7505                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 515:     }
  7506                           
  7507  009E  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7508  009F  1D03               	btfss	3,2
  7509  00A0  28A4               	goto	l6008
  7510  00A1  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7511  00A2  1D03               	btfss	3,2
  7512  00A3  289C               	goto	l5988
  7513  00A4                     l6008:	
  7514                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 517:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 518:         if(sensor_adc2->enabled == 0)
  7515                           
  7516  00A4  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7517  00A5  1903               	btfsc	3,2
  7518  00A6  28B3               	goto	l6020
  7519  00A7  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7520  00A8  1D03               	btfss	3,2
  7521  00A9  28B3               	goto	l6020
  7522                           
  7523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 527:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 528:         if(sensor_adc1->enabled == 0)
  7524  00AA  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7525  00AB                     L4:	
  7526  00AB  3E08               	addlw	8
  7527  00AC  0086               	movwf	6
  7528  00AD  3001               	movlw	1	; select bank2/3
  7529  00AE  0087               	movwf	7
  7530  00AF  1981               	btfsc	1,3
  7531  00B0  28B3               	goto	l6020
  7532  00B1                     l5990:	
  7533                           
  7534                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 510:             return MTOUCH_SENSOR_ERROR_none;
  7535  00B1  3000               	movlw	0
  7536  00B2  0008               	return
  7537  00B3                     l6020:	
  7538                           
  7539                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     if(Sensor_isActive(sensor_adc2))
  7540  00B3  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7541  00B4  3194  24F7  3180   	fcall	_Sensor_isActive
  7542  00B7  3A00               	xorlw	0
  7543  00B8  1903               	skipnz
  7544  00B9  28BD               	goto	l6024
  7545                           
  7546                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         activeSensor = 1;
  7547  00BA  0020               	movlb	0	; select bank0
  7548  00BB  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7549  00BC  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  7550  00BD                     l6024:	
  7551                           
  7552                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     ADCOMCON_temp = ADCOMCON;
  7553  00BD  002E               	movlb	14	; select bank14
  7554  00BE  0812               	movf	18,w	;volatile
  7555  00BF  0020               	movlb	0	; select bank0
  7556  00C0  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7557  00C1  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7558  00C2  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  7559                           
  7560                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:     AD1CON2_temp = AD1CON2;
  7561  00C3  002E               	movlb	14	; select bank14
  7562  00C4  0813               	movf	19,w	;volatile
  7563  00C5  0020               	movlb	0	; select bank0
  7564  00C6  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7565  00C7  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7566  00C8  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  7567                           
  7568                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:     AD2CON2_temp = AD2CON2;
  7569  00C9  002F               	movlb	15	; select bank15
  7570  00CA  0813               	movf	19,w	;volatile
  7571  00CB  0020               	movlb	0	; select bank0
  7572  00CC  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7573  00CD  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7574  00CE  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  7575                           
  7576                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     MTOUCH_Sensor_Scan_Initialize();
  7577  00CF  3195  2541  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  7578                           
  7579                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     if(sensor_adc1!=((void*)0))
  7580  00D2  0020               	movlb	0	; select bank0
  7581  00D3  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7582  00D4  1903               	btfsc	3,2
  7583  00D5  28E9               	goto	l6040
  7584                           
  7585                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7586  00D6  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7587  00D7  3E04               	addlw	4
  7588  00D8  0086               	movwf	6
  7589  00D9  3001               	movlw	1	; select bank2/3
  7590  00DA  0087               	movwf	7
  7591  00DB  0801               	movf	1,w
  7592  00DC  3EFF               	addlw	255
  7593  00DD  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7594  00DE  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7595  00DF  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7596                           
  7597                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 0;
  7598  00E0  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7599                           
  7600                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b01000000;
  7601  00E1  3040               	movlw	64
  7602  00E2  002E               	movlb	14	; select bank14
  7603  00E3  0098               	movwf	24	;volatile
  7604                           
  7605                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b00000000;
  7606  00E4  002F               	movlb	15	; select bank15
  7607  00E5  0198               	clrf	24	;volatile
  7608                           
  7609                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  7610  00E6  0022               	movlb	2	; select bank2
  7611  00E7  101D               	bcf	29,0	;volatile
  7612                           
  7613                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 561:     }
  7614  00E8  28FC               	goto	l6050
  7615  00E9                     l6040:	
  7616                           
  7617                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 564:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7618  00E9  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7619  00EA  3E04               	addlw	4
  7620  00EB  0086               	movwf	6
  7621  00EC  3001               	movlw	1	; select bank2/3
  7622  00ED  0087               	movwf	7
  7623  00EE  0801               	movf	1,w
  7624  00EF  3EFF               	addlw	255
  7625  00F0  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7626  00F1  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7627  00F2  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7628                           
  7629                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         ADxIF_flag = 1;
  7630  00F3  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7631  00F4  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  7632                           
  7633                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         AAD1GRD = 0b00000000;
  7634  00F5  002E               	movlb	14	; select bank14
  7635  00F6  0198               	clrf	24	;volatile
  7636                           
  7637                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:         AAD2GRD = 0b01000000;
  7638  00F7  3040               	movlw	64
  7639  00F8  002F               	movlb	15	; select bank15
  7640  00F9  0098               	movwf	24	;volatile
  7641                           
  7642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:         APFCONbits.GRDASEL = 0x1;
  7643  00FA  0022               	movlb	2	; select bank2
  7644  00FB  141D               	bsf	29,0	;volatile
  7645  00FC                     l6050:	
  7646                           
  7647                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  7648  00FC  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7649  00FD  0020               	movlb	0	; select bank0
  7650  00FE  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7651  00FF  3184  24F8  3180   	fcall	_Sensor_loadADCSettings
  7652                           
  7653                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  7654  0102  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7655  0103  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  7656  0104  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7657  0105  3184  24F8  3180   	fcall	_Sensor_loadADCSettings
  7658                           
  7659                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:     sensor_globalFlags.done = 0;
  7660  0108  0020               	movlb	0	; select bank0
  7661  0109  1064               	bcf	_sensor_globalFlags,0	;volatile
  7662                           
  7663                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     sensor_globalFlags.error = 0;
  7664  010A  1164               	bcf	_sensor_globalFlags,2	;volatile
  7665                           
  7666                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 576:     sensor_globalFlags.interrupted = 0
      +                          ;
  7667  010B  11E4               	bcf	_sensor_globalFlags,3	;volatile
  7668                           
  7669                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  7670  010C  086E               	movf	_sample_period,w
  7671  010D  3194  2445  3180   	fcall	_TMR2_LoadPeriodRegister
  7672                           
  7673                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 579:     TMR2_StartTimer();
  7674  0110  3194  242F  3180   	fcall	_TMR2_StartTimer
  7675                           
  7676                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:     packet_noise = 0;
  7677  0113  0020               	movlb	0	; select bank0
  7678  0114  01E0               	clrf	_packet_noise
  7679  0115  01E1               	clrf	_packet_noise+1
  7680  0116                     l6066:	
  7681                           
  7682                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 584:         if(ADxIF_flag == 0)
  7683  0116  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  7684  0117  1D03               	btfss	3,2
  7685  0118  291F               	goto	l874
  7686                           
  7687                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 586:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7688  0119  1F11               	btfss	17,6	;volatile
  7689  011A  10E4               	bcf	_sensor_globalFlags,1	;volatile
  7690  011B                     l876:	
  7691  011B  1F11               	btfss	17,6	;volatile
  7692  011C  291B               	goto	l876
  7693                           
  7694                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588:             PIR1bits.AD1IF = 0;
  7695  011D  1311               	bcf	17,6	;volatile
  7696                           
  7697                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         }
  7698  011E  2925               	goto	l6074
  7699  011F                     l874:	
  7700                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         else
  7701                           
  7702                           
  7703                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 592:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7704  011F  1B12               	btfsc	18,6	;volatile
  7705  0120  2922               	goto	l881
  7706  0121  10E4               	bcf	_sensor_globalFlags,1	;volatile
  7707  0122                     l881:	
  7708  0122  1F12               	btfss	18,6	;volatile
  7709  0123  2922               	goto	l881
  7710                           
  7711                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:             PIR2bits.AD2IF = 0;
  7712  0124  1312               	bcf	18,6	;volatile
  7713  0125                     l6074:	
  7714                           
  7715                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:         AAD1GRD ^= 0b00100001;
  7716  0125  3021               	movlw	33
  7717  0126  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7718  0127  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7719  0128  002E               	movlb	14	; select bank14
  7720  0129  0698               	xorwf	24,f	;volatile
  7721                           
  7722                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:         AAD2GRD ^= 0b00100001;
  7723  012A  3021               	movlw	33
  7724  012B  0020               	movlb	0	; select bank0
  7725  012C  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7726  012D  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7727  012E  002F               	movlb	15	; select bank15
  7728  012F  0698               	xorwf	24,f	;volatile
  7729                           
  7730                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:         AAD1CON3 ^= 0b11000000;
  7731  0130  30C0               	movlw	192
  7732  0131  0020               	movlb	0	; select bank0
  7733  0132  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7734  0133  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7735  0134  002E               	movlb	14	; select bank14
  7736  0135  0694               	xorwf	20,f	;volatile
  7737                           
  7738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:         AAD2CON3 ^= 0b11000000;
  7739  0136  30C0               	movlw	192
  7740  0137  0020               	movlb	0	; select bank0
  7741  0138  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7742  0139  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7743  013A  002F               	movlb	15	; select bank15
  7744  013B  0694               	xorwf	20,f	;volatile
  7745                           
  7746                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:         if ((packet_counter & 0x01) ==
      +                           0)
  7747  013C  0020               	movlb	0	; select bank0
  7748  013D  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  7749  013E  2985               	goto	l6090
  7750                           
  7751                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 603:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 604:             packet_sample[0] += AAD1RES0;
  7752  013F  002E               	movlb	14	; select bank14
  7753  0140  081A               	movf	26,w	;volatile
  7754  0141  0020               	movlb	0	; select bank0
  7755  0142  07DC               	addwf	_packet_sample,f
  7756  0143  002E               	movlb	14	; select bank14
  7757  0144  081B               	movf	27,w	;volatile
  7758  0145  0020               	movlb	0	; select bank0
  7759  0146  3DDD               	addwfc	_packet_sample+1,f
  7760                           
  7761                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 605:             packet_sample[1] += AAD2RE
      +                          S0;
  7762  0147  002F               	movlb	15	; select bank15
  7763  0148  081A               	movf	26,w	;volatile
  7764  0149  0020               	movlb	0	; select bank0
  7765  014A  07DE               	addwf	_packet_sample+2,f
  7766  014B  002F               	movlb	15	; select bank15
  7767  014C  081B               	movf	27,w	;volatile
  7768  014D  0020               	movlb	0	; select bank0
  7769  014E  3DDF               	addwfc	_packet_sample+3,f
  7770                           
  7771                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:             if(activeSensor ==0)
  7772  014F  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7773  0150  1D03               	btfss	3,2
  7774  0151  296A               	goto	l6086
  7775                           
  7776                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 607:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 608:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  7777  0152  002E               	movlb	14	; select bank14
  7778  0153  081A               	movf	26,w	;volatile
  7779  0154  0020               	movlb	0	; select bank0
  7780  0155  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7781  0156  00F1               	movwf	abs@a
  7782  0157  002E               	movlb	14	; select bank14
  7783  0158  081B               	movf	27,w	;volatile
  7784  0159  0020               	movlb	0	; select bank0
  7785  015A  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7786  015B  00F2               	movwf	abs@a+1
  7787  015C  3196  263B  3180   	fcall	_abs
  7788  015F  0871               	movf	?_abs,w
  7789  0160  0020               	movlb	0	; select bank0
  7790  0161  07E0               	addwf	_packet_noise,f
  7791  0162  0872               	movf	?_abs+1,w
  7792  0163  3DE1               	addwfc	_packet_noise+1,f
  7793                           
  7794                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 609:                 last_b = AAD1RES0;
  7795  0164  002E               	movlb	14	; select bank14
  7796  0165  081B               	movf	27,w	;volatile
  7797  0166  0020               	movlb	0	; select bank0
  7798  0167  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7799  0168  002E               	movlb	14	; select bank14
  7800  0169  2981               	goto	L3
  7801  016A                     l6086:	
  7802                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:             }
  7803                           
  7804                           
  7805                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 613:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  7806  016A  002F               	movlb	15	; select bank15
  7807  016B  081A               	movf	26,w	;volatile
  7808  016C  0020               	movlb	0	; select bank0
  7809  016D  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7810  016E  00F1               	movwf	abs@a
  7811  016F  002F               	movlb	15	; select bank15
  7812  0170  081B               	movf	27,w	;volatile
  7813  0171  0020               	movlb	0	; select bank0
  7814  0172  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7815  0173  00F2               	movwf	abs@a+1
  7816  0174  3196  263B  3180   	fcall	_abs
  7817  0177  0871               	movf	?_abs,w
  7818  0178  0020               	movlb	0	; select bank0
  7819  0179  07E0               	addwf	_packet_noise,f
  7820  017A  0872               	movf	?_abs+1,w
  7821  017B  3DE1               	addwfc	_packet_noise+1,f
  7822                           
  7823                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:                 last_b = AAD2RES0;
  7824  017C  002F               	movlb	15	; select bank15
  7825  017D  081B               	movf	27,w	;volatile
  7826  017E  0020               	movlb	0	; select bank0
  7827  017F  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7828  0180  002F               	movlb	15	; select bank15
  7829  0181                     L3:	
  7830  0181  081A               	movf	26,w	;volatile
  7831  0182  0020               	movlb	0	; select bank0
  7832  0183  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  7833  0184  29B9               	goto	l6102
  7834  0185                     l6090:	
  7835                           
  7836                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 618:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 619:             packet_sample[0] -= AAD1RES0;
  7837  0185  002E               	movlb	14	; select bank14
  7838  0186  081A               	movf	26,w	;volatile
  7839  0187  0020               	movlb	0	; select bank0
  7840  0188  02DC               	subwf	_packet_sample,f
  7841  0189  002E               	movlb	14	; select bank14
  7842  018A  081B               	movf	27,w	;volatile
  7843  018B  0020               	movlb	0	; select bank0
  7844  018C  3BDD               	subwfb	_packet_sample+1,f
  7845                           
  7846                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:             packet_sample[1] -= AAD2RE
      +                          S0;
  7847  018D  002F               	movlb	15	; select bank15
  7848  018E  081A               	movf	26,w	;volatile
  7849  018F  0020               	movlb	0	; select bank0
  7850  0190  02DE               	subwf	_packet_sample+2,f
  7851  0191  002F               	movlb	15	; select bank15
  7852  0192  081B               	movf	27,w	;volatile
  7853  0193  0020               	movlb	0	; select bank0
  7854  0194  3BDF               	subwfb	_packet_sample+3,f
  7855                           
  7856                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:             if(activeSensor ==0)
  7857  0195  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7858  0196  1D03               	btfss	3,2
  7859  0197  299F               	goto	l6098
  7860                           
  7861                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 623:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  7862  0198  002E               	movlb	14	; select bank14
  7863  0199  081A               	movf	26,w	;volatile
  7864  019A  0020               	movlb	0	; select bank0
  7865  019B  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7866  019C  00F1               	movwf	abs@a
  7867  019D  002E               	movlb	14	; select bank14
  7868  019E  29A5               	goto	L6
  7869  019F                     l6098:	
  7870                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:             }
  7871                           
  7872                           
  7873                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 628:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  7874  019F  002F               	movlb	15	; select bank15
  7875  01A0  081A               	movf	26,w	;volatile
  7876  01A1  0020               	movlb	0	; select bank0
  7877  01A2  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7878  01A3  00F1               	movwf	abs@a
  7879  01A4  002F               	movlb	15	; select bank15
  7880  01A5                     L6:	
  7881  01A5  081B               	movf	27,w	;volatile
  7882  01A6  0020               	movlb	0	; select bank0
  7883  01A7  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  7884  01A8  00F2               	movwf	abs@a+1
  7885  01A9  3196  263B  3180   	fcall	_abs
  7886  01AC  0871               	movf	?_abs,w
  7887  01AD  0020               	movlb	0	; select bank0
  7888  01AE  07E0               	addwf	_packet_noise,f
  7889  01AF  0872               	movf	?_abs+1,w
  7890  01B0  3DE1               	addwfc	_packet_noise+1,f
  7891                           
  7892                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 624:                 last_a = AAD1RES0;
  7893  01B1  002E               	movlb	14	; select bank14
  7894  01B2  081B               	movf	27,w	;volatile
  7895  01B3  0020               	movlb	0	; select bank0
  7896  01B4  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  7897  01B5  002E               	movlb	14	; select bank14
  7898  01B6  081A               	movf	26,w	;volatile
  7899  01B7  0020               	movlb	0	; select bank0
  7900  01B8  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  7901  01B9                     l6102:	
  7902                           
  7903                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         if (packet_counter == 0)
  7904  01B9  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  7905  01BA  1903               	btfsc	3,2
  7906                           
  7907                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 637:             sensor_globalFlags.done = (uint8_t)1;
  7908  01BB  1464               	bsf	_sensor_globalFlags,0	;volatile
  7909                           
  7910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:         packet_counter--;
  7911  01BC  3001               	movlw	1
  7912  01BD  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  7913                           
  7914                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:         if (sensor_globalFlags.check !
      +                          = 0)
  7915  01BE  1CE4               	btfss	_sensor_globalFlags,1	;volatile
  7916  01BF  29C2               	goto	l891
  7917                           
  7918                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 643:             sensor_globalFlags.error = 1;
  7919  01C0  1564               	bsf	_sensor_globalFlags,2	;volatile
  7920                           
  7921                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:             sensor_globalFlags.done = 
      +                          1;
  7922  01C1  1464               	bsf	_sensor_globalFlags,0	;volatile
  7923  01C2                     l891:	
  7924                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 645:         }
  7925                           
  7926                           
  7927                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:         sensor_globalFlags.check = 1;
  7928  01C2  14E4               	bsf	_sensor_globalFlags,1	;volatile
  7929                           
  7930                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     } while(sensor_globalFlags.done ==
      +                           0);
  7931  01C3  1C64               	btfss	_sensor_globalFlags,0	;volatile
  7932  01C4  2916               	goto	l6066
  7933                           
  7934                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     TMR2_StopTimer();
  7935  01C5  3194  2432  3180   	fcall	_TMR2_StopTimer
  7936                           
  7937                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 650:     ADCOMCON = ADCOMCON_temp;
  7938  01C8  0020               	movlb	0	; select bank0
  7939  01C9  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  7940  01CA  002E               	movlb	14	; select bank14
  7941  01CB  0092               	movwf	18	;volatile
  7942                           
  7943                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     AD1CON2 = AD1CON2_temp;
  7944  01CC  0020               	movlb	0	; select bank0
  7945  01CD  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  7946  01CE  002E               	movlb	14	; select bank14
  7947  01CF  0093               	movwf	19	;volatile
  7948                           
  7949                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     AD2CON2 = AD2CON2_temp;
  7950  01D0  0020               	movlb	0	; select bank0
  7951  01D1  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  7952  01D2  002F               	movlb	15	; select bank15
  7953  01D3  0093               	movwf	19	;volatile
  7954                           
  7955                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     if(sensor_globalFlags.error)
  7956  01D4  0020               	movlb	0	; select bank0
  7957  01D5  1D64               	btfss	_sensor_globalFlags,2	;volatile
  7958  01D6  29D9               	goto	l893
  7959                           
  7960                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 656:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  7961  01D7  30FB               	movlw	251
  7962  01D8  0008               	return
  7963  01D9                     l893:	
  7964                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     }
  7965                           
  7966                           
  7967                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 659:     if(sensor_globalFlags.interrupted)
  7968  01D9  1DE4               	btfss	_sensor_globalFlags,3	;volatile
  7969  01DA  29DD               	goto	l6130
  7970                           
  7971                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 661:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  7972  01DB  30FA               	movlw	250
  7973  01DC  0008               	return
  7974  01DD                     l6130:	
  7975                           
  7976                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:     if (sensor1ForceEnabled)
  7977  01DD  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  7978  01DE  1903               	btfsc	3,2
  7979  01DF  29E6               	goto	l6134
  7980                           
  7981                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 666:         sensor_adc1->enabled = 0;
  7982  01E0  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7983  01E1  3E08               	addlw	8
  7984  01E2  0086               	movwf	6
  7985  01E3  3001               	movlw	1	; select bank2/3
  7986  01E4  0087               	movwf	7
  7987  01E5  1181               	bcf	1,3
  7988  01E6                     l6134:	
  7989                           
  7990                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:     if (sensor2ForceEnabled)
  7991  01E6  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  7992  01E7  1903               	btfsc	3,2
  7993  01E8  29EF               	goto	l6138
  7994                           
  7995                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 669:         sensor_adc2->enabled = 0;
  7996  01E9  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7997  01EA  3E08               	addlw	8
  7998  01EB  0086               	movwf	6
  7999  01EC  3001               	movlw	1	; select bank2/3
  8000  01ED  0087               	movwf	7
  8001  01EE  1181               	bcf	1,3
  8002  01EF                     l6138:	
  8003                           
  8004                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  8005  01EF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8006  01F0  3195  2573  3180   	fcall	_Sensor_isEnabled
  8007  01F3  3A00               	xorlw	0
  8008  01F4  1903               	skipnz
  8009  01F5  2A03               	goto	l6144
  8010  01F6  0020               	movlb	0	; select bank0
  8011  01F7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8012  01F8  3194  24B9  3180   	fcall	_Sensor_isCalibrated
  8013  01FB  3A00               	xorlw	0
  8014  01FC  1D03               	skipz
  8015  01FD  2A03               	goto	l6144
  8016                           
  8017                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:         Sensor_autoCalibration(sensor_
      +                          adc1);
  8018  01FE  0020               	movlb	0	; select bank0
  8019  01FF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8020  0200  318D  259F  3180   	fcall	_Sensor_autoCalibration
  8021  0203                     l6144:	
  8022                           
  8023                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  8024  0203  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8025  0204  3195  2573  3180   	fcall	_Sensor_isEnabled
  8026  0207  3A00               	xorlw	0
  8027  0208  1903               	skipnz
  8028  0209  2A15               	goto	l6150
  8029  020A  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8030  020B  3194  24B9  3180   	fcall	_Sensor_isCalibrated
  8031  020E  3A00               	xorlw	0
  8032  020F  1D03               	skipz
  8033  0210  2A15               	goto	l6150
  8034                           
  8035                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:         Sensor_autoCalibration(sensor_
      +                          adc2);
  8036  0211  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8037  0212  318D  259F  3180   	fcall	_Sensor_autoCalibration
  8038  0215                     l6150:	
  8039                           
  8040                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 678:     AD1PRECON = 0;
  8041  0215  002E               	movlb	14	; select bank14
  8042  0216  0196               	clrf	22	;volatile
  8043                           
  8044                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 679:     AD2PRECON = 0;
  8045  0217  002F               	movlb	15	; select bank15
  8046  0218  0196               	clrf	22	;volatile
  8047                           
  8048                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 680:     AD1ACQCON = 0;
  8049  0219  002E               	movlb	14	; select bank14
  8050  021A  0197               	clrf	23	;volatile
  8051                           
  8052                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 681:     AD2ACQCON = 0;
  8053  021B  002F               	movlb	15	; select bank15
  8054  021C  0197               	clrf	23	;volatile
  8055                           
  8056                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 682:     AD1CON0bits.ADON = 0;
  8057  021D  002E               	movlb	14	; select bank14
  8058  021E  1011               	bcf	17,0	;volatile
  8059                           
  8060                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 683:     AD2CON0bits.ADON = 0;
  8061  021F  002F               	movlb	15	; select bank15
  8062  0220  1011               	bcf	17,0	;volatile
  8063  0221  28B1               	goto	l5990
  8064  0222                     __end_of_Sensor_Acq_ExecutePacket:	
  8065                           
  8066                           	psect	text37
  8067  1432                     __ptext37:	
  8068 ;; *************** function _TMR2_StopTimer *****************
  8069 ;; Defined at:
  8070 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;		None
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;		None
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  1    wreg      void 
  8077 ;; Registers used:
  8078 ;;		None
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8084 ;;      Params:         0       0       0       0       0       0       0       0
  8085 ;;      Locals:         0       0       0       0       0       0       0       0
  8086 ;;      Temps:          0       0       0       0       0       0       0       0
  8087 ;;      Totals:         0       0       0       0       0       0       0       0
  8088 ;;Total ram usage:        0 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    4
  8091 ;; This function calls:
  8092 ;;		Nothing
  8093 ;; This function is called by:
  8094 ;;		_Sensor_Acq_ExecutePacket
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           
  8099                           ;psect for function _TMR2_StopTimer
  8100  1432                     _TMR2_StopTimer:	
  8101                           
  8102                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _TMR2_StopTimer: []
  8106  1432  0020               	movlb	0	; select bank0
  8107  1433  111C               	bcf	28,2	;volatile
  8108  1434  0008               	return
  8109  1435                     __end_of_TMR2_StopTimer:	
  8110                           
  8111                           	psect	text38
  8112  142F                     __ptext38:	
  8113 ;; *************** function _TMR2_StartTimer *****************
  8114 ;; Defined at:
  8115 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;		None
  8118 ;; Auto vars:     Size  Location     Type
  8119 ;;		None
  8120 ;; Return value:  Size  Location     Type
  8121 ;;                  1    wreg      void 
  8122 ;; Registers used:
  8123 ;;		None
  8124 ;; Tracked objects:
  8125 ;;		On entry : 0/0
  8126 ;;		On exit  : 0/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8129 ;;      Params:         0       0       0       0       0       0       0       0
  8130 ;;      Locals:         0       0       0       0       0       0       0       0
  8131 ;;      Temps:          0       0       0       0       0       0       0       0
  8132 ;;      Totals:         0       0       0       0       0       0       0       0
  8133 ;;Total ram usage:        0 bytes
  8134 ;; Hardware stack levels used:    1
  8135 ;; Hardware stack levels required when called:    4
  8136 ;; This function calls:
  8137 ;;		Nothing
  8138 ;; This function is called by:
  8139 ;;		_Sensor_Acq_ExecutePacket
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           
  8144                           ;psect for function _TMR2_StartTimer
  8145  142F                     _TMR2_StartTimer:	
  8146                           
  8147                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  8148                           
  8149                           ;incstack = 0
  8150                           ; Regs used in _TMR2_StartTimer: []
  8151  142F  0020               	movlb	0	; select bank0
  8152  1430  151C               	bsf	28,2	;volatile
  8153  1431  0008               	return
  8154  1432                     __end_of_TMR2_StartTimer:	
  8155                           
  8156                           	psect	text39
  8157  1445                     __ptext39:	
  8158 ;; *************** function _TMR2_LoadPeriodRegister *****************
  8159 ;; Defined at:
  8160 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;  periodVal       1    wreg     unsigned char 
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;  periodVal       1    1[COMMON] unsigned char 
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  1    wreg      void 
  8167 ;; Registers used:
  8168 ;;		wreg
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8174 ;;      Params:         0       0       0       0       0       0       0       0
  8175 ;;      Locals:         1       0       0       0       0       0       0       0
  8176 ;;      Temps:          0       0       0       0       0       0       0       0
  8177 ;;      Totals:         1       0       0       0       0       0       0       0
  8178 ;;Total ram usage:        1 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    4
  8181 ;; This function calls:
  8182 ;;		Nothing
  8183 ;; This function is called by:
  8184 ;;		_Sensor_Acq_ExecutePacket
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _TMR2_LoadPeriodRegister
  8190  1445                     _TMR2_LoadPeriodRegister:	
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  8194                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  8195  1445  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  8196                           
  8197                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  8198  1446  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  8199  1447  0020               	movlb	0	; select bank0
  8200  1448  009B               	movwf	27	;volatile
  8201  1449  0008               	return
  8202  144A                     __end_of_TMR2_LoadPeriodRegister:	
  8203                           
  8204                           	psect	text40
  8205  04F8                     __ptext40:	
  8206 ;; *************** function _Sensor_loadADCSettings *****************
  8207 ;; Defined at:
  8208 ;;		line 445 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  sensor          1    wreg     PTR struct .
  8211 ;;		 -> mtouch_sensor(36), 
  8212 ;;  adc_index       1    2[COMMON] unsigned char 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  sensor          1    9[COMMON] PTR struct .
  8215 ;;		 -> mtouch_sensor(36), 
  8216 ;;  addressOffse    1    8[COMMON] unsigned char 
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  1    wreg      void 
  8219 ;; Registers used:
  8220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8226 ;;      Params:         1       0       0       0       0       0       0       0
  8227 ;;      Locals:         4       0       0       0       0       0       0       0
  8228 ;;      Temps:          3       0       0       0       0       0       0       0
  8229 ;;      Totals:         8       0       0       0       0       0       0       0
  8230 ;;Total ram usage:        8 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    5
  8233 ;; This function calls:
  8234 ;;		_Sensor_isCalibrated
  8235 ;;		_Sensor_isCalibratingAcqTime
  8236 ;; This function is called by:
  8237 ;;		_Sensor_Acq_ExecutePacket
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           
  8242                           ;psect for function _Sensor_loadADCSettings
  8243  04F8                     _Sensor_loadADCSettings:	
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8247                           ;Sensor_loadADCSettings@sensor stored from wreg
  8248  04F8  00F9               	movwf	Sensor_loadADCSettings@sensor
  8249                           
  8250                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 446
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     if (sensor == ((void*)0))
  8251  04F9  0879               	movf	Sensor_loadADCSettings@sensor,w
  8252  04FA  1903               	btfsc	3,2
  8253  04FB  0008               	return
  8254                           
  8255                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  8256  04FC  0872               	movf	Sensor_loadADCSettings@adc_index,w
  8257  04FD  1D03               	btfss	3,2
  8258  04FE  2D02               	goto	l4150
  8259  04FF  01F6               	clrf	_Sensor_loadADCSettings$1228
  8260  0500  01F7               	clrf	_Sensor_loadADCSettings$1228+1
  8261  0501  2D06               	goto	l845
  8262  0502                     l4150:	
  8263  0502  3080               	movlw	128
  8264  0503  00F6               	movwf	_Sensor_loadADCSettings$1228
  8265  0504  3000               	movlw	0
  8266  0505  00F7               	movwf	_Sensor_loadADCSettings$1228+1
  8267  0506                     l845:	
  8268  0506  0876               	movf	_Sensor_loadADCSettings$1228,w
  8269  0507  00F3               	movwf	??_Sensor_loadADCSettings
  8270  0508  0873               	movf	??_Sensor_loadADCSettings,w
  8271  0509  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  8272                           
  8273                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  8274  050A  0A79               	incf	Sensor_loadADCSettings@sensor,w
  8275  050B  0086               	movwf	6
  8276  050C  3001               	movlw	1	; select bank2/3
  8277  050D  0087               	movwf	7
  8278  050E  0801               	movf	1,w
  8279  050F  00F3               	movwf	??_Sensor_loadADCSettings
  8280  0510  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8281  0511  3E11               	addlw	17
  8282  0512  00F4               	movwf	??_Sensor_loadADCSettings+1
  8283  0513  01F5               	clrf	??_Sensor_loadADCSettings+2
  8284  0514  3007               	movlw	7
  8285  0515  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8286  0516  0874               	movf	??_Sensor_loadADCSettings+1,w
  8287  0517  0086               	movwf	6
  8288  0518  0875               	movf	??_Sensor_loadADCSettings+2,w
  8289  0519  0087               	movwf	7
  8290  051A  0873               	movf	??_Sensor_loadADCSettings,w
  8291  051B  0081               	movwf	1
  8292                           
  8293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  8294  051C  0879               	movf	Sensor_loadADCSettings@sensor,w
  8295  051D  3E05               	addlw	5
  8296  051E  0086               	movwf	6
  8297  051F  3001               	movlw	1	; select bank2/3
  8298  0520  0087               	movwf	7
  8299  0521  0801               	movf	1,w
  8300  0522  00F3               	movwf	??_Sensor_loadADCSettings
  8301  0523  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8302  0524  3E19               	addlw	25
  8303  0525  00F4               	movwf	??_Sensor_loadADCSettings+1
  8304  0526  01F5               	clrf	??_Sensor_loadADCSettings+2
  8305  0527  3007               	movlw	7
  8306  0528  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8307  0529  0874               	movf	??_Sensor_loadADCSettings+1,w
  8308  052A  0086               	movwf	6
  8309  052B  0875               	movf	??_Sensor_loadADCSettings+2,w
  8310  052C  0087               	movwf	7
  8311  052D  0873               	movf	??_Sensor_loadADCSettings,w
  8312  052E  0081               	movwf	1
  8313                           
  8314                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 454:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  8315  052F  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8316  0530  3E13               	addlw	19
  8317  0531  00F3               	movwf	??_Sensor_loadADCSettings
  8318  0532  01F4               	clrf	??_Sensor_loadADCSettings+1
  8319  0533  3007               	movlw	7
  8320  0534  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8321  0535  0873               	movf	??_Sensor_loadADCSettings,w
  8322  0536  0086               	movwf	6
  8323  0537  0874               	movf	??_Sensor_loadADCSettings+1,w
  8324  0538  0087               	movwf	7
  8325  0539  3050               	movlw	80
  8326  053A  0081               	movwf	1
  8327                           
  8328                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  8329  053B  30FE               	movlw	254
  8330  053C  00F3               	movwf	??_Sensor_loadADCSettings
  8331  053D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8332  053E  3E18               	addlw	24
  8333  053F  0086               	movwf	6
  8334  0540  0187               	clrf	7
  8335  0541  3007               	movlw	7
  8336  0542  3D87               	addwfc	7,f
  8337  0543  0873               	movf	??_Sensor_loadADCSettings,w
  8338  0544  0581               	andwf	1,f
  8339                           
  8340                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:     if (Sensor_isCalibrated(sensor))
  8341  0545  0879               	movf	Sensor_loadADCSettings@sensor,w
  8342  0546  3194  24B9  3184   	fcall	_Sensor_isCalibrated
  8343  0549  3A00               	xorlw	0
  8344  054A  1903               	skipnz
  8345  054B  2D60               	goto	l4164
  8346                           
  8347                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 459:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  8348  054C  0879               	movf	Sensor_loadADCSettings@sensor,w
  8349  054D  3E02               	addlw	2
  8350  054E  0086               	movwf	6
  8351  054F  3001               	movlw	1	; select bank2/3
  8352  0550  0087               	movwf	7
  8353  0551  0801               	movf	1,w
  8354  0552  00F3               	movwf	??_Sensor_loadADCSettings
  8355  0553  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8356  0554  3E16               	addlw	22
  8357  0555  00F4               	movwf	??_Sensor_loadADCSettings+1
  8358  0556  01F5               	clrf	??_Sensor_loadADCSettings+2
  8359  0557  3007               	movlw	7
  8360  0558  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8361  0559  0874               	movf	??_Sensor_loadADCSettings+1,w
  8362  055A  0086               	movwf	6
  8363  055B  0875               	movf	??_Sensor_loadADCSettings+2,w
  8364  055C  0087               	movwf	7
  8365  055D  0873               	movf	??_Sensor_loadADCSettings,w
  8366  055E  0081               	movwf	1
  8367  055F  2D73               	goto	l4168
  8368  0560                     l4164:	
  8369                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  8370                           
  8371                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  8372                           
  8373                           
  8374                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 464:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  8375  0560  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8376  0561  3E16               	addlw	22
  8377  0562  00F3               	movwf	??_Sensor_loadADCSettings
  8378  0563  01F4               	clrf	??_Sensor_loadADCSettings+1
  8379  0564  3007               	movlw	7
  8380  0565  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8381  0566  0873               	movf	??_Sensor_loadADCSettings,w
  8382  0567  0086               	movwf	6
  8383  0568  0874               	movf	??_Sensor_loadADCSettings+1,w
  8384  0569  0087               	movwf	7
  8385  056A  3020               	movlw	32
  8386  056B  0081               	movwf	1
  8387                           
  8388                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 465:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  8389  056C  0879               	movf	Sensor_loadADCSettings@sensor,w
  8390  056D  3194  24B0  3184   	fcall	_Sensor_isCalibratingAcqTime
  8391  0570  3A00               	xorlw	0
  8392  0571  1903               	skipnz
  8393  0572  2D86               	goto	l4170
  8394  0573                     l4168:	
  8395                           
  8396                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 466:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  8397  0573  0879               	movf	Sensor_loadADCSettings@sensor,w
  8398  0574  3E03               	addlw	3
  8399  0575  0086               	movwf	6
  8400  0576  3001               	movlw	1	; select bank2/3
  8401  0577  0087               	movwf	7
  8402  0578  0801               	movf	1,w
  8403  0579  00F3               	movwf	??_Sensor_loadADCSettings
  8404  057A  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8405  057B  3E17               	addlw	23
  8406  057C  00F4               	movwf	??_Sensor_loadADCSettings+1
  8407  057D  01F5               	clrf	??_Sensor_loadADCSettings+2
  8408  057E  3007               	movlw	7
  8409  057F  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8410  0580  0874               	movf	??_Sensor_loadADCSettings+1,w
  8411  0581  0086               	movwf	6
  8412  0582  0875               	movf	??_Sensor_loadADCSettings+2,w
  8413  0583  0087               	movwf	7
  8414  0584  0873               	movf	??_Sensor_loadADCSettings,w
  8415  0585  2D91               	goto	L7
  8416  0586                     l4170:	
  8417                           
  8418                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 468:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  8419  0586  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8420  0587  3E17               	addlw	23
  8421  0588  00F3               	movwf	??_Sensor_loadADCSettings
  8422  0589  01F4               	clrf	??_Sensor_loadADCSettings+1
  8423  058A  3007               	movlw	7
  8424  058B  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8425  058C  0873               	movf	??_Sensor_loadADCSettings,w
  8426  058D  0086               	movwf	6
  8427  058E  0874               	movf	??_Sensor_loadADCSettings+1,w
  8428  058F  0087               	movwf	7
  8429  0590  3020               	movlw	32
  8430  0591                     L7:	
  8431  0591  0081               	movwf	1
  8432                           
  8433                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  8434                           
  8435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 469:     }
  8436  0592  0879               	movf	Sensor_loadADCSettings@sensor,w
  8437  0593  3E04               	addlw	4
  8438  0594  0086               	movwf	6
  8439  0595  3001               	movlw	1	; select bank2/3
  8440  0596  0087               	movwf	7
  8441  0597  0801               	movf	1,w
  8442  0598  00F3               	movwf	??_Sensor_loadADCSettings
  8443  0599  01F4               	clrf	??_Sensor_loadADCSettings+1
  8444  059A  3009               	movlw	9
  8445  059B                     u2365:	
  8446  059B  35F3               	lslf	??_Sensor_loadADCSettings,f
  8447  059C  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  8448  059D  0B89               	decfsz	9,f
  8449  059E  2D9B               	goto	u2365
  8450  059F  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  8451  05A0  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  8452  05A1  0086               	movwf	6
  8453  05A2  0187               	clrf	7
  8454  05A3  0873               	movf	??_Sensor_loadADCSettings,w
  8455  05A4  3FC0               	movwi [0]fsr1
  8456  05A5  0874               	movf	??_Sensor_loadADCSettings+1,w
  8457  05A6  3FC1               	movwi [1]fsr1
  8458  05A7  0008               	return
  8459  05A8                     __end_of_Sensor_loadADCSettings:	
  8460                           
  8461                           	psect	text41
  8462  14B9                     __ptext41:	
  8463 ;; *************** function _Sensor_isCalibrated *****************
  8464 ;; Defined at:
  8465 ;;		line 928 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  sensor          1    wreg     PTR struct .
  8468 ;;		 -> mtouch_sensor(36), 
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;  sensor          1    1[COMMON] PTR struct .
  8471 ;;		 -> mtouch_sensor(36), 
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      _Bool 
  8474 ;; Registers used:
  8475 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8481 ;;      Params:         0       0       0       0       0       0       0       0
  8482 ;;      Locals:         1       0       0       0       0       0       0       0
  8483 ;;      Temps:          0       0       0       0       0       0       0       0
  8484 ;;      Totals:         1       0       0       0       0       0       0       0
  8485 ;;Total ram usage:        1 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    4
  8488 ;; This function calls:
  8489 ;;		Nothing
  8490 ;; This function is called by:
  8491 ;;		_Sensor_Acquisition
  8492 ;;		_Sensor_loadADCSettings
  8493 ;;		_Sensor_Acq_ExecutePacket
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           
  8498                           ;psect for function _Sensor_isCalibrated
  8499  14B9                     _Sensor_isCalibrated:	
  8500                           
  8501                           ;incstack = 0
  8502                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8503                           ;Sensor_isCalibrated@sensor stored from wreg
  8504  14B9  00F1               	movwf	Sensor_isCalibrated@sensor
  8505                           
  8506                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          929: {;mcc_generated_files/mtouch/mtouch_sensor.c: 930:     return (_Bool)sensor->calibr
      +                          ated;
  8507  14BA  0871               	movf	Sensor_isCalibrated@sensor,w
  8508  14BB  3E08               	addlw	8
  8509  14BC  0086               	movwf	6
  8510  14BD  3001               	movlw	1	; select bank2/3
  8511  14BE  0087               	movwf	7
  8512  14BF  0C01               	rrf	1,w
  8513  14C0  0C89               	rrf	9,f
  8514  14C1  3901               	andlw	1
  8515  14C2  0008               	return
  8516  14C3                     __end_of_Sensor_isCalibrated:	
  8517                           
  8518                           	psect	text42
  8519  1573                     __ptext42:	
  8520 ;; *************** function _Sensor_isEnabled *****************
  8521 ;; Defined at:
  8522 ;;		line 863 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8523 ;; Parameters:    Size  Location     Type
  8524 ;;  sensor          1    wreg     PTR struct .
  8525 ;;		 -> mtouch_sensor(36), 
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  sensor          1    2[COMMON] PTR struct .
  8528 ;;		 -> mtouch_sensor(36), 
  8529 ;; Return value:  Size  Location     Type
  8530 ;;                  1    wreg      _Bool 
  8531 ;; Registers used:
  8532 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8538 ;;      Params:         0       0       0       0       0       0       0       0
  8539 ;;      Locals:         1       0       0       0       0       0       0       0
  8540 ;;      Temps:          1       0       0       0       0       0       0       0
  8541 ;;      Totals:         2       0       0       0       0       0       0       0
  8542 ;;Total ram usage:        2 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:    4
  8545 ;; This function calls:
  8546 ;;		Nothing
  8547 ;; This function is called by:
  8548 ;;		_Sensor_Service
  8549 ;;		_Sensor_postAcquisitionProcess
  8550 ;;		_Sensor_Acq_ExecutePacket
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           
  8555                           ;psect for function _Sensor_isEnabled
  8556  1573                     _Sensor_isEnabled:	
  8557                           
  8558                           ;incstack = 0
  8559                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8560                           ;Sensor_isEnabled@sensor stored from wreg
  8561  1573  00F2               	movwf	Sensor_isEnabled@sensor
  8562                           
  8563                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 863: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 864: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 865:     if(sensor!=((void*)0))
  8564  1574  0872               	movf	Sensor_isEnabled@sensor,w
  8565  1575  1903               	btfsc	3,2
  8566  1576  2D82               	goto	l4128
  8567                           
  8568                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 866:         return (_Bool)sensor->enabled;
  8569  1577  0872               	movf	Sensor_isEnabled@sensor,w
  8570  1578  3E08               	addlw	8
  8571  1579  0086               	movwf	6
  8572  157A  3001               	movlw	1	; select bank2/3
  8573  157B  0087               	movwf	7
  8574  157C  0C01               	rrf	1,w
  8575  157D  00F1               	movwf	??_Sensor_isEnabled
  8576  157E  0CF1               	rrf	??_Sensor_isEnabled,f
  8577  157F  0C71               	rrf	??_Sensor_isEnabled,w
  8578  1580  3901               	andlw	1
  8579  1581  0008               	return
  8580  1582                     l4128:	
  8581                           
  8582                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868:         return 0;
  8583  1582  3000               	movlw	0
  8584  1583  0008               	return
  8585  1584                     __end_of_Sensor_isEnabled:	
  8586                           
  8587                           	psect	text43
  8588  14F7                     __ptext43:	
  8589 ;; *************** function _Sensor_isActive *****************
  8590 ;; Defined at:
  8591 ;;		line 890 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;  sensor          1    wreg     PTR struct .
  8594 ;;		 -> mtouch_sensor(36), 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  sensor          1    1[COMMON] PTR struct .
  8597 ;;		 -> mtouch_sensor(36), 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  1    wreg      _Bool 
  8600 ;; Registers used:
  8601 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8607 ;;      Params:         0       0       0       0       0       0       0       0
  8608 ;;      Locals:         1       0       0       0       0       0       0       0
  8609 ;;      Temps:          0       0       0       0       0       0       0       0
  8610 ;;      Totals:         1       0       0       0       0       0       0       0
  8611 ;;Total ram usage:        1 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    4
  8614 ;; This function calls:
  8615 ;;		Nothing
  8616 ;; This function is called by:
  8617 ;;		_Sensor_Acquisition
  8618 ;;		_Sensor_Acq_ExecutePacket
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           
  8623                           ;psect for function _Sensor_isActive
  8624  14F7                     _Sensor_isActive:	
  8625                           
  8626                           ;incstack = 0
  8627                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8628                           ;Sensor_isActive@sensor stored from wreg
  8629  14F7  00F1               	movwf	Sensor_isActive@sensor
  8630                           
  8631                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 890: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 891:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 892:     if(sensor == ((void*)0))
  8632  14F8  0871               	movf	Sensor_isActive@sensor,w
  8633  14F9  1D03               	btfss	3,2
  8634  14FA  2CFD               	goto	l4138
  8635                           
  8636                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 893:         return 0;
  8637  14FB  3000               	movlw	0
  8638  14FC  0008               	return
  8639  14FD                     l4138:	
  8640                           
  8641                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 895:     return (_Bool)sensor->active;
  8642  14FD  0871               	movf	Sensor_isActive@sensor,w
  8643  14FE  3E08               	addlw	8
  8644  14FF  0086               	movwf	6
  8645  1500  3001               	movlw	1	; select bank2/3
  8646  1501  0087               	movwf	7
  8647  1502  0C01               	rrf	1,w
  8648  1503  3901               	andlw	1
  8649  1504  0008               	return
  8650  1505                     __end_of_Sensor_isActive:	
  8651                           
  8652                           	psect	text44
  8653  0D9F                     __ptext44:	
  8654 ;; *************** function _Sensor_autoCalibration *****************
  8655 ;; Defined at:
  8656 ;;		line 696 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8657 ;; Parameters:    Size  Location     Type
  8658 ;;  sensor          1    wreg     PTR struct .
  8659 ;;		 -> mtouch_sensor(36), 
  8660 ;; Auto vars:     Size  Location     Type
  8661 ;;  sensor          1   10[COMMON] PTR struct .
  8662 ;;		 -> mtouch_sensor(36), 
  8663 ;;  adcIndex        1    9[COMMON] unsigned char 
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  1    wreg      void 
  8666 ;; Registers used:
  8667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8673 ;;      Params:         0       0       0       0       0       0       0       0
  8674 ;;      Locals:         2       0       0       0       0       0       0       0
  8675 ;;      Temps:          4       0       0       0       0       0       0       0
  8676 ;;      Totals:         6       0       0       0       0       0       0       0
  8677 ;;Total ram usage:        6 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    5
  8680 ;; This function calls:
  8681 ;;		_Sensor_getScanGroupIndex
  8682 ;;		_Sensor_isCalibratingAcqTime
  8683 ;;		_Sensor_setCalibratAcqTime
  8684 ;;		_Sensor_setCalibrated
  8685 ;;		_abs
  8686 ;; This function is called by:
  8687 ;;		_Sensor_Acq_ExecutePacket
  8688 ;; This function uses a non-reentrant model
  8689 ;;
  8690                           
  8691                           
  8692                           ;psect for function _Sensor_autoCalibration
  8693  0D9F                     _Sensor_autoCalibration:	
  8694                           
  8695                           ;incstack = 0
  8696                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8697                           ;Sensor_autoCalibration@sensor stored from wreg
  8698  0D9F  00FA               	movwf	Sensor_autoCalibration@sensor
  8699                           
  8700                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 696: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 697: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 698:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  8701  0DA0  087A               	movf	Sensor_autoCalibration@sensor,w
  8702  0DA1  3188  2025  318D   	fcall	_Sensor_getScanGroupIndex
  8703  0DA4  00F5               	movwf	??_Sensor_autoCalibration
  8704  0DA5  0875               	movf	??_Sensor_autoCalibration,w
  8705  0DA6  00F9               	movwf	Sensor_autoCalibration@adcIndex
  8706                           
  8707                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  8708  0DA7  087A               	movf	Sensor_autoCalibration@sensor,w
  8709  0DA8  3194  24B0  318D   	fcall	_Sensor_isCalibratingAcqTime
  8710  0DAB  3A00               	xorlw	0
  8711  0DAC  1D03               	skipz
  8712  0DAD  2DE0               	goto	l4184
  8713                           
  8714                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 702:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  8715  0DAE  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  8716  0DAF  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  8717  0DB0  0086               	movwf	6
  8718  0DB1  0187               	clrf	7
  8719  0DB2  3F40               	moviw [0]fsr1
  8720  0DB3  00F5               	movwf	??_Sensor_autoCalibration
  8721  0DB4  3F41               	moviw [1]fsr1
  8722  0DB5  00F6               	movwf	??_Sensor_autoCalibration+1
  8723  0DB6  087A               	movf	Sensor_autoCalibration@sensor,w
  8724  0DB7  3E04               	addlw	4
  8725  0DB8  0086               	movwf	6
  8726  0DB9  3001               	movlw	1	; select bank2/3
  8727  0DBA  0087               	movwf	7
  8728  0DBB  0801               	movf	1,w
  8729  0DBC  00F7               	movwf	??_Sensor_autoCalibration+2
  8730  0DBD  01F8               	clrf	??_Sensor_autoCalibration+3
  8731  0DBE  3009               	movlw	9
  8732  0DBF                     u2385:	
  8733  0DBF  35F7               	lslf	??_Sensor_autoCalibration+2,f
  8734  0DC0  0DF8               	rlf	??_Sensor_autoCalibration+3,f
  8735  0DC1  0B89               	decfsz	9,f
  8736  0DC2  2DBF               	goto	u2385
  8737  0DC3  0876               	movf	??_Sensor_autoCalibration+1,w
  8738  0DC4  0278               	subwf	??_Sensor_autoCalibration+3,w
  8739  0DC5  1D03               	skipz
  8740  0DC6  2DC9               	goto	u2395
  8741  0DC7  0875               	movf	??_Sensor_autoCalibration,w
  8742  0DC8  0277               	subwf	??_Sensor_autoCalibration+2,w
  8743  0DC9                     u2395:	
  8744  0DC9  1803               	skipnc
  8745  0DCA  2DDC               	goto	l4182
  8746                           
  8747                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 703:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 704:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  8748  0DCB  3001               	movlw	1
  8749  0DCC  00F5               	movwf	??_Sensor_autoCalibration
  8750  0DCD  087A               	movf	Sensor_autoCalibration@sensor,w
  8751  0DCE  3E05               	addlw	5
  8752  0DCF  0086               	movwf	6
  8753  0DD0  3001               	movlw	1	; select bank2/3
  8754  0DD1  0087               	movwf	7
  8755  0DD2  0875               	movf	??_Sensor_autoCalibration,w
  8756  0DD3  0781               	addwf	1,f
  8757  0DD4  300F               	movlw	15
  8758  0DD5  0201               	subwf	1,w
  8759  0DD6  1C03               	skipc
  8760  0DD7  0008               	return
  8761                           
  8762                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  8763  0DD8  087A               	movf	Sensor_autoCalibration@sensor,w
  8764  0DD9  3195  2522         	fcall	_Sensor_setCalibratAcqTime
  8765  0DDB  0008               	return
  8766  0DDC                     l4182:	
  8767                           
  8768                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 708:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 709:              Sensor_setCalibratAcqTime(sensor);
  8769  0DDC  087A               	movf	Sensor_autoCalibration@sensor,w
  8770  0DDD  3195  2522         	fcall	_Sensor_setCalibratAcqTime
  8771  0DDF  0008               	return
  8772  0DE0                     l4184:	
  8773                           
  8774                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 713:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 714:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  8775  0DE0  087A               	movf	Sensor_autoCalibration@sensor,w
  8776  0DE1  3E04               	addlw	4
  8777  0DE2  0086               	movwf	6
  8778  0DE3  3001               	movlw	1	; select bank2/3
  8779  0DE4  0087               	movwf	7
  8780  0DE5  0801               	movf	1,w
  8781  0DE6  00F5               	movwf	??_Sensor_autoCalibration
  8782  0DE7  01F6               	clrf	??_Sensor_autoCalibration+1
  8783  0DE8  35F5               	lslf	??_Sensor_autoCalibration,f
  8784  0DE9  0DF6               	rlf	??_Sensor_autoCalibration+1,f
  8785  0DEA  087A               	movf	Sensor_autoCalibration@sensor,w
  8786  0DEB  3E06               	addlw	6
  8787  0DEC  0086               	movwf	6
  8788  0DED  3001               	movlw	1	; select bank2/3
  8789  0DEE  0087               	movwf	7
  8790  0DEF  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  8791  0DF0  3E5C               	addlw	(low (_packet_sample| 0))& (0+255)
  8792  0DF1  0084               	movwf	4
  8793  0DF2  0185               	clrf	5
  8794  0DF3  3F40               	moviw [0]fsr1
  8795  0DF4  0200               	subwf	0,w
  8796  0DF5  00F1               	movwf	abs@a
  8797  0DF6  3101               	addfsr 0,1
  8798  0DF7  3F41               	moviw [1]fsr1
  8799  0DF8  3B00               	subwfb	0,w
  8800  0DF9  00F2               	movwf	abs@a+1
  8801  0DFA  3196  263B  318D   	fcall	_abs
  8802  0DFD  0876               	movf	??_Sensor_autoCalibration+1,w
  8803  0DFE  0272               	subwf	?_abs+1,w
  8804  0DFF  1D03               	skipz
  8805  0E00  2E03               	goto	u2415
  8806  0E01  0875               	movf	??_Sensor_autoCalibration,w
  8807  0E02  0271               	subwf	?_abs,w
  8808  0E03                     u2415:	
  8809  0E03  1803               	skipnc
  8810  0E04  2E12               	goto	l4190
  8811                           
  8812                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 715:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  8813  0E05  3020               	movlw	32
  8814  0E06  00F5               	movwf	??_Sensor_autoCalibration
  8815  0E07  087A               	movf	Sensor_autoCalibration@sensor,w
  8816  0E08  3E02               	addlw	2
  8817  0E09  0086               	movwf	6
  8818  0E0A  3001               	movlw	1	; select bank2/3
  8819  0E0B  0087               	movwf	7
  8820  0E0C  0875               	movf	??_Sensor_autoCalibration,w
  8821  0E0D  0081               	movwf	1
  8822                           
  8823                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             Sensor_setCalibrated(senso
      +                          r);
  8824  0E0E  087A               	movf	Sensor_autoCalibration@sensor,w
  8825  0E0F  3194  24E9         	fcall	_Sensor_setCalibrated
  8826                           
  8827                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:         }
  8828  0E11  0008               	return
  8829  0E12                     l4190:	
  8830                           
  8831                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 724:             sensor->acquisition_time += (uint8_t)2;
  8832  0E12  3002               	movlw	2
  8833  0E13  00F5               	movwf	??_Sensor_autoCalibration
  8834  0E14  087A               	movf	Sensor_autoCalibration@sensor,w
  8835  0E15  3E03               	addlw	3
  8836  0E16  0086               	movwf	6
  8837  0E17  3001               	movlw	1	; select bank2/3
  8838  0E18  0087               	movwf	7
  8839  0E19  0875               	movf	??_Sensor_autoCalibration,w
  8840  0E1A  0781               	addwf	1,f
  8841                           
  8842                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 725:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  8843  0E1B  087A               	movf	Sensor_autoCalibration@sensor,w
  8844  0E1C  3E03               	addlw	3
  8845  0E1D  0086               	movwf	6
  8846  0E1E  3001               	movlw	1	; select bank2/3
  8847  0E1F  0087               	movwf	7
  8848  0E20  3020               	movlw	32
  8849  0E21  0201               	subwf	1,w
  8850  0E22  1C03               	skipc
  8851  0E23  0008               	return
  8852                           
  8853                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 726:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 727:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  8854  0E24  3020               	movlw	32
  8855  0E25  00F5               	movwf	??_Sensor_autoCalibration
  8856  0E26  087A               	movf	Sensor_autoCalibration@sensor,w
  8857  0E27  3E02               	addlw	2
  8858  0E28  0086               	movwf	6
  8859  0E29  3001               	movlw	1	; select bank2/3
  8860  0E2A  0087               	movwf	7
  8861  0E2B  0875               	movf	??_Sensor_autoCalibration,w
  8862  0E2C  0081               	movwf	1
  8863                           
  8864                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:                 Sensor_setCalibrated(s
      +                          ensor);
  8865  0E2D  087A               	movf	Sensor_autoCalibration@sensor,w
  8866  0E2E  3194  24E9         	fcall	_Sensor_setCalibrated
  8867  0E30  0008               	return
  8868  0E31                     __end_of_Sensor_autoCalibration:	
  8869                           
  8870                           	psect	text45
  8871  163B                     __ptext45:	
  8872 ;; *************** function _abs *****************
  8873 ;; Defined at:
  8874 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  8875 ;; Parameters:    Size  Location     Type
  8876 ;;  a               2    1[COMMON] int 
  8877 ;; Auto vars:     Size  Location     Type
  8878 ;;		None
  8879 ;; Return value:  Size  Location     Type
  8880 ;;                  2    1[COMMON] int 
  8881 ;; Registers used:
  8882 ;;		wreg, status,2, status,0
  8883 ;; Tracked objects:
  8884 ;;		On entry : 0/0
  8885 ;;		On exit  : 0/0
  8886 ;;		Unchanged: 0/0
  8887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8888 ;;      Params:         2       0       0       0       0       0       0       0
  8889 ;;      Locals:         0       0       0       0       0       0       0       0
  8890 ;;      Temps:          2       0       0       0       0       0       0       0
  8891 ;;      Totals:         4       0       0       0       0       0       0       0
  8892 ;;Total ram usage:        4 bytes
  8893 ;; Hardware stack levels used:    1
  8894 ;; Hardware stack levels required when called:    4
  8895 ;; This function calls:
  8896 ;;		Nothing
  8897 ;; This function is called by:
  8898 ;;		_Sensor_postAcquisitionProcess
  8899 ;;		_Sensor_Acq_ExecutePacket
  8900 ;;		_Sensor_autoCalibration
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           
  8905                           ;psect for function _abs
  8906  163B                     _abs:	
  8907                           
  8908                           ;incstack = 0
  8909                           ; Regs used in _abs: [wreg+status,2+status,0]
  8910  163B  0872               	movf	abs@a+1,w
  8911  163C  3A80               	xorlw	128
  8912  163D  00F3               	movwf	??_abs
  8913  163E  3080               	movlw	128
  8914  163F  0273               	subwf	??_abs,w
  8915  1640  1D03               	skipz
  8916  1641  2E44               	goto	u2285
  8917  1642  3001               	movlw	1
  8918  1643  0271               	subwf	abs@a,w
  8919  1644                     u2285:	
  8920  1644  1803               	skipnc
  8921  1645  0008               	return
  8922  1646  0971               	comf	abs@a,w
  8923  1647  00F3               	movwf	??_abs
  8924  1648  0972               	comf	abs@a+1,w
  8925  1649  00F4               	movwf	??_abs+1
  8926  164A  0AF3               	incf	??_abs,f
  8927  164B  1903               	skipnz
  8928  164C  0AF4               	incf	??_abs+1,f
  8929  164D  0873               	movf	??_abs,w
  8930  164E  00F1               	movwf	?_abs
  8931  164F  0874               	movf	??_abs+1,w
  8932  1650  00F2               	movwf	?_abs+1
  8933  1651  0008               	return
  8934  1652                     __end_of_abs:	
  8935                           
  8936                           	psect	text46
  8937  14E9                     __ptext46:	
  8938 ;; *************** function _Sensor_setCalibrated *****************
  8939 ;; Defined at:
  8940 ;;		line 933 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;  sensor          1    wreg     PTR struct .
  8943 ;;		 -> mtouch_sensor(36), 
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;  sensor          1    1[COMMON] PTR struct .
  8946 ;;		 -> mtouch_sensor(36), 
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  1    wreg      void 
  8949 ;; Registers used:
  8950 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8956 ;;      Params:         0       0       0       0       0       0       0       0
  8957 ;;      Locals:         1       0       0       0       0       0       0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0
  8959 ;;      Totals:         1       0       0       0       0       0       0       0
  8960 ;;Total ram usage:        1 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    4
  8963 ;; This function calls:
  8964 ;;		Nothing
  8965 ;; This function is called by:
  8966 ;;		_Sensor_autoCalibration
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           
  8971                           ;psect for function _Sensor_setCalibrated
  8972  14E9                     _Sensor_setCalibrated:	
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8976                           ;Sensor_setCalibrated@sensor stored from wreg
  8977  14E9  00F1               	movwf	Sensor_setCalibrated@sensor
  8978                           
  8979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 933: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          934: {;mcc_generated_files/mtouch/mtouch_sensor.c: 935:     sensor->calibrated = 1;
  8980  14EA  0871               	movf	Sensor_setCalibrated@sensor,w
  8981  14EB  3E08               	addlw	8
  8982  14EC  0086               	movwf	6
  8983  14ED  3001               	movlw	1	; select bank2/3
  8984  14EE  0087               	movwf	7
  8985  14EF  1501               	bsf	1,2
  8986                           
  8987                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 936:     sensor->acqTime_cal = 0;
  8988  14F0  0871               	movf	Sensor_setCalibrated@sensor,w
  8989  14F1  3E08               	addlw	8
  8990  14F2  0086               	movwf	6
  8991  14F3  3001               	movlw	1	; select bank2/3
  8992  14F4  0087               	movwf	7
  8993  14F5  1201               	bcf	1,4
  8994  14F6  0008               	return
  8995  14F7                     __end_of_Sensor_setCalibrated:	
  8996                           
  8997                           	psect	text47
  8998  1522                     __ptext47:	
  8999 ;; *************** function _Sensor_setCalibratAcqTime *****************
  9000 ;; Defined at:
  9001 ;;		line 939 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9002 ;; Parameters:    Size  Location     Type
  9003 ;;  sensor          1    wreg     PTR struct .
  9004 ;;		 -> mtouch_sensor(36), 
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  sensor          1    1[COMMON] PTR struct .
  9007 ;;		 -> mtouch_sensor(36), 
  9008 ;; Return value:  Size  Location     Type
  9009 ;;                  1    wreg      void 
  9010 ;; Registers used:
  9011 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9012 ;; Tracked objects:
  9013 ;;		On entry : 0/0
  9014 ;;		On exit  : 0/0
  9015 ;;		Unchanged: 0/0
  9016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9017 ;;      Params:         0       0       0       0       0       0       0       0
  9018 ;;      Locals:         1       0       0       0       0       0       0       0
  9019 ;;      Temps:          0       0       0       0       0       0       0       0
  9020 ;;      Totals:         1       0       0       0       0       0       0       0
  9021 ;;Total ram usage:        1 bytes
  9022 ;; Hardware stack levels used:    1
  9023 ;; Hardware stack levels required when called:    4
  9024 ;; This function calls:
  9025 ;;		Nothing
  9026 ;; This function is called by:
  9027 ;;		_Sensor_autoCalibration
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           
  9032                           ;psect for function _Sensor_setCalibratAcqTime
  9033  1522                     _Sensor_setCalibratAcqTime:	
  9034                           
  9035                           ;incstack = 0
  9036                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  9037                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  9038  1522  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
  9039                           
  9040                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 939: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 940: {;mcc_generated_files/mtouch/mtouch_sensor.c: 941:     sensor->acqTime_cal = 1
      +                          ;
  9041  1523  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  9042  1524  3E08               	addlw	8
  9043  1525  0086               	movwf	6
  9044  1526  3001               	movlw	1	; select bank2/3
  9045  1527  0087               	movwf	7
  9046  1528  1601               	bsf	1,4
  9047                           
  9048                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 942:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  9049  1529  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  9050  152A  3E03               	addlw	3
  9051  152B  0086               	movwf	6
  9052  152C  3001               	movlw	1	; select bank2/3
  9053  152D  0087               	movwf	7
  9054  152E  0181               	clrf	1
  9055  152F  0A81               	incf	1,f
  9056  1530  0008               	return
  9057  1531                     __end_of_Sensor_setCalibratAcqTime:	
  9058                           
  9059                           	psect	text48
  9060  14B0                     __ptext48:	
  9061 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  9062 ;; Defined at:
  9063 ;;		line 945 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;  sensor          1    wreg     PTR struct .
  9066 ;;		 -> mtouch_sensor(36), 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;  sensor          1    1[COMMON] PTR struct .
  9069 ;;		 -> mtouch_sensor(36), 
  9070 ;; Return value:  Size  Location     Type
  9071 ;;                  1    wreg      _Bool 
  9072 ;; Registers used:
  9073 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9074 ;; Tracked objects:
  9075 ;;		On entry : 0/0
  9076 ;;		On exit  : 0/0
  9077 ;;		Unchanged: 0/0
  9078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9079 ;;      Params:         0       0       0       0       0       0       0       0
  9080 ;;      Locals:         1       0       0       0       0       0       0       0
  9081 ;;      Temps:          0       0       0       0       0       0       0       0
  9082 ;;      Totals:         1       0       0       0       0       0       0       0
  9083 ;;Total ram usage:        1 bytes
  9084 ;; Hardware stack levels used:    1
  9085 ;; Hardware stack levels required when called:    4
  9086 ;; This function calls:
  9087 ;;		Nothing
  9088 ;; This function is called by:
  9089 ;;		_Sensor_loadADCSettings
  9090 ;;		_Sensor_autoCalibration
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           
  9095                           ;psect for function _Sensor_isCalibratingAcqTime
  9096  14B0                     _Sensor_isCalibratingAcqTime:	
  9097                           
  9098                           ;incstack = 0
  9099                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  9100                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  9101  14B0  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
  9102                           
  9103                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 945: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 946: {;mcc_generated_files/mtouch/mtouch_sensor.c: 947:     return (_Bool)sensor
      +                          ->acqTime_cal;
  9104  14B1  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
  9105  14B2  3E08               	addlw	8
  9106  14B3  0086               	movwf	6
  9107  14B4  3001               	movlw	1	; select bank2/3
  9108  14B5  0087               	movwf	7
  9109  14B6  0E01               	swapf	1,w
  9110  14B7  3901               	andlw	1
  9111  14B8  0008               	return
  9112  14B9                     __end_of_Sensor_isCalibratingAcqTime:	
  9113                           
  9114                           	psect	text49
  9115  0825                     __ptext49:	
  9116 ;; *************** function _Sensor_getScanGroupIndex *****************
  9117 ;; Defined at:
  9118 ;;		line 362 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;  sensor          1    wreg     PTR struct .
  9121 ;;		 -> mtouch_sensor(36), 
  9122 ;; Auto vars:     Size  Location     Type
  9123 ;;  sensor          1    3[COMMON] PTR struct .
  9124 ;;		 -> mtouch_sensor(36), 
  9125 ;;  sensorGroup     1    4[COMMON] unsigned char 
  9126 ;; Return value:  Size  Location     Type
  9127 ;;                  1    wreg      unsigned char 
  9128 ;; Registers used:
  9129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9135 ;;      Params:         0       0       0       0       0       0       0       0
  9136 ;;      Locals:         2       0       0       0       0       0       0       0
  9137 ;;      Temps:          2       0       0       0       0       0       0       0
  9138 ;;      Totals:         4       0       0       0       0       0       0       0
  9139 ;;Total ram usage:        4 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    4
  9142 ;; This function calls:
  9143 ;;		Nothing
  9144 ;; This function is called by:
  9145 ;;		_Sensor_postAcquisitionProcess
  9146 ;;		_Sensor_autoCalibration
  9147 ;;		_Sensor_RawSample_Update
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           
  9152                           ;psect for function _Sensor_getScanGroupIndex
  9153  0825                     _Sensor_getScanGroupIndex:	
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  9157                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  9158  0825  00F3               	movwf	Sensor_getScanGroupIndex@sensor
  9159                           
  9160                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 363: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 364:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 365:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  9161  0826  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
  9162  0827                     l4048:	
  9163                           
  9164                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 366:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 367:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  9165  0827  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  9166  0828  00F1               	movwf	??_Sensor_getScanGroupIndex
  9167  0829  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  9168  082A  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  9169  082B  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  9170  082C  305E               	movlw	low (_sensor_scan_group| (0+32768))
  9171  082D  0771               	addwf	??_Sensor_getScanGroupIndex,w
  9172  082E  0084               	movwf	4
  9173  082F  3098               	movlw	high (_sensor_scan_group| (0+32768))
  9174  0830  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  9175  0831  0085               	movwf	5
  9176  0832  0800               	movf	0,w	;code access
  9177  0833  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  9178  0834  1D03               	skipz
  9179  0835  2838               	goto	l4054
  9180  0836                     l4050:	
  9181                           
  9182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 368:             return 0;
  9183  0836  3000               	movlw	0
  9184  0837  0008               	return
  9185  0838                     l4054:	
  9186                           
  9187                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 369:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  9188  0838  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  9189  0839  00F1               	movwf	??_Sensor_getScanGroupIndex
  9190  083A  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  9191  083B  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  9192  083C  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  9193  083D  305F               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  9194  083E  0771               	addwf	??_Sensor_getScanGroupIndex,w
  9195  083F  0084               	movwf	4
  9196  0840  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  9197  0841  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  9198  0842  0085               	movwf	5
  9199  0843  0800               	movf	0,w	;code access
  9200  0844  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  9201  0845  1D03               	skipz
  9202  0846  2849               	goto	l4060
  9203                           
  9204                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 370:             return 1;
  9205  0847  3001               	movlw	1
  9206  0848  0008               	return
  9207  0849                     l4060:	
  9208                           
  9209                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 371:     }
  9210  0849  3001               	movlw	1
  9211  084A  00F1               	movwf	??_Sensor_getScanGroupIndex
  9212  084B  0871               	movf	??_Sensor_getScanGroupIndex,w
  9213  084C  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  9214  084D  3002               	movlw	2
  9215  084E  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  9216  084F  1803               	btfsc	3,0
  9217  0850  2836               	goto	l4050
  9218  0851  2827               	goto	l4048
  9219  0852                     __end_of_Sensor_getScanGroupIndex:	
  9220                           
  9221                           	psect	text50
  9222  1541                     __ptext50:	
  9223 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  9224 ;; Defined at:
  9225 ;;		line 247 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;		None
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;		None
  9230 ;; Return value:  Size  Location     Type
  9231 ;;                  1    wreg      void 
  9232 ;; Registers used:
  9233 ;;		wreg, status,2, status,0
  9234 ;; Tracked objects:
  9235 ;;		On entry : 0/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9239 ;;      Params:         0       0       0       0       0       0       0       0
  9240 ;;      Locals:         0       0       0       0       0       0       0       0
  9241 ;;      Temps:          0       0       0       0       0       0       0       0
  9242 ;;      Totals:         0       0       0       0       0       0       0       0
  9243 ;;Total ram usage:        0 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:    4
  9246 ;; This function calls:
  9247 ;;		Nothing
  9248 ;; This function is called by:
  9249 ;;		_MTOUCH_Initialize
  9250 ;;		_Sensor_Acq_ExecutePacket
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           
  9255                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  9256  1541                     _MTOUCH_Sensor_Scan_Initialize:	
  9257                           
  9258                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 249:     T2CONbits.T2CKPS = 0x0;
  9259                           
  9260                           ;incstack = 0
  9261                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  9262  1541  30FC               	movlw	-4
  9263  1542  0020               	movlb	0	; select bank0
  9264  1543  059C               	andwf	28,f	;volatile
  9265                           
  9266                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 251:     AD1CON0 = (uint8_t)0;
  9267  1544  002E               	movlb	14	; select bank14
  9268  1545  0191               	clrf	17	;volatile
  9269                           
  9270                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 252:     AD2CON0 = (uint8_t)0;
  9271  1546  002F               	movlb	15	; select bank15
  9272  1547  0191               	clrf	17	;volatile
  9273                           
  9274                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 253:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  9275  1548  3090               	movlw	144
  9276  1549  002E               	movlb	14	; select bank14
  9277  154A  0092               	movwf	18	;volatile
  9278                           
  9279                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 254:     AD1CON3 = (uint8_t)0b01000000;
  9280  154B  3040               	movlw	64
  9281  154C  0094               	movwf	20	;volatile
  9282                           
  9283                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 255:     AD2CON3 = (uint8_t)0b01000000;
  9284  154D  3040               	movlw	64
  9285  154E  002F               	movlb	15	; select bank15
  9286  154F  0094               	movwf	20	;volatile
  9287  1550  0008               	return
  9288  1551                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  9289                           
  9290                           	psect	text51
  9291  1531                     __ptext51:	
  9292 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  9293 ;; Defined at:
  9294 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9295 ;; Parameters:    Size  Location     Type
  9296 ;;		None
  9297 ;; Auto vars:     Size  Location     Type
  9298 ;;  button          1   58[BANK0 ] enum E3070
  9299 ;; Return value:  Size  Location     Type
  9300 ;;                  1    wreg      void 
  9301 ;; Registers used:
  9302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9303 ;; Tracked objects:
  9304 ;;		On entry : 0/0
  9305 ;;		On exit  : 0/0
  9306 ;;		Unchanged: 0/0
  9307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9308 ;;      Params:         0       0       0       0       0       0       0       0
  9309 ;;      Locals:         0       1       0       0       0       0       0       0
  9310 ;;      Temps:          0       1       0       0       0       0       0       0
  9311 ;;      Totals:         0       2       0       0       0       0       0       0
  9312 ;;Total ram usage:        2 bytes
  9313 ;; Hardware stack levels used:    1
  9314 ;; Hardware stack levels required when called:   17
  9315 ;; This function calls:
  9316 ;;		_Button_Service
  9317 ;; This function is called by:
  9318 ;;		_MTOUCH_Service_Mainloop
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           
  9323                           ;psect for function _MTOUCH_Button_ServiceAll
  9324  1531                     _MTOUCH_Button_ServiceAll:	
  9325                           
  9326                           ;mcc_generated_files/mtouch/mtouch_button.c: 199:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 202:     for (button = 0; button < 4u; button
      +                          ++)
  9327                           
  9328                           ;incstack = 0
  9329 ;; hardware stack exceeded
  9330                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9331  1531  0020               	movlb	0	; select bank0
  9332  1532  01DA               	clrf	MTOUCH_Button_ServiceAll@button
  9333  1533                     l6504:	
  9334                           
  9335                           ;mcc_generated_files/mtouch/mtouch_button.c: 203:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 204:         Button_Service(button);
  9336  1533  085A               	movf	MTOUCH_Button_ServiceAll@button,w
  9337  1534  318A  22FA  3195   	fcall	_Button_Service
  9338                           
  9339                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     }
  9340  1537  3001               	movlw	1
  9341  1538  0020               	movlb	0	; select bank0
  9342  1539  00D9               	movwf	??_MTOUCH_Button_ServiceAll
  9343  153A  0859               	movf	??_MTOUCH_Button_ServiceAll,w
  9344  153B  07DA               	addwf	MTOUCH_Button_ServiceAll@button,f
  9345  153C  3004               	movlw	4
  9346  153D  025A               	subwf	MTOUCH_Button_ServiceAll@button,w
  9347  153E  1803               	btfsc	3,0
  9348  153F  0008               	return
  9349  1540  2D33               	goto	l6504
  9350  1541                     __end_of_MTOUCH_Button_ServiceAll:	
  9351                           
  9352                           	psect	text52
  9353  0AFA                     __ptext52:	
  9354 ;; *************** function _Button_Service *****************
  9355 ;; Defined at:
  9356 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;  name            1    wreg     enum E3070
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;  name            1   55[BANK0 ] enum E3070
  9361 ;;  button          1   56[BANK0 ] PTR struct .
  9362 ;;		 -> mtouch_button(64), 
  9363 ;; Return value:  Size  Location     Type
  9364 ;;                  1    wreg      void 
  9365 ;; Registers used:
  9366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9372 ;;      Params:         0       0       0       0       0       0       0       0
  9373 ;;      Locals:         0       2       0       0       0       0       0       0
  9374 ;;      Temps:          0       2       0       0       0       0       0       0
  9375 ;;      Totals:         0       4       0       0       0       0       0       0
  9376 ;;Total ram usage:        4 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:   16
  9379 ;; This function calls:
  9380 ;;		_Button_Deviation_Update
  9381 ;;		_Button_Reading_Update
  9382 ;;		_Button_State_Initializing
  9383 ;;		_Button_State_NotPressed
  9384 ;;		_Button_State_Pressed
  9385 ;;		_MTOUCH_Button_Initialize
  9386 ;;		_MTOUCH_Sensor_isCalibrated
  9387 ;;		_MTOUCH_Sensor_wasSampled
  9388 ;; This function is called by:
  9389 ;;		_MTOUCH_Button_ServiceAll
  9390 ;; This function uses a non-reentrant model
  9391 ;;
  9392                           
  9393                           
  9394                           ;psect for function _Button_Service
  9395  0AFA                     _Button_Service:	
  9396                           
  9397                           ;incstack = 0
  9398 ;; hardware stack exceeded
  9399                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9400                           ;Button_Service@name stored from wreg
  9401  0AFA  0020               	movlb	0	; select bank0
  9402  0AFB  00D7               	movwf	Button_Service@name
  9403                           
  9404                           ;mcc_generated_files/mtouch/mtouch_button.c: 208: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 209: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 210:     mtouch_button_t* button = &mtouch_button[name];
  9405  0AFC  0857               	movf	Button_Service@name,w
  9406  0AFD  00D5               	movwf	??_Button_Service
  9407  0AFE  3003               	movlw	3
  9408  0AFF                     u5055:	
  9409  0AFF  35D5               	lslf	??_Button_Service,f
  9410  0B00  3EFF               	addlw	-1
  9411  0B01  1D03               	skipz
  9412  0B02  2AFF               	goto	u5055
  9413  0B03  3555               	lslf	??_Button_Service,w
  9414  0B04  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  9415  0B05  00D6               	movwf	??_Button_Service+1
  9416  0B06  0856               	movf	??_Button_Service+1,w
  9417  0B07  00D8               	movwf	Button_Service@button
  9418                           
  9419                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  9420  0B08  0A58               	incf	Button_Service@button,w
  9421  0B09  0086               	movwf	6
  9422  0B0A  3001               	movlw	1	; select bank2/3
  9423  0B0B  0087               	movwf	7
  9424  0B0C  0801               	movf	1,w
  9425  0B0D  3195  2513  318A   	fcall	_MTOUCH_Sensor_wasSampled
  9426  0B10  3A00               	xorlw	0
  9427  0B11  1903               	skipnz
  9428  0B12  0008               	return
  9429  0B13  0020               	movlb	0	; select bank0
  9430  0B14  0A58               	incf	Button_Service@button,w
  9431  0B15  0086               	movwf	6
  9432  0B16  3001               	movlw	1	; select bank2/3
  9433  0B17  0087               	movwf	7
  9434  0B18  0801               	movf	1,w
  9435  0B19  3195  25E2  318A   	fcall	_MTOUCH_Sensor_isCalibrated
  9436  0B1C  3A00               	xorlw	0
  9437  0B1D  1903               	skipnz
  9438  0B1E  0008               	return
  9439                           
  9440                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 214:         Button_Reading_Update(button);
  9441  0B1F  0020               	movlb	0	; select bank0
  9442  0B20  0858               	movf	Button_Service@button,w
  9443  0B21  3194  24DB  318A   	fcall	_Button_Reading_Update
  9444                           
  9445                           ;mcc_generated_files/mtouch/mtouch_button.c: 215:         Button_Deviation_Update(button
      +                          );
  9446  0B24  0020               	movlb	0	; select bank0
  9447  0B25  0858               	movf	Button_Service@button,w
  9448  0B26  318C  2489  318A   	fcall	_Button_Deviation_Update
  9449                           
  9450                           ;mcc_generated_files/mtouch/mtouch_button.c: 217:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  9451  0B29  0020               	movlb	0	; select bank0
  9452  0B2A  0858               	movf	Button_Service@button,w
  9453  0B2B  3E02               	addlw	2
  9454  0B2C  0086               	movwf	6
  9455  0B2D  3001               	movlw	1	; select bank2/3
  9456  0B2E  0087               	movwf	7
  9457  0B2F  3003               	movlw	3
  9458  0B30  0201               	subwf	1,w
  9459  0B31  1C03               	skipc
  9460  0B32  2B3B               	goto	l6468
  9461                           
  9462                           ;mcc_generated_files/mtouch/mtouch_button.c: 218:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 219:             MTOUCH_Button_Initialize(button->name);
  9463  0B33  0858               	movf	Button_Service@button,w
  9464  0B34  0086               	movwf	6
  9465  0B35  3001               	movlw	1	; select bank2/3
  9466  0B36  0087               	movwf	7
  9467  0B37  0801               	movf	1,w
  9468  0B38  3189  21A5  318A   	fcall	_MTOUCH_Button_Initialize
  9469  0B3B                     l6468:	
  9470                           
  9471                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  9472  0B3B  0020               	movlb	0	; select bank0
  9473  0B3C  0858               	movf	Button_Service@button,w
  9474  0B3D  00D5               	movwf	??_Button_Service
  9475  0B3E  0855               	movf	??_Button_Service,w
  9476  0B3F  00D0               	movwf	Button_State_Pressed@button
  9477  0B40  0858               	movf	Button_Service@button,w
  9478  0B41  3E02               	addlw	2
  9479  0B42  0086               	movwf	6
  9480  0B43  3001               	movlw	1	; select bank2/3
  9481  0B44  0087               	movwf	7
  9482  0B45  3501               	lslf	1,w
  9483  0B46  3EBE               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  9484  0B47  0086               	movwf	6
  9485  0B48  0187               	clrf	7
  9486  0B49  3F41               	moviw [1]fsr1
  9487  0B4A  008A               	movwf	10
  9488  0B4B  3F40               	moviw [0]fsr1
  9489  0B4C  000A               	callw
  9490  0B4D  318A               	pagesel	$
  9491  0B4E  0008               	return
  9492  0B4F                     __end_of_Button_Service:	
  9493                           
  9494                           	psect	text53
  9495  1513                     __ptext53:	
  9496 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  9497 ;; Defined at:
  9498 ;;		line 967 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  sensor          1    wreg     enum E2854
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;  sensor          1    6[COMMON] enum E2854
  9503 ;; Return value:  Size  Location     Type
  9504 ;;                  1    wreg      _Bool 
  9505 ;; Registers used:
  9506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9512 ;;      Params:         0       0       0       0       0       0       0       0
  9513 ;;      Locals:         1       0       0       0       0       0       0       0
  9514 ;;      Temps:          1       0       0       0       0       0       0       0
  9515 ;;      Totals:         2       0       0       0       0       0       0       0
  9516 ;;Total ram usage:        2 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    5
  9519 ;; This function calls:
  9520 ;;		___bmul
  9521 ;; This function is called by:
  9522 ;;		_Button_Service
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           
  9527                           ;psect for function _MTOUCH_Sensor_wasSampled
  9528  1513                     _MTOUCH_Sensor_wasSampled:	
  9529                           
  9530                           ;incstack = 0
  9531                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9532                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9533  1513  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
  9534                           
  9535                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 967: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 968: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 969:     return (_Bool)mtouch_sensor[sensor].sampled;
  9536  1514  3009               	movlw	9
  9537  1515  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
  9538  1516  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
  9539  1517  00F1               	movwf	___bmul@multiplicand
  9540  1518  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  9541  1519  3195  2562         	fcall	___bmul
  9542  151B  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9543  151C  0086               	movwf	6
  9544  151D  3001               	movlw	1	; select bank2/3
  9545  151E  0087               	movwf	7
  9546  151F  0801               	movf	1,w
  9547  1520  3901               	andlw	1
  9548  1521  0008               	return
  9549  1522                     __end_of_MTOUCH_Sensor_wasSampled:	
  9550                           
  9551                           	psect	text54
  9552  15E2                     __ptext54:	
  9553 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9554 ;; Defined at:
  9555 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;  sensor          1    wreg     enum E2854
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  sensor          1    6[COMMON] enum E2854
  9560 ;; Return value:  Size  Location     Type
  9561 ;;                  1    wreg      _Bool 
  9562 ;; Registers used:
  9563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9564 ;; Tracked objects:
  9565 ;;		On entry : 0/0
  9566 ;;		On exit  : 0/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9569 ;;      Params:         0       0       0       0       0       0       0       0
  9570 ;;      Locals:         1       0       0       0       0       0       0       0
  9571 ;;      Temps:          1       0       0       0       0       0       0       0
  9572 ;;      Totals:         2       0       0       0       0       0       0       0
  9573 ;;Total ram usage:        2 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:    5
  9576 ;; This function calls:
  9577 ;;		___bmul
  9578 ;; This function is called by:
  9579 ;;		_Button_Service
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           
  9584                           ;psect for function _MTOUCH_Sensor_isCalibrated
  9585  15E2                     _MTOUCH_Sensor_isCalibrated:	
  9586                           
  9587                           ;incstack = 0
  9588                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9589                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9590  15E2  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  9591                           
  9592                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 921: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 922:     if(sensor < 4u)
  9593  15E3  3004               	movlw	4
  9594  15E4  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  9595  15E5  1803               	skipnc
  9596  15E6  2DF6               	goto	l6316
  9597                           
  9598                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 923:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  9599  15E7  3009               	movlw	9
  9600  15E8  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
  9601  15E9  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
  9602  15EA  00F1               	movwf	___bmul@multiplicand
  9603  15EB  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  9604  15EC  3195  2562         	fcall	___bmul
  9605  15EE  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9606  15EF  0086               	movwf	6
  9607  15F0  3001               	movlw	1	; select bank2/3
  9608  15F1  0087               	movwf	7
  9609  15F2  0C01               	rrf	1,w
  9610  15F3  0C89               	rrf	9,f
  9611  15F4  3901               	andlw	1
  9612  15F5  0008               	return
  9613  15F6                     l6316:	
  9614                           
  9615                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925:         return 0;
  9616  15F6  3000               	movlw	0
  9617  15F7  0008               	return
  9618  15F8                     __end_of_MTOUCH_Sensor_isCalibrated:	
  9619                           
  9620                           	psect	text55
  9621  06FA                     __ptext55:	
  9622 ;; *************** function _Button_State_NotPressed *****************
  9623 ;; Defined at:
  9624 ;;		line 245 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;  button          1   48[BANK0 ] PTR struct .
  9627 ;;		 -> mtouch_button(64), 
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;		None
  9630 ;; Return value:  Size  Location     Type
  9631 ;;                  1    wreg      void 
  9632 ;; Registers used:
  9633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9639 ;;      Params:         0       1       0       0       0       0       0       0
  9640 ;;      Locals:         0       0       0       0       0       0       0       0
  9641 ;;      Temps:          0       2       0       0       0       0       0       0
  9642 ;;      Totals:         0       3       0       0       0       0       0       0
  9643 ;;Total ram usage:        3 bytes
  9644 ;; Hardware stack levels used:    1
  9645 ;; Hardware stack levels required when called:    7
  9646 ;; This function calls:
  9647 ;;		_Button_Baseline_Update
  9648 ;;		_Button_DefaultCallback
  9649 ;;		_MTOUCH_Button_Initialize
  9650 ;;		_myButtonPressedCallback
  9651 ;; This function is called by:
  9652 ;;		_Button_Service
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           
  9657                           ;psect for function _Button_State_NotPressed
  9658  06FA                     _Button_State_NotPressed:	
  9659                           
  9660                           ;mcc_generated_files/mtouch/mtouch_button.c: 245: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 246: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 248:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  9661                           
  9662                           ;incstack = 0
  9663                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9664  06FA  0020               	movlb	0	; select bank0
  9665  06FB  0850               	movf	Button_State_NotPressed@button,w
  9666  06FC  3E09               	addlw	9
  9667  06FD  0086               	movwf	6
  9668  06FE  3001               	movlw	1	; select bank2/3
  9669  06FF  0087               	movwf	7
  9670  0700  0801               	movf	1,w
  9671  0701  3A80               	xorlw	128
  9672  0702  00D1               	movwf	??_Button_State_NotPressed
  9673  0703  0850               	movf	Button_State_NotPressed@button,w
  9674  0704  3E0E               	addlw	14
  9675  0705  0086               	movwf	6
  9676  0706  3001               	movlw	1	; select bank2/3
  9677  0707  0087               	movwf	7
  9678  0708  0301               	decf	1,w
  9679  0709  3AFF               	xorlw	255
  9680  070A  3A80               	xorlw	128
  9681  070B  02D1               	subwf	??_Button_State_NotPressed,f
  9682  070C  1803               	skipnc
  9683  070D  2F39               	goto	l6366
  9684                           
  9685                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 250:         (button->counter)++;
  9686  070E  0850               	movf	Button_State_NotPressed@button,w
  9687  070F  3E0A               	addlw	10
  9688  0710  0086               	movwf	6
  9689  0711  3001               	movlw	1	; select bank2/3
  9690  0712  0087               	movwf	7
  9691  0713  3001               	movlw	1
  9692  0714  0781               	addwf	1,f
  9693  0715  3141               	addfsr 1,1
  9694  0716  1803               	skipnc
  9695  0717  0A81               	incf	1,f
  9696                           
  9697                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  9698  0718  0850               	movf	Button_State_NotPressed@button,w
  9699  0719  3E0A               	addlw	10
  9700  071A  0086               	movwf	6
  9701  071B  3001               	movlw	1	; select bank2/3
  9702  071C  0087               	movwf	7
  9703  071D  3F40               	moviw [0]fsr1
  9704  071E  00D1               	movwf	??_Button_State_NotPressed
  9705  071F  3F41               	moviw [1]fsr1
  9706  0720  00D2               	movwf	??_Button_State_NotPressed+1
  9707  0721  3000               	movlw	0
  9708  0722  0252               	subwf	??_Button_State_NotPressed+1,w
  9709  0723  3041               	movlw	65
  9710  0724  1903               	skipnz
  9711  0725  0251               	subwf	??_Button_State_NotPressed,w
  9712  0726  1C03               	skipc
  9713  0727  2F7B               	goto	l1110
  9714                           
  9715                           ;mcc_generated_files/mtouch/mtouch_button.c: 252:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 253:             button->counter = (mtouch_button_statecounter_t)0;
  9716  0728  0850               	movf	Button_State_NotPressed@button,w
  9717  0729  3E0A               	addlw	10
  9718  072A  0086               	movwf	6
  9719  072B  3001               	movlw	1	; select bank2/3
  9720  072C  0087               	movwf	7
  9721  072D  3000               	movlw	0
  9722  072E  3FC0               	movwi [0]fsr1
  9723  072F  3FC1               	movwi [1]fsr1
  9724                           
  9725                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  9726  0730  0850               	movf	Button_State_NotPressed@button,w
  9727  0731  0086               	movwf	6
  9728  0732  3001               	movlw	1	; select bank2/3
  9729  0733  0087               	movwf	7
  9730  0734  0801               	movf	1,w
  9731  0735  3189  21A5  3186   	fcall	_MTOUCH_Button_Initialize
  9732  0738  2F7B               	goto	l1110
  9733  0739                     l6366:	
  9734  0739  0850               	movf	Button_State_NotPressed@button,w
  9735  073A  3E09               	addlw	9
  9736  073B  0086               	movwf	6
  9737  073C  3001               	movlw	1	; select bank2/3
  9738  073D  0087               	movwf	7
  9739  073E  0801               	movf	1,w
  9740  073F  00D1               	movwf	??_Button_State_NotPressed
  9741  0740  01D2               	clrf	??_Button_State_NotPressed+1
  9742  0741  1BD1               	btfsc	??_Button_State_NotPressed,7
  9743  0742  03D2               	decf	??_Button_State_NotPressed+1,f
  9744  0743  0850               	movf	Button_State_NotPressed@button,w
  9745  0744  3E0E               	addlw	14
  9746  0745  0086               	movwf	6
  9747  0746  3001               	movlw	1	; select bank2/3
  9748  0747  0087               	movwf	7
  9749  0748  0852               	movf	??_Button_State_NotPressed+1,w
  9750  0749  3A80               	xorlw	128
  9751  074A  3C80               	sublw	128
  9752  074B  1D03               	skipz
  9753  074C  2F4F               	goto	u4955
  9754  074D  0851               	movf	??_Button_State_NotPressed,w
  9755  074E  0201               	subwf	1,w
  9756  074F                     u4955:	
  9757  074F  1803               	skipnc
  9758  0750  2F72               	goto	l6372
  9759                           
  9760                           ;mcc_generated_files/mtouch/mtouch_button.c: 259:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 261:         button->state = MTOUCH_BUTTON_STATE_pressed;
  9761  0751  3002               	movlw	2
  9762  0752  0020               	movlb	0	; select bank0
  9763  0753  00D1               	movwf	??_Button_State_NotPressed
  9764  0754  0850               	movf	Button_State_NotPressed@button,w
  9765  0755  3E02               	addlw	2
  9766  0756  0086               	movwf	6
  9767  0757  3001               	movlw	1	; select bank2/3
  9768  0758  0087               	movwf	7
  9769  0759  0851               	movf	??_Button_State_NotPressed,w
  9770  075A  0081               	movwf	1
  9771                           
  9772                           ;mcc_generated_files/mtouch/mtouch_button.c: 262:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9773  075B  0850               	movf	Button_State_NotPressed@button,w
  9774  075C  3E0A               	addlw	10
  9775  075D  0086               	movwf	6
  9776  075E  3001               	movlw	1	; select bank2/3
  9777  075F  0087               	movwf	7
  9778  0760  3000               	movlw	0
  9779  0761  3FC0               	movwi [0]fsr1
  9780  0762  3FC1               	movwi [1]fsr1
  9781                           
  9782                           ;mcc_generated_files/mtouch/mtouch_button.c: 263:         callback_pressed(button->name)
      +                          ;
  9783  0763  0850               	movf	Button_State_NotPressed@button,w
  9784  0764  0086               	movwf	6
  9785  0765  3001               	movlw	1	; select bank2/3
  9786  0766  0087               	movwf	7
  9787  0767  0801               	movf	1,w
  9788  0768  00D1               	movwf	??_Button_State_NotPressed
  9789  0769  0851               	movf	??_Button_State_NotPressed,w
  9790  076A  00CF               	movwf	Button_DefaultCallback@button
  9791  076B  0021               	movlb	1	; select bank1
  9792  076C  0847               	movf	(_callback_pressed+1)^(0+128),w
  9793  076D  008A               	movwf	10
  9794  076E  0846               	movf	_callback_pressed^(0+128),w
  9795  076F  000A               	callw
  9796  0770  3186               	pagesel	$
  9797                           
  9798                           ;mcc_generated_files/mtouch/mtouch_button.c: 264:     }
  9799  0771  2F7B               	goto	l1110
  9800  0772                     l6372:	
  9801                           
  9802                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->counter = (mtouch_button_statecounter_t)0;
  9803  0772  0020               	movlb	0	; select bank0
  9804  0773  0850               	movf	Button_State_NotPressed@button,w
  9805  0774  3E0A               	addlw	10
  9806  0775  0086               	movwf	6
  9807  0776  3001               	movlw	1	; select bank2/3
  9808  0777  0087               	movwf	7
  9809  0778  3000               	movlw	0
  9810  0779  3FC0               	movwi [0]fsr1
  9811  077A  3FC1               	movwi [1]fsr1
  9812  077B                     l1110:	
  9813                           
  9814                           ;mcc_generated_files/mtouch/mtouch_button.c: 273:     (button->baseline_count)++;
  9815  077B  0020               	movlb	0	; select bank0
  9816  077C  0850               	movf	Button_State_NotPressed@button,w
  9817  077D  3E0C               	addlw	12
  9818  077E  0086               	movwf	6
  9819  077F  3001               	movlw	1	; select bank2/3
  9820  0780  0087               	movwf	7
  9821  0781  3001               	movlw	1
  9822  0782  0781               	addwf	1,f
  9823  0783  3141               	addfsr 1,1
  9824  0784  1803               	skipnc
  9825  0785  0A81               	incf	1,f
  9826                           
  9827                           ;mcc_generated_files/mtouch/mtouch_button.c: 274:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
  9828  0786  0850               	movf	Button_State_NotPressed@button,w
  9829  0787  3E0C               	addlw	12
  9830  0788  0086               	movwf	6
  9831  0789  3001               	movlw	1	; select bank2/3
  9832  078A  0087               	movwf	7
  9833  078B  0016               	moviw fsr1++
  9834  078C  3A40               	xorlw	64
  9835  078D  00D1               	movwf	??_Button_State_NotPressed
  9836  078E  0016               	moviw fsr1++
  9837  078F  04D1               	iorwf	??_Button_State_NotPressed,f
  9838  0790  1D03               	btfss	3,2
  9839  0791  0008               	return
  9840                           
  9841                           ;mcc_generated_files/mtouch/mtouch_button.c: 275:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 276:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9842  0792  0850               	movf	Button_State_NotPressed@button,w
  9843  0793  3E0C               	addlw	12
  9844  0794  0086               	movwf	6
  9845  0795  3001               	movlw	1	; select bank2/3
  9846  0796  0087               	movwf	7
  9847  0797  3000               	movlw	0
  9848  0798  3FC0               	movwi [0]fsr1
  9849  0799  3FC1               	movwi [1]fsr1
  9850                           
  9851                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:         Button_Baseline_Update(button)
      +                          ;
  9852  079A  0850               	movf	Button_State_NotPressed@button,w
  9853  079B  318D  2510         	fcall	_Button_Baseline_Update
  9854  079D  0008               	return
  9855  079E                     __end_of_Button_State_NotPressed:	
  9856                           
  9857                           	psect	text56
  9858  079E                     __ptext56:	
  9859 ;; *************** function _Button_State_Initializing *****************
  9860 ;; Defined at:
  9861 ;;		line 225 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9862 ;; Parameters:    Size  Location     Type
  9863 ;;  button          1   48[BANK0 ] PTR struct .
  9864 ;;		 -> mtouch_button(64), 
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;		None
  9867 ;; Return value:  Size  Location     Type
  9868 ;;                  1    wreg      void 
  9869 ;; Registers used:
  9870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9876 ;;      Params:         0       1       0       0       0       0       0       0
  9877 ;;      Locals:         0       0       0       0       0       0       0       0
  9878 ;;      Temps:          0       4       0       0       0       0       0       0
  9879 ;;      Totals:         0       5       0       0       0       0       0       0
  9880 ;;Total ram usage:        5 bytes
  9881 ;; Hardware stack levels used:    1
  9882 ;; Hardware stack levels required when called:    7
  9883 ;; This function calls:
  9884 ;;		_Button_Baseline_Initialize
  9885 ;;		_Button_Baseline_Update
  9886 ;; This function is called by:
  9887 ;;		_Button_Service
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           
  9892                           ;psect for function _Button_State_Initializing
  9893  079E                     _Button_State_Initializing:	
  9894                           
  9895                           ;mcc_generated_files/mtouch/mtouch_button.c: 225: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 226: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 228:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  9896                           
  9897                           ;incstack = 0
  9898                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9899  079E  0020               	movlb	0	; select bank0
  9900  079F  0850               	movf	Button_State_Initializing@button,w
  9901  07A0  3E0A               	addlw	10
  9902  07A1  0086               	movwf	6
  9903  07A2  3001               	movlw	1	; select bank2/3
  9904  07A3  0087               	movwf	7
  9905  07A4  3F40               	moviw [0]fsr1
  9906  07A5  00D1               	movwf	??_Button_State_Initializing
  9907  07A6  3F41               	moviw [1]fsr1
  9908  07A7  00D2               	movwf	??_Button_State_Initializing+1
  9909  07A8  3000               	movlw	0
  9910  07A9  0252               	subwf	??_Button_State_Initializing+1,w
  9911  07AA  3009               	movlw	9
  9912  07AB  1903               	skipnz
  9913  07AC  0251               	subwf	??_Button_State_Initializing,w
  9914  07AD  1803               	skipnc
  9915  07AE  2FB4               	goto	l6350
  9916                           
  9917                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 230:         Button_Baseline_Initialize(button);
  9918  07AF  0850               	movf	Button_State_Initializing@button,w
  9919  07B0  3188  2052  3187   	fcall	_Button_Baseline_Initialize
  9920                           
  9921                           ;mcc_generated_files/mtouch/mtouch_button.c: 231:     } else {
  9922  07B3  2FB8               	goto	l6352
  9923  07B4                     l6350:	
  9924                           
  9925                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         Button_Baseline_Update(button)
      +                          ;
  9926  07B4  0850               	movf	Button_State_Initializing@button,w
  9927  07B5  318D  2510  3187   	fcall	_Button_Baseline_Update
  9928  07B8                     l6352:	
  9929                           
  9930                           ;mcc_generated_files/mtouch/mtouch_button.c: 236:     (button->counter)++;
  9931  07B8  0020               	movlb	0	; select bank0
  9932  07B9  0850               	movf	Button_State_Initializing@button,w
  9933  07BA  3E0A               	addlw	10
  9934  07BB  0086               	movwf	6
  9935  07BC  3001               	movlw	1	; select bank2/3
  9936  07BD  0087               	movwf	7
  9937  07BE  3001               	movlw	1
  9938  07BF  0781               	addwf	1,f
  9939  07C0  3141               	addfsr 1,1
  9940  07C1  1803               	skipnc
  9941  07C2  0A81               	incf	1,f
  9942                           
  9943                           ;mcc_generated_files/mtouch/mtouch_button.c: 237:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  9944  07C3  0850               	movf	Button_State_Initializing@button,w
  9945  07C4  3E0A               	addlw	10
  9946  07C5  0086               	movwf	6
  9947  07C6  3001               	movlw	1	; select bank2/3
  9948  07C7  0087               	movwf	7
  9949  07C8  3F40               	moviw [0]fsr1
  9950  07C9  00D1               	movwf	??_Button_State_Initializing
  9951  07CA  3F41               	moviw [1]fsr1
  9952  07CB  00D2               	movwf	??_Button_State_Initializing+1
  9953  07CC  3000               	movlw	0
  9954  07CD  0252               	subwf	??_Button_State_Initializing+1,w
  9955  07CE  3010               	movlw	16
  9956  07CF  1903               	skipnz
  9957  07D0  0251               	subwf	??_Button_State_Initializing,w
  9958  07D1  1C03               	skipc
  9959  07D2  0008               	return
  9960                           
  9961                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 239:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
  9962  07D3  0850               	movf	Button_State_Initializing@button,w
  9963  07D4  3E05               	addlw	5
  9964  07D5  0086               	movwf	6
  9965  07D6  3001               	movlw	1	; select bank2/3
  9966  07D7  0087               	movwf	7
  9967  07D8  3F40               	moviw [0]fsr1
  9968  07D9  00D1               	movwf	??_Button_State_Initializing
  9969  07DA  3F41               	moviw [1]fsr1
  9970  07DB  00D2               	movwf	??_Button_State_Initializing+1
  9971  07DC  3F42               	moviw [2]fsr1
  9972  07DD  00D3               	movwf	??_Button_State_Initializing+2
  9973  07DE  3F43               	moviw [3]fsr1
  9974  07DF  00D4               	movwf	??_Button_State_Initializing+3
  9975  07E0  3004               	movlw	4
  9976  07E1                     u4925:	
  9977  07E1  36D4               	lsrf	??_Button_State_Initializing+3,f
  9978  07E2  0CD3               	rrf	??_Button_State_Initializing+2,f
  9979  07E3  0CD2               	rrf	??_Button_State_Initializing+1,f
  9980  07E4  0CD1               	rrf	??_Button_State_Initializing,f
  9981  07E5  0B89               	decfsz	9,f
  9982  07E6  2FE1               	goto	u4925
  9983  07E7  0850               	movf	Button_State_Initializing@button,w
  9984  07E8  3E03               	addlw	3
  9985  07E9  0086               	movwf	6
  9986  07EA  3001               	movlw	1	; select bank2/3
  9987  07EB  0087               	movwf	7
  9988  07EC  0851               	movf	??_Button_State_Initializing,w
  9989  07ED  3FC0               	movwi [0]fsr1
  9990  07EE  0852               	movf	??_Button_State_Initializing+1,w
  9991  07EF  3FC1               	movwi [1]fsr1
  9992                           
  9993                           ;mcc_generated_files/mtouch/mtouch_button.c: 240:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
  9994  07F0  0850               	movf	Button_State_Initializing@button,w
  9995  07F1  3E02               	addlw	2
  9996  07F2  0086               	movwf	6
  9997  07F3  3001               	movlw	1	; select bank2/3
  9998  07F4  0087               	movwf	7
  9999  07F5  0181               	clrf	1
 10000  07F6  0A81               	incf	1,f
 10001                           
 10002                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10003  07F7  0850               	movf	Button_State_Initializing@button,w
 10004  07F8  3E0A               	addlw	10
 10005  07F9  0086               	movwf	6
 10006  07FA  3001               	movlw	1	; select bank2/3
 10007  07FB  0087               	movwf	7
 10008  07FC  3000               	movlw	0
 10009  07FD  3FC0               	movwi [0]fsr1
 10010  07FE  3FC1               	movwi [1]fsr1
 10011  07FF  0008               	return
 10012  0800                     __end_of_Button_State_Initializing:	
 10013                           
 10014                           	psect	text57
 10015  0BAB                     __ptext57:	
 10016 ;; *************** function _Button_State_Pressed *****************
 10017 ;; Defined at:
 10018 ;;		line 281 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;  button          1   48[BANK0 ] PTR struct .
 10021 ;;		 -> mtouch_button(64), 
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;		None
 10024 ;; Return value:  Size  Location     Type
 10025 ;;                  1    wreg      void 
 10026 ;; Registers used:
 10027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10033 ;;      Params:         0       1       0       0       0       0       0       0
 10034 ;;      Locals:         0       0       0       0       0       0       0       0
 10035 ;;      Temps:          0       2       0       0       0       0       0       0
 10036 ;;      Totals:         0       3       0       0       0       0       0       0
 10037 ;;Total ram usage:        3 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:   15
 10040 ;; This function calls:
 10041 ;;		_Button_DefaultCallback
 10042 ;;		_MTOUCH_Button_Initialize
 10043 ;;		_myButtonReleasedCallback
 10044 ;; This function is called by:
 10045 ;;		_Button_Service
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           
 10050                           ;psect for function _Button_State_Pressed
 10051  0BAB                     _Button_State_Pressed:	
 10052                           
 10053                           ;mcc_generated_files/mtouch/mtouch_button.c: 281: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 282: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 284:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 10054                           
 10055                           ;incstack = 0
 10056 ;; hardware stack exceeded
 10057                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10058  0BAB  0020               	movlb	0	; select bank0
 10059  0BAC  0850               	movf	Button_State_Pressed@button,w
 10060  0BAD  3E0A               	addlw	10
 10061  0BAE  0086               	movwf	6
 10062  0BAF  3001               	movlw	1	; select bank2/3
 10063  0BB0  0087               	movwf	7
 10064  0BB1  3F40               	moviw [0]fsr1
 10065  0BB2  00D1               	movwf	??_Button_State_Pressed
 10066  0BB3  3F41               	moviw [1]fsr1
 10067  0BB4  00D2               	movwf	??_Button_State_Pressed+1
 10068  0BB5  3007               	movlw	7
 10069  0BB6  0252               	subwf	??_Button_State_Pressed+1,w
 10070  0BB7  30D0               	movlw	208
 10071  0BB8  1903               	skipnz
 10072  0BB9  0251               	subwf	??_Button_State_Pressed,w
 10073  0BBA  1C03               	skipc
 10074  0BBB  2BD4               	goto	l6384
 10075                           
 10076                           ;mcc_generated_files/mtouch/mtouch_button.c: 285:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 286:         MTOUCH_Button_Initialize(button->name);
 10077  0BBC  0850               	movf	Button_State_Pressed@button,w
 10078  0BBD  0086               	movwf	6
 10079  0BBE  3001               	movlw	1	; select bank2/3
 10080  0BBF  0087               	movwf	7
 10081  0BC0  0801               	movf	1,w
 10082  0BC1  3189  21A5  318B   	fcall	_MTOUCH_Button_Initialize
 10083                           
 10084                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         callback_notPressed(button->na
      +                          me);
 10085  0BC4  0020               	movlb	0	; select bank0
 10086  0BC5  0850               	movf	Button_State_Pressed@button,w
 10087  0BC6  0086               	movwf	6
 10088  0BC7  3001               	movlw	1	; select bank2/3
 10089  0BC8  0087               	movwf	7
 10090  0BC9  0801               	movf	1,w
 10091  0BCA  00D1               	movwf	??_Button_State_Pressed
 10092  0BCB  0851               	movf	??_Button_State_Pressed,w
 10093  0BCC  00CF               	movwf	Button_DefaultCallback@button
 10094  0BCD  0021               	movlb	1	; select bank1
 10095  0BCE  0845               	movf	(_callback_notPressed+1)^(0+128),w
 10096  0BCF  008A               	movwf	10
 10097  0BD0  0844               	movf	_callback_notPressed^(0+128),w
 10098  0BD1  000A               	callw
 10099  0BD2  318B               	pagesel	$
 10100                           
 10101                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:     }
 10102  0BD3  0008               	return
 10103  0BD4                     l6384:	
 10104  0BD4  0850               	movf	Button_State_Pressed@button,w
 10105  0BD5  3E09               	addlw	9
 10106  0BD6  0086               	movwf	6
 10107  0BD7  3001               	movlw	1	; select bank2/3
 10108  0BD8  0087               	movwf	7
 10109  0BD9  0801               	movf	1,w
 10110  0BDA  3A80               	xorlw	128
 10111  0BDB  00D1               	movwf	??_Button_State_Pressed
 10112  0BDC  0850               	movf	Button_State_Pressed@button,w
 10113  0BDD  3E0E               	addlw	14
 10114  0BDE  0086               	movwf	6
 10115  0BDF  3001               	movlw	1	; select bank2/3
 10116  0BE0  0087               	movwf	7
 10117  0BE1  0850               	movf	Button_State_Pressed@button,w
 10118  0BE2  3E0E               	addlw	14
 10119  0BE3  0084               	movwf	4
 10120  0BE4  3001               	movlw	1	; select bank2/3
 10121  0BE5  0085               	movwf	5
 10122  0BE6  3600               	lsrf	0,w
 10123  0BE7  0201               	subwf	1,w
 10124  0BE8  3A80               	xorlw	128
 10125  0BE9  02D1               	subwf	??_Button_State_Pressed,f
 10126  0BEA  1803               	skipnc
 10127  0BEB  0008               	return
 10128                           
 10129                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 293:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 10130  0BEC  0850               	movf	Button_State_Pressed@button,w
 10131  0BED  3E02               	addlw	2
 10132  0BEE  0086               	movwf	6
 10133  0BEF  3001               	movlw	1	; select bank2/3
 10134  0BF0  0087               	movwf	7
 10135  0BF1  0181               	clrf	1
 10136  0BF2  0A81               	incf	1,f
 10137                           
 10138                           ;mcc_generated_files/mtouch/mtouch_button.c: 294:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10139  0BF3  0850               	movf	Button_State_Pressed@button,w
 10140  0BF4  3E0A               	addlw	10
 10141  0BF5  0086               	movwf	6
 10142  0BF6  3001               	movlw	1	; select bank2/3
 10143  0BF7  0087               	movwf	7
 10144  0BF8  3000               	movlw	0
 10145  0BF9  3FC0               	movwi [0]fsr1
 10146  0BFA  3FC1               	movwi [1]fsr1
 10147                           
 10148                           ;mcc_generated_files/mtouch/mtouch_button.c: 295:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 10149  0BFB  0850               	movf	Button_State_Pressed@button,w
 10150  0BFC  3E0C               	addlw	12
 10151  0BFD  0086               	movwf	6
 10152  0BFE  3001               	movlw	1	; select bank2/3
 10153  0BFF  0087               	movwf	7
 10154  0C00  30FF               	movlw	255
 10155  0C01  3FC0               	movwi [0]fsr1
 10156  0C02  30FB               	movlw	251
 10157  0C03  3FC1               	movwi [1]fsr1
 10158                           
 10159                           ;mcc_generated_files/mtouch/mtouch_button.c: 296:         callback_notPressed(button->na
      +                          me);
 10160  0C04  0850               	movf	Button_State_Pressed@button,w
 10161  0C05  0086               	movwf	6
 10162  0C06  3001               	movlw	1	; select bank2/3
 10163  0C07  0087               	movwf	7
 10164  0C08  0801               	movf	1,w
 10165  0C09  00D1               	movwf	??_Button_State_Pressed
 10166  0C0A  0851               	movf	??_Button_State_Pressed,w
 10167  0C0B  00CF               	movwf	Button_DefaultCallback@button
 10168  0C0C  0021               	movlb	1	; select bank1
 10169  0C0D  0845               	movf	(_callback_notPressed+1)^(0+128),w
 10170  0C0E  008A               	movwf	10
 10171  0C0F  0844               	movf	_callback_notPressed^(0+128),w
 10172  0C10  000A               	callw
 10173  0C11  318B               	pagesel	$
 10174  0C12  0008               	return
 10175  0C13                     __end_of_Button_State_Pressed:	
 10176                           
 10177                           	psect	text58
 10178  0880                     __ptext58:	
 10179 ;; *************** function _myButtonPressedCallback *****************
 10180 ;; Defined at:
 10181 ;;		line 159 in file "main.c"
 10182 ;; Parameters:    Size  Location     Type
 10183 ;;  button          1   47[BANK0 ] enum E2914
 10184 ;; Auto vars:     Size  Location     Type
 10185 ;;		None
 10186 ;; Return value:  Size  Location     Type
 10187 ;;                  1    wreg      void 
 10188 ;; Registers used:
 10189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10190 ;; Tracked objects:
 10191 ;;		On entry : 0/0
 10192 ;;		On exit  : 0/0
 10193 ;;		Unchanged: 0/0
 10194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10195 ;;      Params:         0       1       0       0       0       0       0       0
 10196 ;;      Locals:         0       0       0       0       0       0       0       0
 10197 ;;      Temps:          0       0       0       0       0       0       0       0
 10198 ;;      Totals:         0       1       0       0       0       0       0       0
 10199 ;;Total ram usage:        1 bytes
 10200 ;; Hardware stack levels used:    1
 10201 ;; Hardware stack levels required when called:    5
 10202 ;; This function calls:
 10203 ;;		_LED_PROCESS
 10204 ;;		_RELAY_PROCESS
 10205 ;; This function is called by:
 10206 ;;		_main
 10207 ;;		_Button_State_NotPressed
 10208 ;; This function uses a non-reentrant model
 10209 ;;
 10210                           
 10211                           
 10212                           ;psect for function _myButtonPressedCallback
 10213  0880                     _myButtonPressedCallback:	
 10214                           
 10215                           ;main.c: 159: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 160:
      +                           {;main.c: 161:     count_conf = 0;
 10216                           
 10217                           ;incstack = 0
 10218                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10219  0880  0021               	movlb	1	; select bank1
 10220  0881  01BA               	clrf	_count_conf^(0+128)
 10221  0882  01BB               	clrf	(_count_conf+1)^(0+128)
 10222                           
 10223                           ;main.c: 162:     if(config_status == 0)
 10224  0883  0020               	movlb	0	; select bank0
 10225  0884  0869               	movf	_config_status,w
 10226  0885  1D03               	btfss	3,2
 10227  0886  0008               	return
 10228                           
 10229                           ;main.c: 163:     {;main.c: 164:         if(button == 0) last_touch_status.full_status ^
      +                          = 0b00000001;
 10230  0887  084F               	movf	myButtonPressedCallback@button,w
 10231  0888  1D03               	btfss	3,2
 10232  0889  288E               	goto	l4514
 10233  088A  3001               	movlw	1
 10234  088B  06E2               	xorwf	_last_touch_status,f
 10235  088C  3000               	movlw	0
 10236  088D  06E3               	xorwf	_last_touch_status+1,f
 10237  088E                     l4514:	
 10238                           
 10239                           ;main.c: 165:         if(button == 1) last_touch_status.full_status ^= 0b00000010;
 10240  088E  034F               	decf	myButtonPressedCallback@button,w
 10241  088F  1D03               	btfss	3,2
 10242  0890  2895               	goto	l4518
 10243  0891  3002               	movlw	2
 10244  0892  06E2               	xorwf	_last_touch_status,f
 10245  0893  3000               	movlw	0
 10246  0894  06E3               	xorwf	_last_touch_status+1,f
 10247  0895                     l4518:	
 10248                           
 10249                           ;main.c: 166:         if(button == 2) last_touch_status.full_status ^= 0b00000100;
 10250  0895  3002               	movlw	2
 10251  0896  064F               	xorwf	myButtonPressedCallback@button,w
 10252  0897  1D03               	btfss	3,2
 10253  0898  289D               	goto	l4522
 10254  0899  3004               	movlw	4
 10255  089A  06E2               	xorwf	_last_touch_status,f
 10256  089B  3000               	movlw	0
 10257  089C  06E3               	xorwf	_last_touch_status+1,f
 10258  089D                     l4522:	
 10259                           
 10260                           ;main.c: 167:         if(button == 3) last_touch_status.full_status ^= 0b00001000;
 10261  089D  3003               	movlw	3
 10262  089E  064F               	xorwf	myButtonPressedCallback@button,w
 10263  089F  1D03               	btfss	3,2
 10264  08A0  28A5               	goto	l4526
 10265  08A1  3008               	movlw	8
 10266  08A2  06E2               	xorwf	_last_touch_status,f
 10267  08A3  3000               	movlw	0
 10268  08A4  06E3               	xorwf	_last_touch_status+1,f
 10269  08A5                     l4526:	
 10270                           
 10271                           ;main.c: 169:         LED_PROCESS(last_touch_status.full_status);
 10272  08A5  0862               	movf	_last_touch_status,w
 10273  08A6  318E  26C6  3188   	fcall	_LED_PROCESS
 10274                           
 10275                           ;main.c: 170:         RELAY_PROCESS(last_touch_status.full_status);
 10276  08A9  0020               	movlb	0	; select bank0
 10277  08AA  0862               	movf	_last_touch_status,w
 10278  08AB  318F  2763         	fcall	_RELAY_PROCESS
 10279  08AD  0008               	return
 10280  08AE                     __end_of_myButtonPressedCallback:	
 10281                           
 10282                           	psect	text59
 10283  1427                     __ptext59:	
 10284 ;; *************** function _Button_DefaultCallback *****************
 10285 ;; Defined at:
 10286 ;;		line 535 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;  button          1   47[BANK0 ] enum E3070
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;		None
 10291 ;; Return value:  Size  Location     Type
 10292 ;;                  1    wreg      void 
 10293 ;; Registers used:
 10294 ;;		None
 10295 ;; Tracked objects:
 10296 ;;		On entry : 0/0
 10297 ;;		On exit  : 0/0
 10298 ;;		Unchanged: 0/0
 10299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10300 ;;      Params:         0       1       0       0       0       0       0       0
 10301 ;;      Locals:         0       0       0       0       0       0       0       0
 10302 ;;      Temps:          0       0       0       0       0       0       0       0
 10303 ;;      Totals:         0       1       0       0       0       0       0       0
 10304 ;;Total ram usage:        1 bytes
 10305 ;; Hardware stack levels used:    1
 10306 ;; Hardware stack levels required when called:    4
 10307 ;; This function calls:
 10308 ;;		Nothing
 10309 ;; This function is called by:
 10310 ;;		_Button_State_NotPressed
 10311 ;;		_Button_State_Pressed
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315                           
 10316                           ;psect for function _Button_DefaultCallback
 10317  1427                     _Button_DefaultCallback:	
 10318                           
 10319                           ;incstack = 0
 10320                           ; Regs used in _Button_DefaultCallback: []
 10321  1427  0008               	return
 10322  1428                     __end_of_Button_DefaultCallback:	
 10323                           
 10324                           	psect	text60
 10325  16F3                     __ptext60:	
 10326 ;; *************** function _myButtonReleasedCallback *****************
 10327 ;; Defined at:
 10328 ;;		line 173 in file "main.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;  button          1   47[BANK0 ] enum E2914
 10331 ;; Auto vars:     Size  Location     Type
 10332 ;;		None
 10333 ;; Return value:  Size  Location     Type
 10334 ;;                  1    wreg      void 
 10335 ;; Registers used:
 10336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10337 ;; Tracked objects:
 10338 ;;		On entry : 0/0
 10339 ;;		On exit  : 0/0
 10340 ;;		Unchanged: 0/0
 10341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10342 ;;      Params:         0       1       0       0       0       0       0       0
 10343 ;;      Locals:         0       0       0       0       0       0       0       0
 10344 ;;      Temps:          0       0       0       0       0       0       0       0
 10345 ;;      Totals:         0       1       0       0       0       0       0       0
 10346 ;;Total ram usage:        1 bytes
 10347 ;; Hardware stack levels used:    1
 10348 ;; Hardware stack levels required when called:   14
 10349 ;; This function calls:
 10350 ;;		_MTOUCH_Button_isPressed
 10351 ;;		_update_state
 10352 ;; This function is called by:
 10353 ;;		_main
 10354 ;;		_Button_State_Pressed
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           
 10359                           ;psect for function _myButtonReleasedCallback
 10360  16F3                     _myButtonReleasedCallback:	
 10361                           
 10362                           ;main.c: 173: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 174
      +                          : {;main.c: 175:     count_conf = 0;
 10363                           
 10364                           ;incstack = 0
 10365 ;; hardware stack exceeded
 10366                           ; Regs used in _myButtonReleasedCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10367  16F3  0021               	movlb	1	; select bank1
 10368  16F4  01BA               	clrf	_count_conf^(0+128)
 10369  16F5  01BB               	clrf	(_count_conf+1)^(0+128)
 10370                           
 10371                           ;main.c: 176:     if(config_status == 0)
 10372  16F6  0020               	movlb	0	; select bank0
 10373  16F7  0869               	movf	_config_status,w
 10374  16F8  1D03               	btfss	3,2
 10375  16F9  0008               	return
 10376                           
 10377                           ;main.c: 177:     {;main.c: 179:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0&&MTOUCH_Button_isPressed(2)==0)
 10378  16FA  3000               	movlw	0
 10379  16FB  3196  2682  3196   	fcall	_MTOUCH_Button_isPressed
 10380  16FE  3A00               	xorlw	0
 10381  16FF  1D03               	skipz
 10382  1700  0008               	return
 10383  1701  3001               	movlw	1
 10384  1702  3196  2682  3196   	fcall	_MTOUCH_Button_isPressed
 10385  1705  3A00               	xorlw	0
 10386  1706  1D03               	skipz
 10387  1707  0008               	return
 10388  1708  3002               	movlw	2
 10389  1709  3196  2682  3196   	fcall	_MTOUCH_Button_isPressed
 10390  170C  3A00               	xorlw	0
 10391  170D  1D03               	skipz
 10392  170E  0008               	return
 10393                           
 10394                           ;main.c: 180:         {;main.c: 181:             update_state();
 10395  170F  3185  25A8         	fcall	_update_state
 10396  1711  0008               	return
 10397  1712                     __end_of_myButtonReleasedCallback:	
 10398                           
 10399                           	psect	text61
 10400  1682                     __ptext61:	
 10401 ;; *************** function _MTOUCH_Button_isPressed *****************
 10402 ;; Defined at:
 10403 ;;		line 382 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;  name            1    wreg     enum E3070
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;  name            1    2[COMMON] enum E3070
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  1    wreg      _Bool 
 10410 ;; Registers used:
 10411 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10417 ;;      Params:         0       0       0       0       0       0       0       0
 10418 ;;      Locals:         1       0       0       0       0       0       0       0
 10419 ;;      Temps:          1       0       0       0       0       0       0       0
 10420 ;;      Totals:         2       0       0       0       0       0       0       0
 10421 ;;Total ram usage:        2 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:    4
 10424 ;; This function calls:
 10425 ;;		Nothing
 10426 ;; This function is called by:
 10427 ;;		_main
 10428 ;;		_myButtonReleasedCallback
 10429 ;;		_touch_example
 10430 ;;		_MTOUCH_Button_Buttonmask_Get
 10431 ;; This function uses a non-reentrant model
 10432 ;;
 10433                           
 10434                           
 10435                           ;psect for function _MTOUCH_Button_isPressed
 10436  1682                     _MTOUCH_Button_isPressed:	
 10437                           
 10438                           ;incstack = 0
 10439                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 10440                           ;MTOUCH_Button_isPressed@name stored from wreg
 10441  1682  00F2               	movwf	MTOUCH_Button_isPressed@name
 10442                           
 10443                           ;mcc_generated_files/mtouch/mtouch_button.c: 382: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 383: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 384:     if(name < 4u)
 10444  1683  3004               	movlw	4
 10445  1684  0272               	subwf	MTOUCH_Button_isPressed@name,w
 10446  1685  1803               	skipnc
 10447  1686  2E9B               	goto	l4228
 10448                           
 10449                           ;mcc_generated_files/mtouch/mtouch_button.c: 385:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 10450  1687  0872               	movf	MTOUCH_Button_isPressed@name,w
 10451  1688  00F1               	movwf	??_MTOUCH_Button_isPressed
 10452  1689  3003               	movlw	3
 10453  168A                     u2465:	
 10454  168A  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 10455  168B  3EFF               	addlw	-1
 10456  168C  1D03               	skipz
 10457  168D  2E8A               	goto	u2465
 10458  168E  3571               	lslf	??_MTOUCH_Button_isPressed,w
 10459  168F  3EA2               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 10460  1690  0086               	movwf	6
 10461  1691  3001               	movlw	1	; select bank3/4
 10462  1692  0087               	movwf	7
 10463  1693  3002               	movlw	2
 10464  1694  0601               	xorwf	1,w
 10465  1695  1D03               	btfss	3,2
 10466  1696  2E99               	goto	u2470
 10467  1697  3001               	movlw	1
 10468  1698  0008               	return
 10469  1699                     u2470:	
 10470  1699  3000               	movlw	0
 10471  169A  0008               	return
 10472  169B                     l4228:	
 10473                           
 10474                           ;mcc_generated_files/mtouch/mtouch_button.c: 387:         return 0;
 10475  169B  3000               	movlw	0
 10476  169C  0008               	return
 10477  169D                     __end_of_MTOUCH_Button_isPressed:	
 10478                           
 10479                           	psect	text62
 10480  09A5                     __ptext62:	
 10481 ;; *************** function _MTOUCH_Button_Initialize *****************
 10482 ;; Defined at:
 10483 ;;		line 167 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10484 ;; Parameters:    Size  Location     Type
 10485 ;;  name            1    wreg     enum E3070
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;  name            1    9[COMMON] enum E3070
 10488 ;;  button          1   10[COMMON] PTR struct .
 10489 ;;		 -> mtouch_button(64), 
 10490 ;; Return value:  Size  Location     Type
 10491 ;;                  1    wreg      void 
 10492 ;; Registers used:
 10493 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10494 ;; Tracked objects:
 10495 ;;		On entry : 0/0
 10496 ;;		On exit  : 0/0
 10497 ;;		Unchanged: 0/0
 10498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10499 ;;      Params:         0       0       0       0       0       0       0       0
 10500 ;;      Locals:         2       0       0       0       0       0       0       0
 10501 ;;      Temps:          2       0       0       0       0       0       0       0
 10502 ;;      Totals:         4       0       0       0       0       0       0       0
 10503 ;;Total ram usage:        4 bytes
 10504 ;; Hardware stack levels used:    1
 10505 ;; Hardware stack levels required when called:    6
 10506 ;; This function calls:
 10507 ;;		_MTOUCH_Sensor_Calibrate
 10508 ;; This function is called by:
 10509 ;;		_MTOUCH_Button_InitializeAll
 10510 ;;		_Button_Service
 10511 ;;		_Button_State_NotPressed
 10512 ;;		_Button_State_Pressed
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _MTOUCH_Button_Initialize
 10518  09A5                     _MTOUCH_Button_Initialize:	
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10522                           ;MTOUCH_Button_Initialize@name stored from wreg
 10523  09A5  00F9               	movwf	MTOUCH_Button_Initialize@name
 10524                           
 10525                           ;mcc_generated_files/mtouch/mtouch_button.c: 167: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 168: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 169:     mtouch_button_t* button = &mtouch_button[name];
 10526  09A6  0879               	movf	MTOUCH_Button_Initialize@name,w
 10527  09A7  00F7               	movwf	??_MTOUCH_Button_Initialize
 10528  09A8  3003               	movlw	3
 10529  09A9                     u4745:	
 10530  09A9  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 10531  09AA  3EFF               	addlw	-1
 10532  09AB  1D03               	skipz
 10533  09AC  29A9               	goto	u4745
 10534  09AD  3577               	lslf	??_MTOUCH_Button_Initialize,w
 10535  09AE  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10536  09AF  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 10537  09B0  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 10538  09B1  00FA               	movwf	MTOUCH_Button_Initialize@button
 10539                           
 10540                           ;mcc_generated_files/mtouch/mtouch_button.c: 171:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 10541  09B2  087A               	movf	MTOUCH_Button_Initialize@button,w
 10542  09B3  3E02               	addlw	2
 10543  09B4  0086               	movwf	6
 10544  09B5  3001               	movlw	1	; select bank2/3
 10545  09B6  0087               	movwf	7
 10546  09B7  0181               	clrf	1
 10547                           
 10548                           ;mcc_generated_files/mtouch/mtouch_button.c: 172:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 10549  09B8  087A               	movf	MTOUCH_Button_Initialize@button,w
 10550  09B9  3E05               	addlw	5
 10551  09BA  0086               	movwf	6
 10552  09BB  3001               	movlw	1	; select bank2/3
 10553  09BC  0087               	movwf	7
 10554  09BD  3000               	movlw	0
 10555  09BE  3FC0               	movwi [0]fsr1
 10556  09BF  3000               	movlw	0
 10557  09C0  3FC1               	movwi [1]fsr1
 10558  09C1  3FC2               	movwi [2]fsr1
 10559  09C2  3FC3               	movwi [3]fsr1
 10560                           
 10561                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 10562  09C3  087A               	movf	MTOUCH_Button_Initialize@button,w
 10563  09C4  3E0A               	addlw	10
 10564  09C5  0086               	movwf	6
 10565  09C6  3001               	movlw	1	; select bank2/3
 10566  09C7  0087               	movwf	7
 10567  09C8  3000               	movlw	0
 10568  09C9  3FC0               	movwi [0]fsr1
 10569  09CA  3FC1               	movwi [1]fsr1
 10570                           
 10571                           ;mcc_generated_files/mtouch/mtouch_button.c: 174:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 10572  09CB  087A               	movf	MTOUCH_Button_Initialize@button,w
 10573  09CC  3E0C               	addlw	12
 10574  09CD  0086               	movwf	6
 10575  09CE  3001               	movlw	1	; select bank2/3
 10576  09CF  0087               	movwf	7
 10577  09D0  3000               	movlw	0
 10578  09D1  3FC0               	movwi [0]fsr1
 10579  09D2  3FC1               	movwi [1]fsr1
 10580                           
 10581                           ;mcc_generated_files/mtouch/mtouch_button.c: 176:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 10582  09D3  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 10583  09D4  0086               	movwf	6
 10584  09D5  3001               	movlw	1	; select bank2/3
 10585  09D6  0087               	movwf	7
 10586  09D7  0801               	movf	1,w
 10587  09D8  3195  2584         	fcall	_MTOUCH_Sensor_Calibrate
 10588  09DA  0008               	return
 10589  09DB                     __end_of_MTOUCH_Button_Initialize:	
 10590                           
 10591                           	psect	text63
 10592  1584                     __ptext63:	
 10593 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10594 ;; Defined at:
 10595 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;  sensor          1    wreg     enum E2854
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;  sensor          1    6[COMMON] enum E2854
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  1    wreg      void 
 10602 ;; Registers used:
 10603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10609 ;;      Params:         0       0       0       0       0       0       0       0
 10610 ;;      Locals:         1       0       0       0       0       0       0       0
 10611 ;;      Temps:          1       0       0       0       0       0       0       0
 10612 ;;      Totals:         2       0       0       0       0       0       0       0
 10613 ;;Total ram usage:        2 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    5
 10616 ;; This function calls:
 10617 ;;		___bmul
 10618 ;; This function is called by:
 10619 ;;		_MTOUCH_Sensor_Initialize
 10620 ;;		_MTOUCH_Button_Initialize
 10621 ;; This function uses a non-reentrant model
 10622 ;;
 10623                           
 10624                           
 10625                           ;psect for function _MTOUCH_Sensor_Calibrate
 10626  1584                     _MTOUCH_Sensor_Calibrate:	
 10627                           
 10628                           ;incstack = 0
 10629                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10630                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 10631  1584  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 10632                           
 10633                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 914:     if(sensor < 4u)
 10634  1585  3004               	movlw	4
 10635  1586  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 10636  1587  1803               	skipnc
 10637  1588  0008               	return
 10638                           
 10639                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 916:         mtouch_sensor[sensor].calibrated = 0;
 10640  1589  3009               	movlw	9
 10641  158A  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 10642  158B  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 10643  158C  00F1               	movwf	___bmul@multiplicand
 10644  158D  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 10645  158E  3195  2562         	fcall	___bmul
 10646  1590  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 10647  1591  0086               	movwf	6
 10648  1592  3001               	movlw	1	; select bank2/3
 10649  1593  0087               	movwf	7
 10650  1594  1101               	bcf	1,2
 10651  1595  0008               	return
 10652  1596                     __end_of_MTOUCH_Sensor_Calibrate:	
 10653                           
 10654                           	psect	text64
 10655  0D10                     __ptext64:	
 10656 ;; *************** function _Button_Baseline_Update *****************
 10657 ;; Defined at:
 10658 ;;		line 489 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10659 ;; Parameters:    Size  Location     Type
 10660 ;;  button          1    wreg     PTR struct .
 10661 ;;		 -> mtouch_button(64), 
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;  button          1    7[COMMON] PTR struct .
 10664 ;;		 -> mtouch_button(64), 
 10665 ;; Return value:  Size  Location     Type
 10666 ;;                  1    wreg      void 
 10667 ;; Registers used:
 10668 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10674 ;;      Params:         0       0       0       0       0       0       0       0
 10675 ;;      Locals:         1       0       0       0       0       0       0       0
 10676 ;;      Temps:          6       0       0       0       0       0       0       0
 10677 ;;      Totals:         7       0       0       0       0       0       0       0
 10678 ;;Total ram usage:        7 bytes
 10679 ;; Hardware stack levels used:    1
 10680 ;; Hardware stack levels required when called:    4
 10681 ;; This function calls:
 10682 ;;		Nothing
 10683 ;; This function is called by:
 10684 ;;		_Button_State_Initializing
 10685 ;;		_Button_State_NotPressed
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           
 10690                           ;psect for function _Button_Baseline_Update
 10691  0D10                     _Button_Baseline_Update:	
 10692                           
 10693                           ;incstack = 0
 10694                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10695                           ;Button_Baseline_Update@button stored from wreg
 10696  0D10  00F7               	movwf	Button_Baseline_Update@button
 10697                           
 10698                           ;mcc_generated_files/mtouch/mtouch_button.c: 489: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 490: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 491:     if (GIE == (uint8_t)1)
 10699  0D11  1F8B               	btfss	11,7	;volatile
 10700  0D12  2D5A               	goto	l4630
 10701                           
 10702                           ;mcc_generated_files/mtouch/mtouch_button.c: 492:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 493:         GIE = (uint8_t)0;
 10703  0D13  138B               	bcf	11,7	;volatile
 10704                           
 10705                           ;mcc_generated_files/mtouch/mtouch_button.c: 494:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 10706  0D14  0877               	movf	Button_Baseline_Update@button,w
 10707  0D15  3E05               	addlw	5
 10708  0D16  0086               	movwf	6
 10709  0D17  3001               	movlw	1	; select bank2/3
 10710  0D18  0087               	movwf	7
 10711  0D19  3F40               	moviw [0]fsr1
 10712  0D1A  00F1               	movwf	??_Button_Baseline_Update
 10713  0D1B  3F41               	moviw [1]fsr1
 10714  0D1C  00F2               	movwf	??_Button_Baseline_Update+1
 10715  0D1D  3F42               	moviw [2]fsr1
 10716  0D1E  00F3               	movwf	??_Button_Baseline_Update+2
 10717  0D1F  3F43               	moviw [3]fsr1
 10718  0D20  00F4               	movwf	??_Button_Baseline_Update+3
 10719  0D21  3004               	movlw	4
 10720  0D22                     u3065:	
 10721  0D22  36F4               	lsrf	??_Button_Baseline_Update+3,f
 10722  0D23  0CF3               	rrf	??_Button_Baseline_Update+2,f
 10723  0D24  0CF2               	rrf	??_Button_Baseline_Update+1,f
 10724  0D25  0CF1               	rrf	??_Button_Baseline_Update,f
 10725  0D26  0B89               	decfsz	9,f
 10726  0D27  2D22               	goto	u3065
 10727  0D28  0877               	movf	Button_Baseline_Update@button,w
 10728  0D29  3E05               	addlw	5
 10729  0D2A  0086               	movwf	6
 10730  0D2B  3001               	movlw	1	; select bank2/3
 10731  0D2C  0087               	movwf	7
 10732  0D2D  0871               	movf	??_Button_Baseline_Update,w
 10733  0D2E  0281               	subwf	1,f
 10734  0D2F  3141               	addfsr 1,1
 10735  0D30  0872               	movf	??_Button_Baseline_Update+1,w
 10736  0D31  3B81               	subwfb	1,f
 10737  0D32  3141               	addfsr 1,1
 10738  0D33  0873               	movf	??_Button_Baseline_Update+2,w
 10739  0D34  3B81               	subwfb	1,f
 10740  0D35  3141               	addfsr 1,1
 10741  0D36  0874               	movf	??_Button_Baseline_Update+3,w
 10742  0D37  3B81               	subwfb	1,f
 10743  0D38  317D               	addfsr 1,-3
 10744                           
 10745                           ;mcc_generated_files/mtouch/mtouch_button.c: 495:         button->baseline += button->re
      +                          ading;
 10746  0D39  0877               	movf	Button_Baseline_Update@button,w
 10747  0D3A  3E03               	addlw	3
 10748  0D3B  0086               	movwf	6
 10749  0D3C  3001               	movlw	1	; select bank2/3
 10750  0D3D  0087               	movwf	7
 10751  0D3E  3F40               	moviw [0]fsr1
 10752  0D3F  00F1               	movwf	??_Button_Baseline_Update
 10753  0D40  3F41               	moviw [1]fsr1
 10754  0D41  00F2               	movwf	??_Button_Baseline_Update+1
 10755  0D42  0871               	movf	??_Button_Baseline_Update,w
 10756  0D43  00F3               	movwf	??_Button_Baseline_Update+2
 10757  0D44  0872               	movf	??_Button_Baseline_Update+1,w
 10758  0D45  00F4               	movwf	??_Button_Baseline_Update+3
 10759  0D46  01F5               	clrf	??_Button_Baseline_Update+4
 10760  0D47  01F6               	clrf	??_Button_Baseline_Update+5
 10761  0D48  0877               	movf	Button_Baseline_Update@button,w
 10762  0D49  3E05               	addlw	5
 10763  0D4A  0086               	movwf	6
 10764  0D4B  3001               	movlw	1	; select bank2/3
 10765  0D4C  0087               	movwf	7
 10766  0D4D  0873               	movf	??_Button_Baseline_Update+2,w
 10767  0D4E  0781               	addwf	1,f
 10768  0D4F  3141               	addfsr 1,1
 10769  0D50  0874               	movf	??_Button_Baseline_Update+3,w
 10770  0D51  3D81               	addwfc	1,f
 10771  0D52  3141               	addfsr 1,1
 10772  0D53  0875               	movf	??_Button_Baseline_Update+4,w
 10773  0D54  3D81               	addwfc	1,f
 10774  0D55  3141               	addfsr 1,1
 10775  0D56  0876               	movf	??_Button_Baseline_Update+5,w
 10776  0D57  3D81               	addwfc	1,f
 10777                           
 10778                           ;mcc_generated_files/mtouch/mtouch_button.c: 496:         GIE = (uint8_t)1;
 10779  0D58  178B               	bsf	11,7	;volatile
 10780                           
 10781                           ;mcc_generated_files/mtouch/mtouch_button.c: 497:     }
 10782  0D59  0008               	return
 10783  0D5A                     l4630:	
 10784                           
 10785                           ;mcc_generated_files/mtouch/mtouch_button.c: 499:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 500:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 10786  0D5A  0877               	movf	Button_Baseline_Update@button,w
 10787  0D5B  3E05               	addlw	5
 10788  0D5C  0086               	movwf	6
 10789  0D5D  3001               	movlw	1	; select bank2/3
 10790  0D5E  0087               	movwf	7
 10791  0D5F  3F40               	moviw [0]fsr1
 10792  0D60  00F1               	movwf	??_Button_Baseline_Update
 10793  0D61  3F41               	moviw [1]fsr1
 10794  0D62  00F2               	movwf	??_Button_Baseline_Update+1
 10795  0D63  3F42               	moviw [2]fsr1
 10796  0D64  00F3               	movwf	??_Button_Baseline_Update+2
 10797  0D65  3F43               	moviw [3]fsr1
 10798  0D66  00F4               	movwf	??_Button_Baseline_Update+3
 10799  0D67  3004               	movlw	4
 10800  0D68                     u3075:	
 10801  0D68  36F4               	lsrf	??_Button_Baseline_Update+3,f
 10802  0D69  0CF3               	rrf	??_Button_Baseline_Update+2,f
 10803  0D6A  0CF2               	rrf	??_Button_Baseline_Update+1,f
 10804  0D6B  0CF1               	rrf	??_Button_Baseline_Update,f
 10805  0D6C  0B89               	decfsz	9,f
 10806  0D6D  2D68               	goto	u3075
 10807  0D6E  0877               	movf	Button_Baseline_Update@button,w
 10808  0D6F  3E05               	addlw	5
 10809  0D70  0086               	movwf	6
 10810  0D71  3001               	movlw	1	; select bank2/3
 10811  0D72  0087               	movwf	7
 10812  0D73  0871               	movf	??_Button_Baseline_Update,w
 10813  0D74  0281               	subwf	1,f
 10814  0D75  3141               	addfsr 1,1
 10815  0D76  0872               	movf	??_Button_Baseline_Update+1,w
 10816  0D77  3B81               	subwfb	1,f
 10817  0D78  3141               	addfsr 1,1
 10818  0D79  0873               	movf	??_Button_Baseline_Update+2,w
 10819  0D7A  3B81               	subwfb	1,f
 10820  0D7B  3141               	addfsr 1,1
 10821  0D7C  0874               	movf	??_Button_Baseline_Update+3,w
 10822  0D7D  3B81               	subwfb	1,f
 10823  0D7E  317D               	addfsr 1,-3
 10824                           
 10825                           ;mcc_generated_files/mtouch/mtouch_button.c: 501:         button->baseline += button->re
      +                          ading;
 10826  0D7F  0877               	movf	Button_Baseline_Update@button,w
 10827  0D80  3E03               	addlw	3
 10828  0D81  0086               	movwf	6
 10829  0D82  3001               	movlw	1	; select bank2/3
 10830  0D83  0087               	movwf	7
 10831  0D84  3F40               	moviw [0]fsr1
 10832  0D85  00F1               	movwf	??_Button_Baseline_Update
 10833  0D86  3F41               	moviw [1]fsr1
 10834  0D87  00F2               	movwf	??_Button_Baseline_Update+1
 10835  0D88  0871               	movf	??_Button_Baseline_Update,w
 10836  0D89  00F3               	movwf	??_Button_Baseline_Update+2
 10837  0D8A  0872               	movf	??_Button_Baseline_Update+1,w
 10838  0D8B  00F4               	movwf	??_Button_Baseline_Update+3
 10839  0D8C  01F5               	clrf	??_Button_Baseline_Update+4
 10840  0D8D  01F6               	clrf	??_Button_Baseline_Update+5
 10841  0D8E  0877               	movf	Button_Baseline_Update@button,w
 10842  0D8F  3E05               	addlw	5
 10843  0D90  0086               	movwf	6
 10844  0D91  3001               	movlw	1	; select bank2/3
 10845  0D92  0087               	movwf	7
 10846  0D93  0873               	movf	??_Button_Baseline_Update+2,w
 10847  0D94  0781               	addwf	1,f
 10848  0D95  3141               	addfsr 1,1
 10849  0D96  0874               	movf	??_Button_Baseline_Update+3,w
 10850  0D97  3D81               	addwfc	1,f
 10851  0D98  3141               	addfsr 1,1
 10852  0D99  0875               	movf	??_Button_Baseline_Update+4,w
 10853  0D9A  3D81               	addwfc	1,f
 10854  0D9B  3141               	addfsr 1,1
 10855  0D9C  0876               	movf	??_Button_Baseline_Update+5,w
 10856  0D9D  3D81               	addwfc	1,f
 10857  0D9E  0008               	return
 10858  0D9F                     __end_of_Button_Baseline_Update:	
 10859                           
 10860                           	psect	text65
 10861  0852                     __ptext65:	
 10862 ;; *************** function _Button_Baseline_Initialize *****************
 10863 ;; Defined at:
 10864 ;;		line 483 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10865 ;; Parameters:    Size  Location     Type
 10866 ;;  button          1    wreg     PTR struct .
 10867 ;;		 -> mtouch_button(64), 
 10868 ;; Auto vars:     Size  Location     Type
 10869 ;;  button          1    9[COMMON] PTR struct .
 10870 ;;		 -> mtouch_button(64), 
 10871 ;; Return value:  Size  Location     Type
 10872 ;;                  1    wreg      void 
 10873 ;; Registers used:
 10874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10875 ;; Tracked objects:
 10876 ;;		On entry : 0/0
 10877 ;;		On exit  : 0/0
 10878 ;;		Unchanged: 0/0
 10879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10880 ;;      Params:         0       0       0       0       0       0       0       0
 10881 ;;      Locals:         1       0       0       0       0       0       0       0
 10882 ;;      Temps:          0       4       0       0       0       0       0       0
 10883 ;;      Totals:         1       4       0       0       0       0       0       0
 10884 ;;Total ram usage:        5 bytes
 10885 ;; Hardware stack levels used:    1
 10886 ;; Hardware stack levels required when called:    6
 10887 ;; This function calls:
 10888 ;;		_MTOUCH_Sensor_RawSample_Get
 10889 ;; This function is called by:
 10890 ;;		_Button_State_Initializing
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894                           
 10895                           ;psect for function _Button_Baseline_Initialize
 10896  0852                     _Button_Baseline_Initialize:	
 10897                           
 10898                           ;incstack = 0
 10899                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10900                           ;Button_Baseline_Initialize@button stored from wreg
 10901  0852  00F9               	movwf	Button_Baseline_Initialize@button
 10902                           
 10903                           ;mcc_generated_files/mtouch/mtouch_button.c: 483: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 484: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 485:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 10904  0853  0A79               	incf	Button_Baseline_Initialize@button,w
 10905  0854  0086               	movwf	6
 10906  0855  3001               	movlw	1	; select bank2/3
 10907  0856  0087               	movwf	7
 10908  0857  0801               	movf	1,w
 10909  0858  3196  266A  3188   	fcall	_MTOUCH_Sensor_RawSample_Get
 10910  085B  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10911  085C  0020               	movlb	0	; select bank0
 10912  085D  00A0               	movwf	??_Button_Baseline_Initialize
 10913  085E  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10914  085F  00A1               	movwf	??_Button_Baseline_Initialize+1
 10915  0860  01A2               	clrf	??_Button_Baseline_Initialize+2
 10916  0861  01A3               	clrf	??_Button_Baseline_Initialize+3
 10917  0862  0879               	movf	Button_Baseline_Initialize@button,w
 10918  0863  3E05               	addlw	5
 10919  0864  0086               	movwf	6
 10920  0865  3001               	movlw	1	; select bank2/3
 10921  0866  0087               	movwf	7
 10922  0867  0820               	movf	??_Button_Baseline_Initialize,w
 10923  0868  3FC0               	movwi [0]fsr1
 10924  0869  0821               	movf	??_Button_Baseline_Initialize+1,w
 10925  086A  3FC1               	movwi [1]fsr1
 10926  086B  0822               	movf	??_Button_Baseline_Initialize+2,w
 10927  086C  3FC2               	movwi [2]fsr1
 10928  086D  0823               	movf	??_Button_Baseline_Initialize+3,w
 10929  086E  3FC3               	movwi [3]fsr1
 10930                           
 10931                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 10932  086F  0879               	movf	Button_Baseline_Initialize@button,w
 10933  0870  3E05               	addlw	5
 10934  0871  0086               	movwf	6
 10935  0872  3001               	movlw	1	; select bank2/3
 10936  0873  0087               	movwf	7
 10937  0874  3004               	movlw	4
 10938  0875                     u4755:	
 10939  0875  3581               	lslf	1,f
 10940  0876  3141               	addfsr 1,1
 10941  0877  0D81               	rlf	1,f
 10942  0878  3141               	addfsr 1,1
 10943  0879  0D81               	rlf	1,f
 10944  087A  3141               	addfsr 1,1
 10945  087B  0D81               	rlf	1,f
 10946  087C  317D               	addfsr 1,-3
 10947  087D  0B89               	decfsz	9,f
 10948  087E  2875               	goto	u4755
 10949  087F  0008               	return
 10950  0880                     __end_of_Button_Baseline_Initialize:	
 10951                           
 10952                           	psect	text66
 10953  14DB                     __ptext66:	
 10954 ;; *************** function _Button_Reading_Update *****************
 10955 ;; Defined at:
 10956 ;;		line 456 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10957 ;; Parameters:    Size  Location     Type
 10958 ;;  button          1    wreg     PTR struct .
 10959 ;;		 -> mtouch_button(64), 
 10960 ;; Auto vars:     Size  Location     Type
 10961 ;;  button          1    0[BANK0 ] PTR struct .
 10962 ;;		 -> mtouch_button(64), 
 10963 ;; Return value:  Size  Location     Type
 10964 ;;                  1    wreg      void 
 10965 ;; Registers used:
 10966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10967 ;; Tracked objects:
 10968 ;;		On entry : 0/0
 10969 ;;		On exit  : 0/0
 10970 ;;		Unchanged: 0/0
 10971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10972 ;;      Params:         0       0       0       0       0       0       0       0
 10973 ;;      Locals:         0       1       0       0       0       0       0       0
 10974 ;;      Temps:          0       0       0       0       0       0       0       0
 10975 ;;      Totals:         0       1       0       0       0       0       0       0
 10976 ;;Total ram usage:        1 bytes
 10977 ;; Hardware stack levels used:    1
 10978 ;; Hardware stack levels required when called:    7
 10979 ;; This function calls:
 10980 ;;		_Button_Reading_Update_Helper
 10981 ;; This function is called by:
 10982 ;;		_Button_Service
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           
 10987                           ;psect for function _Button_Reading_Update
 10988  14DB                     _Button_Reading_Update:	
 10989                           
 10990                           ;incstack = 0
 10991                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10992                           ;Button_Reading_Update@button stored from wreg
 10993  14DB  0020               	movlb	0	; select bank0
 10994  14DC  00A0               	movwf	Button_Reading_Update@button
 10995                           
 10996                           ;mcc_generated_files/mtouch/mtouch_button.c: 456: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 457: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 458:     if (GIE == (uint8_t) 1)
 10997  14DD  1F8B               	btfss	11,7	;volatile
 10998  14DE  2CE5               	goto	l6344
 10999                           
 11000                           ;mcc_generated_files/mtouch/mtouch_button.c: 459:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 460:         GIE = (uint8_t) 0;
 11001  14DF  138B               	bcf	11,7	;volatile
 11002                           
 11003                           ;mcc_generated_files/mtouch/mtouch_button.c: 461:         Button_Reading_Update_Helper(b
      +                          utton);
 11004  14E0  0820               	movf	Button_Reading_Update@button,w
 11005  14E1  318A  225D         	fcall	_Button_Reading_Update_Helper
 11006                           
 11007                           ;mcc_generated_files/mtouch/mtouch_button.c: 462:         GIE = (uint8_t) 1;
 11008  14E3  178B               	bsf	11,7	;volatile
 11009                           
 11010                           ;mcc_generated_files/mtouch/mtouch_button.c: 463:     }
 11011  14E4  0008               	return
 11012  14E5                     l6344:	
 11013                           
 11014                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         Button_Reading_Update_Helper(button);
 11015  14E5  0820               	movf	Button_Reading_Update@button,w
 11016  14E6  318A  225D         	fcall	_Button_Reading_Update_Helper
 11017  14E8  0008               	return
 11018  14E9                     __end_of_Button_Reading_Update:	
 11019                           
 11020                           	psect	text67
 11021  0A5D                     __ptext67:	
 11022 ;; *************** function _Button_Reading_Update_Helper *****************
 11023 ;; Defined at:
 11024 ;;		line 470 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;  button          1    wreg     PTR struct .
 11027 ;;		 -> mtouch_button(64), 
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;  button          1   11[COMMON] PTR struct .
 11030 ;;		 -> mtouch_button(64), 
 11031 ;; Return value:  Size  Location     Type
 11032 ;;                  1    wreg      void 
 11033 ;; Registers used:
 11034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11040 ;;      Params:         0       0       0       0       0       0       0       0
 11041 ;;      Locals:         1       0       0       0       0       0       0       0
 11042 ;;      Temps:          2       0       0       0       0       0       0       0
 11043 ;;      Totals:         3       0       0       0       0       0       0       0
 11044 ;;Total ram usage:        3 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; Hardware stack levels required when called:    6
 11047 ;; This function calls:
 11048 ;;		_MTOUCH_Sensor_RawSample_Get
 11049 ;; This function is called by:
 11050 ;;		_Button_Reading_Update
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           
 11055                           ;psect for function _Button_Reading_Update_Helper
 11056  0A5D                     _Button_Reading_Update_Helper:	
 11057                           
 11058                           ;incstack = 0
 11059                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11060                           ;Button_Reading_Update_Helper@button stored from wreg
 11061  0A5D  00FB               	movwf	Button_Reading_Update_Helper@button
 11062                           
 11063                           ;mcc_generated_files/mtouch/mtouch_button.c: 470: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 471: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 472:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 11064  0A5E  087B               	movf	Button_Reading_Update_Helper@button,w
 11065  0A5F  3E02               	addlw	2
 11066  0A60  0086               	movwf	6
 11067  0A61  3001               	movlw	1	; select bank2/3
 11068  0A62  0087               	movwf	7
 11069  0A63  0801               	movf	1,w
 11070  0A64  1903               	btfsc	3,2
 11071  0A65  2A99               	goto	l6260
 11072                           
 11073                           ;mcc_generated_files/mtouch/mtouch_button.c: 473:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 474:         button->reading -= button->reading>>((uint8_t)2u);
 11074  0A66  087B               	movf	Button_Reading_Update_Helper@button,w
 11075  0A67  3E03               	addlw	3
 11076  0A68  0086               	movwf	6
 11077  0A69  3001               	movlw	1	; select bank2/3
 11078  0A6A  0087               	movwf	7
 11079  0A6B  3F40               	moviw [0]fsr1
 11080  0A6C  00F9               	movwf	??_Button_Reading_Update_Helper
 11081  0A6D  3F41               	moviw [1]fsr1
 11082  0A6E  00FA               	movwf	??_Button_Reading_Update_Helper+1
 11083  0A6F  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11084  0A70  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11085  0A71  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11086  0A72  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11087  0A73  087B               	movf	Button_Reading_Update_Helper@button,w
 11088  0A74  3E03               	addlw	3
 11089  0A75  0086               	movwf	6
 11090  0A76  3001               	movlw	1	; select bank2/3
 11091  0A77  0087               	movwf	7
 11092  0A78  0879               	movf	??_Button_Reading_Update_Helper,w
 11093  0A79  0281               	subwf	1,f
 11094  0A7A  3141               	addfsr 1,1
 11095  0A7B  087A               	movf	??_Button_Reading_Update_Helper+1,w
 11096  0A7C  3B81               	subwfb	1,f
 11097  0A7D  317F               	addfsr 1,-1
 11098                           
 11099                           ;mcc_generated_files/mtouch/mtouch_button.c: 475:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 11100  0A7E  0A7B               	incf	Button_Reading_Update_Helper@button,w
 11101  0A7F  0086               	movwf	6
 11102  0A80  3001               	movlw	1	; select bank2/3
 11103  0A81  0087               	movwf	7
 11104  0A82  0801               	movf	1,w
 11105  0A83  3196  266A         	fcall	_MTOUCH_Sensor_RawSample_Get
 11106  0A85  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11107  0A86  00F9               	movwf	??_Button_Reading_Update_Helper
 11108  0A87  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11109  0A88  00FA               	movwf	??_Button_Reading_Update_Helper+1
 11110  0A89  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11111  0A8A  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11112  0A8B  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11113  0A8C  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11114  0A8D  087B               	movf	Button_Reading_Update_Helper@button,w
 11115  0A8E  3E03               	addlw	3
 11116  0A8F  0086               	movwf	6
 11117  0A90  3001               	movlw	1	; select bank2/3
 11118  0A91  0087               	movwf	7
 11119  0A92  0879               	movf	??_Button_Reading_Update_Helper,w
 11120  0A93  0781               	addwf	1,f
 11121  0A94  3141               	addfsr 1,1
 11122  0A95  087A               	movf	??_Button_Reading_Update_Helper+1,w
 11123  0A96  3D81               	addwfc	1,f
 11124  0A97  317F               	addfsr 1,-1
 11125                           
 11126                           ;mcc_generated_files/mtouch/mtouch_button.c: 476:     }
 11127  0A98  0008               	return
 11128  0A99                     l6260:	
 11129                           
 11130                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 479:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11131  0A99  0A7B               	incf	Button_Reading_Update_Helper@button,w
 11132  0A9A  0086               	movwf	6
 11133  0A9B  3001               	movlw	1	; select bank2/3
 11134  0A9C  0087               	movwf	7
 11135  0A9D  0801               	movf	1,w
 11136  0A9E  3196  266A         	fcall	_MTOUCH_Sensor_RawSample_Get
 11137  0AA0  087B               	movf	Button_Reading_Update_Helper@button,w
 11138  0AA1  3E03               	addlw	3
 11139  0AA2  0086               	movwf	6
 11140  0AA3  3001               	movlw	1	; select bank2/3
 11141  0AA4  0087               	movwf	7
 11142  0AA5  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11143  0AA6  3FC0               	movwi [0]fsr1
 11144  0AA7  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11145  0AA8  3FC1               	movwi [1]fsr1
 11146  0AA9  0008               	return
 11147  0AAA                     __end_of_Button_Reading_Update_Helper:	
 11148                           
 11149                           	psect	text68
 11150  166A                     __ptext68:	
 11151 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 11152 ;; Defined at:
 11153 ;;		line 800 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11154 ;; Parameters:    Size  Location     Type
 11155 ;;  name            1    wreg     enum E2854
 11156 ;; Auto vars:     Size  Location     Type
 11157 ;;  name            1    8[COMMON] enum E2854
 11158 ;; Return value:  Size  Location     Type
 11159 ;;                  2    5[COMMON] unsigned short 
 11160 ;; Registers used:
 11161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11162 ;; Tracked objects:
 11163 ;;		On entry : 0/0
 11164 ;;		On exit  : 0/0
 11165 ;;		Unchanged: 0/0
 11166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11167 ;;      Params:         2       0       0       0       0       0       0       0
 11168 ;;      Locals:         1       0       0       0       0       0       0       0
 11169 ;;      Temps:          1       0       0       0       0       0       0       0
 11170 ;;      Totals:         4       0       0       0       0       0       0       0
 11171 ;;Total ram usage:        4 bytes
 11172 ;; Hardware stack levels used:    1
 11173 ;; Hardware stack levels required when called:    5
 11174 ;; This function calls:
 11175 ;;		___bmul
 11176 ;; This function is called by:
 11177 ;;		_Button_Reading_Update_Helper
 11178 ;;		_Button_Baseline_Initialize
 11179 ;; This function uses a non-reentrant model
 11180 ;;
 11181                           
 11182                           
 11183                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 11184  166A                     _MTOUCH_Sensor_RawSample_Get:	
 11185                           
 11186                           ;incstack = 0
 11187                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11188                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 11189  166A  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 11190                           
 11191                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 800: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          801: {;mcc_generated_files/mtouch/mtouch_sensor.c: 802:     if (name < 4u)
 11192  166B  3004               	movlw	4
 11193  166C  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 11194  166D  1803               	skipnc
 11195  166E  2E7F               	goto	l6174
 11196                           
 11197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 803:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 804:         return mtouch_sensor[name].rawSample;
 11198  166F  3009               	movlw	9
 11199  1670  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 11200  1671  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 11201  1672  00F1               	movwf	___bmul@multiplicand
 11202  1673  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 11203  1674  3195  2562         	fcall	___bmul
 11204  1676  3E26               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 11205  1677  0086               	movwf	6
 11206  1678  3001               	movlw	1	; select bank2/3
 11207  1679  0087               	movwf	7
 11208  167A  3F40               	moviw [0]fsr1
 11209  167B  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 11210  167C  3F41               	moviw [1]fsr1
 11211  167D  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 11212  167E  0008               	return
 11213  167F                     l6174:	
 11214                           
 11215                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:         return (mtouch_sensor_sample_t
      +                          )0;
 11216  167F  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 11217  1680  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 11218  1681  0008               	return
 11219  1682                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 11220                           
 11221                           	psect	text69
 11222  1562                     __ptext69:	
 11223 ;; *************** function ___bmul *****************
 11224 ;; Defined at:
 11225 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;  multiplier      1    wreg     unsigned char 
 11228 ;;  multiplicand    1    1[COMMON] unsigned char 
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;  multiplier      1    4[COMMON] unsigned char 
 11231 ;;  product         1    3[COMMON] unsigned char 
 11232 ;; Return value:  Size  Location     Type
 11233 ;;                  1    wreg      unsigned char 
 11234 ;; Registers used:
 11235 ;;		wreg, status,2, status,0
 11236 ;; Tracked objects:
 11237 ;;		On entry : 0/0
 11238 ;;		On exit  : 0/0
 11239 ;;		Unchanged: 0/0
 11240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11241 ;;      Params:         1       0       0       0       0       0       0       0
 11242 ;;      Locals:         2       0       0       0       0       0       0       0
 11243 ;;      Temps:          1       0       0       0       0       0       0       0
 11244 ;;      Totals:         4       0       0       0       0       0       0       0
 11245 ;;Total ram usage:        4 bytes
 11246 ;; Hardware stack levels used:    1
 11247 ;; Hardware stack levels required when called:    4
 11248 ;; This function calls:
 11249 ;;		Nothing
 11250 ;; This function is called by:
 11251 ;;		_MTOUCH_Sensor_Initialize
 11252 ;;		_MTOUCH_Sensor_RawSample_Get
 11253 ;;		_MTOUCH_Sensor_Enable
 11254 ;;		_MTOUCH_Sensor_Calibrate
 11255 ;;		_MTOUCH_Sensor_isCalibrated
 11256 ;;		_MTOUCH_Sensor_wasSampled
 11257 ;;		_MTOUCH_Sensor_isAnySensorActive
 11258 ;;		_MTOUCH_Sensor_Disable
 11259 ;;		_MTOUCH_Sensor_isEnabled
 11260 ;;		_MTOUCH_Sensor_isActive
 11261 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 11262 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 11263 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 11264 ;;		_MTOUCH_Sensor_Oversampling_Get
 11265 ;;		_MTOUCH_Sensor_Oversampling_Set
 11266 ;; This function uses a non-reentrant model
 11267 ;;
 11268                           
 11269                           
 11270                           ;psect for function ___bmul
 11271  1562                     ___bmul:	
 11272                           
 11273                           ;incstack = 0
 11274                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11275                           ;___bmul@multiplier stored from wreg
 11276  1562  00F4               	movwf	___bmul@multiplier
 11277  1563  01F3               	clrf	___bmul@product
 11278  1564                     l5906:	
 11279  1564  1C74               	btfss	___bmul@multiplier,0
 11280  1565  2D6A               	goto	l5910
 11281  1566  0871               	movf	___bmul@multiplicand,w
 11282  1567  00F2               	movwf	??___bmul
 11283  1568  0872               	movf	??___bmul,w
 11284  1569  07F3               	addwf	___bmul@product,f
 11285  156A                     l5910:	
 11286  156A  1003               	clrc
 11287  156B  0DF1               	rlf	___bmul@multiplicand,f
 11288  156C  1003               	clrc
 11289  156D  0CF4               	rrf	___bmul@multiplier,f
 11290  156E  0874               	movf	___bmul@multiplier,w
 11291  156F  1D03               	btfss	3,2
 11292  1570  2D64               	goto	l5906
 11293  1571  0873               	movf	___bmul@product,w
 11294  1572  0008               	return
 11295  1573                     __end_of___bmul:	
 11296                           
 11297                           	psect	text70
 11298  0C89                     __ptext70:	
 11299 ;; *************** function _Button_Deviation_Update *****************
 11300 ;; Defined at:
 11301 ;;		line 407 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;  button          1    wreg     PTR struct .
 11304 ;;		 -> mtouch_button(64), 
 11305 ;; Auto vars:     Size  Location     Type
 11306 ;;  button          1    0[BANK0 ] PTR struct .
 11307 ;;		 -> mtouch_button(64), 
 11308 ;;  deviation       4    1[BANK0 ] long 
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  1    wreg      void 
 11311 ;; Registers used:
 11312 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11318 ;;      Params:         0       0       0       0       0       0       0       0
 11319 ;;      Locals:         0       5       0       0       0       0       0       0
 11320 ;;      Temps:         10       0       0       0       0       0       0       0
 11321 ;;      Totals:        10       5       0       0       0       0       0       0
 11322 ;;Total ram usage:       15 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    4
 11325 ;; This function calls:
 11326 ;;		Nothing
 11327 ;; This function is called by:
 11328 ;;		_Button_Service
 11329 ;; This function uses a non-reentrant model
 11330 ;;
 11331                           
 11332                           
 11333                           ;psect for function _Button_Deviation_Update
 11334  0C89                     _Button_Deviation_Update:	
 11335                           
 11336                           ;incstack = 0
 11337                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 11338                           ;Button_Deviation_Update@button stored from wreg
 11339  0C89  0020               	movlb	0	; select bank0
 11340  0C8A  00A0               	movwf	Button_Deviation_Update@button
 11341                           
 11342                           ;mcc_generated_files/mtouch/mtouch_button.c: 407: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 408: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 409:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 411:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 11343  0C8B  0820               	movf	Button_Deviation_Update@button,w
 11344  0C8C  3E05               	addlw	5
 11345  0C8D  0086               	movwf	6
 11346  0C8E  3001               	movlw	1	; select bank2/3
 11347  0C8F  0087               	movwf	7
 11348  0C90  3F40               	moviw [0]fsr1
 11349  0C91  00F1               	movwf	??_Button_Deviation_Update
 11350  0C92  3F41               	moviw [1]fsr1
 11351  0C93  00F2               	movwf	??_Button_Deviation_Update+1
 11352  0C94  3F42               	moviw [2]fsr1
 11353  0C95  00F3               	movwf	??_Button_Deviation_Update+2
 11354  0C96  3F43               	moviw [3]fsr1
 11355  0C97  00F4               	movwf	??_Button_Deviation_Update+3
 11356  0C98  3004               	movlw	4
 11357  0C99                     u3235:	
 11358  0C99  36F4               	lsrf	??_Button_Deviation_Update+3,f
 11359  0C9A  0CF3               	rrf	??_Button_Deviation_Update+2,f
 11360  0C9B  0CF2               	rrf	??_Button_Deviation_Update+1,f
 11361  0C9C  0CF1               	rrf	??_Button_Deviation_Update,f
 11362  0C9D  0B89               	decfsz	9,f
 11363  0C9E  2C99               	goto	u3235
 11364  0C9F  0820               	movf	Button_Deviation_Update@button,w
 11365  0CA0  3E03               	addlw	3
 11366  0CA1  0086               	movwf	6
 11367  0CA2  3001               	movlw	1	; select bank2/3
 11368  0CA3  0087               	movwf	7
 11369  0CA4  3F40               	moviw [0]fsr1
 11370  0CA5  00F5               	movwf	??_Button_Deviation_Update+4
 11371  0CA6  3F41               	moviw [1]fsr1
 11372  0CA7  00F6               	movwf	??_Button_Deviation_Update+5
 11373  0CA8  0875               	movf	??_Button_Deviation_Update+4,w
 11374  0CA9  00F7               	movwf	??_Button_Deviation_Update+6
 11375  0CAA  0876               	movf	??_Button_Deviation_Update+5,w
 11376  0CAB  00F8               	movwf	??_Button_Deviation_Update+7
 11377  0CAC  01F9               	clrf	??_Button_Deviation_Update+8
 11378  0CAD  01FA               	clrf	??_Button_Deviation_Update+9
 11379  0CAE  0871               	movf	??_Button_Deviation_Update,w
 11380  0CAF  02F7               	subwf	??_Button_Deviation_Update+6,f
 11381  0CB0  0872               	movf	??_Button_Deviation_Update+1,w
 11382  0CB1  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 11383  0CB2  0873               	movf	??_Button_Deviation_Update+2,w
 11384  0CB3  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 11385  0CB4  0874               	movf	??_Button_Deviation_Update+3,w
 11386  0CB5  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 11387  0CB6  087A               	movf	??_Button_Deviation_Update+9,w
 11388  0CB7  00A4               	movwf	Button_Deviation_Update@deviation+3
 11389  0CB8  0879               	movf	??_Button_Deviation_Update+8,w
 11390  0CB9  00A3               	movwf	Button_Deviation_Update@deviation+2
 11391  0CBA  0878               	movf	??_Button_Deviation_Update+7,w
 11392  0CBB  00A2               	movwf	Button_Deviation_Update@deviation+1
 11393  0CBC  0877               	movf	??_Button_Deviation_Update+6,w
 11394  0CBD  00A1               	movwf	Button_Deviation_Update@deviation
 11395                           
 11396                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     deviation = deviation >> (button->
      +                          scaling);
 11397  0CBE  0821               	movf	Button_Deviation_Update@deviation,w
 11398  0CBF  00F1               	movwf	??_Button_Deviation_Update
 11399  0CC0  0822               	movf	Button_Deviation_Update@deviation+1,w
 11400  0CC1  00F2               	movwf	??_Button_Deviation_Update+1
 11401  0CC2  0823               	movf	Button_Deviation_Update@deviation+2,w
 11402  0CC3  00F3               	movwf	??_Button_Deviation_Update+2
 11403  0CC4  0824               	movf	Button_Deviation_Update@deviation+3,w
 11404  0CC5  00F4               	movwf	??_Button_Deviation_Update+3
 11405  0CC6  0820               	movf	Button_Deviation_Update@button,w
 11406  0CC7  3E0F               	addlw	15
 11407  0CC8  0086               	movwf	6
 11408  0CC9  3001               	movlw	1	; select bank2/3
 11409  0CCA  0087               	movwf	7
 11410  0CCB  0A01               	incf	1,w
 11411  0CCC  2CD1               	goto	u3240
 11412  0CCD                     u3245:	
 11413  0CCD  37F4               	asrf	??_Button_Deviation_Update+3,f
 11414  0CCE  0CF3               	rrf	??_Button_Deviation_Update+2,f
 11415  0CCF  0CF2               	rrf	??_Button_Deviation_Update+1,f
 11416  0CD0  0CF1               	rrf	??_Button_Deviation_Update,f
 11417  0CD1                     u3240:	
 11418  0CD1  0B89               	decfsz	9,f
 11419  0CD2  2CCD               	goto	u3245
 11420  0CD3  0874               	movf	??_Button_Deviation_Update+3,w
 11421  0CD4  00A4               	movwf	Button_Deviation_Update@deviation+3
 11422  0CD5  0873               	movf	??_Button_Deviation_Update+2,w
 11423  0CD6  00A3               	movwf	Button_Deviation_Update@deviation+2
 11424  0CD7  0872               	movf	??_Button_Deviation_Update+1,w
 11425  0CD8  00A2               	movwf	Button_Deviation_Update@deviation+1
 11426  0CD9  0871               	movf	??_Button_Deviation_Update,w
 11427  0CDA  00A1               	movwf	Button_Deviation_Update@deviation
 11428                           
 11429                           ;mcc_generated_files/mtouch/mtouch_button.c: 417:     if (deviation > ((0x7f)))
 11430  0CDB  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 11431  0CDC  2CF2               	goto	l4744
 11432  0CDD  0824               	movf	Button_Deviation_Update@deviation+3,w
 11433  0CDE  1D03               	btfss	3,2
 11434  0CDF  2CEA               	goto	l4742
 11435  0CE0  0823               	movf	Button_Deviation_Update@deviation+2,w
 11436  0CE1  1D03               	btfss	3,2
 11437  0CE2  2CEA               	goto	l4742
 11438  0CE3  0822               	movf	Button_Deviation_Update@deviation+1,w
 11439  0CE4  1D03               	btfss	3,2
 11440  0CE5  2CEA               	goto	l4742
 11441  0CE6  3080               	movlw	128
 11442  0CE7  0221               	subwf	Button_Deviation_Update@deviation,w
 11443  0CE8  1C03               	btfss	3,0
 11444  0CE9  2CF2               	goto	l4744
 11445  0CEA                     l4742:	
 11446                           
 11447                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 419:         deviation = ((0x7f));
 11448  0CEA  3000               	movlw	0
 11449  0CEB  00A4               	movwf	Button_Deviation_Update@deviation+3
 11450  0CEC  3000               	movlw	0
 11451  0CED  00A3               	movwf	Button_Deviation_Update@deviation+2
 11452  0CEE  3000               	movlw	0
 11453  0CEF  00A2               	movwf	Button_Deviation_Update@deviation+1
 11454  0CF0  307F               	movlw	127
 11455  0CF1  00A1               	movwf	Button_Deviation_Update@deviation
 11456  0CF2                     l4744:	
 11457                           
 11458                           ;mcc_generated_files/mtouch/mtouch_button.c: 421:     if (deviation < ((-1-0x7f)))
 11459  0CF2  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 11460  0CF3  2D06               	goto	l4748
 11461  0CF4  3080               	movlw	128
 11462  0CF5  0221               	subwf	Button_Deviation_Update@deviation,w
 11463  0CF6  30FF               	movlw	255
 11464  0CF7  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 11465  0CF8  30FF               	movlw	255
 11466  0CF9  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 11467  0CFA  30FF               	movlw	255
 11468  0CFB  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 11469  0CFC  1803               	btfsc	3,0
 11470  0CFD  2D06               	goto	l4748
 11471                           
 11472                           ;mcc_generated_files/mtouch/mtouch_button.c: 422:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 423:         deviation = ((-1-0x7f));
 11473  0CFE  30FF               	movlw	255
 11474  0CFF  00A4               	movwf	Button_Deviation_Update@deviation+3
 11475  0D00  30FF               	movlw	255
 11476  0D01  00A3               	movwf	Button_Deviation_Update@deviation+2
 11477  0D02  30FF               	movlw	255
 11478  0D03  00A2               	movwf	Button_Deviation_Update@deviation+1
 11479  0D04  3080               	movlw	128
 11480  0D05  00A1               	movwf	Button_Deviation_Update@deviation
 11481  0D06                     l4748:	
 11482                           
 11483                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 11484  0D06  0821               	movf	Button_Deviation_Update@deviation,w
 11485  0D07  00F1               	movwf	??_Button_Deviation_Update
 11486  0D08  0820               	movf	Button_Deviation_Update@button,w
 11487  0D09  3E09               	addlw	9
 11488  0D0A  0086               	movwf	6
 11489  0D0B  3001               	movlw	1	; select bank2/3
 11490  0D0C  0087               	movwf	7
 11491  0D0D  0871               	movf	??_Button_Deviation_Update,w
 11492  0D0E  0081               	movwf	1
 11493  0D0F  0008               	return
 11494  0D10                     __end_of_Button_Deviation_Update:	
 11495                           
 11496                           	psect	text71
 11497  1450                     __ptext71:	
 11498 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 11499 ;; Defined at:
 11500 ;;		line 536 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11501 ;; Parameters:    Size  Location     Type
 11502 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
 11503 ;;		 -> myButtonPressedCallback(1), 
 11504 ;; Auto vars:     Size  Location     Type
 11505 ;;		None
 11506 ;; Return value:  Size  Location     Type
 11507 ;;                  1    wreg      void 
 11508 ;; Registers used:
 11509 ;;		wreg
 11510 ;; Tracked objects:
 11511 ;;		On entry : 0/0
 11512 ;;		On exit  : 0/0
 11513 ;;		Unchanged: 0/0
 11514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11515 ;;      Params:         2       0       0       0       0       0       0       0
 11516 ;;      Locals:         0       0       0       0       0       0       0       0
 11517 ;;      Temps:          0       0       0       0       0       0       0       0
 11518 ;;      Totals:         2       0       0       0       0       0       0       0
 11519 ;;Total ram usage:        2 bytes
 11520 ;; Hardware stack levels used:    1
 11521 ;; Hardware stack levels required when called:    4
 11522 ;; This function calls:
 11523 ;;		Nothing
 11524 ;; This function is called by:
 11525 ;;		_main
 11526 ;; This function uses a non-reentrant model
 11527 ;;
 11528                           
 11529                           
 11530                           ;psect for function _MTOUCH_Button_SetPressedCallback
 11531  1450                     _MTOUCH_Button_SetPressedCallback:	
 11532                           
 11533                           ;mcc_generated_files/mtouch/mtouch_button.c: 536: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          537: {;mcc_generated_files/mtouch/mtouch_button.c: 538:     callback_pressed = callback;
 11534                           
 11535                           ;incstack = 0
 11536                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 11537  1450  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 11538  1451  0021               	movlb	1	; select bank1
 11539  1452  00C7               	movwf	(_callback_pressed+1)^(0+128)
 11540  1453  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 11541  1454  00C6               	movwf	_callback_pressed^(0+128)
 11542  1455  0008               	return
 11543  1456                     __end_of_MTOUCH_Button_SetPressedCallback:	
 11544                           
 11545                           	psect	text72
 11546  144A                     __ptext72:	
 11547 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 11548 ;; Defined at:
 11549 ;;		line 540 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
 11552 ;;		 -> myButtonReleasedCallback(1), 
 11553 ;; Auto vars:     Size  Location     Type
 11554 ;;		None
 11555 ;; Return value:  Size  Location     Type
 11556 ;;                  1    wreg      void 
 11557 ;; Registers used:
 11558 ;;		wreg
 11559 ;; Tracked objects:
 11560 ;;		On entry : 0/0
 11561 ;;		On exit  : 0/0
 11562 ;;		Unchanged: 0/0
 11563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11564 ;;      Params:         2       0       0       0       0       0       0       0
 11565 ;;      Locals:         0       0       0       0       0       0       0       0
 11566 ;;      Temps:          0       0       0       0       0       0       0       0
 11567 ;;      Totals:         2       0       0       0       0       0       0       0
 11568 ;;Total ram usage:        2 bytes
 11569 ;; Hardware stack levels used:    1
 11570 ;; Hardware stack levels required when called:    4
 11571 ;; This function calls:
 11572 ;;		Nothing
 11573 ;; This function is called by:
 11574 ;;		_main
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           
 11579                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 11580  144A                     _MTOUCH_Button_SetNotPressedCallback:	
 11581                           
 11582                           ;mcc_generated_files/mtouch/mtouch_button.c: 540: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 541: {;mcc_generated_files/mtouch/mtouch_button.c: 542:     callback_notPressed = cal
      +                          lback;
 11583                           
 11584                           ;incstack = 0
 11585                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 11586  144A  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 11587  144B  0021               	movlb	1	; select bank1
 11588  144C  00C5               	movwf	(_callback_notPressed+1)^(0+128)
 11589  144D  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 11590  144E  00C4               	movwf	_callback_notPressed^(0+128)
 11591  144F  0008               	return
 11592  1450                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 11593                           
 11594                           	psect	text73
 11595  142C                     __ptext73:	
 11596 ;; *************** function _EUSART_is_rx_ready *****************
 11597 ;; Defined at:
 11598 ;;		line 124 in file "mcc_generated_files/eusart.c"
 11599 ;; Parameters:    Size  Location     Type
 11600 ;;		None
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;		None
 11603 ;; Return value:  Size  Location     Type
 11604 ;;                  1    wreg      unsigned char 
 11605 ;; Registers used:
 11606 ;;		wreg
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11612 ;;      Params:         0       0       0       0       0       0       0       0
 11613 ;;      Locals:         0       0       0       0       0       0       0       0
 11614 ;;      Temps:          0       0       0       0       0       0       0       0
 11615 ;;      Totals:         0       0       0       0       0       0       0       0
 11616 ;;Total ram usage:        0 bytes
 11617 ;; Hardware stack levels used:    1
 11618 ;; Hardware stack levels required when called:    4
 11619 ;; This function calls:
 11620 ;;		Nothing
 11621 ;; This function is called by:
 11622 ;;		_main
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           
 11627                           ;psect for function _EUSART_is_rx_ready
 11628  142C                     _EUSART_is_rx_ready:	
 11629                           
 11630                           ;mcc_generated_files/eusart.c: 126:     return eusartRxCount;
 11631                           
 11632                           ;incstack = 0
 11633                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 11634  142C  0020               	movlb	0	; select bank0
 11635  142D  086C               	movf	_eusartRxCount,w	;volatile
 11636  142E  0008               	return
 11637  142F                     __end_of_EUSART_is_rx_ready:	
 11638                           
 11639                           	psect	text74
 11640  1738                     __ptext74:	
 11641 ;; *************** function _EUSART_Read *****************
 11642 ;; Defined at:
 11643 ;;		line 138 in file "mcc_generated_files/eusart.c"
 11644 ;; Parameters:    Size  Location     Type
 11645 ;;		None
 11646 ;; Auto vars:     Size  Location     Type
 11647 ;;  readValue       1    2[COMMON] unsigned char 
 11648 ;; Return value:  Size  Location     Type
 11649 ;;                  1    wreg      unsigned char 
 11650 ;; Registers used:
 11651 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11652 ;; Tracked objects:
 11653 ;;		On entry : 0/0
 11654 ;;		On exit  : 0/0
 11655 ;;		Unchanged: 0/0
 11656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11657 ;;      Params:         0       0       0       0       0       0       0       0
 11658 ;;      Locals:         1       0       0       0       0       0       0       0
 11659 ;;      Temps:          1       0       0       0       0       0       0       0
 11660 ;;      Totals:         2       0       0       0       0       0       0       0
 11661 ;;Total ram usage:        2 bytes
 11662 ;; Hardware stack levels used:    1
 11663 ;; Hardware stack levels required when called:    4
 11664 ;; This function calls:
 11665 ;;		Nothing
 11666 ;; This function is called by:
 11667 ;;		_main
 11668 ;;		_getch
 11669 ;; This function uses a non-reentrant model
 11670 ;;
 11671                           
 11672                           
 11673                           ;psect for function _EUSART_Read
 11674  1738                     _EUSART_Read:	
 11675  1738                     l5032:	
 11676                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 11677                           
 11678                           ;incstack = 0
 11679                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 11680                           
 11681                           
 11682                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 11683  1738  0020               	movlb	0	; select bank0
 11684  1739  086C               	movf	_eusartRxCount,w	;volatile
 11685  173A  1903               	btfsc	3,2
 11686  173B  2F38               	goto	l5032
 11687                           
 11688                           ;mcc_generated_files/eusart.c: 146:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 11689  173C  086D               	movf	_eusartRxTail,w	;volatile
 11690  173D  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 11691  173E  0086               	movwf	6
 11692  173F  0187               	clrf	7
 11693  1740  0801               	movf	1,w
 11694  1741  00F1               	movwf	??_EUSART_Read
 11695  1742  0871               	movf	??_EUSART_Read,w
 11696  1743  0021               	movlb	1	; select bank1
 11697  1744  00BD               	movwf	_eusartRxLastError^(0+128)	;volatile
 11698                           
 11699                           ;mcc_generated_files/eusart.c: 148:     readValue = eusartRxBuffer[eusartRxTail++];
 11700  1745  0020               	movlb	0	; select bank0
 11701  1746  086D               	movf	_eusartRxTail,w
 11702  1747  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 11703  1748  0086               	movwf	6
 11704  1749  0187               	clrf	7
 11705  174A  0801               	movf	1,w
 11706  174B  00F1               	movwf	??_EUSART_Read
 11707  174C  0871               	movf	??_EUSART_Read,w
 11708  174D  00F2               	movwf	EUSART_Read@readValue
 11709  174E  3001               	movlw	1
 11710  174F  00F1               	movwf	??_EUSART_Read
 11711  1750  0871               	movf	??_EUSART_Read,w
 11712  1751  07ED               	addwf	_eusartRxTail,f	;volatile
 11713                           
 11714                           ;mcc_generated_files/eusart.c: 149:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 11715  1752  3008               	movlw	8
 11716  1753  026D               	subwf	_eusartRxTail,w	;volatile
 11717  1754  1803               	btfsc	3,0
 11718                           
 11719                           ;mcc_generated_files/eusart.c: 150:     {;mcc_generated_files/eusart.c: 151:         eus
      +                          artRxTail = 0;
 11720  1755  01ED               	clrf	_eusartRxTail	;volatile
 11721                           
 11722                           ;mcc_generated_files/eusart.c: 153:     PIE1bits.RCIE = 0;
 11723  1756  0021               	movlb	1	; select bank1
 11724  1757  1291               	bcf	17,5	;volatile
 11725                           
 11726                           ;mcc_generated_files/eusart.c: 154:     eusartRxCount--;
 11727  1758  3001               	movlw	1
 11728  1759  0020               	movlb	0	; select bank0
 11729  175A  02EC               	subwf	_eusartRxCount,f	;volatile
 11730                           
 11731                           ;mcc_generated_files/eusart.c: 155:     PIE1bits.RCIE = 1;
 11732  175B  0021               	movlb	1	; select bank1
 11733  175C  1691               	bsf	17,5	;volatile
 11734                           
 11735                           ;mcc_generated_files/eusart.c: 157:     return readValue;
 11736  175D  0872               	movf	EUSART_Read@readValue,w
 11737  175E  0008               	return
 11738  175F                     __end_of_EUSART_Read:	
 11739                           
 11740                           	psect	text75
 11741  03D4                     __ptext75:	
 11742 ;; *************** function _DATA_PROCESS *****************
 11743 ;; Defined at:
 11744 ;;		line 207 in file "main.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  x               1    wreg     unsigned char 
 11747 ;; Auto vars:     Size  Location     Type
 11748 ;;  x               1   49[BANK0 ] unsigned char 
 11749 ;; Return value:  Size  Location     Type
 11750 ;;                  1    wreg      void 
 11751 ;; Registers used:
 11752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11753 ;; Tracked objects:
 11754 ;;		On entry : 0/0
 11755 ;;		On exit  : 0/0
 11756 ;;		Unchanged: 0/0
 11757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11758 ;;      Params:         0       0       0       0       0       0       0       0
 11759 ;;      Locals:         0       1       0       0       0       0       0       0
 11760 ;;      Temps:          0       2       0       0       0       0       0       0
 11761 ;;      Totals:         0       3       0       0       0       0       0       0
 11762 ;;Total ram usage:        3 bytes
 11763 ;; Hardware stack levels used:    1
 11764 ;; Hardware stack levels required when called:   14
 11765 ;; This function calls:
 11766 ;;		_LED_PROCESS
 11767 ;;		_RELAY_PROCESS
 11768 ;;		_update_state
 11769 ;; This function is called by:
 11770 ;;		_main
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           
 11775                           ;psect for function _DATA_PROCESS
 11776  03D4                     _DATA_PROCESS:	
 11777                           
 11778                           ;incstack = 0
 11779                           ; Regs used in _DATA_PROCESS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11780                           ;DATA_PROCESS@x stored from wreg
 11781  03D4  0020               	movlb	0	; select bank0
 11782  03D5  00D1               	movwf	DATA_PROCESS@x
 11783                           
 11784                           ;main.c: 207: void DATA_PROCESS(char x);main.c: 208: {;main.c: 209:     switch(x)
 11785  03D6  2CBA               	goto	l6638
 11786  03D7                     l6536:	
 11787                           
 11788                           ;main.c: 212:         {;main.c: 213:             LED_PROCESS(0);
 11789  03D7  3000               	movlw	0
 11790  03D8  318E  26C6  3183   	fcall	_LED_PROCESS
 11791                           
 11792                           ;main.c: 214:             RELAY_PROCESS(0);
 11793  03DB  3000               	movlw	0
 11794  03DC  318F  2763         	fcall	_RELAY_PROCESS
 11795                           
 11796                           ;main.c: 215:             check_request = 0;
 11797  03DE  0020               	movlb	0	; select bank0
 11798  03DF  01E8               	clrf	_check_request
 11799                           
 11800                           ;main.c: 216:             last_touch_status.full_status = 0;
 11801  03E0  01E2               	clrf	_last_touch_status
 11802  03E1  01E3               	clrf	_last_touch_status+1
 11803                           
 11804                           ;main.c: 217:             break;
 11805  03E2  0008               	return
 11806  03E3                     l6542:	
 11807                           
 11808                           ;main.c: 220:         {;main.c: 221:             LED_PROCESS(1);
 11809  03E3  3001               	movlw	1
 11810  03E4  318E  26C6  3183   	fcall	_LED_PROCESS
 11811                           
 11812                           ;main.c: 222:             RELAY_PROCESS(1);
 11813  03E7  3001               	movlw	1
 11814  03E8  318F  2763         	fcall	_RELAY_PROCESS
 11815                           
 11816                           ;main.c: 223:             check_request = 0;
 11817  03EA  0020               	movlb	0	; select bank0
 11818  03EB  01E8               	clrf	_check_request
 11819                           
 11820                           ;main.c: 224:             last_touch_status.full_status = 1;
 11821  03EC  3001               	movlw	1
 11822  03ED  00E2               	movwf	_last_touch_status
 11823  03EE  3000               	movlw	0
 11824  03EF  00E3               	movwf	_last_touch_status+1
 11825                           
 11826                           ;main.c: 225:             break;
 11827  03F0  0008               	return
 11828  03F1                     l6548:	
 11829                           
 11830                           ;main.c: 228:         {;main.c: 229:             LED_PROCESS(2);
 11831  03F1  3002               	movlw	2
 11832  03F2  318E  26C6  3183   	fcall	_LED_PROCESS
 11833                           
 11834                           ;main.c: 230:             RELAY_PROCESS(2);
 11835  03F5  3002               	movlw	2
 11836  03F6  318F  2763         	fcall	_RELAY_PROCESS
 11837                           
 11838                           ;main.c: 231:             check_request = 0;
 11839  03F8  0020               	movlb	0	; select bank0
 11840  03F9  01E8               	clrf	_check_request
 11841                           
 11842                           ;main.c: 232:             last_touch_status.full_status = 2;
 11843  03FA  3002               	movlw	2
 11844  03FB  00E2               	movwf	_last_touch_status
 11845  03FC  3000               	movlw	0
 11846  03FD  00E3               	movwf	_last_touch_status+1
 11847                           
 11848                           ;main.c: 233:             break;
 11849  03FE  0008               	return
 11850  03FF                     l6554:	
 11851                           
 11852                           ;main.c: 236:         {;main.c: 237:             LED_PROCESS(3);
 11853  03FF  3003               	movlw	3
 11854  0400  318E  26C6  3183   	fcall	_LED_PROCESS
 11855                           
 11856                           ;main.c: 238:             RELAY_PROCESS(3);
 11857  0403  3003               	movlw	3
 11858  0404  318F  2763         	fcall	_RELAY_PROCESS
 11859                           
 11860                           ;main.c: 239:             check_request = 0;
 11861  0406  0020               	movlb	0	; select bank0
 11862  0407  01E8               	clrf	_check_request
 11863                           
 11864                           ;main.c: 240:             last_touch_status.full_status = 3;
 11865  0408  3003               	movlw	3
 11866  0409  00E2               	movwf	_last_touch_status
 11867  040A  3000               	movlw	0
 11868  040B  00E3               	movwf	_last_touch_status+1
 11869                           
 11870                           ;main.c: 241:             break;
 11871  040C  0008               	return
 11872  040D                     l6560:	
 11873                           
 11874                           ;main.c: 244:         {;main.c: 245:             LED_PROCESS(4);
 11875  040D  3004               	movlw	4
 11876  040E  318E  26C6  3183   	fcall	_LED_PROCESS
 11877                           
 11878                           ;main.c: 246:             RELAY_PROCESS(4);
 11879  0411  3004               	movlw	4
 11880  0412  318F  2763         	fcall	_RELAY_PROCESS
 11881                           
 11882                           ;main.c: 247:             check_request = 0;
 11883  0414  0020               	movlb	0	; select bank0
 11884  0415  01E8               	clrf	_check_request
 11885                           
 11886                           ;main.c: 248:             last_touch_status.full_status = 4;
 11887  0416  3004               	movlw	4
 11888  0417  00E2               	movwf	_last_touch_status
 11889  0418  3000               	movlw	0
 11890  0419  00E3               	movwf	_last_touch_status+1
 11891                           
 11892                           ;main.c: 249:             break;
 11893  041A  0008               	return
 11894  041B                     l6566:	
 11895                           
 11896                           ;main.c: 252:         {;main.c: 253:             LED_PROCESS(5);
 11897  041B  3005               	movlw	5
 11898  041C  318E  26C6  3183   	fcall	_LED_PROCESS
 11899                           
 11900                           ;main.c: 254:             RELAY_PROCESS(5);
 11901  041F  3005               	movlw	5
 11902  0420  318F  2763         	fcall	_RELAY_PROCESS
 11903                           
 11904                           ;main.c: 255:             check_request = 0;
 11905  0422  0020               	movlb	0	; select bank0
 11906  0423  01E8               	clrf	_check_request
 11907                           
 11908                           ;main.c: 256:             last_touch_status.full_status = 5;
 11909  0424  3005               	movlw	5
 11910  0425  00E2               	movwf	_last_touch_status
 11911  0426  3000               	movlw	0
 11912  0427  00E3               	movwf	_last_touch_status+1
 11913                           
 11914                           ;main.c: 257:             break;
 11915  0428  0008               	return
 11916  0429                     l6572:	
 11917                           
 11918                           ;main.c: 260:         {;main.c: 261:             LED_PROCESS(6);
 11919  0429  3006               	movlw	6
 11920  042A  318E  26C6  3183   	fcall	_LED_PROCESS
 11921                           
 11922                           ;main.c: 262:             RELAY_PROCESS(6);
 11923  042D  3006               	movlw	6
 11924  042E  318F  2763         	fcall	_RELAY_PROCESS
 11925                           
 11926                           ;main.c: 263:             check_request = 0;
 11927  0430  0020               	movlb	0	; select bank0
 11928  0431  01E8               	clrf	_check_request
 11929                           
 11930                           ;main.c: 264:             last_touch_status.full_status = 6;
 11931  0432  3006               	movlw	6
 11932  0433  00E2               	movwf	_last_touch_status
 11933  0434  3000               	movlw	0
 11934  0435  00E3               	movwf	_last_touch_status+1
 11935                           
 11936                           ;main.c: 265:             break;
 11937  0436  0008               	return
 11938  0437                     l6578:	
 11939                           
 11940                           ;main.c: 268:         {;main.c: 269:             LED_PROCESS(7);
 11941  0437  3007               	movlw	7
 11942  0438  318E  26C6  3183   	fcall	_LED_PROCESS
 11943                           
 11944                           ;main.c: 270:             RELAY_PROCESS(7);
 11945  043B  3007               	movlw	7
 11946  043C  318F  2763         	fcall	_RELAY_PROCESS
 11947                           
 11948                           ;main.c: 271:             check_request = 0;
 11949  043E  0020               	movlb	0	; select bank0
 11950  043F  01E8               	clrf	_check_request
 11951                           
 11952                           ;main.c: 272:             last_touch_status.full_status = 7;
 11953  0440  3007               	movlw	7
 11954  0441  00E2               	movwf	_last_touch_status
 11955  0442  3000               	movlw	0
 11956  0443  00E3               	movwf	_last_touch_status+1
 11957                           
 11958                           ;main.c: 273:             break;
 11959  0444  0008               	return
 11960  0445                     l6584:	
 11961                           
 11962                           ;main.c: 276:         {;main.c: 277:             LED_PROCESS(8);
 11963  0445  3008               	movlw	8
 11964  0446  318E  26C6  3183   	fcall	_LED_PROCESS
 11965                           
 11966                           ;main.c: 278:             RELAY_PROCESS(8);
 11967  0449  3008               	movlw	8
 11968  044A  318F  2763         	fcall	_RELAY_PROCESS
 11969                           
 11970                           ;main.c: 279:             check_request = 0;
 11971  044C  0020               	movlb	0	; select bank0
 11972  044D  01E8               	clrf	_check_request
 11973                           
 11974                           ;main.c: 280:             last_touch_status.full_status = 8;
 11975  044E  3008               	movlw	8
 11976  044F  00E2               	movwf	_last_touch_status
 11977  0450  3000               	movlw	0
 11978  0451  00E3               	movwf	_last_touch_status+1
 11979                           
 11980                           ;main.c: 281:             break;
 11981  0452  0008               	return
 11982  0453                     l6590:	
 11983                           
 11984                           ;main.c: 284:         {;main.c: 285:             LED_PROCESS(9);
 11985  0453  3009               	movlw	9
 11986  0454  318E  26C6  3183   	fcall	_LED_PROCESS
 11987                           
 11988                           ;main.c: 286:             RELAY_PROCESS(9);
 11989  0457  3009               	movlw	9
 11990  0458  318F  2763         	fcall	_RELAY_PROCESS
 11991                           
 11992                           ;main.c: 287:             check_request = 0;
 11993  045A  0020               	movlb	0	; select bank0
 11994  045B  01E8               	clrf	_check_request
 11995                           
 11996                           ;main.c: 288:             last_touch_status.full_status = 9;
 11997  045C  3009               	movlw	9
 11998  045D  00E2               	movwf	_last_touch_status
 11999  045E  3000               	movlw	0
 12000  045F  00E3               	movwf	_last_touch_status+1
 12001                           
 12002                           ;main.c: 289:             break;
 12003  0460  0008               	return
 12004  0461                     l6596:	
 12005                           
 12006                           ;main.c: 292:         {;main.c: 293:             LED_PROCESS(10);
 12007  0461  300A               	movlw	10
 12008  0462  318E  26C6  3183   	fcall	_LED_PROCESS
 12009                           
 12010                           ;main.c: 294:             RELAY_PROCESS(10);
 12011  0465  300A               	movlw	10
 12012  0466  318F  2763         	fcall	_RELAY_PROCESS
 12013                           
 12014                           ;main.c: 295:             check_request = 0;
 12015  0468  0020               	movlb	0	; select bank0
 12016  0469  01E8               	clrf	_check_request
 12017                           
 12018                           ;main.c: 296:             last_touch_status.full_status = 10;
 12019  046A  300A               	movlw	10
 12020  046B  00E2               	movwf	_last_touch_status
 12021  046C  3000               	movlw	0
 12022  046D  00E3               	movwf	_last_touch_status+1
 12023                           
 12024                           ;main.c: 297:             break;
 12025  046E  0008               	return
 12026  046F                     l6602:	
 12027                           
 12028                           ;main.c: 300:         {;main.c: 301:             LED_PROCESS(11);
 12029  046F  300B               	movlw	11
 12030  0470  318E  26C6  3183   	fcall	_LED_PROCESS
 12031                           
 12032                           ;main.c: 302:             RELAY_PROCESS(11);
 12033  0473  300B               	movlw	11
 12034  0474  318F  2763         	fcall	_RELAY_PROCESS
 12035                           
 12036                           ;main.c: 303:             check_request = 0;
 12037  0476  0020               	movlb	0	; select bank0
 12038  0477  01E8               	clrf	_check_request
 12039                           
 12040                           ;main.c: 304:             last_touch_status.full_status = 11;
 12041  0478  300B               	movlw	11
 12042  0479  00E2               	movwf	_last_touch_status
 12043  047A  3000               	movlw	0
 12044  047B  00E3               	movwf	_last_touch_status+1
 12045                           
 12046                           ;main.c: 305:             break;
 12047  047C  0008               	return
 12048  047D                     l6608:	
 12049                           
 12050                           ;main.c: 308:         {;main.c: 309:             LED_PROCESS(12);
 12051  047D  300C               	movlw	12
 12052  047E  318E  26C6  3183   	fcall	_LED_PROCESS
 12053                           
 12054                           ;main.c: 310:             RELAY_PROCESS(12);
 12055  0481  300C               	movlw	12
 12056  0482  318F  2763         	fcall	_RELAY_PROCESS
 12057                           
 12058                           ;main.c: 311:             check_request = 0;
 12059  0484  0020               	movlb	0	; select bank0
 12060  0485  01E8               	clrf	_check_request
 12061                           
 12062                           ;main.c: 312:             last_touch_status.full_status = 12;
 12063  0486  300C               	movlw	12
 12064  0487  00E2               	movwf	_last_touch_status
 12065  0488  3000               	movlw	0
 12066  0489  00E3               	movwf	_last_touch_status+1
 12067                           
 12068                           ;main.c: 313:             break;
 12069  048A  0008               	return
 12070  048B                     l6614:	
 12071                           
 12072                           ;main.c: 316:         {;main.c: 317:             LED_PROCESS(13);
 12073  048B  300D               	movlw	13
 12074  048C  318E  26C6  3183   	fcall	_LED_PROCESS
 12075                           
 12076                           ;main.c: 318:             RELAY_PROCESS(13);
 12077  048F  300D               	movlw	13
 12078  0490  318F  2763         	fcall	_RELAY_PROCESS
 12079                           
 12080                           ;main.c: 319:             check_request = 0;
 12081  0492  0020               	movlb	0	; select bank0
 12082  0493  01E8               	clrf	_check_request
 12083                           
 12084                           ;main.c: 320:             last_touch_status.full_status = 13;
 12085  0494  300D               	movlw	13
 12086  0495  00E2               	movwf	_last_touch_status
 12087  0496  3000               	movlw	0
 12088  0497  00E3               	movwf	_last_touch_status+1
 12089                           
 12090                           ;main.c: 321:             break;
 12091  0498  0008               	return
 12092  0499                     l6620:	
 12093                           
 12094                           ;main.c: 324:         {;main.c: 325:             LED_PROCESS(14);
 12095  0499  300E               	movlw	14
 12096  049A  318E  26C6  3183   	fcall	_LED_PROCESS
 12097                           
 12098                           ;main.c: 326:             RELAY_PROCESS(14);
 12099  049D  300E               	movlw	14
 12100  049E  318F  2763         	fcall	_RELAY_PROCESS
 12101                           
 12102                           ;main.c: 327:             check_request = 0;
 12103  04A0  0020               	movlb	0	; select bank0
 12104  04A1  01E8               	clrf	_check_request
 12105                           
 12106                           ;main.c: 328:             last_touch_status.full_status = 14;
 12107  04A2  300E               	movlw	14
 12108  04A3  00E2               	movwf	_last_touch_status
 12109  04A4  3000               	movlw	0
 12110  04A5  00E3               	movwf	_last_touch_status+1
 12111                           
 12112                           ;main.c: 329:             break;
 12113  04A6  0008               	return
 12114  04A7                     l6626:	
 12115                           
 12116                           ;main.c: 332:         {;main.c: 333:             LED_PROCESS(15);
 12117  04A7  300F               	movlw	15
 12118  04A8  318E  26C6  3183   	fcall	_LED_PROCESS
 12119                           
 12120                           ;main.c: 334:             RELAY_PROCESS(15);
 12121  04AB  300F               	movlw	15
 12122  04AC  318F  2763         	fcall	_RELAY_PROCESS
 12123                           
 12124                           ;main.c: 335:             check_request = 0;
 12125  04AE  0020               	movlb	0	; select bank0
 12126  04AF  01E8               	clrf	_check_request
 12127                           
 12128                           ;main.c: 336:             last_touch_status.full_status = 15;
 12129  04B0  300F               	movlw	15
 12130  04B1  00E2               	movwf	_last_touch_status
 12131  04B2  3000               	movlw	0
 12132  04B3  00E3               	movwf	_last_touch_status+1
 12133                           
 12134                           ;main.c: 337:             break;
 12135  04B4  0008               	return
 12136  04B5                     l6632:	
 12137                           
 12138                           ;main.c: 340:         {;main.c: 341:             update_state();
 12139  04B5  3185  25A8         	fcall	_update_state
 12140                           
 12141                           ;main.c: 342:             break;
 12142  04B7  0008               	return
 12143  04B8                     l6634:	
 12144                           
 12145                           ;main.c: 345:         {;main.c: 346:             check_request = 0;
 12146  04B8  01E8               	clrf	_check_request
 12147                           
 12148                           ;main.c: 347:             break;
 12149  04B9  0008               	return
 12150  04BA                     l6638:	
 12151  04BA  0851               	movf	DATA_PROCESS@x,w
 12152  04BB  00CF               	movwf	??_DATA_PROCESS
 12153  04BC  01D0               	clrf	??_DATA_PROCESS+1
 12154                           
 12155                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12156                           ; Switch size 1, requested type "simple"
 12157                           ; Number of cases is 1, Range of values is 0 to 0
 12158                           ; switch strategies available:
 12159                           ; Name         Instructions Cycles
 12160                           ; simple_byte            4     3 (average)
 12161                           ; direct_byte            8     6 (fixed)
 12162                           ; jumptable            260     6 (fixed)
 12163                           ;	Chosen strategy is simple_byte
 12164  04BD  0850               	movf	??_DATA_PROCESS+1,w
 12165  04BE  3A00               	xorlw	0	; case 0
 12166  04BF  1903               	skipnz
 12167  04C0  2CC2               	goto	l7104
 12168  04C1  2CB8               	goto	l6634
 12169  04C2                     l7104:	
 12170                           
 12171                           ; Switch size 1, requested type "simple"
 12172                           ; Number of cases is 17, Range of values is 48 to 85
 12173                           ; switch strategies available:
 12174                           ; Name         Instructions Cycles
 12175                           ; simple_byte           52    27 (average)
 12176                           ; direct_byte           85     9 (fixed)
 12177                           ; jumptable            263     9 (fixed)
 12178                           ;	Chosen strategy is simple_byte
 12179  04C2  084F               	movf	??_DATA_PROCESS,w
 12180  04C3  3A30               	xorlw	48	; case 48
 12181  04C4  1903               	skipnz
 12182  04C5  2BD7               	goto	l6536
 12183  04C6  3A01               	xorlw	1	; case 49
 12184  04C7  1903               	skipnz
 12185  04C8  2BE3               	goto	l6542
 12186  04C9  3A03               	xorlw	3	; case 50
 12187  04CA  1903               	skipnz
 12188  04CB  2BF1               	goto	l6548
 12189  04CC  3A01               	xorlw	1	; case 51
 12190  04CD  1903               	skipnz
 12191  04CE  2BFF               	goto	l6554
 12192  04CF  3A07               	xorlw	7	; case 52
 12193  04D0  1903               	skipnz
 12194  04D1  2C0D               	goto	l6560
 12195  04D2  3A01               	xorlw	1	; case 53
 12196  04D3  1903               	skipnz
 12197  04D4  2C1B               	goto	l6566
 12198  04D5  3A03               	xorlw	3	; case 54
 12199  04D6  1903               	skipnz
 12200  04D7  2C29               	goto	l6572
 12201  04D8  3A01               	xorlw	1	; case 55
 12202  04D9  1903               	skipnz
 12203  04DA  2C37               	goto	l6578
 12204  04DB  3A0F               	xorlw	15	; case 56
 12205  04DC  1903               	skipnz
 12206  04DD  2C45               	goto	l6584
 12207  04DE  3A01               	xorlw	1	; case 57
 12208  04DF  1903               	skipnz
 12209  04E0  2C53               	goto	l6590
 12210  04E1  3A78               	xorlw	120	; case 65
 12211  04E2  1903               	skipnz
 12212  04E3  2C61               	goto	l6596
 12213  04E4  3A03               	xorlw	3	; case 66
 12214  04E5  1903               	skipnz
 12215  04E6  2C6F               	goto	l6602
 12216  04E7  3A01               	xorlw	1	; case 67
 12217  04E8  1903               	skipnz
 12218  04E9  2C7D               	goto	l6608
 12219  04EA  3A07               	xorlw	7	; case 68
 12220  04EB  1903               	skipnz
 12221  04EC  2C8B               	goto	l6614
 12222  04ED  3A01               	xorlw	1	; case 69
 12223  04EE  1903               	skipnz
 12224  04EF  2C99               	goto	l6620
 12225  04F0  3A02               	xorlw	2	; case 71
 12226  04F1  1903               	skipnz
 12227  04F2  2CA7               	goto	l6626
 12228  04F3  3A12               	xorlw	18	; case 85
 12229  04F4  1903               	skipnz
 12230  04F5  2CB5               	goto	l6632
 12231  04F6  2CB8               	goto	l6634
 12232  04F7  0008               	return
 12233  04F8                     __end_of_DATA_PROCESS:	
 12234                           
 12235                           	psect	text76
 12236  05A8                     __ptext76:	
 12237 ;; *************** function _update_state *****************
 12238 ;; Defined at:
 12239 ;;		line 185 in file "main.c"
 12240 ;; Parameters:    Size  Location     Type
 12241 ;;		None
 12242 ;; Auto vars:     Size  Location     Type
 12243 ;;		None
 12244 ;; Return value:  Size  Location     Type
 12245 ;;                  1    wreg      void 
 12246 ;; Registers used:
 12247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12248 ;; Tracked objects:
 12249 ;;		On entry : 0/0
 12250 ;;		On exit  : 0/0
 12251 ;;		Unchanged: 0/0
 12252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12253 ;;      Params:         0       0       0       0       0       0       0       0
 12254 ;;      Locals:         0       0       0       0       0       0       0       0
 12255 ;;      Temps:          0       0       0       0       0       0       0       0
 12256 ;;      Totals:         0       0       0       0       0       0       0       0
 12257 ;;Total ram usage:        0 bytes
 12258 ;; Hardware stack levels used:    1
 12259 ;; Hardware stack levels required when called:   13
 12260 ;; This function calls:
 12261 ;;		_printf
 12262 ;; This function is called by:
 12263 ;;		_myButtonReleasedCallback
 12264 ;;		_DATA_PROCESS
 12265 ;; This function uses a non-reentrant model
 12266 ;;
 12267                           
 12268                           
 12269                           ;psect for function _update_state
 12270  05A8                     _update_state:	
 12271                           
 12272                           ;main.c: 187:     switch(last_touch_status.full_status)
 12273                           
 12274                           ;incstack = 0
 12275 ;; hardware stack exceeded
 12276                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12277  05A8  2E19               	goto	l5954
 12278  05A9                     l5920:	
 12279  05A9  300E               	movlw	low (STR_2| (0+32768))
 12280  05AA  00C7               	movwf	printf@fmt
 12281  05AB  3098               	movlw	high (STR_2| (0+32768))
 12282  05AC  00C8               	movwf	printf@fmt+1
 12283  05AD  3195  2551         	fcall	_printf
 12284  05AF  0008               	return
 12285  05B0                     l5922:	
 12286  05B0  3013               	movlw	low (STR_3| (0+32768))
 12287  05B1  00C7               	movwf	printf@fmt
 12288  05B2  3098               	movlw	high (STR_3| (0+32768))
 12289  05B3  00C8               	movwf	printf@fmt+1
 12290  05B4  3195  2551         	fcall	_printf
 12291  05B6  0008               	return
 12292  05B7                     l5924:	
 12293  05B7  3018               	movlw	low (STR_4| (0+32768))
 12294  05B8  00C7               	movwf	printf@fmt
 12295  05B9  3098               	movlw	high (STR_4| (0+32768))
 12296  05BA  00C8               	movwf	printf@fmt+1
 12297  05BB  3195  2551         	fcall	_printf
 12298  05BD  0008               	return
 12299  05BE                     l5926:	
 12300  05BE  301D               	movlw	low (STR_5| (0+32768))
 12301  05BF  00C7               	movwf	printf@fmt
 12302  05C0  3098               	movlw	high (STR_5| (0+32768))
 12303  05C1  00C8               	movwf	printf@fmt+1
 12304  05C2  3195  2551         	fcall	_printf
 12305  05C4  0008               	return
 12306  05C5                     l5928:	
 12307  05C5  3022               	movlw	low (STR_6| (0+32768))
 12308  05C6  00C7               	movwf	printf@fmt
 12309  05C7  3098               	movlw	high (STR_6| (0+32768))
 12310  05C8  00C8               	movwf	printf@fmt+1
 12311  05C9  3195  2551         	fcall	_printf
 12312  05CB  0008               	return
 12313  05CC                     l5930:	
 12314  05CC  3027               	movlw	low (STR_7| (0+32768))
 12315  05CD  00C7               	movwf	printf@fmt
 12316  05CE  3098               	movlw	high (STR_7| (0+32768))
 12317  05CF  00C8               	movwf	printf@fmt+1
 12318  05D0  3195  2551         	fcall	_printf
 12319  05D2  0008               	return
 12320  05D3                     l5932:	
 12321  05D3  302C               	movlw	low (STR_8| (0+32768))
 12322  05D4  00C7               	movwf	printf@fmt
 12323  05D5  3098               	movlw	high (STR_8| (0+32768))
 12324  05D6  00C8               	movwf	printf@fmt+1
 12325  05D7  3195  2551         	fcall	_printf
 12326  05D9  0008               	return
 12327  05DA                     l5934:	
 12328  05DA  3031               	movlw	low (STR_9| (0+32768))
 12329  05DB  00C7               	movwf	printf@fmt
 12330  05DC  3098               	movlw	high (STR_9| (0+32768))
 12331  05DD  00C8               	movwf	printf@fmt+1
 12332  05DE  3195  2551         	fcall	_printf
 12333  05E0  0008               	return
 12334  05E1                     l5936:	
 12335  05E1  3036               	movlw	low (STR_10| (0+32768))
 12336  05E2  00C7               	movwf	printf@fmt
 12337  05E3  3098               	movlw	high (STR_10| (0+32768))
 12338  05E4  00C8               	movwf	printf@fmt+1
 12339  05E5  3195  2551         	fcall	_printf
 12340  05E7  0008               	return
 12341  05E8                     l5938:	
 12342  05E8  303B               	movlw	low (STR_11| (0+32768))
 12343  05E9  00C7               	movwf	printf@fmt
 12344  05EA  3098               	movlw	high (STR_11| (0+32768))
 12345  05EB  00C8               	movwf	printf@fmt+1
 12346  05EC  3195  2551         	fcall	_printf
 12347  05EE  0008               	return
 12348  05EF                     l5940:	
 12349  05EF  3040               	movlw	low (STR_12| (0+32768))
 12350  05F0  00C7               	movwf	printf@fmt
 12351  05F1  3098               	movlw	high (STR_12| (0+32768))
 12352  05F2  00C8               	movwf	printf@fmt+1
 12353  05F3  3195  2551         	fcall	_printf
 12354  05F5  0008               	return
 12355  05F6                     l5942:	
 12356  05F6  3045               	movlw	low (STR_13| (0+32768))
 12357  05F7  00C7               	movwf	printf@fmt
 12358  05F8  3098               	movlw	high (STR_13| (0+32768))
 12359  05F9  00C8               	movwf	printf@fmt+1
 12360  05FA  3195  2551         	fcall	_printf
 12361  05FC  0008               	return
 12362  05FD                     l5944:	
 12363  05FD  304A               	movlw	low (STR_14| (0+32768))
 12364  05FE  00C7               	movwf	printf@fmt
 12365  05FF  3098               	movlw	high (STR_14| (0+32768))
 12366  0600  00C8               	movwf	printf@fmt+1
 12367  0601  3195  2551         	fcall	_printf
 12368  0603  0008               	return
 12369  0604                     l5946:	
 12370  0604  304F               	movlw	low (STR_15| (0+32768))
 12371  0605  00C7               	movwf	printf@fmt
 12372  0606  3098               	movlw	high (STR_15| (0+32768))
 12373  0607  00C8               	movwf	printf@fmt+1
 12374  0608  3195  2551         	fcall	_printf
 12375  060A  0008               	return
 12376  060B                     l5948:	
 12377  060B  3054               	movlw	low (STR_16| (0+32768))
 12378  060C  00C7               	movwf	printf@fmt
 12379  060D  3098               	movlw	high (STR_16| (0+32768))
 12380  060E  00C8               	movwf	printf@fmt+1
 12381  060F  3195  2551         	fcall	_printf
 12382  0611  0008               	return
 12383  0612                     l5950:	
 12384  0612  3059               	movlw	low (STR_17| (0+32768))
 12385  0613  00C7               	movwf	printf@fmt
 12386  0614  3098               	movlw	high (STR_17| (0+32768))
 12387  0615  00C8               	movwf	printf@fmt+1
 12388  0616  3195  2551         	fcall	_printf
 12389  0618  0008               	return
 12390  0619                     l5954:	
 12391                           
 12392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12393                           ; Switch size 1, requested type "simple"
 12394                           ; Number of cases is 1, Range of values is 0 to 0
 12395                           ; switch strategies available:
 12396                           ; Name         Instructions Cycles
 12397                           ; simple_byte            4     3 (average)
 12398                           ; direct_byte            8     6 (fixed)
 12399                           ; jumptable            260     6 (fixed)
 12400                           ;	Chosen strategy is simple_byte
 12401  0619  0020               	movlb	0	; select bank0
 12402  061A  0863               	movf	_last_touch_status+1,w
 12403  061B  3A00               	xorlw	0	; case 0
 12404  061C  1903               	skipnz
 12405  061D  2E1F               	goto	l7106
 12406  061E  2E51               	goto	l333
 12407  061F                     l7106:	
 12408                           
 12409                           ; Switch size 1, requested type "simple"
 12410                           ; Number of cases is 16, Range of values is 0 to 15
 12411                           ; switch strategies available:
 12412                           ; Name         Instructions Cycles
 12413                           ; direct_byte           38     6 (fixed)
 12414                           ; simple_byte           49    25 (average)
 12415                           ; jumptable            260     6 (fixed)
 12416                           ;	Chosen strategy is simple_byte
 12417  061F  0862               	movf	_last_touch_status,w
 12418  0620  3A00               	xorlw	0	; case 0
 12419  0621  1903               	skipnz
 12420  0622  2DA9               	goto	l5920
 12421  0623  3A01               	xorlw	1	; case 1
 12422  0624  1903               	skipnz
 12423  0625  2DB0               	goto	l5922
 12424  0626  3A03               	xorlw	3	; case 2
 12425  0627  1903               	skipnz
 12426  0628  2DB7               	goto	l5924
 12427  0629  3A01               	xorlw	1	; case 3
 12428  062A  1903               	skipnz
 12429  062B  2DBE               	goto	l5926
 12430  062C  3A07               	xorlw	7	; case 4
 12431  062D  1903               	skipnz
 12432  062E  2DC5               	goto	l5928
 12433  062F  3A01               	xorlw	1	; case 5
 12434  0630  1903               	skipnz
 12435  0631  2DCC               	goto	l5930
 12436  0632  3A03               	xorlw	3	; case 6
 12437  0633  1903               	skipnz
 12438  0634  2DD3               	goto	l5932
 12439  0635  3A01               	xorlw	1	; case 7
 12440  0636  1903               	skipnz
 12441  0637  2DDA               	goto	l5934
 12442  0638  3A0F               	xorlw	15	; case 8
 12443  0639  1903               	skipnz
 12444  063A  2DE1               	goto	l5936
 12445  063B  3A01               	xorlw	1	; case 9
 12446  063C  1903               	skipnz
 12447  063D  2DE8               	goto	l5938
 12448  063E  3A03               	xorlw	3	; case 10
 12449  063F  1903               	skipnz
 12450  0640  2DEF               	goto	l5940
 12451  0641  3A01               	xorlw	1	; case 11
 12452  0642  1903               	skipnz
 12453  0643  2DF6               	goto	l5942
 12454  0644  3A07               	xorlw	7	; case 12
 12455  0645  1903               	skipnz
 12456  0646  2DFD               	goto	l5944
 12457  0647  3A01               	xorlw	1	; case 13
 12458  0648  1903               	skipnz
 12459  0649  2E04               	goto	l5946
 12460  064A  3A03               	xorlw	3	; case 14
 12461  064B  1903               	skipnz
 12462  064C  2E0B               	goto	l5948
 12463  064D  3A01               	xorlw	1	; case 15
 12464  064E  1903               	skipnz
 12465  064F  2E12               	goto	l5950
 12466  0650  2E51               	goto	l333
 12467  0651                     l333:	
 12468  0651  0008               	return
 12469  0652                     __end_of_update_state:	
 12470                           
 12471                           	psect	text77
 12472  1551                     __ptext77:	
 12473 ;; *************** function _printf *****************
 12474 ;; Defined at:
 12475 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
 12476 ;; Parameters:    Size  Location     Type
 12477 ;;  fmt             2   39[BANK0 ] PTR const unsigned char 
 12478 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
 12479 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
 12480 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
 12481 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 12482 ;;		 -> STR_2(5), STR_1(9), 
 12483 ;; Auto vars:     Size  Location     Type
 12484 ;;  ret             2    0        int 
 12485 ;;  ap              1   46[BANK0 ] PTR void [1]
 12486 ;;		 -> ?_printf(2), 
 12487 ;; Return value:  Size  Location     Type
 12488 ;;                  2   39[BANK0 ] int 
 12489 ;; Registers used:
 12490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12491 ;; Tracked objects:
 12492 ;;		On entry : 0/0
 12493 ;;		On exit  : 0/0
 12494 ;;		Unchanged: 0/0
 12495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12496 ;;      Params:         0       4       0       0       0       0       0       0
 12497 ;;      Locals:         0       3       0       0       0       0       0       0
 12498 ;;      Temps:          0       1       0       0       0       0       0       0
 12499 ;;      Totals:         0       8       0       0       0       0       0       0
 12500 ;;Total ram usage:        8 bytes
 12501 ;; Hardware stack levels used:    1
 12502 ;; Hardware stack levels required when called:   12
 12503 ;; This function calls:
 12504 ;;		_vfprintf
 12505 ;; This function is called by:
 12506 ;;		_main
 12507 ;;		_update_state
 12508 ;;		_check_message
 12509 ;; This function uses a non-reentrant model
 12510 ;;
 12511                           
 12512                           
 12513                           ;psect for function _printf
 12514  1551                     _printf:	
 12515                           
 12516                           ;incstack = 0
 12517                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12518  1551  3049               	movlw	(low ((?_printf| 0+2)))& (0+255)
 12519  1552  0020               	movlb	0	; select bank0
 12520  1553  00CB               	movwf	??_printf
 12521  1554  084B               	movf	??_printf,w
 12522  1555  00CE               	movwf	printf@ap
 12523  1556  0848               	movf	printf@fmt+1,w
 12524  1557  00C0               	movwf	vfprintf@fmt+1
 12525  1558  0847               	movf	printf@fmt,w
 12526  1559  00BF               	movwf	vfprintf@fmt
 12527  155A  304E               	movlw	(low (printf@ap| 0))& (0+255)
 12528  155B  00CB               	movwf	??_printf
 12529  155C  084B               	movf	??_printf,w
 12530  155D  00C1               	movwf	vfprintf@ap
 12531  155E  3000               	movlw	0
 12532  155F  3188  20AE         	fcall	_vfprintf
 12533  1561  0008               	return
 12534  1562                     __end_of_printf:	
 12535                           
 12536                           	psect	text78
 12537  08AE                     __ptext78:	
 12538 ;; *************** function _vfprintf *****************
 12539 ;; Defined at:
 12540 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;  fp              1    wreg     PTR struct _IO_FILE
 12543 ;;		 -> NULL(0), 
 12544 ;;  fmt             2   31[BANK0 ] PTR const unsigned char 
 12545 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
 12546 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
 12547 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
 12548 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 12549 ;;		 -> STR_2(5), STR_1(9), 
 12550 ;;  ap              1   33[BANK0 ] PTR PTR void 
 12551 ;;		 -> printf@ap(1), 
 12552 ;; Auto vars:     Size  Location     Type
 12553 ;;  fp              1   36[BANK0 ] PTR struct _IO_FILE
 12554 ;;		 -> NULL(0), 
 12555 ;;  cfmt            2   37[BANK0 ] PTR unsigned char 
 12556 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
 12557 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
 12558 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
 12559 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 12560 ;;		 -> STR_2(5), STR_1(9), 
 12561 ;; Return value:  Size  Location     Type
 12562 ;;                  2   31[BANK0 ] int 
 12563 ;; Registers used:
 12564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12565 ;; Tracked objects:
 12566 ;;		On entry : 0/0
 12567 ;;		On exit  : 0/0
 12568 ;;		Unchanged: 0/0
 12569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12570 ;;      Params:         0       3       0       0       0       0       0       0
 12571 ;;      Locals:         0       3       0       0       0       0       0       0
 12572 ;;      Temps:          0       2       0       0       0       0       0       0
 12573 ;;      Totals:         0       8       0       0       0       0       0       0
 12574 ;;Total ram usage:        8 bytes
 12575 ;; Hardware stack levels used:    1
 12576 ;; Hardware stack levels required when called:   11
 12577 ;; This function calls:
 12578 ;;		_vfpfcnvrt
 12579 ;; This function is called by:
 12580 ;;		_printf
 12581 ;; This function uses a non-reentrant model
 12582 ;;
 12583                           
 12584                           
 12585                           ;psect for function _vfprintf
 12586  08AE                     _vfprintf:	
 12587                           
 12588                           ;incstack = 0
 12589                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12590                           ;vfprintf@fp stored from wreg
 12591  08AE  0020               	movlb	0	; select bank0
 12592  08AF  00C4               	movwf	vfprintf@fp
 12593                           
 12594                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 12595  08B0  0840               	movf	vfprintf@fmt+1,w
 12596  08B1  00C6               	movwf	vfprintf@cfmt+1
 12597  08B2  083F               	movf	vfprintf@fmt,w
 12598  08B3  00C5               	movwf	vfprintf@cfmt
 12599                           
 12600                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 12601  08B4  0021               	movlb	1	; select bank1
 12602  08B5  01B0               	clrf	_nout^(0+128)
 12603  08B6  01B1               	clrf	(_nout+1)^(0+128)
 12604  08B7                     l5892:	
 12605                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12606                           
 12607                           
 12608                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12609  08B7  0020               	movlb	0	; select bank0
 12610  08B8  0845               	movf	vfprintf@cfmt,w
 12611  08B9  0084               	movwf	4
 12612  08BA  0846               	movf	vfprintf@cfmt+1,w
 12613  08BB  0085               	movwf	5
 12614  08BC  0012               	moviw fsr0++
 12615  08BD  1903               	btfsc	3,2
 12616  08BE  28D4               	goto	l5894
 12617                           
 12618                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 12619  08BF  3045               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 12620  08C0  00C2               	movwf	??_vfprintf
 12621  08C1  0842               	movf	??_vfprintf,w
 12622  08C2  00B6               	movwf	vfpfcnvrt@fmt
 12623  08C3  0841               	movf	vfprintf@ap,w
 12624  08C4  00C3               	movwf	??_vfprintf+1
 12625  08C5  0843               	movf	??_vfprintf+1,w
 12626  08C6  00B7               	movwf	vfpfcnvrt@ap
 12627  08C7  0844               	movf	vfprintf@fp,w
 12628  08C8  3186  2652  3188   	fcall	_vfpfcnvrt
 12629  08CB  0020               	movlb	0	; select bank0
 12630  08CC  0836               	movf	?_vfpfcnvrt,w
 12631  08CD  0021               	movlb	1	; select bank1
 12632  08CE  07B0               	addwf	_nout^(0+128),f
 12633  08CF  0020               	movlb	0	; select bank0
 12634  08D0  0837               	movf	?_vfpfcnvrt+1,w
 12635  08D1  0021               	movlb	1	; select bank1
 12636  08D2  3DB1               	addwfc	(_nout+1)^(0+128),f
 12637  08D3  28B7               	goto	l5892
 12638  08D4                     l5894:	
 12639                           
 12640                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 12641  08D4  0021               	movlb	1	; select bank1
 12642  08D5  0831               	movf	(_nout+1)^(0+128),w
 12643  08D6  0020               	movlb	0	; select bank0
 12644  08D7  00C0               	movwf	?_vfprintf+1
 12645  08D8  0021               	movlb	1	; select bank1
 12646  08D9  0830               	movf	_nout^(0+128),w
 12647  08DA  0020               	movlb	0	; select bank0
 12648  08DB  00BF               	movwf	?_vfprintf
 12649  08DC  0008               	return
 12650  08DD                     __end_of_vfprintf:	
 12651                           
 12652                           	psect	text79
 12653  0652                     __ptext79:	
 12654 ;; *************** function _vfpfcnvrt *****************
 12655 ;; Defined at:
 12656 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12657 ;; Parameters:    Size  Location     Type
 12658 ;;  fp              1    wreg     PTR struct _IO_FILE
 12659 ;;		 -> NULL(0), 
 12660 ;;  fmt             1   22[BANK0 ] PTR PTR unsigned char 
 12661 ;;		 -> vfprintf@cfmt(2), 
 12662 ;;  ap              1   23[BANK0 ] PTR PTR void 
 12663 ;;		 -> printf@ap(1), 
 12664 ;; Auto vars:     Size  Location     Type
 12665 ;;  fp              1   30[BANK0 ] PTR struct _IO_FILE
 12666 ;;		 -> NULL(0), 
 12667 ;;  llu             8    0        unsigned long long 
 12668 ;;  ll              8    0        long long 
 12669 ;;  f               4    0        long long 
 12670 ;;  ct              3    0        unsigned char [3]
 12671 ;;  vp              2    0        PTR void 
 12672 ;;  i               2    0        int 
 12673 ;;  done            2    0        int 
 12674 ;;  cp              2    0        PTR unsigned char 
 12675 ;;  c               1   29[BANK0 ] unsigned char 
 12676 ;; Return value:  Size  Location     Type
 12677 ;;                  2   22[BANK0 ] int 
 12678 ;; Registers used:
 12679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12685 ;;      Params:         0       2       0       0       0       0       0       0
 12686 ;;      Locals:         0       2       0       0       0       0       0       0
 12687 ;;      Temps:          0       5       0       0       0       0       0       0
 12688 ;;      Totals:         0       9       0       0       0       0       0       0
 12689 ;;Total ram usage:        9 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:   10
 12692 ;; This function calls:
 12693 ;;		_ctoa
 12694 ;;		_fputc
 12695 ;; This function is called by:
 12696 ;;		_vfprintf
 12697 ;; This function uses a non-reentrant model
 12698 ;;
 12699                           
 12700                           
 12701                           ;psect for function _vfpfcnvrt
 12702  0652                     _vfpfcnvrt:	
 12703                           
 12704                           ;incstack = 0
 12705                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12706                           ;vfpfcnvrt@fp stored from wreg
 12707  0652  0020               	movlb	0	; select bank0
 12708  0653  00BE               	movwf	vfpfcnvrt@fp
 12709                           
 12710                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 12711  0654  0836               	movf	vfpfcnvrt@fmt,w
 12712  0655  0086               	movwf	6
 12713  0656  0187               	clrf	7
 12714  0657  3F40               	moviw [0]fsr1
 12715  0658  00B8               	movwf	??_vfpfcnvrt
 12716  0659  3F41               	moviw [1]fsr1
 12717  065A  00B9               	movwf	??_vfpfcnvrt+1
 12718  065B  0838               	movf	??_vfpfcnvrt,w
 12719  065C  0084               	movwf	4
 12720  065D  0839               	movf	??_vfpfcnvrt+1,w
 12721  065E  0085               	movwf	5
 12722  065F  0012               	moviw fsr0++
 12723  0660  3A25               	xorlw	37
 12724  0661  1D03               	btfss	3,2
 12725  0662  2ED7               	goto	l5878
 12726                           
 12727                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 12728  0663  0836               	movf	vfpfcnvrt@fmt,w
 12729  0664  0086               	movwf	6
 12730  0665  0187               	clrf	7
 12731  0666  3001               	movlw	1
 12732  0667  0781               	addwf	1,f
 12733  0668  3141               	addfsr 1,1
 12734  0669  1803               	skipnc
 12735  066A  0A81               	incf	1,f
 12736                           
 12737                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 12738  066B  0021               	movlb	1	; select bank1
 12739  066C  01B2               	clrf	_width^(0+128)
 12740  066D  01B3               	clrf	(_width+1)^(0+128)
 12741  066E  01B6               	clrf	_flags^(0+128)
 12742  066F  01B7               	clrf	(_flags+1)^(0+128)
 12743                           
 12744                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 12745  0670  30FF               	movlw	255
 12746  0671  00B4               	movwf	_prec^(0+128)
 12747  0672  30FF               	movlw	255
 12748  0673  00B5               	movwf	(_prec^(0+128)+1)
 12749                           
 12750                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
 12751  0674  0020               	movlb	0	; select bank0
 12752  0675  0836               	movf	vfpfcnvrt@fmt,w
 12753  0676  0086               	movwf	6
 12754  0677  0187               	clrf	7
 12755  0678  3F40               	moviw [0]fsr1
 12756  0679  00B8               	movwf	??_vfpfcnvrt
 12757  067A  3F41               	moviw [1]fsr1
 12758  067B  00B9               	movwf	??_vfpfcnvrt+1
 12759  067C  0838               	movf	??_vfpfcnvrt,w
 12760  067D  0084               	movwf	4
 12761  067E  0839               	movf	??_vfpfcnvrt+1,w
 12762  067F  0085               	movwf	5
 12763  0680  0012               	moviw fsr0++
 12764  0681  3A63               	xorlw	99
 12765  0682  1D03               	btfss	3,2
 12766  0683  2EA5               	goto	l5862
 12767                           
 12768                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
 12769  0684  0836               	movf	vfpfcnvrt@fmt,w
 12770  0685  0086               	movwf	6
 12771  0686  0187               	clrf	7
 12772  0687  3001               	movlw	1
 12773  0688  0781               	addwf	1,f
 12774  0689  3141               	addfsr 1,1
 12775  068A  1803               	skipnc
 12776  068B  0A81               	incf	1,f
 12777                           
 12778                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
 12779  068C  0837               	movf	vfpfcnvrt@ap,w
 12780  068D  0086               	movwf	6
 12781  068E  0187               	clrf	7
 12782  068F  0801               	movf	1,w
 12783  0690  0084               	movwf	4
 12784  0691  0185               	clrf	5
 12785  0692  3002               	movlw	2
 12786  0693  0781               	addwf	1,f
 12787  0694  0800               	movf	0,w
 12788  0695  00B8               	movwf	??_vfpfcnvrt
 12789  0696  0838               	movf	??_vfpfcnvrt,w
 12790  0697  00BD               	movwf	vfpfcnvrt@c
 12791                           
 12792                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
 12793  0698  083D               	movf	vfpfcnvrt@c,w
 12794  0699  00B8               	movwf	??_vfpfcnvrt
 12795  069A  0838               	movf	??_vfpfcnvrt,w
 12796  069B  00B0               	movwf	ctoa@c
 12797  069C  083E               	movf	vfpfcnvrt@fp,w
 12798  069D  3188  20DD         	fcall	_ctoa
 12799  069F  0020               	movlb	0	; select bank0
 12800  06A0  0831               	movf	?_ctoa+1,w
 12801  06A1  00B7               	movwf	?_vfpfcnvrt+1
 12802  06A2  0830               	movf	?_ctoa,w
 12803  06A3  00B6               	movwf	?_vfpfcnvrt
 12804  06A4  0008               	return
 12805  06A5                     l5862:	
 12806                           
 12807                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 12808  06A5  0836               	movf	vfpfcnvrt@fmt,w
 12809  06A6  0086               	movwf	6
 12810  06A7  0187               	clrf	7
 12811  06A8  3F40               	moviw [0]fsr1
 12812  06A9  00B8               	movwf	??_vfpfcnvrt
 12813  06AA  3F41               	moviw [1]fsr1
 12814  06AB  00B9               	movwf	??_vfpfcnvrt+1
 12815  06AC  0838               	movf	??_vfpfcnvrt,w
 12816  06AD  0084               	movwf	4
 12817  06AE  0839               	movf	??_vfpfcnvrt+1,w
 12818  06AF  0085               	movwf	5
 12819  06B0  0012               	moviw fsr0++
 12820  06B1  3A25               	xorlw	37
 12821  06B2  1D03               	btfss	3,2
 12822  06B3  2ECC               	goto	l5872
 12823                           
 12824                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 12825  06B4  0836               	movf	vfpfcnvrt@fmt,w
 12826  06B5  0086               	movwf	6
 12827  06B6  0187               	clrf	7
 12828  06B7  3001               	movlw	1
 12829  06B8  0781               	addwf	1,f
 12830  06B9  3141               	addfsr 1,1
 12831  06BA  1803               	skipnc
 12832  06BB  0A81               	incf	1,f
 12833                           
 12834                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 12835  06BC  3025               	movlw	37
 12836  06BD  00F3               	movwf	fputc@c
 12837  06BE  3000               	movlw	0
 12838  06BF  00F4               	movwf	fputc@c+1
 12839  06C0  083E               	movf	vfpfcnvrt@fp,w
 12840  06C1  00B8               	movwf	??_vfpfcnvrt
 12841  06C2  0838               	movf	??_vfpfcnvrt,w
 12842  06C3  00F5               	movwf	fputc@fp
 12843  06C4  3189  2170         	fcall	_fputc
 12844  06C6                     l5868:	
 12845                           
 12846                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 12847  06C6  3001               	movlw	1
 12848  06C7  0020               	movlb	0	; select bank0
 12849  06C8  00B6               	movwf	?_vfpfcnvrt
 12850  06C9  3000               	movlw	0
 12851  06CA  00B7               	movwf	?_vfpfcnvrt+1
 12852  06CB  0008               	return
 12853  06CC                     l5872:	
 12854                           
 12855                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 12856  06CC  0836               	movf	vfpfcnvrt@fmt,w
 12857  06CD  0086               	movwf	6
 12858  06CE  0187               	clrf	7
 12859  06CF  3001               	movlw	1
 12860  06D0  0781               	addwf	1,f
 12861  06D1  3141               	addfsr 1,1
 12862  06D2  1803               	skipnc
 12863  06D3  0A81               	incf	1,f
 12864                           
 12865                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 12866  06D4  01B6               	clrf	?_vfpfcnvrt
 12867  06D5  01B7               	clrf	?_vfpfcnvrt+1
 12868  06D6  0008               	return
 12869  06D7                     l5878:	
 12870                           
 12871                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 12872  06D7  0836               	movf	vfpfcnvrt@fmt,w
 12873  06D8  0086               	movwf	6
 12874  06D9  0187               	clrf	7
 12875  06DA  3F40               	moviw [0]fsr1
 12876  06DB  00B8               	movwf	??_vfpfcnvrt
 12877  06DC  3F41               	moviw [1]fsr1
 12878  06DD  00B9               	movwf	??_vfpfcnvrt+1
 12879  06DE  0838               	movf	??_vfpfcnvrt,w
 12880  06DF  0084               	movwf	4
 12881  06E0  0839               	movf	??_vfpfcnvrt+1,w
 12882  06E1  0085               	movwf	5
 12883  06E2  0800               	movf	0,w	;code access
 12884  06E3  00BA               	movwf	??_vfpfcnvrt+2
 12885  06E4  01BB               	clrf	??_vfpfcnvrt+3
 12886  06E5  083A               	movf	??_vfpfcnvrt+2,w
 12887  06E6  00F3               	movwf	fputc@c
 12888  06E7  083B               	movf	??_vfpfcnvrt+3,w
 12889  06E8  00F4               	movwf	fputc@c+1
 12890  06E9  083E               	movf	vfpfcnvrt@fp,w
 12891  06EA  00BC               	movwf	??_vfpfcnvrt+4
 12892  06EB  083C               	movf	??_vfpfcnvrt+4,w
 12893  06EC  00F5               	movwf	fputc@fp
 12894  06ED  3189  2170  3186   	fcall	_fputc
 12895                           
 12896                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 12897  06F0  0020               	movlb	0	; select bank0
 12898  06F1  0836               	movf	vfpfcnvrt@fmt,w
 12899  06F2  0086               	movwf	6
 12900  06F3  0187               	clrf	7
 12901  06F4  3001               	movlw	1
 12902  06F5  0781               	addwf	1,f
 12903  06F6  3141               	addfsr 1,1
 12904  06F7  1803               	skipnc
 12905  06F8  0A81               	incf	1,f
 12906  06F9  2EC6               	goto	l5868
 12907  06FA                     __end_of_vfpfcnvrt:	
 12908                           
 12909                           	psect	text80
 12910  08DD                     __ptext80:	
 12911 ;; *************** function _ctoa *****************
 12912 ;; Defined at:
 12913 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12914 ;; Parameters:    Size  Location     Type
 12915 ;;  fp              1    wreg     PTR struct _IO_FILE
 12916 ;;		 -> NULL(0), 
 12917 ;;  c               1   16[BANK0 ] unsigned char 
 12918 ;; Auto vars:     Size  Location     Type
 12919 ;;  fp              1   21[BANK0 ] PTR struct _IO_FILE
 12920 ;;		 -> NULL(0), 
 12921 ;;  w               2   19[BANK0 ] int 
 12922 ;;  l               2    0        int 
 12923 ;; Return value:  Size  Location     Type
 12924 ;;                  2   16[BANK0 ] int 
 12925 ;; Registers used:
 12926 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/0
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12932 ;;      Params:         0       2       0       0       0       0       0       0
 12933 ;;      Locals:         0       3       0       0       0       0       0       0
 12934 ;;      Temps:          0       1       0       0       0       0       0       0
 12935 ;;      Totals:         0       6       0       0       0       0       0       0
 12936 ;;Total ram usage:        6 bytes
 12937 ;; Hardware stack levels used:    1
 12938 ;; Hardware stack levels required when called:    9
 12939 ;; This function calls:
 12940 ;;		_pad
 12941 ;; This function is called by:
 12942 ;;		_vfpfcnvrt
 12943 ;; This function uses a non-reentrant model
 12944 ;;
 12945                           
 12946                           
 12947                           ;psect for function _ctoa
 12948  08DD                     _ctoa:	
 12949                           
 12950                           ;incstack = 0
 12951                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12952                           ;ctoa@fp stored from wreg
 12953  08DD  0020               	movlb	0	; select bank0
 12954  08DE  00B5               	movwf	ctoa@fp
 12955                           
 12956                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
 12957  08DF  0021               	movlb	1	; select bank1
 12958  08E0  0832               	movf	_width^(0+128),w
 12959  08E1  0433               	iorwf	(_width+1)^(0+128),w
 12960  08E2  1D03               	btfss	3,2
 12961  08E3  28EC               	goto	l5834
 12962  08E4  0833               	movf	(_width+1)^(0+128),w
 12963  08E5  0020               	movlb	0	; select bank0
 12964  08E6  00B4               	movwf	ctoa@w+1
 12965  08E7  0021               	movlb	1	; select bank1
 12966  08E8  0832               	movf	_width^(0+128),w
 12967  08E9  0020               	movlb	0	; select bank0
 12968  08EA  00B3               	movwf	ctoa@w
 12969  08EB  28F5               	goto	l5836
 12970  08EC                     l5834:	
 12971  08EC  0832               	movf	_width^(0+128),w
 12972  08ED  3EFF               	addlw	255
 12973  08EE  0020               	movlb	0	; select bank0
 12974  08EF  00B3               	movwf	ctoa@w
 12975  08F0  30FF               	movlw	255
 12976  08F1  0021               	movlb	1	; select bank1
 12977  08F2  3D33               	addwfc	(_width+1)^(0+128),w
 12978  08F3  0020               	movlb	0	; select bank0
 12979  08F4  00B4               	movwf	ctoa@w+1
 12980  08F5                     l5836:	
 12981                           
 12982                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
 12983  08F5  0830               	movf	ctoa@c,w
 12984  08F6  00B2               	movwf	??_ctoa
 12985  08F7  0832               	movf	??_ctoa,w
 12986  08F8  0022               	movlb	2	; select bank2
 12987  08F9  00C4               	movwf	_dbuf^(0+256)
 12988                           
 12989                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
 12990  08FA  01C5               	clrf	(_dbuf^(0+256)+1)
 12991                           
 12992                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
 12993  08FB  3044               	movlw	(low (_dbuf| (0+256)))& (0+255)
 12994  08FC  0020               	movlb	0	; select bank0
 12995  08FD  00B2               	movwf	??_ctoa
 12996  08FE  0832               	movf	??_ctoa,w
 12997  08FF  00A7               	movwf	pad@buf
 12998  0900  0834               	movf	ctoa@w+1,w
 12999  0901  00A9               	movwf	pad@p+1
 13000  0902  0833               	movf	ctoa@w,w
 13001  0903  00A8               	movwf	pad@p
 13002  0904  0835               	movf	ctoa@fp,w
 13003  0905  318A  22AA         	fcall	_pad
 13004  0907  0020               	movlb	0	; select bank0
 13005  0908  0828               	movf	?_pad+1,w
 13006  0909  00B1               	movwf	?_ctoa+1
 13007  090A  0827               	movf	?_pad,w
 13008  090B  00B0               	movwf	?_ctoa
 13009  090C  0008               	return
 13010  090D                     __end_of_ctoa:	
 13011                           
 13012                           	psect	text81
 13013  0AAA                     __ptext81:	
 13014 ;; *************** function _pad *****************
 13015 ;; Defined at:
 13016 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 13017 ;; Parameters:    Size  Location     Type
 13018 ;;  fp              1    wreg     PTR struct _IO_FILE
 13019 ;;		 -> NULL(0), 
 13020 ;;  buf             1    7[BANK0 ] PTR unsigned char 
 13021 ;;		 -> dbuf(32), 
 13022 ;;  p               2    8[BANK0 ] int 
 13023 ;; Auto vars:     Size  Location     Type
 13024 ;;  fp              1   15[BANK0 ] PTR struct _IO_FILE
 13025 ;;		 -> NULL(0), 
 13026 ;;  w               2   13[BANK0 ] int 
 13027 ;;  i               2   11[BANK0 ] int 
 13028 ;; Return value:  Size  Location     Type
 13029 ;;                  2    7[BANK0 ] int 
 13030 ;; Registers used:
 13031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13032 ;; Tracked objects:
 13033 ;;		On entry : 0/0
 13034 ;;		On exit  : 0/0
 13035 ;;		Unchanged: 0/0
 13036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13037 ;;      Params:         0       3       0       0       0       0       0       0
 13038 ;;      Locals:         0       5       0       0       0       0       0       0
 13039 ;;      Temps:          0       1       0       0       0       0       0       0
 13040 ;;      Totals:         0       9       0       0       0       0       0       0
 13041 ;;Total ram usage:        9 bytes
 13042 ;; Hardware stack levels used:    1
 13043 ;; Hardware stack levels required when called:    8
 13044 ;; This function calls:
 13045 ;;		_fputc
 13046 ;;		_fputs
 13047 ;;		_strlen
 13048 ;; This function is called by:
 13049 ;;		_ctoa
 13050 ;; This function uses a non-reentrant model
 13051 ;;
 13052                           
 13053                           
 13054                           ;psect for function _pad
 13055  0AAA                     _pad:	
 13056                           
 13057                           ;incstack = 0
 13058                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13059                           ;pad@fp stored from wreg
 13060  0AAA  0020               	movlb	0	; select bank0
 13061  0AAB  00AF               	movwf	pad@fp
 13062                           
 13063                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 13064  0AAC  0021               	movlb	1	; select bank1
 13065  0AAD  1C36               	btfss	_flags^(0+128),0
 13066  0AAE  2AB8               	goto	l5814
 13067                           
 13068                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 13069  0AAF  0020               	movlb	0	; select bank0
 13070  0AB0  082F               	movf	pad@fp,w
 13071  0AB1  00AA               	movwf	??_pad
 13072  0AB2  082A               	movf	??_pad,w
 13073  0AB3  00FB               	movwf	fputs@fp
 13074  0AB4  0827               	movf	pad@buf,w
 13075  0AB5  3197  2712  318A   	fcall	_fputs
 13076  0AB8                     l5814:	
 13077                           
 13078                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 13079  0AB8  0020               	movlb	0	; select bank0
 13080  0AB9  1BA9               	btfsc	pad@p+1,7
 13081  0ABA  2AC0               	goto	l5818
 13082  0ABB  0829               	movf	pad@p+1,w
 13083  0ABC  00AE               	movwf	pad@w+1
 13084  0ABD  0828               	movf	pad@p,w
 13085  0ABE  00AD               	movwf	pad@w
 13086  0ABF  2AC2               	goto	l1474
 13087  0AC0                     l5818:	
 13088  0AC0  01AD               	clrf	pad@w
 13089  0AC1  01AE               	clrf	pad@w+1
 13090  0AC2                     l1474:	
 13091                           
 13092                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 13093  0AC2  01AB               	clrf	pad@i
 13094  0AC3  01AC               	clrf	pad@i+1
 13095  0AC4                     l5824:	
 13096                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 13097                           
 13098                           
 13099                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 13100  0AC4  082C               	movf	pad@i+1,w
 13101  0AC5  3A80               	xorlw	128
 13102  0AC6  00AA               	movwf	??_pad
 13103  0AC7  082E               	movf	pad@w+1,w
 13104  0AC8  3A80               	xorlw	128
 13105  0AC9  022A               	subwf	??_pad,w
 13106  0ACA  1D03               	skipz
 13107  0ACB  2ACE               	goto	u4185
 13108  0ACC  082D               	movf	pad@w,w
 13109  0ACD  022B               	subwf	pad@i,w
 13110  0ACE                     u4185:	
 13111  0ACE  1803               	btfsc	3,0
 13112  0ACF  2AE2               	goto	l1477
 13113                           
 13114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 13115  0AD0  3020               	movlw	32
 13116  0AD1  00F3               	movwf	fputc@c
 13117  0AD2  3000               	movlw	0
 13118  0AD3  00F4               	movwf	fputc@c+1
 13119  0AD4  0020               	movlb	0	; select bank0
 13120  0AD5  082F               	movf	pad@fp,w
 13121  0AD6  00AA               	movwf	??_pad
 13122  0AD7  082A               	movf	??_pad,w
 13123  0AD8  00F5               	movwf	fputc@fp
 13124  0AD9  3189  2170  318A   	fcall	_fputc
 13125                           
 13126                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 13127  0ADC  3001               	movlw	1
 13128  0ADD  0020               	movlb	0	; select bank0
 13129  0ADE  07AB               	addwf	pad@i,f
 13130  0ADF  3000               	movlw	0
 13131  0AE0  3DAC               	addwfc	pad@i+1,f
 13132  0AE1  2AC4               	goto	l5824
 13133  0AE2                     l1477:	
 13134                           
 13135                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 13136  0AE2  0021               	movlb	1	; select bank1
 13137  0AE3  1836               	btfsc	_flags^(0+128),0
 13138  0AE4  2AEE               	goto	l1478
 13139                           
 13140                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 13141  0AE5  0020               	movlb	0	; select bank0
 13142  0AE6  082F               	movf	pad@fp,w
 13143  0AE7  00AA               	movwf	??_pad
 13144  0AE8  082A               	movf	??_pad,w
 13145  0AE9  00FB               	movwf	fputs@fp
 13146  0AEA  0827               	movf	pad@buf,w
 13147  0AEB  3197  2712  318A   	fcall	_fputs
 13148  0AEE                     l1478:	
 13149                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
 13150                           
 13151                           
 13152                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 13153  0AEE  0020               	movlb	0	; select bank0
 13154  0AEF  0827               	movf	pad@buf,w
 13155  0AF0  3196  2652         	fcall	_strlen
 13156  0AF2  0020               	movlb	0	; select bank0
 13157  0AF3  082D               	movf	pad@w,w
 13158  0AF4  0771               	addwf	?_strlen,w
 13159  0AF5  00A7               	movwf	?_pad
 13160  0AF6  082E               	movf	pad@w+1,w
 13161  0AF7  3D72               	addwfc	?_strlen+1,w
 13162  0AF8  00A8               	movwf	?_pad+1
 13163  0AF9  0008               	return
 13164  0AFA                     __end_of_pad:	
 13165                           
 13166                           	psect	text82
 13167  1652                     __ptext82:	
 13168 ;; *************** function _strlen *****************
 13169 ;; Defined at:
 13170 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;  s               1    wreg     PTR const unsigned char 
 13173 ;;		 -> dbuf(32), 
 13174 ;; Auto vars:     Size  Location     Type
 13175 ;;  s               1    5[COMMON] PTR const unsigned char 
 13176 ;;		 -> dbuf(32), 
 13177 ;;  a               1    4[COMMON] PTR const unsigned char 
 13178 ;;		 -> dbuf(32), 
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  2    1[COMMON] unsigned int 
 13181 ;; Registers used:
 13182 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13188 ;;      Params:         2       0       0       0       0       0       0       0
 13189 ;;      Locals:         2       0       0       0       0       0       0       0
 13190 ;;      Temps:          1       0       0       0       0       0       0       0
 13191 ;;      Totals:         5       0       0       0       0       0       0       0
 13192 ;;Total ram usage:        5 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    4
 13195 ;; This function calls:
 13196 ;;		Nothing
 13197 ;; This function is called by:
 13198 ;;		_pad
 13199 ;; This function uses a non-reentrant model
 13200 ;;
 13201                           
 13202                           
 13203                           ;psect for function _strlen
 13204  1652                     _strlen:	
 13205                           
 13206                           ;incstack = 0
 13207                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 13208                           ;strlen@s stored from wreg
 13209  1652  00F5               	movwf	strlen@s
 13210  1653  0875               	movf	strlen@s,w
 13211  1654  00F3               	movwf	??_strlen
 13212  1655  0873               	movf	??_strlen,w
 13213  1656  00F4               	movwf	strlen@a
 13214  1657                     l3960:	
 13215  1657  0875               	movf	strlen@s,w
 13216  1658  0086               	movwf	6
 13217  1659  3001               	movlw	1	; select bank2/3
 13218  165A  0087               	movwf	7
 13219  165B  0801               	movf	1,w
 13220  165C  1903               	btfsc	3,2
 13221  165D  2E63               	goto	l3962
 13222  165E  3001               	movlw	1
 13223  165F  00F3               	movwf	??_strlen
 13224  1660  0873               	movf	??_strlen,w
 13225  1661  07F5               	addwf	strlen@s,f
 13226  1662  2E57               	goto	l3960
 13227  1663                     l3962:	
 13228  1663  0874               	movf	strlen@a,w
 13229  1664  0275               	subwf	strlen@s,w
 13230  1665  00F1               	movwf	?_strlen
 13231  1666  01F2               	clrf	?_strlen+1
 13232  1667  1BF1               	btfsc	?_strlen,7
 13233  1668  03F2               	decf	?_strlen+1,f
 13234  1669  0008               	return
 13235  166A                     __end_of_strlen:	
 13236                           
 13237                           	psect	text83
 13238  1712                     __ptext83:	
 13239 ;; *************** function _fputs *****************
 13240 ;; Defined at:
 13241 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 13242 ;; Parameters:    Size  Location     Type
 13243 ;;  s               1    wreg     PTR const unsigned char 
 13244 ;;		 -> dbuf(32), 
 13245 ;;  fp              1   11[COMMON] PTR struct _IO_FILE
 13246 ;;		 -> NULL(0), 
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;  s               1    6[BANK0 ] PTR const unsigned char 
 13249 ;;		 -> dbuf(32), 
 13250 ;;  i               2    4[BANK0 ] int 
 13251 ;;  c               1    3[BANK0 ] unsigned char 
 13252 ;; Return value:  Size  Location     Type
 13253 ;;                  2   11[COMMON] int 
 13254 ;; Registers used:
 13255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13256 ;; Tracked objects:
 13257 ;;		On entry : 0/0
 13258 ;;		On exit  : 0/0
 13259 ;;		Unchanged: 0/0
 13260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13261 ;;      Params:         1       0       0       0       0       0       0       0
 13262 ;;      Locals:         0       4       0       0       0       0       0       0
 13263 ;;      Temps:          0       3       0       0       0       0       0       0
 13264 ;;      Totals:         1       7       0       0       0       0       0       0
 13265 ;;Total ram usage:        8 bytes
 13266 ;; Hardware stack levels used:    1
 13267 ;; Hardware stack levels required when called:    7
 13268 ;; This function calls:
 13269 ;;		_fputc
 13270 ;; This function is called by:
 13271 ;;		_pad
 13272 ;; This function uses a non-reentrant model
 13273 ;;
 13274                           
 13275                           
 13276                           ;psect for function _fputs
 13277  1712                     _fputs:	
 13278                           
 13279                           ;incstack = 0
 13280                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13281                           ;fputs@s stored from wreg
 13282  1712  0020               	movlb	0	; select bank0
 13283  1713  00A6               	movwf	fputs@s
 13284  1714  01A4               	clrf	fputs@i
 13285  1715  01A5               	clrf	fputs@i+1
 13286  1716                     l3954:	
 13287  1716  0824               	movf	fputs@i,w
 13288  1717  0726               	addwf	fputs@s,w
 13289  1718  00A0               	movwf	??_fputs
 13290  1719  0820               	movf	??_fputs,w
 13291  171A  0086               	movwf	6
 13292  171B  3001               	movlw	1	; select bank2/3
 13293  171C  0087               	movwf	7
 13294  171D  0801               	movf	1,w
 13295  171E  00A1               	movwf	??_fputs+1
 13296  171F  0821               	movf	??_fputs+1,w
 13297  1720  00A3               	movwf	fputs@c
 13298  1721  0823               	movf	fputs@c,w
 13299  1722  1903               	btfsc	3,2
 13300  1723  0008               	return
 13301  1724  0823               	movf	fputs@c,w
 13302  1725  00A0               	movwf	??_fputs
 13303  1726  01A1               	clrf	??_fputs+1
 13304  1727  0820               	movf	??_fputs,w
 13305  1728  00F3               	movwf	fputc@c
 13306  1729  0821               	movf	??_fputs+1,w
 13307  172A  00F4               	movwf	fputc@c+1
 13308  172B  087B               	movf	fputs@fp,w
 13309  172C  00A2               	movwf	??_fputs+2
 13310  172D  0822               	movf	??_fputs+2,w
 13311  172E  00F5               	movwf	fputc@fp
 13312  172F  3189  2170  3197   	fcall	_fputc
 13313  1732  3001               	movlw	1
 13314  1733  0020               	movlb	0	; select bank0
 13315  1734  07A4               	addwf	fputs@i,f
 13316  1735  3000               	movlw	0
 13317  1736  3DA5               	addwfc	fputs@i+1,f
 13318  1737  2F16               	goto	l3954
 13319  1738                     __end_of_fputs:	
 13320                           
 13321                           	psect	text84
 13322  0970                     __ptext84:	
 13323 ;; *************** function _fputc *****************
 13324 ;; Defined at:
 13325 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 13326 ;; Parameters:    Size  Location     Type
 13327 ;;  c               2    3[COMMON] int 
 13328 ;;  fp              1    5[COMMON] PTR struct _IO_FILE
 13329 ;;		 -> NULL(0), 
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;		None
 13332 ;; Return value:  Size  Location     Type
 13333 ;;                  2    3[COMMON] int 
 13334 ;; Registers used:
 13335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13336 ;; Tracked objects:
 13337 ;;		On entry : 0/0
 13338 ;;		On exit  : 0/0
 13339 ;;		Unchanged: 0/0
 13340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13341 ;;      Params:         3       0       0       0       0       0       0       0
 13342 ;;      Locals:         0       0       0       0       0       0       0       0
 13343 ;;      Temps:          5       0       0       0       0       0       0       0
 13344 ;;      Totals:         8       0       0       0       0       0       0       0
 13345 ;;Total ram usage:        8 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; Hardware stack levels required when called:    6
 13348 ;; This function calls:
 13349 ;;		_putch
 13350 ;; This function is called by:
 13351 ;;		_pad
 13352 ;;		_vfpfcnvrt
 13353 ;;		_fputs
 13354 ;; This function uses a non-reentrant model
 13355 ;;
 13356                           
 13357                           
 13358                           ;psect for function _fputc
 13359  0970                     _fputc:	
 13360                           
 13361                           ;incstack = 0
 13362                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13363  0970  0875               	movf	fputc@fp,w
 13364  0971  1D03               	btfss	3,2
 13365  0972  0875               	movf	fputc@fp,w
 13366  0973  1D03               	btfss	3,2
 13367  0974  2979               	goto	l3940
 13368  0975  0873               	movf	fputc@c,w
 13369  0976  3194  2440         	fcall	_putch
 13370  0978  0008               	return
 13371  0979                     l3940:	
 13372  0979  0875               	movf	fputc@fp,w
 13373  097A  3E03               	addlw	3
 13374  097B  0086               	movwf	6
 13375  097C  0187               	clrf	7
 13376  097D  0016               	moviw fsr1++
 13377  097E  0401               	iorwf	1,w
 13378  097F  1903               	btfsc	3,2
 13379  0980  299C               	goto	l3944
 13380  0981  0875               	movf	fputc@fp,w
 13381  0982  3E03               	addlw	3
 13382  0983  0086               	movwf	6
 13383  0984  0187               	clrf	7
 13384  0985  3F40               	moviw [0]fsr1
 13385  0986  00F6               	movwf	??_fputc
 13386  0987  3F41               	moviw [1]fsr1
 13387  0988  00F7               	movwf	??_fputc+1
 13388  0989  0A75               	incf	fputc@fp,w
 13389  098A  0086               	movwf	6
 13390  098B  0187               	clrf	7
 13391  098C  3F40               	moviw [0]fsr1
 13392  098D  00F8               	movwf	??_fputc+2
 13393  098E  3F41               	moviw [1]fsr1
 13394  098F  00F9               	movwf	??_fputc+3
 13395  0990  0879               	movf	??_fputc+3,w
 13396  0991  3A80               	xorlw	128
 13397  0992  00FA               	movwf	??_fputc+4
 13398  0993  0877               	movf	??_fputc+1,w
 13399  0994  3A80               	xorlw	128
 13400  0995  027A               	subwf	??_fputc+4,w
 13401  0996  1D03               	skipz
 13402  0997  299A               	goto	u2145
 13403  0998  0876               	movf	??_fputc,w
 13404  0999  0278               	subwf	??_fputc+2,w
 13405  099A                     u2145:	
 13406  099A  1803               	skipnc
 13407  099B  0008               	return
 13408  099C                     l3944:	
 13409  099C  0A75               	incf	fputc@fp,w
 13410  099D  0086               	movwf	6
 13411  099E  0187               	clrf	7
 13412  099F  3001               	movlw	1
 13413  09A0  0781               	addwf	1,f
 13414  09A1  3141               	addfsr 1,1
 13415  09A2  1803               	skipnc
 13416  09A3  0A81               	incf	1,f
 13417  09A4  0008               	return
 13418  09A5                     __end_of_fputc:	
 13419                           
 13420                           	psect	text85
 13421  1440                     __ptext85:	
 13422 ;; *************** function _putch *****************
 13423 ;; Defined at:
 13424 ;;		line 174 in file "mcc_generated_files/eusart.c"
 13425 ;; Parameters:    Size  Location     Type
 13426 ;;  txData          1    wreg     unsigned char 
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;  txData          1    2[COMMON] unsigned char 
 13429 ;; Return value:  Size  Location     Type
 13430 ;;                  1    wreg      void 
 13431 ;; Registers used:
 13432 ;;		wreg, status,2, status,0, pclath, cstack
 13433 ;; Tracked objects:
 13434 ;;		On entry : 0/0
 13435 ;;		On exit  : 0/0
 13436 ;;		Unchanged: 0/0
 13437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13438 ;;      Params:         0       0       0       0       0       0       0       0
 13439 ;;      Locals:         1       0       0       0       0       0       0       0
 13440 ;;      Temps:          0       0       0       0       0       0       0       0
 13441 ;;      Totals:         1       0       0       0       0       0       0       0
 13442 ;;Total ram usage:        1 bytes
 13443 ;; Hardware stack levels used:    1
 13444 ;; Hardware stack levels required when called:    5
 13445 ;; This function calls:
 13446 ;;		_EUSART_Write
 13447 ;; This function is called by:
 13448 ;;		_fputc
 13449 ;; This function uses a non-reentrant model
 13450 ;;
 13451                           
 13452                           
 13453                           ;psect for function _putch
 13454  1440                     _putch:	
 13455                           
 13456                           ;incstack = 0
 13457                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
 13458                           ;putch@txData stored from wreg
 13459  1440  00F2               	movwf	putch@txData
 13460                           
 13461                           ;mcc_generated_files/eusart.c: 174: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 175: {;mcc_generated_files/eusart.c: 176:     EUSART_Write(txData);
 13462  1441  0872               	movf	putch@txData,w
 13463  1442  3194  2480         	fcall	_EUSART_Write
 13464  1444  0008               	return
 13465  1445                     __end_of_putch:	
 13466                           
 13467                           	psect	text86
 13468  1480                     __ptext86:	
 13469 ;; *************** function _EUSART_Write *****************
 13470 ;; Defined at:
 13471 ;;		line 160 in file "mcc_generated_files/eusart.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;  txData          1    wreg     unsigned char 
 13474 ;; Auto vars:     Size  Location     Type
 13475 ;;  txData          1    1[COMMON] unsigned char 
 13476 ;; Return value:  Size  Location     Type
 13477 ;;                  1    wreg      void 
 13478 ;; Registers used:
 13479 ;;		wreg
 13480 ;; Tracked objects:
 13481 ;;		On entry : 0/0
 13482 ;;		On exit  : 0/0
 13483 ;;		Unchanged: 0/0
 13484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13485 ;;      Params:         0       0       0       0       0       0       0       0
 13486 ;;      Locals:         1       0       0       0       0       0       0       0
 13487 ;;      Temps:          0       0       0       0       0       0       0       0
 13488 ;;      Totals:         1       0       0       0       0       0       0       0
 13489 ;;Total ram usage:        1 bytes
 13490 ;; Hardware stack levels used:    1
 13491 ;; Hardware stack levels required when called:    4
 13492 ;; This function calls:
 13493 ;;		Nothing
 13494 ;; This function is called by:
 13495 ;;		_putch
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           
 13500                           ;psect for function _EUSART_Write
 13501  1480                     _EUSART_Write:	
 13502                           
 13503                           ;incstack = 0
 13504                           ; Regs used in _EUSART_Write: [wreg]
 13505                           ;EUSART_Write@txData stored from wreg
 13506  1480  00F1               	movwf	EUSART_Write@txData
 13507  1481                     l87:	
 13508                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:     }
 13509                           
 13510                           
 13511                           ;mcc_generated_files/eusart.c: 162:     while(0 == PIR1bits.TXIF)
 13512  1481  0020               	movlb	0	; select bank0
 13513  1482  1E11               	btfss	17,4	;volatile
 13514  1483  2C81               	goto	l87
 13515                           
 13516                           ;mcc_generated_files/eusart.c: 166:     TXREG = txData;
 13517  1484  0871               	movf	EUSART_Write@txData,w
 13518  1485  0023               	movlb	3	; select bank3
 13519  1486  009A               	movwf	26	;volatile
 13520  1487  0008               	return
 13521  1488                     __end_of_EUSART_Write:	
 13522                           
 13523                           	psect	text87
 13524  0F63                     __ptext87:	
 13525 ;; *************** function _RELAY_PROCESS *****************
 13526 ;; Defined at:
 13527 ;;		line 5 in file "relay.c"
 13528 ;; Parameters:    Size  Location     Type
 13529 ;;  x               1    wreg     unsigned char 
 13530 ;; Auto vars:     Size  Location     Type
 13531 ;;  x               1    3[COMMON] unsigned char 
 13532 ;; Return value:  Size  Location     Type
 13533 ;;                  1    wreg      void 
 13534 ;; Registers used:
 13535 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13536 ;; Tracked objects:
 13537 ;;		On entry : 0/0
 13538 ;;		On exit  : 0/0
 13539 ;;		Unchanged: 0/0
 13540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13541 ;;      Params:         0       0       0       0       0       0       0       0
 13542 ;;      Locals:         1       0       0       0       0       0       0       0
 13543 ;;      Temps:          2       0       0       0       0       0       0       0
 13544 ;;      Totals:         3       0       0       0       0       0       0       0
 13545 ;;Total ram usage:        3 bytes
 13546 ;; Hardware stack levels used:    1
 13547 ;; Hardware stack levels required when called:    4
 13548 ;; This function calls:
 13549 ;;		Nothing
 13550 ;; This function is called by:
 13551 ;;		_myButtonPressedCallback
 13552 ;;		_DATA_PROCESS
 13553 ;; This function uses a non-reentrant model
 13554 ;;
 13555                           
 13556                           
 13557                           ;psect for function _RELAY_PROCESS
 13558  0F63                     _RELAY_PROCESS:	
 13559                           
 13560                           ;incstack = 0
 13561                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 13562                           ;RELAY_PROCESS@x stored from wreg
 13563  0F63  00F3               	movwf	RELAY_PROCESS@x
 13564                           
 13565                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 13566  0F64  2FC5               	goto	l4236
 13567  0F65                     l1241:	
 13568                           ;relay.c: 10:         {;relay.c: 11:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13569                           
 13570  0F65  0022               	movlb	2	; select bank2
 13571  0F66  170D               	bsf	13,6	;volatile
 13572  0F67  168E               	bsf	14,5	;volatile
 13573  0F68  168C               	bsf	12,5	;volatile
 13574  0F69  160C               	bsf	12,4	;volatile
 13575  0F6A  0008               	return
 13576  0F6B                     l1251:	
 13577                           ;relay.c: 15:         {;relay.c: 16:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13578                           
 13579  0F6B  0022               	movlb	2	; select bank2
 13580  0F6C  170D               	bsf	13,6	;volatile
 13581  0F6D  168E               	bsf	14,5	;volatile
 13582  0F6E  168C               	bsf	12,5	;volatile
 13583  0F6F  120C               	bcf	12,4	;volatile
 13584  0F70  0008               	return
 13585  0F71                     l1260:	
 13586                           ;relay.c: 20:         {;relay.c: 21:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13587                           
 13588  0F71  0022               	movlb	2	; select bank2
 13589  0F72  170D               	bsf	13,6	;volatile
 13590  0F73  168E               	bsf	14,5	;volatile
 13591  0F74  128C               	bcf	12,5	;volatile
 13592  0F75  160C               	bsf	12,4	;volatile
 13593  0F76  0008               	return
 13594  0F77                     l1269:	
 13595                           ;relay.c: 25:         {;relay.c: 26:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13596                           
 13597  0F77  0022               	movlb	2	; select bank2
 13598  0F78  170D               	bsf	13,6	;volatile
 13599  0F79  168E               	bsf	14,5	;volatile
 13600  0F7A  128C               	bcf	12,5	;volatile
 13601  0F7B  120C               	bcf	12,4	;volatile
 13602  0F7C  0008               	return
 13603  0F7D                     l1278:	
 13604                           ;relay.c: 30:         {;relay.c: 31:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13605                           
 13606  0F7D  0022               	movlb	2	; select bank2
 13607  0F7E  170D               	bsf	13,6	;volatile
 13608  0F7F  128E               	bcf	14,5	;volatile
 13609  0F80  168C               	bsf	12,5	;volatile
 13610  0F81  160C               	bsf	12,4	;volatile
 13611  0F82  0008               	return
 13612  0F83                     l1287:	
 13613                           ;relay.c: 35:         {;relay.c: 36:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13614                           
 13615  0F83  0022               	movlb	2	; select bank2
 13616  0F84  170D               	bsf	13,6	;volatile
 13617  0F85  128E               	bcf	14,5	;volatile
 13618  0F86  168C               	bsf	12,5	;volatile
 13619  0F87  120C               	bcf	12,4	;volatile
 13620  0F88  0008               	return
 13621  0F89                     l1296:	
 13622                           ;relay.c: 40:         {;relay.c: 41:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13623                           
 13624  0F89  0022               	movlb	2	; select bank2
 13625  0F8A  170D               	bsf	13,6	;volatile
 13626  0F8B  128E               	bcf	14,5	;volatile
 13627  0F8C  128C               	bcf	12,5	;volatile
 13628  0F8D  160C               	bsf	12,4	;volatile
 13629  0F8E  0008               	return
 13630  0F8F                     l1305:	
 13631                           ;relay.c: 45:         {;relay.c: 46:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13632                           
 13633  0F8F  0022               	movlb	2	; select bank2
 13634  0F90  170D               	bsf	13,6	;volatile
 13635  0F91  128E               	bcf	14,5	;volatile
 13636  0F92  128C               	bcf	12,5	;volatile
 13637  0F93  120C               	bcf	12,4	;volatile
 13638  0F94  0008               	return
 13639  0F95                     l1314:	
 13640                           ;relay.c: 50:         {;relay.c: 51:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13641                           
 13642  0F95  0022               	movlb	2	; select bank2
 13643  0F96  130D               	bcf	13,6	;volatile
 13644  0F97  168E               	bsf	14,5	;volatile
 13645  0F98  168C               	bsf	12,5	;volatile
 13646  0F99  160C               	bsf	12,4	;volatile
 13647  0F9A  0008               	return
 13648  0F9B                     l1323:	
 13649                           ;relay.c: 55:         {;relay.c: 56:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13650                           
 13651  0F9B  0022               	movlb	2	; select bank2
 13652  0F9C  130D               	bcf	13,6	;volatile
 13653  0F9D  168E               	bsf	14,5	;volatile
 13654  0F9E  168C               	bsf	12,5	;volatile
 13655  0F9F  120C               	bcf	12,4	;volatile
 13656  0FA0  0008               	return
 13657  0FA1                     l1332:	
 13658                           ;relay.c: 60:         {;relay.c: 61:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13659                           
 13660  0FA1  0022               	movlb	2	; select bank2
 13661  0FA2  130D               	bcf	13,6	;volatile
 13662  0FA3  168E               	bsf	14,5	;volatile
 13663  0FA4  128C               	bcf	12,5	;volatile
 13664  0FA5  160C               	bsf	12,4	;volatile
 13665  0FA6  0008               	return
 13666  0FA7                     l1341:	
 13667                           ;relay.c: 65:         {;relay.c: 66:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13668                           
 13669  0FA7  0022               	movlb	2	; select bank2
 13670  0FA8  130D               	bcf	13,6	;volatile
 13671  0FA9  168E               	bsf	14,5	;volatile
 13672  0FAA  128C               	bcf	12,5	;volatile
 13673  0FAB  120C               	bcf	12,4	;volatile
 13674  0FAC  0008               	return
 13675  0FAD                     l1350:	
 13676                           ;relay.c: 70:         {;relay.c: 71:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13677                           
 13678  0FAD  0022               	movlb	2	; select bank2
 13679  0FAE  130D               	bcf	13,6	;volatile
 13680  0FAF  128E               	bcf	14,5	;volatile
 13681  0FB0  168C               	bsf	12,5	;volatile
 13682  0FB1  160C               	bsf	12,4	;volatile
 13683  0FB2  0008               	return
 13684  0FB3                     l1359:	
 13685                           ;relay.c: 75:         {;relay.c: 76:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13686                           
 13687  0FB3  0022               	movlb	2	; select bank2
 13688  0FB4  130D               	bcf	13,6	;volatile
 13689  0FB5  128E               	bcf	14,5	;volatile
 13690  0FB6  168C               	bsf	12,5	;volatile
 13691  0FB7  120C               	bcf	12,4	;volatile
 13692  0FB8  0008               	return
 13693  0FB9                     l1368:	
 13694                           ;relay.c: 80:         {;relay.c: 81:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
 13695                           
 13696  0FB9  0022               	movlb	2	; select bank2
 13697  0FBA  130D               	bcf	13,6	;volatile
 13698  0FBB  128E               	bcf	14,5	;volatile
 13699  0FBC  128C               	bcf	12,5	;volatile
 13700  0FBD  160C               	bsf	12,4	;volatile
 13701  0FBE  0008               	return
 13702  0FBF                     l1377:	
 13703                           ;relay.c: 85:         {;relay.c: 86:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
 13704                           
 13705  0FBF  0022               	movlb	2	; select bank2
 13706  0FC0  130D               	bcf	13,6	;volatile
 13707  0FC1  128E               	bcf	14,5	;volatile
 13708  0FC2  128C               	bcf	12,5	;volatile
 13709  0FC3  120C               	bcf	12,4	;volatile
 13710  0FC4  0008               	return
 13711  0FC5                     l4236:	
 13712  0FC5  0873               	movf	RELAY_PROCESS@x,w
 13713  0FC6  00F1               	movwf	??_RELAY_PROCESS
 13714  0FC7  01F2               	clrf	??_RELAY_PROCESS+1
 13715                           
 13716                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13717                           ; Switch size 1, requested type "simple"
 13718                           ; Number of cases is 1, Range of values is 0 to 0
 13719                           ; switch strategies available:
 13720                           ; Name         Instructions Cycles
 13721                           ; simple_byte            4     3 (average)
 13722                           ; direct_byte            8     6 (fixed)
 13723                           ; jumptable            260     6 (fixed)
 13724                           ;	Chosen strategy is simple_byte
 13725  0FC8  0872               	movf	??_RELAY_PROCESS+1,w
 13726  0FC9  3A00               	xorlw	0	; case 0
 13727  0FCA  1903               	skipnz
 13728  0FCB  2FCD               	goto	l7108
 13729  0FCC  2FFF               	goto	l1385
 13730  0FCD                     l7108:	
 13731                           
 13732                           ; Switch size 1, requested type "simple"
 13733                           ; Number of cases is 16, Range of values is 0 to 15
 13734                           ; switch strategies available:
 13735                           ; Name         Instructions Cycles
 13736                           ; direct_byte           38     6 (fixed)
 13737                           ; simple_byte           49    25 (average)
 13738                           ; jumptable            260     6 (fixed)
 13739                           ;	Chosen strategy is simple_byte
 13740  0FCD  0871               	movf	??_RELAY_PROCESS,w
 13741  0FCE  3A00               	xorlw	0	; case 0
 13742  0FCF  1903               	skipnz
 13743  0FD0  2F65               	goto	l1241
 13744  0FD1  3A01               	xorlw	1	; case 1
 13745  0FD2  1903               	skipnz
 13746  0FD3  2F6B               	goto	l1251
 13747  0FD4  3A03               	xorlw	3	; case 2
 13748  0FD5  1903               	skipnz
 13749  0FD6  2F71               	goto	l1260
 13750  0FD7  3A01               	xorlw	1	; case 3
 13751  0FD8  1903               	skipnz
 13752  0FD9  2F77               	goto	l1269
 13753  0FDA  3A07               	xorlw	7	; case 4
 13754  0FDB  1903               	skipnz
 13755  0FDC  2F7D               	goto	l1278
 13756  0FDD  3A01               	xorlw	1	; case 5
 13757  0FDE  1903               	skipnz
 13758  0FDF  2F83               	goto	l1287
 13759  0FE0  3A03               	xorlw	3	; case 6
 13760  0FE1  1903               	skipnz
 13761  0FE2  2F89               	goto	l1296
 13762  0FE3  3A01               	xorlw	1	; case 7
 13763  0FE4  1903               	skipnz
 13764  0FE5  2F8F               	goto	l1305
 13765  0FE6  3A0F               	xorlw	15	; case 8
 13766  0FE7  1903               	skipnz
 13767  0FE8  2F95               	goto	l1314
 13768  0FE9  3A01               	xorlw	1	; case 9
 13769  0FEA  1903               	skipnz
 13770  0FEB  2F9B               	goto	l1323
 13771  0FEC  3A03               	xorlw	3	; case 10
 13772  0FED  1903               	skipnz
 13773  0FEE  2FA1               	goto	l1332
 13774  0FEF  3A01               	xorlw	1	; case 11
 13775  0FF0  1903               	skipnz
 13776  0FF1  2FA7               	goto	l1341
 13777  0FF2  3A07               	xorlw	7	; case 12
 13778  0FF3  1903               	skipnz
 13779  0FF4  2FAD               	goto	l1350
 13780  0FF5  3A01               	xorlw	1	; case 13
 13781  0FF6  1903               	skipnz
 13782  0FF7  2FB3               	goto	l1359
 13783  0FF8  3A03               	xorlw	3	; case 14
 13784  0FF9  1903               	skipnz
 13785  0FFA  2FB9               	goto	l1368
 13786  0FFB  3A01               	xorlw	1	; case 15
 13787  0FFC  1903               	skipnz
 13788  0FFD  2FBF               	goto	l1377
 13789  0FFE  2FFF               	goto	l1385
 13790  0FFF                     l1385:	
 13791  0FFF  0008               	return
 13792  1000                     __end_of_RELAY_PROCESS:	
 13793                           
 13794                           	psect	text88
 13795  0EC6                     __ptext88:	
 13796 ;; *************** function _LED_PROCESS *****************
 13797 ;; Defined at:
 13798 ;;		line 10 in file "led.c"
 13799 ;; Parameters:    Size  Location     Type
 13800 ;;  x               1    wreg     unsigned char 
 13801 ;; Auto vars:     Size  Location     Type
 13802 ;;  x               1    3[COMMON] unsigned char 
 13803 ;; Return value:  Size  Location     Type
 13804 ;;                  1    wreg      void 
 13805 ;; Registers used:
 13806 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13807 ;; Tracked objects:
 13808 ;;		On entry : 0/0
 13809 ;;		On exit  : 0/0
 13810 ;;		Unchanged: 0/0
 13811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13812 ;;      Params:         0       0       0       0       0       0       0       0
 13813 ;;      Locals:         1       0       0       0       0       0       0       0
 13814 ;;      Temps:          2       0       0       0       0       0       0       0
 13815 ;;      Totals:         3       0       0       0       0       0       0       0
 13816 ;;Total ram usage:        3 bytes
 13817 ;; Hardware stack levels used:    1
 13818 ;; Hardware stack levels required when called:    4
 13819 ;; This function calls:
 13820 ;;		Nothing
 13821 ;; This function is called by:
 13822 ;;		_main
 13823 ;;		_myButtonPressedCallback
 13824 ;;		_DATA_PROCESS
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           
 13829                           ;psect for function _LED_PROCESS
 13830  0EC6                     _LED_PROCESS:	
 13831                           
 13832                           ;incstack = 0
 13833                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0]
 13834                           ;LED_PROCESS@x stored from wreg
 13835  0EC6  00F3               	movwf	LED_PROCESS@x
 13836                           
 13837                           ;led.c: 10: void LED_PROCESS(uint8_t x);led.c: 11: {;led.c: 12:     switch(x)
 13838  0EC7  2F28               	goto	l4214
 13839  0EC8                     l398:	
 13840                           ;led.c: 15:         {;led.c: 16:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13841                           
 13842  0EC8  0022               	movlb	2	; select bank2
 13843  0EC9  140C               	bsf	12,0	;volatile
 13844  0ECA  178E               	bsf	14,7	;volatile
 13845  0ECB  148C               	bsf	12,1	;volatile
 13846  0ECC  158E               	bsf	14,3	;volatile
 13847  0ECD  0008               	return
 13848  0ECE                     l408:	
 13849                           ;led.c: 20:         {;led.c: 21:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13850                           
 13851  0ECE  0022               	movlb	2	; select bank2
 13852  0ECF  140C               	bsf	12,0	;volatile
 13853  0ED0  178E               	bsf	14,7	;volatile
 13854  0ED1  148C               	bsf	12,1	;volatile
 13855  0ED2  118E               	bcf	14,3	;volatile
 13856  0ED3  0008               	return
 13857  0ED4                     l417:	
 13858                           ;led.c: 25:         {;led.c: 26:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13859                           
 13860  0ED4  0022               	movlb	2	; select bank2
 13861  0ED5  140C               	bsf	12,0	;volatile
 13862  0ED6  178E               	bsf	14,7	;volatile
 13863  0ED7  108C               	bcf	12,1	;volatile
 13864  0ED8  158E               	bsf	14,3	;volatile
 13865  0ED9  0008               	return
 13866  0EDA                     l426:	
 13867                           ;led.c: 30:         {;led.c: 31:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13868                           
 13869  0EDA  0022               	movlb	2	; select bank2
 13870  0EDB  140C               	bsf	12,0	;volatile
 13871  0EDC  178E               	bsf	14,7	;volatile
 13872  0EDD  108C               	bcf	12,1	;volatile
 13873  0EDE  118E               	bcf	14,3	;volatile
 13874  0EDF  0008               	return
 13875  0EE0                     l435:	
 13876                           ;led.c: 35:         {;led.c: 36:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13877                           
 13878  0EE0  0022               	movlb	2	; select bank2
 13879  0EE1  140C               	bsf	12,0	;volatile
 13880  0EE2  138E               	bcf	14,7	;volatile
 13881  0EE3  148C               	bsf	12,1	;volatile
 13882  0EE4  158E               	bsf	14,3	;volatile
 13883  0EE5  0008               	return
 13884  0EE6                     l444:	
 13885                           ;led.c: 40:         {;led.c: 41:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13886                           
 13887  0EE6  0022               	movlb	2	; select bank2
 13888  0EE7  140C               	bsf	12,0	;volatile
 13889  0EE8  138E               	bcf	14,7	;volatile
 13890  0EE9  148C               	bsf	12,1	;volatile
 13891  0EEA  118E               	bcf	14,3	;volatile
 13892  0EEB  0008               	return
 13893  0EEC                     l453:	
 13894                           ;led.c: 45:         {;led.c: 46:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13895                           
 13896  0EEC  0022               	movlb	2	; select bank2
 13897  0EED  140C               	bsf	12,0	;volatile
 13898  0EEE  138E               	bcf	14,7	;volatile
 13899  0EEF  108C               	bcf	12,1	;volatile
 13900  0EF0  158E               	bsf	14,3	;volatile
 13901  0EF1  0008               	return
 13902  0EF2                     l462:	
 13903                           ;led.c: 50:         {;led.c: 51:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13904                           
 13905  0EF2  0022               	movlb	2	; select bank2
 13906  0EF3  140C               	bsf	12,0	;volatile
 13907  0EF4  138E               	bcf	14,7	;volatile
 13908  0EF5  108C               	bcf	12,1	;volatile
 13909  0EF6  118E               	bcf	14,3	;volatile
 13910  0EF7  0008               	return
 13911  0EF8                     l471:	
 13912                           ;led.c: 55:         {;led.c: 56:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13913                           
 13914  0EF8  0022               	movlb	2	; select bank2
 13915  0EF9  100C               	bcf	12,0	;volatile
 13916  0EFA  178E               	bsf	14,7	;volatile
 13917  0EFB  148C               	bsf	12,1	;volatile
 13918  0EFC  158E               	bsf	14,3	;volatile
 13919  0EFD  0008               	return
 13920  0EFE                     l480:	
 13921                           ;led.c: 60:         {;led.c: 61:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13922                           
 13923  0EFE  0022               	movlb	2	; select bank2
 13924  0EFF  100C               	bcf	12,0	;volatile
 13925  0F00  178E               	bsf	14,7	;volatile
 13926  0F01  148C               	bsf	12,1	;volatile
 13927  0F02  118E               	bcf	14,3	;volatile
 13928  0F03  0008               	return
 13929  0F04                     l489:	
 13930                           ;led.c: 65:         {;led.c: 66:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13931                           
 13932  0F04  0022               	movlb	2	; select bank2
 13933  0F05  100C               	bcf	12,0	;volatile
 13934  0F06  178E               	bsf	14,7	;volatile
 13935  0F07  108C               	bcf	12,1	;volatile
 13936  0F08  158E               	bsf	14,3	;volatile
 13937  0F09  0008               	return
 13938  0F0A                     l498:	
 13939                           ;led.c: 70:         {;led.c: 71:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13940                           
 13941  0F0A  0022               	movlb	2	; select bank2
 13942  0F0B  100C               	bcf	12,0	;volatile
 13943  0F0C  178E               	bsf	14,7	;volatile
 13944  0F0D  108C               	bcf	12,1	;volatile
 13945  0F0E  118E               	bcf	14,3	;volatile
 13946  0F0F  0008               	return
 13947  0F10                     l507:	
 13948                           ;led.c: 75:         {;led.c: 76:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13949                           
 13950  0F10  0022               	movlb	2	; select bank2
 13951  0F11  100C               	bcf	12,0	;volatile
 13952  0F12  138E               	bcf	14,7	;volatile
 13953  0F13  148C               	bsf	12,1	;volatile
 13954  0F14  158E               	bsf	14,3	;volatile
 13955  0F15  0008               	return
 13956  0F16                     l516:	
 13957                           ;led.c: 80:         {;led.c: 81:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13958                           
 13959  0F16  0022               	movlb	2	; select bank2
 13960  0F17  100C               	bcf	12,0	;volatile
 13961  0F18  138E               	bcf	14,7	;volatile
 13962  0F19  148C               	bsf	12,1	;volatile
 13963  0F1A  118E               	bcf	14,3	;volatile
 13964  0F1B  0008               	return
 13965  0F1C                     l525:	
 13966                           ;led.c: 85:         {;led.c: 86:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
 13967                           
 13968  0F1C  0022               	movlb	2	; select bank2
 13969  0F1D  100C               	bcf	12,0	;volatile
 13970  0F1E  138E               	bcf	14,7	;volatile
 13971  0F1F  108C               	bcf	12,1	;volatile
 13972  0F20  158E               	bsf	14,3	;volatile
 13973  0F21  0008               	return
 13974  0F22                     l534:	
 13975                           ;led.c: 90:         {;led.c: 91:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
 13976                           
 13977  0F22  0022               	movlb	2	; select bank2
 13978  0F23  100C               	bcf	12,0	;volatile
 13979  0F24  138E               	bcf	14,7	;volatile
 13980  0F25  108C               	bcf	12,1	;volatile
 13981  0F26  118E               	bcf	14,3	;volatile
 13982  0F27  0008               	return
 13983  0F28                     l4214:	
 13984  0F28  0873               	movf	LED_PROCESS@x,w
 13985  0F29  00F1               	movwf	??_LED_PROCESS
 13986  0F2A  01F2               	clrf	??_LED_PROCESS+1
 13987                           
 13988                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13989                           ; Switch size 1, requested type "simple"
 13990                           ; Number of cases is 1, Range of values is 0 to 0
 13991                           ; switch strategies available:
 13992                           ; Name         Instructions Cycles
 13993                           ; simple_byte            4     3 (average)
 13994                           ; direct_byte            8     6 (fixed)
 13995                           ; jumptable            260     6 (fixed)
 13996                           ;	Chosen strategy is simple_byte
 13997  0F2B  0872               	movf	??_LED_PROCESS+1,w
 13998  0F2C  3A00               	xorlw	0	; case 0
 13999  0F2D  1903               	skipnz
 14000  0F2E  2F30               	goto	l7110
 14001  0F2F  2F62               	goto	l542
 14002  0F30                     l7110:	
 14003                           
 14004                           ; Switch size 1, requested type "simple"
 14005                           ; Number of cases is 16, Range of values is 0 to 15
 14006                           ; switch strategies available:
 14007                           ; Name         Instructions Cycles
 14008                           ; direct_byte           38     6 (fixed)
 14009                           ; simple_byte           49    25 (average)
 14010                           ; jumptable            260     6 (fixed)
 14011                           ;	Chosen strategy is simple_byte
 14012  0F30  0871               	movf	??_LED_PROCESS,w
 14013  0F31  3A00               	xorlw	0	; case 0
 14014  0F32  1903               	skipnz
 14015  0F33  2EC8               	goto	l398
 14016  0F34  3A01               	xorlw	1	; case 1
 14017  0F35  1903               	skipnz
 14018  0F36  2ECE               	goto	l408
 14019  0F37  3A03               	xorlw	3	; case 2
 14020  0F38  1903               	skipnz
 14021  0F39  2ED4               	goto	l417
 14022  0F3A  3A01               	xorlw	1	; case 3
 14023  0F3B  1903               	skipnz
 14024  0F3C  2EDA               	goto	l426
 14025  0F3D  3A07               	xorlw	7	; case 4
 14026  0F3E  1903               	skipnz
 14027  0F3F  2EE0               	goto	l435
 14028  0F40  3A01               	xorlw	1	; case 5
 14029  0F41  1903               	skipnz
 14030  0F42  2EE6               	goto	l444
 14031  0F43  3A03               	xorlw	3	; case 6
 14032  0F44  1903               	skipnz
 14033  0F45  2EEC               	goto	l453
 14034  0F46  3A01               	xorlw	1	; case 7
 14035  0F47  1903               	skipnz
 14036  0F48  2EF2               	goto	l462
 14037  0F49  3A0F               	xorlw	15	; case 8
 14038  0F4A  1903               	skipnz
 14039  0F4B  2EF8               	goto	l471
 14040  0F4C  3A01               	xorlw	1	; case 9
 14041  0F4D  1903               	skipnz
 14042  0F4E  2EFE               	goto	l480
 14043  0F4F  3A03               	xorlw	3	; case 10
 14044  0F50  1903               	skipnz
 14045  0F51  2F04               	goto	l489
 14046  0F52  3A01               	xorlw	1	; case 11
 14047  0F53  1903               	skipnz
 14048  0F54  2F0A               	goto	l498
 14049  0F55  3A07               	xorlw	7	; case 12
 14050  0F56  1903               	skipnz
 14051  0F57  2F10               	goto	l507
 14052  0F58  3A01               	xorlw	1	; case 13
 14053  0F59  1903               	skipnz
 14054  0F5A  2F16               	goto	l516
 14055  0F5B  3A03               	xorlw	3	; case 14
 14056  0F5C  1903               	skipnz
 14057  0F5D  2F1C               	goto	l525
 14058  0F5E  3A01               	xorlw	1	; case 15
 14059  0F5F  1903               	skipnz
 14060  0F60  2F22               	goto	l534
 14061  0F61  2F62               	goto	l542
 14062  0F62                     l542:	
 14063  0F62  0008               	return
 14064  0F63                     __end_of_LED_PROCESS:	
 14065                           
 14066                           	psect	intentry
 14067  0004                     __pintentry:	
 14068 ;; *************** function _INTERRUPT_InterruptManager *****************
 14069 ;; Defined at:
 14070 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14071 ;; Parameters:    Size  Location     Type
 14072 ;;		None
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;		None
 14075 ;; Return value:  Size  Location     Type
 14076 ;;                  1    wreg      void 
 14077 ;; Registers used:
 14078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14084 ;;      Params:         0       0       0       0       0       0       0       0
 14085 ;;      Locals:         0       0       0       0       0       0       0       0
 14086 ;;      Temps:          0       0       0       0       0       0       0       0
 14087 ;;      Totals:         0       0       0       0       0       0       0       0
 14088 ;;Total ram usage:        0 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    3
 14091 ;; This function calls:
 14092 ;;		Absolute function
 14093 ;;		_EUSART_Receive_ISR
 14094 ;; This function is called by:
 14095 ;;		Interrupt level 1
 14096 ;; This function uses a non-reentrant model
 14097 ;;
 14098                           
 14099  0004                     _INTERRUPT_InterruptManager:	
 14100                           
 14101                           ;incstack = 0
 14102 ;; hardware stack exceeded
 14103  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14104                           
 14105                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14106  0005  3180               	pagesel	$
 14107                           
 14108                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 14109  0006  1F0B               	btfss	11,6	;volatile
 14110  0007  2814               	goto	i1l145
 14111                           
 14112                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 14113  0008  0021               	movlb	1	; select bank1
 14114  0009  1E91               	btfss	17,5	;volatile
 14115  000A  2814               	goto	i1l145
 14116  000B  0020               	movlb	0	; select bank0
 14117  000C  1E91               	btfss	17,5	;volatile
 14118  000D  2814               	goto	i1l145
 14119                           
 14120                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_RxDefaultInterruptHandler();
 14121  000E  0021               	movlb	1	; select bank1
 14122  000F  0851               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14123  0010  008A               	movwf	10
 14124  0011  0850               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14125  0012  000A               	callw
 14126  0013  3180               	pagesel	$
 14127  0014                     i1l145:	
 14128                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 14129                           
 14130  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14131  0015  0009               	retfie
 14132  0016                     __end_of_INTERRUPT_InterruptManager:	
 14133                           
 14134                           	psect	text90
 14135  093E                     __ptext90:	
 14136 ;; *************** function _EUSART_Receive_ISR *****************
 14137 ;; Defined at:
 14138 ;;		line 180 in file "mcc_generated_files/eusart.c"
 14139 ;; Parameters:    Size  Location     Type
 14140 ;;		None
 14141 ;; Auto vars:     Size  Location     Type
 14142 ;;		None
 14143 ;; Return value:  Size  Location     Type
 14144 ;;                  1    wreg      void 
 14145 ;; Registers used:
 14146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14147 ;; Tracked objects:
 14148 ;;		On entry : 0/0
 14149 ;;		On exit  : 0/0
 14150 ;;		Unchanged: 0/0
 14151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14152 ;;      Params:         0       0       0       0       0       0       0       0
 14153 ;;      Locals:         0       0       0       0       0       0       0       0
 14154 ;;      Temps:          0       0       0       0       0       0       0       0
 14155 ;;      Totals:         0       0       0       0       0       0       0       0
 14156 ;;Total ram usage:        0 bytes
 14157 ;; Hardware stack levels used:    1
 14158 ;; Hardware stack levels required when called:    2
 14159 ;; This function calls:
 14160 ;;		Absolute function
 14161 ;;		_EUSART_DefaultErrorHandler
 14162 ;;		_EUSART_DefaultFramingErrorHandler
 14163 ;;		_EUSART_DefaultOverrunErrorHandler
 14164 ;;		_EUSART_RxDataHandler
 14165 ;; This function is called by:
 14166 ;;		_EUSART_Initialize
 14167 ;;		_INTERRUPT_InterruptManager
 14168 ;; This function uses a non-reentrant model
 14169 ;;
 14170                           
 14171                           
 14172                           ;psect for function _EUSART_Receive_ISR
 14173  093E                     _EUSART_Receive_ISR:	
 14174                           
 14175                           ;mcc_generated_files/eusart.c: 183:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 14176                           
 14177                           ;incstack = 0
 14178 ;; hardware stack exceeded
 14179                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14180  093E  087C               	movf	_eusartRxHead,w	;volatile
 14181  093F  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14182  0940  0086               	movwf	6
 14183  0941  0187               	clrf	7
 14184  0942  0181               	clrf	1
 14185                           
 14186                           ;mcc_generated_files/eusart.c: 185:     if(RCSTAbits.FERR){
 14187  0943  0023               	movlb	3	; select bank3
 14188  0944  1D1D               	btfss	29,2	;volatile
 14189  0945  2951               	goto	i1l5060
 14190                           
 14191                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14192  0946  087C               	movf	_eusartRxHead,w	;volatile
 14193  0947  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14194  0948  0086               	movwf	6
 14195  0949  0187               	clrf	7
 14196  094A  1481               	bsf	1,1
 14197                           
 14198                           ;mcc_generated_files/eusart.c: 187:         EUSART_FramingErrorHandler();
 14199  094B  0021               	movlb	1	; select bank1
 14200  094C  084F               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 14201  094D  008A               	movwf	10
 14202  094E  084E               	movf	_EUSART_FramingErrorHandler^(0+128),w
 14203  094F  000A               	callw
 14204  0950  3189               	pagesel	$
 14205  0951                     i1l5060:	
 14206                           
 14207                           ;mcc_generated_files/eusart.c: 190:     if(RCSTAbits.OERR){
 14208  0951  0023               	movlb	3	; select bank3
 14209  0952  1C9D               	btfss	29,1	;volatile
 14210  0953  295F               	goto	i1l5066
 14211                           
 14212                           ;mcc_generated_files/eusart.c: 191:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14213  0954  087C               	movf	_eusartRxHead,w	;volatile
 14214  0955  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14215  0956  0086               	movwf	6
 14216  0957  0187               	clrf	7
 14217  0958  1501               	bsf	1,2
 14218                           
 14219                           ;mcc_generated_files/eusart.c: 192:         EUSART_OverrunErrorHandler();
 14220  0959  0021               	movlb	1	; select bank1
 14221  095A  084D               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 14222  095B  008A               	movwf	10
 14223  095C  084C               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 14224  095D  000A               	callw
 14225  095E  3189               	pagesel	$
 14226  095F                     i1l5066:	
 14227                           
 14228                           ;mcc_generated_files/eusart.c: 195:     if(eusartRxStatusBuffer[eusartRxHead].status){
 14229  095F  087C               	movf	_eusartRxHead,w	;volatile
 14230  0960  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14231  0961  0086               	movwf	6
 14232  0962  0187               	clrf	7
 14233  0963  0801               	movf	1,w
 14234  0964  1903               	btfsc	3,2
 14235  0965  296D               	goto	i1l5070
 14236                           
 14237                           ;mcc_generated_files/eusart.c: 196:         EUSART_ErrorHandler();
 14238  0966  0021               	movlb	1	; select bank1
 14239  0967  084B               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14240  0968  008A               	movwf	10
 14241  0969  084A               	movf	_EUSART_ErrorHandler^(0+128),w
 14242  096A  000A               	callw
 14243  096B  3189               	pagesel	$
 14244                           
 14245                           ;mcc_generated_files/eusart.c: 197:     } else {
 14246  096C  0008               	return
 14247  096D                     i1l5070:	
 14248                           
 14249                           ;mcc_generated_files/eusart.c: 198:         EUSART_RxDataHandler();
 14250  096D  3196  2624         	fcall	_EUSART_RxDataHandler
 14251  096F  0008               	return
 14252  0970                     __end_of_EUSART_Receive_ISR:	
 14253                           
 14254                           	psect	text91
 14255  1438                     __ptext91:	
 14256 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14257 ;; Defined at:
 14258 ;;		line 216 in file "mcc_generated_files/eusart.c"
 14259 ;; Parameters:    Size  Location     Type
 14260 ;;		None
 14261 ;; Auto vars:     Size  Location     Type
 14262 ;;		None
 14263 ;; Return value:  Size  Location     Type
 14264 ;;                  1    wreg      void 
 14265 ;; Registers used:
 14266 ;;		None
 14267 ;; Tracked objects:
 14268 ;;		On entry : 0/0
 14269 ;;		On exit  : 0/0
 14270 ;;		Unchanged: 0/0
 14271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14272 ;;      Params:         0       0       0       0       0       0       0       0
 14273 ;;      Locals:         0       0       0       0       0       0       0       0
 14274 ;;      Temps:          0       0       0       0       0       0       0       0
 14275 ;;      Totals:         0       0       0       0       0       0       0       0
 14276 ;;Total ram usage:        0 bytes
 14277 ;; Hardware stack levels used:    1
 14278 ;; This function calls:
 14279 ;;		Nothing
 14280 ;; This function is called by:
 14281 ;;		_EUSART_Initialize
 14282 ;;		_EUSART_Receive_ISR
 14283 ;; This function uses a non-reentrant model
 14284 ;;
 14285                           
 14286                           
 14287                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 14288  1438                     _EUSART_DefaultOverrunErrorHandler:	
 14289                           
 14290                           ;mcc_generated_files/eusart.c: 219:     RCSTAbits.CREN = 0;
 14291                           
 14292                           ;incstack = 0
 14293 ;; hardware stack exceeded
 14294                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 14295  1438  0023               	movlb	3	; select bank3
 14296  1439  121D               	bcf	29,4	;volatile
 14297                           
 14298                           ;mcc_generated_files/eusart.c: 220:     RCSTAbits.CREN = 1;
 14299  143A  161D               	bsf	29,4	;volatile
 14300  143B  0008               	return
 14301  143C                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 14302                           
 14303                           	psect	text92
 14304  1426                     __ptext92:	
 14305 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 14306 ;; Defined at:
 14307 ;;		line 214 in file "mcc_generated_files/eusart.c"
 14308 ;; Parameters:    Size  Location     Type
 14309 ;;		None
 14310 ;; Auto vars:     Size  Location     Type
 14311 ;;		None
 14312 ;; Return value:  Size  Location     Type
 14313 ;;                  1    wreg      void 
 14314 ;; Registers used:
 14315 ;;		None
 14316 ;; Tracked objects:
 14317 ;;		On entry : 0/0
 14318 ;;		On exit  : 0/0
 14319 ;;		Unchanged: 0/0
 14320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14321 ;;      Params:         0       0       0       0       0       0       0       0
 14322 ;;      Locals:         0       0       0       0       0       0       0       0
 14323 ;;      Temps:          0       0       0       0       0       0       0       0
 14324 ;;      Totals:         0       0       0       0       0       0       0       0
 14325 ;;Total ram usage:        0 bytes
 14326 ;; Hardware stack levels used:    1
 14327 ;; This function calls:
 14328 ;;		Nothing
 14329 ;; This function is called by:
 14330 ;;		_EUSART_Initialize
 14331 ;;		_EUSART_Receive_ISR
 14332 ;; This function uses a non-reentrant model
 14333 ;;
 14334                           
 14335                           
 14336                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14337  1426                     _EUSART_DefaultFramingErrorHandler:	
 14338                           
 14339                           ;incstack = 0
 14340 ;; hardware stack exceeded
 14341                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14342  1426  0008               	return
 14343  1427                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14344                           
 14345                           	psect	text93
 14346  1429                     __ptext93:	
 14347 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14348 ;; Defined at:
 14349 ;;		line 224 in file "mcc_generated_files/eusart.c"
 14350 ;; Parameters:    Size  Location     Type
 14351 ;;		None
 14352 ;; Auto vars:     Size  Location     Type
 14353 ;;		None
 14354 ;; Return value:  Size  Location     Type
 14355 ;;                  1    wreg      void 
 14356 ;; Registers used:
 14357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14358 ;; Tracked objects:
 14359 ;;		On entry : 0/0
 14360 ;;		On exit  : 0/0
 14361 ;;		Unchanged: 0/0
 14362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14363 ;;      Params:         0       0       0       0       0       0       0       0
 14364 ;;      Locals:         0       0       0       0       0       0       0       0
 14365 ;;      Temps:          0       0       0       0       0       0       0       0
 14366 ;;      Totals:         0       0       0       0       0       0       0       0
 14367 ;;Total ram usage:        0 bytes
 14368 ;; Hardware stack levels used:    1
 14369 ;; Hardware stack levels required when called:    1
 14370 ;; This function calls:
 14371 ;;		_EUSART_RxDataHandler
 14372 ;; This function is called by:
 14373 ;;		_EUSART_Initialize
 14374 ;;		_EUSART_Receive_ISR
 14375 ;; This function uses a non-reentrant model
 14376 ;;
 14377                           
 14378                           
 14379                           ;psect for function _EUSART_DefaultErrorHandler
 14380  1429                     _EUSART_DefaultErrorHandler:	
 14381                           
 14382                           ;mcc_generated_files/eusart.c: 225:     EUSART_RxDataHandler();
 14383                           
 14384                           ;incstack = 0
 14385 ;; hardware stack exceeded
 14386                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14387  1429  3196  2624         	fcall	_EUSART_RxDataHandler
 14388  142B  0008               	return
 14389  142C                     __end_of_EUSART_DefaultErrorHandler:	
 14390                           
 14391                           	psect	text94
 14392  1624                     __ptext94:	
 14393 ;; *************** function _EUSART_RxDataHandler *****************
 14394 ;; Defined at:
 14395 ;;		line 204 in file "mcc_generated_files/eusart.c"
 14396 ;; Parameters:    Size  Location     Type
 14397 ;;		None
 14398 ;; Auto vars:     Size  Location     Type
 14399 ;;		None
 14400 ;; Return value:  Size  Location     Type
 14401 ;;                  1    wreg      void 
 14402 ;; Registers used:
 14403 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14404 ;; Tracked objects:
 14405 ;;		On entry : 0/0
 14406 ;;		On exit  : 0/0
 14407 ;;		Unchanged: 0/0
 14408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14409 ;;      Params:         0       0       0       0       0       0       0       0
 14410 ;;      Locals:         0       0       0       0       0       0       0       0
 14411 ;;      Temps:          1       0       0       0       0       0       0       0
 14412 ;;      Totals:         1       0       0       0       0       0       0       0
 14413 ;;Total ram usage:        1 bytes
 14414 ;; Hardware stack levels used:    1
 14415 ;; This function calls:
 14416 ;;		Nothing
 14417 ;; This function is called by:
 14418 ;;		_EUSART_Receive_ISR
 14419 ;;		_EUSART_DefaultErrorHandler
 14420 ;; This function uses a non-reentrant model
 14421 ;;
 14422                           
 14423                           
 14424                           ;psect for function _EUSART_RxDataHandler
 14425  1624                     _EUSART_RxDataHandler:	
 14426                           
 14427                           ;mcc_generated_files/eusart.c: 206:     eusartRxBuffer[eusartRxHead++] = RCREG;
 14428                           
 14429                           ;incstack = 0
 14430 ;; hardware stack exceeded
 14431                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14432  1624  0023               	movlb	3	; select bank3
 14433  1625  0819               	movf	25,w	;volatile
 14434  1626  00F0               	movwf	??_EUSART_RxDataHandler
 14435  1627  087C               	movf	_eusartRxHead,w
 14436  1628  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14437  1629  0086               	movwf	6
 14438  162A  0187               	clrf	7
 14439  162B  0870               	movf	??_EUSART_RxDataHandler,w
 14440  162C  0081               	movwf	1
 14441  162D  3001               	movlw	1
 14442  162E  00F0               	movwf	??_EUSART_RxDataHandler
 14443  162F  0870               	movf	??_EUSART_RxDataHandler,w
 14444  1630  07FC               	addwf	_eusartRxHead,f	;volatile
 14445                           
 14446                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14447  1631  3008               	movlw	8
 14448  1632  027C               	subwf	_eusartRxHead,w	;volatile
 14449  1633  1803               	btfsc	3,0
 14450                           
 14451                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         eus
      +                          artRxHead = 0;
 14452  1634  01FC               	clrf	_eusartRxHead	;volatile
 14453                           
 14454                           ;mcc_generated_files/eusart.c: 211:     eusartRxCount++;
 14455  1635  3001               	movlw	1
 14456  1636  00F0               	movwf	??_EUSART_RxDataHandler
 14457  1637  0870               	movf	??_EUSART_RxDataHandler,w
 14458  1638  0020               	movlb	0	; select bank0
 14459  1639  07EC               	addwf	_eusartRxCount,f	;volatile
 14460  163A  0008               	return
 14461  163B                     __end_of_EUSART_RxDataHandler:	
 14462  007E                     btemp	set	126	;btemp
 14463  007E                     int$flags	set	126
 14464  007E                     wtemp0	set	126


Data Sizes:
    Strings     92
    Constant    73
    Data        49
    BSS         145
    Persistent  40
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     60      79
    BANK1            80      2      52
    BANK2            80      0      68
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2588$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Service$2588	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2280_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_Service@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    sp__memcpy	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK3[64]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonReleasedCallback(), 

    callback_pressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonPressedCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    S831$sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    S831$sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK2[36]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _check_message->_printf
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Pressed->_Button_DefaultCallback
    _Button_State_Pressed->_myButtonReleasedCallback
    _Button_State_NotPressed->_Button_DefaultCallback
    _Button_State_NotPressed->_myButtonPressedCallback
    _update_state->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   54646
                                              0 BANK1      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    6576
                                             47 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4370
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   30289
                                             59 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0   15395
                                             57 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0   15296
                                             53 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    8004
                                             48 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1    6558
                                             47 BANK0      1     0      1
            _MTOUCH_Button_isPressed
                       _update_state
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1959
                                             48 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     132
                                             47 BANK0      1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                             47 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                             48 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0    6589
                                             47 BANK0      3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
                       _update_state
 ---------------------------------------------------------------------------------
 (6) _update_state                                         0     0      0    6514
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    6514
                                             39 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    4813
                                             31 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    4378
                                             22 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 8     6      2    2894
                                             16 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2650
                                              7 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1127
                                             11 COMMON     1     0      1
                                              0 BANK0      7     7      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     812
                                              3 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      44
                                              2 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
 ---------------------------------------------------------------------------------
 (17) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (18) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (18) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (18) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
     _RELAY_PROCESS
     _update_state
       _printf
         _vfprintf
           _vfpfcnvrt
             _ctoa
               _pad
                 _fputc
                   _putch
                     _EUSART_Write
                 _fputs
                   _fputc
                     _putch
                       _EUSART_Write
                 _strlen
             _fputc
               _putch
                 _EUSART_Write
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
             _update_state
               _printf
                 _vfprintf
                   _vfpfcnvrt
                     _ctoa
                       _pad
                         _fputc
                           _putch
                             _EUSART_Write
                         _fputs
                           _fputc
                             _putch
                               _EUSART_Write
                         _strlen
                     _fputc
                       _putch
                         _EUSART_Write
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     114       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      34       8       65.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      44      10       85.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     114      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Jul 06 14:44:44 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                          _update_state 05A8  
                                      ___bmul@product 0073                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                                                  l87 1481                            __end_of_Sensor_setInactive 1498  
                           _Sensor_setCalibratAcqTime 1522                                           __CFG_LVP$ON 0000  
                                                 l333 0651                                                   l408 0ECE  
                                                 l417 0ED4                                                   l426 0EDA  
                                                 l507 0F10                                                   l435 0EE0  
                                                 l516 0F16                                                   l444 0EE6  
                                                 l525 0F1C                                                   l453 0EEC  
                                                 l534 0F22                                                   l462 0EF2  
                                                 l542 0F62                                                   l471 0EF8  
                                                 l480 0EFE                                                   l398 0EC8  
                                                 l489 0F04                                                   l498 0F0A  
                                                 l845 0506                                                   l881 0122  
                                                 l874 011F                                                   l891 01C2  
                                                 l876 011B                                                   l893 01D9  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 _abs 163B                                ??_EUSART_RxDataHandler 0070  
                                                 _pad 0AAA                        ?_EUSART_SetFramingErrorHandler 0071  
                             ?_Sensor_loadADCSettings 0072                                       _TMR2_Initialize 14A8  
                                        __CFG_BORV$LO 0000                                         DATA_PROCESS@x 0051  
                                                 wreg 0009                      ??_MTOUCH_Sensor_Sampled_ResetAll 0072  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      __size_of_MTOUCH_Sensor_SampleAll 0016  
                      Sensor_getScanGroupIndex@sensor 0073                     __size_of_MTOUCH_Sensor_Initialize 0015  
                           ?_MTOUCH_Sensor_Initialize 0070                                          ?_EUSART_Read 0070  
                                                l1110 077B                                                  ?_abs 0071  
                                                l1305 0F8F                                                  l1241 0F65  
                                                l1314 0F95                                                  l1323 0F9B  
                                                l1251 0F6B                                                  l1332 0FA1  
                                                l1260 0F71                                                  l1341 0FA7  
                                                l1350 0FAD                                                  l1269 0F77  
                                                l1278 0F7D                                                  l1359 0FB3  
                                                l1287 0F83                                                  l1368 0FB9  
                                                l1296 0F89                                                  l1377 0FBF  
                                                l1385 0FFF                                                  l1474 0AC2  
                                                l4050 0836                                                  l4060 0849  
                                                l1477 0AE2                                                  l4214 0F28  
                                                l1478 0AEE                                                  l4054 0838  
                                                l4150 0502                                                  l5032 1738  
                                                l4048 0827                                                  l4128 1582  
                                                l4138 14FD                                                  l4170 0586  
                                                l4236 0FC5                                                  l4228 169B  
                                                l4164 0560                                                  l6020 00B3  
                                                l4190 0E12                                                  l4182 0DDC  
                                                l6102 01B9                                                  l4184 0DE0  
                                                l4168 0573                                                  l6040 00E9  
                                                l6024 00BD                                                  l6008 00A4  
                                                l4522 089D                                                  l4514 088E  
                                                l6130 01DD                                                  l6050 00FC  
                                                l5082 0A15                                                  l6300 0BA0  
                                                l7100 0EAD                                                  l5164 0A19  
                                                l7110 0F30                                                  l4630 0D5A  
                                                l4526 08A5                                                  l4518 0895  
                                                l6150 0215                                                  l6134 01E6  
                                                l6230 0C73                                                  l7102 0EB2  
                                                l5158 0A17                                                  ?_pad 0027  
                                                l7104 04C2                                                  l6144 0203  
                                                l6224 0C47                                                  l6216 0C43  
                                                l6208 0C30                                                  l4560 0A0F  
                                                l6304 0BA9                                                  l7106 061F  
                                                l6138 01EF                                                  l6090 0185  
                                                l6074 0125                                                  l6066 0116  
                                                l6226 0C5A                                                  l4554 0A02  
                                                l6410 16AB                                                  l7108 0FCD  
                                                l3940 0979                                                  l6260 0A99  
                                                l6316 15F6                                                  l4556 0A04  
                                                l6420 0E5E                                                  l4742 0CEA  
                                                l6174 167F                                                  l6350 07B4  
                                                l6086 016A                                                  l6430 0E7E  
                                                l6334 17DE                                                  l3944 099C  
                                                l3960 1657                                                  l4744 0CF2  
                                                l6344 14E5                                                  l6352 07B8  
                                                l6504 1533                                                  l6520 178B  
                                                l3954 1716                                                  l3962 1663  
                                                l6602 046F                                                  l6098 019F  
                                                l6282 0B65                                                  l6426 0E6D  
                                                l6442 0EA0                                                  l6620 0499  
                                                l4748 0D06                                                  l6372 0772  
                                                l6292 0B80                                                  l6276 0B5D  
                                                l6436 0E8E                                                  l6444 0EC3  
                                                l4860 160F                                                  l6516 1789  
                                                l5814 0AB8                                                  l6614 048B  
                                                l6542 03E3                                                  l5910 156A  
                                                l6366 0739                                                  l6526 179C  
                                                l5824 0AC4                                                  l5920 05A9  
                                                l6632 04B5                                                  l6608 047D  
                                                l6560 040D                                                  l6536 03D7  
                                                l6384 0BD4                                                  l6296 0B90  
                                                l6288 0B78                                                  l4696 17C7  
                                                l7096 17A4                                                  l6704 023A  
                                                l5818 0AC0                                                  l5834 08EC  
                                                l5930 05CC                                                  l5922 05B0  
                                                l6634 04B8                                                  l6626 04A7  
                                                l6554 03FF                                                  l5906 1564  
                                                l6490 1603                                                  l7098 0A21  
                                                l5836 08F5                                                  l5940 05EF  
                                                l5932 05D3                                                  l5924 05B7  
                                                l6572 0429                                                  l6548 03F1  
                                                l6468 0B3B                                                  l6484 15FA  
                                                l6396 1506                                                  l6804 0385  
                                                l6716 025E                                                  l5862 06A5  
                                                l5950 0612                                                  l5942 05F6  
                                                l5934 05DA                                                  l5926 05BE  
                                                l6590 0453                                                  l6566 041B  
                                                l6638 04BA                                                  l6806 0389  
                                                l5872 06CC                                                  l5944 05FD  
                                                l5936 05E1                                                  l5928 05C5  
                                                l6584 0445                                                  l6656 16C4  
                                                l6824 03B2                                                  l5946 0604  
                                                l5938 05E8                                                  l5954 0619  
                                                l6578 0437                                                  l6762 0325  
                                                l6738 02BE                                                  l5868 06C6  
                                                l5892 08B7                                                  l5948 060B  
                                                l6596 0461                                                  l6836 03C8  
                                                l5878 06D7                                                  l5894 08D4  
                                                l5990 00B1                                                  l6758 031D  
                                                l6766 032A                                                  l5986 0095  
                                                l5978 007E                                                  l6778 0345  
                                                l5988 009C                                                  l5996 009E  
                                                STR_1 1800                                                  STR_2 180E  
                                                STR_3 1813                                                  STR_4 1818  
                                                STR_5 181D                                                  STR_6 1822  
                                                STR_7 1827                                                  STR_8 182C  
                                                STR_9 1831                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u2145 099A  
                                                u2415 0E03                                                  u3240 0CD1  
                                                u3065 0D22                                                  u3235 0C99  
                                                u3075 0D68                                                  u3245 0CCD  
                                                u2285 1644                                                  u2365 059B  
                                                u2470 1699                                                  u2465 168A  
                                                u2385 0DBF                                                  u2395 0DC9  
                                                u3435 1612                                                  u5055 0AFF  
                                                u4185 0ACE                                                  u4725 0C61  
                                                u5517 026F                                                  u5607 02F4  
                                                u5527 027C                                                  u4745 09A9  
                                                u5617 0301                                                  u5537 0289  
                                                u4755 0875                                                  u5627 030E  
                                                u5547 0296                                                  u4925 07E1  
                                                u5557 02A3                                                  u5567 02B0  
                                                u5577 02CD                                                  u4955 074F  
                                                u5587 02DA                                                  u5597 02E7  
                          Button_State_Pressed@button 0050                                                  _TMR2 001A  
                               __end_of_check_message 17AD                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01CA  
                            _Sensor_getScanGroupIndex 0825                             ?_Sensor_Acq_ExecutePacket 007B  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0071                                                  _dbuf 0144  
                                                _ctoa 08DD                                                  _main 0222  
                __size_of_MTOUCH_Button_InitializeAll 001C                                                  _prec 00B4  
                                                _nout 00B0                                                  pad@i 002B  
                                                pad@p 0028                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 002D  
                __size_of_MTOUCH_Sensor_InitializeAll 000E                                                  btemp 007E  
                                                start 0016                                     ___bmul@multiplier 0074  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                      __end_of_Sensor_autoCalibration 0E31  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 180E  
        Sensor_Scanfrequency_Evaluation@frequency_hop 1809                              _myButtonReleasedCallback 16F3  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 001B  
                       __size_of_Button_State_Pressed 0068                                                 ??_abs 0073  
                                               ??_pad 002A                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 0078                         ??_MTOUCH_Sensor_RawSample_Get 0077  
                       Sensor_RawSample_Update@sensor 0077                         myButtonPressedCallback@button 004F  
                           __size_of_Sensor_isEnabled 0011                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 1474  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0036                   __end_of_Sensor_isCalibratingAcqTime 14B9  
                         _Sensor_isCalibratingAcqTime 14B0                                                 ?_ctoa 0030  
                                               ?_main 0070                                                 STR_10 1836  
                                               STR_11 183B                                                 STR_12 1840  
                                               STR_13 1845                                                 STR_14 184A  
                                               STR_15 184F                                                 STR_16 1854  
                                               STR_17 1859                                         __CFG_WDTE$OFF 0000  
                                               STR_18 1862                        __end_of_Sensor_loadADCSettings 05A8  
                                               _T2CON 001C                               __size_of_Button_Service 0055  
                                               i1l145 0014                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0036  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 _TXREG 019A  
                                               _TXSTA 019E                       __size_of_Button_DefaultCallback 0001  
                                ??_MTOUCH_needReburst 0071                       __size_of_Sensor_DefaultCallback 0001  
                                               _blink 0067                                                 _flags 00B6  
                             __size_of_Sensor_Service 0095                 __end_of_MTOUCH_Sensor_Scan_Initialize 1551  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 1541  
                                      _WDT_Initialize 143C                               Sensor_setSampled@sensor 0071  
                                               _fputc 0970                                                 _fputs 1712  
                                        LED_PROCESS@x 0073                                                 pad@fp 002F  
                                               _width 00B2                                                 ctoa@c 0030  
                                               _putch 1440                                                 ctoa@w 0033  
                    __size_of_Button_State_NotPressed 00A4                                                 pclath 000A  
                                _Sensor_Sampled_Reset 14A0                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 142F  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0008  
                              Sensor_isEnabled@sensor 0072                                       __initialization 0018  
                                        __end_of_ctoa 090D                                          __end_of_main 03D4  
                                _Sensor_setCalibrated 14E9                                 __size_of_DATA_PROCESS 0124  
                                      ??_EUSART_Write 0071                               __end_of_TMR2_Initialize 14B0  
                                      __CFG_LPBOR$OFF 0000                           ?_INTERRUPT_InterruptManager 0070  
                      ??_EUSART_SetRxInterruptHandler 0073                      __end_of_MTOUCH_Button_Initialize 09DB  
                                              ??_ctoa 0032                                                ??_main 00D2  
                             _MTOUCH_Sensor_Calibrate 1584                             Sensor_Service@sensor_adc1 0044  
                           Sensor_Service@sensor_adc2 0045                               ??_Button_Reading_Update 007C  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0073                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 1440                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0077             __end_of_EUSART_DefaultFramingErrorHandler 1427  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 1426  
                          _EUSART_OverrunErrorHandler 00CC                  __size_of_MTOUCH_Sensor_RawSample_Get 0018  
                                              ?_fputc 0073                                                ?_fputs 007B  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              ?_putch 0070                                                _ANSELB 018D  
                                              _ANSELC 018E                            __end_of_EUSART_is_rx_ready 142F  
                                              _BORCON 0116                                                i1l5060 0951  
                                              i1l5070 096D                                                i1l5066 095F  
                               ?_Sensor_Sampled_Reset 0070                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                     MTOUCH_Button_InitializeAll@button 0020  
                                        _DATA_PROCESS 03D4                        ??_Button_Reading_Update_Helper 0079  
                              _Button_DefaultCallback 1427                       __end_of_MTOUCH_Service_Mainloop 16D6  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 14B9  
                              _Sensor_DefaultCallback 1428                                          vfprintf@cfmt 0045  
                                       _packet_sample 005C                                                ___bmul 1562  
                               ?_Sensor_setCalibrated 0070                          Sensor_DefaultCallback@sensor 0071  
                                      __CFG_STVREN$ON 0000                      __size_of_myButtonPressedCallback 002E  
                                              _memcpy 17D5                                                _rxData 006B  
                    __end_of_MTOUCH_Button_ServiceAll 1541                                                _printf 1551  
                                              pad@buf 0027                                  __size_of_LED_PROCESS 009D  
                                              ctoa@fp 0035                          Sensor_autoCalibration@sensor 007A  
                                              _strlen 1652                                                fputc@c 0073  
                                              fputs@c 0023                                                fputs@i 0024  
                                              fputs@s 0026                               _MTOUCH_Sensor_SampleAll 15F8  
                        Button_DefaultCallback@button 004F                                  ?_Sensor_isCalibrated 0070  
                                     ?_WDT_Initialize 0070                              ?_Sensor_RawSample_Update 0070  
                          __end_of_Sensor_Acquisition 0BAB                                __size_of_RELAY_PROCESS 009D  
                             ?_Button_Baseline_Update 0070                                      __end_of_vfprintf 08DD  
                 Sensor_postAcquisitionProcess@sensor 0079                               __end_of_TMR2_StartTimer 1432  
                  __size_of_Sensor_setCalibratAcqTime 000F              __end_of_MTOUCH_Button_SetPressedCallback 1456  
           __size_of_MTOUCH_Button_SetPressedCallback 0006                    ??_MTOUCH_Button_SetPressedCallback 0073  
                   ?_MTOUCH_Button_SetPressedCallback 0071                      _MTOUCH_Button_SetPressedCallback 1450  
                            __size_of_Sensor_isActive 000E                       MTOUCH_Sensor_RawSample_Get@name 0078  
                 Sensor_getScanGroupIndex@sensorGroup 0074                                  __size_of_EUSART_Read 0027  
                                   _SYSTEM_Initialize 15A8                               __end_of__initialization 0054  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0075                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00BE                            __end_of_Button_Tick_helper 1786  
                       MTOUCH_Sensor_Calibrate@sensor 0076           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024  
                                 ___bmul@multiplicand 0071                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 1682                                          __pidataBANK0 0800  
                                        __pidataBANK1 14CF                                          __pidataBANK2 0801  
         __end_of_MTOUCH_Button_SetNotPressedCallback 1450          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 144A                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 1624                                         __end_of_fputc 09A5  
                                       __end_of_fputs 1738                      __end_of_MTOUCH_Sensor_Initialize 15E2  
                                       __end_of_putch 1445                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 1573                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0D10                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 0AFA                      __end_of_Sensor_Acq_ExecutePacket 0222  
                          ?_Button_State_Initializing 0050                                  Button_Service@button 0058  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 0D9F                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 09A5  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0E31  
                             _Button_State_NotPressed 06FA                         __size_of_MTOUCH_Sensor_Enable 0012  
                                  _Sensor_setInactive 1490                                     _sensor_scan_group 185E  
                                             ??_fputc 0076                             __end_of_SYSTEM_Initialize 15BA  
                                   _lowpowerActivated 0065                                               ??_fputs 0020  
                    MTOUCH_Sensor_isCalibrated@sensor 0076                                ??_Sensor_Sampled_Reset 0071  
                                             ??_putch 0072                                            __pbssBANK0 005C  
                                          __pbssBANK1 00A0                                            __pbssBANK2 0144  
                                          __pbssBANK3 01A0                                            _check_data 0A13  
                                __end_of_EUSART_Write 1488                               _TMR2_LoadPeriodRegister 1445  
                          ??_myButtonReleasedCallback 007C                          Sensor_loadADCSettings@sensor 0079  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 1488  
                         __size_of_EUSART_Receive_ISR 0032                            __end_of_mtouch_button_init 1040  
                                   _last_touch_status 0062           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025  
                              ??_Sensor_setCalibrated 0071                                            __pmaintext 0222  
                                       _RELAY_PROCESS 0F63                                               ?___bmul 0071  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                        MTOUCH_Sensor_wasSampled@sensor 0076  
                                          __pintentry 0004                                __end_of_Button_Service 0B4F  
                                             ?_memcpy 0071                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 16B9  
                         _MTOUCH_Button_InitializeAll 169D                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0071                   __end_of_MTOUCH_Sensor_InitializeAll 1513  
                         _MTOUCH_Sensor_InitializeAll 1505                             ??_MTOUCH_Sensor_SampleAll 0046  
                                             ?_printf 0047                       __end_of_Sensor_RawSample_Update 17D5  
                                ??_Sensor_setInactive 0071                                               ?_strlen 0071  
                   __size_of_MTOUCH_Sensor_wasSampled 000F                             ?_MTOUCH_Sensor_wasSampled 0070  
                                       _eusartRxCount 006C                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 0071                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 0800                                __end_of_Sensor_Service 0EC6  
                             Sensor_Service@scanGroup 0042                              _MTOUCH_Button_ServiceAll 1531  
                           __end_of_sensor_scan_group 1862                                    __size_of_vfpfcnvrt 00A8  
                       __size_of_EUSART_RxDataHandler 0017                      __size_of_MTOUCH_Service_Mainloop 001D  
                        __end_of_Button_State_Pressed 0C13                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 0073                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 0079                       Sensor_setCalibratAcqTime@sensor 0071  
                                __size_of_MTOUCH_Tick 0003                   Sensor_loadADCSettings@addressOffset 0078  
                __size_of_Sensor_isCalibratingAcqTime 0009                 Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021  
                           ??_MTOUCH_Button_isPressed 0071                                            _count_conf 00BA  
                                   ??_Sensor_isActive 0071                   __size_of_EUSART_DefaultErrorHandler 0003  
                                      ?_RELAY_PROCESS 0070                 __end_of_Sensor_postAcquisitionProcess 0A13  
              __size_of_Sensor_postAcquisitionProcess 0038                         _Sensor_postAcquisitionProcess 09DB  
                             _myButtonPressedCallback 0880                               Sensor_Acquisition@retry 003D  
                                     __size_of___bmul 0011                                           _AD1CON0bits 0711  
                      MTOUCH_Button_Initialize@button 007A                                           _AD2CON0bits 0791  
                                           ?_vfprintf 003F                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 1786  
                                             __ptext2 0A13                                               __ptext3 15A8  
                                             __ptext4 143C                                               __ptext5 14A8  
                                             __ptext6 16D6                                               __ptext7 146E  
                                             __ptext8 14C3                                               __ptext9 1505  
                              __size_of_check_message 0027                                       __size_of_printf 0011  
                         Button_Reading_Update@button 0020                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 15CD                                 _OSCILLATOR_Initialize 146E  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 0051  
                                             _prcData 006A                                       ?_Sensor_Service 0070  
                            ??_PIN_MANAGER_Initialize 0071                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 14E9  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 0058  
                                    _callback_sampled 00C8                             ??_TMR2_LoadPeriodRegister 0071  
                     Sensor_RawSample_Update@adcIndex 0076                            __size_of_SYSTEM_Initialize 0012  
                                             clrloop0 1475                                      _callback_pressed 00C6  
                      MTOUCH_Sensor_Initialize@sensor 0078                                  end_of_initialization 0054  
                                         ?_check_data 0070                               ?_Button_DefaultCallback 004F  
               __end_of_EUSART_SetOverrunErrorHandler 1468                __size_of_EUSART_SetOverrunErrorHandler 0006  
                       _EUSART_SetOverrunErrorHandler 1462                                               memcpy@d 007A  
                                             memcpy@n 0073                                               memcpy@s 0077  
                                             fputc@fp 0075                                               init_ram 147A  
                                             fputs@fp 007B                                               initloop 147B  
                             ?_Sensor_DefaultCallback 0071                         Sensor_Acquisition@sensor_adc1 003E  
                       Sensor_Acquisition@sensor_adc2 003B                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 090D                          ??_MTOUCH_Sensor_isCalibrated 0075  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 06FA  
                 __end_of_MTOUCH_Sensor_RawSample_Get 1682                           _MTOUCH_Sensor_RawSample_Get 166A  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 142C  
                                          ??_vfprintf 0042                                               strlen@a 0074  
                                             strlen@s 0075                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                                   ?_EUSART_is_rx_ready 0070  
                              Sensor_setActive@sensor 0071                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0034                         Button_Deviation_Update@button 0020  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0022                                 __size_of_EUSART_Write 0008  
            MTOUCH_Button_SetPressedCallback@callback 0071                            MTOUCH_Sensor_Enable@sensor 0076  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0023                                   _callback_notPressed 00C4  
                 __size_of_MTOUCH_Sensor_isCalibrated 0016                        __end_of_Button_DefaultCallback 1428  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032  
                                  _sensor_globalFlags 0064                              __end_of_Sensor_isEnabled 1584  
                          Sensor_setCalibrated@sensor 0071                        __end_of_Sensor_DefaultCallback 1429  
                    __end_of_myButtonReleasedCallback 1712                             __end_of_EUSART_Initialize 093E  
                                ??_EUSART_is_rx_ready 0071                                         _check_message 1786  
                            ??_Sensor_autoCalibration 0075                                             _TXSTAbits 019E  
                                       _check_request 0068                                       ??_RELAY_PROCESS 0071  
                           ??_myButtonPressedCallback 0074                      __size_of_Sensor_RawSample_Update 0028  
                                  _Sensor_Acquisition 0B4F                              ??_Sensor_loadADCSettings 0073  
                                       ?_update_state 0070                                         ??_LED_PROCESS 0071  
                                _Button_State_Pressed 0BAB                                        __end_of___bmul 1573  
                  __end_of_EUSART_DefaultErrorHandler 142C                            _EUSART_DefaultErrorHandler 1429  
                                 ?_Sensor_Acquisition 003B                                           vfpfcnvrt@ap 0037  
                                         vfpfcnvrt@fp 003E                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                          _EUSART_Write 1480  
                                 __size_of_check_data 004A                                    _Button_Tick_helper 175F  
                                      __end_of_memcpy 1800                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 1490  
                    TMR2_LoadPeriodRegister@periodVal 0071                                        __end_of_printf 1562  
                         ??_Button_State_Initializing 0051                                        __end_of_strlen 166A  
                                 start_initialization 0018                               _MTOUCH_Service_Mainloop 16B9  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 160E  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 1652  
                                         __end_of_pad 0AFA                                        _TMR2_StopTimer 1432  
                                       ??_EUSART_Read 0071          EUSART_SetRxInterruptHandler@interruptHandler 0071  
                                         putch@txData 0072                                  ??_Sensor_Acquisition 003C  
                                      ?_check_message 0070                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 0050                        Sensor_autoCalibration@adcIndex 0079  
                      ?_EUSART_SetOverrunErrorHandler 0071                      __end_of_MTOUCH_Sensor_wasSampled 1522  
                                ??_Button_Tick_helper 0071                          __end_of_MTOUCH_Sensor_Enable 15A8  
                                         vfprintf@fmt 003F                                          _packet_noise 0060  
                                      ??_update_state 007C                            _EUSART_FramingErrorHandler 00CE  
                                            ??___bmul 0072                                 ?_Button_State_Pressed 0050  
                              _EUSART_SetErrorHandler 1456                            ??_MTOUCH_Button_ServiceAll 0059  
                                         __pdataBANK0 006E                                           __pdataBANK1 00BE  
                                         __pdataBANK2 0120                                        check_message@x 0051  
                                            ??_memcpy 0075                           __end_of_Sensor_isCalibrated 14C3  
                        ??_Button_Baseline_Initialize 0020                                         _sample_period 006E  
                                ??_MTOUCH_Button_Tick 0074                                    _mtouch_button_init 1000  
                          Sensor_Sampled_Reset@sensor 0071                                              ??_printf 004B  
                                            ??_strlen 0073                          ?_Sensor_isCalibratingAcqTime 0070  
                     __end_of_myButtonPressedCallback 08AE                                   __end_of_LED_PROCESS 0F63  
                              __end_of_TMR2_StopTimer 1435                                           __pbssCOMMON 007C  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00D2                           _Sensor_loadADCSettings$1228 0076  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 14F7  
                      MTOUCH_Button_ServiceAll@button 005A                                   Sensor_Service@error 0043  
                          __end_of_EUSART_Receive_ISR 0970                         __size_of_Sensor_Sampled_Reset 0008  
                          __size_of_EUSART_Initialize 0031                               _Button_Deviation_Update 0C89  
                          ?_Sensor_setCalibratAcqTime 0070                      _EUSART_RxDefaultInterruptHandler 00D0  
                                 __end_of_EUSART_Read 175F                             _Button_State_Initializing 079E  
                  __end_of_MTOUCH_Sensor_isCalibrated 15F8                            _MTOUCH_Sensor_isCalibrated 15E2  
                                           __pnvBANK1 00CA                       __size_of_Sensor_autoCalibration 0092  
                   __size_of_Sensor_getScanGroupIndex 002D                                     _Sensor_setSampled 1498  
                           ?_Sensor_getScanGroupIndex 0070                          __end_of_EUSART_RxDataHandler 163B  
                              _PIN_MANAGER_Initialize 16D6                                      ??_Button_Service 0055  
                            ?_MTOUCH_Sensor_Calibrate 0070                                  EUSART_Read@readValue 0072  
                                  ?_Sensor_setSampled 0070                    Button_Reading_Update_Helper@button 007B  
                          ??_MTOUCH_Sensor_Initialize 0077                         __size_of_Sensor_setCalibrated 000E  
                     __size_of_Sensor_loadADCSettings 00B0                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 007C  
                                            _AAD2RES0 079A                                          _eusartRxTail 006D  
                                    ??_Sensor_Service 003F                            ??_Sensor_Acq_ExecutePacket 0020  
                        ??_INTERRUPT_InterruptManager 0071                                   ??_Sensor_setSampled 0071  
                   __size_of_myButtonReleasedCallback 001F                                           _blink_count 0066  
                           ?_myButtonReleasedCallback 004F                             ??_MTOUCH_Service_Mainloop 005B  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                         __size_of_Sensor_setInactive 0008                        Sensor_Acq_ExecutePacket@last_a 0028  
                      Sensor_Acq_ExecutePacket@last_b 002A                                       ?_TMR2_StopTimer 0070  
                       ??_Sensor_isCalibratingAcqTime 0071                                         ??_MTOUCH_Tick 0076  
                                     ??_check_message 004F                                        __size_of_fputc 0035  
                                      __size_of_fputs 0026                                        __size_of_putch 0005  
                                        ??_check_data 0071                                        _eusartRxBuffer 00A8  
                           __end_of_Sensor_setSampled 14A0                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0071                                              _LATBbits 010D  
                                            _LATCbits 010E                                         ?_DATA_PROCESS 0070  
                             _Sensor_RawSample_Update 17AD                     __end_of_Sensor_setCalibratAcqTime 1531  
                                           clear_ram0 1474                                              _PIE1bits 0091  
                                   _eusartRxLastError 00BD                              __size_of_TMR2_StartTimer 0003  
                 __size_of_INTERRUPT_InterruptManager 0012                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0073                Sensor_Acq_ExecutePacket@packet_counter 002C  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0051  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 15CD               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 15BA                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 143C            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 1438                    Sensor_Acq_ExecutePacket@ADxIF_flag 0026  
                                         _LED_PROCESS 0EC6                              _MTOUCH_Sensor_wasSampled 1513  
                                  _mtouch_time_toScan 00BC                                             _vfpfcnvrt 0652  
                            ??_Button_Baseline_Update 0071                                    __end_of_check_data 0A5D  
                             __end_of_Sensor_isActive 1505                                _Sensor_autoCalibration 0D9F  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 004F  
                              _Sensor_loadADCSettings 04F8                                  _MTOUCH_Sensor_Enable 1596  
                                         _EUSART_Read 1738                                  __end_of_update_state 0652  
                                          vfpfcnvrt@c 003D                              Button_Tick_helper@button 0073  
                           ??_Button_Deviation_Update 0071                                 _Button_Reading_Update 14DB  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                      ??_DATA_PROCESS 004F                                     ??_TMR2_Initialize 0071  
                                 __end_of_MTOUCH_Tick 1438                                     _MTOUCH_Initialize 14C3  
                     __end_of_MTOUCH_Sensor_Calibrate 1596                                    ??_Sensor_isEnabled 0071  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0076  
                                           memcpy@tmp 0076                                            vfprintf@ap 0041  
                                          vfprintf@fp 0044                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 0071                    __end_of_Button_Baseline_Initialize 0880  
                          _Button_Baseline_Initialize 0852                                   _EUSART_ErrorHandler 00CA  
                                 ??_MTOUCH_Initialize 007C                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 0036                              ?_Button_State_NotPressed 0050  
                                         check_data@x 0073                                    Button_Service@name 0057  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0071                  Sensor_Scanfrequency_Evaluation@retry 0035  
                                  ??_Sensor_setActive 0071                                  _EUSART_RxDataHandler 1624  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 15CD  
                                            __ptext11 1596                                              __ptext20 0002  
                                            __ptext12 169D                                              __ptext21 1435  
                                            __ptext13 17D5                                              __ptext30 1428  
                                            __ptext22 160E                                              __ptext14 090D  
                                            __ptext31 0B4F                                              __ptext23 175F  
                                            __ptext15 1468                                              __ptext40 04F8  
                                            __ptext32 09DB                                              __ptext24 15BA  
                                            __ptext16 1462                                              __ptext41 14B9  
                                            __ptext33 1490                                              __ptext25 14A0  
                                            __ptext17 145C                                              __ptext50 1541  
                                            __ptext42 1573                                              __ptext34 1488  
                                            __ptext26 15F8                                              __ptext18 1456  
                                            __ptext51 1531                                              __ptext43 14F7  
                                            __ptext35 0C13                                              __ptext27 0E31  
                                            __ptext19 16B9                                              __ptext60 16F3  
                                            __ptext52 0AFA                                              __ptext44 0D9F  
                                            __ptext36 0058                                              __ptext28 1498  
                                            __ptext61 1682                                              __ptext53 1513  
                                            __ptext45 163B                                              __ptext37 1432  
                                            __ptext29 17AD                                              __ptext70 0C89  
                                            __ptext62 09A5                                              __ptext54 15E2  
                                            __ptext46 14E9                                              __ptext38 142F  
                                            __ptext71 1450                                              __ptext63 1584  
                                            __ptext55 06FA                                              __ptext47 1522  
                                            __ptext39 1445                                              __ptext80 08DD  
                                            __ptext72 144A                                              __ptext64 0D10  
                                            __ptext56 079E                                              __ptext48 14B0  
                                            __ptext81 0AAA                                              __ptext73 142C  
                                            __ptext65 0852                                              __ptext57 0BAB  
                                            __ptext49 0825                                              __ptext90 093E  
                                            __ptext82 1652                                              __ptext74 1738  
                                            __ptext66 14DB                                              __ptext58 0880  
                                            __ptext91 1438                                              __ptext83 1712  
                                            __ptext75 03D4                                              __ptext67 0A5D  
                                            __ptext59 1427                                              __ptext92 1426  
                                            __ptext84 0970                                              __ptext76 05A8  
                                            __ptext68 166A                                              __ptext93 1429  
                                            __ptext85 1440                                              __ptext77 1551  
                                            __ptext69 1562                                              __ptext94 1624  
                                            __ptext86 1480                                              __ptext78 08AE  
                                            __ptext87 0F63                                              __ptext79 0652  
                                            __ptext88 0EC6                             __end_of_MTOUCH_Initialize 14CF  
                           ??_Sensor_RawSample_Update 0075                            __size_of_Sensor_setSampled 0008  
                         __size_of_EUSART_is_rx_ready 0003                                         __size_of_ctoa 0030  
                                       __size_of_main 01B2                       __end_of_MTOUCH_Sensor_SampleAll 160E  
                    Sensor_Scanfrequency_Evaluation@i 003A                               ?_EUSART_SetErrorHandler 0071  
                               __end_of_RELAY_PROCESS 1000         EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                                            int$flags 007E                                              _vfprintf 08AE  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0071  
                  __end_of_INTERRUPT_InterruptManager 0016                            _INTERRUPT_InterruptManager 0004  
                                           printf@fmt 0047                 __end_of_EUSART_SetFramingErrorHandler 1462  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 145C  
                                      RELAY_PROCESS@x 0073                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 0047  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 01A0                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 0120  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                     __end_of_MTOUCH_Button_isPressed 169D                      __end_of_Sensor_getScanGroupIndex 0852  
                                   __CFG_BOREN$NSLEEP 0000                                        __pstringtext10 1827  
                                      __pstringtext11 182C                                        __pstringtext20 1859  
                                      __pstringtext12 1831                                        __pstringtext21 1862  
                                      __pstringtext13 1836                                        __pstringtext22 0000  
                                      __pstringtext14 183B                                        __pstringtext15 1840  
                                      __pstringtext16 1845                                        __pstringtext17 184A  
                                      __pstringtext18 184F                                        __pstringtext19 1854  
                                         _MTOUCH_Tick 1435                                ?_Button_Reading_Update 0070  
                    Button_Deviation_Update@deviation 0021                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 0079                     __size_of_MTOUCH_Button_Initialize 0036  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 004F  
             __end_of_Sensor_Scanfrequency_Evaluation 0C89              __size_of_Sensor_Scanfrequency_Evaluation 0076  
                   ??_Sensor_Scanfrequency_Evaluation 002F                      ?_Sensor_Scanfrequency_Evaluation 002E  
                     _Sensor_Scanfrequency_Evaluation 0C13                               ?_PIN_MANAGER_Initialize 0070  
                                       _timeout_count 00B8                           ??_Sensor_setCalibratAcqTime 0071  
                      __end_of_EUSART_SetErrorHandler 145C                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 146E  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 1468  
                                       _config_status 0069                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 079E                                              printf@ap 004E  
                                  _EUSART_Receive_ISR 093E         EUSART_SetFramingErrorHandler@interruptHandler 0071  
                        __end_of_Sensor_Sampled_Reset 14A8                                           ??_vfpfcnvrt 0038  
                                    ??_TMR2_StopTimer 0071                       __end_of_TMR2_LoadPeriodRegister 144A  
                         __size_of_MTOUCH_Button_Tick 0016                                         __pstringtext1 1809  
                                       __pstringtext2 185E                                         __pstringtext3 1000  
                                       __pstringtext4 1800                                         __pstringtext5 180E  
                                       __pstringtext6 1813                                         __pstringtext7 1818  
                                       __pstringtext8 181D                                         __pstringtext9 1822  
                                __end_of_DATA_PROCESS 04F8                                   ?_EUSART_Receive_ISR 0070  
                               __size_of_update_state 00AA                         ??_MTOUCH_Button_InitializeAll 007B  
                            ??_Button_DefaultCallback 007C                         ??_MTOUCH_Sensor_InitializeAll 0079  
                Sensor_Acq_ExecutePacket@activeSensor 0027                      __size_of_MTOUCH_Sensor_Calibrate 0012  
                              ??_MTOUCH_Sensor_Enable 0075                     Sensor_isCalibratingAcqTime@sensor 0071  
                        __size_of_Sensor_isCalibrated 000A                              ??_Sensor_DefaultCallback 0072  
                        __end_of_Sensor_setCalibrated 14F7                  __end_of_Button_Reading_Update_Helper 0AAA  
               __size_of_Button_Reading_Update_Helper 004D                          _Button_Reading_Update_Helper 0A5D  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0050                                    EUSART_Write@txData 0071  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 16F3  
                              _Button_Baseline_Update 0D10                           MTOUCH_Button_isPressed@name 0072  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0075  
