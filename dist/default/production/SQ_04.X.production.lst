

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jul 05 13:54:31 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2,group=1
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	intentry,global,class=CODE,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	dabs	1,0x7E,2
    98  0000                     
    99                           ; Version 2.05
   100                           ; Generated 20/12/2018 GMT
   101                           ; 
   102                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   103                           ; All rights reserved.
   104                           ; 
   105                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   106                           ; 
   107                           ; Redistribution and use in source and binary forms, with or without modification, are
   108                           ; permitted provided that the following conditions are met:
   109                           ; 
   110                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   111                           ;        conditions and the following disclaimer.
   112                           ; 
   113                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   114                           ;        of conditions and the following disclaimer in the documentation and/or other
   115                           ;        materials provided with the distribution.
   116                           ; 
   117                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   118                           ;        software without specific prior written permission.
   119                           ; 
   120                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   121                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   122                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   123                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   124                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   125                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   126                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   127                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   128                           ; 
   129                           ; 
   130                           ; Code-generator required, PIC16LF1559 Definitions
   131                           ; 
   132                           ; SFR Addresses
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0099                     	;# 
   168  009A                     	;# 
   169  009B                     	;# 
   170  009B                     	;# 
   171  009C                     	;# 
   172  009D                     	;# 
   173  009E                     	;# 
   174  009F                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  0116                     	;# 
   179  0117                     	;# 
   180  011D                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  018E                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0194                     	;# 
   190  0195                     	;# 
   191  0196                     	;# 
   192  0199                     	;# 
   193  019A                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019C                     	;# 
   197  019D                     	;# 
   198  019E                     	;# 
   199  019F                     	;# 
   200  020C                     	;# 
   201  020D                     	;# 
   202  0211                     	;# 
   203  0211                     	;# 
   204  0212                     	;# 
   205  0212                     	;# 
   206  0213                     	;# 
   207  0213                     	;# 
   208  0214                     	;# 
   209  0214                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0215                     	;# 
   213  0216                     	;# 
   214  0216                     	;# 
   215  0217                     	;# 
   216  0217                     	;# 
   217  0391                     	;# 
   218  0392                     	;# 
   219  0393                     	;# 
   220  0394                     	;# 
   221  0395                     	;# 
   222  0396                     	;# 
   223  0611                     	;# 
   224  0612                     	;# 
   225  0613                     	;# 
   226  0613                     	;# 
   227  0614                     	;# 
   228  0615                     	;# 
   229  0616                     	;# 
   230  0616                     	;# 
   231  0711                     	;# 
   232  0711                     	;# 
   233  0711                     	;# 
   234  0712                     	;# 
   235  0712                     	;# 
   236  0713                     	;# 
   237  0713                     	;# 
   238  0713                     	;# 
   239  0714                     	;# 
   240  0714                     	;# 
   241  0714                     	;# 
   242  0715                     	;# 
   243  0715                     	;# 
   244  0716                     	;# 
   245  0716                     	;# 
   246  0716                     	;# 
   247  0716                     	;# 
   248  0717                     	;# 
   249  0717                     	;# 
   250  0717                     	;# 
   251  0717                     	;# 
   252  0718                     	;# 
   253  0718                     	;# 
   254  0718                     	;# 
   255  0719                     	;# 
   256  0719                     	;# 
   257  0719                     	;# 
   258  0719                     	;# 
   259  071A                     	;# 
   260  071A                     	;# 
   261  071A                     	;# 
   262  071A                     	;# 
   263  071A                     	;# 
   264  071B                     	;# 
   265  071B                     	;# 
   266  071C                     	;# 
   267  071C                     	;# 
   268  071C                     	;# 
   269  071C                     	;# 
   270  071C                     	;# 
   271  071D                     	;# 
   272  071D                     	;# 
   273  071E                     	;# 
   274  071E                     	;# 
   275  0791                     	;# 
   276  0791                     	;# 
   277  0793                     	;# 
   278  0793                     	;# 
   279  0794                     	;# 
   280  0794                     	;# 
   281  0796                     	;# 
   282  0796                     	;# 
   283  0796                     	;# 
   284  0797                     	;# 
   285  0797                     	;# 
   286  0797                     	;# 
   287  0798                     	;# 
   288  0798                     	;# 
   289  0799                     	;# 
   290  0799                     	;# 
   291  0799                     	;# 
   292  079A                     	;# 
   293  079A                     	;# 
   294  079A                     	;# 
   295  079B                     	;# 
   296  079C                     	;# 
   297  079C                     	;# 
   298  079C                     	;# 
   299  079D                     	;# 
   300  079E                     	;# 
   301  079E                     	;# 
   302  0F8C                     	;# 
   303  0F8D                     	;# 
   304  0F91                     	;# 
   305  0F96                     	;# 
   306  0F97                     	;# 
   307  0F9C                     	;# 
   308  0F9D                     	;# 
   309  0F9E                     	;# 
   310  0FE3                     	;# 
   311  0FE4                     	;# 
   312  0FE5                     	;# 
   313  0FE6                     	;# 
   314  0FE7                     	;# 
   315  0FE8                     	;# 
   316  0FE9                     	;# 
   317  0FEA                     	;# 
   318  0FEB                     	;# 
   319  0FED                     	;# 
   320  0FEE                     	;# 
   321  0FEF                     	;# 
   322  0000                     	;# 
   323  0001                     	;# 
   324  0002                     	;# 
   325  0003                     	;# 
   326  0004                     	;# 
   327  0005                     	;# 
   328  0006                     	;# 
   329  0007                     	;# 
   330  0008                     	;# 
   331  0009                     	;# 
   332  000A                     	;# 
   333  000B                     	;# 
   334  000C                     	;# 
   335  000D                     	;# 
   336  000E                     	;# 
   337  0011                     	;# 
   338  0012                     	;# 
   339  0015                     	;# 
   340  0016                     	;# 
   341  0016                     	;# 
   342  0017                     	;# 
   343  0018                     	;# 
   344  0019                     	;# 
   345  001A                     	;# 
   346  001B                     	;# 
   347  001C                     	;# 
   348  008C                     	;# 
   349  008D                     	;# 
   350  008E                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0095                     	;# 
   354  0096                     	;# 
   355  0097                     	;# 
   356  0099                     	;# 
   357  009A                     	;# 
   358  009B                     	;# 
   359  009B                     	;# 
   360  009C                     	;# 
   361  009D                     	;# 
   362  009E                     	;# 
   363  009F                     	;# 
   364  010C                     	;# 
   365  010D                     	;# 
   366  010E                     	;# 
   367  0116                     	;# 
   368  0117                     	;# 
   369  011D                     	;# 
   370  018C                     	;# 
   371  018D                     	;# 
   372  018E                     	;# 
   373  0191                     	;# 
   374  0191                     	;# 
   375  0192                     	;# 
   376  0193                     	;# 
   377  0193                     	;# 
   378  0194                     	;# 
   379  0195                     	;# 
   380  0196                     	;# 
   381  0199                     	;# 
   382  019A                     	;# 
   383  019B                     	;# 
   384  019B                     	;# 
   385  019C                     	;# 
   386  019D                     	;# 
   387  019E                     	;# 
   388  019F                     	;# 
   389  020C                     	;# 
   390  020D                     	;# 
   391  0211                     	;# 
   392  0211                     	;# 
   393  0212                     	;# 
   394  0212                     	;# 
   395  0213                     	;# 
   396  0213                     	;# 
   397  0214                     	;# 
   398  0214                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0216                     	;# 
   403  0216                     	;# 
   404  0217                     	;# 
   405  0217                     	;# 
   406  0391                     	;# 
   407  0392                     	;# 
   408  0393                     	;# 
   409  0394                     	;# 
   410  0395                     	;# 
   411  0396                     	;# 
   412  0611                     	;# 
   413  0612                     	;# 
   414  0613                     	;# 
   415  0613                     	;# 
   416  0614                     	;# 
   417  0615                     	;# 
   418  0616                     	;# 
   419  0616                     	;# 
   420  0711                     	;# 
   421  0711                     	;# 
   422  0711                     	;# 
   423  0712                     	;# 
   424  0712                     	;# 
   425  0713                     	;# 
   426  0713                     	;# 
   427  0713                     	;# 
   428  0714                     	;# 
   429  0714                     	;# 
   430  0714                     	;# 
   431  0715                     	;# 
   432  0715                     	;# 
   433  0716                     	;# 
   434  0716                     	;# 
   435  0716                     	;# 
   436  0716                     	;# 
   437  0717                     	;# 
   438  0717                     	;# 
   439  0717                     	;# 
   440  0717                     	;# 
   441  0718                     	;# 
   442  0718                     	;# 
   443  0718                     	;# 
   444  0719                     	;# 
   445  0719                     	;# 
   446  0719                     	;# 
   447  0719                     	;# 
   448  071A                     	;# 
   449  071A                     	;# 
   450  071A                     	;# 
   451  071A                     	;# 
   452  071A                     	;# 
   453  071B                     	;# 
   454  071B                     	;# 
   455  071C                     	;# 
   456  071C                     	;# 
   457  071C                     	;# 
   458  071C                     	;# 
   459  071C                     	;# 
   460  071D                     	;# 
   461  071D                     	;# 
   462  071E                     	;# 
   463  071E                     	;# 
   464  0791                     	;# 
   465  0791                     	;# 
   466  0793                     	;# 
   467  0793                     	;# 
   468  0794                     	;# 
   469  0794                     	;# 
   470  0796                     	;# 
   471  0796                     	;# 
   472  0796                     	;# 
   473  0797                     	;# 
   474  0797                     	;# 
   475  0797                     	;# 
   476  0798                     	;# 
   477  0798                     	;# 
   478  0799                     	;# 
   479  0799                     	;# 
   480  0799                     	;# 
   481  079A                     	;# 
   482  079A                     	;# 
   483  079A                     	;# 
   484  079B                     	;# 
   485  079C                     	;# 
   486  079C                     	;# 
   487  079C                     	;# 
   488  079D                     	;# 
   489  079E                     	;# 
   490  079E                     	;# 
   491  0F8C                     	;# 
   492  0F8D                     	;# 
   493  0F91                     	;# 
   494  0F96                     	;# 
   495  0F97                     	;# 
   496  0F9C                     	;# 
   497  0F9D                     	;# 
   498  0F9E                     	;# 
   499  0FE3                     	;# 
   500  0FE4                     	;# 
   501  0FE5                     	;# 
   502  0FE6                     	;# 
   503  0FE7                     	;# 
   504  0FE8                     	;# 
   505  0FE9                     	;# 
   506  0FEA                     	;# 
   507  0FEB                     	;# 
   508  0FED                     	;# 
   509  0FEE                     	;# 
   510  0FEF                     	;# 
   511  0000                     	;# 
   512  0001                     	;# 
   513  0002                     	;# 
   514  0003                     	;# 
   515  0004                     	;# 
   516  0005                     	;# 
   517  0006                     	;# 
   518  0007                     	;# 
   519  0008                     	;# 
   520  0009                     	;# 
   521  000A                     	;# 
   522  000B                     	;# 
   523  000C                     	;# 
   524  000D                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0015                     	;# 
   529  0016                     	;# 
   530  0016                     	;# 
   531  0017                     	;# 
   532  0018                     	;# 
   533  0019                     	;# 
   534  001A                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  008C                     	;# 
   538  008D                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0095                     	;# 
   543  0096                     	;# 
   544  0097                     	;# 
   545  0099                     	;# 
   546  009A                     	;# 
   547  009B                     	;# 
   548  009B                     	;# 
   549  009C                     	;# 
   550  009D                     	;# 
   551  009E                     	;# 
   552  009F                     	;# 
   553  010C                     	;# 
   554  010D                     	;# 
   555  010E                     	;# 
   556  0116                     	;# 
   557  0117                     	;# 
   558  011D                     	;# 
   559  018C                     	;# 
   560  018D                     	;# 
   561  018E                     	;# 
   562  0191                     	;# 
   563  0191                     	;# 
   564  0192                     	;# 
   565  0193                     	;# 
   566  0193                     	;# 
   567  0194                     	;# 
   568  0195                     	;# 
   569  0196                     	;# 
   570  0199                     	;# 
   571  019A                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019C                     	;# 
   575  019D                     	;# 
   576  019E                     	;# 
   577  019F                     	;# 
   578  020C                     	;# 
   579  020D                     	;# 
   580  0211                     	;# 
   581  0211                     	;# 
   582  0212                     	;# 
   583  0212                     	;# 
   584  0213                     	;# 
   585  0213                     	;# 
   586  0214                     	;# 
   587  0214                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0216                     	;# 
   592  0216                     	;# 
   593  0217                     	;# 
   594  0217                     	;# 
   595  0391                     	;# 
   596  0392                     	;# 
   597  0393                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0611                     	;# 
   602  0612                     	;# 
   603  0613                     	;# 
   604  0613                     	;# 
   605  0614                     	;# 
   606  0615                     	;# 
   607  0616                     	;# 
   608  0616                     	;# 
   609  0711                     	;# 
   610  0711                     	;# 
   611  0711                     	;# 
   612  0712                     	;# 
   613  0712                     	;# 
   614  0713                     	;# 
   615  0713                     	;# 
   616  0713                     	;# 
   617  0714                     	;# 
   618  0714                     	;# 
   619  0714                     	;# 
   620  0715                     	;# 
   621  0715                     	;# 
   622  0716                     	;# 
   623  0716                     	;# 
   624  0716                     	;# 
   625  0716                     	;# 
   626  0717                     	;# 
   627  0717                     	;# 
   628  0717                     	;# 
   629  0717                     	;# 
   630  0718                     	;# 
   631  0718                     	;# 
   632  0718                     	;# 
   633  0719                     	;# 
   634  0719                     	;# 
   635  0719                     	;# 
   636  0719                     	;# 
   637  071A                     	;# 
   638  071A                     	;# 
   639  071A                     	;# 
   640  071A                     	;# 
   641  071A                     	;# 
   642  071B                     	;# 
   643  071B                     	;# 
   644  071C                     	;# 
   645  071C                     	;# 
   646  071C                     	;# 
   647  071C                     	;# 
   648  071C                     	;# 
   649  071D                     	;# 
   650  071D                     	;# 
   651  071E                     	;# 
   652  071E                     	;# 
   653  0791                     	;# 
   654  0791                     	;# 
   655  0793                     	;# 
   656  0793                     	;# 
   657  0794                     	;# 
   658  0794                     	;# 
   659  0796                     	;# 
   660  0796                     	;# 
   661  0796                     	;# 
   662  0797                     	;# 
   663  0797                     	;# 
   664  0797                     	;# 
   665  0798                     	;# 
   666  0798                     	;# 
   667  0799                     	;# 
   668  0799                     	;# 
   669  0799                     	;# 
   670  079A                     	;# 
   671  079A                     	;# 
   672  079A                     	;# 
   673  079B                     	;# 
   674  079C                     	;# 
   675  079C                     	;# 
   676  079C                     	;# 
   677  079D                     	;# 
   678  079E                     	;# 
   679  079E                     	;# 
   680  0F8C                     	;# 
   681  0F8D                     	;# 
   682  0F91                     	;# 
   683  0F96                     	;# 
   684  0F97                     	;# 
   685  0F9C                     	;# 
   686  0F9D                     	;# 
   687  0F9E                     	;# 
   688  0FE3                     	;# 
   689  0FE4                     	;# 
   690  0FE5                     	;# 
   691  0FE6                     	;# 
   692  0FE7                     	;# 
   693  0FE8                     	;# 
   694  0FE9                     	;# 
   695  0FEA                     	;# 
   696  0FEB                     	;# 
   697  0FED                     	;# 
   698  0FEE                     	;# 
   699  0FEF                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0008                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000D                     	;# 
   714  000E                     	;# 
   715  0011                     	;# 
   716  0012                     	;# 
   717  0015                     	;# 
   718  0016                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001B                     	;# 
   725  001C                     	;# 
   726  008C                     	;# 
   727  008D                     	;# 
   728  008E                     	;# 
   729  0091                     	;# 
   730  0092                     	;# 
   731  0095                     	;# 
   732  0096                     	;# 
   733  0097                     	;# 
   734  0099                     	;# 
   735  009A                     	;# 
   736  009B                     	;# 
   737  009B                     	;# 
   738  009C                     	;# 
   739  009D                     	;# 
   740  009E                     	;# 
   741  009F                     	;# 
   742  010C                     	;# 
   743  010D                     	;# 
   744  010E                     	;# 
   745  0116                     	;# 
   746  0117                     	;# 
   747  011D                     	;# 
   748  018C                     	;# 
   749  018D                     	;# 
   750  018E                     	;# 
   751  0191                     	;# 
   752  0191                     	;# 
   753  0192                     	;# 
   754  0193                     	;# 
   755  0193                     	;# 
   756  0194                     	;# 
   757  0195                     	;# 
   758  0196                     	;# 
   759  0199                     	;# 
   760  019A                     	;# 
   761  019B                     	;# 
   762  019B                     	;# 
   763  019C                     	;# 
   764  019D                     	;# 
   765  019E                     	;# 
   766  019F                     	;# 
   767  020C                     	;# 
   768  020D                     	;# 
   769  0211                     	;# 
   770  0211                     	;# 
   771  0212                     	;# 
   772  0212                     	;# 
   773  0213                     	;# 
   774  0213                     	;# 
   775  0214                     	;# 
   776  0214                     	;# 
   777  0215                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0216                     	;# 
   781  0216                     	;# 
   782  0217                     	;# 
   783  0217                     	;# 
   784  0391                     	;# 
   785  0392                     	;# 
   786  0393                     	;# 
   787  0394                     	;# 
   788  0395                     	;# 
   789  0396                     	;# 
   790  0611                     	;# 
   791  0612                     	;# 
   792  0613                     	;# 
   793  0613                     	;# 
   794  0614                     	;# 
   795  0615                     	;# 
   796  0616                     	;# 
   797  0616                     	;# 
   798  0711                     	;# 
   799  0711                     	;# 
   800  0711                     	;# 
   801  0712                     	;# 
   802  0712                     	;# 
   803  0713                     	;# 
   804  0713                     	;# 
   805  0713                     	;# 
   806  0714                     	;# 
   807  0714                     	;# 
   808  0714                     	;# 
   809  0715                     	;# 
   810  0715                     	;# 
   811  0716                     	;# 
   812  0716                     	;# 
   813  0716                     	;# 
   814  0716                     	;# 
   815  0717                     	;# 
   816  0717                     	;# 
   817  0717                     	;# 
   818  0717                     	;# 
   819  0718                     	;# 
   820  0718                     	;# 
   821  0718                     	;# 
   822  0719                     	;# 
   823  0719                     	;# 
   824  0719                     	;# 
   825  0719                     	;# 
   826  071A                     	;# 
   827  071A                     	;# 
   828  071A                     	;# 
   829  071A                     	;# 
   830  071A                     	;# 
   831  071B                     	;# 
   832  071B                     	;# 
   833  071C                     	;# 
   834  071C                     	;# 
   835  071C                     	;# 
   836  071C                     	;# 
   837  071C                     	;# 
   838  071D                     	;# 
   839  071D                     	;# 
   840  071E                     	;# 
   841  071E                     	;# 
   842  0791                     	;# 
   843  0791                     	;# 
   844  0793                     	;# 
   845  0793                     	;# 
   846  0794                     	;# 
   847  0794                     	;# 
   848  0796                     	;# 
   849  0796                     	;# 
   850  0796                     	;# 
   851  0797                     	;# 
   852  0797                     	;# 
   853  0797                     	;# 
   854  0798                     	;# 
   855  0798                     	;# 
   856  0799                     	;# 
   857  0799                     	;# 
   858  0799                     	;# 
   859  079A                     	;# 
   860  079A                     	;# 
   861  079A                     	;# 
   862  079B                     	;# 
   863  079C                     	;# 
   864  079C                     	;# 
   865  079C                     	;# 
   866  079D                     	;# 
   867  079E                     	;# 
   868  079E                     	;# 
   869  0F8C                     	;# 
   870  0F8D                     	;# 
   871  0F91                     	;# 
   872  0F96                     	;# 
   873  0F97                     	;# 
   874  0F9C                     	;# 
   875  0F9D                     	;# 
   876  0F9E                     	;# 
   877  0FE3                     	;# 
   878  0FE4                     	;# 
   879  0FE5                     	;# 
   880  0FE6                     	;# 
   881  0FE7                     	;# 
   882  0FE8                     	;# 
   883  0FE9                     	;# 
   884  0FEA                     	;# 
   885  0FEB                     	;# 
   886  0FED                     	;# 
   887  0FEE                     	;# 
   888  0FEF                     	;# 
   889  0000                     	;# 
   890  0001                     	;# 
   891  0002                     	;# 
   892  0003                     	;# 
   893  0004                     	;# 
   894  0005                     	;# 
   895  0006                     	;# 
   896  0007                     	;# 
   897  0008                     	;# 
   898  0009                     	;# 
   899  000A                     	;# 
   900  000B                     	;# 
   901  000C                     	;# 
   902  000D                     	;# 
   903  000E                     	;# 
   904  0011                     	;# 
   905  0012                     	;# 
   906  0015                     	;# 
   907  0016                     	;# 
   908  0016                     	;# 
   909  0017                     	;# 
   910  0018                     	;# 
   911  0019                     	;# 
   912  001A                     	;# 
   913  001B                     	;# 
   914  001C                     	;# 
   915  008C                     	;# 
   916  008D                     	;# 
   917  008E                     	;# 
   918  0091                     	;# 
   919  0092                     	;# 
   920  0095                     	;# 
   921  0096                     	;# 
   922  0097                     	;# 
   923  0099                     	;# 
   924  009A                     	;# 
   925  009B                     	;# 
   926  009B                     	;# 
   927  009C                     	;# 
   928  009D                     	;# 
   929  009E                     	;# 
   930  009F                     	;# 
   931  010C                     	;# 
   932  010D                     	;# 
   933  010E                     	;# 
   934  0116                     	;# 
   935  0117                     	;# 
   936  011D                     	;# 
   937  018C                     	;# 
   938  018D                     	;# 
   939  018E                     	;# 
   940  0191                     	;# 
   941  0191                     	;# 
   942  0192                     	;# 
   943  0193                     	;# 
   944  0193                     	;# 
   945  0194                     	;# 
   946  0195                     	;# 
   947  0196                     	;# 
   948  0199                     	;# 
   949  019A                     	;# 
   950  019B                     	;# 
   951  019B                     	;# 
   952  019C                     	;# 
   953  019D                     	;# 
   954  019E                     	;# 
   955  019F                     	;# 
   956  020C                     	;# 
   957  020D                     	;# 
   958  0211                     	;# 
   959  0211                     	;# 
   960  0212                     	;# 
   961  0212                     	;# 
   962  0213                     	;# 
   963  0213                     	;# 
   964  0214                     	;# 
   965  0214                     	;# 
   966  0215                     	;# 
   967  0215                     	;# 
   968  0215                     	;# 
   969  0216                     	;# 
   970  0216                     	;# 
   971  0217                     	;# 
   972  0217                     	;# 
   973  0391                     	;# 
   974  0392                     	;# 
   975  0393                     	;# 
   976  0394                     	;# 
   977  0395                     	;# 
   978  0396                     	;# 
   979  0611                     	;# 
   980  0612                     	;# 
   981  0613                     	;# 
   982  0613                     	;# 
   983  0614                     	;# 
   984  0615                     	;# 
   985  0616                     	;# 
   986  0616                     	;# 
   987  0711                     	;# 
   988  0711                     	;# 
   989  0711                     	;# 
   990  0712                     	;# 
   991  0712                     	;# 
   992  0713                     	;# 
   993  0713                     	;# 
   994  0713                     	;# 
   995  0714                     	;# 
   996  0714                     	;# 
   997  0714                     	;# 
   998  0715                     	;# 
   999  0715                     	;# 
  1000  0716                     	;# 
  1001  0716                     	;# 
  1002  0716                     	;# 
  1003  0716                     	;# 
  1004  0717                     	;# 
  1005  0717                     	;# 
  1006  0717                     	;# 
  1007  0717                     	;# 
  1008  0718                     	;# 
  1009  0718                     	;# 
  1010  0718                     	;# 
  1011  0719                     	;# 
  1012  0719                     	;# 
  1013  0719                     	;# 
  1014  0719                     	;# 
  1015  071A                     	;# 
  1016  071A                     	;# 
  1017  071A                     	;# 
  1018  071A                     	;# 
  1019  071A                     	;# 
  1020  071B                     	;# 
  1021  071B                     	;# 
  1022  071C                     	;# 
  1023  071C                     	;# 
  1024  071C                     	;# 
  1025  071C                     	;# 
  1026  071C                     	;# 
  1027  071D                     	;# 
  1028  071D                     	;# 
  1029  071E                     	;# 
  1030  071E                     	;# 
  1031  0791                     	;# 
  1032  0791                     	;# 
  1033  0793                     	;# 
  1034  0793                     	;# 
  1035  0794                     	;# 
  1036  0794                     	;# 
  1037  0796                     	;# 
  1038  0796                     	;# 
  1039  0796                     	;# 
  1040  0797                     	;# 
  1041  0797                     	;# 
  1042  0797                     	;# 
  1043  0798                     	;# 
  1044  0798                     	;# 
  1045  0799                     	;# 
  1046  0799                     	;# 
  1047  0799                     	;# 
  1048  079A                     	;# 
  1049  079A                     	;# 
  1050  079A                     	;# 
  1051  079B                     	;# 
  1052  079C                     	;# 
  1053  079C                     	;# 
  1054  079C                     	;# 
  1055  079D                     	;# 
  1056  079E                     	;# 
  1057  079E                     	;# 
  1058  0F8C                     	;# 
  1059  0F8D                     	;# 
  1060  0F91                     	;# 
  1061  0F96                     	;# 
  1062  0F97                     	;# 
  1063  0F9C                     	;# 
  1064  0F9D                     	;# 
  1065  0F9E                     	;# 
  1066  0FE3                     	;# 
  1067  0FE4                     	;# 
  1068  0FE5                     	;# 
  1069  0FE6                     	;# 
  1070  0FE7                     	;# 
  1071  0FE8                     	;# 
  1072  0FE9                     	;# 
  1073  0FEA                     	;# 
  1074  0FEB                     	;# 
  1075  0FED                     	;# 
  1076  0FEE                     	;# 
  1077  0FEF                     	;# 
  1078  0000                     	;# 
  1079  0001                     	;# 
  1080  0002                     	;# 
  1081  0003                     	;# 
  1082  0004                     	;# 
  1083  0005                     	;# 
  1084  0006                     	;# 
  1085  0007                     	;# 
  1086  0008                     	;# 
  1087  0009                     	;# 
  1088  000A                     	;# 
  1089  000B                     	;# 
  1090  000C                     	;# 
  1091  000D                     	;# 
  1092  000E                     	;# 
  1093  0011                     	;# 
  1094  0012                     	;# 
  1095  0015                     	;# 
  1096  0016                     	;# 
  1097  0016                     	;# 
  1098  0017                     	;# 
  1099  0018                     	;# 
  1100  0019                     	;# 
  1101  001A                     	;# 
  1102  001B                     	;# 
  1103  001C                     	;# 
  1104  008C                     	;# 
  1105  008D                     	;# 
  1106  008E                     	;# 
  1107  0091                     	;# 
  1108  0092                     	;# 
  1109  0095                     	;# 
  1110  0096                     	;# 
  1111  0097                     	;# 
  1112  0099                     	;# 
  1113  009A                     	;# 
  1114  009B                     	;# 
  1115  009B                     	;# 
  1116  009C                     	;# 
  1117  009D                     	;# 
  1118  009E                     	;# 
  1119  009F                     	;# 
  1120  010C                     	;# 
  1121  010D                     	;# 
  1122  010E                     	;# 
  1123  0116                     	;# 
  1124  0117                     	;# 
  1125  011D                     	;# 
  1126  018C                     	;# 
  1127  018D                     	;# 
  1128  018E                     	;# 
  1129  0191                     	;# 
  1130  0191                     	;# 
  1131  0192                     	;# 
  1132  0193                     	;# 
  1133  0193                     	;# 
  1134  0194                     	;# 
  1135  0195                     	;# 
  1136  0196                     	;# 
  1137  0199                     	;# 
  1138  019A                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019C                     	;# 
  1142  019D                     	;# 
  1143  019E                     	;# 
  1144  019F                     	;# 
  1145  020C                     	;# 
  1146  020D                     	;# 
  1147  0211                     	;# 
  1148  0211                     	;# 
  1149  0212                     	;# 
  1150  0212                     	;# 
  1151  0213                     	;# 
  1152  0213                     	;# 
  1153  0214                     	;# 
  1154  0214                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0215                     	;# 
  1158  0216                     	;# 
  1159  0216                     	;# 
  1160  0217                     	;# 
  1161  0217                     	;# 
  1162  0391                     	;# 
  1163  0392                     	;# 
  1164  0393                     	;# 
  1165  0394                     	;# 
  1166  0395                     	;# 
  1167  0396                     	;# 
  1168  0611                     	;# 
  1169  0612                     	;# 
  1170  0613                     	;# 
  1171  0613                     	;# 
  1172  0614                     	;# 
  1173  0615                     	;# 
  1174  0616                     	;# 
  1175  0616                     	;# 
  1176  0711                     	;# 
  1177  0711                     	;# 
  1178  0711                     	;# 
  1179  0712                     	;# 
  1180  0712                     	;# 
  1181  0713                     	;# 
  1182  0713                     	;# 
  1183  0713                     	;# 
  1184  0714                     	;# 
  1185  0714                     	;# 
  1186  0714                     	;# 
  1187  0715                     	;# 
  1188  0715                     	;# 
  1189  0716                     	;# 
  1190  0716                     	;# 
  1191  0716                     	;# 
  1192  0716                     	;# 
  1193  0717                     	;# 
  1194  0717                     	;# 
  1195  0717                     	;# 
  1196  0717                     	;# 
  1197  0718                     	;# 
  1198  0718                     	;# 
  1199  0718                     	;# 
  1200  0719                     	;# 
  1201  0719                     	;# 
  1202  0719                     	;# 
  1203  0719                     	;# 
  1204  071A                     	;# 
  1205  071A                     	;# 
  1206  071A                     	;# 
  1207  071A                     	;# 
  1208  071A                     	;# 
  1209  071B                     	;# 
  1210  071B                     	;# 
  1211  071C                     	;# 
  1212  071C                     	;# 
  1213  071C                     	;# 
  1214  071C                     	;# 
  1215  071C                     	;# 
  1216  071D                     	;# 
  1217  071D                     	;# 
  1218  071E                     	;# 
  1219  071E                     	;# 
  1220  0791                     	;# 
  1221  0791                     	;# 
  1222  0793                     	;# 
  1223  0793                     	;# 
  1224  0794                     	;# 
  1225  0794                     	;# 
  1226  0796                     	;# 
  1227  0796                     	;# 
  1228  0796                     	;# 
  1229  0797                     	;# 
  1230  0797                     	;# 
  1231  0797                     	;# 
  1232  0798                     	;# 
  1233  0798                     	;# 
  1234  0799                     	;# 
  1235  0799                     	;# 
  1236  0799                     	;# 
  1237  079A                     	;# 
  1238  079A                     	;# 
  1239  079A                     	;# 
  1240  079B                     	;# 
  1241  079C                     	;# 
  1242  079C                     	;# 
  1243  079C                     	;# 
  1244  079D                     	;# 
  1245  079E                     	;# 
  1246  079E                     	;# 
  1247  0F8C                     	;# 
  1248  0F8D                     	;# 
  1249  0F91                     	;# 
  1250  0F96                     	;# 
  1251  0F97                     	;# 
  1252  0F9C                     	;# 
  1253  0F9D                     	;# 
  1254  0F9E                     	;# 
  1255  0FE3                     	;# 
  1256  0FE4                     	;# 
  1257  0FE5                     	;# 
  1258  0FE6                     	;# 
  1259  0FE7                     	;# 
  1260  0FE8                     	;# 
  1261  0FE9                     	;# 
  1262  0FEA                     	;# 
  1263  0FEB                     	;# 
  1264  0FED                     	;# 
  1265  0FEE                     	;# 
  1266  0FEF                     	;# 
  1267  0000                     	;# 
  1268  0001                     	;# 
  1269  0002                     	;# 
  1270  0003                     	;# 
  1271  0004                     	;# 
  1272  0005                     	;# 
  1273  0006                     	;# 
  1274  0007                     	;# 
  1275  0008                     	;# 
  1276  0009                     	;# 
  1277  000A                     	;# 
  1278  000B                     	;# 
  1279  000C                     	;# 
  1280  000D                     	;# 
  1281  000E                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0099                     	;# 
  1302  009A                     	;# 
  1303  009B                     	;# 
  1304  009B                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  009F                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  011D                     	;# 
  1315  018C                     	;# 
  1316  018D                     	;# 
  1317  018E                     	;# 
  1318  0191                     	;# 
  1319  0191                     	;# 
  1320  0192                     	;# 
  1321  0193                     	;# 
  1322  0193                     	;# 
  1323  0194                     	;# 
  1324  0195                     	;# 
  1325  0196                     	;# 
  1326  0199                     	;# 
  1327  019A                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019C                     	;# 
  1331  019D                     	;# 
  1332  019E                     	;# 
  1333  019F                     	;# 
  1334  020C                     	;# 
  1335  020D                     	;# 
  1336  0211                     	;# 
  1337  0211                     	;# 
  1338  0212                     	;# 
  1339  0212                     	;# 
  1340  0213                     	;# 
  1341  0213                     	;# 
  1342  0214                     	;# 
  1343  0214                     	;# 
  1344  0215                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0216                     	;# 
  1348  0216                     	;# 
  1349  0217                     	;# 
  1350  0217                     	;# 
  1351  0391                     	;# 
  1352  0392                     	;# 
  1353  0393                     	;# 
  1354  0394                     	;# 
  1355  0395                     	;# 
  1356  0396                     	;# 
  1357  0611                     	;# 
  1358  0612                     	;# 
  1359  0613                     	;# 
  1360  0613                     	;# 
  1361  0614                     	;# 
  1362  0615                     	;# 
  1363  0616                     	;# 
  1364  0616                     	;# 
  1365  0711                     	;# 
  1366  0711                     	;# 
  1367  0711                     	;# 
  1368  0712                     	;# 
  1369  0712                     	;# 
  1370  0713                     	;# 
  1371  0713                     	;# 
  1372  0713                     	;# 
  1373  0714                     	;# 
  1374  0714                     	;# 
  1375  0714                     	;# 
  1376  0715                     	;# 
  1377  0715                     	;# 
  1378  0716                     	;# 
  1379  0716                     	;# 
  1380  0716                     	;# 
  1381  0716                     	;# 
  1382  0717                     	;# 
  1383  0717                     	;# 
  1384  0717                     	;# 
  1385  0717                     	;# 
  1386  0718                     	;# 
  1387  0718                     	;# 
  1388  0718                     	;# 
  1389  0719                     	;# 
  1390  0719                     	;# 
  1391  0719                     	;# 
  1392  0719                     	;# 
  1393  071A                     	;# 
  1394  071A                     	;# 
  1395  071A                     	;# 
  1396  071A                     	;# 
  1397  071A                     	;# 
  1398  071B                     	;# 
  1399  071B                     	;# 
  1400  071C                     	;# 
  1401  071C                     	;# 
  1402  071C                     	;# 
  1403  071C                     	;# 
  1404  071C                     	;# 
  1405  071D                     	;# 
  1406  071D                     	;# 
  1407  071E                     	;# 
  1408  071E                     	;# 
  1409  0791                     	;# 
  1410  0791                     	;# 
  1411  0793                     	;# 
  1412  0793                     	;# 
  1413  0794                     	;# 
  1414  0794                     	;# 
  1415  0796                     	;# 
  1416  0796                     	;# 
  1417  0796                     	;# 
  1418  0797                     	;# 
  1419  0797                     	;# 
  1420  0797                     	;# 
  1421  0798                     	;# 
  1422  0798                     	;# 
  1423  0799                     	;# 
  1424  0799                     	;# 
  1425  0799                     	;# 
  1426  079A                     	;# 
  1427  079A                     	;# 
  1428  079A                     	;# 
  1429  079B                     	;# 
  1430  079C                     	;# 
  1431  079C                     	;# 
  1432  079C                     	;# 
  1433  079D                     	;# 
  1434  079E                     	;# 
  1435  079E                     	;# 
  1436  0F8C                     	;# 
  1437  0F8D                     	;# 
  1438  0F91                     	;# 
  1439  0F96                     	;# 
  1440  0F97                     	;# 
  1441  0F9C                     	;# 
  1442  0F9D                     	;# 
  1443  0F9E                     	;# 
  1444  0FE3                     	;# 
  1445  0FE4                     	;# 
  1446  0FE5                     	;# 
  1447  0FE6                     	;# 
  1448  0FE7                     	;# 
  1449  0FE8                     	;# 
  1450  0FE9                     	;# 
  1451  0FEA                     	;# 
  1452  0FEB                     	;# 
  1453  0FED                     	;# 
  1454  0FEE                     	;# 
  1455  0FEF                     	;# 
  1456  0000                     	;# 
  1457  0001                     	;# 
  1458  0002                     	;# 
  1459  0003                     	;# 
  1460  0004                     	;# 
  1461  0005                     	;# 
  1462  0006                     	;# 
  1463  0007                     	;# 
  1464  0008                     	;# 
  1465  0009                     	;# 
  1466  000A                     	;# 
  1467  000B                     	;# 
  1468  000C                     	;# 
  1469  000D                     	;# 
  1470  000E                     	;# 
  1471  0011                     	;# 
  1472  0012                     	;# 
  1473  0015                     	;# 
  1474  0016                     	;# 
  1475  0016                     	;# 
  1476  0017                     	;# 
  1477  0018                     	;# 
  1478  0019                     	;# 
  1479  001A                     	;# 
  1480  001B                     	;# 
  1481  001C                     	;# 
  1482  008C                     	;# 
  1483  008D                     	;# 
  1484  008E                     	;# 
  1485  0091                     	;# 
  1486  0092                     	;# 
  1487  0095                     	;# 
  1488  0096                     	;# 
  1489  0097                     	;# 
  1490  0099                     	;# 
  1491  009A                     	;# 
  1492  009B                     	;# 
  1493  009B                     	;# 
  1494  009C                     	;# 
  1495  009D                     	;# 
  1496  009E                     	;# 
  1497  009F                     	;# 
  1498  010C                     	;# 
  1499  010D                     	;# 
  1500  010E                     	;# 
  1501  0116                     	;# 
  1502  0117                     	;# 
  1503  011D                     	;# 
  1504  018C                     	;# 
  1505  018D                     	;# 
  1506  018E                     	;# 
  1507  0191                     	;# 
  1508  0191                     	;# 
  1509  0192                     	;# 
  1510  0193                     	;# 
  1511  0193                     	;# 
  1512  0194                     	;# 
  1513  0195                     	;# 
  1514  0196                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019C                     	;# 
  1520  019D                     	;# 
  1521  019E                     	;# 
  1522  019F                     	;# 
  1523  020C                     	;# 
  1524  020D                     	;# 
  1525  0211                     	;# 
  1526  0211                     	;# 
  1527  0212                     	;# 
  1528  0212                     	;# 
  1529  0213                     	;# 
  1530  0213                     	;# 
  1531  0214                     	;# 
  1532  0214                     	;# 
  1533  0215                     	;# 
  1534  0215                     	;# 
  1535  0215                     	;# 
  1536  0216                     	;# 
  1537  0216                     	;# 
  1538  0217                     	;# 
  1539  0217                     	;# 
  1540  0391                     	;# 
  1541  0392                     	;# 
  1542  0393                     	;# 
  1543  0394                     	;# 
  1544  0395                     	;# 
  1545  0396                     	;# 
  1546  0611                     	;# 
  1547  0612                     	;# 
  1548  0613                     	;# 
  1549  0613                     	;# 
  1550  0614                     	;# 
  1551  0615                     	;# 
  1552  0616                     	;# 
  1553  0616                     	;# 
  1554  0711                     	;# 
  1555  0711                     	;# 
  1556  0711                     	;# 
  1557  0712                     	;# 
  1558  0712                     	;# 
  1559  0713                     	;# 
  1560  0713                     	;# 
  1561  0713                     	;# 
  1562  0714                     	;# 
  1563  0714                     	;# 
  1564  0714                     	;# 
  1565  0715                     	;# 
  1566  0715                     	;# 
  1567  0716                     	;# 
  1568  0716                     	;# 
  1569  0716                     	;# 
  1570  0716                     	;# 
  1571  0717                     	;# 
  1572  0717                     	;# 
  1573  0717                     	;# 
  1574  0717                     	;# 
  1575  0718                     	;# 
  1576  0718                     	;# 
  1577  0718                     	;# 
  1578  0719                     	;# 
  1579  0719                     	;# 
  1580  0719                     	;# 
  1581  0719                     	;# 
  1582  071A                     	;# 
  1583  071A                     	;# 
  1584  071A                     	;# 
  1585  071A                     	;# 
  1586  071A                     	;# 
  1587  071B                     	;# 
  1588  071B                     	;# 
  1589  071C                     	;# 
  1590  071C                     	;# 
  1591  071C                     	;# 
  1592  071C                     	;# 
  1593  071C                     	;# 
  1594  071D                     	;# 
  1595  071D                     	;# 
  1596  071E                     	;# 
  1597  071E                     	;# 
  1598  0791                     	;# 
  1599  0791                     	;# 
  1600  0793                     	;# 
  1601  0793                     	;# 
  1602  0794                     	;# 
  1603  0794                     	;# 
  1604  0796                     	;# 
  1605  0796                     	;# 
  1606  0796                     	;# 
  1607  0797                     	;# 
  1608  0797                     	;# 
  1609  0797                     	;# 
  1610  0798                     	;# 
  1611  0798                     	;# 
  1612  0799                     	;# 
  1613  0799                     	;# 
  1614  0799                     	;# 
  1615  079A                     	;# 
  1616  079A                     	;# 
  1617  079A                     	;# 
  1618  079B                     	;# 
  1619  079C                     	;# 
  1620  079C                     	;# 
  1621  079C                     	;# 
  1622  079D                     	;# 
  1623  079E                     	;# 
  1624  079E                     	;# 
  1625  0F8C                     	;# 
  1626  0F8D                     	;# 
  1627  0F91                     	;# 
  1628  0F96                     	;# 
  1629  0F97                     	;# 
  1630  0F9C                     	;# 
  1631  0F9D                     	;# 
  1632  0F9E                     	;# 
  1633  0FE3                     	;# 
  1634  0FE4                     	;# 
  1635  0FE5                     	;# 
  1636  0FE6                     	;# 
  1637  0FE7                     	;# 
  1638  0FE8                     	;# 
  1639  0FE9                     	;# 
  1640  0FEA                     	;# 
  1641  0FEB                     	;# 
  1642  0FED                     	;# 
  1643  0FEE                     	;# 
  1644  0FEF                     	;# 
  1645  0000                     	;# 
  1646  0001                     	;# 
  1647  0002                     	;# 
  1648  0003                     	;# 
  1649  0004                     	;# 
  1650  0005                     	;# 
  1651  0006                     	;# 
  1652  0007                     	;# 
  1653  0008                     	;# 
  1654  0009                     	;# 
  1655  000A                     	;# 
  1656  000B                     	;# 
  1657  000C                     	;# 
  1658  000D                     	;# 
  1659  000E                     	;# 
  1660  0011                     	;# 
  1661  0012                     	;# 
  1662  0015                     	;# 
  1663  0016                     	;# 
  1664  0016                     	;# 
  1665  0017                     	;# 
  1666  0018                     	;# 
  1667  0019                     	;# 
  1668  001A                     	;# 
  1669  001B                     	;# 
  1670  001C                     	;# 
  1671  008C                     	;# 
  1672  008D                     	;# 
  1673  008E                     	;# 
  1674  0091                     	;# 
  1675  0092                     	;# 
  1676  0095                     	;# 
  1677  0096                     	;# 
  1678  0097                     	;# 
  1679  0099                     	;# 
  1680  009A                     	;# 
  1681  009B                     	;# 
  1682  009B                     	;# 
  1683  009C                     	;# 
  1684  009D                     	;# 
  1685  009E                     	;# 
  1686  009F                     	;# 
  1687  010C                     	;# 
  1688  010D                     	;# 
  1689  010E                     	;# 
  1690  0116                     	;# 
  1691  0117                     	;# 
  1692  011D                     	;# 
  1693  018C                     	;# 
  1694  018D                     	;# 
  1695  018E                     	;# 
  1696  0191                     	;# 
  1697  0191                     	;# 
  1698  0192                     	;# 
  1699  0193                     	;# 
  1700  0193                     	;# 
  1701  0194                     	;# 
  1702  0195                     	;# 
  1703  0196                     	;# 
  1704  0199                     	;# 
  1705  019A                     	;# 
  1706  019B                     	;# 
  1707  019B                     	;# 
  1708  019C                     	;# 
  1709  019D                     	;# 
  1710  019E                     	;# 
  1711  019F                     	;# 
  1712  020C                     	;# 
  1713  020D                     	;# 
  1714  0211                     	;# 
  1715  0211                     	;# 
  1716  0212                     	;# 
  1717  0212                     	;# 
  1718  0213                     	;# 
  1719  0213                     	;# 
  1720  0214                     	;# 
  1721  0214                     	;# 
  1722  0215                     	;# 
  1723  0215                     	;# 
  1724  0215                     	;# 
  1725  0216                     	;# 
  1726  0216                     	;# 
  1727  0217                     	;# 
  1728  0217                     	;# 
  1729  0391                     	;# 
  1730  0392                     	;# 
  1731  0393                     	;# 
  1732  0394                     	;# 
  1733  0395                     	;# 
  1734  0396                     	;# 
  1735  0611                     	;# 
  1736  0612                     	;# 
  1737  0613                     	;# 
  1738  0613                     	;# 
  1739  0614                     	;# 
  1740  0615                     	;# 
  1741  0616                     	;# 
  1742  0616                     	;# 
  1743  0711                     	;# 
  1744  0711                     	;# 
  1745  0711                     	;# 
  1746  0712                     	;# 
  1747  0712                     	;# 
  1748  0713                     	;# 
  1749  0713                     	;# 
  1750  0713                     	;# 
  1751  0714                     	;# 
  1752  0714                     	;# 
  1753  0714                     	;# 
  1754  0715                     	;# 
  1755  0715                     	;# 
  1756  0716                     	;# 
  1757  0716                     	;# 
  1758  0716                     	;# 
  1759  0716                     	;# 
  1760  0717                     	;# 
  1761  0717                     	;# 
  1762  0717                     	;# 
  1763  0717                     	;# 
  1764  0718                     	;# 
  1765  0718                     	;# 
  1766  0718                     	;# 
  1767  0719                     	;# 
  1768  0719                     	;# 
  1769  0719                     	;# 
  1770  0719                     	;# 
  1771  071A                     	;# 
  1772  071A                     	;# 
  1773  071A                     	;# 
  1774  071A                     	;# 
  1775  071A                     	;# 
  1776  071B                     	;# 
  1777  071B                     	;# 
  1778  071C                     	;# 
  1779  071C                     	;# 
  1780  071C                     	;# 
  1781  071C                     	;# 
  1782  071C                     	;# 
  1783  071D                     	;# 
  1784  071D                     	;# 
  1785  071E                     	;# 
  1786  071E                     	;# 
  1787  0791                     	;# 
  1788  0791                     	;# 
  1789  0793                     	;# 
  1790  0793                     	;# 
  1791  0794                     	;# 
  1792  0794                     	;# 
  1793  0796                     	;# 
  1794  0796                     	;# 
  1795  0796                     	;# 
  1796  0797                     	;# 
  1797  0797                     	;# 
  1798  0797                     	;# 
  1799  0798                     	;# 
  1800  0798                     	;# 
  1801  0799                     	;# 
  1802  0799                     	;# 
  1803  0799                     	;# 
  1804  079A                     	;# 
  1805  079A                     	;# 
  1806  079A                     	;# 
  1807  079B                     	;# 
  1808  079C                     	;# 
  1809  079C                     	;# 
  1810  079C                     	;# 
  1811  079D                     	;# 
  1812  079E                     	;# 
  1813  079E                     	;# 
  1814  0F8C                     	;# 
  1815  0F8D                     	;# 
  1816  0F91                     	;# 
  1817  0F96                     	;# 
  1818  0F97                     	;# 
  1819  0F9C                     	;# 
  1820  0F9D                     	;# 
  1821  0F9E                     	;# 
  1822  0FE3                     	;# 
  1823  0FE4                     	;# 
  1824  0FE5                     	;# 
  1825  0FE6                     	;# 
  1826  0FE7                     	;# 
  1827  0FE8                     	;# 
  1828  0FE9                     	;# 
  1829  0FEA                     	;# 
  1830  0FEB                     	;# 
  1831  0FED                     	;# 
  1832  0FEE                     	;# 
  1833  0FEF                     	;# 
  1834  0000                     	;# 
  1835  0001                     	;# 
  1836  0002                     	;# 
  1837  0003                     	;# 
  1838  0004                     	;# 
  1839  0005                     	;# 
  1840  0006                     	;# 
  1841  0007                     	;# 
  1842  0008                     	;# 
  1843  0009                     	;# 
  1844  000A                     	;# 
  1845  000B                     	;# 
  1846  000C                     	;# 
  1847  000D                     	;# 
  1848  000E                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  009F                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  020C                     	;# 
  1902  020D                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0216                     	;# 
  1915  0216                     	;# 
  1916  0217                     	;# 
  1917  0217                     	;# 
  1918  0391                     	;# 
  1919  0392                     	;# 
  1920  0393                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0611                     	;# 
  1925  0612                     	;# 
  1926  0613                     	;# 
  1927  0613                     	;# 
  1928  0614                     	;# 
  1929  0615                     	;# 
  1930  0616                     	;# 
  1931  0616                     	;# 
  1932  0711                     	;# 
  1933  0711                     	;# 
  1934  0711                     	;# 
  1935  0712                     	;# 
  1936  0712                     	;# 
  1937  0713                     	;# 
  1938  0713                     	;# 
  1939  0713                     	;# 
  1940  0714                     	;# 
  1941  0714                     	;# 
  1942  0714                     	;# 
  1943  0715                     	;# 
  1944  0715                     	;# 
  1945  0716                     	;# 
  1946  0716                     	;# 
  1947  0716                     	;# 
  1948  0716                     	;# 
  1949  0717                     	;# 
  1950  0717                     	;# 
  1951  0717                     	;# 
  1952  0717                     	;# 
  1953  0718                     	;# 
  1954  0718                     	;# 
  1955  0718                     	;# 
  1956  0719                     	;# 
  1957  0719                     	;# 
  1958  0719                     	;# 
  1959  0719                     	;# 
  1960  071A                     	;# 
  1961  071A                     	;# 
  1962  071A                     	;# 
  1963  071A                     	;# 
  1964  071A                     	;# 
  1965  071B                     	;# 
  1966  071B                     	;# 
  1967  071C                     	;# 
  1968  071C                     	;# 
  1969  071C                     	;# 
  1970  071C                     	;# 
  1971  071C                     	;# 
  1972  071D                     	;# 
  1973  071D                     	;# 
  1974  071E                     	;# 
  1975  071E                     	;# 
  1976  0791                     	;# 
  1977  0791                     	;# 
  1978  0793                     	;# 
  1979  0793                     	;# 
  1980  0794                     	;# 
  1981  0794                     	;# 
  1982  0796                     	;# 
  1983  0796                     	;# 
  1984  0796                     	;# 
  1985  0797                     	;# 
  1986  0797                     	;# 
  1987  0797                     	;# 
  1988  0798                     	;# 
  1989  0798                     	;# 
  1990  0799                     	;# 
  1991  0799                     	;# 
  1992  0799                     	;# 
  1993  079A                     	;# 
  1994  079A                     	;# 
  1995  079A                     	;# 
  1996  079B                     	;# 
  1997  079C                     	;# 
  1998  079C                     	;# 
  1999  079C                     	;# 
  2000  079D                     	;# 
  2001  079E                     	;# 
  2002  079E                     	;# 
  2003  0F8C                     	;# 
  2004  0F8D                     	;# 
  2005  0F91                     	;# 
  2006  0F96                     	;# 
  2007  0F97                     	;# 
  2008  0F9C                     	;# 
  2009  0F9D                     	;# 
  2010  0F9E                     	;# 
  2011  0FE3                     	;# 
  2012  0FE4                     	;# 
  2013  0FE5                     	;# 
  2014  0FE6                     	;# 
  2015  0FE7                     	;# 
  2016  0FE8                     	;# 
  2017  0FE9                     	;# 
  2018  0FEA                     	;# 
  2019  0FEB                     	;# 
  2020  0FED                     	;# 
  2021  0FEE                     	;# 
  2022  0FEF                     	;# 
  2023                           
  2024                           	psect	idataBANK0
  2025  0C74                     __pidataBANK0:	
  2026                           
  2027                           ;initializer for _Button_StateMachine
  2028  0C74  3467               	retlw	low _Button_State_Initializing
  2029  0C75  3406               	retlw	high _Button_State_Initializing
  2030  0C76  34B5               	retlw	low _Button_State_NotPressed
  2031  0C77  3402               	retlw	high _Button_State_NotPressed
  2032  0C78  3401               	retlw	low _Button_State_Pressed
  2033  0C79  3406               	retlw	high _Button_State_Pressed
  2034                           
  2035                           ;initializer for _callback_notPressed
  2036  0C7A  34BB               	retlw	low _Button_DefaultCallback
  2037  0C7B  340B               	retlw	high _Button_DefaultCallback
  2038                           
  2039                           ;initializer for _callback_pressed
  2040  0C7C  34BB               	retlw	low _Button_DefaultCallback
  2041  0C7D  340B               	retlw	high _Button_DefaultCallback
  2042                           
  2043                           ;initializer for _callback_sampled
  2044  0C7E  34BD               	retlw	low _Sensor_DefaultCallback
  2045  0C7F  340B               	retlw	high _Sensor_DefaultCallback
  2046                           
  2047                           ;initializer for _sample_period
  2048  0C80  34AE               	retlw	174
  2049                           
  2050                           	psect	idataBANK1
  2051  0E3A                     __pidataBANK1:	
  2052                           
  2053                           ;initializer for _mtouch_sensor
  2054  0E3A  3400               	retlw	0
  2055  0E3B  3469               	retlw	105
  2056  0E3C  3430               	retlw	48
  2057  0E3D  3410               	retlw	16
  2058  0E3E  3420               	retlw	32
  2059  0E3F  3400               	retlw	0
  2060  0E40  3400               	retlw	0
  2061  0E41  3400               	retlw	0
  2062  0E42  3400               	retlw	0
  2063  0E43  3401               	retlw	1
  2064  0E44  3431               	retlw	49
  2065  0E45  3430               	retlw	48
  2066  0E46  3410               	retlw	16
  2067  0E47  3420               	retlw	32
  2068  0E48  3400               	retlw	0
  2069  0E49  3400               	retlw	0
  2070  0E4A  3400               	retlw	0
  2071  0E4B  3400               	retlw	0
  2072  0E4C  3402               	retlw	2
  2073  0E4D  345D               	retlw	93
  2074  0E4E  3430               	retlw	48
  2075  0E4F  3410               	retlw	16
  2076  0E50  3420               	retlw	32
  2077  0E51  3400               	retlw	0
  2078  0E52  3400               	retlw	0
  2079  0E53  3400               	retlw	0
  2080  0E54  3400               	retlw	0
  2081  0E55  3403               	retlw	3
  2082  0E56  3435               	retlw	53
  2083  0E57  3430               	retlw	48
  2084  0E58  3410               	retlw	16
  2085  0E59  3420               	retlw	32
  2086  0E5A  3400               	retlw	0
  2087  0E5B  3400               	retlw	0
  2088  0E5C  3400               	retlw	0
  2089  0E5D  3400               	retlw	0
  2090                           
  2091                           	psect	stringtext1
  2092  1000                     __pstringtext1:	
  2093  1000                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2094  1000  3400               	retlw	0
  2095  1001  340D               	retlw	13
  2096  1002  341C               	retlw	28
  2097  1003  341E               	retlw	30
  2098  1004  3417               	retlw	23
  2099  1005                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2100                           
  2101                           	psect	stringtext2
  2102  1005                     __pstringtext2:	
  2103  1005                     _sensor_scan_group:	
  2104  1005  34A9               	retlw	low ((_mtouch_sensor| 0+9))
  2105  1006  34A0               	retlw	low (_mtouch_sensor| 0)
  2106  1007  34BB               	retlw	low ((_mtouch_sensor| 0+27))
  2107  1008  34B2               	retlw	low ((_mtouch_sensor| 0+18))
  2108  1009                     __end_of_sensor_scan_group:	
  2109                           
  2110                           	psect	stringtext3
  2111  07C7                     __pstringtext3:	
  2112  07C7                     _mtouch_button_init:	
  2113  07C7  3400               	retlw	0
  2114  07C8  3401               	retlw	1
  2115  07C9  3400               	retlw	0
  2116  07CA  3400               	retlw	0
  2117  07CB  3400               	retlw	0
  2118  07CC  3400               	retlw	0
  2119  07CD  3400               	retlw	0
  2120  07CE  3400               	retlw	0
  2121  07CF  3400               	retlw	0
  2122  07D0  3400               	retlw	0
  2123  07D1  3400               	retlw	0
  2124  07D2  3400               	retlw	0
  2125  07D3  3400               	retlw	0
  2126  07D4  3400               	retlw	0
  2127  07D5  3464               	retlw	100
  2128  07D6  3401               	retlw	1
  2129  07D7  3401               	retlw	1
  2130  07D8  3403               	retlw	3
  2131  07D9  3400               	retlw	0
  2132  07DA  3400               	retlw	0
  2133  07DB  3400               	retlw	0
  2134  07DC  3400               	retlw	0
  2135  07DD  3400               	retlw	0
  2136  07DE  3400               	retlw	0
  2137  07DF  3400               	retlw	0
  2138  07E0  3400               	retlw	0
  2139  07E1  3400               	retlw	0
  2140  07E2  3400               	retlw	0
  2141  07E3  3400               	retlw	0
  2142  07E4  3400               	retlw	0
  2143  07E5  3464               	retlw	100
  2144  07E6  3401               	retlw	1
  2145  07E7  3402               	retlw	2
  2146  07E8  3402               	retlw	2
  2147  07E9  3400               	retlw	0
  2148  07EA  3400               	retlw	0
  2149  07EB  3400               	retlw	0
  2150  07EC  3400               	retlw	0
  2151  07ED  3400               	retlw	0
  2152  07EE  3400               	retlw	0
  2153  07EF  3400               	retlw	0
  2154  07F0  3400               	retlw	0
  2155  07F1  3400               	retlw	0
  2156  07F2  3400               	retlw	0
  2157  07F3  3400               	retlw	0
  2158  07F4  3400               	retlw	0
  2159  07F5  3464               	retlw	100
  2160  07F6  3401               	retlw	1
  2161  07F7  3403               	retlw	3
  2162  07F8  3400               	retlw	0
  2163  07F9  3400               	retlw	0
  2164  07FA  3400               	retlw	0
  2165  07FB  3400               	retlw	0
  2166  07FC  3400               	retlw	0
  2167  07FD  3400               	retlw	0
  2168  07FE  3400               	retlw	0
  2169  07FF  3400               	retlw	0
  2170  0800  3400               	retlw	0
  2171  0801  3400               	retlw	0
  2172  0802  3400               	retlw	0
  2173  0803  3400               	retlw	0
  2174  0804  3400               	retlw	0
  2175  0805  3464               	retlw	100
  2176  0806  3401               	retlw	1
  2177  0807                     __end_of_mtouch_button_init:	
  2178                           
  2179                           	psect	nvBANK1
  2180  00C4                     __pnvBANK1:	
  2181  00C4                     _EUSART_ErrorHandler:	
  2182  00C4                     	ds	2
  2183  00C6                     _EUSART_OverrunErrorHandler:	
  2184  00C6                     	ds	2
  2185  00C8                     _EUSART_FramingErrorHandler:	
  2186  00C8                     	ds	2
  2187  00CA                     _EUSART_RxDefaultInterruptHandler:	
  2188  00CA                     	ds	2
  2189  0012                     _PIR2bits	set	18
  2190  001C                     _T2CONbits	set	28
  2191  001C                     _T2CON	set	28
  2192  001A                     _TMR2	set	26
  2193  001B                     _PR2	set	27
  2194  000B                     _INTCONbits	set	11
  2195  0011                     _PIR1bits	set	17
  2196  005F                     _GIE	set	95
  2197  0095                     _OPTION_REGbits	set	149
  2198  008E                     _TRISC	set	142
  2199  008D                     _TRISB	set	141
  2200  008C                     _TRISA	set	140
  2201  0097                     _WDTCON	set	151
  2202  0099                     _OSCCON	set	153
  2203  0091                     _PIE1bits	set	145
  2204  011D                     _APFCONbits	set	285
  2205  011D                     _APFCON	set	285
  2206  010E                     _LATC	set	270
  2207  010D                     _LATB	set	269
  2208  010C                     _LATA	set	268
  2209  0116                     _BORCON	set	278
  2210  018C                     _ANSELA	set	396
  2211  018D                     _ANSELB	set	397
  2212  018E                     _ANSELC	set	398
  2213  0199                     _RCREG	set	409
  2214  019D                     _RCSTAbits	set	413
  2215  019A                     _TXREG	set	410
  2216  019E                     _TXSTAbits	set	414
  2217  019C                     _SPBRGH	set	412
  2218  019B                     _SPBRGL	set	411
  2219  019E                     _TXSTA	set	414
  2220  019D                     _RCSTA	set	413
  2221  019F                     _BAUDCON	set	415
  2222  020C                     _WPUA	set	524
  2223  020D                     _WPUB	set	525
  2224  071A                     _AAD1RES0	set	1818
  2225  0711                     _AD1CON0bits	set	1809
  2226  0714                     _AAD1CON3	set	1812
  2227  0713                     _AD1CON2	set	1811
  2228  0717                     _AD1ACQCON	set	1815
  2229  0716                     _AD1PRECON	set	1814
  2230  0718                     _AAD1GRD	set	1816
  2231  0713                     _AAD1CON2	set	1811
  2232  0719                     _AAD1CAP	set	1817
  2233  0714                     _AD1CON3	set	1812
  2234  0712                     _ADCOMCON	set	1810
  2235  0711                     _AD1CON0	set	1809
  2236  079A                     _AAD2RES0	set	1946
  2237  0791                     _AD2CON0bits	set	1937
  2238  0797                     _AD2ACQCON	set	1943
  2239  0796                     _AD2PRECON	set	1942
  2240  0794                     _AAD2CON3	set	1940
  2241  0798                     _AAD2GRD	set	1944
  2242  0793                     _AD2CON2	set	1939
  2243  0794                     _AD2CON3	set	1940
  2244  0791                     _AD2CON0	set	1937
  2245                           
  2246                           ; #config settings
  2247  0000                     
  2248                           	psect	cinit
  2249  0018                     start_initialization:	
  2250  0018                     __initialization:	
  2251                           
  2252                           ; Initialize objects allocated to BANK0
  2253  0018  3074               	movlw	low __pidataBANK0
  2254  0019  0084               	movwf	4
  2255  001A  308C               	movlw	(high __pidataBANK0)| (0+128)
  2256  001B  0085               	movwf	5
  2257  001C  3063               	movlw	low __pdataBANK0
  2258  001D  0086               	movwf	6
  2259  001E  3000               	movlw	high __pdataBANK0
  2260  001F  0087               	movwf	7
  2261  0020  300D               	movlw	13
  2262  0021  318C  2407  3180   	fcall	init_ram
  2263                           
  2264                           ; Initialize objects allocated to BANK1
  2265  0024  303A               	movlw	low __pidataBANK1
  2266  0025  0084               	movwf	4
  2267  0026  308E               	movlw	(high __pidataBANK1)| (0+128)
  2268  0027  0085               	movwf	5
  2269  0028  30A0               	movlw	low __pdataBANK1
  2270  0029  0086               	movwf	6
  2271  002A  3000               	movlw	high __pdataBANK1
  2272  002B  0087               	movwf	7
  2273  002C  3024               	movlw	36
  2274  002D  318C  2407  3180   	fcall	init_ram
  2275                           
  2276                           ; Clear objects allocated to COMMON
  2277  0030  01FC               	clrf	__pbssCOMMON& (0+127)
  2278                           
  2279                           ; Clear objects allocated to BANK0
  2280  0031  3049               	movlw	low __pbssBANK0
  2281  0032  0084               	movwf	4
  2282  0033  3000               	movlw	high __pbssBANK0
  2283  0034  0085               	movwf	5
  2284  0035  301A               	movlw	26
  2285  0036  318C  2401  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Clear objects allocated to BANK1
  2288  0039  30CC               	movlw	low __pbssBANK1
  2289  003A  0084               	movwf	4
  2290  003B  3000               	movlw	high __pbssBANK1
  2291  003C  0085               	movwf	5
  2292  003D  3008               	movlw	8
  2293  003E  318C  2401  3180   	fcall	clear_ram0
  2294                           
  2295                           ; Clear objects allocated to BANK2
  2296  0041  3020               	movlw	low __pbssBANK2
  2297  0042  0084               	movwf	4
  2298  0043  3001               	movlw	high __pbssBANK2
  2299  0044  0085               	movwf	5
  2300  0045  3040               	movlw	64
  2301  0046  318C  2401         	fcall	clear_ram0
  2302  0048                     end_of_initialization:	
  2303                           ;End of C runtime variable initialization code
  2304                           
  2305  0048                     __end_of__initialization:	
  2306  0048  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2307  0049  0020               	movlb	0
  2308  004A  318D  2DCE         	ljmp	_main	;jump to C main() function
  2309                           
  2310                           	psect	bssCOMMON
  2311  007C                     __pbssCOMMON:	
  2312  007C                     _eusartRxHead:	
  2313  007C                     	ds	1
  2314                           
  2315                           	psect	bssBANK0
  2316  0049                     __pbssBANK0:	
  2317  0049                     _eusartRxStatusBuffer:	
  2318  0049                     	ds	8
  2319  0051                     _packet_sample:	
  2320  0051                     	ds	4
  2321  0055                     _packet_noise:	
  2322  0055                     	ds	2
  2323  0057                     _count_conf:	
  2324  0057                     	ds	2
  2325  0059                     _bt_status:	
  2326  0059                     	ds	2
  2327  005B                     _sensor_globalFlags:	
  2328  005B                     	ds	1
  2329  005C                     _lowpowerActivated:	
  2330  005C                     	ds	1
  2331  005D                     _mtouch_time_toScan:	
  2332  005D                     	ds	1
  2333  005E                     _dir_mes:	
  2334  005E                     	ds	1
  2335  005F                     _busy_flag:	
  2336  005F                     	ds	1
  2337  0060                     _eusartRxLastError:	
  2338  0060                     	ds	1
  2339  0061                     _eusartRxCount:	
  2340  0061                     	ds	1
  2341  0062                     _eusartRxTail:	
  2342  0062                     	ds	1
  2343                           
  2344                           	psect	dataBANK0
  2345  0063                     __pdataBANK0:	
  2346  0063                     _Button_StateMachine:	
  2347  0063                     	ds	6
  2348  0069                     _callback_notPressed:	
  2349  0069                     	ds	2
  2350  006B                     _callback_pressed:	
  2351  006B                     	ds	2
  2352  006D                     _callback_sampled:	
  2353  006D                     	ds	2
  2354  006F                     _sample_period:	
  2355  006F                     	ds	1
  2356                           
  2357                           	psect	bssBANK1
  2358  00CC                     __pbssBANK1:	
  2359  00CC                     _eusartRxBuffer:	
  2360  00CC                     	ds	8
  2361                           
  2362                           	psect	dataBANK1
  2363  00A0                     __pdataBANK1:	
  2364  00A0                     _mtouch_sensor:	
  2365  00A0                     	ds	36
  2366                           
  2367                           	psect	bssBANK2
  2368  0120                     __pbssBANK2:	
  2369  0120                     _mtouch_button:	
  2370  0120                     	ds	64
  2371                           
  2372                           	psect	inittext
  2373  0C07                     init_ram:	
  2374  0C07  00FE               	movwf	126
  2375  0C08                     initloop:	
  2376  0C08  0012               	moviw fsr0++
  2377  0C09  001E               	movwi fsr1++
  2378  0C0A  0BFE               	decfsz	126,f
  2379  0C0B  2C08               	goto	initloop
  2380  0C0C  3400               	retlw	0
  2381                           
  2382                           	psect	clrtext
  2383  0C01                     clear_ram0:	
  2384                           ;	Called with FSR0 containing the base address, and
  2385                           ;	WREG with the size to clear
  2386                           
  2387  0C01  0064               	clrwdt	;clear the watchdog before getting into this loop
  2388  0C02                     clrloop0:	
  2389  0C02  0180               	clrf	0	;clear RAM location pointed to by FSR
  2390  0C03  3101               	addfsr 0,1
  2391  0C04  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2392  0C05  2C02               	goto	clrloop0	;have we reached the end yet?
  2393  0C06  3400               	retlw	0	;all done for this memory range, return
  2394                           
  2395                           	psect	cstackCOMMON
  2396  0070                     __pcstackCOMMON:	
  2397  0070                     ?_EUSART_Receive_ISR:	
  2398  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ?_EUSART_DefaultErrorHandler:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?_EUSART_RxDataHandler:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ??_EUSART_RxDataHandler:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ?_PIN_MANAGER_Initialize:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ?_OSCILLATOR_Initialize:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ?_WDT_Initialize:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ?_TMR2_Initialize:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ?_MTOUCH_Initialize:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ?_MTOUCH_Service_Mainloop:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ?_MTOUCH_Button_InitializeAll:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0070                     ?_MTOUCH_Button_ServiceAll:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ?_MTOUCH_needReburst:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0070                     ?_MTOUCH_Tick:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461  0070                     ?_MTOUCH_Button_Tick:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0070                     ?_MTOUCH_Sensor_Enable:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0070                     ?_Sensor_Sampled_Reset:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0070                     ?_Sensor_Service:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     ?_Sensor_isEnabled:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0070                     ?_Sensor_RawSample_Update:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0070                     ?_Sensor_setSampled:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485  0070                     ?_Sensor_postAcquisitionProcess:	
  2486                           ; 1 bytes @ 0x0
  2487                           
  2488  0070                     ?_Sensor_isActive:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0070                     ?_Sensor_isCalibrated:	
  2492                           ; 1 bytes @ 0x0
  2493                           
  2494  0070                     ?_Sensor_setActive:	
  2495                           ; 1 bytes @ 0x0
  2496                           
  2497  0070                     ?_Sensor_setInactive:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0070                     ?_Sensor_isCalibratingAcqTime:	
  2501                           ; 1 bytes @ 0x0
  2502                           
  2503  0070                     ?_Sensor_autoCalibration:	
  2504                           ; 1 bytes @ 0x0
  2505                           
  2506  0070                     ?_Sensor_setCalibratAcqTime:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509  0070                     ?_Sensor_setCalibrated:	
  2510                           ; 1 bytes @ 0x0
  2511                           
  2512  0070                     ?_Button_Service:	
  2513                           ; 1 bytes @ 0x0
  2514                           
  2515  0070                     ?_Button_Reading_Update:	
  2516                           ; 1 bytes @ 0x0
  2517                           
  2518  0070                     ?_Button_Deviation_Update:	
  2519                           ; 1 bytes @ 0x0
  2520                           
  2521  0070                     ?_Button_Baseline_Initialize:	
  2522                           ; 1 bytes @ 0x0
  2523                           
  2524  0070                     ?_Button_Baseline_Update:	
  2525                           ; 1 bytes @ 0x0
  2526                           
  2527  0070                     ?_Button_Tick_helper:	
  2528                           ; 1 bytes @ 0x0
  2529                           
  2530  0070                     ?_Button_Reading_Update_Helper:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533  0070                     ?_EUSART_Initialize:	
  2534                           ; 1 bytes @ 0x0
  2535                           
  2536  0070                     ?_INTERRUPT_InterruptManager:	
  2537                           ; 1 bytes @ 0x0
  2538                           
  2539  0070                     ?_SYSTEM_Initialize:	
  2540                           ; 1 bytes @ 0x0
  2541                           
  2542  0070                     ?_main:	
  2543                           ; 1 bytes @ 0x0
  2544                           
  2545  0070                     ?_TMR2_StartTimer:	
  2546                           ; 1 bytes @ 0x0
  2547                           
  2548  0070                     ?_TMR2_StopTimer:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0070                     ?_TMR2_LoadPeriodRegister:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0070                     ?_MTOUCH_Sensor_Initialize:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0070                     ?_Sensor_getScanGroupIndex:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2561                           ; 1 bytes @ 0x0
  2562                           
  2563  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2564                           ; 1 bytes @ 0x0
  2565                           
  2566  0070                     ?_MTOUCH_Button_Initialize:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569                           
  2570                           ; 1 bytes @ 0x0
  2571  0070                     	ds	1
  2572  0071                     ?_EUSART_SetRxInterruptHandler:	
  2573  0071                     ??_EUSART_Receive_ISR:	
  2574                           ; 1 bytes @ 0x1
  2575                           
  2576  0071                     ?_EUSART_SetFramingErrorHandler:	
  2577                           ; 1 bytes @ 0x1
  2578                           
  2579  0071                     ?_EUSART_SetOverrunErrorHandler:	
  2580                           ; 1 bytes @ 0x1
  2581                           
  2582  0071                     ?_EUSART_SetErrorHandler:	
  2583                           ; 1 bytes @ 0x1
  2584                           
  2585  0071                     ??_EUSART_DefaultErrorHandler:	
  2586                           ; 1 bytes @ 0x1
  2587                           
  2588  0071                     ??_PIN_MANAGER_Initialize:	
  2589                           ; 1 bytes @ 0x1
  2590                           
  2591  0071                     ??_OSCILLATOR_Initialize:	
  2592                           ; 1 bytes @ 0x1
  2593                           
  2594  0071                     ??_WDT_Initialize:	
  2595                           ; 1 bytes @ 0x1
  2596                           
  2597  0071                     ??_TMR2_Initialize:	
  2598                           ; 1 bytes @ 0x1
  2599                           
  2600  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  2601                           ; 1 bytes @ 0x1
  2602                           
  2603  0071                     ?_myButtonPressedCallback:	
  2604                           ; 1 bytes @ 0x1
  2605                           
  2606  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  2607                           ; 1 bytes @ 0x1
  2608                           
  2609  0071                     ?_myButtonReleasedCallback:	
  2610                           ; 1 bytes @ 0x1
  2611                           
  2612  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2613                           ; 1 bytes @ 0x1
  2614                           
  2615  0071                     ??_MTOUCH_needReburst:	
  2616                           ; 1 bytes @ 0x1
  2617                           
  2618  0071                     ?_Sensor_DefaultCallback:	
  2619                           ; 1 bytes @ 0x1
  2620                           
  2621  0071                     ??_Sensor_Sampled_Reset:	
  2622                           ; 1 bytes @ 0x1
  2623                           
  2624  0071                     ??_Sensor_isEnabled:	
  2625                           ; 1 bytes @ 0x1
  2626                           
  2627  0071                     ??_Sensor_setSampled:	
  2628                           ; 1 bytes @ 0x1
  2629                           
  2630  0071                     ??_Sensor_isActive:	
  2631                           ; 1 bytes @ 0x1
  2632                           
  2633  0071                     ??_Sensor_isCalibrated:	
  2634                           ; 1 bytes @ 0x1
  2635                           
  2636  0071                     ??_Sensor_setActive:	
  2637                           ; 1 bytes @ 0x1
  2638                           
  2639  0071                     ??_Sensor_setInactive:	
  2640                           ; 1 bytes @ 0x1
  2641                           
  2642  0071                     ??_Sensor_isCalibratingAcqTime:	
  2643                           ; 1 bytes @ 0x1
  2644                           
  2645  0071                     ??_Sensor_setCalibratAcqTime:	
  2646                           ; 1 bytes @ 0x1
  2647                           
  2648  0071                     ??_Sensor_setCalibrated:	
  2649                           ; 1 bytes @ 0x1
  2650                           
  2651  0071                     ?_Button_DefaultCallback:	
  2652                           ; 1 bytes @ 0x1
  2653                           
  2654  0071                     ?_memcpy:	
  2655                           ; 1 bytes @ 0x1
  2656                           
  2657  0071                     ??_Button_Deviation_Update:	
  2658                           ; 1 bytes @ 0x1
  2659                           
  2660  0071                     ??_Button_Baseline_Update:	
  2661                           ; 1 bytes @ 0x1
  2662                           
  2663  0071                     ??_Button_Tick_helper:	
  2664                           ; 1 bytes @ 0x1
  2665                           
  2666  0071                     ??_INTERRUPT_InterruptManager:	
  2667                           ; 1 bytes @ 0x1
  2668                           
  2669  0071                     ??_TMR2_StartTimer:	
  2670                           ; 1 bytes @ 0x1
  2671                           
  2672  0071                     ??_TMR2_StopTimer:	
  2673                           ; 1 bytes @ 0x1
  2674                           
  2675  0071                     ??_TMR2_LoadPeriodRegister:	
  2676                           ; 1 bytes @ 0x1
  2677                           
  2678  0071                     ??_Sensor_getScanGroupIndex:	
  2679                           ; 1 bytes @ 0x1
  2680                           
  2681  0071                     ?___bmul:	
  2682                           ; 1 bytes @ 0x1
  2683                           
  2684  0071                     ?_abs:	
  2685                           ; 1 bytes @ 0x1
  2686                           
  2687  0071                     myButtonPressedCallback@button:	
  2688                           ; 2 bytes @ 0x1
  2689                           
  2690  0071                     myButtonReleasedCallback@button:	
  2691                           ; 1 bytes @ 0x1
  2692                           
  2693  0071                     TMR2_LoadPeriodRegister@periodVal:	
  2694                           ; 1 bytes @ 0x1
  2695                           
  2696  0071                     Sensor_DefaultCallback@sensor:	
  2697                           ; 1 bytes @ 0x1
  2698                           
  2699  0071                     Sensor_setActive@sensor:	
  2700                           ; 1 bytes @ 0x1
  2701                           
  2702  0071                     Sensor_setInactive@sensor:	
  2703                           ; 1 bytes @ 0x1
  2704                           
  2705  0071                     Sensor_isActive@sensor:	
  2706                           ; 1 bytes @ 0x1
  2707                           
  2708  0071                     Sensor_isCalibrated@sensor:	
  2709                           ; 1 bytes @ 0x1
  2710                           
  2711  0071                     Sensor_setCalibrated@sensor:	
  2712                           ; 1 bytes @ 0x1
  2713                           
  2714  0071                     Sensor_setCalibratAcqTime@sensor:	
  2715                           ; 1 bytes @ 0x1
  2716                           
  2717  0071                     Sensor_isCalibratingAcqTime@sensor:	
  2718                           ; 1 bytes @ 0x1
  2719                           
  2720  0071                     Sensor_Sampled_Reset@sensor:	
  2721                           ; 1 bytes @ 0x1
  2722                           
  2723  0071                     Sensor_setSampled@sensor:	
  2724                           ; 1 bytes @ 0x1
  2725                           
  2726  0071                     Button_DefaultCallback@button:	
  2727                           ; 1 bytes @ 0x1
  2728                           
  2729  0071                     ___bmul@multiplicand:	
  2730                           ; 1 bytes @ 0x1
  2731                           
  2732  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2733                           ; 1 bytes @ 0x1
  2734                           
  2735  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2736                           ; 2 bytes @ 0x1
  2737                           
  2738  0071                     EUSART_SetErrorHandler@interruptHandler:	
  2739                           ; 2 bytes @ 0x1
  2740                           
  2741  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2742                           ; 2 bytes @ 0x1
  2743                           
  2744  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  2745                           ; 2 bytes @ 0x1
  2746                           
  2747  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  2748                           ; 2 bytes @ 0x1
  2749                           
  2750  0071                     abs@a:	
  2751                           ; 2 bytes @ 0x1
  2752                           
  2753  0071                     memcpy@s1:	
  2754                           ; 2 bytes @ 0x1
  2755                           
  2756                           
  2757                           ; 2 bytes @ 0x1
  2758  0071                     	ds	1
  2759  0072                     ??_myButtonPressedCallback:	
  2760  0072                     ??_myButtonReleasedCallback:	
  2761                           ; 1 bytes @ 0x2
  2762                           
  2763  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  2764                           ; 1 bytes @ 0x2
  2765                           
  2766  0072                     ??_Sensor_DefaultCallback:	
  2767                           ; 1 bytes @ 0x2
  2768                           
  2769  0072                     ??_Button_DefaultCallback:	
  2770                           ; 1 bytes @ 0x2
  2771                           
  2772  0072                     ?_Sensor_loadADCSettings:	
  2773                           ; 1 bytes @ 0x2
  2774                           
  2775  0072                     ??___bmul:	
  2776                           ; 1 bytes @ 0x2
  2777                           
  2778  0072                     Sensor_loadADCSettings@adc_index:	
  2779                           ; 1 bytes @ 0x2
  2780                           
  2781  0072                     Sensor_isEnabled@sensor:	
  2782                           ; 1 bytes @ 0x2
  2783                           
  2784                           
  2785                           ; 1 bytes @ 0x2
  2786  0072                     	ds	1
  2787  0073                     ??_EUSART_SetRxInterruptHandler:	
  2788  0073                     ??_EUSART_SetFramingErrorHandler:	
  2789                           ; 1 bytes @ 0x3
  2790                           
  2791  0073                     ??_EUSART_SetOverrunErrorHandler:	
  2792                           ; 1 bytes @ 0x3
  2793                           
  2794  0073                     ??_EUSART_SetErrorHandler:	
  2795                           ; 1 bytes @ 0x3
  2796                           
  2797  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  2798                           ; 1 bytes @ 0x3
  2799                           
  2800  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  2801                           ; 1 bytes @ 0x3
  2802                           
  2803  0073                     ??_abs:	
  2804                           ; 1 bytes @ 0x3
  2805                           
  2806  0073                     ??_EUSART_Initialize:	
  2807                           ; 1 bytes @ 0x3
  2808                           
  2809  0073                     ??_Sensor_loadADCSettings:	
  2810                           ; 1 bytes @ 0x3
  2811                           
  2812  0073                     Sensor_getScanGroupIndex@sensor:	
  2813                           ; 1 bytes @ 0x3
  2814                           
  2815  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  2816                           ; 1 bytes @ 0x3
  2817                           
  2818  0073                     Button_Tick_helper@button:	
  2819                           ; 1 bytes @ 0x3
  2820                           
  2821  0073                     ___bmul@product:	
  2822                           ; 1 bytes @ 0x3
  2823                           
  2824  0073                     memcpy@n:	
  2825                           ; 1 bytes @ 0x3
  2826                           
  2827                           
  2828                           ; 2 bytes @ 0x3
  2829  0073                     	ds	1
  2830  0074                     ??_MTOUCH_Button_Tick:	
  2831  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  2832                           ; 1 bytes @ 0x4
  2833                           
  2834  0074                     ___bmul@multiplier:	
  2835                           ; 1 bytes @ 0x4
  2836                           
  2837                           
  2838                           ; 1 bytes @ 0x4
  2839  0074                     	ds	1
  2840  0075                     ??_MTOUCH_Sensor_Enable:	
  2841  0075                     ??_MTOUCH_Sensor_Calibrate:	
  2842                           ; 1 bytes @ 0x5
  2843                           
  2844  0075                     ??_Sensor_RawSample_Update:	
  2845                           ; 1 bytes @ 0x5
  2846                           
  2847  0075                     ??_Sensor_postAcquisitionProcess:	
  2848                           ; 1 bytes @ 0x5
  2849                           
  2850  0075                     ??_Sensor_autoCalibration:	
  2851                           ; 1 bytes @ 0x5
  2852                           
  2853  0075                     ??_memcpy:	
  2854                           ; 1 bytes @ 0x5
  2855                           
  2856  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  2857                           ; 1 bytes @ 0x5
  2858                           
  2859  0075                     ??_MTOUCH_Sensor_wasSampled:	
  2860                           ; 1 bytes @ 0x5
  2861                           
  2862  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  2863                           ; 1 bytes @ 0x5
  2864                           
  2865  0075                     MTOUCH_Button_Tick@i:	
  2866                           ; 2 bytes @ 0x5
  2867                           
  2868                           
  2869                           ; 1 bytes @ 0x5
  2870  0075                     	ds	1
  2871  0076                     ??_MTOUCH_Tick:	
  2872  0076                     Sensor_RawSample_Update@adcIndex:	
  2873                           ; 1 bytes @ 0x6
  2874                           
  2875  0076                     MTOUCH_Sensor_Enable@sensor:	
  2876                           ; 1 bytes @ 0x6
  2877                           
  2878  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  2879                           ; 1 bytes @ 0x6
  2880                           
  2881  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  2882                           ; 1 bytes @ 0x6
  2883                           
  2884  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  2885                           ; 1 bytes @ 0x6
  2886                           
  2887  0076                     memcpy@tmp:	
  2888                           ; 1 bytes @ 0x6
  2889                           
  2890  0076                     Sensor_postAcquisitionProcess@deviation:	
  2891                           ; 1 bytes @ 0x6
  2892                           
  2893  0076                     _Sensor_loadADCSettings$1086:	
  2894                           ; 2 bytes @ 0x6
  2895                           
  2896                           
  2897                           ; 2 bytes @ 0x6
  2898  0076                     	ds	1
  2899  0077                     ??_MTOUCH_Sensor_Initialize:	
  2900  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  2901                           ; 1 bytes @ 0x7
  2902                           
  2903  0077                     ??_MTOUCH_Button_Initialize:	
  2904                           ; 1 bytes @ 0x7
  2905                           
  2906  0077                     Sensor_RawSample_Update@sensor:	
  2907                           ; 1 bytes @ 0x7
  2908                           
  2909  0077                     Button_Baseline_Update@button:	
  2910                           ; 1 bytes @ 0x7
  2911                           
  2912  0077                     memcpy@s:	
  2913                           ; 1 bytes @ 0x7
  2914                           
  2915                           
  2916                           ; 2 bytes @ 0x7
  2917  0077                     	ds	1
  2918  0078                     MTOUCH_Sensor_Initialize@sensor:	
  2919  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  2920                           ; 1 bytes @ 0x8
  2921                           
  2922  0078                     Sensor_loadADCSettings@addressOffset:	
  2923                           ; 1 bytes @ 0x8
  2924                           
  2925  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  2926                           ; 1 bytes @ 0x8
  2927                           
  2928                           
  2929                           ; 1 bytes @ 0x8
  2930  0078                     	ds	1
  2931  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  2932  0079                     ??_Button_Reading_Update_Helper:	
  2933                           ; 1 bytes @ 0x9
  2934                           
  2935  0079                     Sensor_postAcquisitionProcess@sensor:	
  2936                           ; 1 bytes @ 0x9
  2937                           
  2938  0079                     Sensor_loadADCSettings@sensor:	
  2939                           ; 1 bytes @ 0x9
  2940                           
  2941  0079                     Sensor_autoCalibration@adcIndex:	
  2942                           ; 1 bytes @ 0x9
  2943                           
  2944  0079                     MTOUCH_Button_Initialize@name:	
  2945                           ; 1 bytes @ 0x9
  2946                           
  2947  0079                     Button_Baseline_Initialize@button:	
  2948                           ; 1 bytes @ 0x9
  2949                           
  2950  0079                     memcpy@d1:	
  2951                           ; 1 bytes @ 0x9
  2952                           
  2953                           
  2954                           ; 1 bytes @ 0x9
  2955  0079                     	ds	1
  2956  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  2957  007A                     Sensor_autoCalibration@sensor:	
  2958                           ; 1 bytes @ 0xA
  2959                           
  2960  007A                     MTOUCH_Button_Initialize@button:	
  2961                           ; 1 bytes @ 0xA
  2962                           
  2963  007A                     memcpy@d:	
  2964                           ; 1 bytes @ 0xA
  2965                           
  2966                           
  2967                           ; 1 bytes @ 0xA
  2968  007A                     	ds	1
  2969  007B                     ??_MTOUCH_Button_InitializeAll:	
  2970  007B                     ?_Sensor_Acq_ExecutePacket:	
  2971                           ; 1 bytes @ 0xB
  2972                           
  2973  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  2974                           ; 1 bytes @ 0xB
  2975                           
  2976  007B                     Button_Reading_Update_Helper@button:	
  2977                           ; 1 bytes @ 0xB
  2978                           
  2979                           
  2980                           ; 1 bytes @ 0xB
  2981  007B                     	ds	1
  2982  007C                     ??_MTOUCH_Initialize:	
  2983  007C                     ??_Button_Reading_Update:	
  2984                           ; 1 bytes @ 0xC
  2985                           
  2986  007C                     ??_SYSTEM_Initialize:	
  2987                           ; 1 bytes @ 0xC
  2988                           
  2989  007C                     ??_main:	
  2990                           ; 1 bytes @ 0xC
  2991                           
  2992                           
  2993                           	psect	cstackBANK0
  2994  0020                     __pcstackBANK0:	
  2995                           ; 1 bytes @ 0xC
  2996                           
  2997  0020                     ??_Sensor_Acq_ExecutePacket:	
  2998  0020                     ??_Button_Baseline_Initialize:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0020                     MTOUCH_Button_InitializeAll@button:	
  3002                           ; 1 bytes @ 0x0
  3003                           
  3004  0020                     Button_Deviation_Update@button:	
  3005                           ; 1 bytes @ 0x0
  3006                           
  3007  0020                     Button_Reading_Update@button:	
  3008                           ; 1 bytes @ 0x0
  3009                           
  3010                           
  3011                           ; 1 bytes @ 0x0
  3012  0020                     	ds	1
  3013  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3014  0021                     Button_Deviation_Update@deviation:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017                           
  3018                           ; 4 bytes @ 0x1
  3019  0021                     	ds	1
  3020  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3021                           
  3022                           ; 1 bytes @ 0x2
  3023  0022                     	ds	1
  3024  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3025                           
  3026                           ; 1 bytes @ 0x3
  3027  0023                     	ds	1
  3028  0024                     ?_Button_State_Initializing:	
  3029  0024                     ?_Button_State_NotPressed:	
  3030                           ; 1 bytes @ 0x4
  3031                           
  3032  0024                     ?_Button_State_Pressed:	
  3033                           ; 1 bytes @ 0x4
  3034                           
  3035  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3036                           ; 1 bytes @ 0x4
  3037                           
  3038  0024                     Button_State_Initializing@button:	
  3039                           ; 1 bytes @ 0x4
  3040                           
  3041  0024                     Button_State_NotPressed@button:	
  3042                           ; 1 bytes @ 0x4
  3043                           
  3044  0024                     Button_State_Pressed@button:	
  3045                           ; 1 bytes @ 0x4
  3046                           
  3047                           
  3048                           ; 1 bytes @ 0x4
  3049  0024                     	ds	1
  3050  0025                     ??_Button_State_Initializing:	
  3051  0025                     ??_Button_State_NotPressed:	
  3052                           ; 1 bytes @ 0x5
  3053                           
  3054  0025                     ??_Button_State_Pressed:	
  3055                           ; 1 bytes @ 0x5
  3056                           
  3057  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3058                           ; 1 bytes @ 0x5
  3059                           
  3060                           
  3061                           ; 1 bytes @ 0x5
  3062  0025                     	ds	1
  3063  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3064                           
  3065                           ; 1 bytes @ 0x6
  3066  0026                     	ds	1
  3067  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3068                           
  3069                           ; 1 bytes @ 0x7
  3070  0027                     	ds	1
  3071  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3072                           
  3073                           ; 2 bytes @ 0x8
  3074  0028                     	ds	1
  3075  0029                     ??_Button_Service:	
  3076                           
  3077                           ; 1 bytes @ 0x9
  3078  0029                     	ds	1
  3079  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3080                           
  3081                           ; 2 bytes @ 0xA
  3082  002A                     	ds	1
  3083  002B                     Button_Service@name:	
  3084                           
  3085                           ; 1 bytes @ 0xB
  3086  002B                     	ds	1
  3087  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3088  002C                     Button_Service@button:	
  3089                           ; 1 bytes @ 0xC
  3090                           
  3091                           
  3092                           ; 1 bytes @ 0xC
  3093  002C                     	ds	1
  3094  002D                     ??_MTOUCH_Button_ServiceAll:	
  3095  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3096                           ; 1 bytes @ 0xD
  3097                           
  3098                           
  3099                           ; 1 bytes @ 0xD
  3100  002D                     	ds	1
  3101  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3102  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3103                           ; 1 bytes @ 0xE
  3104                           
  3105  002E                     MTOUCH_Button_ServiceAll@button:	
  3106                           ; 1 bytes @ 0xE
  3107                           
  3108                           
  3109                           ; 1 bytes @ 0xE
  3110  002E                     	ds	1
  3111  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3112                           
  3113                           ; 1 bytes @ 0xF
  3114  002F                     	ds	2
  3115  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3116                           
  3117                           ; 1 bytes @ 0x11
  3118  0031                     	ds	1
  3119  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3120                           
  3121                           ; 2 bytes @ 0x12
  3122  0032                     	ds	2
  3123  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3124                           
  3125                           ; 1 bytes @ 0x14
  3126  0034                     	ds	1
  3127  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3128                           
  3129                           ; 1 bytes @ 0x15
  3130  0035                     	ds	1
  3131  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3132                           
  3133                           ; 4 bytes @ 0x16
  3134  0036                     	ds	4
  3135  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3136                           
  3137                           ; 1 bytes @ 0x1A
  3138  003A                     	ds	1
  3139  003B                     ?_Sensor_Acquisition:	
  3140  003B                     Sensor_Acquisition@sensor_adc2:	
  3141                           ; 1 bytes @ 0x1B
  3142                           
  3143                           
  3144                           ; 1 bytes @ 0x1B
  3145  003B                     	ds	1
  3146  003C                     ??_Sensor_Acquisition:	
  3147                           
  3148                           ; 1 bytes @ 0x1C
  3149  003C                     	ds	1
  3150  003D                     Sensor_Acquisition@retry:	
  3151                           
  3152                           ; 1 bytes @ 0x1D
  3153  003D                     	ds	1
  3154  003E                     Sensor_Acquisition@sensor_adc1:	
  3155                           
  3156                           ; 1 bytes @ 0x1E
  3157  003E                     	ds	1
  3158  003F                     ??_Sensor_Service:	
  3159                           
  3160                           ; 1 bytes @ 0x1F
  3161  003F                     	ds	3
  3162  0042                     Sensor_Service@scanGroup:	
  3163                           
  3164                           ; 1 bytes @ 0x22
  3165  0042                     	ds	1
  3166  0043                     Sensor_Service@error:	
  3167                           
  3168                           ; 1 bytes @ 0x23
  3169  0043                     	ds	1
  3170  0044                     Sensor_Service@sensor_adc1:	
  3171                           
  3172                           ; 1 bytes @ 0x24
  3173  0044                     	ds	1
  3174  0045                     Sensor_Service@sensor_adc2:	
  3175                           
  3176                           ; 1 bytes @ 0x25
  3177  0045                     	ds	1
  3178  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3179                           
  3180                           ; 1 bytes @ 0x26
  3181  0046                     	ds	1
  3182  0047                     MTOUCH_Sensor_SampleAll@group:	
  3183                           
  3184                           ; 1 bytes @ 0x27
  3185  0047                     	ds	1
  3186  0048                     ??_MTOUCH_Service_Mainloop:	
  3187                           
  3188                           ; 1 bytes @ 0x28
  3189  0048                     	ds	1
  3190                           
  3191                           	psect	maintext
  3192  0DCE                     __pmaintext:	
  3193 ;;
  3194 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3195 ;;
  3196 ;; *************** function _main *****************
  3197 ;; Defined at:
  3198 ;;		line 13 in file "main.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;		None
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;		None
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      void 
  3205 ;; Registers used:
  3206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3207 ;; Tracked objects:
  3208 ;;		On entry : B1F/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3212 ;;      Params:         0       0       0       0       0       0       0       0
  3213 ;;      Locals:         0       0       0       0       0       0       0       0
  3214 ;;      Temps:          0       0       0       0       0       0       0       0
  3215 ;;      Totals:         0       0       0       0       0       0       0       0
  3216 ;;Total ram usage:        0 bytes
  3217 ;; Hardware stack levels required when called:   12
  3218 ;; This function calls:
  3219 ;;		_MTOUCH_Button_SetNotPressedCallback
  3220 ;;		_MTOUCH_Button_SetPressedCallback
  3221 ;;		_MTOUCH_Service_Mainloop
  3222 ;;		_SYSTEM_Initialize
  3223 ;; This function is called by:
  3224 ;;		Startup code after reset
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           
  3229                           ;psect for function _main
  3230  0DCE                     _main:	
  3231                           
  3232                           ;main.c: 15:     SYSTEM_Initialize();
  3233                           
  3234                           ;incstack = 0
  3235                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3236  0DCE  318D  250E  318D   	fcall	_SYSTEM_Initialize
  3237                           
  3238                           ;main.c: 16:     (INTCONbits.GIE = 1);
  3239  0DD1  178B               	bsf	11,7	;volatile
  3240                           
  3241                           ;main.c: 17:     (INTCONbits.PEIE = 1);
  3242  0DD2  170B               	bsf	11,6	;volatile
  3243                           
  3244                           ;main.c: 18:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3245  0DD3  30BC               	movlw	low _myButtonPressedCallback
  3246  0DD4  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3247  0DD5  300B               	movlw	high _myButtonPressedCallback
  3248  0DD6  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3249  0DD7  318B  23DD  318D   	fcall	_MTOUCH_Button_SetPressedCallback
  3250                           
  3251                           ;main.c: 19:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3252  0DDA  30BA               	movlw	low _myButtonReleasedCallback
  3253  0DDB  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3254  0DDC  300B               	movlw	high _myButtonReleasedCallback
  3255  0DDD  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3256  0DDE  318B  23D7  318D   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3257  0DE1                     l235:	
  3258                           ;main.c: 20:     while (1)
  3259                           
  3260                           
  3261                           ;main.c: 21:     {;main.c: 22:         if(MTOUCH_Service_Mainloop())
  3262  0DE1  318D  25E5  318D   	fcall	_MTOUCH_Service_Mainloop
  3263  0DE4  2DE1               	goto	l235
  3264  0DE5                     __end_of_main:	
  3265                           
  3266                           	psect	text1
  3267  0D0E                     __ptext1:	
  3268 ;; *************** function _SYSTEM_Initialize *****************
  3269 ;; Defined at:
  3270 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3284 ;;      Params:         0       0       0       0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0       0
  3287 ;;      Totals:         0       0       0       0       0       0       0       0
  3288 ;;Total ram usage:        0 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    9
  3291 ;; This function calls:
  3292 ;;		_EUSART_Initialize
  3293 ;;		_MTOUCH_Initialize
  3294 ;;		_OSCILLATOR_Initialize
  3295 ;;		_PIN_MANAGER_Initialize
  3296 ;;		_TMR2_Initialize
  3297 ;;		_WDT_Initialize
  3298 ;; This function is called by:
  3299 ;;		_main
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           
  3304                           ;psect for function _SYSTEM_Initialize
  3305  0D0E                     _SYSTEM_Initialize:	
  3306                           
  3307                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3308                           
  3309                           ;incstack = 0
  3310                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3311  0D0E  318E  261D  318D   	fcall	_PIN_MANAGER_Initialize
  3312                           
  3313                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3314  0D11  318B  23FB  318D   	fcall	_OSCILLATOR_Initialize
  3315                           
  3316                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3317  0D14  318B  23CE  318D   	fcall	_WDT_Initialize
  3318                           
  3319                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  3320  0D17  318C  2431  318D   	fcall	_TMR2_Initialize
  3321                           
  3322                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  3323  0D1A  318F  2731  318D   	fcall	_EUSART_Initialize
  3324                           
  3325                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  3326  0D1D  318C  244E         	fcall	_MTOUCH_Initialize
  3327  0D1F  0008               	return
  3328  0D20                     __end_of_SYSTEM_Initialize:	
  3329                           
  3330                           	psect	text2
  3331  0BCE                     __ptext2:	
  3332 ;; *************** function _WDT_Initialize *****************
  3333 ;; Defined at:
  3334 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;		None
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;		None
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  1    wreg      void 
  3341 ;; Registers used:
  3342 ;;		wreg
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3348 ;;      Params:         0       0       0       0       0       0       0       0
  3349 ;;      Locals:         0       0       0       0       0       0       0       0
  3350 ;;      Temps:          0       0       0       0       0       0       0       0
  3351 ;;      Totals:         0       0       0       0       0       0       0       0
  3352 ;;Total ram usage:        0 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    4
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_SYSTEM_Initialize
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           
  3363                           ;psect for function _WDT_Initialize
  3364  0BCE                     _WDT_Initialize:	
  3365                           
  3366                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  3367                           
  3368                           ;incstack = 0
  3369                           ; Regs used in _WDT_Initialize: [wreg]
  3370  0BCE  3016               	movlw	22
  3371  0BCF  0021               	movlb	1	; select bank1
  3372  0BD0  0097               	movwf	23	;volatile
  3373  0BD1  0008               	return
  3374  0BD2                     __end_of_WDT_Initialize:	
  3375                           
  3376                           	psect	text3
  3377  0C31                     __ptext3:	
  3378 ;; *************** function _TMR2_Initialize *****************
  3379 ;; Defined at:
  3380 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3394 ;;      Params:         0       0       0       0       0       0       0       0
  3395 ;;      Locals:         0       0       0       0       0       0       0       0
  3396 ;;      Temps:          0       0       0       0       0       0       0       0
  3397 ;;      Totals:         0       0       0       0       0       0       0       0
  3398 ;;Total ram usage:        0 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    4
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		_SYSTEM_Initialize
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           
  3409                           ;psect for function _TMR2_Initialize
  3410  0C31                     _TMR2_Initialize:	
  3411                           
  3412                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  3413                           
  3414                           ;incstack = 0
  3415                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  3416  0C31  30FF               	movlw	255
  3417  0C32  0020               	movlb	0	; select bank0
  3418  0C33  009B               	movwf	27	;volatile
  3419                           
  3420                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  3421  0C34  019A               	clrf	26	;volatile
  3422                           
  3423                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  3424  0C35  1091               	bcf	17,1	;volatile
  3425                           
  3426                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  3427  0C36  3004               	movlw	4
  3428  0C37  009C               	movwf	28	;volatile
  3429  0C38  0008               	return
  3430  0C39                     __end_of_TMR2_Initialize:	
  3431                           
  3432                           	psect	text4
  3433  0E1D                     __ptext4:	
  3434 ;; *************** function _PIN_MANAGER_Initialize *****************
  3435 ;; Defined at:
  3436 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3450 ;;      Params:         0       0       0       0       0       0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0       0
  3453 ;;      Totals:         0       0       0       0       0       0       0       0
  3454 ;;Total ram usage:        0 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    4
  3457 ;; This function calls:
  3458 ;;		Nothing
  3459 ;; This function is called by:
  3460 ;;		_SYSTEM_Initialize
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           
  3465                           ;psect for function _PIN_MANAGER_Initialize
  3466  0E1D                     _PIN_MANAGER_Initialize:	
  3467                           
  3468                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  3469                           
  3470                           ;incstack = 0
  3471                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3472  0E1D  3037               	movlw	55
  3473  0E1E  0022               	movlb	2	; select bank2
  3474  0E1F  008C               	movwf	12	;volatile
  3475                           
  3476                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0xC0;
  3477  0E20  30C0               	movlw	192
  3478  0E21  008D               	movwf	13	;volatile
  3479                           
  3480                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xBF;
  3481  0E22  30BF               	movlw	191
  3482  0E23  008E               	movwf	14	;volatile
  3483                           
  3484                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3F;
  3485  0E24  303F               	movlw	63
  3486  0E25  0021               	movlb	1	; select bank1
  3487  0E26  008C               	movwf	12	;volatile
  3488                           
  3489                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  3490  0E27  3060               	movlw	96
  3491  0E28  008D               	movwf	13	;volatile
  3492                           
  3493                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xE8;
  3494  0E29  30E8               	movlw	232
  3495  0E2A  008E               	movwf	14	;volatile
  3496                           
  3497                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE8;
  3498  0E2B  30E8               	movlw	232
  3499  0E2C  0023               	movlb	3	; select bank3
  3500  0E2D  008E               	movwf	14	;volatile
  3501                           
  3502                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  3503  0E2E  3040               	movlw	64
  3504  0E2F  008D               	movwf	13	;volatile
  3505                           
  3506                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  3507  0E30  3037               	movlw	55
  3508  0E31  008C               	movwf	12	;volatile
  3509                           
  3510                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  3511  0E32  0024               	movlb	4	; select bank4
  3512  0E33  018D               	clrf	13	;volatile
  3513                           
  3514                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  3515  0E34  018C               	clrf	12	;volatile
  3516                           
  3517                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  3518  0E35  0021               	movlb	1	; select bank1
  3519  0E36  1795               	bsf	21,7	;volatile
  3520                           
  3521                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  3522  0E37  0022               	movlb	2	; select bank2
  3523  0E38  019D               	clrf	29	;volatile
  3524  0E39  0008               	return
  3525  0E3A                     __end_of_PIN_MANAGER_Initialize:	
  3526                           
  3527                           	psect	text5
  3528  0BFB                     __ptext5:	
  3529 ;; *************** function _OSCILLATOR_Initialize *****************
  3530 ;; Defined at:
  3531 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;		None
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;		None
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      void 
  3538 ;; Registers used:
  3539 ;;		wreg, status,2
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3545 ;;      Params:         0       0       0       0       0       0       0       0
  3546 ;;      Locals:         0       0       0       0       0       0       0       0
  3547 ;;      Temps:          0       0       0       0       0       0       0       0
  3548 ;;      Totals:         0       0       0       0       0       0       0       0
  3549 ;;Total ram usage:        0 bytes
  3550 ;; Hardware stack levels used:    1
  3551 ;; Hardware stack levels required when called:    4
  3552 ;; This function calls:
  3553 ;;		Nothing
  3554 ;; This function is called by:
  3555 ;;		_SYSTEM_Initialize
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           
  3560                           ;psect for function _OSCILLATOR_Initialize
  3561  0BFB                     _OSCILLATOR_Initialize:	
  3562                           
  3563                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  3564                           
  3565                           ;incstack = 0
  3566                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3567  0BFB  30F0               	movlw	240
  3568  0BFC  0021               	movlb	1	; select bank1
  3569  0BFD  0099               	movwf	25	;volatile
  3570                           
  3571                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  3572  0BFE  0022               	movlb	2	; select bank2
  3573  0BFF  0196               	clrf	22	;volatile
  3574  0C00  0008               	return
  3575  0C01                     __end_of_OSCILLATOR_Initialize:	
  3576                           
  3577                           	psect	text6
  3578  0C4E                     __ptext6:	
  3579 ;; *************** function _MTOUCH_Initialize *****************
  3580 ;; Defined at:
  3581 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;		None
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;		None
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  1    wreg      void 
  3588 ;; Registers used:
  3589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3595 ;;      Params:         0       0       0       0       0       0       0       0
  3596 ;;      Locals:         0       0       0       0       0       0       0       0
  3597 ;;      Temps:          0       0       0       0       0       0       0       0
  3598 ;;      Totals:         0       0       0       0       0       0       0       0
  3599 ;;Total ram usage:        0 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; Hardware stack levels required when called:    8
  3602 ;; This function calls:
  3603 ;;		_MTOUCH_Button_InitializeAll
  3604 ;;		_MTOUCH_Sensor_InitializeAll
  3605 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  3606 ;;		_MTOUCH_Sensor_Scan_Initialize
  3607 ;; This function is called by:
  3608 ;;		_SYSTEM_Initialize
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           
  3613                           ;psect for function _MTOUCH_Initialize
  3614  0C4E                     _MTOUCH_Initialize:	
  3615                           
  3616                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  3617                           
  3618                           ;incstack = 0
  3619                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3620  0C4E  318C  249D  318C   	fcall	_MTOUCH_Sensor_InitializeAll
  3621                           
  3622                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  3623  0C51  318E  2601  318C   	fcall	_MTOUCH_Button_InitializeAll
  3624                           
  3625                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  3626  0C54  318D  2520  318C   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  3627                           
  3628                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  3629  0C57  318C  24BB         	fcall	_MTOUCH_Sensor_Scan_Initialize
  3630  0C59  0008               	return
  3631  0C5A                     __end_of_MTOUCH_Initialize:	
  3632                           
  3633                           	psect	text7
  3634  0C9D                     __ptext7:	
  3635 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  3636 ;; Defined at:
  3637 ;;		line 231 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  sensor          1   10[COMMON] enum E2854
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3651 ;;      Params:         0       0       0       0       0       0       0       0
  3652 ;;      Locals:         1       0       0       0       0       0       0       0
  3653 ;;      Temps:          1       0       0       0       0       0       0       0
  3654 ;;      Totals:         2       0       0       0       0       0       0       0
  3655 ;;Total ram usage:        2 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    7
  3658 ;; This function calls:
  3659 ;;		_MTOUCH_Sensor_Initialize
  3660 ;; This function is called by:
  3661 ;;		_MTOUCH_Initialize
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           
  3666                           ;psect for function _MTOUCH_Sensor_InitializeAll
  3667  0C9D                     _MTOUCH_Sensor_InitializeAll:	
  3668                           
  3669                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 233:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 235:     for (sensor = 0; sensor < 4u; sensor
      +                          ++)
  3670                           
  3671                           ;incstack = 0
  3672                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3673  0C9D  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  3674  0C9E                     l4231:	
  3675                           
  3676                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 236:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 237:         MTOUCH_Sensor_Initialize(sensor);
  3677  0C9E  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  3678  0C9F  318D  2548  318C   	fcall	_MTOUCH_Sensor_Initialize
  3679                           
  3680                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 238:     }
  3681  0CA2  3001               	movlw	1
  3682  0CA3  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  3683  0CA4  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  3684  0CA5  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  3685  0CA6  3004               	movlw	4
  3686  0CA7  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  3687  0CA8  1803               	btfsc	3,0
  3688  0CA9  0008               	return
  3689  0CAA  2C9E               	goto	l4231
  3690  0CAB                     __end_of_MTOUCH_Sensor_InitializeAll:	
  3691                           
  3692                           	psect	text8
  3693  0D48                     __ptext8:	
  3694 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  3695 ;; Defined at:
  3696 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  sensor          1    wreg     enum E2854
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;  sensor          1    8[COMMON] enum E2854
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  1    wreg      enum E2859
  3703 ;; Registers used:
  3704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3710 ;;      Params:         0       0       0       0       0       0       0       0
  3711 ;;      Locals:         1       0       0       0       0       0       0       0
  3712 ;;      Temps:          1       0       0       0       0       0       0       0
  3713 ;;      Totals:         2       0       0       0       0       0       0       0
  3714 ;;Total ram usage:        2 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    6
  3717 ;; This function calls:
  3718 ;;		_MTOUCH_Sensor_Calibrate
  3719 ;;		_MTOUCH_Sensor_Enable
  3720 ;;		_Sensor_Sampled_Reset
  3721 ;;		___bmul
  3722 ;; This function is called by:
  3723 ;;		_MTOUCH_Sensor_InitializeAll
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           
  3728                           ;psect for function _MTOUCH_Sensor_Initialize
  3729  0D48                     _MTOUCH_Sensor_Initialize:	
  3730                           
  3731                           ;incstack = 0
  3732                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  3733                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  3734  0D48  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  3735                           
  3736                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 216: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           217: {;mcc_generated_files/mtouch/mtouch_sensor.c: 219:     MTOUCH_Sensor_Enable(sensor
      +                          );
  3737  0D49  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3738  0D4A  318C  24FD  318D   	fcall	_MTOUCH_Sensor_Enable
  3739                           
  3740                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 220:     MTOUCH_Sensor_Calibrate(sensor);
  3741  0D4D  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3742  0D4E  318C  24EC  318D   	fcall	_MTOUCH_Sensor_Calibrate
  3743                           
  3744                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 221:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  3745  0D51  3009               	movlw	9
  3746  0D52  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  3747  0D53  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  3748  0D54  00F1               	movwf	___bmul@multiplicand
  3749  0D55  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3750  0D56  318C  24DB  318D   	fcall	___bmul
  3751  0D59  3EA0               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  3752  0D5A  318C  2422         	fcall	_Sensor_Sampled_Reset
  3753  0D5C  0008               	return
  3754  0D5D                     __end_of_MTOUCH_Sensor_Initialize:	
  3755                           
  3756                           	psect	text9
  3757  0CFD                     __ptext9:	
  3758 ;; *************** function _MTOUCH_Sensor_Enable *****************
  3759 ;; Defined at:
  3760 ;;		line 849 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;  sensor          1    wreg     enum E2854
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  sensor          1    6[COMMON] enum E2854
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3774 ;;      Params:         0       0       0       0       0       0       0       0
  3775 ;;      Locals:         1       0       0       0       0       0       0       0
  3776 ;;      Temps:          1       0       0       0       0       0       0       0
  3777 ;;      Totals:         2       0       0       0       0       0       0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    5
  3781 ;; This function calls:
  3782 ;;		___bmul
  3783 ;; This function is called by:
  3784 ;;		_MTOUCH_Sensor_Initialize
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           
  3789                           ;psect for function _MTOUCH_Sensor_Enable
  3790  0CFD                     _MTOUCH_Sensor_Enable:	
  3791                           
  3792                           ;incstack = 0
  3793                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3794                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  3795  0CFD  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  3796                           
  3797                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 849: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 850: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 851:     if(sensor < 4u)
  3798  0CFE  3004               	movlw	4
  3799  0CFF  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  3800  0D00  1803               	skipnc
  3801  0D01  0008               	return
  3802                           
  3803                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 852:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  3804  0D02  3009               	movlw	9
  3805  0D03  00F5               	movwf	??_MTOUCH_Sensor_Enable
  3806  0D04  0875               	movf	??_MTOUCH_Sensor_Enable,w
  3807  0D05  00F1               	movwf	___bmul@multiplicand
  3808  0D06  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  3809  0D07  318C  24DB         	fcall	___bmul
  3810  0D09  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  3811  0D0A  0086               	movwf	6
  3812  0D0B  0187               	clrf	7
  3813  0D0C  1581               	bsf	1,3
  3814  0D0D  0008               	return
  3815  0D0E                     __end_of_MTOUCH_Sensor_Enable:	
  3816                           
  3817                           	psect	text10
  3818  0E01                     __ptext10:	
  3819 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  3820 ;; Defined at:
  3821 ;;		line 179 in file "mcc_generated_files/mtouch/mtouch_button.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;  button          1    0[BANK0 ] enum E3070
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      void 
  3828 ;; Registers used:
  3829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3835 ;;      Params:         0       0       0       0       0       0       0       0
  3836 ;;      Locals:         0       1       0       0       0       0       0       0
  3837 ;;      Temps:          1       0       0       0       0       0       0       0
  3838 ;;      Totals:         1       1       0       0       0       0       0       0
  3839 ;;Total ram usage:        2 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    7
  3842 ;; This function calls:
  3843 ;;		_MTOUCH_Button_Initialize
  3844 ;;		_memcpy
  3845 ;; This function is called by:
  3846 ;;		_MTOUCH_Initialize
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           
  3851                           ;psect for function _MTOUCH_Button_InitializeAll
  3852  0E01                     _MTOUCH_Button_InitializeAll:	
  3853                           
  3854                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 183:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  3855                           
  3856                           ;incstack = 0
  3857                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3858  0E01  30C7               	movlw	low (_mtouch_button_init| (0+32768))
  3859  0E02  00F1               	movwf	memcpy@s1
  3860  0E03  3087               	movlw	high (_mtouch_button_init| (0+32768))
  3861  0E04  00F2               	movwf	memcpy@s1+1
  3862  0E05  3040               	movlw	64
  3863  0E06  00F3               	movwf	memcpy@n
  3864  0E07  3000               	movlw	0
  3865  0E08  00F4               	movwf	memcpy@n+1
  3866  0E09  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  3867  0E0A  318E  26AB  318E   	fcall	_memcpy
  3868                           
  3869                           ;mcc_generated_files/mtouch/mtouch_button.c: 185:     for (button = 0; button < 4u; butt
      +                          on++)
  3870  0E0D  0020               	movlb	0	; select bank0
  3871  0E0E  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  3872  0E0F                     l4245:	
  3873                           
  3874                           ;mcc_generated_files/mtouch/mtouch_button.c: 186:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 187:         MTOUCH_Button_Initialize(button);
  3875  0E0F  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  3876  0E10  318F  2793  318E   	fcall	_MTOUCH_Button_Initialize
  3877                           
  3878                           ;mcc_generated_files/mtouch/mtouch_button.c: 188:     }
  3879  0E13  3001               	movlw	1
  3880  0E14  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  3881  0E15  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  3882  0E16  0020               	movlb	0	; select bank0
  3883  0E17  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  3884  0E18  3004               	movlw	4
  3885  0E19  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  3886  0E1A  1803               	btfsc	3,0
  3887  0E1B  0008               	return
  3888  0E1C  2E0F               	goto	l4245
  3889  0E1D                     __end_of_MTOUCH_Button_InitializeAll:	
  3890                           
  3891                           	psect	text11
  3892  0EAB                     __ptext11:	
  3893 ;; *************** function _memcpy *****************
  3894 ;; Defined at:
  3895 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;  d1              1    wreg     PTR void 
  3898 ;;		 -> mtouch_button(64), 
  3899 ;;  s1              2    1[COMMON] PTR const void 
  3900 ;;		 -> mtouch_button_init(64), 
  3901 ;;  n               2    3[COMMON] unsigned int 
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;  d1              1    9[COMMON] PTR void 
  3904 ;;		 -> mtouch_button(64), 
  3905 ;;  s               2    7[COMMON] PTR const unsigned char 
  3906 ;;		 -> mtouch_button_init(64), 
  3907 ;;  d               1   10[COMMON] PTR unsigned char 
  3908 ;;		 -> mtouch_button(64), 
  3909 ;;  tmp             1    6[COMMON] unsigned char 
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      PTR void 
  3912 ;; Registers used:
  3913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3919 ;;      Params:         4       0       0       0       0       0       0       0
  3920 ;;      Locals:         5       0       0       0       0       0       0       0
  3921 ;;      Temps:          1       0       0       0       0       0       0       0
  3922 ;;      Totals:        10       0       0       0       0       0       0       0
  3923 ;;Total ram usage:       10 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    4
  3926 ;; This function calls:
  3927 ;;		Nothing
  3928 ;; This function is called by:
  3929 ;;		_MTOUCH_Button_InitializeAll
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           
  3934                           ;psect for function _memcpy
  3935  0EAB                     _memcpy:	
  3936                           
  3937                           ;incstack = 0
  3938                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3939                           ;memcpy@d1 stored from wreg
  3940  0EAB  00F9               	movwf	memcpy@d1
  3941  0EAC  0872               	movf	memcpy@s1+1,w
  3942  0EAD  00F8               	movwf	memcpy@s+1
  3943  0EAE  0871               	movf	memcpy@s1,w
  3944  0EAF  00F7               	movwf	memcpy@s
  3945  0EB0  0879               	movf	memcpy@d1,w
  3946  0EB1  00F5               	movwf	??_memcpy
  3947  0EB2  0875               	movf	??_memcpy,w
  3948  0EB3  00FA               	movwf	memcpy@d
  3949  0EB4                     l4171:	
  3950  0EB4  3001               	movlw	1
  3951  0EB5  02F3               	subwf	memcpy@n,f
  3952  0EB6  3000               	movlw	0
  3953  0EB7  3BF4               	subwfb	memcpy@n+1,f
  3954  0EB8  0A73               	incf	memcpy@n,w
  3955  0EB9  1903               	btfsc	3,2
  3956  0EBA  0A74               	incf	memcpy@n+1,w
  3957  0EBB  1903               	btfsc	3,2
  3958  0EBC  0008               	return
  3959  0EBD  0877               	movf	memcpy@s,w
  3960  0EBE  0084               	movwf	4
  3961  0EBF  0878               	movf	memcpy@s+1,w
  3962  0EC0  0085               	movwf	5
  3963  0EC1  0800               	movf	0,w	;code access
  3964  0EC2  00F5               	movwf	??_memcpy
  3965  0EC3  0875               	movf	??_memcpy,w
  3966  0EC4  00F6               	movwf	memcpy@tmp
  3967  0EC5  3001               	movlw	1
  3968  0EC6  07F7               	addwf	memcpy@s,f
  3969  0EC7  3000               	movlw	0
  3970  0EC8  3DF8               	addwfc	memcpy@s+1,f
  3971  0EC9  0876               	movf	memcpy@tmp,w
  3972  0ECA  00F5               	movwf	??_memcpy
  3973  0ECB  087A               	movf	memcpy@d,w
  3974  0ECC  0086               	movwf	6
  3975  0ECD  3001               	movlw	1	; select bank2/3
  3976  0ECE  0087               	movwf	7
  3977  0ECF  0875               	movf	??_memcpy,w
  3978  0ED0  0081               	movwf	1
  3979  0ED1  3001               	movlw	1
  3980  0ED2  00F5               	movwf	??_memcpy
  3981  0ED3  0875               	movf	??_memcpy,w
  3982  0ED4  07FA               	addwf	memcpy@d,f
  3983  0ED5  2EB4               	goto	l4171
  3984  0ED6                     __end_of_memcpy:	
  3985                           
  3986                           	psect	text12
  3987  0F31                     __ptext12:	
  3988 ;; *************** function _EUSART_Initialize *****************
  3989 ;; Defined at:
  3990 ;;		line 81 in file "mcc_generated_files/eusart.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2, status,0, pclath, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4004 ;;      Params:         0       0       0       0       0       0       0       0
  4005 ;;      Locals:         0       0       0       0       0       0       0       0
  4006 ;;      Temps:          0       0       0       0       0       0       0       0
  4007 ;;      Totals:         0       0       0       0       0       0       0       0
  4008 ;;Total ram usage:        0 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    5
  4011 ;; This function calls:
  4012 ;;		_EUSART_SetErrorHandler
  4013 ;;		_EUSART_SetFramingErrorHandler
  4014 ;;		_EUSART_SetOverrunErrorHandler
  4015 ;;		_EUSART_SetRxInterruptHandler
  4016 ;; This function is called by:
  4017 ;;		_SYSTEM_Initialize
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _EUSART_Initialize
  4023  0F31                     _EUSART_Initialize:	
  4024                           
  4025                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4029  0F31  0021               	movlb	1	; select bank1
  4030  0F32  1291               	bcf	17,5	;volatile
  4031                           
  4032                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  4033  0F33  3061               	movlw	low _EUSART_Receive_ISR
  4034  0F34  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  4035  0F35  300F               	movlw	high _EUSART_Receive_ISR
  4036  0F36  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  4037  0F37  318B  23F5  318F   	fcall	_EUSART_SetRxInterruptHandler
  4038                           
  4039                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  4040  0F3A  3008               	movlw	8
  4041  0F3B  0023               	movlb	3	; select bank3
  4042  0F3C  009F               	movwf	31	;volatile
  4043                           
  4044                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  4045  0F3D  3090               	movlw	144
  4046  0F3E  009D               	movwf	29	;volatile
  4047                           
  4048                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  4049  0F3F  3024               	movlw	36
  4050  0F40  009E               	movwf	30	;volatile
  4051                           
  4052                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  4053  0F41  3040               	movlw	64
  4054  0F42  009B               	movwf	27	;volatile
  4055                           
  4056                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  4057  0F43  3003               	movlw	3
  4058  0F44  009C               	movwf	28	;volatile
  4059                           
  4060                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  4061  0F45  30B9               	movlw	low _EUSART_DefaultFramingErrorHandler
  4062  0F46  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  4063  0F47  300B               	movlw	high _EUSART_DefaultFramingErrorHandler
  4064  0F48  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  4065  0F49  318B  23E9  318F   	fcall	_EUSART_SetFramingErrorHandler
  4066                           
  4067                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  4068  0F4C  30CA               	movlw	low _EUSART_DefaultOverrunErrorHandler
  4069  0F4D  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  4070  0F4E  300B               	movlw	high _EUSART_DefaultOverrunErrorHandler
  4071  0F4F  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  4072  0F50  318B  23EF  318F   	fcall	_EUSART_SetOverrunErrorHandler
  4073                           
  4074                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  4075  0F53  30BE               	movlw	low _EUSART_DefaultErrorHandler
  4076  0F54  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  4077  0F55  300B               	movlw	high _EUSART_DefaultErrorHandler
  4078  0F56  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  4079  0F57  318B  23E3         	fcall	_EUSART_SetErrorHandler
  4080                           
  4081                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  4082  0F59  0020               	movlb	0	; select bank0
  4083  0F5A  01E0               	clrf	_eusartRxLastError	;volatile
  4084                           
  4085                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  4086  0F5B  01FC               	clrf	_eusartRxHead	;volatile
  4087                           
  4088                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  4089  0F5C  01E2               	clrf	_eusartRxTail	;volatile
  4090                           
  4091                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  4092  0F5D  01E1               	clrf	_eusartRxCount	;volatile
  4093                           
  4094                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  4095  0F5E  0021               	movlb	1	; select bank1
  4096  0F5F  1691               	bsf	17,5	;volatile
  4097  0F60  0008               	return
  4098  0F61                     __end_of_EUSART_Initialize:	
  4099                           
  4100                           	psect	text13
  4101  0BF5                     __ptext13:	
  4102 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  4103 ;; Defined at:
  4104 ;;		line 241 in file "mcc_generated_files/eusart.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4107 ;;		 -> EUSART_Receive_ISR(1), 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4119 ;;      Params:         2       0       0       0       0       0       0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0       0
  4122 ;;      Totals:         2       0       0       0       0       0       0       0
  4123 ;;Total ram usage:        2 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    4
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_EUSART_Initialize
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           
  4134                           ;psect for function _EUSART_SetRxInterruptHandler
  4135  0BF5                     _EUSART_SetRxInterruptHandler:	
  4136                           
  4137                           ;mcc_generated_files/eusart.c: 242:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4141  0BF5  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4142  0BF6  0021               	movlb	1	; select bank1
  4143  0BF7  00CB               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  4144  0BF8  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4145  0BF9  00CA               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  4146  0BFA  0008               	return
  4147  0BFB                     __end_of_EUSART_SetRxInterruptHandler:	
  4148                           
  4149                           	psect	text14
  4150  0BEF                     __ptext14:	
  4151 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  4152 ;; Defined at:
  4153 ;;		line 232 in file "mcc_generated_files/eusart.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4156 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4168 ;;      Params:         2       0       0       0       0       0       0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0       0
  4171 ;;      Totals:         2       0       0       0       0       0       0       0
  4172 ;;Total ram usage:        2 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    4
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_EUSART_Initialize
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _EUSART_SetOverrunErrorHandler
  4184  0BEF                     _EUSART_SetOverrunErrorHandler:	
  4185                           
  4186                           ;mcc_generated_files/eusart.c: 233:     EUSART_OverrunErrorHandler = interruptHandler;
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  4190  0BEF  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  4191  0BF0  0021               	movlb	1	; select bank1
  4192  0BF1  00C7               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  4193  0BF2  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  4194  0BF3  00C6               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  4195  0BF4  0008               	return
  4196  0BF5                     __end_of_EUSART_SetOverrunErrorHandler:	
  4197                           
  4198                           	psect	text15
  4199  0BE9                     __ptext15:	
  4200 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  4201 ;; Defined at:
  4202 ;;		line 228 in file "mcc_generated_files/eusart.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4205 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      void 
  4210 ;; Registers used:
  4211 ;;		wreg
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4217 ;;      Params:         2       0       0       0       0       0       0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0
  4220 ;;      Totals:         2       0       0       0       0       0       0       0
  4221 ;;Total ram usage:        2 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    4
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_EUSART_Initialize
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _EUSART_SetFramingErrorHandler
  4233  0BE9                     _EUSART_SetFramingErrorHandler:	
  4234                           
  4235                           ;mcc_generated_files/eusart.c: 229:     EUSART_FramingErrorHandler = interruptHandler;
  4236                           
  4237                           ;incstack = 0
  4238                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  4239  0BE9  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  4240  0BEA  0021               	movlb	1	; select bank1
  4241  0BEB  00C9               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  4242  0BEC  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  4243  0BED  00C8               	movwf	_EUSART_FramingErrorHandler^(0+128)
  4244  0BEE  0008               	return
  4245  0BEF                     __end_of_EUSART_SetFramingErrorHandler:	
  4246                           
  4247                           	psect	text16
  4248  0BE3                     __ptext16:	
  4249 ;; *************** function _EUSART_SetErrorHandler *****************
  4250 ;; Defined at:
  4251 ;;		line 236 in file "mcc_generated_files/eusart.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4254 ;;		 -> EUSART_DefaultErrorHandler(1), 
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;		None
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  1    wreg      void 
  4259 ;; Registers used:
  4260 ;;		wreg
  4261 ;; Tracked objects:
  4262 ;;		On entry : 0/0
  4263 ;;		On exit  : 0/0
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4266 ;;      Params:         2       0       0       0       0       0       0       0
  4267 ;;      Locals:         0       0       0       0       0       0       0       0
  4268 ;;      Temps:          0       0       0       0       0       0       0       0
  4269 ;;      Totals:         2       0       0       0       0       0       0       0
  4270 ;;Total ram usage:        2 bytes
  4271 ;; Hardware stack levels used:    1
  4272 ;; Hardware stack levels required when called:    4
  4273 ;; This function calls:
  4274 ;;		Nothing
  4275 ;; This function is called by:
  4276 ;;		_EUSART_Initialize
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           
  4281                           ;psect for function _EUSART_SetErrorHandler
  4282  0BE3                     _EUSART_SetErrorHandler:	
  4283                           
  4284                           ;mcc_generated_files/eusart.c: 237:     EUSART_ErrorHandler = interruptHandler;
  4285                           
  4286                           ;incstack = 0
  4287                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  4288  0BE3  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  4289  0BE4  0021               	movlb	1	; select bank1
  4290  0BE5  00C5               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  4291  0BE6  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  4292  0BE7  00C4               	movwf	_EUSART_ErrorHandler^(0+128)
  4293  0BE8  0008               	return
  4294  0BE9                     __end_of_EUSART_SetErrorHandler:	
  4295                           
  4296                           	psect	text17
  4297  0DE5                     __ptext17:	
  4298 ;; *************** function _MTOUCH_Service_Mainloop *****************
  4299 ;; Defined at:
  4300 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;		None
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;		None
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  1    wreg      _Bool 
  4307 ;; Registers used:
  4308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4314 ;;      Params:         0       0       0       0       0       0       0       0
  4315 ;;      Locals:         0       0       0       0       0       0       0       0
  4316 ;;      Temps:          0       1       0       0       0       0       0       0
  4317 ;;      Totals:         0       1       0       0       0       0       0       0
  4318 ;;Total ram usage:        1 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:   11
  4321 ;; This function calls:
  4322 ;;		_MTOUCH_Button_ServiceAll
  4323 ;;		_MTOUCH_Sensor_SampleAll
  4324 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4325 ;;		_MTOUCH_Tick
  4326 ;;		_MTOUCH_needReburst
  4327 ;; This function is called by:
  4328 ;;		_main
  4329 ;;		_touch_example
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           
  4334                           ;psect for function _MTOUCH_Service_Mainloop
  4335  0DE5                     _MTOUCH_Service_Mainloop:	
  4336                           
  4337                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  4338                           
  4339                           ;incstack = 0
  4340                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4341  0DE5  0020               	movlb	0	; select bank0
  4342  0DE6  01DD               	clrf	_mtouch_time_toScan
  4343  0DE7  0ADD               	incf	_mtouch_time_toScan,f
  4344                           
  4345                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  4346                           
  4347                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  4348  0DE8  318D  255D  318D   	fcall	_MTOUCH_Sensor_SampleAll
  4349  0DEB  3A00               	xorlw	0
  4350  0DEC  1D03               	skipz
  4351  0DED  2DF0               	goto	l4359
  4352                           
  4353                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  4354  0DEE  3000               	movlw	0
  4355  0DEF  0008               	return
  4356  0DF0                     l4359:	
  4357                           
  4358                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  4359  0DF0  318C  24AB  318D   	fcall	_MTOUCH_Button_ServiceAll
  4360                           
  4361                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  4362  0DF3  3180  2002  318D   	fcall	_MTOUCH_needReburst
  4363  0DF6  0020               	movlb	0	; select bank0
  4364  0DF7  00C8               	movwf	??_MTOUCH_Service_Mainloop
  4365  0DF8  0848               	movf	??_MTOUCH_Service_Mainloop,w
  4366  0DF9  00DD               	movwf	_mtouch_time_toScan
  4367                           
  4368                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  4369  0DFA  318D  2520  318D   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4370                           
  4371                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  4372  0DFD  318B  23C7         	fcall	_MTOUCH_Tick
  4373                           
  4374                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  4375  0DFF  3001               	movlw	1
  4376  0E00  0008               	return
  4377  0E01                     __end_of_MTOUCH_Service_Mainloop:	
  4378                           
  4379                           	psect	text18
  4380  0002                     __ptext18:	
  4381 ;; *************** function _MTOUCH_needReburst *****************
  4382 ;; Defined at:
  4383 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;		None
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;  needReburst     1    0        _Bool 
  4388 ;; Return value:  Size  Location     Type
  4389 ;;                  1    wreg      _Bool 
  4390 ;; Registers used:
  4391 ;;		wreg, status,2
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4397 ;;      Params:         0       0       0       0       0       0       0       0
  4398 ;;      Locals:         1       0       0       0       0       0       0       0
  4399 ;;      Temps:          0       0       0       0       0       0       0       0
  4400 ;;      Totals:         1       0       0       0       0       0       0       0
  4401 ;;Total ram usage:        1 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:    4
  4404 ;; This function calls:
  4405 ;;		Nothing
  4406 ;; This function is called by:
  4407 ;;		_MTOUCH_Service_Mainloop
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function _MTOUCH_needReburst
  4413  0002                     _MTOUCH_needReburst:	
  4414                           
  4415                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  4416                           
  4417                           ;incstack = 0
  4418                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  4419  0002  3000               	movlw	0
  4420  0003  0008               	return
  4421  0004                     __end_of_MTOUCH_needReburst:	
  4422                           
  4423                           	psect	text19
  4424  0BC7                     __ptext19:	
  4425 ;; *************** function _MTOUCH_Tick *****************
  4426 ;; Defined at:
  4427 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;		None
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;		None
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      void 
  4434 ;; Registers used:
  4435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4441 ;;      Params:         0       0       0       0       0       0       0       0
  4442 ;;      Locals:         0       0       0       0       0       0       0       0
  4443 ;;      Temps:          0       0       0       0       0       0       0       0
  4444 ;;      Totals:         0       0       0       0       0       0       0       0
  4445 ;;Total ram usage:        0 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    6
  4448 ;; This function calls:
  4449 ;;		_MTOUCH_Button_Tick
  4450 ;; This function is called by:
  4451 ;;		_MTOUCH_Service_Mainloop
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function _MTOUCH_Tick
  4457  0BC7                     _MTOUCH_Tick:	
  4458                           
  4459                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  4460                           
  4461                           ;incstack = 0
  4462                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4463  0BC7  318D  2573         	fcall	_MTOUCH_Button_Tick
  4464  0BC9  0008               	return
  4465  0BCA                     __end_of_MTOUCH_Tick:	
  4466                           
  4467                           	psect	text20
  4468  0D73                     __ptext20:	
  4469 ;; *************** function _MTOUCH_Button_Tick *****************
  4470 ;; Defined at:
  4471 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;		None
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  i               1    5[COMMON] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  1    wreg      void 
  4478 ;; Registers used:
  4479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4485 ;;      Params:         0       0       0       0       0       0       0       0
  4486 ;;      Locals:         1       0       0       0       0       0       0       0
  4487 ;;      Temps:          1       0       0       0       0       0       0       0
  4488 ;;      Totals:         2       0       0       0       0       0       0       0
  4489 ;;Total ram usage:        2 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    5
  4492 ;; This function calls:
  4493 ;;		_Button_Tick_helper
  4494 ;; This function is called by:
  4495 ;;		_MTOUCH_Tick
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           
  4500                           ;psect for function _MTOUCH_Button_Tick
  4501  0D73                     _MTOUCH_Button_Tick:	
  4502                           
  4503                           ;mcc_generated_files/mtouch/mtouch_button.c: 307:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 308:     for (i = 0; i < 4u; i++)
  4504                           
  4505                           ;incstack = 0
  4506                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4507  0D73  01F5               	clrf	MTOUCH_Button_Tick@i
  4508  0D74                     l3365:	
  4509                           
  4510                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         Button_Tick_helper(&mtouch_button[i]);
  4511  0D74  0875               	movf	MTOUCH_Button_Tick@i,w
  4512  0D75  00F4               	movwf	??_MTOUCH_Button_Tick
  4513  0D76  3003               	movlw	3
  4514  0D77                     u2675:	
  4515  0D77  35F4               	lslf	??_MTOUCH_Button_Tick,f
  4516  0D78  3EFF               	addlw	-1
  4517  0D79  1D03               	skipz
  4518  0D7A  2D77               	goto	u2675
  4519  0D7B  3574               	lslf	??_MTOUCH_Button_Tick,w
  4520  0D7C  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  4521  0D7D  318E  2684  318D   	fcall	_Button_Tick_helper
  4522                           
  4523                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:     }
  4524  0D80  3001               	movlw	1
  4525  0D81  00F4               	movwf	??_MTOUCH_Button_Tick
  4526  0D82  0874               	movf	??_MTOUCH_Button_Tick,w
  4527  0D83  07F5               	addwf	MTOUCH_Button_Tick@i,f
  4528  0D84  3004               	movlw	4
  4529  0D85  0275               	subwf	MTOUCH_Button_Tick@i,w
  4530  0D86  1803               	btfsc	3,0
  4531  0D87  0008               	return
  4532  0D88  2D74               	goto	l3365
  4533  0D89                     __end_of_MTOUCH_Button_Tick:	
  4534                           
  4535                           	psect	text21
  4536  0E84                     __ptext21:	
  4537 ;; *************** function _Button_Tick_helper *****************
  4538 ;; Defined at:
  4539 ;;		line 313 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  button          1    wreg     PTR struct .
  4542 ;;		 -> mtouch_button(64), 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  button          1    3[COMMON] PTR struct .
  4545 ;;		 -> mtouch_button(64), 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4555 ;;      Params:         0       0       0       0       0       0       0       0
  4556 ;;      Locals:         1       0       0       0       0       0       0       0
  4557 ;;      Temps:          2       0       0       0       0       0       0       0
  4558 ;;      Totals:         3       0       0       0       0       0       0       0
  4559 ;;Total ram usage:        3 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    4
  4562 ;; This function calls:
  4563 ;;		Nothing
  4564 ;; This function is called by:
  4565 ;;		_MTOUCH_Button_Tick
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           
  4570                           ;psect for function _Button_Tick_helper
  4571  0E84                     _Button_Tick_helper:	
  4572                           
  4573                           ;incstack = 0
  4574                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  4575                           ;Button_Tick_helper@button stored from wreg
  4576  0E84  00F3               	movwf	Button_Tick_helper@button
  4577                           
  4578                           ;mcc_generated_files/mtouch/mtouch_button.c: 313: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 314: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 316:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  4579  0E85  0873               	movf	Button_Tick_helper@button,w
  4580  0E86  3E02               	addlw	2
  4581  0E87  0086               	movwf	6
  4582  0E88  3001               	movlw	1	; select bank2/3
  4583  0E89  0087               	movwf	7
  4584  0E8A  3002               	movlw	2
  4585  0E8B  0601               	xorwf	1,w
  4586  0E8C  1D03               	btfss	3,2
  4587  0E8D  0008               	return
  4588                           
  4589                           ;mcc_generated_files/mtouch/mtouch_button.c: 317:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 318:         (button->counter)++;
  4590  0E8E  0873               	movf	Button_Tick_helper@button,w
  4591  0E8F  3E0A               	addlw	10
  4592  0E90  0086               	movwf	6
  4593  0E91  3001               	movlw	1	; select bank2/3
  4594  0E92  0087               	movwf	7
  4595  0E93  3001               	movlw	1
  4596  0E94  0781               	addwf	1,f
  4597  0E95  3141               	addfsr 1,1
  4598  0E96  1803               	skipnc
  4599  0E97  0A81               	incf	1,f
  4600                           
  4601                           ;mcc_generated_files/mtouch/mtouch_button.c: 319:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  4602  0E98  0873               	movf	Button_Tick_helper@button,w
  4603  0E99  3E0A               	addlw	10
  4604  0E9A  0086               	movwf	6
  4605  0E9B  3001               	movlw	1	; select bank2/3
  4606  0E9C  0087               	movwf	7
  4607  0E9D  0016               	moviw fsr1++
  4608  0E9E  0401               	iorwf	1,w
  4609  0E9F  1D03               	btfss	3,2
  4610  0EA0  0008               	return
  4611                           
  4612                           ;mcc_generated_files/mtouch/mtouch_button.c: 320:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 321:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  4613  0EA1  0873               	movf	Button_Tick_helper@button,w
  4614  0EA2  3E0A               	addlw	10
  4615  0EA3  0086               	movwf	6
  4616  0EA4  3001               	movlw	1	; select bank2/3
  4617  0EA5  0087               	movwf	7
  4618  0EA6  30FF               	movlw	255
  4619  0EA7  3FC0               	movwi [0]fsr1
  4620  0EA8  30FF               	movlw	255
  4621  0EA9  3FC1               	movwi [1]fsr1
  4622  0EAA  0008               	return
  4623  0EAB                     __end_of_Button_Tick_helper:	
  4624                           
  4625                           	psect	text22
  4626  0D20                     __ptext22:	
  4627 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  4628 ;; Defined at:
  4629 ;;		line 958 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;		None
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  sensor          1    3[COMMON] PTR struct .
  4634 ;;		 -> mtouch_sensor(36), 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4644 ;;      Params:         0       0       0       0       0       0       0       0
  4645 ;;      Locals:         1       0       0       0       0       0       0       0
  4646 ;;      Temps:          1       0       0       0       0       0       0       0
  4647 ;;      Totals:         2       0       0       0       0       0       0       0
  4648 ;;Total ram usage:        2 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    5
  4651 ;; This function calls:
  4652 ;;		_Sensor_Sampled_Reset
  4653 ;; This function is called by:
  4654 ;;		_MTOUCH_Initialize
  4655 ;;		_MTOUCH_Service_Mainloop
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           
  4660                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  4661  0D20                     _MTOUCH_Sensor_Sampled_ResetAll:	
  4662                           
  4663                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 960:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 961:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[4u -1];sensor++)
  4664                           
  4665                           ;incstack = 0
  4666                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  4667  0D20  30A0               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  4668  0D21  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4669  0D22  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4670  0D23  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  4671  0D24                     L1:	
  4672  0D24  30BB               	movlw	(low ((_mtouch_sensor| 0+27)))& (0+255)
  4673  0D25  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4674  0D26  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4675  0D27  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4676  0D28  1C03               	btfss	3,0
  4677  0D29  0008               	return
  4678                           
  4679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 962:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 963:         Sensor_Sampled_Reset(sensor);
  4680  0D2A  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4681  0D2B  318C  2422  318D   	fcall	_Sensor_Sampled_Reset
  4682                           
  4683                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964:     }
  4684  0D2E  3009               	movlw	9
  4685  0D2F  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4686  0D30  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4687  0D31  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  4688  0D32  2D24               	goto	L1
  4689  0D33                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  4690                           
  4691                           	psect	text23
  4692  0C22                     __ptext23:	
  4693 ;; *************** function _Sensor_Sampled_Reset *****************
  4694 ;; Defined at:
  4695 ;;		line 972 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  sensor          1    wreg     PTR struct .
  4698 ;;		 -> mtouch_sensor(36), 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  sensor          1    1[COMMON] PTR struct .
  4701 ;;		 -> mtouch_sensor(36), 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  1    wreg      void 
  4704 ;; Registers used:
  4705 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4711 ;;      Params:         0       0       0       0       0       0       0       0
  4712 ;;      Locals:         1       0       0       0       0       0       0       0
  4713 ;;      Temps:          0       0       0       0       0       0       0       0
  4714 ;;      Totals:         1       0       0       0       0       0       0       0
  4715 ;;Total ram usage:        1 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    4
  4718 ;; This function calls:
  4719 ;;		Nothing
  4720 ;; This function is called by:
  4721 ;;		_MTOUCH_Sensor_Initialize
  4722 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           
  4727                           ;psect for function _Sensor_Sampled_Reset
  4728  0C22                     _Sensor_Sampled_Reset:	
  4729                           
  4730                           ;incstack = 0
  4731                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4732                           ;Sensor_Sampled_Reset@sensor stored from wreg
  4733  0C22  00F1               	movwf	Sensor_Sampled_Reset@sensor
  4734                           
  4735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 972: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          973: {;mcc_generated_files/mtouch/mtouch_sensor.c: 974:     sensor->sampled = 0;
  4736  0C23  0871               	movf	Sensor_Sampled_Reset@sensor,w
  4737  0C24  3E08               	addlw	8
  4738  0C25  0086               	movwf	6
  4739  0C26  0187               	clrf	7
  4740  0C27  1001               	bcf	1,0
  4741  0C28  0008               	return
  4742  0C29                     __end_of_Sensor_Sampled_Reset:	
  4743                           
  4744                           	psect	text24
  4745  0D5D                     __ptext24:	
  4746 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  4747 ;; Defined at:
  4748 ;;		line 266 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;		None
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;  group           1   39[BANK0 ] unsigned char 
  4753 ;; Return value:  Size  Location     Type
  4754 ;;                  1    wreg      _Bool 
  4755 ;; Registers used:
  4756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4762 ;;      Params:         0       0       0       0       0       0       0       0
  4763 ;;      Locals:         0       1       0       0       0       0       0       0
  4764 ;;      Temps:          0       1       0       0       0       0       0       0
  4765 ;;      Totals:         0       2       0       0       0       0       0       0
  4766 ;;Total ram usage:        2 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:   10
  4769 ;; This function calls:
  4770 ;;		_Sensor_Service
  4771 ;; This function is called by:
  4772 ;;		_MTOUCH_Service_Mainloop
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function _MTOUCH_Sensor_SampleAll
  4778  0D5D                     _MTOUCH_Sensor_SampleAll:	
  4779                           
  4780                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 268:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 269:     for (group = 0; group < 2u; group++)
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4784  0D5D  0020               	movlb	0	; select bank0
  4785  0D5E  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  4786  0D5F                     l4319:	
  4787                           
  4788                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 270:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 271:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  4789  0D5F  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  4790  0D60  3183  2358  318D   	fcall	_Sensor_Service
  4791  0D63  3A00               	xorlw	0
  4792  0D64  1903               	skipnz
  4793  0D65  2D68               	goto	l4325
  4794                           
  4795                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 272:             return 0;
  4796  0D66  3000               	movlw	0
  4797  0D67  0008               	return
  4798  0D68                     l4325:	
  4799                           
  4800                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 273:     }
  4801  0D68  3001               	movlw	1
  4802  0D69  0020               	movlb	0	; select bank0
  4803  0D6A  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  4804  0D6B  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  4805  0D6C  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  4806  0D6D  3002               	movlw	2
  4807  0D6E  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  4808  0D6F  1C03               	skipc
  4809  0D70  2D5F               	goto	l4319
  4810                           
  4811                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 274:     return 1;
  4812  0D71  3001               	movlw	1
  4813  0D72  0008               	return
  4814  0D73                     __end_of_MTOUCH_Sensor_SampleAll:	
  4815                           
  4816                           	psect	text25
  4817  0358                     __ptext25:	
  4818 ;; *************** function _Sensor_Service *****************
  4819 ;; Defined at:
  4820 ;;		line 311 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  scanGroup       1    wreg     unsigned char 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  4825 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  4826 ;;		 -> mtouch_sensor(36), 
  4827 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  4828 ;;		 -> mtouch_sensor(36), 
  4829 ;;  error           1   35[BANK0 ] enum E2859
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      enum E2859
  4832 ;; Registers used:
  4833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4839 ;;      Params:         0       0       0       0       0       0       0       0
  4840 ;;      Locals:         0       4       0       0       0       0       0       0
  4841 ;;      Temps:          0       3       0       0       0       0       0       0
  4842 ;;      Totals:         0       7       0       0       0       0       0       0
  4843 ;;Total ram usage:        7 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    9
  4846 ;; This function calls:
  4847 ;;		_Sensor_Acquisition
  4848 ;;		_Sensor_DefaultCallback
  4849 ;;		_Sensor_RawSample_Update
  4850 ;;		_Sensor_isEnabled
  4851 ;;		_Sensor_setSampled
  4852 ;; This function is called by:
  4853 ;;		_MTOUCH_Sensor_SampleAll
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           
  4858                           ;psect for function _Sensor_Service
  4859  0358                     _Sensor_Service:	
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4863                           ;Sensor_Service@scanGroup stored from wreg
  4864  0358  0020               	movlb	0	; select bank0
  4865  0359  00C2               	movwf	Sensor_Service@scanGroup
  4866                           
  4867                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 312: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 313:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 314:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 316:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  4868  035A  0842               	movf	Sensor_Service@scanGroup,w
  4869  035B  00BF               	movwf	??_Sensor_Service
  4870  035C  01C0               	clrf	??_Sensor_Service+1
  4871  035D  35BF               	lslf	??_Sensor_Service,f
  4872  035E  0DC0               	rlf	??_Sensor_Service+1,f
  4873  035F  3005               	movlw	low (_sensor_scan_group| (0+32768))
  4874  0360  073F               	addwf	??_Sensor_Service,w
  4875  0361  0084               	movwf	4
  4876  0362  3090               	movlw	high (_sensor_scan_group| (0+32768))
  4877  0363  3D40               	addwfc	??_Sensor_Service+1,w
  4878  0364  0085               	movwf	5
  4879  0365  0800               	movf	0,w	;code access
  4880  0366  00C1               	movwf	??_Sensor_Service+2
  4881  0367  0841               	movf	??_Sensor_Service+2,w
  4882  0368  00C4               	movwf	Sensor_Service@sensor_adc1
  4883                           
  4884                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  4885  0369  0842               	movf	Sensor_Service@scanGroup,w
  4886  036A  00BF               	movwf	??_Sensor_Service
  4887  036B  01C0               	clrf	??_Sensor_Service+1
  4888  036C  35BF               	lslf	??_Sensor_Service,f
  4889  036D  0DC0               	rlf	??_Sensor_Service+1,f
  4890  036E  3006               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  4891  036F  073F               	addwf	??_Sensor_Service,w
  4892  0370  0084               	movwf	4
  4893  0371  3090               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  4894  0372  3D40               	addwfc	??_Sensor_Service+1,w
  4895  0373  0085               	movwf	5
  4896  0374  0800               	movf	0,w	;code access
  4897  0375  00C1               	movwf	??_Sensor_Service+2
  4898  0376  0841               	movf	??_Sensor_Service+2,w
  4899  0377  00C5               	movwf	Sensor_Service@sensor_adc2
  4900                           
  4901                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  4902  0378  0845               	movf	Sensor_Service@sensor_adc2,w
  4903  0379  00BF               	movwf	??_Sensor_Service
  4904  037A  083F               	movf	??_Sensor_Service,w
  4905  037B  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  4906  037C  0844               	movf	Sensor_Service@sensor_adc1,w
  4907  037D  3186  26C9  3183   	fcall	_Sensor_Acquisition
  4908  0380  0020               	movlb	0	; select bank0
  4909  0381  00C0               	movwf	??_Sensor_Service+1
  4910  0382  0840               	movf	??_Sensor_Service+1,w
  4911  0383  00C3               	movwf	Sensor_Service@error
  4912                           
  4913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 322:     switch(error)
  4914  0384  2BC5               	goto	l4277
  4915  0385                     l4255:	
  4916                           
  4917                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 326:             if(Sensor_isEnabled(sensor_adc1))
  4918  0385  0844               	movf	Sensor_Service@sensor_adc1,w
  4919  0386  318C  24CB  3183   	fcall	_Sensor_isEnabled
  4920  0389  3A00               	xorlw	0
  4921  038A  1903               	skipnz
  4922  038B  2BA4               	goto	l4265
  4923                           
  4924                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 327:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 332:                 if(!lowpowerActivated)
  4925  038C  0020               	movlb	0	; select bank0
  4926  038D  085C               	movf	_lowpowerActivated,w
  4927  038E  1D03               	btfss	3,2
  4928  038F  2B94               	goto	l4261
  4929                           
  4930                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 333:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 334:                     Sensor_RawSample_Update(sensor_adc1);
  4931  0390  0844               	movf	Sensor_Service@sensor_adc1,w
  4932  0391  318E  265E  3183   	fcall	_Sensor_RawSample_Update
  4933  0394                     l4261:	
  4934                           
  4935                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 336:                 Sensor_setSampled(sens
      +                          or_adc1);
  4936  0394  0020               	movlb	0	; select bank0
  4937  0395  0844               	movf	Sensor_Service@sensor_adc1,w
  4938  0396  318C  241B  3183   	fcall	_Sensor_setSampled
  4939                           
  4940                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 callback_sampled(senso
      +                          r_adc1->sensor);
  4941  0399  0020               	movlb	0	; select bank0
  4942  039A  0844               	movf	Sensor_Service@sensor_adc1,w
  4943  039B  0086               	movwf	6
  4944  039C  0187               	clrf	7
  4945  039D  0801               	movf	1,w
  4946  039E  00BF               	movwf	??_Sensor_Service
  4947  039F  083F               	movf	??_Sensor_Service,w
  4948  03A0  00F1               	movwf	Sensor_DefaultCallback@sensor
  4949  03A1  318B  23BD  3183   	fcall	_Sensor_DefaultCallback
  4950  03A4                     l4265:	
  4951                           
  4952                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 339:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  4953  03A4  0020               	movlb	0	; select bank0
  4954  03A5  0845               	movf	Sensor_Service@sensor_adc2,w
  4955  03A6  318C  24CB  3183   	fcall	_Sensor_isEnabled
  4956  03A9  3A00               	xorlw	0
  4957  03AA  1903               	skipnz
  4958  03AB  2BE8               	goto	l4279
  4959                           
  4960                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 340:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 341:                 if(!lowpowerActivated)
  4961  03AC  0020               	movlb	0	; select bank0
  4962  03AD  085C               	movf	_lowpowerActivated,w
  4963  03AE  1D03               	btfss	3,2
  4964  03AF  2BB4               	goto	l4271
  4965                           
  4966                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 343:                     Sensor_RawSample_Update(sensor_adc2);
  4967  03B0  0845               	movf	Sensor_Service@sensor_adc2,w
  4968  03B1  318E  265E  3183   	fcall	_Sensor_RawSample_Update
  4969  03B4                     l4271:	
  4970                           
  4971                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345:                 Sensor_setSampled(sens
      +                          or_adc2);
  4972  03B4  0020               	movlb	0	; select bank0
  4973  03B5  0845               	movf	Sensor_Service@sensor_adc2,w
  4974  03B6  318C  241B  3183   	fcall	_Sensor_setSampled
  4975                           
  4976                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:                 callback_sampled(senso
      +                          r_adc2->sensor);
  4977  03B9  0020               	movlb	0	; select bank0
  4978  03BA  0845               	movf	Sensor_Service@sensor_adc2,w
  4979  03BB  0086               	movwf	6
  4980  03BC  0187               	clrf	7
  4981  03BD  0801               	movf	1,w
  4982  03BE  00BF               	movwf	??_Sensor_Service
  4983  03BF  083F               	movf	??_Sensor_Service,w
  4984  03C0  00F1               	movwf	Sensor_DefaultCallback@sensor
  4985  03C1  318B  23BD  3183   	fcall	_Sensor_DefaultCallback
  4986  03C4  2BE8               	goto	l4279
  4987  03C5                     l4277:	
  4988  03C5  0843               	movf	Sensor_Service@error,w
  4989  03C6  00BF               	movwf	??_Sensor_Service
  4990  03C7  01C0               	clrf	??_Sensor_Service+1
  4991  03C8  1BBF               	btfsc	??_Sensor_Service,7
  4992  03C9  03C0               	decf	??_Sensor_Service+1,f
  4993                           
  4994                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4995                           ; Switch size 1, requested type "simple"
  4996                           ; Number of cases is 2, Range of values is 0 to 255
  4997                           ; switch strategies available:
  4998                           ; Name         Instructions Cycles
  4999                           ; simple_byte            7     4 (average)
  5000                           ; jumptable            260     6 (fixed)
  5001                           ;	Chosen strategy is simple_byte
  5002  03CA  0840               	movf	??_Sensor_Service+1,w
  5003  03CB  3A00               	xorlw	0	; case 0
  5004  03CC  1903               	skipnz
  5005  03CD  2BD2               	goto	l4517
  5006  03CE  3AFF               	xorlw	255	; case 255
  5007  03CF  1903               	skipnz
  5008  03D0  2BD7               	goto	l4519
  5009  03D1  2BE8               	goto	l4279
  5010  03D2                     l4517:	
  5011                           
  5012                           ; Switch size 1, requested type "simple"
  5013                           ; Number of cases is 1, Range of values is 0 to 0
  5014                           ; switch strategies available:
  5015                           ; Name         Instructions Cycles
  5016                           ; simple_byte            4     3 (average)
  5017                           ; direct_byte            8     6 (fixed)
  5018                           ; jumptable            260     6 (fixed)
  5019                           ;	Chosen strategy is simple_byte
  5020  03D2  083F               	movf	??_Sensor_Service,w
  5021  03D3  3A00               	xorlw	0	; case 0
  5022  03D4  1903               	skipnz
  5023  03D5  2B85               	goto	l4255
  5024  03D6  2BE8               	goto	l4279
  5025  03D7                     l4519:	
  5026                           
  5027                           ; Switch size 1, requested type "simple"
  5028                           ; Number of cases is 5, Range of values is 251 to 255
  5029                           ; switch strategies available:
  5030                           ; Name         Instructions Cycles
  5031                           ; direct_byte           15     5 (fixed)
  5032                           ; simple_byte           16     9 (average)
  5033                           ; jumptable            263     9 (fixed)
  5034                           ;	Chosen strategy is simple_byte
  5035  03D7  083F               	movf	??_Sensor_Service,w
  5036  03D8  3AFB               	xorlw	251	; case 251
  5037  03D9  1903               	skipnz
  5038  03DA  2BE8               	goto	l4279
  5039  03DB  3A07               	xorlw	7	; case 252
  5040  03DC  1903               	skipnz
  5041  03DD  2BE8               	goto	l4279
  5042  03DE  3A01               	xorlw	1	; case 253
  5043  03DF  1903               	skipnz
  5044  03E0  2BE8               	goto	l4279
  5045  03E1  3A03               	xorlw	3	; case 254
  5046  03E2  1903               	skipnz
  5047  03E3  2BE8               	goto	l4279
  5048  03E4  3A01               	xorlw	1	; case 255
  5049  03E5  1903               	skipnz
  5050  03E6  2BE8               	goto	l4279
  5051  03E7  2BE8               	goto	l4279
  5052  03E8                     l4279:	
  5053                           
  5054                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 359:     return error;
  5055  03E8  0020               	movlb	0	; select bank0
  5056  03E9  0843               	movf	Sensor_Service@error,w
  5057  03EA  0008               	return
  5058  03EB                     __end_of_Sensor_Service:	
  5059                           
  5060                           	psect	text26
  5061  0C1B                     __ptext26:	
  5062 ;; *************** function _Sensor_setSampled *****************
  5063 ;; Defined at:
  5064 ;;		line 977 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  sensor          1    wreg     PTR struct .
  5067 ;;		 -> mtouch_sensor(36), 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;  sensor          1    1[COMMON] PTR struct .
  5070 ;;		 -> mtouch_sensor(36), 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      void 
  5073 ;; Registers used:
  5074 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5080 ;;      Params:         0       0       0       0       0       0       0       0
  5081 ;;      Locals:         1       0       0       0       0       0       0       0
  5082 ;;      Temps:          0       0       0       0       0       0       0       0
  5083 ;;      Totals:         1       0       0       0       0       0       0       0
  5084 ;;Total ram usage:        1 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    4
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_Sensor_Service
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           
  5095                           ;psect for function _Sensor_setSampled
  5096  0C1B                     _Sensor_setSampled:	
  5097                           
  5098                           ;incstack = 0
  5099                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5100                           ;Sensor_setSampled@sensor stored from wreg
  5101  0C1B  00F1               	movwf	Sensor_setSampled@sensor
  5102                           
  5103                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 977: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 978
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 979:     sensor->sampled = 1;
  5104  0C1C  0871               	movf	Sensor_setSampled@sensor,w
  5105  0C1D  3E08               	addlw	8
  5106  0C1E  0086               	movwf	6
  5107  0C1F  0187               	clrf	7
  5108  0C20  1401               	bsf	1,0
  5109  0C21  0008               	return
  5110  0C22                     __end_of_Sensor_setSampled:	
  5111                           
  5112                           	psect	text27
  5113  0E5E                     __ptext27:	
  5114 ;; *************** function _Sensor_RawSample_Update *****************
  5115 ;; Defined at:
  5116 ;;		line 810 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  sensor          1    wreg     PTR struct .
  5119 ;;		 -> mtouch_sensor(36), 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  sensor          1    7[COMMON] PTR struct .
  5122 ;;		 -> mtouch_sensor(36), 
  5123 ;;  adcIndex        1    6[COMMON] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      void 
  5126 ;; Registers used:
  5127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5133 ;;      Params:         0       0       0       0       0       0       0       0
  5134 ;;      Locals:         2       0       0       0       0       0       0       0
  5135 ;;      Temps:          1       0       0       0       0       0       0       0
  5136 ;;      Totals:         3       0       0       0       0       0       0       0
  5137 ;;Total ram usage:        3 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    5
  5140 ;; This function calls:
  5141 ;;		_Sensor_getScanGroupIndex
  5142 ;; This function is called by:
  5143 ;;		_Sensor_Service
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           
  5148                           ;psect for function _Sensor_RawSample_Update
  5149  0E5E                     _Sensor_RawSample_Update:	
  5150                           
  5151                           ;incstack = 0
  5152                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5153                           ;Sensor_RawSample_Update@sensor stored from wreg
  5154  0E5E  00F7               	movwf	Sensor_RawSample_Update@sensor
  5155                           
  5156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 811: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 812:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  5157  0E5F  0877               	movf	Sensor_RawSample_Update@sensor,w
  5158  0E60  318E  26D6  318E   	fcall	_Sensor_getScanGroupIndex
  5159  0E63  00F5               	movwf	??_Sensor_RawSample_Update
  5160  0E64  0875               	movf	??_Sensor_RawSample_Update,w
  5161  0E65  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  5162                           
  5163                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 814:     if (INTCONbits.GIE == (uint8_t)1)
  5164  0E66  1F8B               	btfss	11,7	;volatile
  5165  0E67  2E77               	goto	l3203
  5166                           
  5167                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 815:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 816:         INTCONbits.GIE = (uint8_t)0;
  5168  0E68  138B               	bcf	11,7	;volatile
  5169                           
  5170                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 817:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  5171  0E69  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  5172  0E6A  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  5173  0E6B  0086               	movwf	6
  5174  0E6C  0187               	clrf	7
  5175  0E6D  0877               	movf	Sensor_RawSample_Update@sensor,w
  5176  0E6E  3E06               	addlw	6
  5177  0E6F  0084               	movwf	4
  5178  0E70  0185               	clrf	5
  5179  0E71  3F40               	moviw [0]fsr1
  5180  0E72  3F80               	movwi [0]fsr0
  5181  0E73  3F41               	moviw [1]fsr1
  5182  0E74  3F81               	movwi [1]fsr0
  5183                           
  5184                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 818:         INTCONbits.GIE = (uint8_t)1;
  5185  0E75  178B               	bsf	11,7	;volatile
  5186                           
  5187                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 819:     }
  5188  0E76  0008               	return
  5189  0E77                     l3203:	
  5190                           
  5191                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 821:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 822:         sensor->rawSample = packet_sample[adcIndex];
  5192  0E77  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  5193  0E78  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  5194  0E79  0086               	movwf	6
  5195  0E7A  0187               	clrf	7
  5196  0E7B  0877               	movf	Sensor_RawSample_Update@sensor,w
  5197  0E7C  3E06               	addlw	6
  5198  0E7D  0084               	movwf	4
  5199  0E7E  0185               	clrf	5
  5200  0E7F  3F40               	moviw [0]fsr1
  5201  0E80  3F80               	movwi [0]fsr0
  5202  0E81  3F41               	moviw [1]fsr1
  5203  0E82  3F81               	movwi [1]fsr0
  5204  0E83  0008               	return
  5205  0E84                     __end_of_Sensor_RawSample_Update:	
  5206                           
  5207                           	psect	text28
  5208  0BBD                     __ptext28:	
  5209 ;; *************** function _Sensor_DefaultCallback *****************
  5210 ;; Defined at:
  5211 ;;		line 831 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  sensor          1    1[COMMON] enum E2854
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      void 
  5218 ;; Registers used:
  5219 ;;		None
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5225 ;;      Params:         1       0       0       0       0       0       0       0
  5226 ;;      Locals:         0       0       0       0       0       0       0       0
  5227 ;;      Temps:          0       0       0       0       0       0       0       0
  5228 ;;      Totals:         1       0       0       0       0       0       0       0
  5229 ;;Total ram usage:        1 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    4
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_Sensor_Service
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _Sensor_DefaultCallback
  5241  0BBD                     _Sensor_DefaultCallback:	
  5242                           
  5243                           ;incstack = 0
  5244                           ; Regs used in _Sensor_DefaultCallback: []
  5245  0BBD  0008               	return
  5246  0BBE                     __end_of_Sensor_DefaultCallback:	
  5247                           
  5248                           	psect	text29
  5249  06C9                     __ptext29:	
  5250 ;; *************** function _Sensor_Acquisition *****************
  5251 ;; Defined at:
  5252 ;;		line 380 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  sensor_adc1     1    wreg     PTR struct .
  5255 ;;		 -> mtouch_sensor(36), 
  5256 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  5257 ;;		 -> mtouch_sensor(36), 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  5260 ;;		 -> mtouch_sensor(36), 
  5261 ;;  retry           1   29[BANK0 ] unsigned char 
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  1    wreg      enum E2859
  5264 ;; Registers used:
  5265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5271 ;;      Params:         0       1       0       0       0       0       0       0
  5272 ;;      Locals:         0       2       0       0       0       0       0       0
  5273 ;;      Temps:          0       1       0       0       0       0       0       0
  5274 ;;      Totals:         0       4       0       0       0       0       0       0
  5275 ;;Total ram usage:        4 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    8
  5278 ;; This function calls:
  5279 ;;		_Sensor_Acq_ExecutePacket
  5280 ;;		_Sensor_Scanfrequency_Evaluation
  5281 ;;		_Sensor_isActive
  5282 ;;		_Sensor_isCalibrated
  5283 ;;		_Sensor_postAcquisitionProcess
  5284 ;; This function is called by:
  5285 ;;		_Sensor_Service
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           
  5290                           ;psect for function _Sensor_Acquisition
  5291  06C9                     _Sensor_Acquisition:	
  5292                           
  5293                           ;incstack = 0
  5294                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5295                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  5296  06C9  0020               	movlb	0	; select bank0
  5297  06CA  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  5298                           
  5299                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 380: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 381: {;mcc_generated_files/mtouch/mtouch_sensor.c: 382:     
      +                          uint8_t retry = (uint8_t)5;
  5300  06CB  3005               	movlw	5
  5301  06CC  00BC               	movwf	??_Sensor_Acquisition
  5302  06CD  083C               	movf	??_Sensor_Acquisition,w
  5303  06CE  00BD               	movwf	Sensor_Acquisition@retry
  5304                           
  5305                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  5306  06CF  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5307  06D0  1D03               	btfss	3,2
  5308  06D1  2EDF               	goto	l4119
  5309  06D2  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5310  06D3  1D03               	btfss	3,2
  5311  06D4  2EDF               	goto	l4119
  5312                           
  5313                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 386:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 387:         return MTOUCH_SENSOR_ERROR_invalid_index;
  5314  06D5  30FF               	movlw	255
  5315  06D6  0008               	return
  5316  06D7                     l4113:	
  5317                           
  5318                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 397:         retry--;
  5319  06D7  3001               	movlw	1
  5320  06D8  0020               	movlb	0	; select bank0
  5321  06D9  02BD               	subwf	Sensor_Acquisition@retry,f
  5322                           
  5323                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 398:         if(retry == 0)
  5324  06DA  083D               	movf	Sensor_Acquisition@retry,w
  5325  06DB  1D03               	btfss	3,2
  5326  06DC  2EDF               	goto	l4119
  5327                           
  5328                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 399:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 400:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  5329  06DD  30FC               	movlw	252
  5330  06DE  0008               	return
  5331  06DF                     l4119:	
  5332                           
  5333                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 395:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  5334  06DF  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5335  06E0  00BC               	movwf	??_Sensor_Acquisition
  5336  06E1  083C               	movf	??_Sensor_Acquisition,w
  5337  06E2  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  5338  06E3  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5339  06E4  3180  204C  3186   	fcall	_Sensor_Acq_ExecutePacket
  5340  06E7  3A00               	xorlw	0
  5341  06E8  1D03               	skipz
  5342  06E9  2ED7               	goto	l4113
  5343                           
  5344                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 404:     if(sensor_adc1 != ((void*)0))
  5345  06EA  0020               	movlb	0	; select bank0
  5346  06EB  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5347  06EC  1903               	btfsc	3,2
  5348  06ED  2EF2               	goto	l4125
  5349                           
  5350                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 405:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 406:         Sensor_postAcquisitionProcess(sensor_adc1);
  5351  06EE  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5352  06EF  318F  27C9  3186   	fcall	_Sensor_postAcquisitionProcess
  5353  06F2                     l4125:	
  5354                           
  5355                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:     if(sensor_adc2 !=((void*)0))
  5356  06F2  0020               	movlb	0	; select bank0
  5357  06F3  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5358  06F4  1903               	btfsc	3,2
  5359  06F5  2EFA               	goto	l4129
  5360                           
  5361                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 411:         Sensor_postAcquisitionProcess(sensor_adc2);
  5362  06F6  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5363  06F7  318F  27C9  3186   	fcall	_Sensor_postAcquisitionProcess
  5364  06FA                     l4129:	
  5365                           
  5366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 414:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  5367  06FA  0020               	movlb	0	; select bank0
  5368  06FB  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5369  06FC  318C  2467  3186   	fcall	_Sensor_isActive
  5370  06FF  3A00               	xorlw	0
  5371  0700  1903               	skipnz
  5372  0701  2F0A               	goto	l4133
  5373  0702  0020               	movlb	0	; select bank0
  5374  0703  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5375  0704  318C  2439  3186   	fcall	_Sensor_isCalibrated
  5376  0707  3A00               	xorlw	0
  5377  0708  1D03               	skipz
  5378  0709  2F1A               	goto	l4137
  5379  070A                     l4133:	
  5380  070A  0020               	movlb	0	; select bank0
  5381  070B  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5382  070C  318C  2467  3186   	fcall	_Sensor_isActive
  5383  070F  3A00               	xorlw	0
  5384  0710  1903               	skipnz
  5385  0711  2F23               	goto	l4141
  5386  0712  0020               	movlb	0	; select bank0
  5387  0713  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5388  0714  318C  2439  3186   	fcall	_Sensor_isCalibrated
  5389  0717  3A00               	xorlw	0
  5390  0718  1903               	skipnz
  5391  0719  2F23               	goto	l4141
  5392  071A                     l4137:	
  5393                           
  5394                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 416:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 417:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  5395  071A  0020               	movlb	0	; select bank0
  5396  071B  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5397  071C  00BC               	movwf	??_Sensor_Acquisition
  5398  071D  083C               	movf	??_Sensor_Acquisition,w
  5399  071E  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  5400  071F  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5401  0720  3185  258B         	fcall	_Sensor_Scanfrequency_Evaluation
  5402  0722  0008               	return
  5403  0723                     l4141:	
  5404                           
  5405                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     return MTOUCH_SENSOR_ERROR_none;
  5406  0723  3000               	movlw	0
  5407  0724  0008               	return
  5408  0725                     __end_of_Sensor_Acquisition:	
  5409                           
  5410                           	psect	text30
  5411  0FC9                     __ptext30:	
  5412 ;; *************** function _Sensor_postAcquisitionProcess *****************
  5413 ;; Defined at:
  5414 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  sensor          1    wreg     PTR struct .
  5417 ;;		 -> mtouch_sensor(36), 
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;  sensor          1    9[COMMON] PTR struct .
  5420 ;;		 -> mtouch_sensor(36), 
  5421 ;;  deviation       2    6[COMMON] unsigned short 
  5422 ;;  adcIndex        1    8[COMMON] unsigned char 
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  1    wreg      void 
  5425 ;; Registers used:
  5426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5432 ;;      Params:         0       0       0       0       0       0       0       0
  5433 ;;      Locals:         4       0       0       0       0       0       0       0
  5434 ;;      Temps:          1       0       0       0       0       0       0       0
  5435 ;;      Totals:         5       0       0       0       0       0       0       0
  5436 ;;Total ram usage:        5 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; Hardware stack levels required when called:    5
  5439 ;; This function calls:
  5440 ;;		_Sensor_getScanGroupIndex
  5441 ;;		_Sensor_isEnabled
  5442 ;;		_Sensor_setActive
  5443 ;;		_Sensor_setInactive
  5444 ;;		_abs
  5445 ;; This function is called by:
  5446 ;;		_Sensor_Acquisition
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _Sensor_postAcquisitionProcess
  5452  0FC9                     _Sensor_postAcquisitionProcess:	
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5456                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  5457  0FC9  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  5458                           
  5459                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 424: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 425:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 426:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  5460  0FCA  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5461  0FCB  318E  26D6  318F   	fcall	_Sensor_getScanGroupIndex
  5462  0FCE  00F5               	movwf	??_Sensor_postAcquisitionProcess
  5463  0FCF  0875               	movf	??_Sensor_postAcquisitionProcess,w
  5464  0FD0  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  5465                           
  5466                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     if(Sensor_isEnabled(sensor))
  5467  0FD1  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5468  0FD2  318C  24CB  318F   	fcall	_Sensor_isEnabled
  5469  0FD5  3A00               	xorlw	0
  5470  0FD6  1903               	skipnz
  5471  0FD7  2FEF               	goto	l3061
  5472                           
  5473                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  5474  0FD8  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5475  0FD9  3E06               	addlw	6
  5476  0FDA  0086               	movwf	6
  5477  0FDB  0187               	clrf	7
  5478  0FDC  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  5479  0FDD  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  5480  0FDE  0084               	movwf	4
  5481  0FDF  0185               	clrf	5
  5482  0FE0  3F40               	moviw [0]fsr1
  5483  0FE1  0200               	subwf	0,w
  5484  0FE2  00F1               	movwf	abs@a
  5485  0FE3  3101               	addfsr 0,1
  5486  0FE4  3F41               	moviw [1]fsr1
  5487  0FE5  3B00               	subwfb	0,w
  5488  0FE6  00F2               	movwf	abs@a+1
  5489  0FE7  318D  25B7  318F   	fcall	_abs
  5490  0FEA  0872               	movf	?_abs+1,w
  5491  0FEB  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  5492  0FEC  0871               	movf	?_abs,w
  5493  0FED  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  5494  0FEE  2FF1               	goto	l3063
  5495  0FEF                     l3061:	
  5496                           
  5497                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 431:         deviation = 0;
  5498  0FEF  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  5499  0FF0  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  5500  0FF1                     l3063:	
  5501                           
  5502                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     if(deviation > 100u)
  5503  0FF1  3000               	movlw	0
  5504  0FF2  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  5505  0FF3  3065               	movlw	101
  5506  0FF4  1903               	skipnz
  5507  0FF5  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  5508  0FF6  1C03               	skipc
  5509  0FF7  2FFC               	goto	l3067
  5510                           
  5511                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 434:         Sensor_setActive(sensor);
  5512  0FF8  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5513  0FF9  318C  240D         	fcall	_Sensor_setActive
  5514  0FFB  0008               	return
  5515  0FFC                     l3067:	
  5516                           
  5517                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:         Sensor_setInactive(sensor);
  5518  0FFC  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5519  0FFD  318C  2414         	fcall	_Sensor_setInactive
  5520  0FFF  0008               	return
  5521  1000                     __end_of_Sensor_postAcquisitionProcess:	
  5522                           
  5523                           	psect	text31
  5524  0C14                     __ptext31:	
  5525 ;; *************** function _Sensor_setInactive *****************
  5526 ;; Defined at:
  5527 ;;		line 885 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  sensor          1    wreg     PTR struct .
  5530 ;;		 -> mtouch_sensor(36), 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  sensor          1    1[COMMON] PTR struct .
  5533 ;;		 -> mtouch_sensor(36), 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5543 ;;      Params:         0       0       0       0       0       0       0       0
  5544 ;;      Locals:         1       0       0       0       0       0       0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0       0
  5546 ;;      Totals:         1       0       0       0       0       0       0       0
  5547 ;;Total ram usage:        1 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    4
  5550 ;; This function calls:
  5551 ;;		Nothing
  5552 ;; This function is called by:
  5553 ;;		_Sensor_postAcquisitionProcess
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _Sensor_setInactive
  5559  0C14                     _Sensor_setInactive:	
  5560                           
  5561                           ;incstack = 0
  5562                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5563                           ;Sensor_setInactive@sensor stored from wreg
  5564  0C14  00F1               	movwf	Sensor_setInactive@sensor
  5565                           
  5566                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 88
      +                          6: {;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     sensor->active = 0;
  5567  0C15  0871               	movf	Sensor_setInactive@sensor,w
  5568  0C16  3E08               	addlw	8
  5569  0C17  0086               	movwf	6
  5570  0C18  0187               	clrf	7
  5571  0C19  1081               	bcf	1,1
  5572  0C1A  0008               	return
  5573  0C1B                     __end_of_Sensor_setInactive:	
  5574                           
  5575                           	psect	text32
  5576  0C0D                     __ptext32:	
  5577 ;; *************** function _Sensor_setActive *****************
  5578 ;; Defined at:
  5579 ;;		line 880 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  sensor          1    wreg     PTR struct .
  5582 ;;		 -> mtouch_sensor(36), 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  sensor          1    1[COMMON] PTR struct .
  5585 ;;		 -> mtouch_sensor(36), 
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      void 
  5588 ;; Registers used:
  5589 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5595 ;;      Params:         0       0       0       0       0       0       0       0
  5596 ;;      Locals:         1       0       0       0       0       0       0       0
  5597 ;;      Temps:          0       0       0       0       0       0       0       0
  5598 ;;      Totals:         1       0       0       0       0       0       0       0
  5599 ;;Total ram usage:        1 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:    4
  5602 ;; This function calls:
  5603 ;;		Nothing
  5604 ;; This function is called by:
  5605 ;;		_Sensor_postAcquisitionProcess
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           
  5610                           ;psect for function _Sensor_setActive
  5611  0C0D                     _Sensor_setActive:	
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5615                           ;Sensor_setActive@sensor stored from wreg
  5616  0C0D  00F1               	movwf	Sensor_setActive@sensor
  5617                           
  5618                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 880: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 881:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 882:     sensor->active = 1;
  5619  0C0E  0871               	movf	Sensor_setActive@sensor,w
  5620  0C0F  3E08               	addlw	8
  5621  0C10  0086               	movwf	6
  5622  0C11  0187               	clrf	7
  5623  0C12  1481               	bsf	1,1
  5624  0C13  0008               	return
  5625  0C14                     __end_of_Sensor_setActive:	
  5626                           
  5627                           	psect	text33
  5628  058B                     __ptext33:	
  5629 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  5630 ;; Defined at:
  5631 ;;		line 741 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  sensor_adc1     1    wreg     PTR struct .
  5634 ;;		 -> mtouch_sensor(36), 
  5635 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  5636 ;;		 -> mtouch_sensor(36), 
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  5639 ;;		 -> mtouch_sensor(36), 
  5640 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  5641 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  5642 ;;  i               1   26[BANK0 ] unsigned char 
  5643 ;;  retry           1   21[BANK0 ] unsigned char 
  5644 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      enum E2859
  5647 ;; Registers used:
  5648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5654 ;;      Params:         0       1       0       0       0       0       0       0
  5655 ;;      Locals:         0      10       0       0       0       0       0       0
  5656 ;;      Temps:          0       2       0       0       0       0       0       0
  5657 ;;      Totals:         0      13       0       0       0       0       0       0
  5658 ;;Total ram usage:       13 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    7
  5661 ;; This function calls:
  5662 ;;		_Sensor_Acq_ExecutePacket
  5663 ;; This function is called by:
  5664 ;;		_Sensor_Acquisition
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _Sensor_Scanfrequency_Evaluation
  5670  058B                     _Sensor_Scanfrequency_Evaluation:	
  5671                           
  5672                           ;incstack = 0
  5673                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  5674                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  5675  058B  0020               	movlb	0	; select bank0
  5676  058C  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  5677                           
  5678                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 741: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 742: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 743:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 745:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 746:     mtouch_sensor_sampleperiod_t best_sample_period;
  5679  058D  0856               	movf	_packet_noise+1,w
  5680  058E  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  5681  058F  0855               	movf	_packet_noise,w
  5682  0590  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5683  0591  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  5684  0592  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  5685  0593  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  5686  0594  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  5687  0595  0855               	movf	_packet_noise,w
  5688  0596  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  5689  0597  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  5690  0598  0856               	movf	_packet_noise+1,w
  5691  0599  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  5692  059A  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  5693                           
  5694                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 751:     best_sample_period = sample_period
      +                          ;
  5695  059B  086F               	movf	_sample_period,w
  5696  059C  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5697  059D  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5698  059E  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  5699                           
  5700                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 752:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  5701  059F  0852               	movf	_packet_sample+1,w
  5702  05A0  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  5703  05A1  0851               	movf	_packet_sample,w
  5704  05A2  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  5705                           
  5706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 753:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  5707  05A3  0854               	movf	_packet_sample+3,w
  5708  05A4  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  5709  05A5  0853               	movf	_packet_sample+2,w
  5710  05A6  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  5711                           
  5712                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  5713  05A7  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  5714  05A8                     l4045:	
  5715                           
  5716                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 757:         sample_period += frequency_hop[i];
  5717  05A8  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  5718  05A9  3E00               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  5719  05AA  0084               	movwf	4
  5720  05AB  3090               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  5721  05AC  1803               	skipnc
  5722  05AD  3E01               	addlw	1
  5723  05AE  0085               	movwf	5
  5724  05AF  0800               	movf	0,w	;code access
  5725  05B0  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5726  05B1  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5727  05B2  07EF               	addwf	_sample_period,f
  5728                           
  5729                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  5730  05B3  30AE               	movlw	174
  5731  05B4  026F               	subwf	_sample_period,w
  5732  05B5  1803               	skipnc
  5733  05B6  2DBB               	goto	l4053
  5734                           
  5735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 765:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  5736  05B7  30AE               	movlw	174
  5737  05B8  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5738  05B9  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5739  05BA  07EF               	addwf	_sample_period,f
  5740  05BB                     l4053:	
  5741                           
  5742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 768:         retry = (uint8_t)5;
  5743  05BB  3005               	movlw	5
  5744  05BC  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5745  05BD  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5746  05BE  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  5747  05BF                     l4061:	
  5748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  5749                           
  5750                           
  5751                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  5752  05BF  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  5753  05C0  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5754  05C1  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5755  05C2  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  5756  05C3  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  5757  05C4  3180  204C  3185   	fcall	_Sensor_Acq_ExecutePacket
  5758  05C7  3A00               	xorlw	0
  5759  05C8  1903               	btfsc	3,2
  5760  05C9  2DD2               	goto	l4063
  5761                           
  5762                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 772:             retry--;
  5763  05CA  3001               	movlw	1
  5764  05CB  0020               	movlb	0	; select bank0
  5765  05CC  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  5766                           
  5767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 773:             if(retry == 0)
  5768  05CD  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  5769  05CE  1D03               	btfss	3,2
  5770  05CF  2DBF               	goto	l4061
  5771                           
  5772                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 775:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  5773  05D0  30FC               	movlw	252
  5774  05D1  0008               	return
  5775  05D2                     l4063:	
  5776                           
  5777                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 779:         if(packet_noise_Max < packet_n
      +                          oise)
  5778  05D2  0020               	movlb	0	; select bank0
  5779  05D3  0856               	movf	_packet_noise+1,w
  5780  05D4  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  5781  05D5  1D03               	skipz
  5782  05D6  2DD9               	goto	u3645
  5783  05D7  0855               	movf	_packet_noise,w
  5784  05D8  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  5785  05D9                     u3645:	
  5786  05D9  1803               	skipnc
  5787  05DA  2DEB               	goto	l4067
  5788                           
  5789                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 781:             packet_noise_Max = packet_noise;
  5790  05DB  0856               	movf	_packet_noise+1,w
  5791  05DC  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  5792  05DD  0855               	movf	_packet_noise,w
  5793  05DE  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  5794                           
  5795                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:             best_sample_period = sampl
      +                          e_period;
  5796  05DF  086F               	movf	_sample_period,w
  5797  05E0  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5798  05E1  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5799  05E2  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  5800                           
  5801                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 783:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  5802  05E3  0852               	movf	_packet_sample+1,w
  5803  05E4  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  5804  05E5  0851               	movf	_packet_sample,w
  5805  05E6  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  5806                           
  5807                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  5808  05E7  0854               	movf	_packet_sample+3,w
  5809  05E8  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  5810  05E9  0853               	movf	_packet_sample+2,w
  5811  05EA  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  5812  05EB                     l4067:	
  5813                           
  5814                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 786:     }
  5815  05EB  3001               	movlw	1
  5816  05EC  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5817  05ED  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5818  05EE  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  5819  05EF  3005               	movlw	5
  5820  05F0  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  5821  05F1  1C03               	skipc
  5822  05F2  2DA8               	goto	l4045
  5823                           
  5824                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 788:     sample_period = best_sample_period
      +                          ;
  5825  05F3  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  5826  05F4  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5827  05F5  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5828  05F6  00EF               	movwf	_sample_period
  5829                           
  5830                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  5831  05F7  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  5832  05F8  00D2               	movwf	_packet_sample+1
  5833  05F9  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  5834  05FA  00D1               	movwf	_packet_sample
  5835                           
  5836                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  5837  05FB  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  5838  05FC  00D4               	movwf	_packet_sample+3
  5839  05FD  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  5840  05FE  00D3               	movwf	_packet_sample+2
  5841                           
  5842                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792:     return MTOUCH_SENSOR_ERROR_none;
  5843  05FF  3000               	movlw	0
  5844  0600  0008               	return
  5845  0601                     __end_of_Sensor_Scanfrequency_Evaluation:	
  5846                           
  5847                           	psect	text34
  5848  004C                     __ptext34:	
  5849 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  5850 ;; Defined at:
  5851 ;;		line 479 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;  sensor_adc1     1    wreg     PTR struct .
  5854 ;;		 -> mtouch_sensor(36), 
  5855 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  5856 ;;		 -> mtouch_sensor(36), 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  5859 ;;		 -> mtouch_sensor(36), 
  5860 ;;  last_b          2   10[BANK0 ] unsigned short 
  5861 ;;  last_a          2    8[BANK0 ] unsigned short 
  5862 ;;  packet_count    1   12[BANK0 ] unsigned char 
  5863 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  5864 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  5865 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  5866 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  5867 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  5868 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  5869 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      enum E2859
  5872 ;; Registers used:
  5873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5879 ;;      Params:         1       0       0       0       0       0       0       0
  5880 ;;      Locals:         0      13       0       0       0       0       0       0
  5881 ;;      Temps:          0       1       0       0       0       0       0       0
  5882 ;;      Totals:         1      14       0       0       0       0       0       0
  5883 ;;Total ram usage:       15 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    6
  5886 ;; This function calls:
  5887 ;;		_MTOUCH_Sensor_Scan_Initialize
  5888 ;;		_Sensor_autoCalibration
  5889 ;;		_Sensor_isActive
  5890 ;;		_Sensor_isCalibrated
  5891 ;;		_Sensor_isEnabled
  5892 ;;		_Sensor_loadADCSettings
  5893 ;;		_TMR2_LoadPeriodRegister
  5894 ;;		_TMR2_StartTimer
  5895 ;;		_TMR2_StopTimer
  5896 ;;		_abs
  5897 ;; This function is called by:
  5898 ;;		_Sensor_Acquisition
  5899 ;;		_Sensor_Scanfrequency_Evaluation
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           
  5904                           ;psect for function _Sensor_Acq_ExecutePacket
  5905  004C                     _Sensor_Acq_ExecutePacket:	
  5906                           
  5907                           ;incstack = 0
  5908                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5909                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  5910  004C  0020               	movlb	0	; select bank0
  5911  004D  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  5912                           
  5913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 484:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  5914  004E  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  5915  004F  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  5916                           
  5917                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  5918  0050  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  5919  0051  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  5920                           
  5921                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 486:     uint8_t activeSensor = 0;
  5922  0052  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  5923                           
  5924                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 489:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 495:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  5925  0053  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  5926  0054  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  5927                           
  5928                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  5929  0055  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5930  0056  1903               	btfsc	3,2
  5931  0057  288B               	goto	l3845
  5932  0058  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  5933  0059  1903               	btfsc	3,2
  5934  005A  288B               	goto	l3845
  5935                           
  5936                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 497:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 498:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  5937  005B  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5938  005C  3E08               	addlw	8
  5939  005D  0086               	movwf	6
  5940  005E  0187               	clrf	7
  5941  005F  1981               	btfsc	1,3
  5942  0060  286F               	goto	l3827
  5943  0061  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  5944  0062  3E08               	addlw	8
  5945  0063  0086               	movwf	6
  5946  0064  0187               	clrf	7
  5947  0065  1D81               	btfss	1,3
  5948  0066  286F               	goto	l3827
  5949                           
  5950                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 500:             sensor_adc1->enabled = 1;
  5951  0067  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5952  0068  3E08               	addlw	8
  5953  0069  0086               	movwf	6
  5954  006A  0187               	clrf	7
  5955  006B  1581               	bsf	1,3
  5956                           
  5957                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:             sensor1ForceEnabled = 1;
  5958  006C  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  5959  006D  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  5960                           
  5961                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 502:         }
  5962  006E  289F               	goto	l3869
  5963  006F                     l3827:	
  5964  006F  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  5965  0070  3E08               	addlw	8
  5966  0071  0086               	movwf	6
  5967  0072  0187               	clrf	7
  5968  0073  1981               	btfsc	1,3
  5969  0074  2883               	goto	l3835
  5970  0075  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5971  0076  3E08               	addlw	8
  5972  0077  0086               	movwf	6
  5973  0078  0187               	clrf	7
  5974  0079  1D81               	btfss	1,3
  5975  007A  2883               	goto	l3835
  5976                           
  5977                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 504:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 505:             sensor_adc2->enabled = 1;
  5978  007B  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  5979  007C  3E08               	addlw	8
  5980  007D  0086               	movwf	6
  5981  007E  0187               	clrf	7
  5982  007F  1581               	bsf	1,3
  5983                           
  5984                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 506:             sensor2ForceEnabled = 1;
  5985  0080  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  5986  0081  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  5987                           
  5988                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:         }
  5989  0082  289F               	goto	l3869
  5990  0083                     l3835:	
  5991  0083  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5992  0084  3E08               	addlw	8
  5993  0085  0086               	movwf	6
  5994  0086  0187               	clrf	7
  5995  0087  1981               	btfsc	1,3
  5996  0088  289F               	goto	l3869
  5997  0089                     l3837:	
  5998  0089  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  5999  008A  2898               	goto	L3
  6000  008B                     l3845:	
  6001                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 515:     }
  6002                           
  6003  008B  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6004  008C  1D03               	btfss	3,2
  6005  008D  2891               	goto	l3857
  6006  008E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6007  008F  1D03               	btfss	3,2
  6008  0090  2889               	goto	l3837
  6009  0091                     l3857:	
  6010                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 517:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 518:         if(sensor_adc2->enabled == 0)
  6011                           
  6012  0091  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6013  0092  1903               	btfsc	3,2
  6014  0093  289F               	goto	l3869
  6015  0094  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6016  0095  1D03               	btfss	3,2
  6017  0096  289F               	goto	l3869
  6018                           
  6019                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 527:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 528:         if(sensor_adc1->enabled == 0)
  6020  0097  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6021  0098                     L3:	
  6022  0098  3E08               	addlw	8
  6023  0099  0086               	movwf	6
  6024  009A  0187               	clrf	7
  6025  009B  1981               	btfsc	1,3
  6026  009C  289F               	goto	l3869
  6027  009D                     l3839:	
  6028                           
  6029                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 510:             return MTOUCH_SENSOR_ERROR_none;
  6030  009D  3000               	movlw	0
  6031  009E  0008               	return
  6032  009F                     l3869:	
  6033                           
  6034                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     if(Sensor_isActive(sensor_adc2))
  6035  009F  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6036  00A0  318C  2467  3180   	fcall	_Sensor_isActive
  6037  00A3  3A00               	xorlw	0
  6038  00A4  1903               	skipnz
  6039  00A5  28A9               	goto	l3873
  6040                           
  6041                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         activeSensor = 1;
  6042  00A6  0020               	movlb	0	; select bank0
  6043  00A7  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  6044  00A8  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  6045  00A9                     l3873:	
  6046                           
  6047                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     ADCOMCON_temp = ADCOMCON;
  6048  00A9  002E               	movlb	14	; select bank14
  6049  00AA  0812               	movf	18,w	;volatile
  6050  00AB  0020               	movlb	0	; select bank0
  6051  00AC  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6052  00AD  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6053  00AE  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  6054                           
  6055                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:     AD1CON2_temp = AD1CON2;
  6056  00AF  002E               	movlb	14	; select bank14
  6057  00B0  0813               	movf	19,w	;volatile
  6058  00B1  0020               	movlb	0	; select bank0
  6059  00B2  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6060  00B3  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6061  00B4  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  6062                           
  6063                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:     AD2CON2_temp = AD2CON2;
  6064  00B5  002F               	movlb	15	; select bank15
  6065  00B6  0813               	movf	19,w	;volatile
  6066  00B7  0020               	movlb	0	; select bank0
  6067  00B8  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6068  00B9  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6069  00BA  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  6070                           
  6071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     MTOUCH_Sensor_Scan_Initialize();
  6072  00BB  318C  24BB  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  6073                           
  6074                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     if(sensor_adc1!=((void*)0))
  6075  00BE  0020               	movlb	0	; select bank0
  6076  00BF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6077  00C0  1903               	btfsc	3,2
  6078  00C1  28D4               	goto	l3889
  6079                           
  6080                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6081  00C2  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6082  00C3  3E04               	addlw	4
  6083  00C4  0086               	movwf	6
  6084  00C5  0187               	clrf	7
  6085  00C6  0801               	movf	1,w
  6086  00C7  3EFF               	addlw	255
  6087  00C8  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6088  00C9  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6089  00CA  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6090                           
  6091                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 0;
  6092  00CB  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6093                           
  6094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b01000000;
  6095  00CC  3040               	movlw	64
  6096  00CD  002E               	movlb	14	; select bank14
  6097  00CE  0098               	movwf	24	;volatile
  6098                           
  6099                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b00000000;
  6100  00CF  002F               	movlb	15	; select bank15
  6101  00D0  0198               	clrf	24	;volatile
  6102                           
  6103                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  6104  00D1  0022               	movlb	2	; select bank2
  6105  00D2  101D               	bcf	29,0	;volatile
  6106                           
  6107                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 561:     }
  6108  00D3  28E6               	goto	l3899
  6109  00D4                     l3889:	
  6110                           
  6111                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 564:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6112  00D4  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6113  00D5  3E04               	addlw	4
  6114  00D6  0086               	movwf	6
  6115  00D7  0187               	clrf	7
  6116  00D8  0801               	movf	1,w
  6117  00D9  3EFF               	addlw	255
  6118  00DA  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6119  00DB  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6120  00DC  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6121                           
  6122                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         ADxIF_flag = 1;
  6123  00DD  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6124  00DE  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  6125                           
  6126                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         AAD1GRD = 0b00000000;
  6127  00DF  002E               	movlb	14	; select bank14
  6128  00E0  0198               	clrf	24	;volatile
  6129                           
  6130                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:         AAD2GRD = 0b01000000;
  6131  00E1  3040               	movlw	64
  6132  00E2  002F               	movlb	15	; select bank15
  6133  00E3  0098               	movwf	24	;volatile
  6134                           
  6135                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:         APFCONbits.GRDASEL = 0x1;
  6136  00E4  0022               	movlb	2	; select bank2
  6137  00E5  141D               	bsf	29,0	;volatile
  6138  00E6                     l3899:	
  6139                           
  6140                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  6141  00E6  01F2               	clrf	Sensor_loadADCSettings@adc_index
  6142  00E7  0020               	movlb	0	; select bank0
  6143  00E8  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6144  00E9  3182  220A  3180   	fcall	_Sensor_loadADCSettings
  6145                           
  6146                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  6147  00EC  01F2               	clrf	Sensor_loadADCSettings@adc_index
  6148  00ED  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  6149  00EE  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6150  00EF  3182  220A  3180   	fcall	_Sensor_loadADCSettings
  6151                           
  6152                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:     sensor_globalFlags.done = 0;
  6153  00F2  0020               	movlb	0	; select bank0
  6154  00F3  105B               	bcf	_sensor_globalFlags,0	;volatile
  6155                           
  6156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     sensor_globalFlags.error = 0;
  6157  00F4  115B               	bcf	_sensor_globalFlags,2	;volatile
  6158                           
  6159                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 576:     sensor_globalFlags.interrupted = 0
      +                          ;
  6160  00F5  11DB               	bcf	_sensor_globalFlags,3	;volatile
  6161                           
  6162                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  6163  00F6  086F               	movf	_sample_period,w
  6164  00F7  318B  23D2  3180   	fcall	_TMR2_LoadPeriodRegister
  6165                           
  6166                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 579:     TMR2_StartTimer();
  6167  00FA  318B  23C1  3180   	fcall	_TMR2_StartTimer
  6168                           
  6169                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:     packet_noise = 0;
  6170  00FD  0020               	movlb	0	; select bank0
  6171  00FE  01D5               	clrf	_packet_noise
  6172  00FF  01D6               	clrf	_packet_noise+1
  6173  0100                     l3915:	
  6174                           
  6175                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 584:         if(ADxIF_flag == 0)
  6176  0100  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  6177  0101  1D03               	btfss	3,2
  6178  0102  2909               	goto	l568
  6179                           
  6180                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 586:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6181  0103  1F11               	btfss	17,6	;volatile
  6182  0104  10DB               	bcf	_sensor_globalFlags,1	;volatile
  6183  0105                     l570:	
  6184  0105  1F11               	btfss	17,6	;volatile
  6185  0106  2905               	goto	l570
  6186                           
  6187                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588:             PIR1bits.AD1IF = 0;
  6188  0107  1311               	bcf	17,6	;volatile
  6189                           
  6190                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         }
  6191  0108  290F               	goto	l3923
  6192  0109                     l568:	
  6193                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         else
  6194                           
  6195                           
  6196                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 592:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6197  0109  1B12               	btfsc	18,6	;volatile
  6198  010A  290C               	goto	l575
  6199  010B  10DB               	bcf	_sensor_globalFlags,1	;volatile
  6200  010C                     l575:	
  6201  010C  1F12               	btfss	18,6	;volatile
  6202  010D  290C               	goto	l575
  6203                           
  6204                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:             PIR2bits.AD2IF = 0;
  6205  010E  1312               	bcf	18,6	;volatile
  6206  010F                     l3923:	
  6207                           
  6208                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:         AAD1GRD ^= 0b00100001;
  6209  010F  3021               	movlw	33
  6210  0110  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6211  0111  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6212  0112  002E               	movlb	14	; select bank14
  6213  0113  0698               	xorwf	24,f	;volatile
  6214                           
  6215                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:         AAD2GRD ^= 0b00100001;
  6216  0114  3021               	movlw	33
  6217  0115  0020               	movlb	0	; select bank0
  6218  0116  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6219  0117  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6220  0118  002F               	movlb	15	; select bank15
  6221  0119  0698               	xorwf	24,f	;volatile
  6222                           
  6223                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:         AAD1CON3 ^= 0b11000000;
  6224  011A  30C0               	movlw	192
  6225  011B  0020               	movlb	0	; select bank0
  6226  011C  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6227  011D  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6228  011E  002E               	movlb	14	; select bank14
  6229  011F  0694               	xorwf	20,f	;volatile
  6230                           
  6231                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:         AAD2CON3 ^= 0b11000000;
  6232  0120  30C0               	movlw	192
  6233  0121  0020               	movlb	0	; select bank0
  6234  0122  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6235  0123  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6236  0124  002F               	movlb	15	; select bank15
  6237  0125  0694               	xorwf	20,f	;volatile
  6238                           
  6239                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:         if ((packet_counter & 0x01) ==
      +                           0)
  6240  0126  0020               	movlb	0	; select bank0
  6241  0127  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  6242  0128  296F               	goto	l3939
  6243                           
  6244                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 603:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 604:             packet_sample[0] += AAD1RES0;
  6245  0129  002E               	movlb	14	; select bank14
  6246  012A  081A               	movf	26,w	;volatile
  6247  012B  0020               	movlb	0	; select bank0
  6248  012C  07D1               	addwf	_packet_sample,f
  6249  012D  002E               	movlb	14	; select bank14
  6250  012E  081B               	movf	27,w	;volatile
  6251  012F  0020               	movlb	0	; select bank0
  6252  0130  3DD2               	addwfc	_packet_sample+1,f
  6253                           
  6254                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 605:             packet_sample[1] += AAD2RE
      +                          S0;
  6255  0131  002F               	movlb	15	; select bank15
  6256  0132  081A               	movf	26,w	;volatile
  6257  0133  0020               	movlb	0	; select bank0
  6258  0134  07D3               	addwf	_packet_sample+2,f
  6259  0135  002F               	movlb	15	; select bank15
  6260  0136  081B               	movf	27,w	;volatile
  6261  0137  0020               	movlb	0	; select bank0
  6262  0138  3DD4               	addwfc	_packet_sample+3,f
  6263                           
  6264                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:             if(activeSensor ==0)
  6265  0139  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  6266  013A  1D03               	btfss	3,2
  6267  013B  2954               	goto	l3935
  6268                           
  6269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 607:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 608:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  6270  013C  002E               	movlb	14	; select bank14
  6271  013D  081A               	movf	26,w	;volatile
  6272  013E  0020               	movlb	0	; select bank0
  6273  013F  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  6274  0140  00F1               	movwf	abs@a
  6275  0141  002E               	movlb	14	; select bank14
  6276  0142  081B               	movf	27,w	;volatile
  6277  0143  0020               	movlb	0	; select bank0
  6278  0144  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  6279  0145  00F2               	movwf	abs@a+1
  6280  0146  318D  25B7  3180   	fcall	_abs
  6281  0149  0871               	movf	?_abs,w
  6282  014A  0020               	movlb	0	; select bank0
  6283  014B  07D5               	addwf	_packet_noise,f
  6284  014C  0872               	movf	?_abs+1,w
  6285  014D  3DD6               	addwfc	_packet_noise+1,f
  6286                           
  6287                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 609:                 last_b = AAD1RES0;
  6288  014E  002E               	movlb	14	; select bank14
  6289  014F  081B               	movf	27,w	;volatile
  6290  0150  0020               	movlb	0	; select bank0
  6291  0151  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  6292  0152  002E               	movlb	14	; select bank14
  6293  0153  296B               	goto	L2
  6294  0154                     l3935:	
  6295                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:             }
  6296                           
  6297                           
  6298                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 613:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  6299  0154  002F               	movlb	15	; select bank15
  6300  0155  081A               	movf	26,w	;volatile
  6301  0156  0020               	movlb	0	; select bank0
  6302  0157  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  6303  0158  00F1               	movwf	abs@a
  6304  0159  002F               	movlb	15	; select bank15
  6305  015A  081B               	movf	27,w	;volatile
  6306  015B  0020               	movlb	0	; select bank0
  6307  015C  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  6308  015D  00F2               	movwf	abs@a+1
  6309  015E  318D  25B7  3180   	fcall	_abs
  6310  0161  0871               	movf	?_abs,w
  6311  0162  0020               	movlb	0	; select bank0
  6312  0163  07D5               	addwf	_packet_noise,f
  6313  0164  0872               	movf	?_abs+1,w
  6314  0165  3DD6               	addwfc	_packet_noise+1,f
  6315                           
  6316                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:                 last_b = AAD2RES0;
  6317  0166  002F               	movlb	15	; select bank15
  6318  0167  081B               	movf	27,w	;volatile
  6319  0168  0020               	movlb	0	; select bank0
  6320  0169  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  6321  016A  002F               	movlb	15	; select bank15
  6322  016B                     L2:	
  6323  016B  081A               	movf	26,w	;volatile
  6324  016C  0020               	movlb	0	; select bank0
  6325  016D  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  6326  016E  29A3               	goto	l3951
  6327  016F                     l3939:	
  6328                           
  6329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 618:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 619:             packet_sample[0] -= AAD1RES0;
  6330  016F  002E               	movlb	14	; select bank14
  6331  0170  081A               	movf	26,w	;volatile
  6332  0171  0020               	movlb	0	; select bank0
  6333  0172  02D1               	subwf	_packet_sample,f
  6334  0173  002E               	movlb	14	; select bank14
  6335  0174  081B               	movf	27,w	;volatile
  6336  0175  0020               	movlb	0	; select bank0
  6337  0176  3BD2               	subwfb	_packet_sample+1,f
  6338                           
  6339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:             packet_sample[1] -= AAD2RE
      +                          S0;
  6340  0177  002F               	movlb	15	; select bank15
  6341  0178  081A               	movf	26,w	;volatile
  6342  0179  0020               	movlb	0	; select bank0
  6343  017A  02D3               	subwf	_packet_sample+2,f
  6344  017B  002F               	movlb	15	; select bank15
  6345  017C  081B               	movf	27,w	;volatile
  6346  017D  0020               	movlb	0	; select bank0
  6347  017E  3BD4               	subwfb	_packet_sample+3,f
  6348                           
  6349                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:             if(activeSensor ==0)
  6350  017F  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  6351  0180  1D03               	btfss	3,2
  6352  0181  2989               	goto	l3947
  6353                           
  6354                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 623:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  6355  0182  002E               	movlb	14	; select bank14
  6356  0183  081A               	movf	26,w	;volatile
  6357  0184  0020               	movlb	0	; select bank0
  6358  0185  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  6359  0186  00F1               	movwf	abs@a
  6360  0187  002E               	movlb	14	; select bank14
  6361  0188  298F               	goto	L5
  6362  0189                     l3947:	
  6363                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:             }
  6364                           
  6365                           
  6366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 628:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  6367  0189  002F               	movlb	15	; select bank15
  6368  018A  081A               	movf	26,w	;volatile
  6369  018B  0020               	movlb	0	; select bank0
  6370  018C  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  6371  018D  00F1               	movwf	abs@a
  6372  018E  002F               	movlb	15	; select bank15
  6373  018F                     L5:	
  6374  018F  081B               	movf	27,w	;volatile
  6375  0190  0020               	movlb	0	; select bank0
  6376  0191  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  6377  0192  00F2               	movwf	abs@a+1
  6378  0193  318D  25B7  3180   	fcall	_abs
  6379  0196  0871               	movf	?_abs,w
  6380  0197  0020               	movlb	0	; select bank0
  6381  0198  07D5               	addwf	_packet_noise,f
  6382  0199  0872               	movf	?_abs+1,w
  6383  019A  3DD6               	addwfc	_packet_noise+1,f
  6384                           
  6385                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 624:                 last_a = AAD1RES0;
  6386  019B  002E               	movlb	14	; select bank14
  6387  019C  081B               	movf	27,w	;volatile
  6388  019D  0020               	movlb	0	; select bank0
  6389  019E  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  6390  019F  002E               	movlb	14	; select bank14
  6391  01A0  081A               	movf	26,w	;volatile
  6392  01A1  0020               	movlb	0	; select bank0
  6393  01A2  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  6394  01A3                     l3951:	
  6395                           
  6396                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         if (packet_counter == 0)
  6397  01A3  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  6398  01A4  1903               	btfsc	3,2
  6399                           
  6400                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 637:             sensor_globalFlags.done = (uint8_t)1;
  6401  01A5  145B               	bsf	_sensor_globalFlags,0	;volatile
  6402                           
  6403                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:         packet_counter--;
  6404  01A6  3001               	movlw	1
  6405  01A7  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  6406                           
  6407                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:         if (sensor_globalFlags.check !
      +                          = 0)
  6408  01A8  1CDB               	btfss	_sensor_globalFlags,1	;volatile
  6409  01A9  29AC               	goto	l585
  6410                           
  6411                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 643:             sensor_globalFlags.error = 1;
  6412  01AA  155B               	bsf	_sensor_globalFlags,2	;volatile
  6413                           
  6414                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:             sensor_globalFlags.done = 
      +                          1;
  6415  01AB  145B               	bsf	_sensor_globalFlags,0	;volatile
  6416  01AC                     l585:	
  6417                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 645:         }
  6418                           
  6419                           
  6420                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:         sensor_globalFlags.check = 1;
  6421  01AC  14DB               	bsf	_sensor_globalFlags,1	;volatile
  6422                           
  6423                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     } while(sensor_globalFlags.done ==
      +                           0);
  6424  01AD  1C5B               	btfss	_sensor_globalFlags,0	;volatile
  6425  01AE  2900               	goto	l3915
  6426                           
  6427                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     TMR2_StopTimer();
  6428  01AF  318B  23C4  3180   	fcall	_TMR2_StopTimer
  6429                           
  6430                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 650:     ADCOMCON = ADCOMCON_temp;
  6431  01B2  0020               	movlb	0	; select bank0
  6432  01B3  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  6433  01B4  002E               	movlb	14	; select bank14
  6434  01B5  0092               	movwf	18	;volatile
  6435                           
  6436                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     AD1CON2 = AD1CON2_temp;
  6437  01B6  0020               	movlb	0	; select bank0
  6438  01B7  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  6439  01B8  002E               	movlb	14	; select bank14
  6440  01B9  0093               	movwf	19	;volatile
  6441                           
  6442                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     AD2CON2 = AD2CON2_temp;
  6443  01BA  0020               	movlb	0	; select bank0
  6444  01BB  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  6445  01BC  002F               	movlb	15	; select bank15
  6446  01BD  0093               	movwf	19	;volatile
  6447                           
  6448                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     if(sensor_globalFlags.error)
  6449  01BE  0020               	movlb	0	; select bank0
  6450  01BF  1D5B               	btfss	_sensor_globalFlags,2	;volatile
  6451  01C0  29C3               	goto	l587
  6452                           
  6453                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 656:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  6454  01C1  30FB               	movlw	251
  6455  01C2  0008               	return
  6456  01C3                     l587:	
  6457                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     }
  6458                           
  6459                           
  6460                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 659:     if(sensor_globalFlags.interrupted)
  6461  01C3  1DDB               	btfss	_sensor_globalFlags,3	;volatile
  6462  01C4  29C7               	goto	l3979
  6463                           
  6464                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 661:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  6465  01C5  30FA               	movlw	250
  6466  01C6  0008               	return
  6467  01C7                     l3979:	
  6468                           
  6469                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:     if (sensor1ForceEnabled)
  6470  01C7  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  6471  01C8  1903               	btfsc	3,2
  6472  01C9  29CF               	goto	l3983
  6473                           
  6474                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 666:         sensor_adc1->enabled = 0;
  6475  01CA  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6476  01CB  3E08               	addlw	8
  6477  01CC  0086               	movwf	6
  6478  01CD  0187               	clrf	7
  6479  01CE  1181               	bcf	1,3
  6480  01CF                     l3983:	
  6481                           
  6482                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:     if (sensor2ForceEnabled)
  6483  01CF  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  6484  01D0  1903               	btfsc	3,2
  6485  01D1  29D7               	goto	l3987
  6486                           
  6487                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 669:         sensor_adc2->enabled = 0;
  6488  01D2  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6489  01D3  3E08               	addlw	8
  6490  01D4  0086               	movwf	6
  6491  01D5  0187               	clrf	7
  6492  01D6  1181               	bcf	1,3
  6493  01D7                     l3987:	
  6494                           
  6495                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  6496  01D7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6497  01D8  318C  24CB  3180   	fcall	_Sensor_isEnabled
  6498  01DB  3A00               	xorlw	0
  6499  01DC  1903               	skipnz
  6500  01DD  29EB               	goto	l3993
  6501  01DE  0020               	movlb	0	; select bank0
  6502  01DF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6503  01E0  318C  2439  3180   	fcall	_Sensor_isCalibrated
  6504  01E3  3A00               	xorlw	0
  6505  01E4  1D03               	skipz
  6506  01E5  29EB               	goto	l3993
  6507                           
  6508                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:         Sensor_autoCalibration(sensor_
      +                          adc1);
  6509  01E6  0020               	movlb	0	; select bank0
  6510  01E7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6511  01E8  3184  247A  3180   	fcall	_Sensor_autoCalibration
  6512  01EB                     l3993:	
  6513                           
  6514                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  6515  01EB  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6516  01EC  318C  24CB  3180   	fcall	_Sensor_isEnabled
  6517  01EF  3A00               	xorlw	0
  6518  01F0  1903               	skipnz
  6519  01F1  29FD               	goto	l3999
  6520  01F2  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6521  01F3  318C  2439  3180   	fcall	_Sensor_isCalibrated
  6522  01F6  3A00               	xorlw	0
  6523  01F7  1D03               	skipz
  6524  01F8  29FD               	goto	l3999
  6525                           
  6526                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:         Sensor_autoCalibration(sensor_
      +                          adc2);
  6527  01F9  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6528  01FA  3184  247A  3180   	fcall	_Sensor_autoCalibration
  6529  01FD                     l3999:	
  6530                           
  6531                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 678:     AD1PRECON = 0;
  6532  01FD  002E               	movlb	14	; select bank14
  6533  01FE  0196               	clrf	22	;volatile
  6534                           
  6535                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 679:     AD2PRECON = 0;
  6536  01FF  002F               	movlb	15	; select bank15
  6537  0200  0196               	clrf	22	;volatile
  6538                           
  6539                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 680:     AD1ACQCON = 0;
  6540  0201  002E               	movlb	14	; select bank14
  6541  0202  0197               	clrf	23	;volatile
  6542                           
  6543                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 681:     AD2ACQCON = 0;
  6544  0203  002F               	movlb	15	; select bank15
  6545  0204  0197               	clrf	23	;volatile
  6546                           
  6547                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 682:     AD1CON0bits.ADON = 0;
  6548  0205  002E               	movlb	14	; select bank14
  6549  0206  1011               	bcf	17,0	;volatile
  6550                           
  6551                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 683:     AD2CON0bits.ADON = 0;
  6552  0207  002F               	movlb	15	; select bank15
  6553  0208  1011               	bcf	17,0	;volatile
  6554  0209  289D               	goto	l3839
  6555  020A                     __end_of_Sensor_Acq_ExecutePacket:	
  6556                           
  6557                           	psect	text35
  6558  0BC4                     __ptext35:	
  6559 ;; *************** function _TMR2_StopTimer *****************
  6560 ;; Defined at:
  6561 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;		None
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      void 
  6568 ;; Registers used:
  6569 ;;		None
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6575 ;;      Params:         0       0       0       0       0       0       0       0
  6576 ;;      Locals:         0       0       0       0       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0
  6578 ;;      Totals:         0       0       0       0       0       0       0       0
  6579 ;;Total ram usage:        0 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    4
  6582 ;; This function calls:
  6583 ;;		Nothing
  6584 ;; This function is called by:
  6585 ;;		_Sensor_Acq_ExecutePacket
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           
  6590                           ;psect for function _TMR2_StopTimer
  6591  0BC4                     _TMR2_StopTimer:	
  6592                           
  6593                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  6594                           
  6595                           ;incstack = 0
  6596                           ; Regs used in _TMR2_StopTimer: []
  6597  0BC4  0020               	movlb	0	; select bank0
  6598  0BC5  111C               	bcf	28,2	;volatile
  6599  0BC6  0008               	return
  6600  0BC7                     __end_of_TMR2_StopTimer:	
  6601                           
  6602                           	psect	text36
  6603  0BC1                     __ptext36:	
  6604 ;; *************** function _TMR2_StartTimer *****************
  6605 ;; Defined at:
  6606 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		None
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6620 ;;      Params:         0       0       0       0       0       0       0       0
  6621 ;;      Locals:         0       0       0       0       0       0       0       0
  6622 ;;      Temps:          0       0       0       0       0       0       0       0
  6623 ;;      Totals:         0       0       0       0       0       0       0       0
  6624 ;;Total ram usage:        0 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    4
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_Sensor_Acq_ExecutePacket
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _TMR2_StartTimer
  6636  0BC1                     _TMR2_StartTimer:	
  6637                           
  6638                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  6639                           
  6640                           ;incstack = 0
  6641                           ; Regs used in _TMR2_StartTimer: []
  6642  0BC1  0020               	movlb	0	; select bank0
  6643  0BC2  151C               	bsf	28,2	;volatile
  6644  0BC3  0008               	return
  6645  0BC4                     __end_of_TMR2_StartTimer:	
  6646                           
  6647                           	psect	text37
  6648  0BD2                     __ptext37:	
  6649 ;; *************** function _TMR2_LoadPeriodRegister *****************
  6650 ;; Defined at:
  6651 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  periodVal       1    wreg     unsigned char 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  periodVal       1    1[COMMON] unsigned char 
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  1    wreg      void 
  6658 ;; Registers used:
  6659 ;;		wreg
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6665 ;;      Params:         0       0       0       0       0       0       0       0
  6666 ;;      Locals:         1       0       0       0       0       0       0       0
  6667 ;;      Temps:          0       0       0       0       0       0       0       0
  6668 ;;      Totals:         1       0       0       0       0       0       0       0
  6669 ;;Total ram usage:        1 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    4
  6672 ;; This function calls:
  6673 ;;		Nothing
  6674 ;; This function is called by:
  6675 ;;		_Sensor_Acq_ExecutePacket
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _TMR2_LoadPeriodRegister
  6681  0BD2                     _TMR2_LoadPeriodRegister:	
  6682                           
  6683                           ;incstack = 0
  6684                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  6685                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  6686  0BD2  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  6687                           
  6688                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  6689  0BD3  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  6690  0BD4  0020               	movlb	0	; select bank0
  6691  0BD5  009B               	movwf	27	;volatile
  6692  0BD6  0008               	return
  6693  0BD7                     __end_of_TMR2_LoadPeriodRegister:	
  6694                           
  6695                           	psect	text38
  6696  020A                     __ptext38:	
  6697 ;; *************** function _Sensor_loadADCSettings *****************
  6698 ;; Defined at:
  6699 ;;		line 445 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;  sensor          1    wreg     PTR struct .
  6702 ;;		 -> mtouch_sensor(36), 
  6703 ;;  adc_index       1    2[COMMON] unsigned char 
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;  sensor          1    9[COMMON] PTR struct .
  6706 ;;		 -> mtouch_sensor(36), 
  6707 ;;  addressOffse    1    8[COMMON] unsigned char 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6717 ;;      Params:         1       0       0       0       0       0       0       0
  6718 ;;      Locals:         4       0       0       0       0       0       0       0
  6719 ;;      Temps:          3       0       0       0       0       0       0       0
  6720 ;;      Totals:         8       0       0       0       0       0       0       0
  6721 ;;Total ram usage:        8 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:    5
  6724 ;; This function calls:
  6725 ;;		_Sensor_isCalibrated
  6726 ;;		_Sensor_isCalibratingAcqTime
  6727 ;; This function is called by:
  6728 ;;		_Sensor_Acq_ExecutePacket
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           
  6733                           ;psect for function _Sensor_loadADCSettings
  6734  020A                     _Sensor_loadADCSettings:	
  6735                           
  6736                           ;incstack = 0
  6737                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  6738                           ;Sensor_loadADCSettings@sensor stored from wreg
  6739  020A  00F9               	movwf	Sensor_loadADCSettings@sensor
  6740                           
  6741                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 446
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     if (sensor == ((void*)0))
  6742  020B  0879               	movf	Sensor_loadADCSettings@sensor,w
  6743  020C  1903               	btfsc	3,2
  6744  020D  0008               	return
  6745                           
  6746                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  6747  020E  0872               	movf	Sensor_loadADCSettings@adc_index,w
  6748  020F  1D03               	btfss	3,2
  6749  0210  2A14               	goto	l2767
  6750  0211  01F6               	clrf	_Sensor_loadADCSettings$1086
  6751  0212  01F7               	clrf	_Sensor_loadADCSettings$1086+1
  6752  0213  2A18               	goto	l539
  6753  0214                     l2767:	
  6754  0214  3080               	movlw	128
  6755  0215  00F6               	movwf	_Sensor_loadADCSettings$1086
  6756  0216  3000               	movlw	0
  6757  0217  00F7               	movwf	_Sensor_loadADCSettings$1086+1
  6758  0218                     l539:	
  6759  0218  0876               	movf	_Sensor_loadADCSettings$1086,w
  6760  0219  00F3               	movwf	??_Sensor_loadADCSettings
  6761  021A  0873               	movf	??_Sensor_loadADCSettings,w
  6762  021B  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  6763                           
  6764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  6765  021C  0A79               	incf	Sensor_loadADCSettings@sensor,w
  6766  021D  0086               	movwf	6
  6767  021E  0187               	clrf	7
  6768  021F  0801               	movf	1,w
  6769  0220  00F3               	movwf	??_Sensor_loadADCSettings
  6770  0221  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6771  0222  3E11               	addlw	17
  6772  0223  00F4               	movwf	??_Sensor_loadADCSettings+1
  6773  0224  01F5               	clrf	??_Sensor_loadADCSettings+2
  6774  0225  3007               	movlw	7
  6775  0226  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  6776  0227  0874               	movf	??_Sensor_loadADCSettings+1,w
  6777  0228  0086               	movwf	6
  6778  0229  0875               	movf	??_Sensor_loadADCSettings+2,w
  6779  022A  0087               	movwf	7
  6780  022B  0873               	movf	??_Sensor_loadADCSettings,w
  6781  022C  0081               	movwf	1
  6782                           
  6783                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  6784  022D  0879               	movf	Sensor_loadADCSettings@sensor,w
  6785  022E  3E05               	addlw	5
  6786  022F  0086               	movwf	6
  6787  0230  0187               	clrf	7
  6788  0231  0801               	movf	1,w
  6789  0232  00F3               	movwf	??_Sensor_loadADCSettings
  6790  0233  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6791  0234  3E19               	addlw	25
  6792  0235  00F4               	movwf	??_Sensor_loadADCSettings+1
  6793  0236  01F5               	clrf	??_Sensor_loadADCSettings+2
  6794  0237  3007               	movlw	7
  6795  0238  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  6796  0239  0874               	movf	??_Sensor_loadADCSettings+1,w
  6797  023A  0086               	movwf	6
  6798  023B  0875               	movf	??_Sensor_loadADCSettings+2,w
  6799  023C  0087               	movwf	7
  6800  023D  0873               	movf	??_Sensor_loadADCSettings,w
  6801  023E  0081               	movwf	1
  6802                           
  6803                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 454:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  6804  023F  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6805  0240  3E13               	addlw	19
  6806  0241  00F3               	movwf	??_Sensor_loadADCSettings
  6807  0242  01F4               	clrf	??_Sensor_loadADCSettings+1
  6808  0243  3007               	movlw	7
  6809  0244  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  6810  0245  0873               	movf	??_Sensor_loadADCSettings,w
  6811  0246  0086               	movwf	6
  6812  0247  0874               	movf	??_Sensor_loadADCSettings+1,w
  6813  0248  0087               	movwf	7
  6814  0249  3050               	movlw	80
  6815  024A  0081               	movwf	1
  6816                           
  6817                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  6818  024B  30FE               	movlw	254
  6819  024C  00F3               	movwf	??_Sensor_loadADCSettings
  6820  024D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6821  024E  3E18               	addlw	24
  6822  024F  0086               	movwf	6
  6823  0250  0187               	clrf	7
  6824  0251  3007               	movlw	7
  6825  0252  3D87               	addwfc	7,f
  6826  0253  0873               	movf	??_Sensor_loadADCSettings,w
  6827  0254  0581               	andwf	1,f
  6828                           
  6829                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:     if (Sensor_isCalibrated(sensor))
  6830  0255  0879               	movf	Sensor_loadADCSettings@sensor,w
  6831  0256  318C  2439  3182   	fcall	_Sensor_isCalibrated
  6832  0259  3A00               	xorlw	0
  6833  025A  1903               	skipnz
  6834  025B  2A6F               	goto	l2781
  6835                           
  6836                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 459:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  6837  025C  0879               	movf	Sensor_loadADCSettings@sensor,w
  6838  025D  3E02               	addlw	2
  6839  025E  0086               	movwf	6
  6840  025F  0187               	clrf	7
  6841  0260  0801               	movf	1,w
  6842  0261  00F3               	movwf	??_Sensor_loadADCSettings
  6843  0262  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6844  0263  3E16               	addlw	22
  6845  0264  00F4               	movwf	??_Sensor_loadADCSettings+1
  6846  0265  01F5               	clrf	??_Sensor_loadADCSettings+2
  6847  0266  3007               	movlw	7
  6848  0267  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  6849  0268  0874               	movf	??_Sensor_loadADCSettings+1,w
  6850  0269  0086               	movwf	6
  6851  026A  0875               	movf	??_Sensor_loadADCSettings+2,w
  6852  026B  0087               	movwf	7
  6853  026C  0873               	movf	??_Sensor_loadADCSettings,w
  6854  026D  0081               	movwf	1
  6855  026E  2A82               	goto	l2785
  6856  026F                     l2781:	
  6857                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  6858                           
  6859                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  6860                           
  6861                           
  6862                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 464:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  6863  026F  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6864  0270  3E16               	addlw	22
  6865  0271  00F3               	movwf	??_Sensor_loadADCSettings
  6866  0272  01F4               	clrf	??_Sensor_loadADCSettings+1
  6867  0273  3007               	movlw	7
  6868  0274  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  6869  0275  0873               	movf	??_Sensor_loadADCSettings,w
  6870  0276  0086               	movwf	6
  6871  0277  0874               	movf	??_Sensor_loadADCSettings+1,w
  6872  0278  0087               	movwf	7
  6873  0279  3020               	movlw	32
  6874  027A  0081               	movwf	1
  6875                           
  6876                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 465:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  6877  027B  0879               	movf	Sensor_loadADCSettings@sensor,w
  6878  027C  318C  2429  3182   	fcall	_Sensor_isCalibratingAcqTime
  6879  027F  3A00               	xorlw	0
  6880  0280  1903               	skipnz
  6881  0281  2A94               	goto	l2787
  6882  0282                     l2785:	
  6883                           
  6884                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 466:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  6885  0282  0879               	movf	Sensor_loadADCSettings@sensor,w
  6886  0283  3E03               	addlw	3
  6887  0284  0086               	movwf	6
  6888  0285  0187               	clrf	7
  6889  0286  0801               	movf	1,w
  6890  0287  00F3               	movwf	??_Sensor_loadADCSettings
  6891  0288  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6892  0289  3E17               	addlw	23
  6893  028A  00F4               	movwf	??_Sensor_loadADCSettings+1
  6894  028B  01F5               	clrf	??_Sensor_loadADCSettings+2
  6895  028C  3007               	movlw	7
  6896  028D  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  6897  028E  0874               	movf	??_Sensor_loadADCSettings+1,w
  6898  028F  0086               	movwf	6
  6899  0290  0875               	movf	??_Sensor_loadADCSettings+2,w
  6900  0291  0087               	movwf	7
  6901  0292  0873               	movf	??_Sensor_loadADCSettings,w
  6902  0293  2A9F               	goto	L6
  6903  0294                     l2787:	
  6904                           
  6905                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 468:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  6906  0294  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6907  0295  3E17               	addlw	23
  6908  0296  00F3               	movwf	??_Sensor_loadADCSettings
  6909  0297  01F4               	clrf	??_Sensor_loadADCSettings+1
  6910  0298  3007               	movlw	7
  6911  0299  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  6912  029A  0873               	movf	??_Sensor_loadADCSettings,w
  6913  029B  0086               	movwf	6
  6914  029C  0874               	movf	??_Sensor_loadADCSettings+1,w
  6915  029D  0087               	movwf	7
  6916  029E  3020               	movlw	32
  6917  029F                     L6:	
  6918  029F  0081               	movwf	1
  6919                           
  6920                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  6921                           
  6922                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 469:     }
  6923  02A0  0879               	movf	Sensor_loadADCSettings@sensor,w
  6924  02A1  3E04               	addlw	4
  6925  02A2  0086               	movwf	6
  6926  02A3  0187               	clrf	7
  6927  02A4  0801               	movf	1,w
  6928  02A5  00F3               	movwf	??_Sensor_loadADCSettings
  6929  02A6  01F4               	clrf	??_Sensor_loadADCSettings+1
  6930  02A7  3009               	movlw	9
  6931  02A8                     u1735:	
  6932  02A8  35F3               	lslf	??_Sensor_loadADCSettings,f
  6933  02A9  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  6934  02AA  0B89               	decfsz	9,f
  6935  02AB  2AA8               	goto	u1735
  6936  02AC  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  6937  02AD  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  6938  02AE  0086               	movwf	6
  6939  02AF  0187               	clrf	7
  6940  02B0  0873               	movf	??_Sensor_loadADCSettings,w
  6941  02B1  3FC0               	movwi [0]fsr1
  6942  02B2  0874               	movf	??_Sensor_loadADCSettings+1,w
  6943  02B3  3FC1               	movwi [1]fsr1
  6944  02B4  0008               	return
  6945  02B5                     __end_of_Sensor_loadADCSettings:	
  6946                           
  6947                           	psect	text39
  6948  0C39                     __ptext39:	
  6949 ;; *************** function _Sensor_isCalibrated *****************
  6950 ;; Defined at:
  6951 ;;		line 928 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;  sensor          1    wreg     PTR struct .
  6954 ;;		 -> mtouch_sensor(36), 
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;  sensor          1    1[COMMON] PTR struct .
  6957 ;;		 -> mtouch_sensor(36), 
  6958 ;; Return value:  Size  Location     Type
  6959 ;;                  1    wreg      _Bool 
  6960 ;; Registers used:
  6961 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6962 ;; Tracked objects:
  6963 ;;		On entry : 0/0
  6964 ;;		On exit  : 0/0
  6965 ;;		Unchanged: 0/0
  6966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6967 ;;      Params:         0       0       0       0       0       0       0       0
  6968 ;;      Locals:         1       0       0       0       0       0       0       0
  6969 ;;      Temps:          0       0       0       0       0       0       0       0
  6970 ;;      Totals:         1       0       0       0       0       0       0       0
  6971 ;;Total ram usage:        1 bytes
  6972 ;; Hardware stack levels used:    1
  6973 ;; Hardware stack levels required when called:    4
  6974 ;; This function calls:
  6975 ;;		Nothing
  6976 ;; This function is called by:
  6977 ;;		_Sensor_Acquisition
  6978 ;;		_Sensor_loadADCSettings
  6979 ;;		_Sensor_Acq_ExecutePacket
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           
  6984                           ;psect for function _Sensor_isCalibrated
  6985  0C39                     _Sensor_isCalibrated:	
  6986                           
  6987                           ;incstack = 0
  6988                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  6989                           ;Sensor_isCalibrated@sensor stored from wreg
  6990  0C39  00F1               	movwf	Sensor_isCalibrated@sensor
  6991                           
  6992                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          929: {;mcc_generated_files/mtouch/mtouch_sensor.c: 930:     return (_Bool)sensor->calibr
      +                          ated;
  6993  0C3A  0871               	movf	Sensor_isCalibrated@sensor,w
  6994  0C3B  3E08               	addlw	8
  6995  0C3C  0086               	movwf	6
  6996  0C3D  0187               	clrf	7
  6997  0C3E  0C01               	rrf	1,w
  6998  0C3F  0C89               	rrf	9,f
  6999  0C40  3901               	andlw	1
  7000  0C41  0008               	return
  7001  0C42                     __end_of_Sensor_isCalibrated:	
  7002                           
  7003                           	psect	text40
  7004  0CCB                     __ptext40:	
  7005 ;; *************** function _Sensor_isEnabled *****************
  7006 ;; Defined at:
  7007 ;;		line 863 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;  sensor          1    wreg     PTR struct .
  7010 ;;		 -> mtouch_sensor(36), 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  sensor          1    2[COMMON] PTR struct .
  7013 ;;		 -> mtouch_sensor(36), 
  7014 ;; Return value:  Size  Location     Type
  7015 ;;                  1    wreg      _Bool 
  7016 ;; Registers used:
  7017 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7018 ;; Tracked objects:
  7019 ;;		On entry : 0/0
  7020 ;;		On exit  : 0/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7023 ;;      Params:         0       0       0       0       0       0       0       0
  7024 ;;      Locals:         1       0       0       0       0       0       0       0
  7025 ;;      Temps:          1       0       0       0       0       0       0       0
  7026 ;;      Totals:         2       0       0       0       0       0       0       0
  7027 ;;Total ram usage:        2 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; Hardware stack levels required when called:    4
  7030 ;; This function calls:
  7031 ;;		Nothing
  7032 ;; This function is called by:
  7033 ;;		_Sensor_Service
  7034 ;;		_Sensor_postAcquisitionProcess
  7035 ;;		_Sensor_Acq_ExecutePacket
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           
  7040                           ;psect for function _Sensor_isEnabled
  7041  0CCB                     _Sensor_isEnabled:	
  7042                           
  7043                           ;incstack = 0
  7044                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  7045                           ;Sensor_isEnabled@sensor stored from wreg
  7046  0CCB  00F2               	movwf	Sensor_isEnabled@sensor
  7047                           
  7048                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 863: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 864: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 865:     if(sensor!=((void*)0))
  7049  0CCC  0872               	movf	Sensor_isEnabled@sensor,w
  7050  0CCD  1903               	btfsc	3,2
  7051  0CCE  2CD9               	goto	l2745
  7052                           
  7053                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 866:         return (_Bool)sensor->enabled;
  7054  0CCF  0872               	movf	Sensor_isEnabled@sensor,w
  7055  0CD0  3E08               	addlw	8
  7056  0CD1  0086               	movwf	6
  7057  0CD2  0187               	clrf	7
  7058  0CD3  0C01               	rrf	1,w
  7059  0CD4  00F1               	movwf	??_Sensor_isEnabled
  7060  0CD5  0CF1               	rrf	??_Sensor_isEnabled,f
  7061  0CD6  0C71               	rrf	??_Sensor_isEnabled,w
  7062  0CD7  3901               	andlw	1
  7063  0CD8  0008               	return
  7064  0CD9                     l2745:	
  7065                           
  7066                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868:         return 0;
  7067  0CD9  3000               	movlw	0
  7068  0CDA  0008               	return
  7069  0CDB                     __end_of_Sensor_isEnabled:	
  7070                           
  7071                           	psect	text41
  7072  0C67                     __ptext41:	
  7073 ;; *************** function _Sensor_isActive *****************
  7074 ;; Defined at:
  7075 ;;		line 890 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;  sensor          1    wreg     PTR struct .
  7078 ;;		 -> mtouch_sensor(36), 
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;  sensor          1    1[COMMON] PTR struct .
  7081 ;;		 -> mtouch_sensor(36), 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  1    wreg      _Bool 
  7084 ;; Registers used:
  7085 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7091 ;;      Params:         0       0       0       0       0       0       0       0
  7092 ;;      Locals:         1       0       0       0       0       0       0       0
  7093 ;;      Temps:          0       0       0       0       0       0       0       0
  7094 ;;      Totals:         1       0       0       0       0       0       0       0
  7095 ;;Total ram usage:        1 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    4
  7098 ;; This function calls:
  7099 ;;		Nothing
  7100 ;; This function is called by:
  7101 ;;		_Sensor_Acquisition
  7102 ;;		_Sensor_Acq_ExecutePacket
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           
  7107                           ;psect for function _Sensor_isActive
  7108  0C67                     _Sensor_isActive:	
  7109                           
  7110                           ;incstack = 0
  7111                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7112                           ;Sensor_isActive@sensor stored from wreg
  7113  0C67  00F1               	movwf	Sensor_isActive@sensor
  7114                           
  7115                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 890: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 891:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 892:     if(sensor == ((void*)0))
  7116  0C68  0871               	movf	Sensor_isActive@sensor,w
  7117  0C69  1D03               	btfss	3,2
  7118  0C6A  2C6D               	goto	l2755
  7119                           
  7120                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 893:         return 0;
  7121  0C6B  3000               	movlw	0
  7122  0C6C  0008               	return
  7123  0C6D                     l2755:	
  7124                           
  7125                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 895:     return (_Bool)sensor->active;
  7126  0C6D  0871               	movf	Sensor_isActive@sensor,w
  7127  0C6E  3E08               	addlw	8
  7128  0C6F  0086               	movwf	6
  7129  0C70  0187               	clrf	7
  7130  0C71  0C01               	rrf	1,w
  7131  0C72  3901               	andlw	1
  7132  0C73  0008               	return
  7133  0C74                     __end_of_Sensor_isActive:	
  7134                           
  7135                           	psect	text42
  7136  047A                     __ptext42:	
  7137 ;; *************** function _Sensor_autoCalibration *****************
  7138 ;; Defined at:
  7139 ;;		line 696 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  sensor          1    wreg     PTR struct .
  7142 ;;		 -> mtouch_sensor(36), 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  sensor          1   10[COMMON] PTR struct .
  7145 ;;		 -> mtouch_sensor(36), 
  7146 ;;  adcIndex        1    9[COMMON] unsigned char 
  7147 ;; Return value:  Size  Location     Type
  7148 ;;                  1    wreg      void 
  7149 ;; Registers used:
  7150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7156 ;;      Params:         0       0       0       0       0       0       0       0
  7157 ;;      Locals:         2       0       0       0       0       0       0       0
  7158 ;;      Temps:          4       0       0       0       0       0       0       0
  7159 ;;      Totals:         6       0       0       0       0       0       0       0
  7160 ;;Total ram usage:        6 bytes
  7161 ;; Hardware stack levels used:    1
  7162 ;; Hardware stack levels required when called:    5
  7163 ;; This function calls:
  7164 ;;		_Sensor_getScanGroupIndex
  7165 ;;		_Sensor_isCalibratingAcqTime
  7166 ;;		_Sensor_setCalibratAcqTime
  7167 ;;		_Sensor_setCalibrated
  7168 ;;		_abs
  7169 ;; This function is called by:
  7170 ;;		_Sensor_Acq_ExecutePacket
  7171 ;; This function uses a non-reentrant model
  7172 ;;
  7173                           
  7174                           
  7175                           ;psect for function _Sensor_autoCalibration
  7176  047A                     _Sensor_autoCalibration:	
  7177                           
  7178                           ;incstack = 0
  7179                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7180                           ;Sensor_autoCalibration@sensor stored from wreg
  7181  047A  00FA               	movwf	Sensor_autoCalibration@sensor
  7182                           
  7183                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 696: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 697: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 698:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  7184  047B  087A               	movf	Sensor_autoCalibration@sensor,w
  7185  047C  318E  26D6  3184   	fcall	_Sensor_getScanGroupIndex
  7186  047F  00F5               	movwf	??_Sensor_autoCalibration
  7187  0480  0875               	movf	??_Sensor_autoCalibration,w
  7188  0481  00F9               	movwf	Sensor_autoCalibration@adcIndex
  7189                           
  7190                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  7191  0482  087A               	movf	Sensor_autoCalibration@sensor,w
  7192  0483  318C  2429  3184   	fcall	_Sensor_isCalibratingAcqTime
  7193  0486  3A00               	xorlw	0
  7194  0487  1D03               	skipz
  7195  0488  2CB9               	goto	l2801
  7196                           
  7197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 702:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  7198  0489  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  7199  048A  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  7200  048B  0086               	movwf	6
  7201  048C  0187               	clrf	7
  7202  048D  3F40               	moviw [0]fsr1
  7203  048E  00F5               	movwf	??_Sensor_autoCalibration
  7204  048F  3F41               	moviw [1]fsr1
  7205  0490  00F6               	movwf	??_Sensor_autoCalibration+1
  7206  0491  087A               	movf	Sensor_autoCalibration@sensor,w
  7207  0492  3E04               	addlw	4
  7208  0493  0086               	movwf	6
  7209  0494  0187               	clrf	7
  7210  0495  0801               	movf	1,w
  7211  0496  00F7               	movwf	??_Sensor_autoCalibration+2
  7212  0497  01F8               	clrf	??_Sensor_autoCalibration+3
  7213  0498  3009               	movlw	9
  7214  0499                     u1755:	
  7215  0499  35F7               	lslf	??_Sensor_autoCalibration+2,f
  7216  049A  0DF8               	rlf	??_Sensor_autoCalibration+3,f
  7217  049B  0B89               	decfsz	9,f
  7218  049C  2C99               	goto	u1755
  7219  049D  0876               	movf	??_Sensor_autoCalibration+1,w
  7220  049E  0278               	subwf	??_Sensor_autoCalibration+3,w
  7221  049F  1D03               	skipz
  7222  04A0  2CA3               	goto	u1765
  7223  04A1  0875               	movf	??_Sensor_autoCalibration,w
  7224  04A2  0277               	subwf	??_Sensor_autoCalibration+2,w
  7225  04A3                     u1765:	
  7226  04A3  1803               	skipnc
  7227  04A4  2CB5               	goto	l2799
  7228                           
  7229                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 703:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 704:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  7230  04A5  3001               	movlw	1
  7231  04A6  00F5               	movwf	??_Sensor_autoCalibration
  7232  04A7  087A               	movf	Sensor_autoCalibration@sensor,w
  7233  04A8  3E05               	addlw	5
  7234  04A9  0086               	movwf	6
  7235  04AA  0187               	clrf	7
  7236  04AB  0875               	movf	??_Sensor_autoCalibration,w
  7237  04AC  0781               	addwf	1,f
  7238  04AD  300F               	movlw	15
  7239  04AE  0201               	subwf	1,w
  7240  04AF  1C03               	skipc
  7241  04B0  0008               	return
  7242                           
  7243                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  7244  04B1  087A               	movf	Sensor_autoCalibration@sensor,w
  7245  04B2  318C  245A         	fcall	_Sensor_setCalibratAcqTime
  7246  04B4  0008               	return
  7247  04B5                     l2799:	
  7248                           
  7249                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 708:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 709:              Sensor_setCalibratAcqTime(sensor);
  7250  04B5  087A               	movf	Sensor_autoCalibration@sensor,w
  7251  04B6  318C  245A         	fcall	_Sensor_setCalibratAcqTime
  7252  04B8  0008               	return
  7253  04B9                     l2801:	
  7254                           
  7255                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 713:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 714:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  7256  04B9  087A               	movf	Sensor_autoCalibration@sensor,w
  7257  04BA  3E04               	addlw	4
  7258  04BB  0086               	movwf	6
  7259  04BC  0187               	clrf	7
  7260  04BD  0801               	movf	1,w
  7261  04BE  00F5               	movwf	??_Sensor_autoCalibration
  7262  04BF  01F6               	clrf	??_Sensor_autoCalibration+1
  7263  04C0  35F5               	lslf	??_Sensor_autoCalibration,f
  7264  04C1  0DF6               	rlf	??_Sensor_autoCalibration+1,f
  7265  04C2  087A               	movf	Sensor_autoCalibration@sensor,w
  7266  04C3  3E06               	addlw	6
  7267  04C4  0086               	movwf	6
  7268  04C5  0187               	clrf	7
  7269  04C6  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  7270  04C7  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  7271  04C8  0084               	movwf	4
  7272  04C9  0185               	clrf	5
  7273  04CA  3F40               	moviw [0]fsr1
  7274  04CB  0200               	subwf	0,w
  7275  04CC  00F1               	movwf	abs@a
  7276  04CD  3101               	addfsr 0,1
  7277  04CE  3F41               	moviw [1]fsr1
  7278  04CF  3B00               	subwfb	0,w
  7279  04D0  00F2               	movwf	abs@a+1
  7280  04D1  318D  25B7  3184   	fcall	_abs
  7281  04D4  0876               	movf	??_Sensor_autoCalibration+1,w
  7282  04D5  0272               	subwf	?_abs+1,w
  7283  04D6  1D03               	skipz
  7284  04D7  2CDA               	goto	u1785
  7285  04D8  0875               	movf	??_Sensor_autoCalibration,w
  7286  04D9  0271               	subwf	?_abs,w
  7287  04DA                     u1785:	
  7288  04DA  1803               	skipnc
  7289  04DB  2CE8               	goto	l2807
  7290                           
  7291                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 715:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  7292  04DC  3020               	movlw	32
  7293  04DD  00F5               	movwf	??_Sensor_autoCalibration
  7294  04DE  087A               	movf	Sensor_autoCalibration@sensor,w
  7295  04DF  3E02               	addlw	2
  7296  04E0  0086               	movwf	6
  7297  04E1  0187               	clrf	7
  7298  04E2  0875               	movf	??_Sensor_autoCalibration,w
  7299  04E3  0081               	movwf	1
  7300                           
  7301                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             Sensor_setCalibrated(senso
      +                          r);
  7302  04E4  087A               	movf	Sensor_autoCalibration@sensor,w
  7303  04E5  318C  2442         	fcall	_Sensor_setCalibrated
  7304                           
  7305                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:         }
  7306  04E7  0008               	return
  7307  04E8                     l2807:	
  7308                           
  7309                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 724:             sensor->acquisition_time += (uint8_t)2;
  7310  04E8  3002               	movlw	2
  7311  04E9  00F5               	movwf	??_Sensor_autoCalibration
  7312  04EA  087A               	movf	Sensor_autoCalibration@sensor,w
  7313  04EB  3E03               	addlw	3
  7314  04EC  0086               	movwf	6
  7315  04ED  0187               	clrf	7
  7316  04EE  0875               	movf	??_Sensor_autoCalibration,w
  7317  04EF  0781               	addwf	1,f
  7318                           
  7319                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 725:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  7320  04F0  087A               	movf	Sensor_autoCalibration@sensor,w
  7321  04F1  3E03               	addlw	3
  7322  04F2  0086               	movwf	6
  7323  04F3  0187               	clrf	7
  7324  04F4  3020               	movlw	32
  7325  04F5  0201               	subwf	1,w
  7326  04F6  1C03               	skipc
  7327  04F7  0008               	return
  7328                           
  7329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 726:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 727:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  7330  04F8  3020               	movlw	32
  7331  04F9  00F5               	movwf	??_Sensor_autoCalibration
  7332  04FA  087A               	movf	Sensor_autoCalibration@sensor,w
  7333  04FB  3E02               	addlw	2
  7334  04FC  0086               	movwf	6
  7335  04FD  0187               	clrf	7
  7336  04FE  0875               	movf	??_Sensor_autoCalibration,w
  7337  04FF  0081               	movwf	1
  7338                           
  7339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:                 Sensor_setCalibrated(s
      +                          ensor);
  7340  0500  087A               	movf	Sensor_autoCalibration@sensor,w
  7341  0501  318C  2442         	fcall	_Sensor_setCalibrated
  7342  0503  0008               	return
  7343  0504                     __end_of_Sensor_autoCalibration:	
  7344                           
  7345                           	psect	text43
  7346  0DB7                     __ptext43:	
  7347 ;; *************** function _abs *****************
  7348 ;; Defined at:
  7349 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  a               2    1[COMMON] int 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  2    1[COMMON] int 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7363 ;;      Params:         2       0       0       0       0       0       0       0
  7364 ;;      Locals:         0       0       0       0       0       0       0       0
  7365 ;;      Temps:          2       0       0       0       0       0       0       0
  7366 ;;      Totals:         4       0       0       0       0       0       0       0
  7367 ;;Total ram usage:        4 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    4
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_Sensor_postAcquisitionProcess
  7374 ;;		_Sensor_Acq_ExecutePacket
  7375 ;;		_Sensor_autoCalibration
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           
  7380                           ;psect for function _abs
  7381  0DB7                     _abs:	
  7382                           
  7383                           ;incstack = 0
  7384                           ; Regs used in _abs: [wreg+status,2+status,0]
  7385  0DB7  0872               	movf	abs@a+1,w
  7386  0DB8  3A80               	xorlw	128
  7387  0DB9  00F3               	movwf	??_abs
  7388  0DBA  3080               	movlw	128
  7389  0DBB  0273               	subwf	??_abs,w
  7390  0DBC  1D03               	skipz
  7391  0DBD  2DC0               	goto	u1665
  7392  0DBE  3001               	movlw	1
  7393  0DBF  0271               	subwf	abs@a,w
  7394  0DC0                     u1665:	
  7395  0DC0  1803               	skipnc
  7396  0DC1  0008               	return
  7397  0DC2  0971               	comf	abs@a,w
  7398  0DC3  00F3               	movwf	??_abs
  7399  0DC4  0972               	comf	abs@a+1,w
  7400  0DC5  00F4               	movwf	??_abs+1
  7401  0DC6  0AF3               	incf	??_abs,f
  7402  0DC7  1903               	skipnz
  7403  0DC8  0AF4               	incf	??_abs+1,f
  7404  0DC9  0873               	movf	??_abs,w
  7405  0DCA  00F1               	movwf	?_abs
  7406  0DCB  0874               	movf	??_abs+1,w
  7407  0DCC  00F2               	movwf	?_abs+1
  7408  0DCD  0008               	return
  7409  0DCE                     __end_of_abs:	
  7410                           
  7411                           	psect	text44
  7412  0C42                     __ptext44:	
  7413 ;; *************** function _Sensor_setCalibrated *****************
  7414 ;; Defined at:
  7415 ;;		line 933 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;  sensor          1    wreg     PTR struct .
  7418 ;;		 -> mtouch_sensor(36), 
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;  sensor          1    1[COMMON] PTR struct .
  7421 ;;		 -> mtouch_sensor(36), 
  7422 ;; Return value:  Size  Location     Type
  7423 ;;                  1    wreg      void 
  7424 ;; Registers used:
  7425 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7426 ;; Tracked objects:
  7427 ;;		On entry : 0/0
  7428 ;;		On exit  : 0/0
  7429 ;;		Unchanged: 0/0
  7430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7431 ;;      Params:         0       0       0       0       0       0       0       0
  7432 ;;      Locals:         1       0       0       0       0       0       0       0
  7433 ;;      Temps:          0       0       0       0       0       0       0       0
  7434 ;;      Totals:         1       0       0       0       0       0       0       0
  7435 ;;Total ram usage:        1 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; Hardware stack levels required when called:    4
  7438 ;; This function calls:
  7439 ;;		Nothing
  7440 ;; This function is called by:
  7441 ;;		_Sensor_autoCalibration
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _Sensor_setCalibrated
  7447  0C42                     _Sensor_setCalibrated:	
  7448                           
  7449                           ;incstack = 0
  7450                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  7451                           ;Sensor_setCalibrated@sensor stored from wreg
  7452  0C42  00F1               	movwf	Sensor_setCalibrated@sensor
  7453                           
  7454                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 933: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          934: {;mcc_generated_files/mtouch/mtouch_sensor.c: 935:     sensor->calibrated = 1;
  7455  0C43  0871               	movf	Sensor_setCalibrated@sensor,w
  7456  0C44  3E08               	addlw	8
  7457  0C45  0086               	movwf	6
  7458  0C46  0187               	clrf	7
  7459  0C47  1501               	bsf	1,2
  7460                           
  7461                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 936:     sensor->acqTime_cal = 0;
  7462  0C48  0871               	movf	Sensor_setCalibrated@sensor,w
  7463  0C49  3E08               	addlw	8
  7464  0C4A  0086               	movwf	6
  7465  0C4B  0187               	clrf	7
  7466  0C4C  1201               	bcf	1,4
  7467  0C4D  0008               	return
  7468  0C4E                     __end_of_Sensor_setCalibrated:	
  7469                           
  7470                           	psect	text45
  7471  0C5A                     __ptext45:	
  7472 ;; *************** function _Sensor_setCalibratAcqTime *****************
  7473 ;; Defined at:
  7474 ;;		line 939 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;  sensor          1    wreg     PTR struct .
  7477 ;;		 -> mtouch_sensor(36), 
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;  sensor          1    1[COMMON] PTR struct .
  7480 ;;		 -> mtouch_sensor(36), 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      void 
  7483 ;; Registers used:
  7484 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7490 ;;      Params:         0       0       0       0       0       0       0       0
  7491 ;;      Locals:         1       0       0       0       0       0       0       0
  7492 ;;      Temps:          0       0       0       0       0       0       0       0
  7493 ;;      Totals:         1       0       0       0       0       0       0       0
  7494 ;;Total ram usage:        1 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    4
  7497 ;; This function calls:
  7498 ;;		Nothing
  7499 ;; This function is called by:
  7500 ;;		_Sensor_autoCalibration
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           
  7505                           ;psect for function _Sensor_setCalibratAcqTime
  7506  0C5A                     _Sensor_setCalibratAcqTime:	
  7507                           
  7508                           ;incstack = 0
  7509                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  7510                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  7511  0C5A  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
  7512                           
  7513                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 939: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 940: {;mcc_generated_files/mtouch/mtouch_sensor.c: 941:     sensor->acqTime_cal = 1
      +                          ;
  7514  0C5B  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  7515  0C5C  3E08               	addlw	8
  7516  0C5D  0086               	movwf	6
  7517  0C5E  0187               	clrf	7
  7518  0C5F  1601               	bsf	1,4
  7519                           
  7520                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 942:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  7521  0C60  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  7522  0C61  3E03               	addlw	3
  7523  0C62  0086               	movwf	6
  7524  0C63  0187               	clrf	7
  7525  0C64  0181               	clrf	1
  7526  0C65  0A81               	incf	1,f
  7527  0C66  0008               	return
  7528  0C67                     __end_of_Sensor_setCalibratAcqTime:	
  7529                           
  7530                           	psect	text46
  7531  0C29                     __ptext46:	
  7532 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  7533 ;; Defined at:
  7534 ;;		line 945 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;  sensor          1    wreg     PTR struct .
  7537 ;;		 -> mtouch_sensor(36), 
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;  sensor          1    1[COMMON] PTR struct .
  7540 ;;		 -> mtouch_sensor(36), 
  7541 ;; Return value:  Size  Location     Type
  7542 ;;                  1    wreg      _Bool 
  7543 ;; Registers used:
  7544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7550 ;;      Params:         0       0       0       0       0       0       0       0
  7551 ;;      Locals:         1       0       0       0       0       0       0       0
  7552 ;;      Temps:          0       0       0       0       0       0       0       0
  7553 ;;      Totals:         1       0       0       0       0       0       0       0
  7554 ;;Total ram usage:        1 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; Hardware stack levels required when called:    4
  7557 ;; This function calls:
  7558 ;;		Nothing
  7559 ;; This function is called by:
  7560 ;;		_Sensor_loadADCSettings
  7561 ;;		_Sensor_autoCalibration
  7562 ;; This function uses a non-reentrant model
  7563 ;;
  7564                           
  7565                           
  7566                           ;psect for function _Sensor_isCalibratingAcqTime
  7567  0C29                     _Sensor_isCalibratingAcqTime:	
  7568                           
  7569                           ;incstack = 0
  7570                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  7571                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  7572  0C29  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
  7573                           
  7574                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 945: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 946: {;mcc_generated_files/mtouch/mtouch_sensor.c: 947:     return (_Bool)sensor
      +                          ->acqTime_cal;
  7575  0C2A  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
  7576  0C2B  3E08               	addlw	8
  7577  0C2C  0086               	movwf	6
  7578  0C2D  0187               	clrf	7
  7579  0C2E  0E01               	swapf	1,w
  7580  0C2F  3901               	andlw	1
  7581  0C30  0008               	return
  7582  0C31                     __end_of_Sensor_isCalibratingAcqTime:	
  7583                           
  7584                           	psect	text47
  7585  0ED6                     __ptext47:	
  7586 ;; *************** function _Sensor_getScanGroupIndex *****************
  7587 ;; Defined at:
  7588 ;;		line 362 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;  sensor          1    wreg     PTR struct .
  7591 ;;		 -> mtouch_sensor(36), 
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  sensor          1    3[COMMON] PTR struct .
  7594 ;;		 -> mtouch_sensor(36), 
  7595 ;;  sensorGroup     1    4[COMMON] unsigned char 
  7596 ;; Return value:  Size  Location     Type
  7597 ;;                  1    wreg      unsigned char 
  7598 ;; Registers used:
  7599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7600 ;; Tracked objects:
  7601 ;;		On entry : 0/0
  7602 ;;		On exit  : 0/0
  7603 ;;		Unchanged: 0/0
  7604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7605 ;;      Params:         0       0       0       0       0       0       0       0
  7606 ;;      Locals:         2       0       0       0       0       0       0       0
  7607 ;;      Temps:          2       0       0       0       0       0       0       0
  7608 ;;      Totals:         4       0       0       0       0       0       0       0
  7609 ;;Total ram usage:        4 bytes
  7610 ;; Hardware stack levels used:    1
  7611 ;; Hardware stack levels required when called:    4
  7612 ;; This function calls:
  7613 ;;		Nothing
  7614 ;; This function is called by:
  7615 ;;		_Sensor_postAcquisitionProcess
  7616 ;;		_Sensor_autoCalibration
  7617 ;;		_Sensor_RawSample_Update
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           
  7622                           ;psect for function _Sensor_getScanGroupIndex
  7623  0ED6                     _Sensor_getScanGroupIndex:	
  7624                           
  7625                           ;incstack = 0
  7626                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  7627                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  7628  0ED6  00F3               	movwf	Sensor_getScanGroupIndex@sensor
  7629                           
  7630                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 363: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 364:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 365:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  7631  0ED7  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
  7632  0ED8                     l2683:	
  7633                           
  7634                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 366:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 367:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  7635  0ED8  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  7636  0ED9  00F1               	movwf	??_Sensor_getScanGroupIndex
  7637  0EDA  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  7638  0EDB  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  7639  0EDC  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  7640  0EDD  3005               	movlw	low (_sensor_scan_group| (0+32768))
  7641  0EDE  0771               	addwf	??_Sensor_getScanGroupIndex,w
  7642  0EDF  0084               	movwf	4
  7643  0EE0  3090               	movlw	high (_sensor_scan_group| (0+32768))
  7644  0EE1  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  7645  0EE2  0085               	movwf	5
  7646  0EE3  0800               	movf	0,w	;code access
  7647  0EE4  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  7648  0EE5  1D03               	skipz
  7649  0EE6  2EE9               	goto	l2689
  7650  0EE7                     l2685:	
  7651                           
  7652                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 368:             return 0;
  7653  0EE7  3000               	movlw	0
  7654  0EE8  0008               	return
  7655  0EE9                     l2689:	
  7656                           
  7657                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 369:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  7658  0EE9  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  7659  0EEA  00F1               	movwf	??_Sensor_getScanGroupIndex
  7660  0EEB  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  7661  0EEC  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  7662  0EED  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  7663  0EEE  3006               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7664  0EEF  0771               	addwf	??_Sensor_getScanGroupIndex,w
  7665  0EF0  0084               	movwf	4
  7666  0EF1  3090               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7667  0EF2  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  7668  0EF3  0085               	movwf	5
  7669  0EF4  0800               	movf	0,w	;code access
  7670  0EF5  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  7671  0EF6  1D03               	skipz
  7672  0EF7  2EFA               	goto	l2695
  7673                           
  7674                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 370:             return 1;
  7675  0EF8  3001               	movlw	1
  7676  0EF9  0008               	return
  7677  0EFA                     l2695:	
  7678                           
  7679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 371:     }
  7680  0EFA  3001               	movlw	1
  7681  0EFB  00F1               	movwf	??_Sensor_getScanGroupIndex
  7682  0EFC  0871               	movf	??_Sensor_getScanGroupIndex,w
  7683  0EFD  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  7684  0EFE  3002               	movlw	2
  7685  0EFF  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  7686  0F00  1803               	btfsc	3,0
  7687  0F01  2EE7               	goto	l2685
  7688  0F02  2ED8               	goto	l2683
  7689  0F03                     __end_of_Sensor_getScanGroupIndex:	
  7690                           
  7691                           	psect	text48
  7692  0CBB                     __ptext48:	
  7693 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  7694 ;; Defined at:
  7695 ;;		line 247 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;		None
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;		None
  7700 ;; Return value:  Size  Location     Type
  7701 ;;                  1    wreg      void 
  7702 ;; Registers used:
  7703 ;;		wreg, status,2, status,0
  7704 ;; Tracked objects:
  7705 ;;		On entry : 0/0
  7706 ;;		On exit  : 0/0
  7707 ;;		Unchanged: 0/0
  7708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7709 ;;      Params:         0       0       0       0       0       0       0       0
  7710 ;;      Locals:         0       0       0       0       0       0       0       0
  7711 ;;      Temps:          0       0       0       0       0       0       0       0
  7712 ;;      Totals:         0       0       0       0       0       0       0       0
  7713 ;;Total ram usage:        0 bytes
  7714 ;; Hardware stack levels used:    1
  7715 ;; Hardware stack levels required when called:    4
  7716 ;; This function calls:
  7717 ;;		Nothing
  7718 ;; This function is called by:
  7719 ;;		_MTOUCH_Initialize
  7720 ;;		_Sensor_Acq_ExecutePacket
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           
  7725                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  7726  0CBB                     _MTOUCH_Sensor_Scan_Initialize:	
  7727                           
  7728                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 249:     T2CONbits.T2CKPS = 0x0;
  7729                           
  7730                           ;incstack = 0
  7731                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  7732  0CBB  30FC               	movlw	-4
  7733  0CBC  0020               	movlb	0	; select bank0
  7734  0CBD  059C               	andwf	28,f	;volatile
  7735                           
  7736                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 251:     AD1CON0 = (uint8_t)0;
  7737  0CBE  002E               	movlb	14	; select bank14
  7738  0CBF  0191               	clrf	17	;volatile
  7739                           
  7740                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 252:     AD2CON0 = (uint8_t)0;
  7741  0CC0  002F               	movlb	15	; select bank15
  7742  0CC1  0191               	clrf	17	;volatile
  7743                           
  7744                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 253:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  7745  0CC2  3090               	movlw	144
  7746  0CC3  002E               	movlb	14	; select bank14
  7747  0CC4  0092               	movwf	18	;volatile
  7748                           
  7749                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 254:     AD1CON3 = (uint8_t)0b01000000;
  7750  0CC5  3040               	movlw	64
  7751  0CC6  0094               	movwf	20	;volatile
  7752                           
  7753                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 255:     AD2CON3 = (uint8_t)0b01000000;
  7754  0CC7  3040               	movlw	64
  7755  0CC8  002F               	movlb	15	; select bank15
  7756  0CC9  0094               	movwf	20	;volatile
  7757  0CCA  0008               	return
  7758  0CCB                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  7759                           
  7760                           	psect	text49
  7761  0CAB                     __ptext49:	
  7762 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  7763 ;; Defined at:
  7764 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;  button          1   14[BANK0 ] enum E3070
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  1    wreg      void 
  7771 ;; Registers used:
  7772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7778 ;;      Params:         0       0       0       0       0       0       0       0
  7779 ;;      Locals:         0       1       0       0       0       0       0       0
  7780 ;;      Temps:          0       1       0       0       0       0       0       0
  7781 ;;      Totals:         0       2       0       0       0       0       0       0
  7782 ;;Total ram usage:        2 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    9
  7785 ;; This function calls:
  7786 ;;		_Button_Service
  7787 ;; This function is called by:
  7788 ;;		_MTOUCH_Service_Mainloop
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _MTOUCH_Button_ServiceAll
  7794  0CAB                     _MTOUCH_Button_ServiceAll:	
  7795                           
  7796                           ;mcc_generated_files/mtouch/mtouch_button.c: 199:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 202:     for (button = 0; button < 4u; button
      +                          ++)
  7797                           
  7798                           ;incstack = 0
  7799                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7800  0CAB  0020               	movlb	0	; select bank0
  7801  0CAC  01AE               	clrf	MTOUCH_Button_ServiceAll@button
  7802  0CAD                     l4339:	
  7803                           
  7804                           ;mcc_generated_files/mtouch/mtouch_button.c: 203:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 204:         Button_Service(button);
  7805  0CAD  082E               	movf	MTOUCH_Button_ServiceAll@button,w
  7806  0CAE  3187  2725  318C   	fcall	_Button_Service
  7807                           
  7808                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     }
  7809  0CB1  3001               	movlw	1
  7810  0CB2  0020               	movlb	0	; select bank0
  7811  0CB3  00AD               	movwf	??_MTOUCH_Button_ServiceAll
  7812  0CB4  082D               	movf	??_MTOUCH_Button_ServiceAll,w
  7813  0CB5  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
  7814  0CB6  3004               	movlw	4
  7815  0CB7  022E               	subwf	MTOUCH_Button_ServiceAll@button,w
  7816  0CB8  1803               	btfsc	3,0
  7817  0CB9  0008               	return
  7818  0CBA  2CAD               	goto	l4339
  7819  0CBB                     __end_of_MTOUCH_Button_ServiceAll:	
  7820                           
  7821                           	psect	text50
  7822  0725                     __ptext50:	
  7823 ;; *************** function _Button_Service *****************
  7824 ;; Defined at:
  7825 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  name            1    wreg     enum E3070
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  name            1   11[BANK0 ] enum E3070
  7830 ;;  button          1   12[BANK0 ] PTR struct .
  7831 ;;		 -> mtouch_button(64), 
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  1    wreg      void 
  7834 ;; Registers used:
  7835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7841 ;;      Params:         0       0       0       0       0       0       0       0
  7842 ;;      Locals:         0       2       0       0       0       0       0       0
  7843 ;;      Temps:          0       2       0       0       0       0       0       0
  7844 ;;      Totals:         0       4       0       0       0       0       0       0
  7845 ;;Total ram usage:        4 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    8
  7848 ;; This function calls:
  7849 ;;		_Button_Deviation_Update
  7850 ;;		_Button_Reading_Update
  7851 ;;		_Button_State_Initializing
  7852 ;;		_Button_State_NotPressed
  7853 ;;		_Button_State_Pressed
  7854 ;;		_MTOUCH_Button_Initialize
  7855 ;;		_MTOUCH_Sensor_isCalibrated
  7856 ;;		_MTOUCH_Sensor_wasSampled
  7857 ;; This function is called by:
  7858 ;;		_MTOUCH_Button_ServiceAll
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           
  7863                           ;psect for function _Button_Service
  7864  0725                     _Button_Service:	
  7865                           
  7866                           ;incstack = 0
  7867                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7868                           ;Button_Service@name stored from wreg
  7869  0725  0020               	movlb	0	; select bank0
  7870  0726  00AB               	movwf	Button_Service@name
  7871                           
  7872                           ;mcc_generated_files/mtouch/mtouch_button.c: 208: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 209: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 210:     mtouch_button_t* button = &mtouch_button[name];
  7873  0727  082B               	movf	Button_Service@name,w
  7874  0728  00A9               	movwf	??_Button_Service
  7875  0729  3003               	movlw	3
  7876  072A                     u3975:	
  7877  072A  35A9               	lslf	??_Button_Service,f
  7878  072B  3EFF               	addlw	-1
  7879  072C  1D03               	skipz
  7880  072D  2F2A               	goto	u3975
  7881  072E  3529               	lslf	??_Button_Service,w
  7882  072F  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7883  0730  00AA               	movwf	??_Button_Service+1
  7884  0731  082A               	movf	??_Button_Service+1,w
  7885  0732  00AC               	movwf	Button_Service@button
  7886                           
  7887                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  7888  0733  0A2C               	incf	Button_Service@button,w
  7889  0734  0086               	movwf	6
  7890  0735  3001               	movlw	1	; select bank2/3
  7891  0736  0087               	movwf	7
  7892  0737  0801               	movf	1,w
  7893  0738  318C  248F  3187   	fcall	_MTOUCH_Sensor_wasSampled
  7894  073B  3A00               	xorlw	0
  7895  073C  1903               	skipnz
  7896  073D  0008               	return
  7897  073E  0020               	movlb	0	; select bank0
  7898  073F  0A2C               	incf	Button_Service@button,w
  7899  0740  0086               	movwf	6
  7900  0741  3001               	movlw	1	; select bank2/3
  7901  0742  0087               	movwf	7
  7902  0743  0801               	movf	1,w
  7903  0744  318D  2533  3187   	fcall	_MTOUCH_Sensor_isCalibrated
  7904  0747  3A00               	xorlw	0
  7905  0748  1903               	skipnz
  7906  0749  0008               	return
  7907                           
  7908                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 214:         Button_Reading_Update(button);
  7909  074A  0020               	movlb	0	; select bank0
  7910  074B  082C               	movf	Button_Service@button,w
  7911  074C  318C  2481  3187   	fcall	_Button_Reading_Update
  7912                           
  7913                           ;mcc_generated_files/mtouch/mtouch_button.c: 215:         Button_Deviation_Update(button
      +                          );
  7914  074F  0020               	movlb	0	; select bank0
  7915  0750  082C               	movf	Button_Service@button,w
  7916  0751  3185  2504  3187   	fcall	_Button_Deviation_Update
  7917                           
  7918                           ;mcc_generated_files/mtouch/mtouch_button.c: 217:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  7919  0754  0020               	movlb	0	; select bank0
  7920  0755  082C               	movf	Button_Service@button,w
  7921  0756  3E02               	addlw	2
  7922  0757  0086               	movwf	6
  7923  0758  3001               	movlw	1	; select bank2/3
  7924  0759  0087               	movwf	7
  7925  075A  3003               	movlw	3
  7926  075B  0201               	subwf	1,w
  7927  075C  1C03               	skipc
  7928  075D  2F66               	goto	l4303
  7929                           
  7930                           ;mcc_generated_files/mtouch/mtouch_button.c: 218:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 219:             MTOUCH_Button_Initialize(button->name);
  7931  075E  082C               	movf	Button_Service@button,w
  7932  075F  0086               	movwf	6
  7933  0760  3001               	movlw	1	; select bank2/3
  7934  0761  0087               	movwf	7
  7935  0762  0801               	movf	1,w
  7936  0763  318F  2793  3187   	fcall	_MTOUCH_Button_Initialize
  7937  0766                     l4303:	
  7938                           
  7939                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  7940  0766  0020               	movlb	0	; select bank0
  7941  0767  082C               	movf	Button_Service@button,w
  7942  0768  00A9               	movwf	??_Button_Service
  7943  0769  0829               	movf	??_Button_Service,w
  7944  076A  00A4               	movwf	Button_State_Pressed@button
  7945  076B  082C               	movf	Button_Service@button,w
  7946  076C  3E02               	addlw	2
  7947  076D  0086               	movwf	6
  7948  076E  3001               	movlw	1	; select bank2/3
  7949  076F  0087               	movwf	7
  7950  0770  3501               	lslf	1,w
  7951  0771  3E63               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  7952  0772  0086               	movwf	6
  7953  0773  0187               	clrf	7
  7954  0774  3F41               	moviw [1]fsr1
  7955  0775  008A               	movwf	10
  7956  0776  3F40               	moviw [0]fsr1
  7957  0777  000A               	callw
  7958  0778  3187               	pagesel	$
  7959  0779  0008               	return
  7960  077A                     __end_of_Button_Service:	
  7961                           
  7962                           	psect	text51
  7963  0C8F                     __ptext51:	
  7964 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  7965 ;; Defined at:
  7966 ;;		line 967 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  sensor          1    wreg     enum E2854
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;  sensor          1    6[COMMON] enum E2854
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  1    wreg      _Bool 
  7973 ;; Registers used:
  7974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7980 ;;      Params:         0       0       0       0       0       0       0       0
  7981 ;;      Locals:         1       0       0       0       0       0       0       0
  7982 ;;      Temps:          1       0       0       0       0       0       0       0
  7983 ;;      Totals:         2       0       0       0       0       0       0       0
  7984 ;;Total ram usage:        2 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; Hardware stack levels required when called:    5
  7987 ;; This function calls:
  7988 ;;		___bmul
  7989 ;; This function is called by:
  7990 ;;		_Button_Service
  7991 ;; This function uses a non-reentrant model
  7992 ;;
  7993                           
  7994                           
  7995                           ;psect for function _MTOUCH_Sensor_wasSampled
  7996  0C8F                     _MTOUCH_Sensor_wasSampled:	
  7997                           
  7998                           ;incstack = 0
  7999                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  8000                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  8001  0C8F  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
  8002                           
  8003                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 967: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 968: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 969:     return (_Bool)mtouch_sensor[sensor].sampled;
  8004  0C90  3009               	movlw	9
  8005  0C91  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
  8006  0C92  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
  8007  0C93  00F1               	movwf	___bmul@multiplicand
  8008  0C94  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  8009  0C95  318C  24DB         	fcall	___bmul
  8010  0C97  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8011  0C98  0086               	movwf	6
  8012  0C99  0187               	clrf	7
  8013  0C9A  0801               	movf	1,w
  8014  0C9B  3901               	andlw	1
  8015  0C9C  0008               	return
  8016  0C9D                     __end_of_MTOUCH_Sensor_wasSampled:	
  8017                           
  8018                           	psect	text52
  8019  0D33                     __ptext52:	
  8020 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  8021 ;; Defined at:
  8022 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;  sensor          1    wreg     enum E2854
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;  sensor          1    6[COMMON] enum E2854
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      _Bool 
  8029 ;; Registers used:
  8030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8036 ;;      Params:         0       0       0       0       0       0       0       0
  8037 ;;      Locals:         1       0       0       0       0       0       0       0
  8038 ;;      Temps:          1       0       0       0       0       0       0       0
  8039 ;;      Totals:         2       0       0       0       0       0       0       0
  8040 ;;Total ram usage:        2 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    5
  8043 ;; This function calls:
  8044 ;;		___bmul
  8045 ;; This function is called by:
  8046 ;;		_Button_Service
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           
  8051                           ;psect for function _MTOUCH_Sensor_isCalibrated
  8052  0D33                     _MTOUCH_Sensor_isCalibrated:	
  8053                           
  8054                           ;incstack = 0
  8055                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8056                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  8057  0D33  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  8058                           
  8059                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 921: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 922:     if(sensor < 4u)
  8060  0D34  3004               	movlw	4
  8061  0D35  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  8062  0D36  1803               	skipnc
  8063  0D37  2D46               	goto	l4153
  8064                           
  8065                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 923:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  8066  0D38  3009               	movlw	9
  8067  0D39  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
  8068  0D3A  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
  8069  0D3B  00F1               	movwf	___bmul@multiplicand
  8070  0D3C  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  8071  0D3D  318C  24DB         	fcall	___bmul
  8072  0D3F  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8073  0D40  0086               	movwf	6
  8074  0D41  0187               	clrf	7
  8075  0D42  0C01               	rrf	1,w
  8076  0D43  0C89               	rrf	9,f
  8077  0D44  3901               	andlw	1
  8078  0D45  0008               	return
  8079  0D46                     l4153:	
  8080                           
  8081                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925:         return 0;
  8082  0D46  3000               	movlw	0
  8083  0D47  0008               	return
  8084  0D48                     __end_of_MTOUCH_Sensor_isCalibrated:	
  8085                           
  8086                           	psect	text53
  8087  02B5                     __ptext53:	
  8088 ;; *************** function _Button_State_NotPressed *****************
  8089 ;; Defined at:
  8090 ;;		line 245 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;  button          1    4[BANK0 ] PTR struct .
  8093 ;;		 -> mtouch_button(64), 
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;		None
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8105 ;;      Params:         0       1       0       0       0       0       0       0
  8106 ;;      Locals:         0       0       0       0       0       0       0       0
  8107 ;;      Temps:          0       2       0       0       0       0       0       0
  8108 ;;      Totals:         0       3       0       0       0       0       0       0
  8109 ;;Total ram usage:        3 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    7
  8112 ;; This function calls:
  8113 ;;		_Button_Baseline_Update
  8114 ;;		_Button_DefaultCallback
  8115 ;;		_MTOUCH_Button_Initialize
  8116 ;;		_myButtonPressedCallback
  8117 ;; This function is called by:
  8118 ;;		_Button_Service
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           
  8123                           ;psect for function _Button_State_NotPressed
  8124  02B5                     _Button_State_NotPressed:	
  8125                           
  8126                           ;mcc_generated_files/mtouch/mtouch_button.c: 245: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 246: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 248:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  8127                           
  8128                           ;incstack = 0
  8129                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8130  02B5  0020               	movlb	0	; select bank0
  8131  02B6  0824               	movf	Button_State_NotPressed@button,w
  8132  02B7  3E09               	addlw	9
  8133  02B8  0086               	movwf	6
  8134  02B9  3001               	movlw	1	; select bank2/3
  8135  02BA  0087               	movwf	7
  8136  02BB  0801               	movf	1,w
  8137  02BC  3A80               	xorlw	128
  8138  02BD  00A5               	movwf	??_Button_State_NotPressed
  8139  02BE  0824               	movf	Button_State_NotPressed@button,w
  8140  02BF  3E0E               	addlw	14
  8141  02C0  0086               	movwf	6
  8142  02C1  3001               	movlw	1	; select bank2/3
  8143  02C2  0087               	movwf	7
  8144  02C3  0301               	decf	1,w
  8145  02C4  3AFF               	xorlw	255
  8146  02C5  3A80               	xorlw	128
  8147  02C6  02A5               	subwf	??_Button_State_NotPressed,f
  8148  02C7  1803               	skipnc
  8149  02C8  2AF4               	goto	l4203
  8150                           
  8151                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 250:         (button->counter)++;
  8152  02C9  0824               	movf	Button_State_NotPressed@button,w
  8153  02CA  3E0A               	addlw	10
  8154  02CB  0086               	movwf	6
  8155  02CC  3001               	movlw	1	; select bank2/3
  8156  02CD  0087               	movwf	7
  8157  02CE  3001               	movlw	1
  8158  02CF  0781               	addwf	1,f
  8159  02D0  3141               	addfsr 1,1
  8160  02D1  1803               	skipnc
  8161  02D2  0A81               	incf	1,f
  8162                           
  8163                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  8164  02D3  0824               	movf	Button_State_NotPressed@button,w
  8165  02D4  3E0A               	addlw	10
  8166  02D5  0086               	movwf	6
  8167  02D6  3001               	movlw	1	; select bank2/3
  8168  02D7  0087               	movwf	7
  8169  02D8  3F40               	moviw [0]fsr1
  8170  02D9  00A5               	movwf	??_Button_State_NotPressed
  8171  02DA  3F41               	moviw [1]fsr1
  8172  02DB  00A6               	movwf	??_Button_State_NotPressed+1
  8173  02DC  3000               	movlw	0
  8174  02DD  0226               	subwf	??_Button_State_NotPressed+1,w
  8175  02DE  3041               	movlw	65
  8176  02DF  1903               	skipnz
  8177  02E0  0225               	subwf	??_Button_State_NotPressed,w
  8178  02E1  1C03               	skipc
  8179  02E2  2B35               	goto	l804
  8180                           
  8181                           ;mcc_generated_files/mtouch/mtouch_button.c: 252:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 253:             button->counter = (mtouch_button_statecounter_t)0;
  8182  02E3  0824               	movf	Button_State_NotPressed@button,w
  8183  02E4  3E0A               	addlw	10
  8184  02E5  0086               	movwf	6
  8185  02E6  3001               	movlw	1	; select bank2/3
  8186  02E7  0087               	movwf	7
  8187  02E8  3000               	movlw	0
  8188  02E9  3FC0               	movwi [0]fsr1
  8189  02EA  3FC1               	movwi [1]fsr1
  8190                           
  8191                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  8192  02EB  0824               	movf	Button_State_NotPressed@button,w
  8193  02EC  0086               	movwf	6
  8194  02ED  3001               	movlw	1	; select bank2/3
  8195  02EE  0087               	movwf	7
  8196  02EF  0801               	movf	1,w
  8197  02F0  318F  2793  3182   	fcall	_MTOUCH_Button_Initialize
  8198  02F3  2B35               	goto	l804
  8199  02F4                     l4203:	
  8200  02F4  0824               	movf	Button_State_NotPressed@button,w
  8201  02F5  3E09               	addlw	9
  8202  02F6  0086               	movwf	6
  8203  02F7  3001               	movlw	1	; select bank2/3
  8204  02F8  0087               	movwf	7
  8205  02F9  0801               	movf	1,w
  8206  02FA  00A5               	movwf	??_Button_State_NotPressed
  8207  02FB  01A6               	clrf	??_Button_State_NotPressed+1
  8208  02FC  1BA5               	btfsc	??_Button_State_NotPressed,7
  8209  02FD  03A6               	decf	??_Button_State_NotPressed+1,f
  8210  02FE  0824               	movf	Button_State_NotPressed@button,w
  8211  02FF  3E0E               	addlw	14
  8212  0300  0086               	movwf	6
  8213  0301  3001               	movlw	1	; select bank2/3
  8214  0302  0087               	movwf	7
  8215  0303  0826               	movf	??_Button_State_NotPressed+1,w
  8216  0304  3A80               	xorlw	128
  8217  0305  3C80               	sublw	128
  8218  0306  1D03               	skipz
  8219  0307  2B0A               	goto	u3875
  8220  0308  0825               	movf	??_Button_State_NotPressed,w
  8221  0309  0201               	subwf	1,w
  8222  030A                     u3875:	
  8223  030A  1803               	skipnc
  8224  030B  2B2C               	goto	l4209
  8225                           
  8226                           ;mcc_generated_files/mtouch/mtouch_button.c: 259:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 261:         button->state = MTOUCH_BUTTON_STATE_pressed;
  8227  030C  3002               	movlw	2
  8228  030D  0020               	movlb	0	; select bank0
  8229  030E  00A5               	movwf	??_Button_State_NotPressed
  8230  030F  0824               	movf	Button_State_NotPressed@button,w
  8231  0310  3E02               	addlw	2
  8232  0311  0086               	movwf	6
  8233  0312  3001               	movlw	1	; select bank2/3
  8234  0313  0087               	movwf	7
  8235  0314  0825               	movf	??_Button_State_NotPressed,w
  8236  0315  0081               	movwf	1
  8237                           
  8238                           ;mcc_generated_files/mtouch/mtouch_button.c: 262:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8239  0316  0824               	movf	Button_State_NotPressed@button,w
  8240  0317  3E0A               	addlw	10
  8241  0318  0086               	movwf	6
  8242  0319  3001               	movlw	1	; select bank2/3
  8243  031A  0087               	movwf	7
  8244  031B  3000               	movlw	0
  8245  031C  3FC0               	movwi [0]fsr1
  8246  031D  3FC1               	movwi [1]fsr1
  8247                           
  8248                           ;mcc_generated_files/mtouch/mtouch_button.c: 263:         callback_pressed(button->name)
      +                          ;
  8249  031E  0824               	movf	Button_State_NotPressed@button,w
  8250  031F  0086               	movwf	6
  8251  0320  3001               	movlw	1	; select bank2/3
  8252  0321  0087               	movwf	7
  8253  0322  0801               	movf	1,w
  8254  0323  00A5               	movwf	??_Button_State_NotPressed
  8255  0324  0825               	movf	??_Button_State_NotPressed,w
  8256  0325  00F1               	movwf	Button_DefaultCallback@button
  8257  0326  086C               	movf	_callback_pressed+1,w
  8258  0327  008A               	movwf	10
  8259  0328  086B               	movf	_callback_pressed,w
  8260  0329  000A               	callw
  8261  032A  3182               	pagesel	$
  8262                           
  8263                           ;mcc_generated_files/mtouch/mtouch_button.c: 264:     }
  8264  032B  2B35               	goto	l804
  8265  032C                     l4209:	
  8266                           
  8267                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->counter = (mtouch_button_statecounter_t)0;
  8268  032C  0020               	movlb	0	; select bank0
  8269  032D  0824               	movf	Button_State_NotPressed@button,w
  8270  032E  3E0A               	addlw	10
  8271  032F  0086               	movwf	6
  8272  0330  3001               	movlw	1	; select bank2/3
  8273  0331  0087               	movwf	7
  8274  0332  3000               	movlw	0
  8275  0333  3FC0               	movwi [0]fsr1
  8276  0334  3FC1               	movwi [1]fsr1
  8277  0335                     l804:	
  8278                           
  8279                           ;mcc_generated_files/mtouch/mtouch_button.c: 273:     (button->baseline_count)++;
  8280  0335  0020               	movlb	0	; select bank0
  8281  0336  0824               	movf	Button_State_NotPressed@button,w
  8282  0337  3E0C               	addlw	12
  8283  0338  0086               	movwf	6
  8284  0339  3001               	movlw	1	; select bank2/3
  8285  033A  0087               	movwf	7
  8286  033B  3001               	movlw	1
  8287  033C  0781               	addwf	1,f
  8288  033D  3141               	addfsr 1,1
  8289  033E  1803               	skipnc
  8290  033F  0A81               	incf	1,f
  8291                           
  8292                           ;mcc_generated_files/mtouch/mtouch_button.c: 274:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
  8293  0340  0824               	movf	Button_State_NotPressed@button,w
  8294  0341  3E0C               	addlw	12
  8295  0342  0086               	movwf	6
  8296  0343  3001               	movlw	1	; select bank2/3
  8297  0344  0087               	movwf	7
  8298  0345  0016               	moviw fsr1++
  8299  0346  3A40               	xorlw	64
  8300  0347  00A5               	movwf	??_Button_State_NotPressed
  8301  0348  0016               	moviw fsr1++
  8302  0349  04A5               	iorwf	??_Button_State_NotPressed,f
  8303  034A  1D03               	btfss	3,2
  8304  034B  0008               	return
  8305                           
  8306                           ;mcc_generated_files/mtouch/mtouch_button.c: 275:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 276:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  8307  034C  0824               	movf	Button_State_NotPressed@button,w
  8308  034D  3E0C               	addlw	12
  8309  034E  0086               	movwf	6
  8310  034F  3001               	movlw	1	; select bank2/3
  8311  0350  0087               	movwf	7
  8312  0351  3000               	movlw	0
  8313  0352  3FC0               	movwi [0]fsr1
  8314  0353  3FC1               	movwi [1]fsr1
  8315                           
  8316                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:         Button_Baseline_Update(button)
      +                          ;
  8317  0354  0824               	movf	Button_State_NotPressed@button,w
  8318  0355  3183  23EB         	fcall	_Button_Baseline_Update
  8319  0357  0008               	return
  8320  0358                     __end_of_Button_State_NotPressed:	
  8321                           
  8322                           	psect	text54
  8323  0667                     __ptext54:	
  8324 ;; *************** function _Button_State_Initializing *****************
  8325 ;; Defined at:
  8326 ;;		line 225 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  button          1    4[BANK0 ] PTR struct .
  8329 ;;		 -> mtouch_button(64), 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;		None
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      void 
  8334 ;; Registers used:
  8335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8341 ;;      Params:         0       1       0       0       0       0       0       0
  8342 ;;      Locals:         0       0       0       0       0       0       0       0
  8343 ;;      Temps:          0       4       0       0       0       0       0       0
  8344 ;;      Totals:         0       5       0       0       0       0       0       0
  8345 ;;Total ram usage:        5 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    7
  8348 ;; This function calls:
  8349 ;;		_Button_Baseline_Initialize
  8350 ;;		_Button_Baseline_Update
  8351 ;; This function is called by:
  8352 ;;		_Button_Service
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _Button_State_Initializing
  8358  0667                     _Button_State_Initializing:	
  8359                           
  8360                           ;mcc_generated_files/mtouch/mtouch_button.c: 225: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 226: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 228:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  8361                           
  8362                           ;incstack = 0
  8363                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8364  0667  0020               	movlb	0	; select bank0
  8365  0668  0824               	movf	Button_State_Initializing@button,w
  8366  0669  3E0A               	addlw	10
  8367  066A  0086               	movwf	6
  8368  066B  3001               	movlw	1	; select bank2/3
  8369  066C  0087               	movwf	7
  8370  066D  3F40               	moviw [0]fsr1
  8371  066E  00A5               	movwf	??_Button_State_Initializing
  8372  066F  3F41               	moviw [1]fsr1
  8373  0670  00A6               	movwf	??_Button_State_Initializing+1
  8374  0671  3000               	movlw	0
  8375  0672  0226               	subwf	??_Button_State_Initializing+1,w
  8376  0673  3009               	movlw	9
  8377  0674  1903               	skipnz
  8378  0675  0225               	subwf	??_Button_State_Initializing,w
  8379  0676  1803               	skipnc
  8380  0677  2E7D               	goto	l4187
  8381                           
  8382                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 230:         Button_Baseline_Initialize(button);
  8383  0678  0824               	movf	Button_State_Initializing@button,w
  8384  0679  318F  2703  3186   	fcall	_Button_Baseline_Initialize
  8385                           
  8386                           ;mcc_generated_files/mtouch/mtouch_button.c: 231:     } else {
  8387  067C  2E81               	goto	l4189
  8388  067D                     l4187:	
  8389                           
  8390                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         Button_Baseline_Update(button)
      +                          ;
  8391  067D  0824               	movf	Button_State_Initializing@button,w
  8392  067E  3183  23EB  3186   	fcall	_Button_Baseline_Update
  8393  0681                     l4189:	
  8394                           
  8395                           ;mcc_generated_files/mtouch/mtouch_button.c: 236:     (button->counter)++;
  8396  0681  0020               	movlb	0	; select bank0
  8397  0682  0824               	movf	Button_State_Initializing@button,w
  8398  0683  3E0A               	addlw	10
  8399  0684  0086               	movwf	6
  8400  0685  3001               	movlw	1	; select bank2/3
  8401  0686  0087               	movwf	7
  8402  0687  3001               	movlw	1
  8403  0688  0781               	addwf	1,f
  8404  0689  3141               	addfsr 1,1
  8405  068A  1803               	skipnc
  8406  068B  0A81               	incf	1,f
  8407                           
  8408                           ;mcc_generated_files/mtouch/mtouch_button.c: 237:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  8409  068C  0824               	movf	Button_State_Initializing@button,w
  8410  068D  3E0A               	addlw	10
  8411  068E  0086               	movwf	6
  8412  068F  3001               	movlw	1	; select bank2/3
  8413  0690  0087               	movwf	7
  8414  0691  3F40               	moviw [0]fsr1
  8415  0692  00A5               	movwf	??_Button_State_Initializing
  8416  0693  3F41               	moviw [1]fsr1
  8417  0694  00A6               	movwf	??_Button_State_Initializing+1
  8418  0695  3000               	movlw	0
  8419  0696  0226               	subwf	??_Button_State_Initializing+1,w
  8420  0697  3010               	movlw	16
  8421  0698  1903               	skipnz
  8422  0699  0225               	subwf	??_Button_State_Initializing,w
  8423  069A  1C03               	skipc
  8424  069B  0008               	return
  8425                           
  8426                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 239:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
  8427  069C  0824               	movf	Button_State_Initializing@button,w
  8428  069D  3E05               	addlw	5
  8429  069E  0086               	movwf	6
  8430  069F  3001               	movlw	1	; select bank2/3
  8431  06A0  0087               	movwf	7
  8432  06A1  3F40               	moviw [0]fsr1
  8433  06A2  00A5               	movwf	??_Button_State_Initializing
  8434  06A3  3F41               	moviw [1]fsr1
  8435  06A4  00A6               	movwf	??_Button_State_Initializing+1
  8436  06A5  3F42               	moviw [2]fsr1
  8437  06A6  00A7               	movwf	??_Button_State_Initializing+2
  8438  06A7  3F43               	moviw [3]fsr1
  8439  06A8  00A8               	movwf	??_Button_State_Initializing+3
  8440  06A9  3004               	movlw	4
  8441  06AA                     u3845:	
  8442  06AA  36A8               	lsrf	??_Button_State_Initializing+3,f
  8443  06AB  0CA7               	rrf	??_Button_State_Initializing+2,f
  8444  06AC  0CA6               	rrf	??_Button_State_Initializing+1,f
  8445  06AD  0CA5               	rrf	??_Button_State_Initializing,f
  8446  06AE  0B89               	decfsz	9,f
  8447  06AF  2EAA               	goto	u3845
  8448  06B0  0824               	movf	Button_State_Initializing@button,w
  8449  06B1  3E03               	addlw	3
  8450  06B2  0086               	movwf	6
  8451  06B3  3001               	movlw	1	; select bank2/3
  8452  06B4  0087               	movwf	7
  8453  06B5  0825               	movf	??_Button_State_Initializing,w
  8454  06B6  3FC0               	movwi [0]fsr1
  8455  06B7  0826               	movf	??_Button_State_Initializing+1,w
  8456  06B8  3FC1               	movwi [1]fsr1
  8457                           
  8458                           ;mcc_generated_files/mtouch/mtouch_button.c: 240:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
  8459  06B9  0824               	movf	Button_State_Initializing@button,w
  8460  06BA  3E02               	addlw	2
  8461  06BB  0086               	movwf	6
  8462  06BC  3001               	movlw	1	; select bank2/3
  8463  06BD  0087               	movwf	7
  8464  06BE  0181               	clrf	1
  8465  06BF  0A81               	incf	1,f
  8466                           
  8467                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8468  06C0  0824               	movf	Button_State_Initializing@button,w
  8469  06C1  3E0A               	addlw	10
  8470  06C2  0086               	movwf	6
  8471  06C3  3001               	movlw	1	; select bank2/3
  8472  06C4  0087               	movwf	7
  8473  06C5  3000               	movlw	0
  8474  06C6  3FC0               	movwi [0]fsr1
  8475  06C7  3FC1               	movwi [1]fsr1
  8476  06C8  0008               	return
  8477  06C9                     __end_of_Button_State_Initializing:	
  8478                           
  8479                           	psect	text55
  8480  0601                     __ptext55:	
  8481 ;; *************** function _Button_State_Pressed *****************
  8482 ;; Defined at:
  8483 ;;		line 281 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;  button          1    4[BANK0 ] PTR struct .
  8486 ;;		 -> mtouch_button(64), 
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;		None
  8489 ;; Return value:  Size  Location     Type
  8490 ;;                  1    wreg      void 
  8491 ;; Registers used:
  8492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8493 ;; Tracked objects:
  8494 ;;		On entry : 0/0
  8495 ;;		On exit  : 0/0
  8496 ;;		Unchanged: 0/0
  8497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8498 ;;      Params:         0       1       0       0       0       0       0       0
  8499 ;;      Locals:         0       0       0       0       0       0       0       0
  8500 ;;      Temps:          0       2       0       0       0       0       0       0
  8501 ;;      Totals:         0       3       0       0       0       0       0       0
  8502 ;;Total ram usage:        3 bytes
  8503 ;; Hardware stack levels used:    1
  8504 ;; Hardware stack levels required when called:    7
  8505 ;; This function calls:
  8506 ;;		_Button_DefaultCallback
  8507 ;;		_MTOUCH_Button_Initialize
  8508 ;;		_myButtonReleasedCallback
  8509 ;; This function is called by:
  8510 ;;		_Button_Service
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           
  8515                           ;psect for function _Button_State_Pressed
  8516  0601                     _Button_State_Pressed:	
  8517                           
  8518                           ;mcc_generated_files/mtouch/mtouch_button.c: 281: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 282: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 284:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
  8519                           
  8520                           ;incstack = 0
  8521                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8522  0601  0020               	movlb	0	; select bank0
  8523  0602  0824               	movf	Button_State_Pressed@button,w
  8524  0603  3E0A               	addlw	10
  8525  0604  0086               	movwf	6
  8526  0605  3001               	movlw	1	; select bank2/3
  8527  0606  0087               	movwf	7
  8528  0607  3F40               	moviw [0]fsr1
  8529  0608  00A5               	movwf	??_Button_State_Pressed
  8530  0609  3F41               	moviw [1]fsr1
  8531  060A  00A6               	movwf	??_Button_State_Pressed+1
  8532  060B  3007               	movlw	7
  8533  060C  0226               	subwf	??_Button_State_Pressed+1,w
  8534  060D  30D0               	movlw	208
  8535  060E  1903               	skipnz
  8536  060F  0225               	subwf	??_Button_State_Pressed,w
  8537  0610  1C03               	skipc
  8538  0611  2E29               	goto	l4219
  8539                           
  8540                           ;mcc_generated_files/mtouch/mtouch_button.c: 285:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 286:         MTOUCH_Button_Initialize(button->name);
  8541  0612  0824               	movf	Button_State_Pressed@button,w
  8542  0613  0086               	movwf	6
  8543  0614  3001               	movlw	1	; select bank2/3
  8544  0615  0087               	movwf	7
  8545  0616  0801               	movf	1,w
  8546  0617  318F  2793  3186   	fcall	_MTOUCH_Button_Initialize
  8547                           
  8548                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         callback_notPressed(button->na
      +                          me);
  8549  061A  0020               	movlb	0	; select bank0
  8550  061B  0824               	movf	Button_State_Pressed@button,w
  8551  061C  0086               	movwf	6
  8552  061D  3001               	movlw	1	; select bank2/3
  8553  061E  0087               	movwf	7
  8554  061F  0801               	movf	1,w
  8555  0620  00A5               	movwf	??_Button_State_Pressed
  8556  0621  0825               	movf	??_Button_State_Pressed,w
  8557  0622  00F1               	movwf	Button_DefaultCallback@button
  8558  0623  086A               	movf	_callback_notPressed+1,w
  8559  0624  008A               	movwf	10
  8560  0625  0869               	movf	_callback_notPressed,w
  8561  0626  000A               	callw
  8562  0627  3186               	pagesel	$
  8563                           
  8564                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:     }
  8565  0628  0008               	return
  8566  0629                     l4219:	
  8567  0629  0824               	movf	Button_State_Pressed@button,w
  8568  062A  3E09               	addlw	9
  8569  062B  0086               	movwf	6
  8570  062C  3001               	movlw	1	; select bank2/3
  8571  062D  0087               	movwf	7
  8572  062E  0801               	movf	1,w
  8573  062F  3A80               	xorlw	128
  8574  0630  00A5               	movwf	??_Button_State_Pressed
  8575  0631  0824               	movf	Button_State_Pressed@button,w
  8576  0632  3E0E               	addlw	14
  8577  0633  0086               	movwf	6
  8578  0634  3001               	movlw	1	; select bank2/3
  8579  0635  0087               	movwf	7
  8580  0636  0824               	movf	Button_State_Pressed@button,w
  8581  0637  3E0E               	addlw	14
  8582  0638  0084               	movwf	4
  8583  0639  3001               	movlw	1	; select bank2/3
  8584  063A  0085               	movwf	5
  8585  063B  3600               	lsrf	0,w
  8586  063C  0201               	subwf	1,w
  8587  063D  3A80               	xorlw	128
  8588  063E  02A5               	subwf	??_Button_State_Pressed,f
  8589  063F  1803               	skipnc
  8590  0640  0008               	return
  8591                           
  8592                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 293:         button->state = MTOUCH_BUTTON_STATE_notPressed;
  8593  0641  0824               	movf	Button_State_Pressed@button,w
  8594  0642  3E02               	addlw	2
  8595  0643  0086               	movwf	6
  8596  0644  3001               	movlw	1	; select bank2/3
  8597  0645  0087               	movwf	7
  8598  0646  0181               	clrf	1
  8599  0647  0A81               	incf	1,f
  8600                           
  8601                           ;mcc_generated_files/mtouch/mtouch_button.c: 294:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8602  0648  0824               	movf	Button_State_Pressed@button,w
  8603  0649  3E0A               	addlw	10
  8604  064A  0086               	movwf	6
  8605  064B  3001               	movlw	1	; select bank2/3
  8606  064C  0087               	movwf	7
  8607  064D  3000               	movlw	0
  8608  064E  3FC0               	movwi [0]fsr1
  8609  064F  3FC1               	movwi [1]fsr1
  8610                           
  8611                           ;mcc_generated_files/mtouch/mtouch_button.c: 295:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
  8612  0650  0824               	movf	Button_State_Pressed@button,w
  8613  0651  3E0C               	addlw	12
  8614  0652  0086               	movwf	6
  8615  0653  3001               	movlw	1	; select bank2/3
  8616  0654  0087               	movwf	7
  8617  0655  30FF               	movlw	255
  8618  0656  3FC0               	movwi [0]fsr1
  8619  0657  30FB               	movlw	251
  8620  0658  3FC1               	movwi [1]fsr1
  8621                           
  8622                           ;mcc_generated_files/mtouch/mtouch_button.c: 296:         callback_notPressed(button->na
      +                          me);
  8623  0659  0824               	movf	Button_State_Pressed@button,w
  8624  065A  0086               	movwf	6
  8625  065B  3001               	movlw	1	; select bank2/3
  8626  065C  0087               	movwf	7
  8627  065D  0801               	movf	1,w
  8628  065E  00A5               	movwf	??_Button_State_Pressed
  8629  065F  0825               	movf	??_Button_State_Pressed,w
  8630  0660  00F1               	movwf	Button_DefaultCallback@button
  8631  0661  086A               	movf	_callback_notPressed+1,w
  8632  0662  008A               	movwf	10
  8633  0663  0869               	movf	_callback_notPressed,w
  8634  0664  000A               	callw
  8635  0665  3186               	pagesel	$
  8636  0666  0008               	return
  8637  0667                     __end_of_Button_State_Pressed:	
  8638                           
  8639                           	psect	text56
  8640  0BBC                     __ptext56:	
  8641 ;; *************** function _myButtonPressedCallback *****************
  8642 ;; Defined at:
  8643 ;;		line 28 in file "main.c"
  8644 ;; Parameters:    Size  Location     Type
  8645 ;;  button          1    1[COMMON] enum E2914
  8646 ;; Auto vars:     Size  Location     Type
  8647 ;;		None
  8648 ;; Return value:  Size  Location     Type
  8649 ;;                  1    wreg      void 
  8650 ;; Registers used:
  8651 ;;		None
  8652 ;; Tracked objects:
  8653 ;;		On entry : 0/0
  8654 ;;		On exit  : 0/0
  8655 ;;		Unchanged: 0/0
  8656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8657 ;;      Params:         1       0       0       0       0       0       0       0
  8658 ;;      Locals:         0       0       0       0       0       0       0       0
  8659 ;;      Temps:          0       0       0       0       0       0       0       0
  8660 ;;      Totals:         1       0       0       0       0       0       0       0
  8661 ;;Total ram usage:        1 bytes
  8662 ;; Hardware stack levels used:    1
  8663 ;; Hardware stack levels required when called:    4
  8664 ;; This function calls:
  8665 ;;		Nothing
  8666 ;; This function is called by:
  8667 ;;		_main
  8668 ;;		_Button_State_NotPressed
  8669 ;; This function uses a non-reentrant model
  8670 ;;
  8671                           
  8672                           
  8673                           ;psect for function _myButtonPressedCallback
  8674  0BBC                     _myButtonPressedCallback:	
  8675                           
  8676                           ;incstack = 0
  8677                           ; Regs used in _myButtonPressedCallback: []
  8678  0BBC  0008               	return
  8679  0BBD                     __end_of_myButtonPressedCallback:	
  8680                           
  8681                           	psect	text57
  8682  0BBB                     __ptext57:	
  8683 ;; *************** function _Button_DefaultCallback *****************
  8684 ;; Defined at:
  8685 ;;		line 535 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;  button          1    1[COMMON] enum E3070
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;		None
  8690 ;; Return value:  Size  Location     Type
  8691 ;;                  1    wreg      void 
  8692 ;; Registers used:
  8693 ;;		None
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8699 ;;      Params:         1       0       0       0       0       0       0       0
  8700 ;;      Locals:         0       0       0       0       0       0       0       0
  8701 ;;      Temps:          0       0       0       0       0       0       0       0
  8702 ;;      Totals:         1       0       0       0       0       0       0       0
  8703 ;;Total ram usage:        1 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; Hardware stack levels required when called:    4
  8706 ;; This function calls:
  8707 ;;		Nothing
  8708 ;; This function is called by:
  8709 ;;		_Button_State_NotPressed
  8710 ;;		_Button_State_Pressed
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           
  8715                           ;psect for function _Button_DefaultCallback
  8716  0BBB                     _Button_DefaultCallback:	
  8717                           
  8718                           ;incstack = 0
  8719                           ; Regs used in _Button_DefaultCallback: []
  8720  0BBB  0008               	return
  8721  0BBC                     __end_of_Button_DefaultCallback:	
  8722                           
  8723                           	psect	text58
  8724  0BBA                     __ptext58:	
  8725 ;; *************** function _myButtonReleasedCallback *****************
  8726 ;; Defined at:
  8727 ;;		line 31 in file "main.c"
  8728 ;; Parameters:    Size  Location     Type
  8729 ;;  button          1    1[COMMON] enum E2914
  8730 ;; Auto vars:     Size  Location     Type
  8731 ;;		None
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  1    wreg      void 
  8734 ;; Registers used:
  8735 ;;		None
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8741 ;;      Params:         1       0       0       0       0       0       0       0
  8742 ;;      Locals:         0       0       0       0       0       0       0       0
  8743 ;;      Temps:          0       0       0       0       0       0       0       0
  8744 ;;      Totals:         1       0       0       0       0       0       0       0
  8745 ;;Total ram usage:        1 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    4
  8748 ;; This function calls:
  8749 ;;		Nothing
  8750 ;; This function is called by:
  8751 ;;		_main
  8752 ;;		_Button_State_Pressed
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           
  8757                           ;psect for function _myButtonReleasedCallback
  8758  0BBA                     _myButtonReleasedCallback:	
  8759                           
  8760                           ;incstack = 0
  8761                           ; Regs used in _myButtonReleasedCallback: []
  8762  0BBA  0008               	return
  8763  0BBB                     __end_of_myButtonReleasedCallback:	
  8764                           
  8765                           	psect	text59
  8766  0F93                     __ptext59:	
  8767 ;; *************** function _MTOUCH_Button_Initialize *****************
  8768 ;; Defined at:
  8769 ;;		line 167 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  name            1    wreg     enum E3070
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;  name            1    9[COMMON] enum E3070
  8774 ;;  button          1   10[COMMON] PTR struct .
  8775 ;;		 -> mtouch_button(64), 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  1    wreg      void 
  8778 ;; Registers used:
  8779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8785 ;;      Params:         0       0       0       0       0       0       0       0
  8786 ;;      Locals:         2       0       0       0       0       0       0       0
  8787 ;;      Temps:          2       0       0       0       0       0       0       0
  8788 ;;      Totals:         4       0       0       0       0       0       0       0
  8789 ;;Total ram usage:        4 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    6
  8792 ;; This function calls:
  8793 ;;		_MTOUCH_Sensor_Calibrate
  8794 ;; This function is called by:
  8795 ;;		_MTOUCH_Button_InitializeAll
  8796 ;;		_Button_Service
  8797 ;;		_Button_State_NotPressed
  8798 ;;		_Button_State_Pressed
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           
  8803                           ;psect for function _MTOUCH_Button_Initialize
  8804  0F93                     _MTOUCH_Button_Initialize:	
  8805                           
  8806                           ;incstack = 0
  8807                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  8808                           ;MTOUCH_Button_Initialize@name stored from wreg
  8809  0F93  00F9               	movwf	MTOUCH_Button_Initialize@name
  8810                           
  8811                           ;mcc_generated_files/mtouch/mtouch_button.c: 167: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 168: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 169:     mtouch_button_t* button = &mtouch_button[name];
  8812  0F94  0879               	movf	MTOUCH_Button_Initialize@name,w
  8813  0F95  00F7               	movwf	??_MTOUCH_Button_Initialize
  8814  0F96  3003               	movlw	3
  8815  0F97                     u3665:	
  8816  0F97  35F7               	lslf	??_MTOUCH_Button_Initialize,f
  8817  0F98  3EFF               	addlw	-1
  8818  0F99  1D03               	skipz
  8819  0F9A  2F97               	goto	u3665
  8820  0F9B  3577               	lslf	??_MTOUCH_Button_Initialize,w
  8821  0F9C  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  8822  0F9D  00F8               	movwf	??_MTOUCH_Button_Initialize+1
  8823  0F9E  0878               	movf	??_MTOUCH_Button_Initialize+1,w
  8824  0F9F  00FA               	movwf	MTOUCH_Button_Initialize@button
  8825                           
  8826                           ;mcc_generated_files/mtouch/mtouch_button.c: 171:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
  8827  0FA0  087A               	movf	MTOUCH_Button_Initialize@button,w
  8828  0FA1  3E02               	addlw	2
  8829  0FA2  0086               	movwf	6
  8830  0FA3  3001               	movlw	1	; select bank2/3
  8831  0FA4  0087               	movwf	7
  8832  0FA5  0181               	clrf	1
  8833                           
  8834                           ;mcc_generated_files/mtouch/mtouch_button.c: 172:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
  8835  0FA6  087A               	movf	MTOUCH_Button_Initialize@button,w
  8836  0FA7  3E05               	addlw	5
  8837  0FA8  0086               	movwf	6
  8838  0FA9  3001               	movlw	1	; select bank2/3
  8839  0FAA  0087               	movwf	7
  8840  0FAB  3000               	movlw	0
  8841  0FAC  3FC0               	movwi [0]fsr1
  8842  0FAD  3000               	movlw	0
  8843  0FAE  3FC1               	movwi [1]fsr1
  8844  0FAF  3FC2               	movwi [2]fsr1
  8845  0FB0  3FC3               	movwi [3]fsr1
  8846                           
  8847                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
  8848  0FB1  087A               	movf	MTOUCH_Button_Initialize@button,w
  8849  0FB2  3E0A               	addlw	10
  8850  0FB3  0086               	movwf	6
  8851  0FB4  3001               	movlw	1	; select bank2/3
  8852  0FB5  0087               	movwf	7
  8853  0FB6  3000               	movlw	0
  8854  0FB7  3FC0               	movwi [0]fsr1
  8855  0FB8  3FC1               	movwi [1]fsr1
  8856                           
  8857                           ;mcc_generated_files/mtouch/mtouch_button.c: 174:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
  8858  0FB9  087A               	movf	MTOUCH_Button_Initialize@button,w
  8859  0FBA  3E0C               	addlw	12
  8860  0FBB  0086               	movwf	6
  8861  0FBC  3001               	movlw	1	; select bank2/3
  8862  0FBD  0087               	movwf	7
  8863  0FBE  3000               	movlw	0
  8864  0FBF  3FC0               	movwi [0]fsr1
  8865  0FC0  3FC1               	movwi [1]fsr1
  8866                           
  8867                           ;mcc_generated_files/mtouch/mtouch_button.c: 176:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
  8868  0FC1  0A7A               	incf	MTOUCH_Button_Initialize@button,w
  8869  0FC2  0086               	movwf	6
  8870  0FC3  3001               	movlw	1	; select bank2/3
  8871  0FC4  0087               	movwf	7
  8872  0FC5  0801               	movf	1,w
  8873  0FC6  318C  24EC         	fcall	_MTOUCH_Sensor_Calibrate
  8874  0FC8  0008               	return
  8875  0FC9                     __end_of_MTOUCH_Button_Initialize:	
  8876                           
  8877                           	psect	text60
  8878  0CEC                     __ptext60:	
  8879 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  8880 ;; Defined at:
  8881 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;  sensor          1    wreg     enum E2854
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;  sensor          1    6[COMMON] enum E2854
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  1    wreg      void 
  8888 ;; Registers used:
  8889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8895 ;;      Params:         0       0       0       0       0       0       0       0
  8896 ;;      Locals:         1       0       0       0       0       0       0       0
  8897 ;;      Temps:          1       0       0       0       0       0       0       0
  8898 ;;      Totals:         2       0       0       0       0       0       0       0
  8899 ;;Total ram usage:        2 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    5
  8902 ;; This function calls:
  8903 ;;		___bmul
  8904 ;; This function is called by:
  8905 ;;		_MTOUCH_Sensor_Initialize
  8906 ;;		_MTOUCH_Button_Initialize
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           
  8911                           ;psect for function _MTOUCH_Sensor_Calibrate
  8912  0CEC                     _MTOUCH_Sensor_Calibrate:	
  8913                           
  8914                           ;incstack = 0
  8915                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8916                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
  8917  0CEC  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
  8918                           
  8919                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 914:     if(sensor < 4u)
  8920  0CED  3004               	movlw	4
  8921  0CEE  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
  8922  0CEF  1803               	skipnc
  8923  0CF0  0008               	return
  8924                           
  8925                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 916:         mtouch_sensor[sensor].calibrated = 0;
  8926  0CF1  3009               	movlw	9
  8927  0CF2  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
  8928  0CF3  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
  8929  0CF4  00F1               	movwf	___bmul@multiplicand
  8930  0CF5  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
  8931  0CF6  318C  24DB         	fcall	___bmul
  8932  0CF8  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8933  0CF9  0086               	movwf	6
  8934  0CFA  0187               	clrf	7
  8935  0CFB  1101               	bcf	1,2
  8936  0CFC  0008               	return
  8937  0CFD                     __end_of_MTOUCH_Sensor_Calibrate:	
  8938                           
  8939                           	psect	text61
  8940  03EB                     __ptext61:	
  8941 ;; *************** function _Button_Baseline_Update *****************
  8942 ;; Defined at:
  8943 ;;		line 489 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8944 ;; Parameters:    Size  Location     Type
  8945 ;;  button          1    wreg     PTR struct .
  8946 ;;		 -> mtouch_button(64), 
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;  button          1    7[COMMON] PTR struct .
  8949 ;;		 -> mtouch_button(64), 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8959 ;;      Params:         0       0       0       0       0       0       0       0
  8960 ;;      Locals:         1       0       0       0       0       0       0       0
  8961 ;;      Temps:          6       0       0       0       0       0       0       0
  8962 ;;      Totals:         7       0       0       0       0       0       0       0
  8963 ;;Total ram usage:        7 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    4
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		_Button_State_Initializing
  8970 ;;		_Button_State_NotPressed
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           
  8975                           ;psect for function _Button_Baseline_Update
  8976  03EB                     _Button_Baseline_Update:	
  8977                           
  8978                           ;incstack = 0
  8979                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  8980                           ;Button_Baseline_Update@button stored from wreg
  8981  03EB  00F7               	movwf	Button_Baseline_Update@button
  8982                           
  8983                           ;mcc_generated_files/mtouch/mtouch_button.c: 489: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 490: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 491:     if (GIE == (uint8_t)1)
  8984  03EC  1F8B               	btfss	11,7	;volatile
  8985  03ED  2C35               	goto	l3137
  8986                           
  8987                           ;mcc_generated_files/mtouch/mtouch_button.c: 492:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 493:         GIE = (uint8_t)0;
  8988  03EE  138B               	bcf	11,7	;volatile
  8989                           
  8990                           ;mcc_generated_files/mtouch/mtouch_button.c: 494:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
  8991  03EF  0877               	movf	Button_Baseline_Update@button,w
  8992  03F0  3E05               	addlw	5
  8993  03F1  0086               	movwf	6
  8994  03F2  3001               	movlw	1	; select bank2/3
  8995  03F3  0087               	movwf	7
  8996  03F4  3F40               	moviw [0]fsr1
  8997  03F5  00F1               	movwf	??_Button_Baseline_Update
  8998  03F6  3F41               	moviw [1]fsr1
  8999  03F7  00F2               	movwf	??_Button_Baseline_Update+1
  9000  03F8  3F42               	moviw [2]fsr1
  9001  03F9  00F3               	movwf	??_Button_Baseline_Update+2
  9002  03FA  3F43               	moviw [3]fsr1
  9003  03FB  00F4               	movwf	??_Button_Baseline_Update+3
  9004  03FC  3004               	movlw	4
  9005  03FD                     u2305:	
  9006  03FD  36F4               	lsrf	??_Button_Baseline_Update+3,f
  9007  03FE  0CF3               	rrf	??_Button_Baseline_Update+2,f
  9008  03FF  0CF2               	rrf	??_Button_Baseline_Update+1,f
  9009  0400  0CF1               	rrf	??_Button_Baseline_Update,f
  9010  0401  0B89               	decfsz	9,f
  9011  0402  2BFD               	goto	u2305
  9012  0403  0877               	movf	Button_Baseline_Update@button,w
  9013  0404  3E05               	addlw	5
  9014  0405  0086               	movwf	6
  9015  0406  3001               	movlw	1	; select bank2/3
  9016  0407  0087               	movwf	7
  9017  0408  0871               	movf	??_Button_Baseline_Update,w
  9018  0409  0281               	subwf	1,f
  9019  040A  3141               	addfsr 1,1
  9020  040B  0872               	movf	??_Button_Baseline_Update+1,w
  9021  040C  3B81               	subwfb	1,f
  9022  040D  3141               	addfsr 1,1
  9023  040E  0873               	movf	??_Button_Baseline_Update+2,w
  9024  040F  3B81               	subwfb	1,f
  9025  0410  3141               	addfsr 1,1
  9026  0411  0874               	movf	??_Button_Baseline_Update+3,w
  9027  0412  3B81               	subwfb	1,f
  9028  0413  317D               	addfsr 1,-3
  9029                           
  9030                           ;mcc_generated_files/mtouch/mtouch_button.c: 495:         button->baseline += button->re
      +                          ading;
  9031  0414  0877               	movf	Button_Baseline_Update@button,w
  9032  0415  3E03               	addlw	3
  9033  0416  0086               	movwf	6
  9034  0417  3001               	movlw	1	; select bank2/3
  9035  0418  0087               	movwf	7
  9036  0419  3F40               	moviw [0]fsr1
  9037  041A  00F1               	movwf	??_Button_Baseline_Update
  9038  041B  3F41               	moviw [1]fsr1
  9039  041C  00F2               	movwf	??_Button_Baseline_Update+1
  9040  041D  0871               	movf	??_Button_Baseline_Update,w
  9041  041E  00F3               	movwf	??_Button_Baseline_Update+2
  9042  041F  0872               	movf	??_Button_Baseline_Update+1,w
  9043  0420  00F4               	movwf	??_Button_Baseline_Update+3
  9044  0421  01F5               	clrf	??_Button_Baseline_Update+4
  9045  0422  01F6               	clrf	??_Button_Baseline_Update+5
  9046  0423  0877               	movf	Button_Baseline_Update@button,w
  9047  0424  3E05               	addlw	5
  9048  0425  0086               	movwf	6
  9049  0426  3001               	movlw	1	; select bank2/3
  9050  0427  0087               	movwf	7
  9051  0428  0873               	movf	??_Button_Baseline_Update+2,w
  9052  0429  0781               	addwf	1,f
  9053  042A  3141               	addfsr 1,1
  9054  042B  0874               	movf	??_Button_Baseline_Update+3,w
  9055  042C  3D81               	addwfc	1,f
  9056  042D  3141               	addfsr 1,1
  9057  042E  0875               	movf	??_Button_Baseline_Update+4,w
  9058  042F  3D81               	addwfc	1,f
  9059  0430  3141               	addfsr 1,1
  9060  0431  0876               	movf	??_Button_Baseline_Update+5,w
  9061  0432  3D81               	addwfc	1,f
  9062                           
  9063                           ;mcc_generated_files/mtouch/mtouch_button.c: 496:         GIE = (uint8_t)1;
  9064  0433  178B               	bsf	11,7	;volatile
  9065                           
  9066                           ;mcc_generated_files/mtouch/mtouch_button.c: 497:     }
  9067  0434  0008               	return
  9068  0435                     l3137:	
  9069                           
  9070                           ;mcc_generated_files/mtouch/mtouch_button.c: 499:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 500:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
  9071  0435  0877               	movf	Button_Baseline_Update@button,w
  9072  0436  3E05               	addlw	5
  9073  0437  0086               	movwf	6
  9074  0438  3001               	movlw	1	; select bank2/3
  9075  0439  0087               	movwf	7
  9076  043A  3F40               	moviw [0]fsr1
  9077  043B  00F1               	movwf	??_Button_Baseline_Update
  9078  043C  3F41               	moviw [1]fsr1
  9079  043D  00F2               	movwf	??_Button_Baseline_Update+1
  9080  043E  3F42               	moviw [2]fsr1
  9081  043F  00F3               	movwf	??_Button_Baseline_Update+2
  9082  0440  3F43               	moviw [3]fsr1
  9083  0441  00F4               	movwf	??_Button_Baseline_Update+3
  9084  0442  3004               	movlw	4
  9085  0443                     u2315:	
  9086  0443  36F4               	lsrf	??_Button_Baseline_Update+3,f
  9087  0444  0CF3               	rrf	??_Button_Baseline_Update+2,f
  9088  0445  0CF2               	rrf	??_Button_Baseline_Update+1,f
  9089  0446  0CF1               	rrf	??_Button_Baseline_Update,f
  9090  0447  0B89               	decfsz	9,f
  9091  0448  2C43               	goto	u2315
  9092  0449  0877               	movf	Button_Baseline_Update@button,w
  9093  044A  3E05               	addlw	5
  9094  044B  0086               	movwf	6
  9095  044C  3001               	movlw	1	; select bank2/3
  9096  044D  0087               	movwf	7
  9097  044E  0871               	movf	??_Button_Baseline_Update,w
  9098  044F  0281               	subwf	1,f
  9099  0450  3141               	addfsr 1,1
  9100  0451  0872               	movf	??_Button_Baseline_Update+1,w
  9101  0452  3B81               	subwfb	1,f
  9102  0453  3141               	addfsr 1,1
  9103  0454  0873               	movf	??_Button_Baseline_Update+2,w
  9104  0455  3B81               	subwfb	1,f
  9105  0456  3141               	addfsr 1,1
  9106  0457  0874               	movf	??_Button_Baseline_Update+3,w
  9107  0458  3B81               	subwfb	1,f
  9108  0459  317D               	addfsr 1,-3
  9109                           
  9110                           ;mcc_generated_files/mtouch/mtouch_button.c: 501:         button->baseline += button->re
      +                          ading;
  9111  045A  0877               	movf	Button_Baseline_Update@button,w
  9112  045B  3E03               	addlw	3
  9113  045C  0086               	movwf	6
  9114  045D  3001               	movlw	1	; select bank2/3
  9115  045E  0087               	movwf	7
  9116  045F  3F40               	moviw [0]fsr1
  9117  0460  00F1               	movwf	??_Button_Baseline_Update
  9118  0461  3F41               	moviw [1]fsr1
  9119  0462  00F2               	movwf	??_Button_Baseline_Update+1
  9120  0463  0871               	movf	??_Button_Baseline_Update,w
  9121  0464  00F3               	movwf	??_Button_Baseline_Update+2
  9122  0465  0872               	movf	??_Button_Baseline_Update+1,w
  9123  0466  00F4               	movwf	??_Button_Baseline_Update+3
  9124  0467  01F5               	clrf	??_Button_Baseline_Update+4
  9125  0468  01F6               	clrf	??_Button_Baseline_Update+5
  9126  0469  0877               	movf	Button_Baseline_Update@button,w
  9127  046A  3E05               	addlw	5
  9128  046B  0086               	movwf	6
  9129  046C  3001               	movlw	1	; select bank2/3
  9130  046D  0087               	movwf	7
  9131  046E  0873               	movf	??_Button_Baseline_Update+2,w
  9132  046F  0781               	addwf	1,f
  9133  0470  3141               	addfsr 1,1
  9134  0471  0874               	movf	??_Button_Baseline_Update+3,w
  9135  0472  3D81               	addwfc	1,f
  9136  0473  3141               	addfsr 1,1
  9137  0474  0875               	movf	??_Button_Baseline_Update+4,w
  9138  0475  3D81               	addwfc	1,f
  9139  0476  3141               	addfsr 1,1
  9140  0477  0876               	movf	??_Button_Baseline_Update+5,w
  9141  0478  3D81               	addwfc	1,f
  9142  0479  0008               	return
  9143  047A                     __end_of_Button_Baseline_Update:	
  9144                           
  9145                           	psect	text62
  9146  0F03                     __ptext62:	
  9147 ;; *************** function _Button_Baseline_Initialize *****************
  9148 ;; Defined at:
  9149 ;;		line 483 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;  button          1    wreg     PTR struct .
  9152 ;;		 -> mtouch_button(64), 
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;  button          1    9[COMMON] PTR struct .
  9155 ;;		 -> mtouch_button(64), 
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      void 
  9158 ;; Registers used:
  9159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9165 ;;      Params:         0       0       0       0       0       0       0       0
  9166 ;;      Locals:         1       0       0       0       0       0       0       0
  9167 ;;      Temps:          0       4       0       0       0       0       0       0
  9168 ;;      Totals:         1       4       0       0       0       0       0       0
  9169 ;;Total ram usage:        5 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    6
  9172 ;; This function calls:
  9173 ;;		_MTOUCH_Sensor_RawSample_Get
  9174 ;; This function is called by:
  9175 ;;		_Button_State_Initializing
  9176 ;; This function uses a non-reentrant model
  9177 ;;
  9178                           
  9179                           
  9180                           ;psect for function _Button_Baseline_Initialize
  9181  0F03                     _Button_Baseline_Initialize:	
  9182                           
  9183                           ;incstack = 0
  9184                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9185                           ;Button_Baseline_Initialize@button stored from wreg
  9186  0F03  00F9               	movwf	Button_Baseline_Initialize@button
  9187                           
  9188                           ;mcc_generated_files/mtouch/mtouch_button.c: 483: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 484: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 485:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
  9189  0F04  0A79               	incf	Button_Baseline_Initialize@button,w
  9190  0F05  0086               	movwf	6
  9191  0F06  3001               	movlw	1	; select bank2/3
  9192  0F07  0087               	movwf	7
  9193  0F08  0801               	movf	1,w
  9194  0F09  318D  25A0  318F   	fcall	_MTOUCH_Sensor_RawSample_Get
  9195  0F0C  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  9196  0F0D  0020               	movlb	0	; select bank0
  9197  0F0E  00A0               	movwf	??_Button_Baseline_Initialize
  9198  0F0F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  9199  0F10  00A1               	movwf	??_Button_Baseline_Initialize+1
  9200  0F11  01A2               	clrf	??_Button_Baseline_Initialize+2
  9201  0F12  01A3               	clrf	??_Button_Baseline_Initialize+3
  9202  0F13  0879               	movf	Button_Baseline_Initialize@button,w
  9203  0F14  3E05               	addlw	5
  9204  0F15  0086               	movwf	6
  9205  0F16  3001               	movlw	1	; select bank2/3
  9206  0F17  0087               	movwf	7
  9207  0F18  0820               	movf	??_Button_Baseline_Initialize,w
  9208  0F19  3FC0               	movwi [0]fsr1
  9209  0F1A  0821               	movf	??_Button_Baseline_Initialize+1,w
  9210  0F1B  3FC1               	movwi [1]fsr1
  9211  0F1C  0822               	movf	??_Button_Baseline_Initialize+2,w
  9212  0F1D  3FC2               	movwi [2]fsr1
  9213  0F1E  0823               	movf	??_Button_Baseline_Initialize+3,w
  9214  0F1F  3FC3               	movwi [3]fsr1
  9215                           
  9216                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:     button->baseline <<= ((uint8_t)4u)
      +                          ;
  9217  0F20  0879               	movf	Button_Baseline_Initialize@button,w
  9218  0F21  3E05               	addlw	5
  9219  0F22  0086               	movwf	6
  9220  0F23  3001               	movlw	1	; select bank2/3
  9221  0F24  0087               	movwf	7
  9222  0F25  3004               	movlw	4
  9223  0F26                     u3675:	
  9224  0F26  3581               	lslf	1,f
  9225  0F27  3141               	addfsr 1,1
  9226  0F28  0D81               	rlf	1,f
  9227  0F29  3141               	addfsr 1,1
  9228  0F2A  0D81               	rlf	1,f
  9229  0F2B  3141               	addfsr 1,1
  9230  0F2C  0D81               	rlf	1,f
  9231  0F2D  317D               	addfsr 1,-3
  9232  0F2E  0B89               	decfsz	9,f
  9233  0F2F  2F26               	goto	u3675
  9234  0F30  0008               	return
  9235  0F31                     __end_of_Button_Baseline_Initialize:	
  9236                           
  9237                           	psect	text63
  9238  0C81                     __ptext63:	
  9239 ;; *************** function _Button_Reading_Update *****************
  9240 ;; Defined at:
  9241 ;;		line 456 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;  button          1    wreg     PTR struct .
  9244 ;;		 -> mtouch_button(64), 
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;  button          1    0[BANK0 ] PTR struct .
  9247 ;;		 -> mtouch_button(64), 
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  1    wreg      void 
  9250 ;; Registers used:
  9251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9257 ;;      Params:         0       0       0       0       0       0       0       0
  9258 ;;      Locals:         0       1       0       0       0       0       0       0
  9259 ;;      Temps:          0       0       0       0       0       0       0       0
  9260 ;;      Totals:         0       1       0       0       0       0       0       0
  9261 ;;Total ram usage:        1 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; Hardware stack levels required when called:    7
  9264 ;; This function calls:
  9265 ;;		_Button_Reading_Update_Helper
  9266 ;; This function is called by:
  9267 ;;		_Button_Service
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           
  9272                           ;psect for function _Button_Reading_Update
  9273  0C81                     _Button_Reading_Update:	
  9274                           
  9275                           ;incstack = 0
  9276                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9277                           ;Button_Reading_Update@button stored from wreg
  9278  0C81  0020               	movlb	0	; select bank0
  9279  0C82  00A0               	movwf	Button_Reading_Update@button
  9280                           
  9281                           ;mcc_generated_files/mtouch/mtouch_button.c: 456: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 457: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 458:     if (GIE == (uint8_t) 1)
  9282  0C83  1F8B               	btfss	11,7	;volatile
  9283  0C84  2C8B               	goto	l4181
  9284                           
  9285                           ;mcc_generated_files/mtouch/mtouch_button.c: 459:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 460:         GIE = (uint8_t) 0;
  9286  0C85  138B               	bcf	11,7	;volatile
  9287                           
  9288                           ;mcc_generated_files/mtouch/mtouch_button.c: 461:         Button_Reading_Update_Helper(b
      +                          utton);
  9289  0C86  0820               	movf	Button_Reading_Update@button,w
  9290  0C87  3187  277A         	fcall	_Button_Reading_Update_Helper
  9291                           
  9292                           ;mcc_generated_files/mtouch/mtouch_button.c: 462:         GIE = (uint8_t) 1;
  9293  0C89  178B               	bsf	11,7	;volatile
  9294                           
  9295                           ;mcc_generated_files/mtouch/mtouch_button.c: 463:     }
  9296  0C8A  0008               	return
  9297  0C8B                     l4181:	
  9298                           
  9299                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         Button_Reading_Update_Helper(button);
  9300  0C8B  0820               	movf	Button_Reading_Update@button,w
  9301  0C8C  3187  277A         	fcall	_Button_Reading_Update_Helper
  9302  0C8E  0008               	return
  9303  0C8F                     __end_of_Button_Reading_Update:	
  9304                           
  9305                           	psect	text64
  9306  077A                     __ptext64:	
  9307 ;; *************** function _Button_Reading_Update_Helper *****************
  9308 ;; Defined at:
  9309 ;;		line 470 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;  button          1    wreg     PTR struct .
  9312 ;;		 -> mtouch_button(64), 
  9313 ;; Auto vars:     Size  Location     Type
  9314 ;;  button          1   11[COMMON] PTR struct .
  9315 ;;		 -> mtouch_button(64), 
  9316 ;; Return value:  Size  Location     Type
  9317 ;;                  1    wreg      void 
  9318 ;; Registers used:
  9319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9325 ;;      Params:         0       0       0       0       0       0       0       0
  9326 ;;      Locals:         1       0       0       0       0       0       0       0
  9327 ;;      Temps:          2       0       0       0       0       0       0       0
  9328 ;;      Totals:         3       0       0       0       0       0       0       0
  9329 ;;Total ram usage:        3 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; Hardware stack levels required when called:    6
  9332 ;; This function calls:
  9333 ;;		_MTOUCH_Sensor_RawSample_Get
  9334 ;; This function is called by:
  9335 ;;		_Button_Reading_Update
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           
  9340                           ;psect for function _Button_Reading_Update_Helper
  9341  077A                     _Button_Reading_Update_Helper:	
  9342                           
  9343                           ;incstack = 0
  9344                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  9345                           ;Button_Reading_Update_Helper@button stored from wreg
  9346  077A  00FB               	movwf	Button_Reading_Update_Helper@button
  9347                           
  9348                           ;mcc_generated_files/mtouch/mtouch_button.c: 470: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 471: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 472:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
  9349  077B  087B               	movf	Button_Reading_Update_Helper@button,w
  9350  077C  3E02               	addlw	2
  9351  077D  0086               	movwf	6
  9352  077E  3001               	movlw	1	; select bank2/3
  9353  077F  0087               	movwf	7
  9354  0780  0801               	movf	1,w
  9355  0781  1903               	btfsc	3,2
  9356  0782  2FB6               	goto	l4097
  9357                           
  9358                           ;mcc_generated_files/mtouch/mtouch_button.c: 473:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 474:         button->reading -= button->reading>>((uint8_t)2u);
  9359  0783  087B               	movf	Button_Reading_Update_Helper@button,w
  9360  0784  3E03               	addlw	3
  9361  0785  0086               	movwf	6
  9362  0786  3001               	movlw	1	; select bank2/3
  9363  0787  0087               	movwf	7
  9364  0788  3F40               	moviw [0]fsr1
  9365  0789  00F9               	movwf	??_Button_Reading_Update_Helper
  9366  078A  3F41               	moviw [1]fsr1
  9367  078B  00FA               	movwf	??_Button_Reading_Update_Helper+1
  9368  078C  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
  9369  078D  0CF9               	rrf	??_Button_Reading_Update_Helper,f
  9370  078E  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
  9371  078F  0CF9               	rrf	??_Button_Reading_Update_Helper,f
  9372  0790  087B               	movf	Button_Reading_Update_Helper@button,w
  9373  0791  3E03               	addlw	3
  9374  0792  0086               	movwf	6
  9375  0793  3001               	movlw	1	; select bank2/3
  9376  0794  0087               	movwf	7
  9377  0795  0879               	movf	??_Button_Reading_Update_Helper,w
  9378  0796  0281               	subwf	1,f
  9379  0797  3141               	addfsr 1,1
  9380  0798  087A               	movf	??_Button_Reading_Update_Helper+1,w
  9381  0799  3B81               	subwfb	1,f
  9382  079A  317F               	addfsr 1,-1
  9383                           
  9384                           ;mcc_generated_files/mtouch/mtouch_button.c: 475:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
  9385  079B  0A7B               	incf	Button_Reading_Update_Helper@button,w
  9386  079C  0086               	movwf	6
  9387  079D  3001               	movlw	1	; select bank2/3
  9388  079E  0087               	movwf	7
  9389  079F  0801               	movf	1,w
  9390  07A0  318D  25A0         	fcall	_MTOUCH_Sensor_RawSample_Get
  9391  07A2  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  9392  07A3  00F9               	movwf	??_Button_Reading_Update_Helper
  9393  07A4  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  9394  07A5  00FA               	movwf	??_Button_Reading_Update_Helper+1
  9395  07A6  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
  9396  07A7  0CF9               	rrf	??_Button_Reading_Update_Helper,f
  9397  07A8  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
  9398  07A9  0CF9               	rrf	??_Button_Reading_Update_Helper,f
  9399  07AA  087B               	movf	Button_Reading_Update_Helper@button,w
  9400  07AB  3E03               	addlw	3
  9401  07AC  0086               	movwf	6
  9402  07AD  3001               	movlw	1	; select bank2/3
  9403  07AE  0087               	movwf	7
  9404  07AF  0879               	movf	??_Button_Reading_Update_Helper,w
  9405  07B0  0781               	addwf	1,f
  9406  07B1  3141               	addfsr 1,1
  9407  07B2  087A               	movf	??_Button_Reading_Update_Helper+1,w
  9408  07B3  3D81               	addwfc	1,f
  9409  07B4  317F               	addfsr 1,-1
  9410                           
  9411                           ;mcc_generated_files/mtouch/mtouch_button.c: 476:     }
  9412  07B5  0008               	return
  9413  07B6                     l4097:	
  9414                           
  9415                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 479:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
  9416  07B6  0A7B               	incf	Button_Reading_Update_Helper@button,w
  9417  07B7  0086               	movwf	6
  9418  07B8  3001               	movlw	1	; select bank2/3
  9419  07B9  0087               	movwf	7
  9420  07BA  0801               	movf	1,w
  9421  07BB  318D  25A0         	fcall	_MTOUCH_Sensor_RawSample_Get
  9422  07BD  087B               	movf	Button_Reading_Update_Helper@button,w
  9423  07BE  3E03               	addlw	3
  9424  07BF  0086               	movwf	6
  9425  07C0  3001               	movlw	1	; select bank2/3
  9426  07C1  0087               	movwf	7
  9427  07C2  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  9428  07C3  3FC0               	movwi [0]fsr1
  9429  07C4  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  9430  07C5  3FC1               	movwi [1]fsr1
  9431  07C6  0008               	return
  9432  07C7                     __end_of_Button_Reading_Update_Helper:	
  9433                           
  9434                           	psect	text65
  9435  0DA0                     __ptext65:	
  9436 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
  9437 ;; Defined at:
  9438 ;;		line 800 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;  name            1    wreg     enum E2854
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;  name            1    8[COMMON] enum E2854
  9443 ;; Return value:  Size  Location     Type
  9444 ;;                  2    5[COMMON] unsigned short 
  9445 ;; Registers used:
  9446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9452 ;;      Params:         2       0       0       0       0       0       0       0
  9453 ;;      Locals:         1       0       0       0       0       0       0       0
  9454 ;;      Temps:          1       0       0       0       0       0       0       0
  9455 ;;      Totals:         4       0       0       0       0       0       0       0
  9456 ;;Total ram usage:        4 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; Hardware stack levels required when called:    5
  9459 ;; This function calls:
  9460 ;;		___bmul
  9461 ;; This function is called by:
  9462 ;;		_Button_Reading_Update_Helper
  9463 ;;		_Button_Baseline_Initialize
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           
  9468                           ;psect for function _MTOUCH_Sensor_RawSample_Get
  9469  0DA0                     _MTOUCH_Sensor_RawSample_Get:	
  9470                           
  9471                           ;incstack = 0
  9472                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9473                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
  9474  0DA0  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
  9475                           
  9476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 800: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          801: {;mcc_generated_files/mtouch/mtouch_sensor.c: 802:     if (name < 4u)
  9477  0DA1  3004               	movlw	4
  9478  0DA2  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
  9479  0DA3  1803               	skipnc
  9480  0DA4  2DB4               	goto	l4023
  9481                           
  9482                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 803:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 804:         return mtouch_sensor[name].rawSample;
  9483  0DA5  3009               	movlw	9
  9484  0DA6  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
  9485  0DA7  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
  9486  0DA8  00F1               	movwf	___bmul@multiplicand
  9487  0DA9  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
  9488  0DAA  318C  24DB         	fcall	___bmul
  9489  0DAC  3EA6               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
  9490  0DAD  0086               	movwf	6
  9491  0DAE  0187               	clrf	7
  9492  0DAF  3F40               	moviw [0]fsr1
  9493  0DB0  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
  9494  0DB1  3F41               	moviw [1]fsr1
  9495  0DB2  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
  9496  0DB3  0008               	return
  9497  0DB4                     l4023:	
  9498                           
  9499                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:         return (mtouch_sensor_sample_t
      +                          )0;
  9500  0DB4  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
  9501  0DB5  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
  9502  0DB6  0008               	return
  9503  0DB7                     __end_of_MTOUCH_Sensor_RawSample_Get:	
  9504                           
  9505                           	psect	text66
  9506  0CDB                     __ptext66:	
  9507 ;; *************** function ___bmul *****************
  9508 ;; Defined at:
  9509 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
  9510 ;; Parameters:    Size  Location     Type
  9511 ;;  multiplier      1    wreg     unsigned char 
  9512 ;;  multiplicand    1    1[COMMON] unsigned char 
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;  multiplier      1    4[COMMON] unsigned char 
  9515 ;;  product         1    3[COMMON] unsigned char 
  9516 ;; Return value:  Size  Location     Type
  9517 ;;                  1    wreg      unsigned char 
  9518 ;; Registers used:
  9519 ;;		wreg, status,2, status,0
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9525 ;;      Params:         1       0       0       0       0       0       0       0
  9526 ;;      Locals:         2       0       0       0       0       0       0       0
  9527 ;;      Temps:          1       0       0       0       0       0       0       0
  9528 ;;      Totals:         4       0       0       0       0       0       0       0
  9529 ;;Total ram usage:        4 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:    4
  9532 ;; This function calls:
  9533 ;;		Nothing
  9534 ;; This function is called by:
  9535 ;;		_MTOUCH_Sensor_Initialize
  9536 ;;		_MTOUCH_Sensor_RawSample_Get
  9537 ;;		_MTOUCH_Sensor_Enable
  9538 ;;		_MTOUCH_Sensor_Calibrate
  9539 ;;		_MTOUCH_Sensor_isCalibrated
  9540 ;;		_MTOUCH_Sensor_wasSampled
  9541 ;;		_MTOUCH_Sensor_isAnySensorActive
  9542 ;;		_MTOUCH_Sensor_Disable
  9543 ;;		_MTOUCH_Sensor_isEnabled
  9544 ;;		_MTOUCH_Sensor_isActive
  9545 ;;		_MTOUCH_Sensor_AdditionalCap_Get
  9546 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
  9547 ;;		_MTOUCH_Sensor_PreChargeTime_Get
  9548 ;;		_MTOUCH_Sensor_Oversampling_Get
  9549 ;;		_MTOUCH_Sensor_Oversampling_Set
  9550 ;; This function uses a non-reentrant model
  9551 ;;
  9552                           
  9553                           
  9554                           ;psect for function ___bmul
  9555  0CDB                     ___bmul:	
  9556                           
  9557                           ;incstack = 0
  9558                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9559                           ;___bmul@multiplier stored from wreg
  9560  0CDB  00F4               	movwf	___bmul@multiplier
  9561  0CDC  01F3               	clrf	___bmul@product
  9562  0CDD                     l3797:	
  9563  0CDD  1C74               	btfss	___bmul@multiplier,0
  9564  0CDE  2CE3               	goto	l3801
  9565  0CDF  0871               	movf	___bmul@multiplicand,w
  9566  0CE0  00F2               	movwf	??___bmul
  9567  0CE1  0872               	movf	??___bmul,w
  9568  0CE2  07F3               	addwf	___bmul@product,f
  9569  0CE3                     l3801:	
  9570  0CE3  1003               	clrc
  9571  0CE4  0DF1               	rlf	___bmul@multiplicand,f
  9572  0CE5  1003               	clrc
  9573  0CE6  0CF4               	rrf	___bmul@multiplier,f
  9574  0CE7  0874               	movf	___bmul@multiplier,w
  9575  0CE8  1D03               	btfss	3,2
  9576  0CE9  2CDD               	goto	l3797
  9577  0CEA  0873               	movf	___bmul@product,w
  9578  0CEB  0008               	return
  9579  0CEC                     __end_of___bmul:	
  9580                           
  9581                           	psect	text67
  9582  0504                     __ptext67:	
  9583 ;; *************** function _Button_Deviation_Update *****************
  9584 ;; Defined at:
  9585 ;;		line 407 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;  button          1    wreg     PTR struct .
  9588 ;;		 -> mtouch_button(64), 
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;  button          1    0[BANK0 ] PTR struct .
  9591 ;;		 -> mtouch_button(64), 
  9592 ;;  deviation       4    1[BANK0 ] long 
  9593 ;; Return value:  Size  Location     Type
  9594 ;;                  1    wreg      void 
  9595 ;; Registers used:
  9596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9597 ;; Tracked objects:
  9598 ;;		On entry : 0/0
  9599 ;;		On exit  : 0/0
  9600 ;;		Unchanged: 0/0
  9601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9602 ;;      Params:         0       0       0       0       0       0       0       0
  9603 ;;      Locals:         0       5       0       0       0       0       0       0
  9604 ;;      Temps:         10       0       0       0       0       0       0       0
  9605 ;;      Totals:        10       5       0       0       0       0       0       0
  9606 ;;Total ram usage:       15 bytes
  9607 ;; Hardware stack levels used:    1
  9608 ;; Hardware stack levels required when called:    4
  9609 ;; This function calls:
  9610 ;;		Nothing
  9611 ;; This function is called by:
  9612 ;;		_Button_Service
  9613 ;; This function uses a non-reentrant model
  9614 ;;
  9615                           
  9616                           
  9617                           ;psect for function _Button_Deviation_Update
  9618  0504                     _Button_Deviation_Update:	
  9619                           
  9620                           ;incstack = 0
  9621                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  9622                           ;Button_Deviation_Update@button stored from wreg
  9623  0504  0020               	movlb	0	; select bank0
  9624  0505  00A0               	movwf	Button_Deviation_Update@button
  9625                           
  9626                           ;mcc_generated_files/mtouch/mtouch_button.c: 407: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 408: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 409:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 411:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
  9627  0506  0820               	movf	Button_Deviation_Update@button,w
  9628  0507  3E05               	addlw	5
  9629  0508  0086               	movwf	6
  9630  0509  3001               	movlw	1	; select bank2/3
  9631  050A  0087               	movwf	7
  9632  050B  3F40               	moviw [0]fsr1
  9633  050C  00F1               	movwf	??_Button_Deviation_Update
  9634  050D  3F41               	moviw [1]fsr1
  9635  050E  00F2               	movwf	??_Button_Deviation_Update+1
  9636  050F  3F42               	moviw [2]fsr1
  9637  0510  00F3               	movwf	??_Button_Deviation_Update+2
  9638  0511  3F43               	moviw [3]fsr1
  9639  0512  00F4               	movwf	??_Button_Deviation_Update+3
  9640  0513  3004               	movlw	4
  9641  0514                     u2475:	
  9642  0514  36F4               	lsrf	??_Button_Deviation_Update+3,f
  9643  0515  0CF3               	rrf	??_Button_Deviation_Update+2,f
  9644  0516  0CF2               	rrf	??_Button_Deviation_Update+1,f
  9645  0517  0CF1               	rrf	??_Button_Deviation_Update,f
  9646  0518  0B89               	decfsz	9,f
  9647  0519  2D14               	goto	u2475
  9648  051A  0820               	movf	Button_Deviation_Update@button,w
  9649  051B  3E03               	addlw	3
  9650  051C  0086               	movwf	6
  9651  051D  3001               	movlw	1	; select bank2/3
  9652  051E  0087               	movwf	7
  9653  051F  3F40               	moviw [0]fsr1
  9654  0520  00F5               	movwf	??_Button_Deviation_Update+4
  9655  0521  3F41               	moviw [1]fsr1
  9656  0522  00F6               	movwf	??_Button_Deviation_Update+5
  9657  0523  0875               	movf	??_Button_Deviation_Update+4,w
  9658  0524  00F7               	movwf	??_Button_Deviation_Update+6
  9659  0525  0876               	movf	??_Button_Deviation_Update+5,w
  9660  0526  00F8               	movwf	??_Button_Deviation_Update+7
  9661  0527  01F9               	clrf	??_Button_Deviation_Update+8
  9662  0528  01FA               	clrf	??_Button_Deviation_Update+9
  9663  0529  0871               	movf	??_Button_Deviation_Update,w
  9664  052A  02F7               	subwf	??_Button_Deviation_Update+6,f
  9665  052B  0872               	movf	??_Button_Deviation_Update+1,w
  9666  052C  3BF8               	subwfb	??_Button_Deviation_Update+7,f
  9667  052D  0873               	movf	??_Button_Deviation_Update+2,w
  9668  052E  3BF9               	subwfb	??_Button_Deviation_Update+8,f
  9669  052F  0874               	movf	??_Button_Deviation_Update+3,w
  9670  0530  3BFA               	subwfb	??_Button_Deviation_Update+9,f
  9671  0531  087A               	movf	??_Button_Deviation_Update+9,w
  9672  0532  00A4               	movwf	Button_Deviation_Update@deviation+3
  9673  0533  0879               	movf	??_Button_Deviation_Update+8,w
  9674  0534  00A3               	movwf	Button_Deviation_Update@deviation+2
  9675  0535  0878               	movf	??_Button_Deviation_Update+7,w
  9676  0536  00A2               	movwf	Button_Deviation_Update@deviation+1
  9677  0537  0877               	movf	??_Button_Deviation_Update+6,w
  9678  0538  00A1               	movwf	Button_Deviation_Update@deviation
  9679                           
  9680                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     deviation = deviation >> (button->
      +                          scaling);
  9681  0539  0821               	movf	Button_Deviation_Update@deviation,w
  9682  053A  00F1               	movwf	??_Button_Deviation_Update
  9683  053B  0822               	movf	Button_Deviation_Update@deviation+1,w
  9684  053C  00F2               	movwf	??_Button_Deviation_Update+1
  9685  053D  0823               	movf	Button_Deviation_Update@deviation+2,w
  9686  053E  00F3               	movwf	??_Button_Deviation_Update+2
  9687  053F  0824               	movf	Button_Deviation_Update@deviation+3,w
  9688  0540  00F4               	movwf	??_Button_Deviation_Update+3
  9689  0541  0820               	movf	Button_Deviation_Update@button,w
  9690  0542  3E0F               	addlw	15
  9691  0543  0086               	movwf	6
  9692  0544  3001               	movlw	1	; select bank2/3
  9693  0545  0087               	movwf	7
  9694  0546  0A01               	incf	1,w
  9695  0547  2D4C               	goto	u2480
  9696  0548                     u2485:	
  9697  0548  37F4               	asrf	??_Button_Deviation_Update+3,f
  9698  0549  0CF3               	rrf	??_Button_Deviation_Update+2,f
  9699  054A  0CF2               	rrf	??_Button_Deviation_Update+1,f
  9700  054B  0CF1               	rrf	??_Button_Deviation_Update,f
  9701  054C                     u2480:	
  9702  054C  0B89               	decfsz	9,f
  9703  054D  2D48               	goto	u2485
  9704  054E  0874               	movf	??_Button_Deviation_Update+3,w
  9705  054F  00A4               	movwf	Button_Deviation_Update@deviation+3
  9706  0550  0873               	movf	??_Button_Deviation_Update+2,w
  9707  0551  00A3               	movwf	Button_Deviation_Update@deviation+2
  9708  0552  0872               	movf	??_Button_Deviation_Update+1,w
  9709  0553  00A2               	movwf	Button_Deviation_Update@deviation+1
  9710  0554  0871               	movf	??_Button_Deviation_Update,w
  9711  0555  00A1               	movwf	Button_Deviation_Update@deviation
  9712                           
  9713                           ;mcc_generated_files/mtouch/mtouch_button.c: 417:     if (deviation > ((0x7f)))
  9714  0556  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
  9715  0557  2D6D               	goto	l3251
  9716  0558  0824               	movf	Button_Deviation_Update@deviation+3,w
  9717  0559  1D03               	btfss	3,2
  9718  055A  2D65               	goto	l3249
  9719  055B  0823               	movf	Button_Deviation_Update@deviation+2,w
  9720  055C  1D03               	btfss	3,2
  9721  055D  2D65               	goto	l3249
  9722  055E  0822               	movf	Button_Deviation_Update@deviation+1,w
  9723  055F  1D03               	btfss	3,2
  9724  0560  2D65               	goto	l3249
  9725  0561  3080               	movlw	128
  9726  0562  0221               	subwf	Button_Deviation_Update@deviation,w
  9727  0563  1C03               	btfss	3,0
  9728  0564  2D6D               	goto	l3251
  9729  0565                     l3249:	
  9730                           
  9731                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 419:         deviation = ((0x7f));
  9732  0565  3000               	movlw	0
  9733  0566  00A4               	movwf	Button_Deviation_Update@deviation+3
  9734  0567  3000               	movlw	0
  9735  0568  00A3               	movwf	Button_Deviation_Update@deviation+2
  9736  0569  3000               	movlw	0
  9737  056A  00A2               	movwf	Button_Deviation_Update@deviation+1
  9738  056B  307F               	movlw	127
  9739  056C  00A1               	movwf	Button_Deviation_Update@deviation
  9740  056D                     l3251:	
  9741                           
  9742                           ;mcc_generated_files/mtouch/mtouch_button.c: 421:     if (deviation < ((-1-0x7f)))
  9743  056D  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
  9744  056E  2D81               	goto	l3255
  9745  056F  3080               	movlw	128
  9746  0570  0221               	subwf	Button_Deviation_Update@deviation,w
  9747  0571  30FF               	movlw	255
  9748  0572  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
  9749  0573  30FF               	movlw	255
  9750  0574  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
  9751  0575  30FF               	movlw	255
  9752  0576  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
  9753  0577  1803               	btfsc	3,0
  9754  0578  2D81               	goto	l3255
  9755                           
  9756                           ;mcc_generated_files/mtouch/mtouch_button.c: 422:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 423:         deviation = ((-1-0x7f));
  9757  0579  30FF               	movlw	255
  9758  057A  00A4               	movwf	Button_Deviation_Update@deviation+3
  9759  057B  30FF               	movlw	255
  9760  057C  00A3               	movwf	Button_Deviation_Update@deviation+2
  9761  057D  30FF               	movlw	255
  9762  057E  00A2               	movwf	Button_Deviation_Update@deviation+1
  9763  057F  3080               	movlw	128
  9764  0580  00A1               	movwf	Button_Deviation_Update@deviation
  9765  0581                     l3255:	
  9766                           
  9767                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
  9768  0581  0821               	movf	Button_Deviation_Update@deviation,w
  9769  0582  00F1               	movwf	??_Button_Deviation_Update
  9770  0583  0820               	movf	Button_Deviation_Update@button,w
  9771  0584  3E09               	addlw	9
  9772  0585  0086               	movwf	6
  9773  0586  3001               	movlw	1	; select bank2/3
  9774  0587  0087               	movwf	7
  9775  0588  0871               	movf	??_Button_Deviation_Update,w
  9776  0589  0081               	movwf	1
  9777  058A  0008               	return
  9778  058B                     __end_of_Button_Deviation_Update:	
  9779                           
  9780                           	psect	text68
  9781  0BDD                     __ptext68:	
  9782 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
  9783 ;; Defined at:
  9784 ;;		line 536 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
  9787 ;;		 -> myButtonPressedCallback(1), 
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;		None
  9790 ;; Return value:  Size  Location     Type
  9791 ;;                  1    wreg      void 
  9792 ;; Registers used:
  9793 ;;		wreg
  9794 ;; Tracked objects:
  9795 ;;		On entry : 0/0
  9796 ;;		On exit  : 0/0
  9797 ;;		Unchanged: 0/0
  9798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9799 ;;      Params:         2       0       0       0       0       0       0       0
  9800 ;;      Locals:         0       0       0       0       0       0       0       0
  9801 ;;      Temps:          0       0       0       0       0       0       0       0
  9802 ;;      Totals:         2       0       0       0       0       0       0       0
  9803 ;;Total ram usage:        2 bytes
  9804 ;; Hardware stack levels used:    1
  9805 ;; Hardware stack levels required when called:    4
  9806 ;; This function calls:
  9807 ;;		Nothing
  9808 ;; This function is called by:
  9809 ;;		_main
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           
  9814                           ;psect for function _MTOUCH_Button_SetPressedCallback
  9815  0BDD                     _MTOUCH_Button_SetPressedCallback:	
  9816                           
  9817                           ;mcc_generated_files/mtouch/mtouch_button.c: 536: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          537: {;mcc_generated_files/mtouch/mtouch_button.c: 538:     callback_pressed = callback;
  9818                           
  9819                           ;incstack = 0
  9820                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
  9821  0BDD  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
  9822  0BDE  0020               	movlb	0	; select bank0
  9823  0BDF  00EC               	movwf	_callback_pressed+1
  9824  0BE0  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
  9825  0BE1  00EB               	movwf	_callback_pressed
  9826  0BE2  0008               	return
  9827  0BE3                     __end_of_MTOUCH_Button_SetPressedCallback:	
  9828                           
  9829                           	psect	text69
  9830  0BD7                     __ptext69:	
  9831 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
  9832 ;; Defined at:
  9833 ;;		line 540 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
  9836 ;;		 -> myButtonReleasedCallback(1), 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      void 
  9841 ;; Registers used:
  9842 ;;		wreg
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9848 ;;      Params:         2       0       0       0       0       0       0       0
  9849 ;;      Locals:         0       0       0       0       0       0       0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0       0
  9851 ;;      Totals:         2       0       0       0       0       0       0       0
  9852 ;;Total ram usage:        2 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    4
  9855 ;; This function calls:
  9856 ;;		Nothing
  9857 ;; This function is called by:
  9858 ;;		_main
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           
  9863                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
  9864  0BD7                     _MTOUCH_Button_SetNotPressedCallback:	
  9865                           
  9866                           ;mcc_generated_files/mtouch/mtouch_button.c: 540: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 541: {;mcc_generated_files/mtouch/mtouch_button.c: 542:     callback_notPressed = cal
      +                          lback;
  9867                           
  9868                           ;incstack = 0
  9869                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
  9870  0BD7  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
  9871  0BD8  0020               	movlb	0	; select bank0
  9872  0BD9  00EA               	movwf	_callback_notPressed+1
  9873  0BDA  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
  9874  0BDB  00E9               	movwf	_callback_notPressed
  9875  0BDC  0008               	return
  9876  0BDD                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
  9877                           
  9878                           	psect	intentry
  9879  0004                     __pintentry:	
  9880 ;; *************** function _INTERRUPT_InterruptManager *****************
  9881 ;; Defined at:
  9882 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;		None
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;		None
  9887 ;; Return value:  Size  Location     Type
  9888 ;;                  1    wreg      void 
  9889 ;; Registers used:
  9890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9896 ;;      Params:         0       0       0       0       0       0       0       0
  9897 ;;      Locals:         0       0       0       0       0       0       0       0
  9898 ;;      Temps:          0       0       0       0       0       0       0       0
  9899 ;;      Totals:         0       0       0       0       0       0       0       0
  9900 ;;Total ram usage:        0 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    3
  9903 ;; This function calls:
  9904 ;;		Absolute function
  9905 ;;		_EUSART_Receive_ISR
  9906 ;; This function is called by:
  9907 ;;		Interrupt level 1
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911  0004                     _INTERRUPT_InterruptManager:	
  9912                           
  9913                           ;incstack = 0
  9914  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9915                           
  9916                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9917  0005  3180               	pagesel	$
  9918                           
  9919                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  9920  0006  1F0B               	btfss	11,6	;volatile
  9921  0007  2814               	goto	i1l145
  9922                           
  9923                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  9924  0008  0021               	movlb	1	; select bank1
  9925  0009  1E91               	btfss	17,5	;volatile
  9926  000A  2814               	goto	i1l145
  9927  000B  0020               	movlb	0	; select bank0
  9928  000C  1E91               	btfss	17,5	;volatile
  9929  000D  2814               	goto	i1l145
  9930                           
  9931                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_RxDefaultInterruptHandler();
  9932  000E  0021               	movlb	1	; select bank1
  9933  000F  084B               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  9934  0010  008A               	movwf	10
  9935  0011  084A               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  9936  0012  000A               	callw
  9937  0013  3180               	pagesel	$
  9938  0014                     i1l145:	
  9939                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  9940                           
  9941  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9942  0015  0009               	retfie
  9943  0016                     __end_of_INTERRUPT_InterruptManager:	
  9944                           
  9945                           	psect	text71
  9946  0F61                     __ptext71:	
  9947 ;; *************** function _EUSART_Receive_ISR *****************
  9948 ;; Defined at:
  9949 ;;		line 180 in file "mcc_generated_files/eusart.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  1    wreg      void 
  9956 ;; Registers used:
  9957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9963 ;;      Params:         0       0       0       0       0       0       0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0
  9966 ;;      Totals:         0       0       0       0       0       0       0       0
  9967 ;;Total ram usage:        0 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    2
  9970 ;; This function calls:
  9971 ;;		Absolute function
  9972 ;;		_EUSART_DefaultErrorHandler
  9973 ;;		_EUSART_DefaultFramingErrorHandler
  9974 ;;		_EUSART_DefaultOverrunErrorHandler
  9975 ;;		_EUSART_RxDataHandler
  9976 ;; This function is called by:
  9977 ;;		_EUSART_Initialize
  9978 ;;		_INTERRUPT_InterruptManager
  9979 ;; This function uses a non-reentrant model
  9980 ;;
  9981                           
  9982                           
  9983                           ;psect for function _EUSART_Receive_ISR
  9984  0F61                     _EUSART_Receive_ISR:	
  9985                           
  9986                           ;mcc_generated_files/eusart.c: 183:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  9987                           
  9988                           ;incstack = 0
  9989                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9990  0F61  087C               	movf	_eusartRxHead,w	;volatile
  9991  0F62  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9992  0F63  0086               	movwf	6
  9993  0F64  0187               	clrf	7
  9994  0F65  0181               	clrf	1
  9995                           
  9996                           ;mcc_generated_files/eusart.c: 185:     if(RCSTAbits.FERR){
  9997  0F66  0023               	movlb	3	; select bank3
  9998  0F67  1D1D               	btfss	29,2	;volatile
  9999  0F68  2F74               	goto	i1l3537
 10000                           
 10001                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 10002  0F69  087C               	movf	_eusartRxHead,w	;volatile
 10003  0F6A  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10004  0F6B  0086               	movwf	6
 10005  0F6C  0187               	clrf	7
 10006  0F6D  1481               	bsf	1,1
 10007                           
 10008                           ;mcc_generated_files/eusart.c: 187:         EUSART_FramingErrorHandler();
 10009  0F6E  0021               	movlb	1	; select bank1
 10010  0F6F  0849               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 10011  0F70  008A               	movwf	10
 10012  0F71  0848               	movf	_EUSART_FramingErrorHandler^(0+128),w
 10013  0F72  000A               	callw
 10014  0F73  318F               	pagesel	$
 10015  0F74                     i1l3537:	
 10016                           
 10017                           ;mcc_generated_files/eusart.c: 190:     if(RCSTAbits.OERR){
 10018  0F74  0023               	movlb	3	; select bank3
 10019  0F75  1C9D               	btfss	29,1	;volatile
 10020  0F76  2F82               	goto	i1l3543
 10021                           
 10022                           ;mcc_generated_files/eusart.c: 191:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 10023  0F77  087C               	movf	_eusartRxHead,w	;volatile
 10024  0F78  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10025  0F79  0086               	movwf	6
 10026  0F7A  0187               	clrf	7
 10027  0F7B  1501               	bsf	1,2
 10028                           
 10029                           ;mcc_generated_files/eusart.c: 192:         EUSART_OverrunErrorHandler();
 10030  0F7C  0021               	movlb	1	; select bank1
 10031  0F7D  0847               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 10032  0F7E  008A               	movwf	10
 10033  0F7F  0846               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 10034  0F80  000A               	callw
 10035  0F81  318F               	pagesel	$
 10036  0F82                     i1l3543:	
 10037                           
 10038                           ;mcc_generated_files/eusart.c: 195:     if(eusartRxStatusBuffer[eusartRxHead].status){
 10039  0F82  087C               	movf	_eusartRxHead,w	;volatile
 10040  0F83  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10041  0F84  0086               	movwf	6
 10042  0F85  0187               	clrf	7
 10043  0F86  0801               	movf	1,w
 10044  0F87  1903               	btfsc	3,2
 10045  0F88  2F90               	goto	i1l3547
 10046                           
 10047                           ;mcc_generated_files/eusart.c: 196:         EUSART_ErrorHandler();
 10048  0F89  0021               	movlb	1	; select bank1
 10049  0F8A  0845               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 10050  0F8B  008A               	movwf	10
 10051  0F8C  0844               	movf	_EUSART_ErrorHandler^(0+128),w
 10052  0F8D  000A               	callw
 10053  0F8E  318F               	pagesel	$
 10054                           
 10055                           ;mcc_generated_files/eusart.c: 197:     } else {
 10056  0F8F  0008               	return
 10057  0F90                     i1l3547:	
 10058                           
 10059                           ;mcc_generated_files/eusart.c: 198:         EUSART_RxDataHandler();
 10060  0F90  318D  2589         	fcall	_EUSART_RxDataHandler
 10061  0F92  0008               	return
 10062  0F93                     __end_of_EUSART_Receive_ISR:	
 10063                           
 10064                           	psect	text72
 10065  0BCA                     __ptext72:	
 10066 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 10067 ;; Defined at:
 10068 ;;		line 216 in file "mcc_generated_files/eusart.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;		None
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;		None
 10073 ;; Return value:  Size  Location     Type
 10074 ;;                  1    wreg      void 
 10075 ;; Registers used:
 10076 ;;		None
 10077 ;; Tracked objects:
 10078 ;;		On entry : 0/0
 10079 ;;		On exit  : 0/0
 10080 ;;		Unchanged: 0/0
 10081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10082 ;;      Params:         0       0       0       0       0       0       0       0
 10083 ;;      Locals:         0       0       0       0       0       0       0       0
 10084 ;;      Temps:          0       0       0       0       0       0       0       0
 10085 ;;      Totals:         0       0       0       0       0       0       0       0
 10086 ;;Total ram usage:        0 bytes
 10087 ;; Hardware stack levels used:    1
 10088 ;; This function calls:
 10089 ;;		Nothing
 10090 ;; This function is called by:
 10091 ;;		_EUSART_Initialize
 10092 ;;		_EUSART_Receive_ISR
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           
 10097                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 10098  0BCA                     _EUSART_DefaultOverrunErrorHandler:	
 10099                           
 10100                           ;mcc_generated_files/eusart.c: 219:     RCSTAbits.CREN = 0;
 10101                           
 10102                           ;incstack = 0
 10103                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 10104  0BCA  0023               	movlb	3	; select bank3
 10105  0BCB  121D               	bcf	29,4	;volatile
 10106                           
 10107                           ;mcc_generated_files/eusart.c: 220:     RCSTAbits.CREN = 1;
 10108  0BCC  161D               	bsf	29,4	;volatile
 10109  0BCD  0008               	return
 10110  0BCE                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 10111                           
 10112                           	psect	text73
 10113  0BB9                     __ptext73:	
 10114 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 10115 ;; Defined at:
 10116 ;;		line 214 in file "mcc_generated_files/eusart.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;		None
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  1    wreg      void 
 10123 ;; Registers used:
 10124 ;;		None
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10130 ;;      Params:         0       0       0       0       0       0       0       0
 10131 ;;      Locals:         0       0       0       0       0       0       0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0       0
 10133 ;;      Totals:         0       0       0       0       0       0       0       0
 10134 ;;Total ram usage:        0 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		_EUSART_Initialize
 10140 ;;		_EUSART_Receive_ISR
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           
 10145                           ;psect for function _EUSART_DefaultFramingErrorHandler
 10146  0BB9                     _EUSART_DefaultFramingErrorHandler:	
 10147                           
 10148                           ;incstack = 0
 10149                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 10150  0BB9  0008               	return
 10151  0BBA                     __end_of_EUSART_DefaultFramingErrorHandler:	
 10152                           
 10153                           	psect	text74
 10154  0BBE                     __ptext74:	
 10155 ;; *************** function _EUSART_DefaultErrorHandler *****************
 10156 ;; Defined at:
 10157 ;;		line 224 in file "mcc_generated_files/eusart.c"
 10158 ;; Parameters:    Size  Location     Type
 10159 ;;		None
 10160 ;; Auto vars:     Size  Location     Type
 10161 ;;		None
 10162 ;; Return value:  Size  Location     Type
 10163 ;;                  1    wreg      void 
 10164 ;; Registers used:
 10165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10166 ;; Tracked objects:
 10167 ;;		On entry : 0/0
 10168 ;;		On exit  : 0/0
 10169 ;;		Unchanged: 0/0
 10170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10171 ;;      Params:         0       0       0       0       0       0       0       0
 10172 ;;      Locals:         0       0       0       0       0       0       0       0
 10173 ;;      Temps:          0       0       0       0       0       0       0       0
 10174 ;;      Totals:         0       0       0       0       0       0       0       0
 10175 ;;Total ram usage:        0 bytes
 10176 ;; Hardware stack levels used:    1
 10177 ;; Hardware stack levels required when called:    1
 10178 ;; This function calls:
 10179 ;;		_EUSART_RxDataHandler
 10180 ;; This function is called by:
 10181 ;;		_EUSART_Initialize
 10182 ;;		_EUSART_Receive_ISR
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           
 10187                           ;psect for function _EUSART_DefaultErrorHandler
 10188  0BBE                     _EUSART_DefaultErrorHandler:	
 10189                           
 10190                           ;mcc_generated_files/eusart.c: 225:     EUSART_RxDataHandler();
 10191                           
 10192                           ;incstack = 0
 10193                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10194  0BBE  318D  2589         	fcall	_EUSART_RxDataHandler
 10195  0BC0  0008               	return
 10196  0BC1                     __end_of_EUSART_DefaultErrorHandler:	
 10197                           
 10198                           	psect	text75
 10199  0D89                     __ptext75:	
 10200 ;; *************** function _EUSART_RxDataHandler *****************
 10201 ;; Defined at:
 10202 ;;		line 204 in file "mcc_generated_files/eusart.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;		None
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;		None
 10207 ;; Return value:  Size  Location     Type
 10208 ;;                  1    wreg      void 
 10209 ;; Registers used:
 10210 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10216 ;;      Params:         0       0       0       0       0       0       0       0
 10217 ;;      Locals:         0       0       0       0       0       0       0       0
 10218 ;;      Temps:          1       0       0       0       0       0       0       0
 10219 ;;      Totals:         1       0       0       0       0       0       0       0
 10220 ;;Total ram usage:        1 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; This function calls:
 10223 ;;		Nothing
 10224 ;; This function is called by:
 10225 ;;		_EUSART_Receive_ISR
 10226 ;;		_EUSART_DefaultErrorHandler
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           
 10231                           ;psect for function _EUSART_RxDataHandler
 10232  0D89                     _EUSART_RxDataHandler:	
 10233                           
 10234                           ;mcc_generated_files/eusart.c: 206:     eusartRxBuffer[eusartRxHead++] = RCREG;
 10235                           
 10236                           ;incstack = 0
 10237                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10238  0D89  0023               	movlb	3	; select bank3
 10239  0D8A  0819               	movf	25,w	;volatile
 10240  0D8B  00F0               	movwf	??_EUSART_RxDataHandler
 10241  0D8C  087C               	movf	_eusartRxHead,w
 10242  0D8D  3ECC               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10243  0D8E  0086               	movwf	6
 10244  0D8F  0187               	clrf	7
 10245  0D90  0870               	movf	??_EUSART_RxDataHandler,w
 10246  0D91  0081               	movwf	1
 10247  0D92  3001               	movlw	1
 10248  0D93  00F0               	movwf	??_EUSART_RxDataHandler
 10249  0D94  0870               	movf	??_EUSART_RxDataHandler,w
 10250  0D95  07FC               	addwf	_eusartRxHead,f	;volatile
 10251                           
 10252                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10253  0D96  3008               	movlw	8
 10254  0D97  027C               	subwf	_eusartRxHead,w	;volatile
 10255  0D98  1803               	btfsc	3,0
 10256                           
 10257                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         eus
      +                          artRxHead = 0;
 10258  0D99  01FC               	clrf	_eusartRxHead	;volatile
 10259                           
 10260                           ;mcc_generated_files/eusart.c: 211:     eusartRxCount++;
 10261  0D9A  3001               	movlw	1
 10262  0D9B  00F0               	movwf	??_EUSART_RxDataHandler
 10263  0D9C  0870               	movf	??_EUSART_RxDataHandler,w
 10264  0D9D  0020               	movlb	0	; select bank0
 10265  0D9E  07E1               	addwf	_eusartRxCount,f	;volatile
 10266  0D9F  0008               	return
 10267  0DA0                     __end_of_EUSART_RxDataHandler:	
 10268  007E                     btemp	set	126	;btemp
 10269  007E                     int$flags	set	126
 10270  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    73
    Data        49
    BSS         99
    Persistent  40
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     41      80
    BANK1            80      0      52
    BANK2            80      0      64
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2299$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Service$2299	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@d1	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Service@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    sp__memcpy	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonReleasedCallback(), 

    callback_pressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonPressedCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    S689$sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    S689$sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   28165
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4370
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23599
                                             40 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8705
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8606
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1446
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1       0
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1827
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1       0
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
 ---------------------------------------------------------------------------------
 (10) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D1       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      34       8       65.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      D1      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jul 05 13:54:31 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                        ___bmul@product 0073  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 0C1B                             _Sensor_setCalibratAcqTime 0C5A  
                                         __CFG_LVP$ON 0000                                                   l235 0DE1  
                                                 l570 0105                                                   l539 0218  
                                                 l804 0335                                                   l575 010C  
                                                 l568 0109                                                   l585 01AC  
                                                 l587 01C3                                                   _GIE 005F  
                                                 _PR2 001B                                                   _abs 0DB7  
                              ??_EUSART_RxDataHandler 0070                        ?_EUSART_SetFramingErrorHandler 0071  
                             ?_Sensor_loadADCSettings 0072                                       _TMR2_Initialize 0C31  
                                        __CFG_BORV$LO 0000                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0072                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 0073  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                                ?_abs 0071                                                  l3203 0E77  
                                                l3061 0FEF                                                  l4023 0DB4  
                                                l3063 0FF1                                                  l3137 0435  
                                                l4113 06D7                                                  l3251 056D  
                                                l4203 02F4                                                  l3067 0FFC  
                                                l4061 05BF                                                  l4053 05BB  
                                                l4045 05A8                                                  l4141 0723  
                                                l4133 070A                                                  l4125 06F2  
                                                l3255 0581                                                  l4303 0766  
                                                l4063 05D2                                                  l4119 06DF  
                                                l4231 0C9E                                                  l3249 0565  
                                                l4209 032C                                                  l4153 0D46  
                                                l2801 04B9                                                  l4137 071A  
                                                l4129 06FA                                                  l4219 0629  
                                                l4067 05EB                                                  l4171 0EB4  
                                                l4181 0C8B                                                  l4261 0394  
                                                l4325 0D68                                                  l3365 0D74  
                                                l4245 0E0F                                                  l2807 04E8  
                                                l4271 03B4                                                  l4255 0385  
                                                l4319 0D5F                                                  l3801 0CE3  
                                                l4097 07B6                                                  l2745 0CD9  
                                                l4265 03A4                                                  l4187 067D  
                                                l4339 0CAD                                                  l2683 0ED8  
                                                l2755 0C6D                                                  l4189 0681  
                                                l2685 0EE7                                                  l2781 026F  
                                                l4517 03D2                                                  l4277 03C5  
                                                l2695 0EFA                                                  l2767 0214  
                                                l4519 03D7                                                  l4279 03E8  
                                                l4359 0DF0                                                  l2689 0EE9  
                                                l2785 0282                                                  l2787 0294  
                                                l3923 010F                                                  l3915 0100  
                                                l3835 0083                                                  l3827 006F  
                                                l3837 0089                                                  l3845 008B  
                                                l2799 04B5                                                  l3951 01A3  
                                                l3935 0154                                                  l3839 009D  
                                                l3873 00A9                                                  l3857 0091  
                                                l3947 0189                                                  l3939 016F  
                                                l3797 0CDD                                                  l3869 009F  
                                                l3983 01CF                                                  l3993 01EB  
                                                l3889 00D4                                                  l3987 01D7  
                                                l3979 01C7                                                  l3899 00E6  
                                                l3999 01FD                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u2305 03FD  
                                                u2315 0443                                                  u1735 02A8  
                                                u2480 054C                                                  u1665 0DC0  
                                                u2475 0514                                                  u1755 0499  
                                                u2485 0548                                                  u1765 04A3  
                                                u1785 04DA                                                  u2675 0D77  
                                                u3645 05D9                                                  u3665 0F97  
                                                u3675 0F26                                                  u3845 06AA  
                                                u3875 030A                                                  u3975 072A  
                          Button_State_Pressed@button 0024                                                  _TMR2 001A  
                                                _WPUA 020C                                                  _WPUB 020D  
                   __size_of_Sensor_Acq_ExecutePacket 01BE                              _Sensor_getScanGroupIndex 0ED6  
                           ?_Sensor_Acq_ExecutePacket 007B                                          __CFG_WRT$OFF 0000  
                                  _MTOUCH_needReburst 0002                                                  abs@a 0071  
                                                _main 0DCE                  __size_of_MTOUCH_Button_InitializeAll 001C  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                __size_of_MTOUCH_Sensor_InitializeAll 000E                                                  btemp 007E  
                                                start 0016                                     ___bmul@multiplier 0074  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                      __end_of_Sensor_autoCalibration 0504  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1005  
        Sensor_Scanfrequency_Evaluation@frequency_hop 1000                              _myButtonReleasedCallback 0BBA  
                            ?_MTOUCH_Service_Mainloop 0070                         __size_of_Button_State_Pressed 0066  
                                               ??_abs 0073                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 0078                         ??_MTOUCH_Sensor_RawSample_Get 0077  
                       Sensor_RawSample_Update@sensor 0077                         myButtonPressedCallback@button 0071  
                           __size_of_Sensor_isEnabled 0010                        __size_of_OSCILLATOR_Initialize 0006  
                       __end_of_OSCILLATOR_Initialize 0C01     Sensor_Scanfrequency_Evaluation@best_packet_sample 0036  
                 __end_of_Sensor_isCalibratingAcqTime 0C31                           _Sensor_isCalibratingAcqTime 0C29  
                                               ?_main 0070                                         __CFG_WDTE$OFF 0000  
                      __end_of_Sensor_loadADCSettings 02B5                                                 _T2CON 001C  
                             __size_of_Button_Service 0055                                                 i1l145 0014  
                                               _RCREG 0199                                                 _RCSTA 019D  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 _TXREG 019A  
                                               _TXSTA 019E                       __size_of_Button_DefaultCallback 0001  
                                ??_MTOUCH_needReburst 0071                       __size_of_Sensor_DefaultCallback 0001  
                             __size_of_Sensor_Service 0093                 __end_of_MTOUCH_Sensor_Scan_Initialize 0CCB  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 0CBB  
                                      _WDT_Initialize 0BCE                               Sensor_setSampled@sensor 0071  
                    __size_of_Button_State_NotPressed 00A3                                                 pclath 000A  
                                _Sensor_Sampled_Reset 0C22                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 0BC1  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0007  
                              Sensor_isEnabled@sensor 0072                                       __initialization 0018  
                                        __end_of_main 0DE5                                  _Sensor_setCalibrated 0C42  
                             __end_of_TMR2_Initialize 0C39                                        __CFG_LPBOR$OFF 0000  
                         ?_INTERRUPT_InterruptManager 0070                        ??_EUSART_SetRxInterruptHandler 0073  
                    __end_of_MTOUCH_Button_Initialize 0FC9                                                ??_main 007C  
                             _MTOUCH_Sensor_Calibrate 0CEC                             Sensor_Service@sensor_adc1 0044  
                           Sensor_Service@sensor_adc2 0045                               ??_Button_Reading_Update 007C  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0073                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 0BD2                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0077             __end_of_EUSART_DefaultFramingErrorHandler 0BBA  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 0BB9  
                          _EUSART_OverrunErrorHandler 00C6                  __size_of_MTOUCH_Sensor_RawSample_Get 0017  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              _ANSELB 018D                                                _ANSELC 018E  
                                              _BORCON 0116                                                i1l3543 0F82  
                                              i1l3537 0F74                                                i1l3547 0F90  
                               ?_Sensor_Sampled_Reset 0070                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                     MTOUCH_Button_InitializeAll@button 0020  
                      ??_Button_Reading_Update_Helper 0079                                _Button_DefaultCallback 0BBB  
                     __end_of_MTOUCH_Service_Mainloop 0E01                                        __CFG_PWRTE$OFF 0000  
                                 _Sensor_isCalibrated 0C39                                _Sensor_DefaultCallback 0BBD  
                                       _packet_sample 0051                                                ___bmul 0CDB  
                               ?_Sensor_setCalibrated 0070                          Sensor_DefaultCallback@sensor 0071  
                                      __CFG_STVREN$ON 0000                      __size_of_myButtonPressedCallback 0001  
                                              _memcpy 0EAB                      __end_of_MTOUCH_Button_ServiceAll 0CBB  
                        Sensor_autoCalibration@sensor 007A                               _MTOUCH_Sensor_SampleAll 0D5D  
                        Button_DefaultCallback@button 0071                                  ?_Sensor_isCalibrated 0070  
                                     ?_WDT_Initialize 0070                              ?_Sensor_RawSample_Update 0070  
                          __end_of_Sensor_Acquisition 0725                               ?_Button_Baseline_Update 0070  
                 Sensor_postAcquisitionProcess@sensor 0079                               __end_of_TMR2_StartTimer 0BC4  
                  __size_of_Sensor_setCalibratAcqTime 000D              __end_of_MTOUCH_Button_SetPressedCallback 0BE3  
           __size_of_MTOUCH_Button_SetPressedCallback 0006                    ??_MTOUCH_Button_SetPressedCallback 0073  
                   ?_MTOUCH_Button_SetPressedCallback 0071                      _MTOUCH_Button_SetPressedCallback 0BDD  
                            __size_of_Sensor_isActive 000D                       MTOUCH_Sensor_RawSample_Get@name 0078  
                 Sensor_getScanGroupIndex@sensorGroup 0074                                     _SYSTEM_Initialize 0D0E  
                             __end_of__initialization 0048                   __size_of_Button_Baseline_Initialize 002E  
                      ?_MTOUCH_Sensor_Scan_Initialize 0070                       ??_Sensor_postAcquisitionProcess 0075  
                                  ?_SYSTEM_Initialize 0070                                   _Button_StateMachine 0063  
                          __end_of_Button_Tick_helper 0EAB                         MTOUCH_Sensor_Calibrate@sensor 0076  
         Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024                                   ___bmul@multiplicand 0071  
                                      __pcstackCOMMON 0070                                          __pidataBANK0 0C74  
                                        __pidataBANK1 0E3A           __end_of_MTOUCH_Button_SetNotPressedCallback 0BDD  
        __size_of_MTOUCH_Button_SetNotPressedCallback 0006                 ??_MTOUCH_Button_SetNotPressedCallback 0073  
                ?_MTOUCH_Button_SetNotPressedCallback 0071                   _MTOUCH_Button_SetNotPressedCallback 0BD7  
                                 ??_SYSTEM_Initialize 007C                            __end_of_MTOUCH_Button_Tick 0D89  
                    __end_of_MTOUCH_Sensor_Initialize 0D5D                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 0CCB                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 058B                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 0725                      __end_of_Sensor_Acq_ExecutePacket 020A  
                          ?_Button_State_Initializing 0024                                  Button_Service@button 002C  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 0049  
                      __end_of_Button_Baseline_Update 047A                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 0F93  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0358  
                             _Button_State_NotPressed 02B5                         __size_of_MTOUCH_Sensor_Enable 0011  
                                  _Sensor_setInactive 0C14                                     _sensor_scan_group 1005  
                           __end_of_SYSTEM_Initialize 0D20                                     _lowpowerActivated 005C  
                    MTOUCH_Sensor_isCalibrated@sensor 0076                                ??_Sensor_Sampled_Reset 0071  
                                          __pbssBANK0 0049                                            __pbssBANK1 00CC  
                                          __pbssBANK2 0120                               _TMR2_LoadPeriodRegister 0BD2  
                          ??_myButtonReleasedCallback 0072                          Sensor_loadADCSettings@sensor 0079  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 0C0D  
                         __size_of_EUSART_Receive_ISR 0032                            __end_of_mtouch_button_init 0807  
         Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025                                ??_Sensor_setCalibrated 0071  
                                          __pmaintext 0DCE                                               ?___bmul 0071  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                        MTOUCH_Sensor_wasSampled@sensor 0076  
                                          __pintentry 0004                                __end_of_Button_Service 077A  
                                             ?_memcpy 0071                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 0E1D  
                         _MTOUCH_Button_InitializeAll 0E01                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0071                   __end_of_MTOUCH_Sensor_InitializeAll 0CAB  
                         _MTOUCH_Sensor_InitializeAll 0C9D                             ??_MTOUCH_Sensor_SampleAll 0046  
                     __end_of_Sensor_RawSample_Update 0E84                                  ??_Sensor_setInactive 0071  
                   __size_of_MTOUCH_Sensor_wasSampled 000E                             ?_MTOUCH_Sensor_wasSampled 0070  
                                       _eusartRxCount 0061                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 0071                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 06C9                                __end_of_Sensor_Service 03EB  
                             Sensor_Service@scanGroup 0042                              _MTOUCH_Button_ServiceAll 0CAB  
                           __end_of_sensor_scan_group 1009                         __size_of_EUSART_RxDataHandler 0017  
                    __size_of_MTOUCH_Service_Mainloop 001C                          __end_of_Button_State_Pressed 0667  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0073  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0079  
                     Sensor_setCalibratAcqTime@sensor 0071                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 0078                  __size_of_Sensor_isCalibratingAcqTime 0008  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021                                            _count_conf 0057  
                                   ??_Sensor_isActive 0071                   __size_of_EUSART_DefaultErrorHandler 0003  
               __end_of_Sensor_postAcquisitionProcess 1000                __size_of_Sensor_postAcquisitionProcess 0037  
                       _Sensor_postAcquisitionProcess 0FC9                               _myButtonPressedCallback 0BBC  
                             Sensor_Acquisition@retry 003D                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                        MTOUCH_Button_Initialize@button 007A  
                                         _AD2CON0bits 0791                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 0D0E  
                                             __ptext2 0BCE                                               __ptext3 0C31  
                                             __ptext4 0E1D                                               __ptext5 0BFB  
                                             __ptext6 0C4E                                               __ptext7 0C9D  
                                             __ptext8 0D48                                               __ptext9 0CFD  
                                             _dir_mes 005E                           Button_Reading_Update@button 0020  
                            _MTOUCH_Sensor_Initialize 0D48                                 _OSCILLATOR_Initialize 0BFB  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                           ??_Button_State_NotPressed 0025                                       ?_Sensor_Service 0070  
                            ??_PIN_MANAGER_Initialize 0071                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 0C8F  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 004C  
                                    _callback_sampled 006D                             ??_TMR2_LoadPeriodRegister 0071  
                     Sensor_RawSample_Update@adcIndex 0076                            __size_of_SYSTEM_Initialize 0012  
                                             clrloop0 0C02                                      _callback_pressed 006B  
                      MTOUCH_Sensor_Initialize@sensor 0078                                  end_of_initialization 0048  
                             ?_Button_DefaultCallback 0071                 __end_of_EUSART_SetOverrunErrorHandler 0BF5  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 0BEF  
                                             memcpy@d 007A                                               memcpy@n 0073  
                                             memcpy@s 0077                                               init_ram 0C07  
                                             initloop 0C08                               ?_Sensor_DefaultCallback 0071  
                       Sensor_Acquisition@sensor_adc1 003E                         Sensor_Acquisition@sensor_adc2 003B  
                    __size_of_Button_Deviation_Update 0087                                     _EUSART_Initialize 0F31  
                        ??_MTOUCH_Sensor_isCalibrated 0075                                    ?_EUSART_Initialize 0070  
                 __end_of_MTOUCH_Sensor_RawSample_Get 0DB7                           _MTOUCH_Sensor_RawSample_Get 0DA0  
                                           _RCSTAbits 019D                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                                Sensor_setActive@sensor 0071  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 0034  
                       Button_Deviation_Update@button 0020                  Sensor_Acq_ExecutePacket@AD1CON2_temp 0022  
            MTOUCH_Button_SetPressedCallback@callback 0071                            MTOUCH_Sensor_Enable@sensor 0076  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0023                                   _callback_notPressed 0069  
                 __size_of_MTOUCH_Sensor_isCalibrated 0015                        __end_of_Button_DefaultCallback 0BBC  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032  
                                  _sensor_globalFlags 005B                              __end_of_Sensor_isEnabled 0CDB  
                          Sensor_setCalibrated@sensor 0071                        __end_of_Sensor_DefaultCallback 0BBE  
                    __end_of_myButtonReleasedCallback 0BBB                             __end_of_EUSART_Initialize 0F61  
                            ??_Sensor_autoCalibration 0075                                             _TXSTAbits 019E  
                           ??_myButtonPressedCallback 0072                      __size_of_Sensor_RawSample_Update 0026  
                                  _Sensor_Acquisition 06C9                              ??_Sensor_loadADCSettings 0073  
                                _Button_State_Pressed 0601                                        __end_of___bmul 0CEC  
                  __end_of_EUSART_DefaultErrorHandler 0BC1                            _EUSART_DefaultErrorHandler 0BBE  
                                 ?_Sensor_Acquisition 003B                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                    _Button_Tick_helper 0E84  
                                      __end_of_memcpy 0ED6                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 0C14  
                    TMR2_LoadPeriodRegister@periodVal 0071                           ??_Button_State_Initializing 0025  
                                 start_initialization 0018                               _MTOUCH_Service_Mainloop 0DE5  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 0D73  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 0DCE  
                                      _TMR2_StopTimer 0BC4          EUSART_SetRxInterruptHandler@interruptHandler 0071  
                                ??_Sensor_Acquisition 003C                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 0024                        Sensor_autoCalibration@adcIndex 0079  
                      ?_EUSART_SetOverrunErrorHandler 0071                      __end_of_MTOUCH_Sensor_wasSampled 0C9D  
                                ??_Button_Tick_helper 0071                          __end_of_MTOUCH_Sensor_Enable 0D0E  
                                        _packet_noise 0055                            _EUSART_FramingErrorHandler 00C8  
                                            ??___bmul 0072                                 ?_Button_State_Pressed 0024  
                              _EUSART_SetErrorHandler 0BE3                            ??_MTOUCH_Button_ServiceAll 002D  
                                         __pdataBANK0 0063                                           __pdataBANK1 00A0  
                                            ??_memcpy 0075                           __end_of_Sensor_isCalibrated 0C42  
                        ??_Button_Baseline_Initialize 0020                                         _sample_period 006F  
                                ??_MTOUCH_Button_Tick 0074                                    _mtouch_button_init 07C7  
                          Sensor_Sampled_Reset@sensor 0071                          ?_Sensor_isCalibratingAcqTime 0070  
                     __end_of_myButtonPressedCallback 0BBD                                __end_of_TMR2_StopTimer 0BC7  
                                         __pbssCOMMON 007C                                             ___latbits 0002  
                                       __pcstackBANK0 0020                           _Sensor_loadADCSettings$1086 0076  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 0C67  
                      MTOUCH_Button_ServiceAll@button 002E                                   Sensor_Service@error 0043  
                          __end_of_EUSART_Receive_ISR 0F93                         __size_of_Sensor_Sampled_Reset 0007  
                          __size_of_EUSART_Initialize 0030                               _Button_Deviation_Update 0504  
                          ?_Sensor_setCalibratAcqTime 0070                      _EUSART_RxDefaultInterruptHandler 00CA  
                           _Button_State_Initializing 0667                    __end_of_MTOUCH_Sensor_isCalibrated 0D48  
                          _MTOUCH_Sensor_isCalibrated 0D33                                             __pnvBANK1 00C4  
                     __size_of_Sensor_autoCalibration 008A                     __size_of_Sensor_getScanGroupIndex 002D  
                                   _Sensor_setSampled 0C1B                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 0DA0                                _PIN_MANAGER_Initialize 0E1D  
                                    ??_Button_Service 0029                              ?_MTOUCH_Sensor_Calibrate 0070  
                                  ?_Sensor_setSampled 0070                    Button_Reading_Update_Helper@button 007B  
                          ??_MTOUCH_Sensor_Initialize 0077                         __size_of_Sensor_setCalibrated 000C  
                     __size_of_Sensor_loadADCSettings 00AB                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 007C  
                                            _AAD2RES0 079A                                          _eusartRxTail 0062  
                                    ??_Sensor_Service 003F                            ??_Sensor_Acq_ExecutePacket 0020  
                        ??_INTERRUPT_InterruptManager 0071                                             _bt_status 0059  
                                 ??_Sensor_setSampled 0071                     __size_of_myButtonReleasedCallback 0001  
                           ?_myButtonReleasedCallback 0071                             ??_MTOUCH_Service_Mainloop 0048  
                                            _ADCOMCON 0712                           __size_of_Sensor_setInactive 0007  
                      Sensor_Acq_ExecutePacket@last_a 0028                        Sensor_Acq_ExecutePacket@last_b 002A  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0071  
                                       ??_MTOUCH_Tick 0076                                             _busy_flag 005F  
                                      _eusartRxBuffer 00CC                             __end_of_Sensor_setSampled 0C22  
              EUSART_SetErrorHandler@interruptHandler 0071                               _Sensor_RawSample_Update 0E5E  
                   __end_of_Sensor_setCalibratAcqTime 0C67                                             clear_ram0 0C01  
                                            _PIE1bits 0091                                     _eusartRxLastError 0060  
                            __size_of_TMR2_StartTimer 0003                   __size_of_INTERRUPT_InterruptManager 0012  
                                            _PIR1bits 0011                       ??_EUSART_SetFramingErrorHandler 0073  
              Sensor_Acq_ExecutePacket@packet_counter 002C                                              _PIR2bits 0012  
                              ??_Button_State_Pressed 0025                __end_of_MTOUCH_Sensor_Sampled_ResetAll 0D33  
             __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013                        _MTOUCH_Sensor_Sampled_ResetAll 0D20  
                            ?_MTOUCH_Sensor_SampleAll 0070             __end_of_EUSART_DefaultOverrunErrorHandler 0BCE  
          __size_of_EUSART_DefaultOverrunErrorHandler 0004                   ??_EUSART_DefaultOverrunErrorHandler 0070  
                  ?_EUSART_DefaultOverrunErrorHandler 0070                     _EUSART_DefaultOverrunErrorHandler 0BCA  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 0026                              _MTOUCH_Sensor_wasSampled 0C8F  
                                  _mtouch_time_toScan 005D                              ??_Button_Baseline_Update 0071  
                             __end_of_Sensor_isActive 0C74                                _Sensor_autoCalibration 047A  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 0071  
                              _Sensor_loadADCSettings 020A                                  _MTOUCH_Sensor_Enable 0CFD  
                            Button_Tick_helper@button 0073                             ??_Button_Deviation_Update 0071  
                               _Button_Reading_Update 0C81                                     ?_Sensor_isEnabled 0070  
                                   ??_TMR2_Initialize 0071                                   __end_of_MTOUCH_Tick 0BCA  
                                   _MTOUCH_Initialize 0C4E                       __end_of_MTOUCH_Sensor_Calibrate 0CFD  
                                  ??_Sensor_isEnabled 0071                                    ?_MTOUCH_Initialize 0070  
              Sensor_postAcquisitionProcess@deviation 0076                                             memcpy@tmp 0076  
                                          _APFCONbits 011D                               ??_OSCILLATOR_Initialize 0071  
                  __end_of_Button_Baseline_Initialize 0F31                            _Button_Baseline_Initialize 0F03  
                                 _EUSART_ErrorHandler 00C4                                   ??_MTOUCH_Initialize 007C  
                         ?_EUSART_DefaultErrorHandler 0070                              ?_Button_State_NotPressed 0024  
                                  Button_Service@name 002B                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 0071  
                Sensor_Scanfrequency_Evaluation@retry 0035                                    ??_Sensor_setActive 0071  
                                _EUSART_RxDataHandler 0D89                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 0E01                                              __ptext11 0EAB  
                                            __ptext20 0D73                                              __ptext12 0F31  
                                            __ptext21 0E84                                              __ptext13 0BF5  
                                            __ptext30 0FC9                                              __ptext22 0D20  
                                            __ptext14 0BEF                                              __ptext31 0C14  
                                            __ptext23 0C22                                              __ptext15 0BE9  
                                            __ptext40 0CCB                                              __ptext32 0C0D  
                                            __ptext24 0D5D                                              __ptext16 0BE3  
                                            __ptext41 0C67                                              __ptext33 058B  
                                            __ptext25 0358                                              __ptext17 0DE5  
                                            __ptext50 0725                                              __ptext42 047A  
                                            __ptext34 004C                                              __ptext26 0C1B  
                                            __ptext18 0002                                              __ptext51 0C8F  
                                            __ptext43 0DB7                                              __ptext35 0BC4  
                                            __ptext27 0E5E                                              __ptext19 0BC7  
                                            __ptext60 0CEC                                              __ptext52 0D33  
                                            __ptext44 0C42                                              __ptext36 0BC1  
                                            __ptext28 0BBD                                              __ptext61 03EB  
                                            __ptext53 02B5                                              __ptext45 0C5A  
                                            __ptext37 0BD2                                              __ptext29 06C9  
                                            __ptext62 0F03                                              __ptext54 0667  
                                            __ptext46 0C29                                              __ptext38 020A  
                                            __ptext71 0F61                                              __ptext63 0C81  
                                            __ptext55 0601                                              __ptext47 0ED6  
                                            __ptext39 0C39                                              __ptext72 0BCA  
                                            __ptext64 077A                                              __ptext56 0BBC  
                                            __ptext48 0CBB                                              __ptext73 0BB9  
                                            __ptext65 0DA0                                              __ptext57 0BBB  
                                            __ptext49 0CAB                                              __ptext74 0BBE  
                                            __ptext66 0CDB                                              __ptext58 0BBA  
                                            __ptext75 0D89                                              __ptext67 0504  
                                            __ptext59 0F93                                              __ptext68 0BDD  
                                            __ptext69 0BD7                             __end_of_MTOUCH_Initialize 0C5A  
                           ??_Sensor_RawSample_Update 0075                            __size_of_Sensor_setSampled 0007  
                                       __size_of_main 0017                       __end_of_MTOUCH_Sensor_SampleAll 0D73  
                    Sensor_Scanfrequency_Evaluation@i 003A                               ?_EUSART_SetErrorHandler 0071  
       EUSART_SetOverrunErrorHandler@interruptHandler 0071                                              int$flags 007E  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0071  
                  __end_of_INTERRUPT_InterruptManager 0016                            _INTERRUPT_InterruptManager 0004  
               __end_of_EUSART_SetFramingErrorHandler 0BEF                __size_of_EUSART_SetFramingErrorHandler 0006  
                       _EUSART_SetFramingErrorHandler 0BE9                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 0047  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 0120                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 00A0  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                    __end_of_Sensor_getScanGroupIndex 0F03                                     __CFG_BOREN$NSLEEP 0000  
                                         _MTOUCH_Tick 0BC7                                ?_Button_Reading_Update 0070  
                    Button_Deviation_Update@deviation 0021                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 0079                     __size_of_MTOUCH_Button_Initialize 0036  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 0071  
             __end_of_Sensor_Scanfrequency_Evaluation 0601              __size_of_Sensor_Scanfrequency_Evaluation 0076  
                   ??_Sensor_Scanfrequency_Evaluation 002F                      ?_Sensor_Scanfrequency_Evaluation 002E  
                     _Sensor_Scanfrequency_Evaluation 058B                               ?_PIN_MANAGER_Initialize 0070  
                         ??_Sensor_setCalibratAcqTime 0071                        __end_of_EUSART_SetErrorHandler 0BE9  
                                   __CFG_CLKOUTEN$OFF 0000                           ?_MTOUCH_Sensor_isCalibrated 0070  
                __end_of_EUSART_SetRxInterruptHandler 0BFB                 __size_of_EUSART_SetRxInterruptHandler 0006  
                        _EUSART_SetRxInterruptHandler 0BF5                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 0358                                    _EUSART_Receive_ISR 0F61  
       EUSART_SetFramingErrorHandler@interruptHandler 0071                          __end_of_Sensor_Sampled_Reset 0C29  
                                    ??_TMR2_StopTimer 0071                       __end_of_TMR2_LoadPeriodRegister 0BD7  
                         __size_of_MTOUCH_Button_Tick 0016                                         __pstringtext1 1000  
                                       __pstringtext2 1005                                         __pstringtext3 07C7  
                                 ?_EUSART_Receive_ISR 0070                         ??_MTOUCH_Button_InitializeAll 007B  
                            ??_Button_DefaultCallback 0072                         ??_MTOUCH_Sensor_InitializeAll 0079  
                Sensor_Acq_ExecutePacket@activeSensor 0027                      __size_of_MTOUCH_Sensor_Calibrate 0011  
                              ??_MTOUCH_Sensor_Enable 0075                     Sensor_isCalibratingAcqTime@sensor 0071  
                        __size_of_Sensor_isCalibrated 0009                              ??_Sensor_DefaultCallback 0072  
                        __end_of_Sensor_setCalibrated 0C4E                  __end_of_Button_Reading_Update_Helper 07C7  
               __size_of_Button_Reading_Update_Helper 004D                          _Button_Reading_Update_Helper 077A  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0024                            __size_of_MTOUCH_Initialize 000C  
                      __end_of_PIN_MANAGER_Initialize 0E3A                                _Button_Baseline_Update 03EB  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0075  
