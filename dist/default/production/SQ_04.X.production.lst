

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jul 05 14:12:29 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2,group=1
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	intentry,global,class=CODE,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	dabs	1,0x7E,2
    99  0000                     
   100                           ; Version 2.05
   101                           ; Generated 20/12/2018 GMT
   102                           ; 
   103                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   104                           ; All rights reserved.
   105                           ; 
   106                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   107                           ; 
   108                           ; Redistribution and use in source and binary forms, with or without modification, are
   109                           ; permitted provided that the following conditions are met:
   110                           ; 
   111                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   112                           ;        conditions and the following disclaimer.
   113                           ; 
   114                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   115                           ;        of conditions and the following disclaimer in the documentation and/or other
   116                           ;        materials provided with the distribution.
   117                           ; 
   118                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   119                           ;        software without specific prior written permission.
   120                           ; 
   121                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   122                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   123                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   124                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   125                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   126                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   127                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   128                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   129                           ; 
   130                           ; 
   131                           ; Code-generator required, PIC16LF1559 Definitions
   132                           ; 
   133                           ; SFR Addresses
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  011D                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184  018E                     	;# 
   185  0191                     	;# 
   186  0191                     	;# 
   187  0192                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0194                     	;# 
   191  0195                     	;# 
   192  0196                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019C                     	;# 
   198  019D                     	;# 
   199  019E                     	;# 
   200  019F                     	;# 
   201  020C                     	;# 
   202  020D                     	;# 
   203  0211                     	;# 
   204  0211                     	;# 
   205  0212                     	;# 
   206  0212                     	;# 
   207  0213                     	;# 
   208  0213                     	;# 
   209  0214                     	;# 
   210  0214                     	;# 
   211  0215                     	;# 
   212  0215                     	;# 
   213  0215                     	;# 
   214  0216                     	;# 
   215  0216                     	;# 
   216  0217                     	;# 
   217  0217                     	;# 
   218  0391                     	;# 
   219  0392                     	;# 
   220  0393                     	;# 
   221  0394                     	;# 
   222  0395                     	;# 
   223  0396                     	;# 
   224  0611                     	;# 
   225  0612                     	;# 
   226  0613                     	;# 
   227  0613                     	;# 
   228  0614                     	;# 
   229  0615                     	;# 
   230  0616                     	;# 
   231  0616                     	;# 
   232  0711                     	;# 
   233  0711                     	;# 
   234  0711                     	;# 
   235  0712                     	;# 
   236  0712                     	;# 
   237  0713                     	;# 
   238  0713                     	;# 
   239  0713                     	;# 
   240  0714                     	;# 
   241  0714                     	;# 
   242  0714                     	;# 
   243  0715                     	;# 
   244  0715                     	;# 
   245  0716                     	;# 
   246  0716                     	;# 
   247  0716                     	;# 
   248  0716                     	;# 
   249  0717                     	;# 
   250  0717                     	;# 
   251  0717                     	;# 
   252  0717                     	;# 
   253  0718                     	;# 
   254  0718                     	;# 
   255  0718                     	;# 
   256  0719                     	;# 
   257  0719                     	;# 
   258  0719                     	;# 
   259  0719                     	;# 
   260  071A                     	;# 
   261  071A                     	;# 
   262  071A                     	;# 
   263  071A                     	;# 
   264  071A                     	;# 
   265  071B                     	;# 
   266  071B                     	;# 
   267  071C                     	;# 
   268  071C                     	;# 
   269  071C                     	;# 
   270  071C                     	;# 
   271  071C                     	;# 
   272  071D                     	;# 
   273  071D                     	;# 
   274  071E                     	;# 
   275  071E                     	;# 
   276  0791                     	;# 
   277  0791                     	;# 
   278  0793                     	;# 
   279  0793                     	;# 
   280  0794                     	;# 
   281  0794                     	;# 
   282  0796                     	;# 
   283  0796                     	;# 
   284  0796                     	;# 
   285  0797                     	;# 
   286  0797                     	;# 
   287  0797                     	;# 
   288  0798                     	;# 
   289  0798                     	;# 
   290  0799                     	;# 
   291  0799                     	;# 
   292  0799                     	;# 
   293  079A                     	;# 
   294  079A                     	;# 
   295  079A                     	;# 
   296  079B                     	;# 
   297  079C                     	;# 
   298  079C                     	;# 
   299  079C                     	;# 
   300  079D                     	;# 
   301  079E                     	;# 
   302  079E                     	;# 
   303  0F8C                     	;# 
   304  0F8D                     	;# 
   305  0F91                     	;# 
   306  0F96                     	;# 
   307  0F97                     	;# 
   308  0F9C                     	;# 
   309  0F9D                     	;# 
   310  0F9E                     	;# 
   311  0FE3                     	;# 
   312  0FE4                     	;# 
   313  0FE5                     	;# 
   314  0FE6                     	;# 
   315  0FE7                     	;# 
   316  0FE8                     	;# 
   317  0FE9                     	;# 
   318  0FEA                     	;# 
   319  0FEB                     	;# 
   320  0FED                     	;# 
   321  0FEE                     	;# 
   322  0FEF                     	;# 
   323  0000                     	;# 
   324  0001                     	;# 
   325  0002                     	;# 
   326  0003                     	;# 
   327  0004                     	;# 
   328  0005                     	;# 
   329  0006                     	;# 
   330  0007                     	;# 
   331  0008                     	;# 
   332  0009                     	;# 
   333  000A                     	;# 
   334  000B                     	;# 
   335  000C                     	;# 
   336  000D                     	;# 
   337  000E                     	;# 
   338  0011                     	;# 
   339  0012                     	;# 
   340  0015                     	;# 
   341  0016                     	;# 
   342  0016                     	;# 
   343  0017                     	;# 
   344  0018                     	;# 
   345  0019                     	;# 
   346  001A                     	;# 
   347  001B                     	;# 
   348  001C                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  0091                     	;# 
   353  0092                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0099                     	;# 
   358  009A                     	;# 
   359  009B                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  0116                     	;# 
   369  0117                     	;# 
   370  011D                     	;# 
   371  018C                     	;# 
   372  018D                     	;# 
   373  018E                     	;# 
   374  0191                     	;# 
   375  0191                     	;# 
   376  0192                     	;# 
   377  0193                     	;# 
   378  0193                     	;# 
   379  0194                     	;# 
   380  0195                     	;# 
   381  0196                     	;# 
   382  0199                     	;# 
   383  019A                     	;# 
   384  019B                     	;# 
   385  019B                     	;# 
   386  019C                     	;# 
   387  019D                     	;# 
   388  019E                     	;# 
   389  019F                     	;# 
   390  020C                     	;# 
   391  020D                     	;# 
   392  0211                     	;# 
   393  0211                     	;# 
   394  0212                     	;# 
   395  0212                     	;# 
   396  0213                     	;# 
   397  0213                     	;# 
   398  0214                     	;# 
   399  0214                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0215                     	;# 
   403  0216                     	;# 
   404  0216                     	;# 
   405  0217                     	;# 
   406  0217                     	;# 
   407  0391                     	;# 
   408  0392                     	;# 
   409  0393                     	;# 
   410  0394                     	;# 
   411  0395                     	;# 
   412  0396                     	;# 
   413  0611                     	;# 
   414  0612                     	;# 
   415  0613                     	;# 
   416  0613                     	;# 
   417  0614                     	;# 
   418  0615                     	;# 
   419  0616                     	;# 
   420  0616                     	;# 
   421  0711                     	;# 
   422  0711                     	;# 
   423  0711                     	;# 
   424  0712                     	;# 
   425  0712                     	;# 
   426  0713                     	;# 
   427  0713                     	;# 
   428  0713                     	;# 
   429  0714                     	;# 
   430  0714                     	;# 
   431  0714                     	;# 
   432  0715                     	;# 
   433  0715                     	;# 
   434  0716                     	;# 
   435  0716                     	;# 
   436  0716                     	;# 
   437  0716                     	;# 
   438  0717                     	;# 
   439  0717                     	;# 
   440  0717                     	;# 
   441  0717                     	;# 
   442  0718                     	;# 
   443  0718                     	;# 
   444  0718                     	;# 
   445  0719                     	;# 
   446  0719                     	;# 
   447  0719                     	;# 
   448  0719                     	;# 
   449  071A                     	;# 
   450  071A                     	;# 
   451  071A                     	;# 
   452  071A                     	;# 
   453  071A                     	;# 
   454  071B                     	;# 
   455  071B                     	;# 
   456  071C                     	;# 
   457  071C                     	;# 
   458  071C                     	;# 
   459  071C                     	;# 
   460  071C                     	;# 
   461  071D                     	;# 
   462  071D                     	;# 
   463  071E                     	;# 
   464  071E                     	;# 
   465  0791                     	;# 
   466  0791                     	;# 
   467  0793                     	;# 
   468  0793                     	;# 
   469  0794                     	;# 
   470  0794                     	;# 
   471  0796                     	;# 
   472  0796                     	;# 
   473  0796                     	;# 
   474  0797                     	;# 
   475  0797                     	;# 
   476  0797                     	;# 
   477  0798                     	;# 
   478  0798                     	;# 
   479  0799                     	;# 
   480  0799                     	;# 
   481  0799                     	;# 
   482  079A                     	;# 
   483  079A                     	;# 
   484  079A                     	;# 
   485  079B                     	;# 
   486  079C                     	;# 
   487  079C                     	;# 
   488  079C                     	;# 
   489  079D                     	;# 
   490  079E                     	;# 
   491  079E                     	;# 
   492  0F8C                     	;# 
   493  0F8D                     	;# 
   494  0F91                     	;# 
   495  0F96                     	;# 
   496  0F97                     	;# 
   497  0F9C                     	;# 
   498  0F9D                     	;# 
   499  0F9E                     	;# 
   500  0FE3                     	;# 
   501  0FE4                     	;# 
   502  0FE5                     	;# 
   503  0FE6                     	;# 
   504  0FE7                     	;# 
   505  0FE8                     	;# 
   506  0FE9                     	;# 
   507  0FEA                     	;# 
   508  0FEB                     	;# 
   509  0FED                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000D                     	;# 
   526  000E                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008D                     	;# 
   540  008E                     	;# 
   541  0091                     	;# 
   542  0092                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010D                     	;# 
   556  010E                     	;# 
   557  0116                     	;# 
   558  0117                     	;# 
   559  011D                     	;# 
   560  018C                     	;# 
   561  018D                     	;# 
   562  018E                     	;# 
   563  0191                     	;# 
   564  0191                     	;# 
   565  0192                     	;# 
   566  0193                     	;# 
   567  0193                     	;# 
   568  0194                     	;# 
   569  0195                     	;# 
   570  0196                     	;# 
   571  0199                     	;# 
   572  019A                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019C                     	;# 
   576  019D                     	;# 
   577  019E                     	;# 
   578  019F                     	;# 
   579  020C                     	;# 
   580  020D                     	;# 
   581  0211                     	;# 
   582  0211                     	;# 
   583  0212                     	;# 
   584  0212                     	;# 
   585  0213                     	;# 
   586  0213                     	;# 
   587  0214                     	;# 
   588  0214                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0216                     	;# 
   593  0216                     	;# 
   594  0217                     	;# 
   595  0217                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0394                     	;# 
   600  0395                     	;# 
   601  0396                     	;# 
   602  0611                     	;# 
   603  0612                     	;# 
   604  0613                     	;# 
   605  0613                     	;# 
   606  0614                     	;# 
   607  0615                     	;# 
   608  0616                     	;# 
   609  0616                     	;# 
   610  0711                     	;# 
   611  0711                     	;# 
   612  0711                     	;# 
   613  0712                     	;# 
   614  0712                     	;# 
   615  0713                     	;# 
   616  0713                     	;# 
   617  0713                     	;# 
   618  0714                     	;# 
   619  0714                     	;# 
   620  0714                     	;# 
   621  0715                     	;# 
   622  0715                     	;# 
   623  0716                     	;# 
   624  0716                     	;# 
   625  0716                     	;# 
   626  0716                     	;# 
   627  0717                     	;# 
   628  0717                     	;# 
   629  0717                     	;# 
   630  0717                     	;# 
   631  0718                     	;# 
   632  0718                     	;# 
   633  0718                     	;# 
   634  0719                     	;# 
   635  0719                     	;# 
   636  0719                     	;# 
   637  0719                     	;# 
   638  071A                     	;# 
   639  071A                     	;# 
   640  071A                     	;# 
   641  071A                     	;# 
   642  071A                     	;# 
   643  071B                     	;# 
   644  071B                     	;# 
   645  071C                     	;# 
   646  071C                     	;# 
   647  071C                     	;# 
   648  071C                     	;# 
   649  071C                     	;# 
   650  071D                     	;# 
   651  071D                     	;# 
   652  071E                     	;# 
   653  071E                     	;# 
   654  0791                     	;# 
   655  0791                     	;# 
   656  0793                     	;# 
   657  0793                     	;# 
   658  0794                     	;# 
   659  0794                     	;# 
   660  0796                     	;# 
   661  0796                     	;# 
   662  0796                     	;# 
   663  0797                     	;# 
   664  0797                     	;# 
   665  0797                     	;# 
   666  0798                     	;# 
   667  0798                     	;# 
   668  0799                     	;# 
   669  0799                     	;# 
   670  0799                     	;# 
   671  079A                     	;# 
   672  079A                     	;# 
   673  079A                     	;# 
   674  079B                     	;# 
   675  079C                     	;# 
   676  079C                     	;# 
   677  079C                     	;# 
   678  079D                     	;# 
   679  079E                     	;# 
   680  079E                     	;# 
   681  0F8C                     	;# 
   682  0F8D                     	;# 
   683  0F91                     	;# 
   684  0F96                     	;# 
   685  0F97                     	;# 
   686  0F9C                     	;# 
   687  0F9D                     	;# 
   688  0F9E                     	;# 
   689  0FE3                     	;# 
   690  0FE4                     	;# 
   691  0FE5                     	;# 
   692  0FE6                     	;# 
   693  0FE7                     	;# 
   694  0FE8                     	;# 
   695  0FE9                     	;# 
   696  0FEA                     	;# 
   697  0FEB                     	;# 
   698  0FED                     	;# 
   699  0FEE                     	;# 
   700  0FEF                     	;# 
   701  0000                     	;# 
   702  0001                     	;# 
   703  0002                     	;# 
   704  0003                     	;# 
   705  0004                     	;# 
   706  0005                     	;# 
   707  0006                     	;# 
   708  0007                     	;# 
   709  0008                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000D                     	;# 
   715  000E                     	;# 
   716  0011                     	;# 
   717  0012                     	;# 
   718  0015                     	;# 
   719  0016                     	;# 
   720  0016                     	;# 
   721  0017                     	;# 
   722  0018                     	;# 
   723  0019                     	;# 
   724  001A                     	;# 
   725  001B                     	;# 
   726  001C                     	;# 
   727  008C                     	;# 
   728  008D                     	;# 
   729  008E                     	;# 
   730  0091                     	;# 
   731  0092                     	;# 
   732  0095                     	;# 
   733  0096                     	;# 
   734  0097                     	;# 
   735  0099                     	;# 
   736  009A                     	;# 
   737  009B                     	;# 
   738  009B                     	;# 
   739  009C                     	;# 
   740  009D                     	;# 
   741  009E                     	;# 
   742  009F                     	;# 
   743  010C                     	;# 
   744  010D                     	;# 
   745  010E                     	;# 
   746  0116                     	;# 
   747  0117                     	;# 
   748  011D                     	;# 
   749  018C                     	;# 
   750  018D                     	;# 
   751  018E                     	;# 
   752  0191                     	;# 
   753  0191                     	;# 
   754  0192                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0194                     	;# 
   758  0195                     	;# 
   759  0196                     	;# 
   760  0199                     	;# 
   761  019A                     	;# 
   762  019B                     	;# 
   763  019B                     	;# 
   764  019C                     	;# 
   765  019D                     	;# 
   766  019E                     	;# 
   767  019F                     	;# 
   768  020C                     	;# 
   769  020D                     	;# 
   770  0211                     	;# 
   771  0211                     	;# 
   772  0212                     	;# 
   773  0212                     	;# 
   774  0213                     	;# 
   775  0213                     	;# 
   776  0214                     	;# 
   777  0214                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0215                     	;# 
   781  0216                     	;# 
   782  0216                     	;# 
   783  0217                     	;# 
   784  0217                     	;# 
   785  0391                     	;# 
   786  0392                     	;# 
   787  0393                     	;# 
   788  0394                     	;# 
   789  0395                     	;# 
   790  0396                     	;# 
   791  0611                     	;# 
   792  0612                     	;# 
   793  0613                     	;# 
   794  0613                     	;# 
   795  0614                     	;# 
   796  0615                     	;# 
   797  0616                     	;# 
   798  0616                     	;# 
   799  0711                     	;# 
   800  0711                     	;# 
   801  0711                     	;# 
   802  0712                     	;# 
   803  0712                     	;# 
   804  0713                     	;# 
   805  0713                     	;# 
   806  0713                     	;# 
   807  0714                     	;# 
   808  0714                     	;# 
   809  0714                     	;# 
   810  0715                     	;# 
   811  0715                     	;# 
   812  0716                     	;# 
   813  0716                     	;# 
   814  0716                     	;# 
   815  0716                     	;# 
   816  0717                     	;# 
   817  0717                     	;# 
   818  0717                     	;# 
   819  0717                     	;# 
   820  0718                     	;# 
   821  0718                     	;# 
   822  0718                     	;# 
   823  0719                     	;# 
   824  0719                     	;# 
   825  0719                     	;# 
   826  0719                     	;# 
   827  071A                     	;# 
   828  071A                     	;# 
   829  071A                     	;# 
   830  071A                     	;# 
   831  071A                     	;# 
   832  071B                     	;# 
   833  071B                     	;# 
   834  071C                     	;# 
   835  071C                     	;# 
   836  071C                     	;# 
   837  071C                     	;# 
   838  071C                     	;# 
   839  071D                     	;# 
   840  071D                     	;# 
   841  071E                     	;# 
   842  071E                     	;# 
   843  0791                     	;# 
   844  0791                     	;# 
   845  0793                     	;# 
   846  0793                     	;# 
   847  0794                     	;# 
   848  0794                     	;# 
   849  0796                     	;# 
   850  0796                     	;# 
   851  0796                     	;# 
   852  0797                     	;# 
   853  0797                     	;# 
   854  0797                     	;# 
   855  0798                     	;# 
   856  0798                     	;# 
   857  0799                     	;# 
   858  0799                     	;# 
   859  0799                     	;# 
   860  079A                     	;# 
   861  079A                     	;# 
   862  079A                     	;# 
   863  079B                     	;# 
   864  079C                     	;# 
   865  079C                     	;# 
   866  079C                     	;# 
   867  079D                     	;# 
   868  079E                     	;# 
   869  079E                     	;# 
   870  0F8C                     	;# 
   871  0F8D                     	;# 
   872  0F91                     	;# 
   873  0F96                     	;# 
   874  0F97                     	;# 
   875  0F9C                     	;# 
   876  0F9D                     	;# 
   877  0F9E                     	;# 
   878  0FE3                     	;# 
   879  0FE4                     	;# 
   880  0FE5                     	;# 
   881  0FE6                     	;# 
   882  0FE7                     	;# 
   883  0FE8                     	;# 
   884  0FE9                     	;# 
   885  0FEA                     	;# 
   886  0FEB                     	;# 
   887  0FED                     	;# 
   888  0FEE                     	;# 
   889  0FEF                     	;# 
   890  0000                     	;# 
   891  0001                     	;# 
   892  0002                     	;# 
   893  0003                     	;# 
   894  0004                     	;# 
   895  0005                     	;# 
   896  0006                     	;# 
   897  0007                     	;# 
   898  0008                     	;# 
   899  0009                     	;# 
   900  000A                     	;# 
   901  000B                     	;# 
   902  000C                     	;# 
   903  000D                     	;# 
   904  000E                     	;# 
   905  0011                     	;# 
   906  0012                     	;# 
   907  0015                     	;# 
   908  0016                     	;# 
   909  0016                     	;# 
   910  0017                     	;# 
   911  0018                     	;# 
   912  0019                     	;# 
   913  001A                     	;# 
   914  001B                     	;# 
   915  001C                     	;# 
   916  008C                     	;# 
   917  008D                     	;# 
   918  008E                     	;# 
   919  0091                     	;# 
   920  0092                     	;# 
   921  0095                     	;# 
   922  0096                     	;# 
   923  0097                     	;# 
   924  0099                     	;# 
   925  009A                     	;# 
   926  009B                     	;# 
   927  009B                     	;# 
   928  009C                     	;# 
   929  009D                     	;# 
   930  009E                     	;# 
   931  009F                     	;# 
   932  010C                     	;# 
   933  010D                     	;# 
   934  010E                     	;# 
   935  0116                     	;# 
   936  0117                     	;# 
   937  011D                     	;# 
   938  018C                     	;# 
   939  018D                     	;# 
   940  018E                     	;# 
   941  0191                     	;# 
   942  0191                     	;# 
   943  0192                     	;# 
   944  0193                     	;# 
   945  0193                     	;# 
   946  0194                     	;# 
   947  0195                     	;# 
   948  0196                     	;# 
   949  0199                     	;# 
   950  019A                     	;# 
   951  019B                     	;# 
   952  019B                     	;# 
   953  019C                     	;# 
   954  019D                     	;# 
   955  019E                     	;# 
   956  019F                     	;# 
   957  020C                     	;# 
   958  020D                     	;# 
   959  0211                     	;# 
   960  0211                     	;# 
   961  0212                     	;# 
   962  0212                     	;# 
   963  0213                     	;# 
   964  0213                     	;# 
   965  0214                     	;# 
   966  0214                     	;# 
   967  0215                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0216                     	;# 
   971  0216                     	;# 
   972  0217                     	;# 
   973  0217                     	;# 
   974  0391                     	;# 
   975  0392                     	;# 
   976  0393                     	;# 
   977  0394                     	;# 
   978  0395                     	;# 
   979  0396                     	;# 
   980  0611                     	;# 
   981  0612                     	;# 
   982  0613                     	;# 
   983  0613                     	;# 
   984  0614                     	;# 
   985  0615                     	;# 
   986  0616                     	;# 
   987  0616                     	;# 
   988  0711                     	;# 
   989  0711                     	;# 
   990  0711                     	;# 
   991  0712                     	;# 
   992  0712                     	;# 
   993  0713                     	;# 
   994  0713                     	;# 
   995  0713                     	;# 
   996  0714                     	;# 
   997  0714                     	;# 
   998  0714                     	;# 
   999  0715                     	;# 
  1000  0715                     	;# 
  1001  0716                     	;# 
  1002  0716                     	;# 
  1003  0716                     	;# 
  1004  0716                     	;# 
  1005  0717                     	;# 
  1006  0717                     	;# 
  1007  0717                     	;# 
  1008  0717                     	;# 
  1009  0718                     	;# 
  1010  0718                     	;# 
  1011  0718                     	;# 
  1012  0719                     	;# 
  1013  0719                     	;# 
  1014  0719                     	;# 
  1015  0719                     	;# 
  1016  071A                     	;# 
  1017  071A                     	;# 
  1018  071A                     	;# 
  1019  071A                     	;# 
  1020  071A                     	;# 
  1021  071B                     	;# 
  1022  071B                     	;# 
  1023  071C                     	;# 
  1024  071C                     	;# 
  1025  071C                     	;# 
  1026  071C                     	;# 
  1027  071C                     	;# 
  1028  071D                     	;# 
  1029  071D                     	;# 
  1030  071E                     	;# 
  1031  071E                     	;# 
  1032  0791                     	;# 
  1033  0791                     	;# 
  1034  0793                     	;# 
  1035  0793                     	;# 
  1036  0794                     	;# 
  1037  0794                     	;# 
  1038  0796                     	;# 
  1039  0796                     	;# 
  1040  0796                     	;# 
  1041  0797                     	;# 
  1042  0797                     	;# 
  1043  0797                     	;# 
  1044  0798                     	;# 
  1045  0798                     	;# 
  1046  0799                     	;# 
  1047  0799                     	;# 
  1048  0799                     	;# 
  1049  079A                     	;# 
  1050  079A                     	;# 
  1051  079A                     	;# 
  1052  079B                     	;# 
  1053  079C                     	;# 
  1054  079C                     	;# 
  1055  079C                     	;# 
  1056  079D                     	;# 
  1057  079E                     	;# 
  1058  079E                     	;# 
  1059  0F8C                     	;# 
  1060  0F8D                     	;# 
  1061  0F91                     	;# 
  1062  0F96                     	;# 
  1063  0F97                     	;# 
  1064  0F9C                     	;# 
  1065  0F9D                     	;# 
  1066  0F9E                     	;# 
  1067  0FE3                     	;# 
  1068  0FE4                     	;# 
  1069  0FE5                     	;# 
  1070  0FE6                     	;# 
  1071  0FE7                     	;# 
  1072  0FE8                     	;# 
  1073  0FE9                     	;# 
  1074  0FEA                     	;# 
  1075  0FEB                     	;# 
  1076  0FED                     	;# 
  1077  0FEE                     	;# 
  1078  0FEF                     	;# 
  1079  0000                     	;# 
  1080  0001                     	;# 
  1081  0002                     	;# 
  1082  0003                     	;# 
  1083  0004                     	;# 
  1084  0005                     	;# 
  1085  0006                     	;# 
  1086  0007                     	;# 
  1087  0008                     	;# 
  1088  0009                     	;# 
  1089  000A                     	;# 
  1090  000B                     	;# 
  1091  000C                     	;# 
  1092  000D                     	;# 
  1093  000E                     	;# 
  1094  0011                     	;# 
  1095  0012                     	;# 
  1096  0015                     	;# 
  1097  0016                     	;# 
  1098  0016                     	;# 
  1099  0017                     	;# 
  1100  0018                     	;# 
  1101  0019                     	;# 
  1102  001A                     	;# 
  1103  001B                     	;# 
  1104  001C                     	;# 
  1105  008C                     	;# 
  1106  008D                     	;# 
  1107  008E                     	;# 
  1108  0091                     	;# 
  1109  0092                     	;# 
  1110  0095                     	;# 
  1111  0096                     	;# 
  1112  0097                     	;# 
  1113  0099                     	;# 
  1114  009A                     	;# 
  1115  009B                     	;# 
  1116  009B                     	;# 
  1117  009C                     	;# 
  1118  009D                     	;# 
  1119  009E                     	;# 
  1120  009F                     	;# 
  1121  010C                     	;# 
  1122  010D                     	;# 
  1123  010E                     	;# 
  1124  0116                     	;# 
  1125  0117                     	;# 
  1126  011D                     	;# 
  1127  018C                     	;# 
  1128  018D                     	;# 
  1129  018E                     	;# 
  1130  0191                     	;# 
  1131  0191                     	;# 
  1132  0192                     	;# 
  1133  0193                     	;# 
  1134  0193                     	;# 
  1135  0194                     	;# 
  1136  0195                     	;# 
  1137  0196                     	;# 
  1138  0199                     	;# 
  1139  019A                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019C                     	;# 
  1143  019D                     	;# 
  1144  019E                     	;# 
  1145  019F                     	;# 
  1146  020C                     	;# 
  1147  020D                     	;# 
  1148  0211                     	;# 
  1149  0211                     	;# 
  1150  0212                     	;# 
  1151  0212                     	;# 
  1152  0213                     	;# 
  1153  0213                     	;# 
  1154  0214                     	;# 
  1155  0214                     	;# 
  1156  0215                     	;# 
  1157  0215                     	;# 
  1158  0215                     	;# 
  1159  0216                     	;# 
  1160  0216                     	;# 
  1161  0217                     	;# 
  1162  0217                     	;# 
  1163  0391                     	;# 
  1164  0392                     	;# 
  1165  0393                     	;# 
  1166  0394                     	;# 
  1167  0395                     	;# 
  1168  0396                     	;# 
  1169  0611                     	;# 
  1170  0612                     	;# 
  1171  0613                     	;# 
  1172  0613                     	;# 
  1173  0614                     	;# 
  1174  0615                     	;# 
  1175  0616                     	;# 
  1176  0616                     	;# 
  1177  0711                     	;# 
  1178  0711                     	;# 
  1179  0711                     	;# 
  1180  0712                     	;# 
  1181  0712                     	;# 
  1182  0713                     	;# 
  1183  0713                     	;# 
  1184  0713                     	;# 
  1185  0714                     	;# 
  1186  0714                     	;# 
  1187  0714                     	;# 
  1188  0715                     	;# 
  1189  0715                     	;# 
  1190  0716                     	;# 
  1191  0716                     	;# 
  1192  0716                     	;# 
  1193  0716                     	;# 
  1194  0717                     	;# 
  1195  0717                     	;# 
  1196  0717                     	;# 
  1197  0717                     	;# 
  1198  0718                     	;# 
  1199  0718                     	;# 
  1200  0718                     	;# 
  1201  0719                     	;# 
  1202  0719                     	;# 
  1203  0719                     	;# 
  1204  0719                     	;# 
  1205  071A                     	;# 
  1206  071A                     	;# 
  1207  071A                     	;# 
  1208  071A                     	;# 
  1209  071A                     	;# 
  1210  071B                     	;# 
  1211  071B                     	;# 
  1212  071C                     	;# 
  1213  071C                     	;# 
  1214  071C                     	;# 
  1215  071C                     	;# 
  1216  071C                     	;# 
  1217  071D                     	;# 
  1218  071D                     	;# 
  1219  071E                     	;# 
  1220  071E                     	;# 
  1221  0791                     	;# 
  1222  0791                     	;# 
  1223  0793                     	;# 
  1224  0793                     	;# 
  1225  0794                     	;# 
  1226  0794                     	;# 
  1227  0796                     	;# 
  1228  0796                     	;# 
  1229  0796                     	;# 
  1230  0797                     	;# 
  1231  0797                     	;# 
  1232  0797                     	;# 
  1233  0798                     	;# 
  1234  0798                     	;# 
  1235  0799                     	;# 
  1236  0799                     	;# 
  1237  0799                     	;# 
  1238  079A                     	;# 
  1239  079A                     	;# 
  1240  079A                     	;# 
  1241  079B                     	;# 
  1242  079C                     	;# 
  1243  079C                     	;# 
  1244  079C                     	;# 
  1245  079D                     	;# 
  1246  079E                     	;# 
  1247  079E                     	;# 
  1248  0F8C                     	;# 
  1249  0F8D                     	;# 
  1250  0F91                     	;# 
  1251  0F96                     	;# 
  1252  0F97                     	;# 
  1253  0F9C                     	;# 
  1254  0F9D                     	;# 
  1255  0F9E                     	;# 
  1256  0FE3                     	;# 
  1257  0FE4                     	;# 
  1258  0FE5                     	;# 
  1259  0FE6                     	;# 
  1260  0FE7                     	;# 
  1261  0FE8                     	;# 
  1262  0FE9                     	;# 
  1263  0FEA                     	;# 
  1264  0FEB                     	;# 
  1265  0FED                     	;# 
  1266  0FEE                     	;# 
  1267  0FEF                     	;# 
  1268  0000                     	;# 
  1269  0001                     	;# 
  1270  0002                     	;# 
  1271  0003                     	;# 
  1272  0004                     	;# 
  1273  0005                     	;# 
  1274  0006                     	;# 
  1275  0007                     	;# 
  1276  0008                     	;# 
  1277  0009                     	;# 
  1278  000A                     	;# 
  1279  000B                     	;# 
  1280  000C                     	;# 
  1281  000D                     	;# 
  1282  000E                     	;# 
  1283  0011                     	;# 
  1284  0012                     	;# 
  1285  0015                     	;# 
  1286  0016                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001C                     	;# 
  1294  008C                     	;# 
  1295  008D                     	;# 
  1296  008E                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0097                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  009F                     	;# 
  1310  010C                     	;# 
  1311  010D                     	;# 
  1312  010E                     	;# 
  1313  0116                     	;# 
  1314  0117                     	;# 
  1315  011D                     	;# 
  1316  018C                     	;# 
  1317  018D                     	;# 
  1318  018E                     	;# 
  1319  0191                     	;# 
  1320  0191                     	;# 
  1321  0192                     	;# 
  1322  0193                     	;# 
  1323  0193                     	;# 
  1324  0194                     	;# 
  1325  0195                     	;# 
  1326  0196                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019C                     	;# 
  1332  019D                     	;# 
  1333  019E                     	;# 
  1334  019F                     	;# 
  1335  020C                     	;# 
  1336  020D                     	;# 
  1337  0211                     	;# 
  1338  0211                     	;# 
  1339  0212                     	;# 
  1340  0212                     	;# 
  1341  0213                     	;# 
  1342  0213                     	;# 
  1343  0214                     	;# 
  1344  0214                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0216                     	;# 
  1349  0216                     	;# 
  1350  0217                     	;# 
  1351  0217                     	;# 
  1352  0391                     	;# 
  1353  0392                     	;# 
  1354  0393                     	;# 
  1355  0394                     	;# 
  1356  0395                     	;# 
  1357  0396                     	;# 
  1358  0611                     	;# 
  1359  0612                     	;# 
  1360  0613                     	;# 
  1361  0613                     	;# 
  1362  0614                     	;# 
  1363  0615                     	;# 
  1364  0616                     	;# 
  1365  0616                     	;# 
  1366  0711                     	;# 
  1367  0711                     	;# 
  1368  0711                     	;# 
  1369  0712                     	;# 
  1370  0712                     	;# 
  1371  0713                     	;# 
  1372  0713                     	;# 
  1373  0713                     	;# 
  1374  0714                     	;# 
  1375  0714                     	;# 
  1376  0714                     	;# 
  1377  0715                     	;# 
  1378  0715                     	;# 
  1379  0716                     	;# 
  1380  0716                     	;# 
  1381  0716                     	;# 
  1382  0716                     	;# 
  1383  0717                     	;# 
  1384  0717                     	;# 
  1385  0717                     	;# 
  1386  0717                     	;# 
  1387  0718                     	;# 
  1388  0718                     	;# 
  1389  0718                     	;# 
  1390  0719                     	;# 
  1391  0719                     	;# 
  1392  0719                     	;# 
  1393  0719                     	;# 
  1394  071A                     	;# 
  1395  071A                     	;# 
  1396  071A                     	;# 
  1397  071A                     	;# 
  1398  071A                     	;# 
  1399  071B                     	;# 
  1400  071B                     	;# 
  1401  071C                     	;# 
  1402  071C                     	;# 
  1403  071C                     	;# 
  1404  071C                     	;# 
  1405  071C                     	;# 
  1406  071D                     	;# 
  1407  071D                     	;# 
  1408  071E                     	;# 
  1409  071E                     	;# 
  1410  0791                     	;# 
  1411  0791                     	;# 
  1412  0793                     	;# 
  1413  0793                     	;# 
  1414  0794                     	;# 
  1415  0794                     	;# 
  1416  0796                     	;# 
  1417  0796                     	;# 
  1418  0796                     	;# 
  1419  0797                     	;# 
  1420  0797                     	;# 
  1421  0797                     	;# 
  1422  0798                     	;# 
  1423  0798                     	;# 
  1424  0799                     	;# 
  1425  0799                     	;# 
  1426  0799                     	;# 
  1427  079A                     	;# 
  1428  079A                     	;# 
  1429  079A                     	;# 
  1430  079B                     	;# 
  1431  079C                     	;# 
  1432  079C                     	;# 
  1433  079C                     	;# 
  1434  079D                     	;# 
  1435  079E                     	;# 
  1436  079E                     	;# 
  1437  0F8C                     	;# 
  1438  0F8D                     	;# 
  1439  0F91                     	;# 
  1440  0F96                     	;# 
  1441  0F97                     	;# 
  1442  0F9C                     	;# 
  1443  0F9D                     	;# 
  1444  0F9E                     	;# 
  1445  0FE3                     	;# 
  1446  0FE4                     	;# 
  1447  0FE5                     	;# 
  1448  0FE6                     	;# 
  1449  0FE7                     	;# 
  1450  0FE8                     	;# 
  1451  0FE9                     	;# 
  1452  0FEA                     	;# 
  1453  0FEB                     	;# 
  1454  0FED                     	;# 
  1455  0FEE                     	;# 
  1456  0FEF                     	;# 
  1457  0000                     	;# 
  1458  0001                     	;# 
  1459  0002                     	;# 
  1460  0003                     	;# 
  1461  0004                     	;# 
  1462  0005                     	;# 
  1463  0006                     	;# 
  1464  0007                     	;# 
  1465  0008                     	;# 
  1466  0009                     	;# 
  1467  000A                     	;# 
  1468  000B                     	;# 
  1469  000C                     	;# 
  1470  000D                     	;# 
  1471  000E                     	;# 
  1472  0011                     	;# 
  1473  0012                     	;# 
  1474  0015                     	;# 
  1475  0016                     	;# 
  1476  0016                     	;# 
  1477  0017                     	;# 
  1478  0018                     	;# 
  1479  0019                     	;# 
  1480  001A                     	;# 
  1481  001B                     	;# 
  1482  001C                     	;# 
  1483  008C                     	;# 
  1484  008D                     	;# 
  1485  008E                     	;# 
  1486  0091                     	;# 
  1487  0092                     	;# 
  1488  0095                     	;# 
  1489  0096                     	;# 
  1490  0097                     	;# 
  1491  0099                     	;# 
  1492  009A                     	;# 
  1493  009B                     	;# 
  1494  009B                     	;# 
  1495  009C                     	;# 
  1496  009D                     	;# 
  1497  009E                     	;# 
  1498  009F                     	;# 
  1499  010C                     	;# 
  1500  010D                     	;# 
  1501  010E                     	;# 
  1502  0116                     	;# 
  1503  0117                     	;# 
  1504  011D                     	;# 
  1505  018C                     	;# 
  1506  018D                     	;# 
  1507  018E                     	;# 
  1508  0191                     	;# 
  1509  0191                     	;# 
  1510  0192                     	;# 
  1511  0193                     	;# 
  1512  0193                     	;# 
  1513  0194                     	;# 
  1514  0195                     	;# 
  1515  0196                     	;# 
  1516  0199                     	;# 
  1517  019A                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019C                     	;# 
  1521  019D                     	;# 
  1522  019E                     	;# 
  1523  019F                     	;# 
  1524  020C                     	;# 
  1525  020D                     	;# 
  1526  0211                     	;# 
  1527  0211                     	;# 
  1528  0212                     	;# 
  1529  0212                     	;# 
  1530  0213                     	;# 
  1531  0213                     	;# 
  1532  0214                     	;# 
  1533  0214                     	;# 
  1534  0215                     	;# 
  1535  0215                     	;# 
  1536  0215                     	;# 
  1537  0216                     	;# 
  1538  0216                     	;# 
  1539  0217                     	;# 
  1540  0217                     	;# 
  1541  0391                     	;# 
  1542  0392                     	;# 
  1543  0393                     	;# 
  1544  0394                     	;# 
  1545  0395                     	;# 
  1546  0396                     	;# 
  1547  0611                     	;# 
  1548  0612                     	;# 
  1549  0613                     	;# 
  1550  0613                     	;# 
  1551  0614                     	;# 
  1552  0615                     	;# 
  1553  0616                     	;# 
  1554  0616                     	;# 
  1555  0711                     	;# 
  1556  0711                     	;# 
  1557  0711                     	;# 
  1558  0712                     	;# 
  1559  0712                     	;# 
  1560  0713                     	;# 
  1561  0713                     	;# 
  1562  0713                     	;# 
  1563  0714                     	;# 
  1564  0714                     	;# 
  1565  0714                     	;# 
  1566  0715                     	;# 
  1567  0715                     	;# 
  1568  0716                     	;# 
  1569  0716                     	;# 
  1570  0716                     	;# 
  1571  0716                     	;# 
  1572  0717                     	;# 
  1573  0717                     	;# 
  1574  0717                     	;# 
  1575  0717                     	;# 
  1576  0718                     	;# 
  1577  0718                     	;# 
  1578  0718                     	;# 
  1579  0719                     	;# 
  1580  0719                     	;# 
  1581  0719                     	;# 
  1582  0719                     	;# 
  1583  071A                     	;# 
  1584  071A                     	;# 
  1585  071A                     	;# 
  1586  071A                     	;# 
  1587  071A                     	;# 
  1588  071B                     	;# 
  1589  071B                     	;# 
  1590  071C                     	;# 
  1591  071C                     	;# 
  1592  071C                     	;# 
  1593  071C                     	;# 
  1594  071C                     	;# 
  1595  071D                     	;# 
  1596  071D                     	;# 
  1597  071E                     	;# 
  1598  071E                     	;# 
  1599  0791                     	;# 
  1600  0791                     	;# 
  1601  0793                     	;# 
  1602  0793                     	;# 
  1603  0794                     	;# 
  1604  0794                     	;# 
  1605  0796                     	;# 
  1606  0796                     	;# 
  1607  0796                     	;# 
  1608  0797                     	;# 
  1609  0797                     	;# 
  1610  0797                     	;# 
  1611  0798                     	;# 
  1612  0798                     	;# 
  1613  0799                     	;# 
  1614  0799                     	;# 
  1615  0799                     	;# 
  1616  079A                     	;# 
  1617  079A                     	;# 
  1618  079A                     	;# 
  1619  079B                     	;# 
  1620  079C                     	;# 
  1621  079C                     	;# 
  1622  079C                     	;# 
  1623  079D                     	;# 
  1624  079E                     	;# 
  1625  079E                     	;# 
  1626  0F8C                     	;# 
  1627  0F8D                     	;# 
  1628  0F91                     	;# 
  1629  0F96                     	;# 
  1630  0F97                     	;# 
  1631  0F9C                     	;# 
  1632  0F9D                     	;# 
  1633  0F9E                     	;# 
  1634  0FE3                     	;# 
  1635  0FE4                     	;# 
  1636  0FE5                     	;# 
  1637  0FE6                     	;# 
  1638  0FE7                     	;# 
  1639  0FE8                     	;# 
  1640  0FE9                     	;# 
  1641  0FEA                     	;# 
  1642  0FEB                     	;# 
  1643  0FED                     	;# 
  1644  0FEE                     	;# 
  1645  0FEF                     	;# 
  1646  0000                     	;# 
  1647  0001                     	;# 
  1648  0002                     	;# 
  1649  0003                     	;# 
  1650  0004                     	;# 
  1651  0005                     	;# 
  1652  0006                     	;# 
  1653  0007                     	;# 
  1654  0008                     	;# 
  1655  0009                     	;# 
  1656  000A                     	;# 
  1657  000B                     	;# 
  1658  000C                     	;# 
  1659  000D                     	;# 
  1660  000E                     	;# 
  1661  0011                     	;# 
  1662  0012                     	;# 
  1663  0015                     	;# 
  1664  0016                     	;# 
  1665  0016                     	;# 
  1666  0017                     	;# 
  1667  0018                     	;# 
  1668  0019                     	;# 
  1669  001A                     	;# 
  1670  001B                     	;# 
  1671  001C                     	;# 
  1672  008C                     	;# 
  1673  008D                     	;# 
  1674  008E                     	;# 
  1675  0091                     	;# 
  1676  0092                     	;# 
  1677  0095                     	;# 
  1678  0096                     	;# 
  1679  0097                     	;# 
  1680  0099                     	;# 
  1681  009A                     	;# 
  1682  009B                     	;# 
  1683  009B                     	;# 
  1684  009C                     	;# 
  1685  009D                     	;# 
  1686  009E                     	;# 
  1687  009F                     	;# 
  1688  010C                     	;# 
  1689  010D                     	;# 
  1690  010E                     	;# 
  1691  0116                     	;# 
  1692  0117                     	;# 
  1693  011D                     	;# 
  1694  018C                     	;# 
  1695  018D                     	;# 
  1696  018E                     	;# 
  1697  0191                     	;# 
  1698  0191                     	;# 
  1699  0192                     	;# 
  1700  0193                     	;# 
  1701  0193                     	;# 
  1702  0194                     	;# 
  1703  0195                     	;# 
  1704  0196                     	;# 
  1705  0199                     	;# 
  1706  019A                     	;# 
  1707  019B                     	;# 
  1708  019B                     	;# 
  1709  019C                     	;# 
  1710  019D                     	;# 
  1711  019E                     	;# 
  1712  019F                     	;# 
  1713  020C                     	;# 
  1714  020D                     	;# 
  1715  0211                     	;# 
  1716  0211                     	;# 
  1717  0212                     	;# 
  1718  0212                     	;# 
  1719  0213                     	;# 
  1720  0213                     	;# 
  1721  0214                     	;# 
  1722  0214                     	;# 
  1723  0215                     	;# 
  1724  0215                     	;# 
  1725  0215                     	;# 
  1726  0216                     	;# 
  1727  0216                     	;# 
  1728  0217                     	;# 
  1729  0217                     	;# 
  1730  0391                     	;# 
  1731  0392                     	;# 
  1732  0393                     	;# 
  1733  0394                     	;# 
  1734  0395                     	;# 
  1735  0396                     	;# 
  1736  0611                     	;# 
  1737  0612                     	;# 
  1738  0613                     	;# 
  1739  0613                     	;# 
  1740  0614                     	;# 
  1741  0615                     	;# 
  1742  0616                     	;# 
  1743  0616                     	;# 
  1744  0711                     	;# 
  1745  0711                     	;# 
  1746  0711                     	;# 
  1747  0712                     	;# 
  1748  0712                     	;# 
  1749  0713                     	;# 
  1750  0713                     	;# 
  1751  0713                     	;# 
  1752  0714                     	;# 
  1753  0714                     	;# 
  1754  0714                     	;# 
  1755  0715                     	;# 
  1756  0715                     	;# 
  1757  0716                     	;# 
  1758  0716                     	;# 
  1759  0716                     	;# 
  1760  0716                     	;# 
  1761  0717                     	;# 
  1762  0717                     	;# 
  1763  0717                     	;# 
  1764  0717                     	;# 
  1765  0718                     	;# 
  1766  0718                     	;# 
  1767  0718                     	;# 
  1768  0719                     	;# 
  1769  0719                     	;# 
  1770  0719                     	;# 
  1771  0719                     	;# 
  1772  071A                     	;# 
  1773  071A                     	;# 
  1774  071A                     	;# 
  1775  071A                     	;# 
  1776  071A                     	;# 
  1777  071B                     	;# 
  1778  071B                     	;# 
  1779  071C                     	;# 
  1780  071C                     	;# 
  1781  071C                     	;# 
  1782  071C                     	;# 
  1783  071C                     	;# 
  1784  071D                     	;# 
  1785  071D                     	;# 
  1786  071E                     	;# 
  1787  071E                     	;# 
  1788  0791                     	;# 
  1789  0791                     	;# 
  1790  0793                     	;# 
  1791  0793                     	;# 
  1792  0794                     	;# 
  1793  0794                     	;# 
  1794  0796                     	;# 
  1795  0796                     	;# 
  1796  0796                     	;# 
  1797  0797                     	;# 
  1798  0797                     	;# 
  1799  0797                     	;# 
  1800  0798                     	;# 
  1801  0798                     	;# 
  1802  0799                     	;# 
  1803  0799                     	;# 
  1804  0799                     	;# 
  1805  079A                     	;# 
  1806  079A                     	;# 
  1807  079A                     	;# 
  1808  079B                     	;# 
  1809  079C                     	;# 
  1810  079C                     	;# 
  1811  079C                     	;# 
  1812  079D                     	;# 
  1813  079E                     	;# 
  1814  079E                     	;# 
  1815  0F8C                     	;# 
  1816  0F8D                     	;# 
  1817  0F91                     	;# 
  1818  0F96                     	;# 
  1819  0F97                     	;# 
  1820  0F9C                     	;# 
  1821  0F9D                     	;# 
  1822  0F9E                     	;# 
  1823  0FE3                     	;# 
  1824  0FE4                     	;# 
  1825  0FE5                     	;# 
  1826  0FE6                     	;# 
  1827  0FE7                     	;# 
  1828  0FE8                     	;# 
  1829  0FE9                     	;# 
  1830  0FEA                     	;# 
  1831  0FEB                     	;# 
  1832  0FED                     	;# 
  1833  0FEE                     	;# 
  1834  0FEF                     	;# 
  1835  0000                     	;# 
  1836  0001                     	;# 
  1837  0002                     	;# 
  1838  0003                     	;# 
  1839  0004                     	;# 
  1840  0005                     	;# 
  1841  0006                     	;# 
  1842  0007                     	;# 
  1843  0008                     	;# 
  1844  0009                     	;# 
  1845  000A                     	;# 
  1846  000B                     	;# 
  1847  000C                     	;# 
  1848  000D                     	;# 
  1849  000E                     	;# 
  1850  0011                     	;# 
  1851  0012                     	;# 
  1852  0015                     	;# 
  1853  0016                     	;# 
  1854  0016                     	;# 
  1855  0017                     	;# 
  1856  0018                     	;# 
  1857  0019                     	;# 
  1858  001A                     	;# 
  1859  001B                     	;# 
  1860  001C                     	;# 
  1861  008C                     	;# 
  1862  008D                     	;# 
  1863  008E                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  009F                     	;# 
  1877  010C                     	;# 
  1878  010D                     	;# 
  1879  010E                     	;# 
  1880  0116                     	;# 
  1881  0117                     	;# 
  1882  011D                     	;# 
  1883  018C                     	;# 
  1884  018D                     	;# 
  1885  018E                     	;# 
  1886  0191                     	;# 
  1887  0191                     	;# 
  1888  0192                     	;# 
  1889  0193                     	;# 
  1890  0193                     	;# 
  1891  0194                     	;# 
  1892  0195                     	;# 
  1893  0196                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019D                     	;# 
  1900  019E                     	;# 
  1901  019F                     	;# 
  1902  020C                     	;# 
  1903  020D                     	;# 
  1904  0211                     	;# 
  1905  0211                     	;# 
  1906  0212                     	;# 
  1907  0212                     	;# 
  1908  0213                     	;# 
  1909  0213                     	;# 
  1910  0214                     	;# 
  1911  0214                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0391                     	;# 
  1920  0392                     	;# 
  1921  0393                     	;# 
  1922  0394                     	;# 
  1923  0395                     	;# 
  1924  0396                     	;# 
  1925  0611                     	;# 
  1926  0612                     	;# 
  1927  0613                     	;# 
  1928  0613                     	;# 
  1929  0614                     	;# 
  1930  0615                     	;# 
  1931  0616                     	;# 
  1932  0616                     	;# 
  1933  0711                     	;# 
  1934  0711                     	;# 
  1935  0711                     	;# 
  1936  0712                     	;# 
  1937  0712                     	;# 
  1938  0713                     	;# 
  1939  0713                     	;# 
  1940  0713                     	;# 
  1941  0714                     	;# 
  1942  0714                     	;# 
  1943  0714                     	;# 
  1944  0715                     	;# 
  1945  0715                     	;# 
  1946  0716                     	;# 
  1947  0716                     	;# 
  1948  0716                     	;# 
  1949  0716                     	;# 
  1950  0717                     	;# 
  1951  0717                     	;# 
  1952  0717                     	;# 
  1953  0717                     	;# 
  1954  0718                     	;# 
  1955  0718                     	;# 
  1956  0718                     	;# 
  1957  0719                     	;# 
  1958  0719                     	;# 
  1959  0719                     	;# 
  1960  0719                     	;# 
  1961  071A                     	;# 
  1962  071A                     	;# 
  1963  071A                     	;# 
  1964  071A                     	;# 
  1965  071A                     	;# 
  1966  071B                     	;# 
  1967  071B                     	;# 
  1968  071C                     	;# 
  1969  071C                     	;# 
  1970  071C                     	;# 
  1971  071C                     	;# 
  1972  071C                     	;# 
  1973  071D                     	;# 
  1974  071D                     	;# 
  1975  071E                     	;# 
  1976  071E                     	;# 
  1977  0791                     	;# 
  1978  0791                     	;# 
  1979  0793                     	;# 
  1980  0793                     	;# 
  1981  0794                     	;# 
  1982  0794                     	;# 
  1983  0796                     	;# 
  1984  0796                     	;# 
  1985  0796                     	;# 
  1986  0797                     	;# 
  1987  0797                     	;# 
  1988  0797                     	;# 
  1989  0798                     	;# 
  1990  0798                     	;# 
  1991  0799                     	;# 
  1992  0799                     	;# 
  1993  0799                     	;# 
  1994  079A                     	;# 
  1995  079A                     	;# 
  1996  079A                     	;# 
  1997  079B                     	;# 
  1998  079C                     	;# 
  1999  079C                     	;# 
  2000  079C                     	;# 
  2001  079D                     	;# 
  2002  079E                     	;# 
  2003  079E                     	;# 
  2004  0F8C                     	;# 
  2005  0F8D                     	;# 
  2006  0F91                     	;# 
  2007  0F96                     	;# 
  2008  0F97                     	;# 
  2009  0F9C                     	;# 
  2010  0F9D                     	;# 
  2011  0F9E                     	;# 
  2012  0FE3                     	;# 
  2013  0FE4                     	;# 
  2014  0FE5                     	;# 
  2015  0FE6                     	;# 
  2016  0FE7                     	;# 
  2017  0FE8                     	;# 
  2018  0FE9                     	;# 
  2019  0FEA                     	;# 
  2020  0FEB                     	;# 
  2021  0FED                     	;# 
  2022  0FEE                     	;# 
  2023  0FEF                     	;# 
  2024                           
  2025                           	psect	idataBANK0
  2026  0C37                     __pidataBANK0:	
  2027                           
  2028                           ;initializer for _Button_StateMachine
  2029  0C37  3466               	retlw	low _Button_State_Initializing
  2030  0C38  3406               	retlw	high _Button_State_Initializing
  2031  0C39  34B4               	retlw	low _Button_State_NotPressed
  2032  0C3A  3402               	retlw	high _Button_State_NotPressed
  2033  0C3B  3400               	retlw	low _Button_State_Pressed
  2034  0C3C  3406               	retlw	high _Button_State_Pressed
  2035                           
  2036                           ;initializer for _callback_notPressed
  2037  0C3D  347F               	retlw	low _Button_DefaultCallback
  2038  0C3E  340B               	retlw	high _Button_DefaultCallback
  2039                           
  2040                           ;initializer for _callback_pressed
  2041  0C3F  347F               	retlw	low _Button_DefaultCallback
  2042  0C40  340B               	retlw	high _Button_DefaultCallback
  2043                           
  2044                           ;initializer for _callback_sampled
  2045  0C41  3480               	retlw	low _Sensor_DefaultCallback
  2046  0C42  340B               	retlw	high _Sensor_DefaultCallback
  2047                           
  2048                           ;initializer for _sample_period
  2049  0C43  34AE               	retlw	174
  2050                           
  2051                           	psect	idataBANK1
  2052  0DFF                     __pidataBANK1:	
  2053                           
  2054                           ;initializer for _mtouch_sensor
  2055  0DFF  3400               	retlw	0
  2056  0E00  3469               	retlw	105
  2057  0E01  3430               	retlw	48
  2058  0E02  3410               	retlw	16
  2059  0E03  3420               	retlw	32
  2060  0E04  3400               	retlw	0
  2061  0E05  3400               	retlw	0
  2062  0E06  3400               	retlw	0
  2063  0E07  3400               	retlw	0
  2064  0E08  3401               	retlw	1
  2065  0E09  3431               	retlw	49
  2066  0E0A  3430               	retlw	48
  2067  0E0B  3410               	retlw	16
  2068  0E0C  3420               	retlw	32
  2069  0E0D  3400               	retlw	0
  2070  0E0E  3400               	retlw	0
  2071  0E0F  3400               	retlw	0
  2072  0E10  3400               	retlw	0
  2073  0E11  3402               	retlw	2
  2074  0E12  345D               	retlw	93
  2075  0E13  3430               	retlw	48
  2076  0E14  3410               	retlw	16
  2077  0E15  3420               	retlw	32
  2078  0E16  3400               	retlw	0
  2079  0E17  3400               	retlw	0
  2080  0E18  3400               	retlw	0
  2081  0E19  3400               	retlw	0
  2082  0E1A  3403               	retlw	3
  2083  0E1B  3435               	retlw	53
  2084  0E1C  3430               	retlw	48
  2085  0E1D  3410               	retlw	16
  2086  0E1E  3420               	retlw	32
  2087  0E1F  3400               	retlw	0
  2088  0E20  3400               	retlw	0
  2089  0E21  3400               	retlw	0
  2090  0E22  3400               	retlw	0
  2091                           
  2092                           	psect	stringtext1
  2093  1000                     __pstringtext1:	
  2094  1000                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2095  1000  3400               	retlw	0
  2096  1001  340D               	retlw	13
  2097  1002  341C               	retlw	28
  2098  1003  341E               	retlw	30
  2099  1004  3417               	retlw	23
  2100  1005                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2101                           
  2102                           	psect	stringtext2
  2103  1005                     __pstringtext2:	
  2104  1005                     _sensor_scan_group:	
  2105  1005  34A9               	retlw	low ((_mtouch_sensor| 0+9))
  2106  1006  34A0               	retlw	low (_mtouch_sensor| 0)
  2107  1007  34BB               	retlw	low ((_mtouch_sensor| 0+27))
  2108  1008  34B2               	retlw	low ((_mtouch_sensor| 0+18))
  2109  1009                     __end_of_sensor_scan_group:	
  2110                           
  2111                           	psect	stringtext3
  2112  07C6                     __pstringtext3:	
  2113  07C6                     _mtouch_button_init:	
  2114  07C6  3400               	retlw	0
  2115  07C7  3401               	retlw	1
  2116  07C8  3400               	retlw	0
  2117  07C9  3400               	retlw	0
  2118  07CA  3400               	retlw	0
  2119  07CB  3400               	retlw	0
  2120  07CC  3400               	retlw	0
  2121  07CD  3400               	retlw	0
  2122  07CE  3400               	retlw	0
  2123  07CF  3400               	retlw	0
  2124  07D0  3400               	retlw	0
  2125  07D1  3400               	retlw	0
  2126  07D2  3400               	retlw	0
  2127  07D3  3400               	retlw	0
  2128  07D4  3464               	retlw	100
  2129  07D5  3401               	retlw	1
  2130  07D6  3401               	retlw	1
  2131  07D7  3400               	retlw	0
  2132  07D8  3400               	retlw	0
  2133  07D9  3400               	retlw	0
  2134  07DA  3400               	retlw	0
  2135  07DB  3400               	retlw	0
  2136  07DC  3400               	retlw	0
  2137  07DD  3400               	retlw	0
  2138  07DE  3400               	retlw	0
  2139  07DF  3400               	retlw	0
  2140  07E0  3400               	retlw	0
  2141  07E1  3400               	retlw	0
  2142  07E2  3400               	retlw	0
  2143  07E3  3400               	retlw	0
  2144  07E4  3464               	retlw	100
  2145  07E5  3401               	retlw	1
  2146  07E6  3402               	retlw	2
  2147  07E7  3403               	retlw	3
  2148  07E8  3400               	retlw	0
  2149  07E9  3400               	retlw	0
  2150  07EA  3400               	retlw	0
  2151  07EB  3400               	retlw	0
  2152  07EC  3400               	retlw	0
  2153  07ED  3400               	retlw	0
  2154  07EE  3400               	retlw	0
  2155  07EF  3400               	retlw	0
  2156  07F0  3400               	retlw	0
  2157  07F1  3400               	retlw	0
  2158  07F2  3400               	retlw	0
  2159  07F3  3400               	retlw	0
  2160  07F4  3464               	retlw	100
  2161  07F5  3401               	retlw	1
  2162  07F6  3403               	retlw	3
  2163  07F7  3402               	retlw	2
  2164  07F8  3400               	retlw	0
  2165  07F9  3400               	retlw	0
  2166  07FA  3400               	retlw	0
  2167  07FB  3400               	retlw	0
  2168  07FC  3400               	retlw	0
  2169  07FD  3400               	retlw	0
  2170  07FE  3400               	retlw	0
  2171  07FF  3400               	retlw	0
  2172  0800  3400               	retlw	0
  2173  0801  3400               	retlw	0
  2174  0802  3400               	retlw	0
  2175  0803  3400               	retlw	0
  2176  0804  3464               	retlw	100
  2177  0805  3401               	retlw	1
  2178  0806                     __end_of_mtouch_button_init:	
  2179                           
  2180                           	psect	nvBANK0
  2181  006E                     __pnvBANK0:	
  2182  006E                     _EUSART_RxDefaultInterruptHandler:	
  2183  006E                     	ds	2
  2184                           
  2185                           	psect	nvBANK1
  2186  00CC                     __pnvBANK1:	
  2187  00CC                     _EUSART_ErrorHandler:	
  2188  00CC                     	ds	2
  2189  00CE                     _EUSART_OverrunErrorHandler:	
  2190  00CE                     	ds	2
  2191  00D0                     _EUSART_FramingErrorHandler:	
  2192  00D0                     	ds	2
  2193  0012                     _PIR2bits	set	18
  2194  001C                     _T2CONbits	set	28
  2195  001C                     _T2CON	set	28
  2196  001A                     _TMR2	set	26
  2197  001B                     _PR2	set	27
  2198  000B                     _INTCONbits	set	11
  2199  0011                     _PIR1bits	set	17
  2200  005F                     _GIE	set	95
  2201  0095                     _OPTION_REGbits	set	149
  2202  008E                     _TRISC	set	142
  2203  008D                     _TRISB	set	141
  2204  008C                     _TRISA	set	140
  2205  0097                     _WDTCON	set	151
  2206  0099                     _OSCCON	set	153
  2207  0091                     _PIE1bits	set	145
  2208  011D                     _APFCONbits	set	285
  2209  010E                     _LATCbits	set	270
  2210  010C                     _LATAbits	set	268
  2211  011D                     _APFCON	set	285
  2212  010E                     _LATC	set	270
  2213  010D                     _LATB	set	269
  2214  010C                     _LATA	set	268
  2215  0116                     _BORCON	set	278
  2216  018C                     _ANSELA	set	396
  2217  018D                     _ANSELB	set	397
  2218  018E                     _ANSELC	set	398
  2219  0199                     _RCREG	set	409
  2220  019D                     _RCSTAbits	set	413
  2221  019A                     _TXREG	set	410
  2222  019E                     _TXSTAbits	set	414
  2223  019C                     _SPBRGH	set	412
  2224  019B                     _SPBRGL	set	411
  2225  019E                     _TXSTA	set	414
  2226  019D                     _RCSTA	set	413
  2227  019F                     _BAUDCON	set	415
  2228  020C                     _WPUA	set	524
  2229  020D                     _WPUB	set	525
  2230  071A                     _AAD1RES0	set	1818
  2231  0711                     _AD1CON0bits	set	1809
  2232  0714                     _AAD1CON3	set	1812
  2233  0713                     _AD1CON2	set	1811
  2234  0717                     _AD1ACQCON	set	1815
  2235  0716                     _AD1PRECON	set	1814
  2236  0718                     _AAD1GRD	set	1816
  2237  0713                     _AAD1CON2	set	1811
  2238  0719                     _AAD1CAP	set	1817
  2239  0714                     _AD1CON3	set	1812
  2240  0712                     _ADCOMCON	set	1810
  2241  0711                     _AD1CON0	set	1809
  2242  079A                     _AAD2RES0	set	1946
  2243  0791                     _AD2CON0bits	set	1937
  2244  0797                     _AD2ACQCON	set	1943
  2245  0796                     _AD2PRECON	set	1942
  2246  0794                     _AAD2CON3	set	1940
  2247  0798                     _AAD2GRD	set	1944
  2248  0793                     _AD2CON2	set	1939
  2249  0794                     _AD2CON3	set	1940
  2250  0791                     _AD2CON0	set	1937
  2251                           
  2252                           ; #config settings
  2253  0000                     
  2254                           	psect	cinit
  2255  0017                     start_initialization:	
  2256  0017                     __initialization:	
  2257                           
  2258                           ; Initialize objects allocated to BANK0
  2259  0017  3037               	movlw	low __pidataBANK0
  2260  0018  0084               	movwf	4
  2261  0019  308C               	movlw	(high __pidataBANK0)| (0+128)
  2262  001A  0085               	movwf	5
  2263  001B  3061               	movlw	low __pdataBANK0
  2264  001C  0086               	movwf	6
  2265  001D  3000               	movlw	high __pdataBANK0
  2266  001E  0087               	movwf	7
  2267  001F  300D               	movlw	13
  2268  0020  318B  23CA  3180   	fcall	init_ram
  2269                           
  2270                           ; Initialize objects allocated to BANK1
  2271  0023  30FF               	movlw	low __pidataBANK1
  2272  0024  0084               	movwf	4
  2273  0025  308D               	movlw	(high __pidataBANK1)| (0+128)
  2274  0026  0085               	movwf	5
  2275  0027  30A0               	movlw	low __pdataBANK1
  2276  0028  0086               	movwf	6
  2277  0029  3000               	movlw	high __pdataBANK1
  2278  002A  0087               	movwf	7
  2279  002B  3024               	movlw	36
  2280  002C  318B  23CA  3180   	fcall	init_ram
  2281                           
  2282                           ; Clear objects allocated to COMMON
  2283  002F  01FC               	clrf	__pbssCOMMON& (0+127)
  2284                           
  2285                           ; Clear objects allocated to BANK0
  2286  0030  3049               	movlw	low __pbssBANK0
  2287  0031  0084               	movwf	4
  2288  0032  3000               	movlw	high __pbssBANK0
  2289  0033  0085               	movwf	5
  2290  0034  3018               	movlw	24
  2291  0035  318B  23C4  3180   	fcall	clear_ram0
  2292                           
  2293                           ; Clear objects allocated to BANK1
  2294  0038  30C4               	movlw	low __pbssBANK1
  2295  0039  0084               	movwf	4
  2296  003A  3000               	movlw	high __pbssBANK1
  2297  003B  0085               	movwf	5
  2298  003C  3008               	movlw	8
  2299  003D  318B  23C4  3180   	fcall	clear_ram0
  2300                           
  2301                           ; Clear objects allocated to BANK2
  2302  0040  3020               	movlw	low __pbssBANK2
  2303  0041  0084               	movwf	4
  2304  0042  3001               	movlw	high __pbssBANK2
  2305  0043  0085               	movwf	5
  2306  0044  3040               	movlw	64
  2307  0045  318B  23C4         	fcall	clear_ram0
  2308  0047                     end_of_initialization:	
  2309                           ;End of C runtime variable initialization code
  2310                           
  2311  0047                     __end_of__initialization:	
  2312  0047  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2313  0048  0020               	movlb	0
  2314  0049  318D  2D91         	ljmp	_main	;jump to C main() function
  2315                           
  2316                           	psect	bssCOMMON
  2317  007C                     __pbssCOMMON:	
  2318  007C                     _eusartRxHead:	
  2319  007C                     	ds	1
  2320                           
  2321                           	psect	bssBANK0
  2322  0049                     __pbssBANK0:	
  2323  0049                     _eusartRxStatusBuffer:	
  2324  0049                     	ds	8
  2325  0051                     _packet_sample:	
  2326  0051                     	ds	4
  2327  0055                     _packet_noise:	
  2328  0055                     	ds	2
  2329  0057                     _bt_status:	
  2330  0057                     	ds	2
  2331  0059                     _sensor_globalFlags:	
  2332  0059                     	ds	1
  2333  005A                     _lowpowerActivated:	
  2334  005A                     	ds	1
  2335  005B                     _mtouch_time_toScan:	
  2336  005B                     	ds	1
  2337  005C                     _dir_mes:	
  2338  005C                     	ds	1
  2339  005D                     _busy_flag:	
  2340  005D                     	ds	1
  2341  005E                     _eusartRxLastError:	
  2342  005E                     	ds	1
  2343  005F                     _eusartRxCount:	
  2344  005F                     	ds	1
  2345  0060                     _eusartRxTail:	
  2346  0060                     	ds	1
  2347                           
  2348                           	psect	dataBANK0
  2349  0061                     __pdataBANK0:	
  2350  0061                     _Button_StateMachine:	
  2351  0061                     	ds	6
  2352  0067                     _callback_notPressed:	
  2353  0067                     	ds	2
  2354  0069                     _callback_pressed:	
  2355  0069                     	ds	2
  2356  006B                     _callback_sampled:	
  2357  006B                     	ds	2
  2358  006D                     _sample_period:	
  2359  006D                     	ds	1
  2360                           
  2361                           	psect	bssBANK1
  2362  00C4                     __pbssBANK1:	
  2363  00C4                     _eusartRxBuffer:	
  2364  00C4                     	ds	8
  2365                           
  2366                           	psect	dataBANK1
  2367  00A0                     __pdataBANK1:	
  2368  00A0                     _mtouch_sensor:	
  2369  00A0                     	ds	36
  2370                           
  2371                           	psect	bssBANK2
  2372  0120                     __pbssBANK2:	
  2373  0120                     _mtouch_button:	
  2374  0120                     	ds	64
  2375                           
  2376                           	psect	inittext
  2377  0BCA                     init_ram:	
  2378  0BCA  00FE               	movwf	126
  2379  0BCB                     initloop:	
  2380  0BCB  0012               	moviw fsr0++
  2381  0BCC  001E               	movwi fsr1++
  2382  0BCD  0BFE               	decfsz	126,f
  2383  0BCE  2BCB               	goto	initloop
  2384  0BCF  3400               	retlw	0
  2385                           
  2386                           	psect	clrtext
  2387  0BC4                     clear_ram0:	
  2388                           ;	Called with FSR0 containing the base address, and
  2389                           ;	WREG with the size to clear
  2390                           
  2391  0BC4  0064               	clrwdt	;clear the watchdog before getting into this loop
  2392  0BC5                     clrloop0:	
  2393  0BC5  0180               	clrf	0	;clear RAM location pointed to by FSR
  2394  0BC6  3101               	addfsr 0,1
  2395  0BC7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2396  0BC8  2BC5               	goto	clrloop0	;have we reached the end yet?
  2397  0BC9  3400               	retlw	0	;all done for this memory range, return
  2398                           
  2399                           	psect	cstackCOMMON
  2400  0070                     __pcstackCOMMON:	
  2401  0070                     ?_EUSART_Receive_ISR:	
  2402  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?_EUSART_DefaultErrorHandler:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ?_EUSART_RxDataHandler:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ??_EUSART_RxDataHandler:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ?_PIN_MANAGER_Initialize:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ?_OSCILLATOR_Initialize:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ?_WDT_Initialize:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ?_TMR2_Initialize:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ?_MTOUCH_Initialize:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ?_MTOUCH_Service_Mainloop:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0070                     ?_MTOUCH_Button_InitializeAll:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0070                     ?_MTOUCH_Button_ServiceAll:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0070                     ?_MTOUCH_needReburst:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0070                     ?_MTOUCH_Tick:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0070                     ?_MTOUCH_Button_Tick:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0070                     ?_MTOUCH_Sensor_Enable:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0070                     ?_Sensor_Sampled_Reset:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0070                     ?_Sensor_Service:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0070                     ?_Sensor_isEnabled:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0070                     ?_Sensor_RawSample_Update:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0070                     ?_Sensor_setSampled:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ?_Sensor_postAcquisitionProcess:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ?_Sensor_isActive:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ?_Sensor_isCalibrated:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     ?_Sensor_setActive:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0070                     ?_Sensor_setInactive:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     ?_Sensor_isCalibratingAcqTime:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     ?_Sensor_autoCalibration:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0070                     ?_Sensor_setCalibratAcqTime:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513  0070                     ?_Sensor_setCalibrated:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0070                     ?_Button_Service:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519  0070                     ?_Button_Reading_Update:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0070                     ?_Button_Deviation_Update:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0070                     ?_Button_Baseline_Initialize:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0070                     ?_Button_Baseline_Update:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0070                     ?_Button_Tick_helper:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0070                     ?_Button_Reading_Update_Helper:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     ?_EUSART_Initialize:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0070                     ?_INTERRUPT_InterruptManager:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0070                     ?_SYSTEM_Initialize:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0070                     ?_main:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0070                     ?_TMR2_StartTimer:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     ?_TMR2_StopTimer:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     ?_TMR2_LoadPeriodRegister:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     ?_MTOUCH_Sensor_Initialize:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0070                     ?_Sensor_getScanGroupIndex:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0070                     ?_MTOUCH_Button_Initialize:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573                           
  2574                           ; 1 bytes @ 0x0
  2575  0070                     	ds	1
  2576  0071                     ?_EUSART_SetRxInterruptHandler:	
  2577  0071                     ??_EUSART_Receive_ISR:	
  2578                           ; 1 bytes @ 0x1
  2579                           
  2580  0071                     ?_EUSART_SetFramingErrorHandler:	
  2581                           ; 1 bytes @ 0x1
  2582                           
  2583  0071                     ?_EUSART_SetOverrunErrorHandler:	
  2584                           ; 1 bytes @ 0x1
  2585                           
  2586  0071                     ?_EUSART_SetErrorHandler:	
  2587                           ; 1 bytes @ 0x1
  2588                           
  2589  0071                     ??_EUSART_DefaultErrorHandler:	
  2590                           ; 1 bytes @ 0x1
  2591                           
  2592  0071                     ??_PIN_MANAGER_Initialize:	
  2593                           ; 1 bytes @ 0x1
  2594                           
  2595  0071                     ??_OSCILLATOR_Initialize:	
  2596                           ; 1 bytes @ 0x1
  2597                           
  2598  0071                     ??_WDT_Initialize:	
  2599                           ; 1 bytes @ 0x1
  2600                           
  2601  0071                     ??_TMR2_Initialize:	
  2602                           ; 1 bytes @ 0x1
  2603                           
  2604  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  2605                           ; 1 bytes @ 0x1
  2606                           
  2607  0071                     ?_myButtonPressedCallback:	
  2608                           ; 1 bytes @ 0x1
  2609                           
  2610  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  2611                           ; 1 bytes @ 0x1
  2612                           
  2613  0071                     ?_myButtonReleasedCallback:	
  2614                           ; 1 bytes @ 0x1
  2615                           
  2616  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2617                           ; 1 bytes @ 0x1
  2618                           
  2619  0071                     ??_MTOUCH_needReburst:	
  2620                           ; 1 bytes @ 0x1
  2621                           
  2622  0071                     ?_Sensor_DefaultCallback:	
  2623                           ; 1 bytes @ 0x1
  2624                           
  2625  0071                     ??_Sensor_Sampled_Reset:	
  2626                           ; 1 bytes @ 0x1
  2627                           
  2628  0071                     ??_Sensor_isEnabled:	
  2629                           ; 1 bytes @ 0x1
  2630                           
  2631  0071                     ??_Sensor_setSampled:	
  2632                           ; 1 bytes @ 0x1
  2633                           
  2634  0071                     ??_Sensor_isActive:	
  2635                           ; 1 bytes @ 0x1
  2636                           
  2637  0071                     ??_Sensor_isCalibrated:	
  2638                           ; 1 bytes @ 0x1
  2639                           
  2640  0071                     ??_Sensor_setActive:	
  2641                           ; 1 bytes @ 0x1
  2642                           
  2643  0071                     ??_Sensor_setInactive:	
  2644                           ; 1 bytes @ 0x1
  2645                           
  2646  0071                     ??_Sensor_isCalibratingAcqTime:	
  2647                           ; 1 bytes @ 0x1
  2648                           
  2649  0071                     ??_Sensor_setCalibratAcqTime:	
  2650                           ; 1 bytes @ 0x1
  2651                           
  2652  0071                     ??_Sensor_setCalibrated:	
  2653                           ; 1 bytes @ 0x1
  2654                           
  2655  0071                     ?_Button_DefaultCallback:	
  2656                           ; 1 bytes @ 0x1
  2657                           
  2658  0071                     ?_memcpy:	
  2659                           ; 1 bytes @ 0x1
  2660                           
  2661  0071                     ??_Button_Deviation_Update:	
  2662                           ; 1 bytes @ 0x1
  2663                           
  2664  0071                     ??_Button_Baseline_Update:	
  2665                           ; 1 bytes @ 0x1
  2666                           
  2667  0071                     ??_Button_Tick_helper:	
  2668                           ; 1 bytes @ 0x1
  2669                           
  2670  0071                     ??_INTERRUPT_InterruptManager:	
  2671                           ; 1 bytes @ 0x1
  2672                           
  2673  0071                     ??_TMR2_StartTimer:	
  2674                           ; 1 bytes @ 0x1
  2675                           
  2676  0071                     ??_TMR2_StopTimer:	
  2677                           ; 1 bytes @ 0x1
  2678                           
  2679  0071                     ??_TMR2_LoadPeriodRegister:	
  2680                           ; 1 bytes @ 0x1
  2681                           
  2682  0071                     ??_Sensor_getScanGroupIndex:	
  2683                           ; 1 bytes @ 0x1
  2684                           
  2685  0071                     ?___bmul:	
  2686                           ; 1 bytes @ 0x1
  2687                           
  2688  0071                     ?_abs:	
  2689                           ; 1 bytes @ 0x1
  2690                           
  2691  0071                     myButtonPressedCallback@button:	
  2692                           ; 2 bytes @ 0x1
  2693                           
  2694  0071                     myButtonReleasedCallback@button:	
  2695                           ; 1 bytes @ 0x1
  2696                           
  2697  0071                     TMR2_LoadPeriodRegister@periodVal:	
  2698                           ; 1 bytes @ 0x1
  2699                           
  2700  0071                     Sensor_DefaultCallback@sensor:	
  2701                           ; 1 bytes @ 0x1
  2702                           
  2703  0071                     Sensor_setActive@sensor:	
  2704                           ; 1 bytes @ 0x1
  2705                           
  2706  0071                     Sensor_setInactive@sensor:	
  2707                           ; 1 bytes @ 0x1
  2708                           
  2709  0071                     Sensor_isActive@sensor:	
  2710                           ; 1 bytes @ 0x1
  2711                           
  2712  0071                     Sensor_isCalibrated@sensor:	
  2713                           ; 1 bytes @ 0x1
  2714                           
  2715  0071                     Sensor_setCalibrated@sensor:	
  2716                           ; 1 bytes @ 0x1
  2717                           
  2718  0071                     Sensor_setCalibratAcqTime@sensor:	
  2719                           ; 1 bytes @ 0x1
  2720                           
  2721  0071                     Sensor_isCalibratingAcqTime@sensor:	
  2722                           ; 1 bytes @ 0x1
  2723                           
  2724  0071                     Sensor_Sampled_Reset@sensor:	
  2725                           ; 1 bytes @ 0x1
  2726                           
  2727  0071                     Sensor_setSampled@sensor:	
  2728                           ; 1 bytes @ 0x1
  2729                           
  2730  0071                     Button_DefaultCallback@button:	
  2731                           ; 1 bytes @ 0x1
  2732                           
  2733  0071                     ___bmul@multiplicand:	
  2734                           ; 1 bytes @ 0x1
  2735                           
  2736  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2737                           ; 1 bytes @ 0x1
  2738                           
  2739  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2740                           ; 2 bytes @ 0x1
  2741                           
  2742  0071                     EUSART_SetErrorHandler@interruptHandler:	
  2743                           ; 2 bytes @ 0x1
  2744                           
  2745  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2746                           ; 2 bytes @ 0x1
  2747                           
  2748  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  2749                           ; 2 bytes @ 0x1
  2750                           
  2751  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  2752                           ; 2 bytes @ 0x1
  2753                           
  2754  0071                     abs@a:	
  2755                           ; 2 bytes @ 0x1
  2756                           
  2757  0071                     memcpy@s1:	
  2758                           ; 2 bytes @ 0x1
  2759                           
  2760                           
  2761                           ; 2 bytes @ 0x1
  2762  0071                     	ds	1
  2763  0072                     ??_myButtonPressedCallback:	
  2764  0072                     ??_myButtonReleasedCallback:	
  2765                           ; 1 bytes @ 0x2
  2766                           
  2767  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  2768                           ; 1 bytes @ 0x2
  2769                           
  2770  0072                     ??_Sensor_DefaultCallback:	
  2771                           ; 1 bytes @ 0x2
  2772                           
  2773  0072                     ??_Button_DefaultCallback:	
  2774                           ; 1 bytes @ 0x2
  2775                           
  2776  0072                     ?_Sensor_loadADCSettings:	
  2777                           ; 1 bytes @ 0x2
  2778                           
  2779  0072                     ??___bmul:	
  2780                           ; 1 bytes @ 0x2
  2781                           
  2782  0072                     Sensor_loadADCSettings@adc_index:	
  2783                           ; 1 bytes @ 0x2
  2784                           
  2785  0072                     Sensor_isEnabled@sensor:	
  2786                           ; 1 bytes @ 0x2
  2787                           
  2788                           
  2789                           ; 1 bytes @ 0x2
  2790  0072                     	ds	1
  2791  0073                     ??_EUSART_SetRxInterruptHandler:	
  2792  0073                     ??_EUSART_SetFramingErrorHandler:	
  2793                           ; 1 bytes @ 0x3
  2794                           
  2795  0073                     ??_EUSART_SetOverrunErrorHandler:	
  2796                           ; 1 bytes @ 0x3
  2797                           
  2798  0073                     ??_EUSART_SetErrorHandler:	
  2799                           ; 1 bytes @ 0x3
  2800                           
  2801  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  2802                           ; 1 bytes @ 0x3
  2803                           
  2804  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  2805                           ; 1 bytes @ 0x3
  2806                           
  2807  0073                     ??_abs:	
  2808                           ; 1 bytes @ 0x3
  2809                           
  2810  0073                     ??_EUSART_Initialize:	
  2811                           ; 1 bytes @ 0x3
  2812                           
  2813  0073                     ??_Sensor_loadADCSettings:	
  2814                           ; 1 bytes @ 0x3
  2815                           
  2816  0073                     Sensor_getScanGroupIndex@sensor:	
  2817                           ; 1 bytes @ 0x3
  2818                           
  2819  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  2820                           ; 1 bytes @ 0x3
  2821                           
  2822  0073                     Button_Tick_helper@button:	
  2823                           ; 1 bytes @ 0x3
  2824                           
  2825  0073                     ___bmul@product:	
  2826                           ; 1 bytes @ 0x3
  2827                           
  2828  0073                     memcpy@n:	
  2829                           ; 1 bytes @ 0x3
  2830                           
  2831                           
  2832                           ; 2 bytes @ 0x3
  2833  0073                     	ds	1
  2834  0074                     ??_MTOUCH_Button_Tick:	
  2835  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  2836                           ; 1 bytes @ 0x4
  2837                           
  2838  0074                     ___bmul@multiplier:	
  2839                           ; 1 bytes @ 0x4
  2840                           
  2841                           
  2842                           ; 1 bytes @ 0x4
  2843  0074                     	ds	1
  2844  0075                     ??_MTOUCH_Sensor_Enable:	
  2845  0075                     ??_MTOUCH_Sensor_Calibrate:	
  2846                           ; 1 bytes @ 0x5
  2847                           
  2848  0075                     ??_Sensor_RawSample_Update:	
  2849                           ; 1 bytes @ 0x5
  2850                           
  2851  0075                     ??_Sensor_postAcquisitionProcess:	
  2852                           ; 1 bytes @ 0x5
  2853                           
  2854  0075                     ??_Sensor_autoCalibration:	
  2855                           ; 1 bytes @ 0x5
  2856                           
  2857  0075                     ??_memcpy:	
  2858                           ; 1 bytes @ 0x5
  2859                           
  2860  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  2861                           ; 1 bytes @ 0x5
  2862                           
  2863  0075                     ??_MTOUCH_Sensor_wasSampled:	
  2864                           ; 1 bytes @ 0x5
  2865                           
  2866  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  2867                           ; 1 bytes @ 0x5
  2868                           
  2869  0075                     MTOUCH_Button_Tick@i:	
  2870                           ; 2 bytes @ 0x5
  2871                           
  2872                           
  2873                           ; 1 bytes @ 0x5
  2874  0075                     	ds	1
  2875  0076                     ??_MTOUCH_Tick:	
  2876  0076                     Sensor_RawSample_Update@adcIndex:	
  2877                           ; 1 bytes @ 0x6
  2878                           
  2879  0076                     MTOUCH_Sensor_Enable@sensor:	
  2880                           ; 1 bytes @ 0x6
  2881                           
  2882  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  2883                           ; 1 bytes @ 0x6
  2884                           
  2885  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  2886                           ; 1 bytes @ 0x6
  2887                           
  2888  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  2889                           ; 1 bytes @ 0x6
  2890                           
  2891  0076                     memcpy@tmp:	
  2892                           ; 1 bytes @ 0x6
  2893                           
  2894  0076                     Sensor_postAcquisitionProcess@deviation:	
  2895                           ; 1 bytes @ 0x6
  2896                           
  2897  0076                     _Sensor_loadADCSettings$1137:	
  2898                           ; 2 bytes @ 0x6
  2899                           
  2900                           
  2901                           ; 2 bytes @ 0x6
  2902  0076                     	ds	1
  2903  0077                     ??_MTOUCH_Sensor_Initialize:	
  2904  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  2905                           ; 1 bytes @ 0x7
  2906                           
  2907  0077                     ??_MTOUCH_Button_Initialize:	
  2908                           ; 1 bytes @ 0x7
  2909                           
  2910  0077                     Sensor_RawSample_Update@sensor:	
  2911                           ; 1 bytes @ 0x7
  2912                           
  2913  0077                     Button_Baseline_Update@button:	
  2914                           ; 1 bytes @ 0x7
  2915                           
  2916  0077                     memcpy@s:	
  2917                           ; 1 bytes @ 0x7
  2918                           
  2919                           
  2920                           ; 2 bytes @ 0x7
  2921  0077                     	ds	1
  2922  0078                     MTOUCH_Sensor_Initialize@sensor:	
  2923  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  2924                           ; 1 bytes @ 0x8
  2925                           
  2926  0078                     Sensor_loadADCSettings@addressOffset:	
  2927                           ; 1 bytes @ 0x8
  2928                           
  2929  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  2930                           ; 1 bytes @ 0x8
  2931                           
  2932                           
  2933                           ; 1 bytes @ 0x8
  2934  0078                     	ds	1
  2935  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  2936  0079                     ??_Button_Reading_Update_Helper:	
  2937                           ; 1 bytes @ 0x9
  2938                           
  2939  0079                     Sensor_postAcquisitionProcess@sensor:	
  2940                           ; 1 bytes @ 0x9
  2941                           
  2942  0079                     Sensor_loadADCSettings@sensor:	
  2943                           ; 1 bytes @ 0x9
  2944                           
  2945  0079                     Sensor_autoCalibration@adcIndex:	
  2946                           ; 1 bytes @ 0x9
  2947                           
  2948  0079                     MTOUCH_Button_Initialize@name:	
  2949                           ; 1 bytes @ 0x9
  2950                           
  2951  0079                     Button_Baseline_Initialize@button:	
  2952                           ; 1 bytes @ 0x9
  2953                           
  2954  0079                     memcpy@d1:	
  2955                           ; 1 bytes @ 0x9
  2956                           
  2957                           
  2958                           ; 1 bytes @ 0x9
  2959  0079                     	ds	1
  2960  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  2961  007A                     Sensor_autoCalibration@sensor:	
  2962                           ; 1 bytes @ 0xA
  2963                           
  2964  007A                     MTOUCH_Button_Initialize@button:	
  2965                           ; 1 bytes @ 0xA
  2966                           
  2967  007A                     memcpy@d:	
  2968                           ; 1 bytes @ 0xA
  2969                           
  2970                           
  2971                           ; 1 bytes @ 0xA
  2972  007A                     	ds	1
  2973  007B                     ??_MTOUCH_Button_InitializeAll:	
  2974  007B                     ?_Sensor_Acq_ExecutePacket:	
  2975                           ; 1 bytes @ 0xB
  2976                           
  2977  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  2978                           ; 1 bytes @ 0xB
  2979                           
  2980  007B                     Button_Reading_Update_Helper@button:	
  2981                           ; 1 bytes @ 0xB
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0xB
  2985  007B                     	ds	1
  2986  007C                     ??_MTOUCH_Initialize:	
  2987  007C                     ??_Button_Reading_Update:	
  2988                           ; 1 bytes @ 0xC
  2989                           
  2990  007C                     ??_SYSTEM_Initialize:	
  2991                           ; 1 bytes @ 0xC
  2992                           
  2993  007C                     ??_main:	
  2994                           ; 1 bytes @ 0xC
  2995                           
  2996                           
  2997                           	psect	cstackBANK0
  2998  0020                     __pcstackBANK0:	
  2999                           ; 1 bytes @ 0xC
  3000                           
  3001  0020                     ??_Sensor_Acq_ExecutePacket:	
  3002  0020                     ??_Button_Baseline_Initialize:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0020                     MTOUCH_Button_InitializeAll@button:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008  0020                     Button_Deviation_Update@button:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0020                     Button_Reading_Update@button:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014                           
  3015                           ; 1 bytes @ 0x0
  3016  0020                     	ds	1
  3017  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3018  0021                     Button_Deviation_Update@deviation:	
  3019                           ; 1 bytes @ 0x1
  3020                           
  3021                           
  3022                           ; 4 bytes @ 0x1
  3023  0021                     	ds	1
  3024  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3025                           
  3026                           ; 1 bytes @ 0x2
  3027  0022                     	ds	1
  3028  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3029                           
  3030                           ; 1 bytes @ 0x3
  3031  0023                     	ds	1
  3032  0024                     ?_Button_State_Initializing:	
  3033  0024                     ?_Button_State_NotPressed:	
  3034                           ; 1 bytes @ 0x4
  3035                           
  3036  0024                     ?_Button_State_Pressed:	
  3037                           ; 1 bytes @ 0x4
  3038                           
  3039  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3040                           ; 1 bytes @ 0x4
  3041                           
  3042  0024                     Button_State_Initializing@button:	
  3043                           ; 1 bytes @ 0x4
  3044                           
  3045  0024                     Button_State_NotPressed@button:	
  3046                           ; 1 bytes @ 0x4
  3047                           
  3048  0024                     Button_State_Pressed@button:	
  3049                           ; 1 bytes @ 0x4
  3050                           
  3051                           
  3052                           ; 1 bytes @ 0x4
  3053  0024                     	ds	1
  3054  0025                     ??_Button_State_Initializing:	
  3055  0025                     ??_Button_State_NotPressed:	
  3056                           ; 1 bytes @ 0x5
  3057                           
  3058  0025                     ??_Button_State_Pressed:	
  3059                           ; 1 bytes @ 0x5
  3060                           
  3061  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3062                           ; 1 bytes @ 0x5
  3063                           
  3064                           
  3065                           ; 1 bytes @ 0x5
  3066  0025                     	ds	1
  3067  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3068                           
  3069                           ; 1 bytes @ 0x6
  3070  0026                     	ds	1
  3071  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3072                           
  3073                           ; 1 bytes @ 0x7
  3074  0027                     	ds	1
  3075  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3076                           
  3077                           ; 2 bytes @ 0x8
  3078  0028                     	ds	1
  3079  0029                     ??_Button_Service:	
  3080                           
  3081                           ; 1 bytes @ 0x9
  3082  0029                     	ds	1
  3083  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3084                           
  3085                           ; 2 bytes @ 0xA
  3086  002A                     	ds	1
  3087  002B                     Button_Service@name:	
  3088                           
  3089                           ; 1 bytes @ 0xB
  3090  002B                     	ds	1
  3091  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3092  002C                     Button_Service@button:	
  3093                           ; 1 bytes @ 0xC
  3094                           
  3095                           
  3096                           ; 1 bytes @ 0xC
  3097  002C                     	ds	1
  3098  002D                     ??_MTOUCH_Button_ServiceAll:	
  3099  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3100                           ; 1 bytes @ 0xD
  3101                           
  3102                           
  3103                           ; 1 bytes @ 0xD
  3104  002D                     	ds	1
  3105  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3106  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3107                           ; 1 bytes @ 0xE
  3108                           
  3109  002E                     MTOUCH_Button_ServiceAll@button:	
  3110                           ; 1 bytes @ 0xE
  3111                           
  3112                           
  3113                           ; 1 bytes @ 0xE
  3114  002E                     	ds	1
  3115  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3116                           
  3117                           ; 1 bytes @ 0xF
  3118  002F                     	ds	2
  3119  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3120                           
  3121                           ; 1 bytes @ 0x11
  3122  0031                     	ds	1
  3123  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3124                           
  3125                           ; 2 bytes @ 0x12
  3126  0032                     	ds	2
  3127  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3128                           
  3129                           ; 1 bytes @ 0x14
  3130  0034                     	ds	1
  3131  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3132                           
  3133                           ; 1 bytes @ 0x15
  3134  0035                     	ds	1
  3135  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3136                           
  3137                           ; 4 bytes @ 0x16
  3138  0036                     	ds	4
  3139  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3140                           
  3141                           ; 1 bytes @ 0x1A
  3142  003A                     	ds	1
  3143  003B                     ?_Sensor_Acquisition:	
  3144  003B                     Sensor_Acquisition@sensor_adc2:	
  3145                           ; 1 bytes @ 0x1B
  3146                           
  3147                           
  3148                           ; 1 bytes @ 0x1B
  3149  003B                     	ds	1
  3150  003C                     ??_Sensor_Acquisition:	
  3151                           
  3152                           ; 1 bytes @ 0x1C
  3153  003C                     	ds	1
  3154  003D                     Sensor_Acquisition@retry:	
  3155                           
  3156                           ; 1 bytes @ 0x1D
  3157  003D                     	ds	1
  3158  003E                     Sensor_Acquisition@sensor_adc1:	
  3159                           
  3160                           ; 1 bytes @ 0x1E
  3161  003E                     	ds	1
  3162  003F                     ??_Sensor_Service:	
  3163                           
  3164                           ; 1 bytes @ 0x1F
  3165  003F                     	ds	3
  3166  0042                     Sensor_Service@scanGroup:	
  3167                           
  3168                           ; 1 bytes @ 0x22
  3169  0042                     	ds	1
  3170  0043                     Sensor_Service@error:	
  3171                           
  3172                           ; 1 bytes @ 0x23
  3173  0043                     	ds	1
  3174  0044                     Sensor_Service@sensor_adc1:	
  3175                           
  3176                           ; 1 bytes @ 0x24
  3177  0044                     	ds	1
  3178  0045                     Sensor_Service@sensor_adc2:	
  3179                           
  3180                           ; 1 bytes @ 0x25
  3181  0045                     	ds	1
  3182  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3183                           
  3184                           ; 1 bytes @ 0x26
  3185  0046                     	ds	1
  3186  0047                     MTOUCH_Sensor_SampleAll@group:	
  3187                           
  3188                           ; 1 bytes @ 0x27
  3189  0047                     	ds	1
  3190  0048                     ??_MTOUCH_Service_Mainloop:	
  3191                           
  3192                           ; 1 bytes @ 0x28
  3193  0048                     	ds	1
  3194                           
  3195                           	psect	maintext
  3196  0D91                     __pmaintext:	
  3197 ;;
  3198 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3199 ;;
  3200 ;; *************** function _main *****************
  3201 ;; Defined at:
  3202 ;;		line 12 in file "main.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;		None
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;		None
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : B1F/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3216 ;;      Params:         0       0       0       0       0       0       0       0
  3217 ;;      Locals:         0       0       0       0       0       0       0       0
  3218 ;;      Temps:          0       0       0       0       0       0       0       0
  3219 ;;      Totals:         0       0       0       0       0       0       0       0
  3220 ;;Total ram usage:        0 bytes
  3221 ;; Hardware stack levels required when called:   12
  3222 ;; This function calls:
  3223 ;;		_MTOUCH_Button_SetNotPressedCallback
  3224 ;;		_MTOUCH_Button_SetPressedCallback
  3225 ;;		_MTOUCH_Service_Mainloop
  3226 ;;		_SYSTEM_Initialize
  3227 ;; This function is called by:
  3228 ;;		Startup code after reset
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function _main
  3234  0D91                     _main:	
  3235                           
  3236                           ;main.c: 14:     SYSTEM_Initialize();
  3237                           
  3238                           ;incstack = 0
  3239                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3240  0D91  318C  24D1  318D   	fcall	_SYSTEM_Initialize
  3241                           
  3242                           ;main.c: 15:     (INTCONbits.GIE = 1);
  3243  0D94  178B               	bsf	11,7	;volatile
  3244                           
  3245                           ;main.c: 16:     (INTCONbits.PEIE = 1);
  3246  0D95  170B               	bsf	11,6	;volatile
  3247                           
  3248                           ;main.c: 17:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3249  0D96  30C5               	movlw	low _myButtonPressedCallback
  3250  0D97  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3251  0D98  300F               	movlw	high _myButtonPressedCallback
  3252  0D99  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3253  0D9A  318B  23A0  318D   	fcall	_MTOUCH_Button_SetPressedCallback
  3254                           
  3255                           ;main.c: 18:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3256  0D9D  307E               	movlw	low _myButtonReleasedCallback
  3257  0D9E  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3258  0D9F  300B               	movlw	high _myButtonReleasedCallback
  3259  0DA0  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3260  0DA1  318B  239A  318D   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3261  0DA4  0022               	movlb	2	; select bank2
  3262  0DA5  110C               	bcf	12,2	;volatile
  3263  0DA6                     l239:	
  3264                           ;main.c: 21:     while (1)
  3265                           
  3266                           
  3267                           ;main.c: 22:     {;main.c: 23:         if(MTOUCH_Service_Mainloop())
  3268  0DA6  318D  25AA  318D   	fcall	_MTOUCH_Service_Mainloop
  3269  0DA9  2DA6               	goto	l239
  3270  0DAA                     __end_of_main:	
  3271                           
  3272                           	psect	text1
  3273  0CD1                     __ptext1:	
  3274 ;; *************** function _SYSTEM_Initialize *****************
  3275 ;; Defined at:
  3276 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;		None
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;		None
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      void 
  3283 ;; Registers used:
  3284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3290 ;;      Params:         0       0       0       0       0       0       0       0
  3291 ;;      Locals:         0       0       0       0       0       0       0       0
  3292 ;;      Temps:          0       0       0       0       0       0       0       0
  3293 ;;      Totals:         0       0       0       0       0       0       0       0
  3294 ;;Total ram usage:        0 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    9
  3297 ;; This function calls:
  3298 ;;		_EUSART_Initialize
  3299 ;;		_MTOUCH_Initialize
  3300 ;;		_OSCILLATOR_Initialize
  3301 ;;		_PIN_MANAGER_Initialize
  3302 ;;		_TMR2_Initialize
  3303 ;;		_WDT_Initialize
  3304 ;; This function is called by:
  3305 ;;		_main
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           
  3310                           ;psect for function _SYSTEM_Initialize
  3311  0CD1                     _SYSTEM_Initialize:	
  3312                           
  3313                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3314                           
  3315                           ;incstack = 0
  3316                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3317  0CD1  318D  25E2  318C   	fcall	_PIN_MANAGER_Initialize
  3318                           
  3319                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3320  0CD4  318B  23BE  318C   	fcall	_OSCILLATOR_Initialize
  3321                           
  3322                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3323  0CD7  318B  2391  318C   	fcall	_WDT_Initialize
  3324                           
  3325                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  3326  0CDA  318B  23F4  318C   	fcall	_TMR2_Initialize
  3327                           
  3328                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  3329  0CDD  318E  26F6  318C   	fcall	_EUSART_Initialize
  3330                           
  3331                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  3332  0CE0  318C  2411         	fcall	_MTOUCH_Initialize
  3333  0CE2  0008               	return
  3334  0CE3                     __end_of_SYSTEM_Initialize:	
  3335                           
  3336                           	psect	text2
  3337  0B91                     __ptext2:	
  3338 ;; *************** function _WDT_Initialize *****************
  3339 ;; Defined at:
  3340 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;		None
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;		None
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      void 
  3347 ;; Registers used:
  3348 ;;		wreg
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3354 ;;      Params:         0       0       0       0       0       0       0       0
  3355 ;;      Locals:         0       0       0       0       0       0       0       0
  3356 ;;      Temps:          0       0       0       0       0       0       0       0
  3357 ;;      Totals:         0       0       0       0       0       0       0       0
  3358 ;;Total ram usage:        0 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    4
  3361 ;; This function calls:
  3362 ;;		Nothing
  3363 ;; This function is called by:
  3364 ;;		_SYSTEM_Initialize
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           
  3369                           ;psect for function _WDT_Initialize
  3370  0B91                     _WDT_Initialize:	
  3371                           
  3372                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  3373                           
  3374                           ;incstack = 0
  3375                           ; Regs used in _WDT_Initialize: [wreg]
  3376  0B91  3016               	movlw	22
  3377  0B92  0021               	movlb	1	; select bank1
  3378  0B93  0097               	movwf	23	;volatile
  3379  0B94  0008               	return
  3380  0B95                     __end_of_WDT_Initialize:	
  3381                           
  3382                           	psect	text3
  3383  0BF4                     __ptext3:	
  3384 ;; *************** function _TMR2_Initialize *****************
  3385 ;; Defined at:
  3386 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;		None
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, status,2
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3400 ;;      Params:         0       0       0       0       0       0       0       0
  3401 ;;      Locals:         0       0       0       0       0       0       0       0
  3402 ;;      Temps:          0       0       0       0       0       0       0       0
  3403 ;;      Totals:         0       0       0       0       0       0       0       0
  3404 ;;Total ram usage:        0 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    4
  3407 ;; This function calls:
  3408 ;;		Nothing
  3409 ;; This function is called by:
  3410 ;;		_SYSTEM_Initialize
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           
  3415                           ;psect for function _TMR2_Initialize
  3416  0BF4                     _TMR2_Initialize:	
  3417                           
  3418                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  3419                           
  3420                           ;incstack = 0
  3421                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  3422  0BF4  30FF               	movlw	255
  3423  0BF5  0020               	movlb	0	; select bank0
  3424  0BF6  009B               	movwf	27	;volatile
  3425                           
  3426                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  3427  0BF7  019A               	clrf	26	;volatile
  3428                           
  3429                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  3430  0BF8  1091               	bcf	17,1	;volatile
  3431                           
  3432                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  3433  0BF9  3004               	movlw	4
  3434  0BFA  009C               	movwf	28	;volatile
  3435  0BFB  0008               	return
  3436  0BFC                     __end_of_TMR2_Initialize:	
  3437                           
  3438                           	psect	text4
  3439  0DE2                     __ptext4:	
  3440 ;; *************** function _PIN_MANAGER_Initialize *****************
  3441 ;; Defined at:
  3442 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;		None
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      void 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3456 ;;      Params:         0       0       0       0       0       0       0       0
  3457 ;;      Locals:         0       0       0       0       0       0       0       0
  3458 ;;      Temps:          0       0       0       0       0       0       0       0
  3459 ;;      Totals:         0       0       0       0       0       0       0       0
  3460 ;;Total ram usage:        0 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    4
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_SYSTEM_Initialize
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function _PIN_MANAGER_Initialize
  3472  0DE2                     _PIN_MANAGER_Initialize:	
  3473                           
  3474                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  3475                           
  3476                           ;incstack = 0
  3477                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3478  0DE2  3037               	movlw	55
  3479  0DE3  0022               	movlb	2	; select bank2
  3480  0DE4  008C               	movwf	12	;volatile
  3481                           
  3482                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0xC0;
  3483  0DE5  30C0               	movlw	192
  3484  0DE6  008D               	movwf	13	;volatile
  3485                           
  3486                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xBF;
  3487  0DE7  30BF               	movlw	191
  3488  0DE8  008E               	movwf	14	;volatile
  3489                           
  3490                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x38;
  3491  0DE9  3038               	movlw	56
  3492  0DEA  0021               	movlb	1	; select bank1
  3493  0DEB  008C               	movwf	12	;volatile
  3494                           
  3495                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  3496  0DEC  3060               	movlw	96
  3497  0DED  008D               	movwf	13	;volatile
  3498                           
  3499                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x60;
  3500  0DEE  3060               	movlw	96
  3501  0DEF  008E               	movwf	14	;volatile
  3502                           
  3503                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE8;
  3504  0DF0  30E8               	movlw	232
  3505  0DF1  0023               	movlb	3	; select bank3
  3506  0DF2  008E               	movwf	14	;volatile
  3507                           
  3508                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  3509  0DF3  3040               	movlw	64
  3510  0DF4  008D               	movwf	13	;volatile
  3511                           
  3512                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  3513  0DF5  3037               	movlw	55
  3514  0DF6  008C               	movwf	12	;volatile
  3515                           
  3516                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  3517  0DF7  0024               	movlb	4	; select bank4
  3518  0DF8  018D               	clrf	13	;volatile
  3519                           
  3520                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  3521  0DF9  018C               	clrf	12	;volatile
  3522                           
  3523                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  3524  0DFA  0021               	movlb	1	; select bank1
  3525  0DFB  1795               	bsf	21,7	;volatile
  3526                           
  3527                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  3528  0DFC  0022               	movlb	2	; select bank2
  3529  0DFD  019D               	clrf	29	;volatile
  3530  0DFE  0008               	return
  3531  0DFF                     __end_of_PIN_MANAGER_Initialize:	
  3532                           
  3533                           	psect	text5
  3534  0BBE                     __ptext5:	
  3535 ;; *************** function _OSCILLATOR_Initialize *****************
  3536 ;; Defined at:
  3537 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;		None
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;		None
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      void 
  3544 ;; Registers used:
  3545 ;;		wreg, status,2
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3551 ;;      Params:         0       0       0       0       0       0       0       0
  3552 ;;      Locals:         0       0       0       0       0       0       0       0
  3553 ;;      Temps:          0       0       0       0       0       0       0       0
  3554 ;;      Totals:         0       0       0       0       0       0       0       0
  3555 ;;Total ram usage:        0 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    4
  3558 ;; This function calls:
  3559 ;;		Nothing
  3560 ;; This function is called by:
  3561 ;;		_SYSTEM_Initialize
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           
  3566                           ;psect for function _OSCILLATOR_Initialize
  3567  0BBE                     _OSCILLATOR_Initialize:	
  3568                           
  3569                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3573  0BBE  30F0               	movlw	240
  3574  0BBF  0021               	movlb	1	; select bank1
  3575  0BC0  0099               	movwf	25	;volatile
  3576                           
  3577                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  3578  0BC1  0022               	movlb	2	; select bank2
  3579  0BC2  0196               	clrf	22	;volatile
  3580  0BC3  0008               	return
  3581  0BC4                     __end_of_OSCILLATOR_Initialize:	
  3582                           
  3583                           	psect	text6
  3584  0C11                     __ptext6:	
  3585 ;; *************** function _MTOUCH_Initialize *****************
  3586 ;; Defined at:
  3587 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;		None
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      void 
  3594 ;; Registers used:
  3595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3601 ;;      Params:         0       0       0       0       0       0       0       0
  3602 ;;      Locals:         0       0       0       0       0       0       0       0
  3603 ;;      Temps:          0       0       0       0       0       0       0       0
  3604 ;;      Totals:         0       0       0       0       0       0       0       0
  3605 ;;Total ram usage:        0 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    8
  3608 ;; This function calls:
  3609 ;;		_MTOUCH_Button_InitializeAll
  3610 ;;		_MTOUCH_Sensor_InitializeAll
  3611 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  3612 ;;		_MTOUCH_Sensor_Scan_Initialize
  3613 ;; This function is called by:
  3614 ;;		_SYSTEM_Initialize
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           
  3619                           ;psect for function _MTOUCH_Initialize
  3620  0C11                     _MTOUCH_Initialize:	
  3621                           
  3622                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  3623                           
  3624                           ;incstack = 0
  3625                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3626  0C11  318C  2460  318C   	fcall	_MTOUCH_Sensor_InitializeAll
  3627                           
  3628                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  3629  0C14  318D  25C6  318C   	fcall	_MTOUCH_Button_InitializeAll
  3630                           
  3631                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  3632  0C17  318C  24E3  318C   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  3633                           
  3634                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  3635  0C1A  318C  247E         	fcall	_MTOUCH_Sensor_Scan_Initialize
  3636  0C1C  0008               	return
  3637  0C1D                     __end_of_MTOUCH_Initialize:	
  3638                           
  3639                           	psect	text7
  3640  0C60                     __ptext7:	
  3641 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  3642 ;; Defined at:
  3643 ;;		line 231 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;		None
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;  sensor          1   10[COMMON] enum E2854
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      void 
  3650 ;; Registers used:
  3651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3657 ;;      Params:         0       0       0       0       0       0       0       0
  3658 ;;      Locals:         1       0       0       0       0       0       0       0
  3659 ;;      Temps:          1       0       0       0       0       0       0       0
  3660 ;;      Totals:         2       0       0       0       0       0       0       0
  3661 ;;Total ram usage:        2 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    7
  3664 ;; This function calls:
  3665 ;;		_MTOUCH_Sensor_Initialize
  3666 ;; This function is called by:
  3667 ;;		_MTOUCH_Initialize
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           
  3672                           ;psect for function _MTOUCH_Sensor_InitializeAll
  3673  0C60                     _MTOUCH_Sensor_InitializeAll:	
  3674                           
  3675                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 233:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 235:     for (sensor = 0; sensor < 4u; sensor
      +                          ++)
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3679  0C60  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  3680  0C61                     l4283:	
  3681                           
  3682                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 236:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 237:         MTOUCH_Sensor_Initialize(sensor);
  3683  0C61  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  3684  0C62  318D  250B  318C   	fcall	_MTOUCH_Sensor_Initialize
  3685                           
  3686                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 238:     }
  3687  0C65  3001               	movlw	1
  3688  0C66  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  3689  0C67  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  3690  0C68  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  3691  0C69  3004               	movlw	4
  3692  0C6A  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  3693  0C6B  1803               	btfsc	3,0
  3694  0C6C  0008               	return
  3695  0C6D  2C61               	goto	l4283
  3696  0C6E                     __end_of_MTOUCH_Sensor_InitializeAll:	
  3697                           
  3698                           	psect	text8
  3699  0D0B                     __ptext8:	
  3700 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  3701 ;; Defined at:
  3702 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  sensor          1    wreg     enum E2854
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;  sensor          1    8[COMMON] enum E2854
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      enum E2859
  3709 ;; Registers used:
  3710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3716 ;;      Params:         0       0       0       0       0       0       0       0
  3717 ;;      Locals:         1       0       0       0       0       0       0       0
  3718 ;;      Temps:          1       0       0       0       0       0       0       0
  3719 ;;      Totals:         2       0       0       0       0       0       0       0
  3720 ;;Total ram usage:        2 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    6
  3723 ;; This function calls:
  3724 ;;		_MTOUCH_Sensor_Calibrate
  3725 ;;		_MTOUCH_Sensor_Enable
  3726 ;;		_Sensor_Sampled_Reset
  3727 ;;		___bmul
  3728 ;; This function is called by:
  3729 ;;		_MTOUCH_Sensor_InitializeAll
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           
  3734                           ;psect for function _MTOUCH_Sensor_Initialize
  3735  0D0B                     _MTOUCH_Sensor_Initialize:	
  3736                           
  3737                           ;incstack = 0
  3738                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  3739                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  3740  0D0B  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  3741                           
  3742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 216: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           217: {;mcc_generated_files/mtouch/mtouch_sensor.c: 219:     MTOUCH_Sensor_Enable(sensor
      +                          );
  3743  0D0C  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3744  0D0D  318C  24C0  318D   	fcall	_MTOUCH_Sensor_Enable
  3745                           
  3746                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 220:     MTOUCH_Sensor_Calibrate(sensor);
  3747  0D10  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3748  0D11  318C  24AF  318D   	fcall	_MTOUCH_Sensor_Calibrate
  3749                           
  3750                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 221:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  3751  0D14  3009               	movlw	9
  3752  0D15  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  3753  0D16  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  3754  0D17  00F1               	movwf	___bmul@multiplicand
  3755  0D18  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3756  0D19  318C  249E  318D   	fcall	___bmul
  3757  0D1C  3EA0               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  3758  0D1D  318B  23E5         	fcall	_Sensor_Sampled_Reset
  3759  0D1F  0008               	return
  3760  0D20                     __end_of_MTOUCH_Sensor_Initialize:	
  3761                           
  3762                           	psect	text9
  3763  0CC0                     __ptext9:	
  3764 ;; *************** function _MTOUCH_Sensor_Enable *****************
  3765 ;; Defined at:
  3766 ;;		line 849 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;  sensor          1    wreg     enum E2854
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;  sensor          1    6[COMMON] enum E2854
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3780 ;;      Params:         0       0       0       0       0       0       0       0
  3781 ;;      Locals:         1       0       0       0       0       0       0       0
  3782 ;;      Temps:          1       0       0       0       0       0       0       0
  3783 ;;      Totals:         2       0       0       0       0       0       0       0
  3784 ;;Total ram usage:        2 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    5
  3787 ;; This function calls:
  3788 ;;		___bmul
  3789 ;; This function is called by:
  3790 ;;		_MTOUCH_Sensor_Initialize
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           
  3795                           ;psect for function _MTOUCH_Sensor_Enable
  3796  0CC0                     _MTOUCH_Sensor_Enable:	
  3797                           
  3798                           ;incstack = 0
  3799                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3800                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  3801  0CC0  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  3802                           
  3803                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 849: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 850: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 851:     if(sensor < 4u)
  3804  0CC1  3004               	movlw	4
  3805  0CC2  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  3806  0CC3  1803               	skipnc
  3807  0CC4  0008               	return
  3808                           
  3809                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 852:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  3810  0CC5  3009               	movlw	9
  3811  0CC6  00F5               	movwf	??_MTOUCH_Sensor_Enable
  3812  0CC7  0875               	movf	??_MTOUCH_Sensor_Enable,w
  3813  0CC8  00F1               	movwf	___bmul@multiplicand
  3814  0CC9  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  3815  0CCA  318C  249E         	fcall	___bmul
  3816  0CCC  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  3817  0CCD  0086               	movwf	6
  3818  0CCE  0187               	clrf	7
  3819  0CCF  1581               	bsf	1,3
  3820  0CD0  0008               	return
  3821  0CD1                     __end_of_MTOUCH_Sensor_Enable:	
  3822                           
  3823                           	psect	text10
  3824  0DC6                     __ptext10:	
  3825 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  3826 ;; Defined at:
  3827 ;;		line 179 in file "mcc_generated_files/mtouch/mtouch_button.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;		None
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;  button          1    0[BANK0 ] enum E3070
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      void 
  3834 ;; Registers used:
  3835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3841 ;;      Params:         0       0       0       0       0       0       0       0
  3842 ;;      Locals:         0       1       0       0       0       0       0       0
  3843 ;;      Temps:          1       0       0       0       0       0       0       0
  3844 ;;      Totals:         1       1       0       0       0       0       0       0
  3845 ;;Total ram usage:        2 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    7
  3848 ;; This function calls:
  3849 ;;		_MTOUCH_Button_Initialize
  3850 ;;		_memcpy
  3851 ;; This function is called by:
  3852 ;;		_MTOUCH_Initialize
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _MTOUCH_Button_InitializeAll
  3858  0DC6                     _MTOUCH_Button_InitializeAll:	
  3859                           
  3860                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 183:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3864  0DC6  30C6               	movlw	low (_mtouch_button_init| (0+32768))
  3865  0DC7  00F1               	movwf	memcpy@s1
  3866  0DC8  3087               	movlw	high (_mtouch_button_init| (0+32768))
  3867  0DC9  00F2               	movwf	memcpy@s1+1
  3868  0DCA  3040               	movlw	64
  3869  0DCB  00F3               	movwf	memcpy@n
  3870  0DCC  3000               	movlw	0
  3871  0DCD  00F4               	movwf	memcpy@n+1
  3872  0DCE  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  3873  0DCF  318E  2670  318D   	fcall	_memcpy
  3874                           
  3875                           ;mcc_generated_files/mtouch/mtouch_button.c: 185:     for (button = 0; button < 4u; butt
      +                          on++)
  3876  0DD2  0020               	movlb	0	; select bank0
  3877  0DD3  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  3878  0DD4                     l4297:	
  3879                           
  3880                           ;mcc_generated_files/mtouch/mtouch_button.c: 186:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 187:         MTOUCH_Button_Initialize(button);
  3881  0DD4  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  3882  0DD5  318F  2758  318D   	fcall	_MTOUCH_Button_Initialize
  3883                           
  3884                           ;mcc_generated_files/mtouch/mtouch_button.c: 188:     }
  3885  0DD8  3001               	movlw	1
  3886  0DD9  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  3887  0DDA  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  3888  0DDB  0020               	movlb	0	; select bank0
  3889  0DDC  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  3890  0DDD  3004               	movlw	4
  3891  0DDE  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  3892  0DDF  1803               	btfsc	3,0
  3893  0DE0  0008               	return
  3894  0DE1  2DD4               	goto	l4297
  3895  0DE2                     __end_of_MTOUCH_Button_InitializeAll:	
  3896                           
  3897                           	psect	text11
  3898  0E70                     __ptext11:	
  3899 ;; *************** function _memcpy *****************
  3900 ;; Defined at:
  3901 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  d1              1    wreg     PTR void 
  3904 ;;		 -> mtouch_button(64), 
  3905 ;;  s1              2    1[COMMON] PTR const void 
  3906 ;;		 -> mtouch_button_init(64), 
  3907 ;;  n               2    3[COMMON] unsigned int 
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;  d1              1    9[COMMON] PTR void 
  3910 ;;		 -> mtouch_button(64), 
  3911 ;;  s               2    7[COMMON] PTR const unsigned char 
  3912 ;;		 -> mtouch_button_init(64), 
  3913 ;;  d               1   10[COMMON] PTR unsigned char 
  3914 ;;		 -> mtouch_button(64), 
  3915 ;;  tmp             1    6[COMMON] unsigned char 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      PTR void 
  3918 ;; Registers used:
  3919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3925 ;;      Params:         4       0       0       0       0       0       0       0
  3926 ;;      Locals:         5       0       0       0       0       0       0       0
  3927 ;;      Temps:          1       0       0       0       0       0       0       0
  3928 ;;      Totals:        10       0       0       0       0       0       0       0
  3929 ;;Total ram usage:       10 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    4
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_MTOUCH_Button_InitializeAll
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           
  3940                           ;psect for function _memcpy
  3941  0E70                     _memcpy:	
  3942                           
  3943                           ;incstack = 0
  3944                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3945                           ;memcpy@d1 stored from wreg
  3946  0E70  00F9               	movwf	memcpy@d1
  3947  0E71  0872               	movf	memcpy@s1+1,w
  3948  0E72  00F8               	movwf	memcpy@s+1
  3949  0E73  0871               	movf	memcpy@s1,w
  3950  0E74  00F7               	movwf	memcpy@s
  3951  0E75  0879               	movf	memcpy@d1,w
  3952  0E76  00F5               	movwf	??_memcpy
  3953  0E77  0875               	movf	??_memcpy,w
  3954  0E78  00FA               	movwf	memcpy@d
  3955  0E79                     l4223:	
  3956  0E79  3001               	movlw	1
  3957  0E7A  02F3               	subwf	memcpy@n,f
  3958  0E7B  3000               	movlw	0
  3959  0E7C  3BF4               	subwfb	memcpy@n+1,f
  3960  0E7D  0A73               	incf	memcpy@n,w
  3961  0E7E  1903               	btfsc	3,2
  3962  0E7F  0A74               	incf	memcpy@n+1,w
  3963  0E80  1903               	btfsc	3,2
  3964  0E81  0008               	return
  3965  0E82  0877               	movf	memcpy@s,w
  3966  0E83  0084               	movwf	4
  3967  0E84  0878               	movf	memcpy@s+1,w
  3968  0E85  0085               	movwf	5
  3969  0E86  0800               	movf	0,w	;code access
  3970  0E87  00F5               	movwf	??_memcpy
  3971  0E88  0875               	movf	??_memcpy,w
  3972  0E89  00F6               	movwf	memcpy@tmp
  3973  0E8A  3001               	movlw	1
  3974  0E8B  07F7               	addwf	memcpy@s,f
  3975  0E8C  3000               	movlw	0
  3976  0E8D  3DF8               	addwfc	memcpy@s+1,f
  3977  0E8E  0876               	movf	memcpy@tmp,w
  3978  0E8F  00F5               	movwf	??_memcpy
  3979  0E90  087A               	movf	memcpy@d,w
  3980  0E91  0086               	movwf	6
  3981  0E92  3001               	movlw	1	; select bank2/3
  3982  0E93  0087               	movwf	7
  3983  0E94  0875               	movf	??_memcpy,w
  3984  0E95  0081               	movwf	1
  3985  0E96  3001               	movlw	1
  3986  0E97  00F5               	movwf	??_memcpy
  3987  0E98  0875               	movf	??_memcpy,w
  3988  0E99  07FA               	addwf	memcpy@d,f
  3989  0E9A  2E79               	goto	l4223
  3990  0E9B                     __end_of_memcpy:	
  3991                           
  3992                           	psect	text12
  3993  0EF6                     __ptext12:	
  3994 ;; *************** function _EUSART_Initialize *****************
  3995 ;; Defined at:
  3996 ;;		line 81 in file "mcc_generated_files/eusart.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;		None
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;		None
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  1    wreg      void 
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0, pclath, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4010 ;;      Params:         0       0       0       0       0       0       0       0
  4011 ;;      Locals:         0       0       0       0       0       0       0       0
  4012 ;;      Temps:          0       0       0       0       0       0       0       0
  4013 ;;      Totals:         0       0       0       0       0       0       0       0
  4014 ;;Total ram usage:        0 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    5
  4017 ;; This function calls:
  4018 ;;		_EUSART_SetErrorHandler
  4019 ;;		_EUSART_SetFramingErrorHandler
  4020 ;;		_EUSART_SetOverrunErrorHandler
  4021 ;;		_EUSART_SetRxInterruptHandler
  4022 ;; This function is called by:
  4023 ;;		_SYSTEM_Initialize
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _EUSART_Initialize
  4029  0EF6                     _EUSART_Initialize:	
  4030                           
  4031                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  4032                           
  4033                           ;incstack = 0
  4034                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4035  0EF6  0021               	movlb	1	; select bank1
  4036  0EF7  1291               	bcf	17,5	;volatile
  4037                           
  4038                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  4039  0EF8  3026               	movlw	low _EUSART_Receive_ISR
  4040  0EF9  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  4041  0EFA  300F               	movlw	high _EUSART_Receive_ISR
  4042  0EFB  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  4043  0EFC  318B  23B8  318E   	fcall	_EUSART_SetRxInterruptHandler
  4044                           
  4045                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  4046  0EFF  3008               	movlw	8
  4047  0F00  0023               	movlb	3	; select bank3
  4048  0F01  009F               	movwf	31	;volatile
  4049                           
  4050                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  4051  0F02  3090               	movlw	144
  4052  0F03  009D               	movwf	29	;volatile
  4053                           
  4054                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  4055  0F04  3024               	movlw	36
  4056  0F05  009E               	movwf	30	;volatile
  4057                           
  4058                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  4059  0F06  3040               	movlw	64
  4060  0F07  009B               	movwf	27	;volatile
  4061                           
  4062                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  4063  0F08  3003               	movlw	3
  4064  0F09  009C               	movwf	28	;volatile
  4065                           
  4066                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  4067  0F0A  307D               	movlw	low _EUSART_DefaultFramingErrorHandler
  4068  0F0B  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  4069  0F0C  300B               	movlw	high _EUSART_DefaultFramingErrorHandler
  4070  0F0D  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  4071  0F0E  318B  23AC  318E   	fcall	_EUSART_SetFramingErrorHandler
  4072                           
  4073                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  4074  0F11  308D               	movlw	low _EUSART_DefaultOverrunErrorHandler
  4075  0F12  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  4076  0F13  300B               	movlw	high _EUSART_DefaultOverrunErrorHandler
  4077  0F14  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  4078  0F15  318B  23B2  318E   	fcall	_EUSART_SetOverrunErrorHandler
  4079                           
  4080                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  4081  0F18  3081               	movlw	low _EUSART_DefaultErrorHandler
  4082  0F19  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  4083  0F1A  300B               	movlw	high _EUSART_DefaultErrorHandler
  4084  0F1B  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  4085  0F1C  318B  23A6         	fcall	_EUSART_SetErrorHandler
  4086                           
  4087                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  4088  0F1E  0020               	movlb	0	; select bank0
  4089  0F1F  01DE               	clrf	_eusartRxLastError	;volatile
  4090                           
  4091                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  4092  0F20  01FC               	clrf	_eusartRxHead	;volatile
  4093                           
  4094                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  4095  0F21  01E0               	clrf	_eusartRxTail	;volatile
  4096                           
  4097                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  4098  0F22  01DF               	clrf	_eusartRxCount	;volatile
  4099                           
  4100                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  4101  0F23  0021               	movlb	1	; select bank1
  4102  0F24  1691               	bsf	17,5	;volatile
  4103  0F25  0008               	return
  4104  0F26                     __end_of_EUSART_Initialize:	
  4105                           
  4106                           	psect	text13
  4107  0BB8                     __ptext13:	
  4108 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  4109 ;; Defined at:
  4110 ;;		line 241 in file "mcc_generated_files/eusart.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4113 ;;		 -> EUSART_Receive_ISR(1), 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;		None
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      void 
  4118 ;; Registers used:
  4119 ;;		wreg
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4125 ;;      Params:         2       0       0       0       0       0       0       0
  4126 ;;      Locals:         0       0       0       0       0       0       0       0
  4127 ;;      Temps:          0       0       0       0       0       0       0       0
  4128 ;;      Totals:         2       0       0       0       0       0       0       0
  4129 ;;Total ram usage:        2 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    4
  4132 ;; This function calls:
  4133 ;;		Nothing
  4134 ;; This function is called by:
  4135 ;;		_EUSART_Initialize
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           
  4140                           ;psect for function _EUSART_SetRxInterruptHandler
  4141  0BB8                     _EUSART_SetRxInterruptHandler:	
  4142                           
  4143                           ;mcc_generated_files/eusart.c: 242:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  4144                           
  4145                           ;incstack = 0
  4146                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4147  0BB8  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4148  0BB9  0020               	movlb	0	; select bank0
  4149  0BBA  00EF               	movwf	_EUSART_RxDefaultInterruptHandler+1
  4150  0BBB  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4151  0BBC  00EE               	movwf	_EUSART_RxDefaultInterruptHandler
  4152  0BBD  0008               	return
  4153  0BBE                     __end_of_EUSART_SetRxInterruptHandler:	
  4154                           
  4155                           	psect	text14
  4156  0BB2                     __ptext14:	
  4157 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  4158 ;; Defined at:
  4159 ;;		line 232 in file "mcc_generated_files/eusart.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4162 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		wreg
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4174 ;;      Params:         2       0       0       0       0       0       0       0
  4175 ;;      Locals:         0       0       0       0       0       0       0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0       0
  4177 ;;      Totals:         2       0       0       0       0       0       0       0
  4178 ;;Total ram usage:        2 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    4
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_EUSART_Initialize
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           
  4189                           ;psect for function _EUSART_SetOverrunErrorHandler
  4190  0BB2                     _EUSART_SetOverrunErrorHandler:	
  4191                           
  4192                           ;mcc_generated_files/eusart.c: 233:     EUSART_OverrunErrorHandler = interruptHandler;
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  4196  0BB2  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  4197  0BB3  0021               	movlb	1	; select bank1
  4198  0BB4  00CF               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  4199  0BB5  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  4200  0BB6  00CE               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  4201  0BB7  0008               	return
  4202  0BB8                     __end_of_EUSART_SetOverrunErrorHandler:	
  4203                           
  4204                           	psect	text15
  4205  0BAC                     __ptext15:	
  4206 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  4207 ;; Defined at:
  4208 ;;		line 228 in file "mcc_generated_files/eusart.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4211 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4223 ;;      Params:         2       0       0       0       0       0       0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0       0
  4226 ;;      Totals:         2       0       0       0       0       0       0       0
  4227 ;;Total ram usage:        2 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    4
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_EUSART_Initialize
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _EUSART_SetFramingErrorHandler
  4239  0BAC                     _EUSART_SetFramingErrorHandler:	
  4240                           
  4241                           ;mcc_generated_files/eusart.c: 229:     EUSART_FramingErrorHandler = interruptHandler;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  4245  0BAC  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  4246  0BAD  0021               	movlb	1	; select bank1
  4247  0BAE  00D1               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  4248  0BAF  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  4249  0BB0  00D0               	movwf	_EUSART_FramingErrorHandler^(0+128)
  4250  0BB1  0008               	return
  4251  0BB2                     __end_of_EUSART_SetFramingErrorHandler:	
  4252                           
  4253                           	psect	text16
  4254  0BA6                     __ptext16:	
  4255 ;; *************** function _EUSART_SetErrorHandler *****************
  4256 ;; Defined at:
  4257 ;;		line 236 in file "mcc_generated_files/eusart.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4260 ;;		 -> EUSART_DefaultErrorHandler(1), 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;		None
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  1    wreg      void 
  4265 ;; Registers used:
  4266 ;;		wreg
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4272 ;;      Params:         2       0       0       0       0       0       0       0
  4273 ;;      Locals:         0       0       0       0       0       0       0       0
  4274 ;;      Temps:          0       0       0       0       0       0       0       0
  4275 ;;      Totals:         2       0       0       0       0       0       0       0
  4276 ;;Total ram usage:        2 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    4
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_EUSART_Initialize
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           
  4287                           ;psect for function _EUSART_SetErrorHandler
  4288  0BA6                     _EUSART_SetErrorHandler:	
  4289                           
  4290                           ;mcc_generated_files/eusart.c: 237:     EUSART_ErrorHandler = interruptHandler;
  4291                           
  4292                           ;incstack = 0
  4293                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  4294  0BA6  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  4295  0BA7  0021               	movlb	1	; select bank1
  4296  0BA8  00CD               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  4297  0BA9  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  4298  0BAA  00CC               	movwf	_EUSART_ErrorHandler^(0+128)
  4299  0BAB  0008               	return
  4300  0BAC                     __end_of_EUSART_SetErrorHandler:	
  4301                           
  4302                           	psect	text17
  4303  0DAA                     __ptext17:	
  4304 ;; *************** function _MTOUCH_Service_Mainloop *****************
  4305 ;; Defined at:
  4306 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;		None
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;		None
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      _Bool 
  4313 ;; Registers used:
  4314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4320 ;;      Params:         0       0       0       0       0       0       0       0
  4321 ;;      Locals:         0       0       0       0       0       0       0       0
  4322 ;;      Temps:          0       1       0       0       0       0       0       0
  4323 ;;      Totals:         0       1       0       0       0       0       0       0
  4324 ;;Total ram usage:        1 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:   11
  4327 ;; This function calls:
  4328 ;;		_MTOUCH_Button_ServiceAll
  4329 ;;		_MTOUCH_Sensor_SampleAll
  4330 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4331 ;;		_MTOUCH_Tick
  4332 ;;		_MTOUCH_needReburst
  4333 ;; This function is called by:
  4334 ;;		_main
  4335 ;;		_touch_example
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           
  4340                           ;psect for function _MTOUCH_Service_Mainloop
  4341  0DAA                     _MTOUCH_Service_Mainloop:	
  4342                           
  4343                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  4344                           
  4345                           ;incstack = 0
  4346                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4347  0DAA  0020               	movlb	0	; select bank0
  4348  0DAB  01DB               	clrf	_mtouch_time_toScan
  4349  0DAC  0ADB               	incf	_mtouch_time_toScan,f
  4350                           
  4351                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  4352                           
  4353                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  4354  0DAD  318D  2520  318D   	fcall	_MTOUCH_Sensor_SampleAll
  4355  0DB0  3A00               	xorlw	0
  4356  0DB1  1D03               	skipz
  4357  0DB2  2DB5               	goto	l4411
  4358                           
  4359                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  4360  0DB3  3000               	movlw	0
  4361  0DB4  0008               	return
  4362  0DB5                     l4411:	
  4363                           
  4364                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  4365  0DB5  318C  246E  318D   	fcall	_MTOUCH_Button_ServiceAll
  4366                           
  4367                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  4368  0DB8  3180  2002  318D   	fcall	_MTOUCH_needReburst
  4369  0DBB  0020               	movlb	0	; select bank0
  4370  0DBC  00C8               	movwf	??_MTOUCH_Service_Mainloop
  4371  0DBD  0848               	movf	??_MTOUCH_Service_Mainloop,w
  4372  0DBE  00DB               	movwf	_mtouch_time_toScan
  4373                           
  4374                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  4375  0DBF  318C  24E3  318D   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4376                           
  4377                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  4378  0DC2  318B  238A         	fcall	_MTOUCH_Tick
  4379                           
  4380                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  4381  0DC4  3001               	movlw	1
  4382  0DC5  0008               	return
  4383  0DC6                     __end_of_MTOUCH_Service_Mainloop:	
  4384                           
  4385                           	psect	text18
  4386  0002                     __ptext18:	
  4387 ;; *************** function _MTOUCH_needReburst *****************
  4388 ;; Defined at:
  4389 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  needReburst     1    0        _Bool 
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      _Bool 
  4396 ;; Registers used:
  4397 ;;		wreg, status,2
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4403 ;;      Params:         0       0       0       0       0       0       0       0
  4404 ;;      Locals:         1       0       0       0       0       0       0       0
  4405 ;;      Temps:          0       0       0       0       0       0       0       0
  4406 ;;      Totals:         1       0       0       0       0       0       0       0
  4407 ;;Total ram usage:        1 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    4
  4410 ;; This function calls:
  4411 ;;		Nothing
  4412 ;; This function is called by:
  4413 ;;		_MTOUCH_Service_Mainloop
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           
  4418                           ;psect for function _MTOUCH_needReburst
  4419  0002                     _MTOUCH_needReburst:	
  4420                           
  4421                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  4425  0002  3000               	movlw	0
  4426  0003  0008               	return
  4427  0004                     __end_of_MTOUCH_needReburst:	
  4428                           
  4429                           	psect	text19
  4430  0B8A                     __ptext19:	
  4431 ;; *************** function _MTOUCH_Tick *****************
  4432 ;; Defined at:
  4433 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;		None
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4447 ;;      Params:         0       0       0       0       0       0       0       0
  4448 ;;      Locals:         0       0       0       0       0       0       0       0
  4449 ;;      Temps:          0       0       0       0       0       0       0       0
  4450 ;;      Totals:         0       0       0       0       0       0       0       0
  4451 ;;Total ram usage:        0 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    6
  4454 ;; This function calls:
  4455 ;;		_MTOUCH_Button_Tick
  4456 ;; This function is called by:
  4457 ;;		_MTOUCH_Service_Mainloop
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _MTOUCH_Tick
  4463  0B8A                     _MTOUCH_Tick:	
  4464                           
  4465                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  4466                           
  4467                           ;incstack = 0
  4468                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4469  0B8A  318D  2536         	fcall	_MTOUCH_Button_Tick
  4470  0B8C  0008               	return
  4471  0B8D                     __end_of_MTOUCH_Tick:	
  4472                           
  4473                           	psect	text20
  4474  0D36                     __ptext20:	
  4475 ;; *************** function _MTOUCH_Button_Tick *****************
  4476 ;; Defined at:
  4477 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;		None
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  i               1    5[COMMON] unsigned char 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      void 
  4484 ;; Registers used:
  4485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4491 ;;      Params:         0       0       0       0       0       0       0       0
  4492 ;;      Locals:         1       0       0       0       0       0       0       0
  4493 ;;      Temps:          1       0       0       0       0       0       0       0
  4494 ;;      Totals:         2       0       0       0       0       0       0       0
  4495 ;;Total ram usage:        2 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    5
  4498 ;; This function calls:
  4499 ;;		_Button_Tick_helper
  4500 ;; This function is called by:
  4501 ;;		_MTOUCH_Tick
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           
  4506                           ;psect for function _MTOUCH_Button_Tick
  4507  0D36                     _MTOUCH_Button_Tick:	
  4508                           
  4509                           ;mcc_generated_files/mtouch/mtouch_button.c: 307:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 308:     for (i = 0; i < 4u; i++)
  4510                           
  4511                           ;incstack = 0
  4512                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4513  0D36  01F5               	clrf	MTOUCH_Button_Tick@i
  4514  0D37                     l3415:	
  4515                           
  4516                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         Button_Tick_helper(&mtouch_button[i]);
  4517  0D37  0875               	movf	MTOUCH_Button_Tick@i,w
  4518  0D38  00F4               	movwf	??_MTOUCH_Button_Tick
  4519  0D39  3003               	movlw	3
  4520  0D3A                     u2915:	
  4521  0D3A  35F4               	lslf	??_MTOUCH_Button_Tick,f
  4522  0D3B  3EFF               	addlw	-1
  4523  0D3C  1D03               	skipz
  4524  0D3D  2D3A               	goto	u2915
  4525  0D3E  3574               	lslf	??_MTOUCH_Button_Tick,w
  4526  0D3F  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  4527  0D40  318E  2649  318D   	fcall	_Button_Tick_helper
  4528                           
  4529                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:     }
  4530  0D43  3001               	movlw	1
  4531  0D44  00F4               	movwf	??_MTOUCH_Button_Tick
  4532  0D45  0874               	movf	??_MTOUCH_Button_Tick,w
  4533  0D46  07F5               	addwf	MTOUCH_Button_Tick@i,f
  4534  0D47  3004               	movlw	4
  4535  0D48  0275               	subwf	MTOUCH_Button_Tick@i,w
  4536  0D49  1803               	btfsc	3,0
  4537  0D4A  0008               	return
  4538  0D4B  2D37               	goto	l3415
  4539  0D4C                     __end_of_MTOUCH_Button_Tick:	
  4540                           
  4541                           	psect	text21
  4542  0E49                     __ptext21:	
  4543 ;; *************** function _Button_Tick_helper *****************
  4544 ;; Defined at:
  4545 ;;		line 313 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;  button          1    wreg     PTR struct .
  4548 ;;		 -> mtouch_button(64), 
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;  button          1    3[COMMON] PTR struct .
  4551 ;;		 -> mtouch_button(64), 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      void 
  4554 ;; Registers used:
  4555 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4561 ;;      Params:         0       0       0       0       0       0       0       0
  4562 ;;      Locals:         1       0       0       0       0       0       0       0
  4563 ;;      Temps:          2       0       0       0       0       0       0       0
  4564 ;;      Totals:         3       0       0       0       0       0       0       0
  4565 ;;Total ram usage:        3 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    4
  4568 ;; This function calls:
  4569 ;;		Nothing
  4570 ;; This function is called by:
  4571 ;;		_MTOUCH_Button_Tick
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           
  4576                           ;psect for function _Button_Tick_helper
  4577  0E49                     _Button_Tick_helper:	
  4578                           
  4579                           ;incstack = 0
  4580                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  4581                           ;Button_Tick_helper@button stored from wreg
  4582  0E49  00F3               	movwf	Button_Tick_helper@button
  4583                           
  4584                           ;mcc_generated_files/mtouch/mtouch_button.c: 313: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 314: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 316:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  4585  0E4A  0873               	movf	Button_Tick_helper@button,w
  4586  0E4B  3E02               	addlw	2
  4587  0E4C  0086               	movwf	6
  4588  0E4D  3001               	movlw	1	; select bank2/3
  4589  0E4E  0087               	movwf	7
  4590  0E4F  3002               	movlw	2
  4591  0E50  0601               	xorwf	1,w
  4592  0E51  1D03               	btfss	3,2
  4593  0E52  0008               	return
  4594                           
  4595                           ;mcc_generated_files/mtouch/mtouch_button.c: 317:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 318:         (button->counter)++;
  4596  0E53  0873               	movf	Button_Tick_helper@button,w
  4597  0E54  3E0A               	addlw	10
  4598  0E55  0086               	movwf	6
  4599  0E56  3001               	movlw	1	; select bank2/3
  4600  0E57  0087               	movwf	7
  4601  0E58  3001               	movlw	1
  4602  0E59  0781               	addwf	1,f
  4603  0E5A  3141               	addfsr 1,1
  4604  0E5B  1803               	skipnc
  4605  0E5C  0A81               	incf	1,f
  4606                           
  4607                           ;mcc_generated_files/mtouch/mtouch_button.c: 319:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  4608  0E5D  0873               	movf	Button_Tick_helper@button,w
  4609  0E5E  3E0A               	addlw	10
  4610  0E5F  0086               	movwf	6
  4611  0E60  3001               	movlw	1	; select bank2/3
  4612  0E61  0087               	movwf	7
  4613  0E62  0016               	moviw fsr1++
  4614  0E63  0401               	iorwf	1,w
  4615  0E64  1D03               	btfss	3,2
  4616  0E65  0008               	return
  4617                           
  4618                           ;mcc_generated_files/mtouch/mtouch_button.c: 320:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 321:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  4619  0E66  0873               	movf	Button_Tick_helper@button,w
  4620  0E67  3E0A               	addlw	10
  4621  0E68  0086               	movwf	6
  4622  0E69  3001               	movlw	1	; select bank2/3
  4623  0E6A  0087               	movwf	7
  4624  0E6B  30FF               	movlw	255
  4625  0E6C  3FC0               	movwi [0]fsr1
  4626  0E6D  30FF               	movlw	255
  4627  0E6E  3FC1               	movwi [1]fsr1
  4628  0E6F  0008               	return
  4629  0E70                     __end_of_Button_Tick_helper:	
  4630                           
  4631                           	psect	text22
  4632  0CE3                     __ptext22:	
  4633 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  4634 ;; Defined at:
  4635 ;;		line 958 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;		None
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  sensor          1    3[COMMON] PTR struct .
  4640 ;;		 -> mtouch_sensor(36), 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4650 ;;      Params:         0       0       0       0       0       0       0       0
  4651 ;;      Locals:         1       0       0       0       0       0       0       0
  4652 ;;      Temps:          1       0       0       0       0       0       0       0
  4653 ;;      Totals:         2       0       0       0       0       0       0       0
  4654 ;;Total ram usage:        2 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    5
  4657 ;; This function calls:
  4658 ;;		_Sensor_Sampled_Reset
  4659 ;; This function is called by:
  4660 ;;		_MTOUCH_Initialize
  4661 ;;		_MTOUCH_Service_Mainloop
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           
  4666                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  4667  0CE3                     _MTOUCH_Sensor_Sampled_ResetAll:	
  4668                           
  4669                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 960:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 961:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[4u -1];sensor++)
  4670                           
  4671                           ;incstack = 0
  4672                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  4673  0CE3  30A0               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  4674  0CE4  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4675  0CE5  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4676  0CE6  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  4677  0CE7                     L1:	
  4678  0CE7  30BB               	movlw	(low ((_mtouch_sensor| 0+27)))& (0+255)
  4679  0CE8  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4680  0CE9  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4681  0CEA  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4682  0CEB  1C03               	btfss	3,0
  4683  0CEC  0008               	return
  4684                           
  4685                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 962:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 963:         Sensor_Sampled_Reset(sensor);
  4686  0CED  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4687  0CEE  318B  23E5  318C   	fcall	_Sensor_Sampled_Reset
  4688                           
  4689                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964:     }
  4690  0CF1  3009               	movlw	9
  4691  0CF2  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4692  0CF3  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4693  0CF4  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  4694  0CF5  2CE7               	goto	L1
  4695  0CF6                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  4696                           
  4697                           	psect	text23
  4698  0BE5                     __ptext23:	
  4699 ;; *************** function _Sensor_Sampled_Reset *****************
  4700 ;; Defined at:
  4701 ;;		line 972 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  sensor          1    wreg     PTR struct .
  4704 ;;		 -> mtouch_sensor(36), 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  sensor          1    1[COMMON] PTR struct .
  4707 ;;		 -> mtouch_sensor(36), 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      void 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4717 ;;      Params:         0       0       0       0       0       0       0       0
  4718 ;;      Locals:         1       0       0       0       0       0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0       0
  4720 ;;      Totals:         1       0       0       0       0       0       0       0
  4721 ;;Total ram usage:        1 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    4
  4724 ;; This function calls:
  4725 ;;		Nothing
  4726 ;; This function is called by:
  4727 ;;		_MTOUCH_Sensor_Initialize
  4728 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           
  4733                           ;psect for function _Sensor_Sampled_Reset
  4734  0BE5                     _Sensor_Sampled_Reset:	
  4735                           
  4736                           ;incstack = 0
  4737                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4738                           ;Sensor_Sampled_Reset@sensor stored from wreg
  4739  0BE5  00F1               	movwf	Sensor_Sampled_Reset@sensor
  4740                           
  4741                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 972: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          973: {;mcc_generated_files/mtouch/mtouch_sensor.c: 974:     sensor->sampled = 0;
  4742  0BE6  0871               	movf	Sensor_Sampled_Reset@sensor,w
  4743  0BE7  3E08               	addlw	8
  4744  0BE8  0086               	movwf	6
  4745  0BE9  0187               	clrf	7
  4746  0BEA  1001               	bcf	1,0
  4747  0BEB  0008               	return
  4748  0BEC                     __end_of_Sensor_Sampled_Reset:	
  4749                           
  4750                           	psect	text24
  4751  0D20                     __ptext24:	
  4752 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  4753 ;; Defined at:
  4754 ;;		line 266 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  group           1   39[BANK0 ] unsigned char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      _Bool 
  4761 ;; Registers used:
  4762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4768 ;;      Params:         0       0       0       0       0       0       0       0
  4769 ;;      Locals:         0       1       0       0       0       0       0       0
  4770 ;;      Temps:          0       1       0       0       0       0       0       0
  4771 ;;      Totals:         0       2       0       0       0       0       0       0
  4772 ;;Total ram usage:        2 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:   10
  4775 ;; This function calls:
  4776 ;;		_Sensor_Service
  4777 ;; This function is called by:
  4778 ;;		_MTOUCH_Service_Mainloop
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _MTOUCH_Sensor_SampleAll
  4784  0D20                     _MTOUCH_Sensor_SampleAll:	
  4785                           
  4786                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 268:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 269:     for (group = 0; group < 2u; group++)
  4787                           
  4788                           ;incstack = 0
  4789                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4790  0D20  0020               	movlb	0	; select bank0
  4791  0D21  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  4792  0D22                     l4371:	
  4793                           
  4794                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 270:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 271:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  4795  0D22  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  4796  0D23  3183  2357  318D   	fcall	_Sensor_Service
  4797  0D26  3A00               	xorlw	0
  4798  0D27  1903               	skipnz
  4799  0D28  2D2B               	goto	l4377
  4800                           
  4801                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 272:             return 0;
  4802  0D29  3000               	movlw	0
  4803  0D2A  0008               	return
  4804  0D2B                     l4377:	
  4805                           
  4806                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 273:     }
  4807  0D2B  3001               	movlw	1
  4808  0D2C  0020               	movlb	0	; select bank0
  4809  0D2D  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  4810  0D2E  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  4811  0D2F  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  4812  0D30  3002               	movlw	2
  4813  0D31  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  4814  0D32  1C03               	skipc
  4815  0D33  2D22               	goto	l4371
  4816                           
  4817                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 274:     return 1;
  4818  0D34  3001               	movlw	1
  4819  0D35  0008               	return
  4820  0D36                     __end_of_MTOUCH_Sensor_SampleAll:	
  4821                           
  4822                           	psect	text25
  4823  0357                     __ptext25:	
  4824 ;; *************** function _Sensor_Service *****************
  4825 ;; Defined at:
  4826 ;;		line 311 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  scanGroup       1    wreg     unsigned char 
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  4831 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  4832 ;;		 -> mtouch_sensor(36), 
  4833 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  4834 ;;		 -> mtouch_sensor(36), 
  4835 ;;  error           1   35[BANK0 ] enum E2859
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      enum E2859
  4838 ;; Registers used:
  4839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4845 ;;      Params:         0       0       0       0       0       0       0       0
  4846 ;;      Locals:         0       4       0       0       0       0       0       0
  4847 ;;      Temps:          0       3       0       0       0       0       0       0
  4848 ;;      Totals:         0       7       0       0       0       0       0       0
  4849 ;;Total ram usage:        7 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:    9
  4852 ;; This function calls:
  4853 ;;		_Sensor_Acquisition
  4854 ;;		_Sensor_DefaultCallback
  4855 ;;		_Sensor_RawSample_Update
  4856 ;;		_Sensor_isEnabled
  4857 ;;		_Sensor_setSampled
  4858 ;; This function is called by:
  4859 ;;		_MTOUCH_Sensor_SampleAll
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           
  4864                           ;psect for function _Sensor_Service
  4865  0357                     _Sensor_Service:	
  4866                           
  4867                           ;incstack = 0
  4868                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4869                           ;Sensor_Service@scanGroup stored from wreg
  4870  0357  0020               	movlb	0	; select bank0
  4871  0358  00C2               	movwf	Sensor_Service@scanGroup
  4872                           
  4873                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 312: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 313:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 314:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 316:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  4874  0359  0842               	movf	Sensor_Service@scanGroup,w
  4875  035A  00BF               	movwf	??_Sensor_Service
  4876  035B  01C0               	clrf	??_Sensor_Service+1
  4877  035C  35BF               	lslf	??_Sensor_Service,f
  4878  035D  0DC0               	rlf	??_Sensor_Service+1,f
  4879  035E  3005               	movlw	low (_sensor_scan_group| (0+32768))
  4880  035F  073F               	addwf	??_Sensor_Service,w
  4881  0360  0084               	movwf	4
  4882  0361  3090               	movlw	high (_sensor_scan_group| (0+32768))
  4883  0362  3D40               	addwfc	??_Sensor_Service+1,w
  4884  0363  0085               	movwf	5
  4885  0364  0800               	movf	0,w	;code access
  4886  0365  00C1               	movwf	??_Sensor_Service+2
  4887  0366  0841               	movf	??_Sensor_Service+2,w
  4888  0367  00C4               	movwf	Sensor_Service@sensor_adc1
  4889                           
  4890                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  4891  0368  0842               	movf	Sensor_Service@scanGroup,w
  4892  0369  00BF               	movwf	??_Sensor_Service
  4893  036A  01C0               	clrf	??_Sensor_Service+1
  4894  036B  35BF               	lslf	??_Sensor_Service,f
  4895  036C  0DC0               	rlf	??_Sensor_Service+1,f
  4896  036D  3006               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  4897  036E  073F               	addwf	??_Sensor_Service,w
  4898  036F  0084               	movwf	4
  4899  0370  3090               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  4900  0371  3D40               	addwfc	??_Sensor_Service+1,w
  4901  0372  0085               	movwf	5
  4902  0373  0800               	movf	0,w	;code access
  4903  0374  00C1               	movwf	??_Sensor_Service+2
  4904  0375  0841               	movf	??_Sensor_Service+2,w
  4905  0376  00C5               	movwf	Sensor_Service@sensor_adc2
  4906                           
  4907                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  4908  0377  0845               	movf	Sensor_Service@sensor_adc2,w
  4909  0378  00BF               	movwf	??_Sensor_Service
  4910  0379  083F               	movf	??_Sensor_Service,w
  4911  037A  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  4912  037B  0844               	movf	Sensor_Service@sensor_adc1,w
  4913  037C  3186  26C8  3183   	fcall	_Sensor_Acquisition
  4914  037F  0020               	movlb	0	; select bank0
  4915  0380  00C0               	movwf	??_Sensor_Service+1
  4916  0381  0840               	movf	??_Sensor_Service+1,w
  4917  0382  00C3               	movwf	Sensor_Service@error
  4918                           
  4919                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 322:     switch(error)
  4920  0383  2BC4               	goto	l4329
  4921  0384                     l4307:	
  4922                           
  4923                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 326:             if(Sensor_isEnabled(sensor_adc1))
  4924  0384  0844               	movf	Sensor_Service@sensor_adc1,w
  4925  0385  318C  248E  3183   	fcall	_Sensor_isEnabled
  4926  0388  3A00               	xorlw	0
  4927  0389  1903               	skipnz
  4928  038A  2BA3               	goto	l4317
  4929                           
  4930                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 327:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 332:                 if(!lowpowerActivated)
  4931  038B  0020               	movlb	0	; select bank0
  4932  038C  085A               	movf	_lowpowerActivated,w
  4933  038D  1D03               	btfss	3,2
  4934  038E  2B93               	goto	l4313
  4935                           
  4936                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 333:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 334:                     Sensor_RawSample_Update(sensor_adc1);
  4937  038F  0844               	movf	Sensor_Service@sensor_adc1,w
  4938  0390  318E  2623  3183   	fcall	_Sensor_RawSample_Update
  4939  0393                     l4313:	
  4940                           
  4941                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 336:                 Sensor_setSampled(sens
      +                          or_adc1);
  4942  0393  0020               	movlb	0	; select bank0
  4943  0394  0844               	movf	Sensor_Service@sensor_adc1,w
  4944  0395  318B  23DE  3183   	fcall	_Sensor_setSampled
  4945                           
  4946                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 callback_sampled(senso
      +                          r_adc1->sensor);
  4947  0398  0020               	movlb	0	; select bank0
  4948  0399  0844               	movf	Sensor_Service@sensor_adc1,w
  4949  039A  0086               	movwf	6
  4950  039B  0187               	clrf	7
  4951  039C  0801               	movf	1,w
  4952  039D  00BF               	movwf	??_Sensor_Service
  4953  039E  083F               	movf	??_Sensor_Service,w
  4954  039F  00F1               	movwf	Sensor_DefaultCallback@sensor
  4955  03A0  318B  2380  3183   	fcall	_Sensor_DefaultCallback
  4956  03A3                     l4317:	
  4957                           
  4958                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 339:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  4959  03A3  0020               	movlb	0	; select bank0
  4960  03A4  0845               	movf	Sensor_Service@sensor_adc2,w
  4961  03A5  318C  248E  3183   	fcall	_Sensor_isEnabled
  4962  03A8  3A00               	xorlw	0
  4963  03A9  1903               	skipnz
  4964  03AA  2BE7               	goto	l4331
  4965                           
  4966                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 340:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 341:                 if(!lowpowerActivated)
  4967  03AB  0020               	movlb	0	; select bank0
  4968  03AC  085A               	movf	_lowpowerActivated,w
  4969  03AD  1D03               	btfss	3,2
  4970  03AE  2BB3               	goto	l4323
  4971                           
  4972                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 343:                     Sensor_RawSample_Update(sensor_adc2);
  4973  03AF  0845               	movf	Sensor_Service@sensor_adc2,w
  4974  03B0  318E  2623  3183   	fcall	_Sensor_RawSample_Update
  4975  03B3                     l4323:	
  4976                           
  4977                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345:                 Sensor_setSampled(sens
      +                          or_adc2);
  4978  03B3  0020               	movlb	0	; select bank0
  4979  03B4  0845               	movf	Sensor_Service@sensor_adc2,w
  4980  03B5  318B  23DE  3183   	fcall	_Sensor_setSampled
  4981                           
  4982                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:                 callback_sampled(senso
      +                          r_adc2->sensor);
  4983  03B8  0020               	movlb	0	; select bank0
  4984  03B9  0845               	movf	Sensor_Service@sensor_adc2,w
  4985  03BA  0086               	movwf	6
  4986  03BB  0187               	clrf	7
  4987  03BC  0801               	movf	1,w
  4988  03BD  00BF               	movwf	??_Sensor_Service
  4989  03BE  083F               	movf	??_Sensor_Service,w
  4990  03BF  00F1               	movwf	Sensor_DefaultCallback@sensor
  4991  03C0  318B  2380  3183   	fcall	_Sensor_DefaultCallback
  4992  03C3  2BE7               	goto	l4331
  4993  03C4                     l4329:	
  4994  03C4  0843               	movf	Sensor_Service@error,w
  4995  03C5  00BF               	movwf	??_Sensor_Service
  4996  03C6  01C0               	clrf	??_Sensor_Service+1
  4997  03C7  1BBF               	btfsc	??_Sensor_Service,7
  4998  03C8  03C0               	decf	??_Sensor_Service+1,f
  4999                           
  5000                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5001                           ; Switch size 1, requested type "simple"
  5002                           ; Number of cases is 2, Range of values is 0 to 255
  5003                           ; switch strategies available:
  5004                           ; Name         Instructions Cycles
  5005                           ; simple_byte            7     4 (average)
  5006                           ; jumptable            260     6 (fixed)
  5007                           ;	Chosen strategy is simple_byte
  5008  03C9  0840               	movf	??_Sensor_Service+1,w
  5009  03CA  3A00               	xorlw	0	; case 0
  5010  03CB  1903               	skipnz
  5011  03CC  2BD1               	goto	l4571
  5012  03CD  3AFF               	xorlw	255	; case 255
  5013  03CE  1903               	skipnz
  5014  03CF  2BD6               	goto	l4573
  5015  03D0  2BE7               	goto	l4331
  5016  03D1                     l4571:	
  5017                           
  5018                           ; Switch size 1, requested type "simple"
  5019                           ; Number of cases is 1, Range of values is 0 to 0
  5020                           ; switch strategies available:
  5021                           ; Name         Instructions Cycles
  5022                           ; simple_byte            4     3 (average)
  5023                           ; direct_byte            8     6 (fixed)
  5024                           ; jumptable            260     6 (fixed)
  5025                           ;	Chosen strategy is simple_byte
  5026  03D1  083F               	movf	??_Sensor_Service,w
  5027  03D2  3A00               	xorlw	0	; case 0
  5028  03D3  1903               	skipnz
  5029  03D4  2B84               	goto	l4307
  5030  03D5  2BE7               	goto	l4331
  5031  03D6                     l4573:	
  5032                           
  5033                           ; Switch size 1, requested type "simple"
  5034                           ; Number of cases is 5, Range of values is 251 to 255
  5035                           ; switch strategies available:
  5036                           ; Name         Instructions Cycles
  5037                           ; direct_byte           15     5 (fixed)
  5038                           ; simple_byte           16     9 (average)
  5039                           ; jumptable            263     9 (fixed)
  5040                           ;	Chosen strategy is simple_byte
  5041  03D6  083F               	movf	??_Sensor_Service,w
  5042  03D7  3AFB               	xorlw	251	; case 251
  5043  03D8  1903               	skipnz
  5044  03D9  2BE7               	goto	l4331
  5045  03DA  3A07               	xorlw	7	; case 252
  5046  03DB  1903               	skipnz
  5047  03DC  2BE7               	goto	l4331
  5048  03DD  3A01               	xorlw	1	; case 253
  5049  03DE  1903               	skipnz
  5050  03DF  2BE7               	goto	l4331
  5051  03E0  3A03               	xorlw	3	; case 254
  5052  03E1  1903               	skipnz
  5053  03E2  2BE7               	goto	l4331
  5054  03E3  3A01               	xorlw	1	; case 255
  5055  03E4  1903               	skipnz
  5056  03E5  2BE7               	goto	l4331
  5057  03E6  2BE7               	goto	l4331
  5058  03E7                     l4331:	
  5059                           
  5060                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 359:     return error;
  5061  03E7  0020               	movlb	0	; select bank0
  5062  03E8  0843               	movf	Sensor_Service@error,w
  5063  03E9  0008               	return
  5064  03EA                     __end_of_Sensor_Service:	
  5065                           
  5066                           	psect	text26
  5067  0BDE                     __ptext26:	
  5068 ;; *************** function _Sensor_setSampled *****************
  5069 ;; Defined at:
  5070 ;;		line 977 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  sensor          1    wreg     PTR struct .
  5073 ;;		 -> mtouch_sensor(36), 
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  sensor          1    1[COMMON] PTR struct .
  5076 ;;		 -> mtouch_sensor(36), 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5086 ;;      Params:         0       0       0       0       0       0       0       0
  5087 ;;      Locals:         1       0       0       0       0       0       0       0
  5088 ;;      Temps:          0       0       0       0       0       0       0       0
  5089 ;;      Totals:         1       0       0       0       0       0       0       0
  5090 ;;Total ram usage:        1 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    4
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_Sensor_Service
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           
  5101                           ;psect for function _Sensor_setSampled
  5102  0BDE                     _Sensor_setSampled:	
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5106                           ;Sensor_setSampled@sensor stored from wreg
  5107  0BDE  00F1               	movwf	Sensor_setSampled@sensor
  5108                           
  5109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 977: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 978
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 979:     sensor->sampled = 1;
  5110  0BDF  0871               	movf	Sensor_setSampled@sensor,w
  5111  0BE0  3E08               	addlw	8
  5112  0BE1  0086               	movwf	6
  5113  0BE2  0187               	clrf	7
  5114  0BE3  1401               	bsf	1,0
  5115  0BE4  0008               	return
  5116  0BE5                     __end_of_Sensor_setSampled:	
  5117                           
  5118                           	psect	text27
  5119  0E23                     __ptext27:	
  5120 ;; *************** function _Sensor_RawSample_Update *****************
  5121 ;; Defined at:
  5122 ;;		line 810 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  sensor          1    wreg     PTR struct .
  5125 ;;		 -> mtouch_sensor(36), 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  sensor          1    7[COMMON] PTR struct .
  5128 ;;		 -> mtouch_sensor(36), 
  5129 ;;  adcIndex        1    6[COMMON] unsigned char 
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5139 ;;      Params:         0       0       0       0       0       0       0       0
  5140 ;;      Locals:         2       0       0       0       0       0       0       0
  5141 ;;      Temps:          1       0       0       0       0       0       0       0
  5142 ;;      Totals:         3       0       0       0       0       0       0       0
  5143 ;;Total ram usage:        3 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    5
  5146 ;; This function calls:
  5147 ;;		_Sensor_getScanGroupIndex
  5148 ;; This function is called by:
  5149 ;;		_Sensor_Service
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _Sensor_RawSample_Update
  5155  0E23                     _Sensor_RawSample_Update:	
  5156                           
  5157                           ;incstack = 0
  5158                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5159                           ;Sensor_RawSample_Update@sensor stored from wreg
  5160  0E23  00F7               	movwf	Sensor_RawSample_Update@sensor
  5161                           
  5162                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 811: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 812:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  5163  0E24  0877               	movf	Sensor_RawSample_Update@sensor,w
  5164  0E25  318E  269B  318E   	fcall	_Sensor_getScanGroupIndex
  5165  0E28  00F5               	movwf	??_Sensor_RawSample_Update
  5166  0E29  0875               	movf	??_Sensor_RawSample_Update,w
  5167  0E2A  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  5168                           
  5169                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 814:     if (INTCONbits.GIE == (uint8_t)1)
  5170  0E2B  1F8B               	btfss	11,7	;volatile
  5171  0E2C  2E3C               	goto	l3253
  5172                           
  5173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 815:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 816:         INTCONbits.GIE = (uint8_t)0;
  5174  0E2D  138B               	bcf	11,7	;volatile
  5175                           
  5176                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 817:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  5177  0E2E  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  5178  0E2F  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  5179  0E30  0086               	movwf	6
  5180  0E31  0187               	clrf	7
  5181  0E32  0877               	movf	Sensor_RawSample_Update@sensor,w
  5182  0E33  3E06               	addlw	6
  5183  0E34  0084               	movwf	4
  5184  0E35  0185               	clrf	5
  5185  0E36  3F40               	moviw [0]fsr1
  5186  0E37  3F80               	movwi [0]fsr0
  5187  0E38  3F41               	moviw [1]fsr1
  5188  0E39  3F81               	movwi [1]fsr0
  5189                           
  5190                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 818:         INTCONbits.GIE = (uint8_t)1;
  5191  0E3A  178B               	bsf	11,7	;volatile
  5192                           
  5193                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 819:     }
  5194  0E3B  0008               	return
  5195  0E3C                     l3253:	
  5196                           
  5197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 821:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 822:         sensor->rawSample = packet_sample[adcIndex];
  5198  0E3C  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  5199  0E3D  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  5200  0E3E  0086               	movwf	6
  5201  0E3F  0187               	clrf	7
  5202  0E40  0877               	movf	Sensor_RawSample_Update@sensor,w
  5203  0E41  3E06               	addlw	6
  5204  0E42  0084               	movwf	4
  5205  0E43  0185               	clrf	5
  5206  0E44  3F40               	moviw [0]fsr1
  5207  0E45  3F80               	movwi [0]fsr0
  5208  0E46  3F41               	moviw [1]fsr1
  5209  0E47  3F81               	movwi [1]fsr0
  5210  0E48  0008               	return
  5211  0E49                     __end_of_Sensor_RawSample_Update:	
  5212                           
  5213                           	psect	text28
  5214  0B80                     __ptext28:	
  5215 ;; *************** function _Sensor_DefaultCallback *****************
  5216 ;; Defined at:
  5217 ;;		line 831 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  sensor          1    1[COMMON] enum E2854
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;		None
  5222 ;; Return value:  Size  Location     Type
  5223 ;;                  1    wreg      void 
  5224 ;; Registers used:
  5225 ;;		None
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5231 ;;      Params:         1       0       0       0       0       0       0       0
  5232 ;;      Locals:         0       0       0       0       0       0       0       0
  5233 ;;      Temps:          0       0       0       0       0       0       0       0
  5234 ;;      Totals:         1       0       0       0       0       0       0       0
  5235 ;;Total ram usage:        1 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    4
  5238 ;; This function calls:
  5239 ;;		Nothing
  5240 ;; This function is called by:
  5241 ;;		_Sensor_Service
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           
  5246                           ;psect for function _Sensor_DefaultCallback
  5247  0B80                     _Sensor_DefaultCallback:	
  5248                           
  5249                           ;incstack = 0
  5250                           ; Regs used in _Sensor_DefaultCallback: []
  5251  0B80  0008               	return
  5252  0B81                     __end_of_Sensor_DefaultCallback:	
  5253                           
  5254                           	psect	text29
  5255  06C8                     __ptext29:	
  5256 ;; *************** function _Sensor_Acquisition *****************
  5257 ;; Defined at:
  5258 ;;		line 380 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  sensor_adc1     1    wreg     PTR struct .
  5261 ;;		 -> mtouch_sensor(36), 
  5262 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  5263 ;;		 -> mtouch_sensor(36), 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  5266 ;;		 -> mtouch_sensor(36), 
  5267 ;;  retry           1   29[BANK0 ] unsigned char 
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  1    wreg      enum E2859
  5270 ;; Registers used:
  5271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5277 ;;      Params:         0       1       0       0       0       0       0       0
  5278 ;;      Locals:         0       2       0       0       0       0       0       0
  5279 ;;      Temps:          0       1       0       0       0       0       0       0
  5280 ;;      Totals:         0       4       0       0       0       0       0       0
  5281 ;;Total ram usage:        4 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    8
  5284 ;; This function calls:
  5285 ;;		_Sensor_Acq_ExecutePacket
  5286 ;;		_Sensor_Scanfrequency_Evaluation
  5287 ;;		_Sensor_isActive
  5288 ;;		_Sensor_isCalibrated
  5289 ;;		_Sensor_postAcquisitionProcess
  5290 ;; This function is called by:
  5291 ;;		_Sensor_Service
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           
  5296                           ;psect for function _Sensor_Acquisition
  5297  06C8                     _Sensor_Acquisition:	
  5298                           
  5299                           ;incstack = 0
  5300                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5301                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  5302  06C8  0020               	movlb	0	; select bank0
  5303  06C9  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  5304                           
  5305                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 380: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 381: {;mcc_generated_files/mtouch/mtouch_sensor.c: 382:     
      +                          uint8_t retry = (uint8_t)5;
  5306  06CA  3005               	movlw	5
  5307  06CB  00BC               	movwf	??_Sensor_Acquisition
  5308  06CC  083C               	movf	??_Sensor_Acquisition,w
  5309  06CD  00BD               	movwf	Sensor_Acquisition@retry
  5310                           
  5311                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  5312  06CE  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5313  06CF  1D03               	btfss	3,2
  5314  06D0  2EDE               	goto	l4171
  5315  06D1  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5316  06D2  1D03               	btfss	3,2
  5317  06D3  2EDE               	goto	l4171
  5318                           
  5319                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 386:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 387:         return MTOUCH_SENSOR_ERROR_invalid_index;
  5320  06D4  30FF               	movlw	255
  5321  06D5  0008               	return
  5322  06D6                     l4165:	
  5323                           
  5324                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 397:         retry--;
  5325  06D6  3001               	movlw	1
  5326  06D7  0020               	movlb	0	; select bank0
  5327  06D8  02BD               	subwf	Sensor_Acquisition@retry,f
  5328                           
  5329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 398:         if(retry == 0)
  5330  06D9  083D               	movf	Sensor_Acquisition@retry,w
  5331  06DA  1D03               	btfss	3,2
  5332  06DB  2EDE               	goto	l4171
  5333                           
  5334                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 399:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 400:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  5335  06DC  30FC               	movlw	252
  5336  06DD  0008               	return
  5337  06DE                     l4171:	
  5338                           
  5339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 395:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  5340  06DE  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5341  06DF  00BC               	movwf	??_Sensor_Acquisition
  5342  06E0  083C               	movf	??_Sensor_Acquisition,w
  5343  06E1  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  5344  06E2  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5345  06E3  3180  204B  3186   	fcall	_Sensor_Acq_ExecutePacket
  5346  06E6  3A00               	xorlw	0
  5347  06E7  1D03               	skipz
  5348  06E8  2ED6               	goto	l4165
  5349                           
  5350                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 404:     if(sensor_adc1 != ((void*)0))
  5351  06E9  0020               	movlb	0	; select bank0
  5352  06EA  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5353  06EB  1903               	btfsc	3,2
  5354  06EC  2EF1               	goto	l4177
  5355                           
  5356                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 405:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 406:         Sensor_postAcquisitionProcess(sensor_adc1);
  5357  06ED  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5358  06EE  318F  278E  3186   	fcall	_Sensor_postAcquisitionProcess
  5359  06F1                     l4177:	
  5360                           
  5361                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:     if(sensor_adc2 !=((void*)0))
  5362  06F1  0020               	movlb	0	; select bank0
  5363  06F2  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5364  06F3  1903               	btfsc	3,2
  5365  06F4  2EF9               	goto	l4181
  5366                           
  5367                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 411:         Sensor_postAcquisitionProcess(sensor_adc2);
  5368  06F5  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5369  06F6  318F  278E  3186   	fcall	_Sensor_postAcquisitionProcess
  5370  06F9                     l4181:	
  5371                           
  5372                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 414:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  5373  06F9  0020               	movlb	0	; select bank0
  5374  06FA  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5375  06FB  318C  242A  3186   	fcall	_Sensor_isActive
  5376  06FE  3A00               	xorlw	0
  5377  06FF  1903               	skipnz
  5378  0700  2F09               	goto	l4185
  5379  0701  0020               	movlb	0	; select bank0
  5380  0702  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5381  0703  318B  23FC  3186   	fcall	_Sensor_isCalibrated
  5382  0706  3A00               	xorlw	0
  5383  0707  1D03               	skipz
  5384  0708  2F19               	goto	l4189
  5385  0709                     l4185:	
  5386  0709  0020               	movlb	0	; select bank0
  5387  070A  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5388  070B  318C  242A  3186   	fcall	_Sensor_isActive
  5389  070E  3A00               	xorlw	0
  5390  070F  1903               	skipnz
  5391  0710  2F22               	goto	l4193
  5392  0711  0020               	movlb	0	; select bank0
  5393  0712  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5394  0713  318B  23FC  3186   	fcall	_Sensor_isCalibrated
  5395  0716  3A00               	xorlw	0
  5396  0717  1903               	skipnz
  5397  0718  2F22               	goto	l4193
  5398  0719                     l4189:	
  5399                           
  5400                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 416:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 417:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  5401  0719  0020               	movlb	0	; select bank0
  5402  071A  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5403  071B  00BC               	movwf	??_Sensor_Acquisition
  5404  071C  083C               	movf	??_Sensor_Acquisition,w
  5405  071D  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  5406  071E  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5407  071F  3185  258A         	fcall	_Sensor_Scanfrequency_Evaluation
  5408  0721  0008               	return
  5409  0722                     l4193:	
  5410                           
  5411                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     return MTOUCH_SENSOR_ERROR_none;
  5412  0722  3000               	movlw	0
  5413  0723  0008               	return
  5414  0724                     __end_of_Sensor_Acquisition:	
  5415                           
  5416                           	psect	text30
  5417  0F8E                     __ptext30:	
  5418 ;; *************** function _Sensor_postAcquisitionProcess *****************
  5419 ;; Defined at:
  5420 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;  sensor          1    wreg     PTR struct .
  5423 ;;		 -> mtouch_sensor(36), 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  sensor          1    9[COMMON] PTR struct .
  5426 ;;		 -> mtouch_sensor(36), 
  5427 ;;  deviation       2    6[COMMON] unsigned short 
  5428 ;;  adcIndex        1    8[COMMON] unsigned char 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5438 ;;      Params:         0       0       0       0       0       0       0       0
  5439 ;;      Locals:         4       0       0       0       0       0       0       0
  5440 ;;      Temps:          1       0       0       0       0       0       0       0
  5441 ;;      Totals:         5       0       0       0       0       0       0       0
  5442 ;;Total ram usage:        5 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    5
  5445 ;; This function calls:
  5446 ;;		_Sensor_getScanGroupIndex
  5447 ;;		_Sensor_isEnabled
  5448 ;;		_Sensor_setActive
  5449 ;;		_Sensor_setInactive
  5450 ;;		_abs
  5451 ;; This function is called by:
  5452 ;;		_Sensor_Acquisition
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           
  5457                           ;psect for function _Sensor_postAcquisitionProcess
  5458  0F8E                     _Sensor_postAcquisitionProcess:	
  5459                           
  5460                           ;incstack = 0
  5461                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5462                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  5463  0F8E  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  5464                           
  5465                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 424: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 425:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 426:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  5466  0F8F  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5467  0F90  318E  269B  318F   	fcall	_Sensor_getScanGroupIndex
  5468  0F93  00F5               	movwf	??_Sensor_postAcquisitionProcess
  5469  0F94  0875               	movf	??_Sensor_postAcquisitionProcess,w
  5470  0F95  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  5471                           
  5472                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     if(Sensor_isEnabled(sensor))
  5473  0F96  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5474  0F97  318C  248E  318F   	fcall	_Sensor_isEnabled
  5475  0F9A  3A00               	xorlw	0
  5476  0F9B  1903               	skipnz
  5477  0F9C  2FB4               	goto	l3111
  5478                           
  5479                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  5480  0F9D  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5481  0F9E  3E06               	addlw	6
  5482  0F9F  0086               	movwf	6
  5483  0FA0  0187               	clrf	7
  5484  0FA1  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  5485  0FA2  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  5486  0FA3  0084               	movwf	4
  5487  0FA4  0185               	clrf	5
  5488  0FA5  3F40               	moviw [0]fsr1
  5489  0FA6  0200               	subwf	0,w
  5490  0FA7  00F1               	movwf	abs@a
  5491  0FA8  3101               	addfsr 0,1
  5492  0FA9  3F41               	moviw [1]fsr1
  5493  0FAA  3B00               	subwfb	0,w
  5494  0FAB  00F2               	movwf	abs@a+1
  5495  0FAC  318D  257A  318F   	fcall	_abs
  5496  0FAF  0872               	movf	?_abs+1,w
  5497  0FB0  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  5498  0FB1  0871               	movf	?_abs,w
  5499  0FB2  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  5500  0FB3  2FB6               	goto	l3113
  5501  0FB4                     l3111:	
  5502                           
  5503                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 431:         deviation = 0;
  5504  0FB4  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  5505  0FB5  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  5506  0FB6                     l3113:	
  5507                           
  5508                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     if(deviation > 100u)
  5509  0FB6  3000               	movlw	0
  5510  0FB7  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  5511  0FB8  3065               	movlw	101
  5512  0FB9  1903               	skipnz
  5513  0FBA  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  5514  0FBB  1C03               	skipc
  5515  0FBC  2FC1               	goto	l3117
  5516                           
  5517                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 434:         Sensor_setActive(sensor);
  5518  0FBD  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5519  0FBE  318B  23D0         	fcall	_Sensor_setActive
  5520  0FC0  0008               	return
  5521  0FC1                     l3117:	
  5522                           
  5523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:         Sensor_setInactive(sensor);
  5524  0FC1  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5525  0FC2  318B  23D7         	fcall	_Sensor_setInactive
  5526  0FC4  0008               	return
  5527  0FC5                     __end_of_Sensor_postAcquisitionProcess:	
  5528                           
  5529                           	psect	text31
  5530  0BD7                     __ptext31:	
  5531 ;; *************** function _Sensor_setInactive *****************
  5532 ;; Defined at:
  5533 ;;		line 885 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;  sensor          1    wreg     PTR struct .
  5536 ;;		 -> mtouch_sensor(36), 
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;  sensor          1    1[COMMON] PTR struct .
  5539 ;;		 -> mtouch_sensor(36), 
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      void 
  5542 ;; Registers used:
  5543 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5549 ;;      Params:         0       0       0       0       0       0       0       0
  5550 ;;      Locals:         1       0       0       0       0       0       0       0
  5551 ;;      Temps:          0       0       0       0       0       0       0       0
  5552 ;;      Totals:         1       0       0       0       0       0       0       0
  5553 ;;Total ram usage:        1 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:    4
  5556 ;; This function calls:
  5557 ;;		Nothing
  5558 ;; This function is called by:
  5559 ;;		_Sensor_postAcquisitionProcess
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function _Sensor_setInactive
  5565  0BD7                     _Sensor_setInactive:	
  5566                           
  5567                           ;incstack = 0
  5568                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5569                           ;Sensor_setInactive@sensor stored from wreg
  5570  0BD7  00F1               	movwf	Sensor_setInactive@sensor
  5571                           
  5572                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 88
      +                          6: {;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     sensor->active = 0;
  5573  0BD8  0871               	movf	Sensor_setInactive@sensor,w
  5574  0BD9  3E08               	addlw	8
  5575  0BDA  0086               	movwf	6
  5576  0BDB  0187               	clrf	7
  5577  0BDC  1081               	bcf	1,1
  5578  0BDD  0008               	return
  5579  0BDE                     __end_of_Sensor_setInactive:	
  5580                           
  5581                           	psect	text32
  5582  0BD0                     __ptext32:	
  5583 ;; *************** function _Sensor_setActive *****************
  5584 ;; Defined at:
  5585 ;;		line 880 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;  sensor          1    wreg     PTR struct .
  5588 ;;		 -> mtouch_sensor(36), 
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;  sensor          1    1[COMMON] PTR struct .
  5591 ;;		 -> mtouch_sensor(36), 
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      void 
  5594 ;; Registers used:
  5595 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5601 ;;      Params:         0       0       0       0       0       0       0       0
  5602 ;;      Locals:         1       0       0       0       0       0       0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0       0
  5604 ;;      Totals:         1       0       0       0       0       0       0       0
  5605 ;;Total ram usage:        1 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    4
  5608 ;; This function calls:
  5609 ;;		Nothing
  5610 ;; This function is called by:
  5611 ;;		_Sensor_postAcquisitionProcess
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           
  5616                           ;psect for function _Sensor_setActive
  5617  0BD0                     _Sensor_setActive:	
  5618                           
  5619                           ;incstack = 0
  5620                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5621                           ;Sensor_setActive@sensor stored from wreg
  5622  0BD0  00F1               	movwf	Sensor_setActive@sensor
  5623                           
  5624                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 880: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 881:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 882:     sensor->active = 1;
  5625  0BD1  0871               	movf	Sensor_setActive@sensor,w
  5626  0BD2  3E08               	addlw	8
  5627  0BD3  0086               	movwf	6
  5628  0BD4  0187               	clrf	7
  5629  0BD5  1481               	bsf	1,1
  5630  0BD6  0008               	return
  5631  0BD7                     __end_of_Sensor_setActive:	
  5632                           
  5633                           	psect	text33
  5634  058A                     __ptext33:	
  5635 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  5636 ;; Defined at:
  5637 ;;		line 741 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;  sensor_adc1     1    wreg     PTR struct .
  5640 ;;		 -> mtouch_sensor(36), 
  5641 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  5642 ;;		 -> mtouch_sensor(36), 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  5645 ;;		 -> mtouch_sensor(36), 
  5646 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  5647 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  5648 ;;  i               1   26[BANK0 ] unsigned char 
  5649 ;;  retry           1   21[BANK0 ] unsigned char 
  5650 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  1    wreg      enum E2859
  5653 ;; Registers used:
  5654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5660 ;;      Params:         0       1       0       0       0       0       0       0
  5661 ;;      Locals:         0      10       0       0       0       0       0       0
  5662 ;;      Temps:          0       2       0       0       0       0       0       0
  5663 ;;      Totals:         0      13       0       0       0       0       0       0
  5664 ;;Total ram usage:       13 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    7
  5667 ;; This function calls:
  5668 ;;		_Sensor_Acq_ExecutePacket
  5669 ;; This function is called by:
  5670 ;;		_Sensor_Acquisition
  5671 ;; This function uses a non-reentrant model
  5672 ;;
  5673                           
  5674                           
  5675                           ;psect for function _Sensor_Scanfrequency_Evaluation
  5676  058A                     _Sensor_Scanfrequency_Evaluation:	
  5677                           
  5678                           ;incstack = 0
  5679                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  5680                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  5681  058A  0020               	movlb	0	; select bank0
  5682  058B  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  5683                           
  5684                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 741: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 742: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 743:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 745:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 746:     mtouch_sensor_sampleperiod_t best_sample_period;
  5685  058C  0856               	movf	_packet_noise+1,w
  5686  058D  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  5687  058E  0855               	movf	_packet_noise,w
  5688  058F  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5689  0590  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  5690  0591  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  5691  0592  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  5692  0593  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  5693  0594  0855               	movf	_packet_noise,w
  5694  0595  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  5695  0596  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  5696  0597  0856               	movf	_packet_noise+1,w
  5697  0598  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  5698  0599  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  5699                           
  5700                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 751:     best_sample_period = sample_period
      +                          ;
  5701  059A  086D               	movf	_sample_period,w
  5702  059B  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5703  059C  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5704  059D  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  5705                           
  5706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 752:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  5707  059E  0852               	movf	_packet_sample+1,w
  5708  059F  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  5709  05A0  0851               	movf	_packet_sample,w
  5710  05A1  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  5711                           
  5712                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 753:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  5713  05A2  0854               	movf	_packet_sample+3,w
  5714  05A3  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  5715  05A4  0853               	movf	_packet_sample+2,w
  5716  05A5  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  5717                           
  5718                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  5719  05A6  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  5720  05A7                     l4097:	
  5721                           
  5722                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 757:         sample_period += frequency_hop[i];
  5723  05A7  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  5724  05A8  3E00               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  5725  05A9  0084               	movwf	4
  5726  05AA  3090               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  5727  05AB  1803               	skipnc
  5728  05AC  3E01               	addlw	1
  5729  05AD  0085               	movwf	5
  5730  05AE  0800               	movf	0,w	;code access
  5731  05AF  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5732  05B0  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5733  05B1  07ED               	addwf	_sample_period,f
  5734                           
  5735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  5736  05B2  30AE               	movlw	174
  5737  05B3  026D               	subwf	_sample_period,w
  5738  05B4  1803               	skipnc
  5739  05B5  2DBA               	goto	l4105
  5740                           
  5741                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 765:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  5742  05B6  30AE               	movlw	174
  5743  05B7  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5744  05B8  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5745  05B9  07ED               	addwf	_sample_period,f
  5746  05BA                     l4105:	
  5747                           
  5748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 768:         retry = (uint8_t)5;
  5749  05BA  3005               	movlw	5
  5750  05BB  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5751  05BC  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5752  05BD  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  5753  05BE                     l4113:	
  5754                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  5755                           
  5756                           
  5757                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  5758  05BE  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  5759  05BF  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5760  05C0  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5761  05C1  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  5762  05C2  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  5763  05C3  3180  204B  3185   	fcall	_Sensor_Acq_ExecutePacket
  5764  05C6  3A00               	xorlw	0
  5765  05C7  1903               	btfsc	3,2
  5766  05C8  2DD1               	goto	l4115
  5767                           
  5768                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 772:             retry--;
  5769  05C9  3001               	movlw	1
  5770  05CA  0020               	movlb	0	; select bank0
  5771  05CB  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  5772                           
  5773                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 773:             if(retry == 0)
  5774  05CC  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  5775  05CD  1D03               	btfss	3,2
  5776  05CE  2DBE               	goto	l4113
  5777                           
  5778                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 775:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  5779  05CF  30FC               	movlw	252
  5780  05D0  0008               	return
  5781  05D1                     l4115:	
  5782                           
  5783                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 779:         if(packet_noise_Max < packet_n
      +                          oise)
  5784  05D1  0020               	movlb	0	; select bank0
  5785  05D2  0856               	movf	_packet_noise+1,w
  5786  05D3  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  5787  05D4  1D03               	skipz
  5788  05D5  2DD8               	goto	u3885
  5789  05D6  0855               	movf	_packet_noise,w
  5790  05D7  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  5791  05D8                     u3885:	
  5792  05D8  1803               	skipnc
  5793  05D9  2DEA               	goto	l4119
  5794                           
  5795                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 781:             packet_noise_Max = packet_noise;
  5796  05DA  0856               	movf	_packet_noise+1,w
  5797  05DB  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  5798  05DC  0855               	movf	_packet_noise,w
  5799  05DD  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  5800                           
  5801                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:             best_sample_period = sampl
      +                          e_period;
  5802  05DE  086D               	movf	_sample_period,w
  5803  05DF  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5804  05E0  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5805  05E1  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  5806                           
  5807                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 783:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  5808  05E2  0852               	movf	_packet_sample+1,w
  5809  05E3  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  5810  05E4  0851               	movf	_packet_sample,w
  5811  05E5  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  5812                           
  5813                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  5814  05E6  0854               	movf	_packet_sample+3,w
  5815  05E7  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  5816  05E8  0853               	movf	_packet_sample+2,w
  5817  05E9  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  5818  05EA                     l4119:	
  5819                           
  5820                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 786:     }
  5821  05EA  3001               	movlw	1
  5822  05EB  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5823  05EC  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5824  05ED  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  5825  05EE  3005               	movlw	5
  5826  05EF  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  5827  05F0  1C03               	skipc
  5828  05F1  2DA7               	goto	l4097
  5829                           
  5830                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 788:     sample_period = best_sample_period
      +                          ;
  5831  05F2  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  5832  05F3  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5833  05F4  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5834  05F5  00ED               	movwf	_sample_period
  5835                           
  5836                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  5837  05F6  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  5838  05F7  00D2               	movwf	_packet_sample+1
  5839  05F8  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  5840  05F9  00D1               	movwf	_packet_sample
  5841                           
  5842                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  5843  05FA  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  5844  05FB  00D4               	movwf	_packet_sample+3
  5845  05FC  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  5846  05FD  00D3               	movwf	_packet_sample+2
  5847                           
  5848                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792:     return MTOUCH_SENSOR_ERROR_none;
  5849  05FE  3000               	movlw	0
  5850  05FF  0008               	return
  5851  0600                     __end_of_Sensor_Scanfrequency_Evaluation:	
  5852                           
  5853                           	psect	text34
  5854  004B                     __ptext34:	
  5855 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  5856 ;; Defined at:
  5857 ;;		line 479 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;  sensor_adc1     1    wreg     PTR struct .
  5860 ;;		 -> mtouch_sensor(36), 
  5861 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  5862 ;;		 -> mtouch_sensor(36), 
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  5865 ;;		 -> mtouch_sensor(36), 
  5866 ;;  last_b          2   10[BANK0 ] unsigned short 
  5867 ;;  last_a          2    8[BANK0 ] unsigned short 
  5868 ;;  packet_count    1   12[BANK0 ] unsigned char 
  5869 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  5870 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  5871 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  5872 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  5873 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  5874 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  5875 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  1    wreg      enum E2859
  5878 ;; Registers used:
  5879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5885 ;;      Params:         1       0       0       0       0       0       0       0
  5886 ;;      Locals:         0      13       0       0       0       0       0       0
  5887 ;;      Temps:          0       1       0       0       0       0       0       0
  5888 ;;      Totals:         1      14       0       0       0       0       0       0
  5889 ;;Total ram usage:       15 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    6
  5892 ;; This function calls:
  5893 ;;		_MTOUCH_Sensor_Scan_Initialize
  5894 ;;		_Sensor_autoCalibration
  5895 ;;		_Sensor_isActive
  5896 ;;		_Sensor_isCalibrated
  5897 ;;		_Sensor_isEnabled
  5898 ;;		_Sensor_loadADCSettings
  5899 ;;		_TMR2_LoadPeriodRegister
  5900 ;;		_TMR2_StartTimer
  5901 ;;		_TMR2_StopTimer
  5902 ;;		_abs
  5903 ;; This function is called by:
  5904 ;;		_Sensor_Acquisition
  5905 ;;		_Sensor_Scanfrequency_Evaluation
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function _Sensor_Acq_ExecutePacket
  5911  004B                     _Sensor_Acq_ExecutePacket:	
  5912                           
  5913                           ;incstack = 0
  5914                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5915                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  5916  004B  0020               	movlb	0	; select bank0
  5917  004C  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  5918                           
  5919                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 484:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  5920  004D  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  5921  004E  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  5922                           
  5923                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  5924  004F  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  5925  0050  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  5926                           
  5927                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 486:     uint8_t activeSensor = 0;
  5928  0051  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  5929                           
  5930                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 489:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 495:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  5931  0052  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  5932  0053  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  5933                           
  5934                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  5935  0054  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5936  0055  1903               	btfsc	3,2
  5937  0056  288A               	goto	l3897
  5938  0057  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  5939  0058  1903               	btfsc	3,2
  5940  0059  288A               	goto	l3897
  5941                           
  5942                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 497:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 498:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  5943  005A  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5944  005B  3E08               	addlw	8
  5945  005C  0086               	movwf	6
  5946  005D  0187               	clrf	7
  5947  005E  1981               	btfsc	1,3
  5948  005F  286E               	goto	l3879
  5949  0060  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  5950  0061  3E08               	addlw	8
  5951  0062  0086               	movwf	6
  5952  0063  0187               	clrf	7
  5953  0064  1D81               	btfss	1,3
  5954  0065  286E               	goto	l3879
  5955                           
  5956                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 500:             sensor_adc1->enabled = 1;
  5957  0066  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5958  0067  3E08               	addlw	8
  5959  0068  0086               	movwf	6
  5960  0069  0187               	clrf	7
  5961  006A  1581               	bsf	1,3
  5962                           
  5963                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:             sensor1ForceEnabled = 1;
  5964  006B  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  5965  006C  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  5966                           
  5967                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 502:         }
  5968  006D  289E               	goto	l3921
  5969  006E                     l3879:	
  5970  006E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  5971  006F  3E08               	addlw	8
  5972  0070  0086               	movwf	6
  5973  0071  0187               	clrf	7
  5974  0072  1981               	btfsc	1,3
  5975  0073  2882               	goto	l3887
  5976  0074  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5977  0075  3E08               	addlw	8
  5978  0076  0086               	movwf	6
  5979  0077  0187               	clrf	7
  5980  0078  1D81               	btfss	1,3
  5981  0079  2882               	goto	l3887
  5982                           
  5983                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 504:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 505:             sensor_adc2->enabled = 1;
  5984  007A  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  5985  007B  3E08               	addlw	8
  5986  007C  0086               	movwf	6
  5987  007D  0187               	clrf	7
  5988  007E  1581               	bsf	1,3
  5989                           
  5990                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 506:             sensor2ForceEnabled = 1;
  5991  007F  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  5992  0080  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  5993                           
  5994                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:         }
  5995  0081  289E               	goto	l3921
  5996  0082                     l3887:	
  5997  0082  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  5998  0083  3E08               	addlw	8
  5999  0084  0086               	movwf	6
  6000  0085  0187               	clrf	7
  6001  0086  1981               	btfsc	1,3
  6002  0087  289E               	goto	l3921
  6003  0088                     l3889:	
  6004  0088  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6005  0089  2897               	goto	L3
  6006  008A                     l3897:	
  6007                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 515:     }
  6008                           
  6009  008A  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6010  008B  1D03               	btfss	3,2
  6011  008C  2890               	goto	l3909
  6012  008D  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6013  008E  1D03               	btfss	3,2
  6014  008F  2888               	goto	l3889
  6015  0090                     l3909:	
  6016                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 517:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 518:         if(sensor_adc2->enabled == 0)
  6017                           
  6018  0090  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6019  0091  1903               	btfsc	3,2
  6020  0092  289E               	goto	l3921
  6021  0093  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6022  0094  1D03               	btfss	3,2
  6023  0095  289E               	goto	l3921
  6024                           
  6025                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 527:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 528:         if(sensor_adc1->enabled == 0)
  6026  0096  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6027  0097                     L3:	
  6028  0097  3E08               	addlw	8
  6029  0098  0086               	movwf	6
  6030  0099  0187               	clrf	7
  6031  009A  1981               	btfsc	1,3
  6032  009B  289E               	goto	l3921
  6033  009C                     l3891:	
  6034                           
  6035                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 510:             return MTOUCH_SENSOR_ERROR_none;
  6036  009C  3000               	movlw	0
  6037  009D  0008               	return
  6038  009E                     l3921:	
  6039                           
  6040                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     if(Sensor_isActive(sensor_adc2))
  6041  009E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6042  009F  318C  242A  3180   	fcall	_Sensor_isActive
  6043  00A2  3A00               	xorlw	0
  6044  00A3  1903               	skipnz
  6045  00A4  28A8               	goto	l3925
  6046                           
  6047                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         activeSensor = 1;
  6048  00A5  0020               	movlb	0	; select bank0
  6049  00A6  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  6050  00A7  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  6051  00A8                     l3925:	
  6052                           
  6053                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     ADCOMCON_temp = ADCOMCON;
  6054  00A8  002E               	movlb	14	; select bank14
  6055  00A9  0812               	movf	18,w	;volatile
  6056  00AA  0020               	movlb	0	; select bank0
  6057  00AB  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6058  00AC  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6059  00AD  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  6060                           
  6061                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:     AD1CON2_temp = AD1CON2;
  6062  00AE  002E               	movlb	14	; select bank14
  6063  00AF  0813               	movf	19,w	;volatile
  6064  00B0  0020               	movlb	0	; select bank0
  6065  00B1  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6066  00B2  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6067  00B3  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  6068                           
  6069                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:     AD2CON2_temp = AD2CON2;
  6070  00B4  002F               	movlb	15	; select bank15
  6071  00B5  0813               	movf	19,w	;volatile
  6072  00B6  0020               	movlb	0	; select bank0
  6073  00B7  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6074  00B8  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6075  00B9  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  6076                           
  6077                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     MTOUCH_Sensor_Scan_Initialize();
  6078  00BA  318C  247E  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  6079                           
  6080                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     if(sensor_adc1!=((void*)0))
  6081  00BD  0020               	movlb	0	; select bank0
  6082  00BE  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6083  00BF  1903               	btfsc	3,2
  6084  00C0  28D3               	goto	l3941
  6085                           
  6086                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6087  00C1  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6088  00C2  3E04               	addlw	4
  6089  00C3  0086               	movwf	6
  6090  00C4  0187               	clrf	7
  6091  00C5  0801               	movf	1,w
  6092  00C6  3EFF               	addlw	255
  6093  00C7  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6094  00C8  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6095  00C9  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6096                           
  6097                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 0;
  6098  00CA  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6099                           
  6100                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b01000000;
  6101  00CB  3040               	movlw	64
  6102  00CC  002E               	movlb	14	; select bank14
  6103  00CD  0098               	movwf	24	;volatile
  6104                           
  6105                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b00000000;
  6106  00CE  002F               	movlb	15	; select bank15
  6107  00CF  0198               	clrf	24	;volatile
  6108                           
  6109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  6110  00D0  0022               	movlb	2	; select bank2
  6111  00D1  101D               	bcf	29,0	;volatile
  6112                           
  6113                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 561:     }
  6114  00D2  28E5               	goto	l3951
  6115  00D3                     l3941:	
  6116                           
  6117                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 564:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6118  00D3  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6119  00D4  3E04               	addlw	4
  6120  00D5  0086               	movwf	6
  6121  00D6  0187               	clrf	7
  6122  00D7  0801               	movf	1,w
  6123  00D8  3EFF               	addlw	255
  6124  00D9  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6125  00DA  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6126  00DB  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6127                           
  6128                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         ADxIF_flag = 1;
  6129  00DC  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6130  00DD  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  6131                           
  6132                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         AAD1GRD = 0b00000000;
  6133  00DE  002E               	movlb	14	; select bank14
  6134  00DF  0198               	clrf	24	;volatile
  6135                           
  6136                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:         AAD2GRD = 0b01000000;
  6137  00E0  3040               	movlw	64
  6138  00E1  002F               	movlb	15	; select bank15
  6139  00E2  0098               	movwf	24	;volatile
  6140                           
  6141                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:         APFCONbits.GRDASEL = 0x1;
  6142  00E3  0022               	movlb	2	; select bank2
  6143  00E4  141D               	bsf	29,0	;volatile
  6144  00E5                     l3951:	
  6145                           
  6146                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  6147  00E5  01F2               	clrf	Sensor_loadADCSettings@adc_index
  6148  00E6  0020               	movlb	0	; select bank0
  6149  00E7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6150  00E8  3182  2209  3180   	fcall	_Sensor_loadADCSettings
  6151                           
  6152                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  6153  00EB  01F2               	clrf	Sensor_loadADCSettings@adc_index
  6154  00EC  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  6155  00ED  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6156  00EE  3182  2209  3180   	fcall	_Sensor_loadADCSettings
  6157                           
  6158                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:     sensor_globalFlags.done = 0;
  6159  00F1  0020               	movlb	0	; select bank0
  6160  00F2  1059               	bcf	_sensor_globalFlags,0	;volatile
  6161                           
  6162                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     sensor_globalFlags.error = 0;
  6163  00F3  1159               	bcf	_sensor_globalFlags,2	;volatile
  6164                           
  6165                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 576:     sensor_globalFlags.interrupted = 0
      +                          ;
  6166  00F4  11D9               	bcf	_sensor_globalFlags,3	;volatile
  6167                           
  6168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  6169  00F5  086D               	movf	_sample_period,w
  6170  00F6  318B  2395  3180   	fcall	_TMR2_LoadPeriodRegister
  6171                           
  6172                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 579:     TMR2_StartTimer();
  6173  00F9  318B  2384  3180   	fcall	_TMR2_StartTimer
  6174                           
  6175                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:     packet_noise = 0;
  6176  00FC  0020               	movlb	0	; select bank0
  6177  00FD  01D5               	clrf	_packet_noise
  6178  00FE  01D6               	clrf	_packet_noise+1
  6179  00FF                     l3967:	
  6180                           
  6181                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 584:         if(ADxIF_flag == 0)
  6182  00FF  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  6183  0100  1D03               	btfss	3,2
  6184  0101  2908               	goto	l584
  6185                           
  6186                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 586:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6187  0102  1F11               	btfss	17,6	;volatile
  6188  0103  10D9               	bcf	_sensor_globalFlags,1	;volatile
  6189  0104                     l586:	
  6190  0104  1F11               	btfss	17,6	;volatile
  6191  0105  2904               	goto	l586
  6192                           
  6193                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588:             PIR1bits.AD1IF = 0;
  6194  0106  1311               	bcf	17,6	;volatile
  6195                           
  6196                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         }
  6197  0107  290E               	goto	l3975
  6198  0108                     l584:	
  6199                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         else
  6200                           
  6201                           
  6202                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 592:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6203  0108  1B12               	btfsc	18,6	;volatile
  6204  0109  290B               	goto	l591
  6205  010A  10D9               	bcf	_sensor_globalFlags,1	;volatile
  6206  010B                     l591:	
  6207  010B  1F12               	btfss	18,6	;volatile
  6208  010C  290B               	goto	l591
  6209                           
  6210                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:             PIR2bits.AD2IF = 0;
  6211  010D  1312               	bcf	18,6	;volatile
  6212  010E                     l3975:	
  6213                           
  6214                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:         AAD1GRD ^= 0b00100001;
  6215  010E  3021               	movlw	33
  6216  010F  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6217  0110  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6218  0111  002E               	movlb	14	; select bank14
  6219  0112  0698               	xorwf	24,f	;volatile
  6220                           
  6221                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:         AAD2GRD ^= 0b00100001;
  6222  0113  3021               	movlw	33
  6223  0114  0020               	movlb	0	; select bank0
  6224  0115  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6225  0116  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6226  0117  002F               	movlb	15	; select bank15
  6227  0118  0698               	xorwf	24,f	;volatile
  6228                           
  6229                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:         AAD1CON3 ^= 0b11000000;
  6230  0119  30C0               	movlw	192
  6231  011A  0020               	movlb	0	; select bank0
  6232  011B  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6233  011C  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6234  011D  002E               	movlb	14	; select bank14
  6235  011E  0694               	xorwf	20,f	;volatile
  6236                           
  6237                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:         AAD2CON3 ^= 0b11000000;
  6238  011F  30C0               	movlw	192
  6239  0120  0020               	movlb	0	; select bank0
  6240  0121  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6241  0122  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6242  0123  002F               	movlb	15	; select bank15
  6243  0124  0694               	xorwf	20,f	;volatile
  6244                           
  6245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:         if ((packet_counter & 0x01) ==
      +                           0)
  6246  0125  0020               	movlb	0	; select bank0
  6247  0126  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  6248  0127  296E               	goto	l3991
  6249                           
  6250                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 603:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 604:             packet_sample[0] += AAD1RES0;
  6251  0128  002E               	movlb	14	; select bank14
  6252  0129  081A               	movf	26,w	;volatile
  6253  012A  0020               	movlb	0	; select bank0
  6254  012B  07D1               	addwf	_packet_sample,f
  6255  012C  002E               	movlb	14	; select bank14
  6256  012D  081B               	movf	27,w	;volatile
  6257  012E  0020               	movlb	0	; select bank0
  6258  012F  3DD2               	addwfc	_packet_sample+1,f
  6259                           
  6260                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 605:             packet_sample[1] += AAD2RE
      +                          S0;
  6261  0130  002F               	movlb	15	; select bank15
  6262  0131  081A               	movf	26,w	;volatile
  6263  0132  0020               	movlb	0	; select bank0
  6264  0133  07D3               	addwf	_packet_sample+2,f
  6265  0134  002F               	movlb	15	; select bank15
  6266  0135  081B               	movf	27,w	;volatile
  6267  0136  0020               	movlb	0	; select bank0
  6268  0137  3DD4               	addwfc	_packet_sample+3,f
  6269                           
  6270                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:             if(activeSensor ==0)
  6271  0138  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  6272  0139  1D03               	btfss	3,2
  6273  013A  2953               	goto	l3987
  6274                           
  6275                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 607:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 608:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  6276  013B  002E               	movlb	14	; select bank14
  6277  013C  081A               	movf	26,w	;volatile
  6278  013D  0020               	movlb	0	; select bank0
  6279  013E  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  6280  013F  00F1               	movwf	abs@a
  6281  0140  002E               	movlb	14	; select bank14
  6282  0141  081B               	movf	27,w	;volatile
  6283  0142  0020               	movlb	0	; select bank0
  6284  0143  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  6285  0144  00F2               	movwf	abs@a+1
  6286  0145  318D  257A  3180   	fcall	_abs
  6287  0148  0871               	movf	?_abs,w
  6288  0149  0020               	movlb	0	; select bank0
  6289  014A  07D5               	addwf	_packet_noise,f
  6290  014B  0872               	movf	?_abs+1,w
  6291  014C  3DD6               	addwfc	_packet_noise+1,f
  6292                           
  6293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 609:                 last_b = AAD1RES0;
  6294  014D  002E               	movlb	14	; select bank14
  6295  014E  081B               	movf	27,w	;volatile
  6296  014F  0020               	movlb	0	; select bank0
  6297  0150  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  6298  0151  002E               	movlb	14	; select bank14
  6299  0152  296A               	goto	L2
  6300  0153                     l3987:	
  6301                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:             }
  6302                           
  6303                           
  6304                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 613:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  6305  0153  002F               	movlb	15	; select bank15
  6306  0154  081A               	movf	26,w	;volatile
  6307  0155  0020               	movlb	0	; select bank0
  6308  0156  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  6309  0157  00F1               	movwf	abs@a
  6310  0158  002F               	movlb	15	; select bank15
  6311  0159  081B               	movf	27,w	;volatile
  6312  015A  0020               	movlb	0	; select bank0
  6313  015B  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  6314  015C  00F2               	movwf	abs@a+1
  6315  015D  318D  257A  3180   	fcall	_abs
  6316  0160  0871               	movf	?_abs,w
  6317  0161  0020               	movlb	0	; select bank0
  6318  0162  07D5               	addwf	_packet_noise,f
  6319  0163  0872               	movf	?_abs+1,w
  6320  0164  3DD6               	addwfc	_packet_noise+1,f
  6321                           
  6322                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:                 last_b = AAD2RES0;
  6323  0165  002F               	movlb	15	; select bank15
  6324  0166  081B               	movf	27,w	;volatile
  6325  0167  0020               	movlb	0	; select bank0
  6326  0168  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  6327  0169  002F               	movlb	15	; select bank15
  6328  016A                     L2:	
  6329  016A  081A               	movf	26,w	;volatile
  6330  016B  0020               	movlb	0	; select bank0
  6331  016C  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  6332  016D  29A2               	goto	l4003
  6333  016E                     l3991:	
  6334                           
  6335                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 618:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 619:             packet_sample[0] -= AAD1RES0;
  6336  016E  002E               	movlb	14	; select bank14
  6337  016F  081A               	movf	26,w	;volatile
  6338  0170  0020               	movlb	0	; select bank0
  6339  0171  02D1               	subwf	_packet_sample,f
  6340  0172  002E               	movlb	14	; select bank14
  6341  0173  081B               	movf	27,w	;volatile
  6342  0174  0020               	movlb	0	; select bank0
  6343  0175  3BD2               	subwfb	_packet_sample+1,f
  6344                           
  6345                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:             packet_sample[1] -= AAD2RE
      +                          S0;
  6346  0176  002F               	movlb	15	; select bank15
  6347  0177  081A               	movf	26,w	;volatile
  6348  0178  0020               	movlb	0	; select bank0
  6349  0179  02D3               	subwf	_packet_sample+2,f
  6350  017A  002F               	movlb	15	; select bank15
  6351  017B  081B               	movf	27,w	;volatile
  6352  017C  0020               	movlb	0	; select bank0
  6353  017D  3BD4               	subwfb	_packet_sample+3,f
  6354                           
  6355                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:             if(activeSensor ==0)
  6356  017E  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  6357  017F  1D03               	btfss	3,2
  6358  0180  2988               	goto	l3999
  6359                           
  6360                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 623:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  6361  0181  002E               	movlb	14	; select bank14
  6362  0182  081A               	movf	26,w	;volatile
  6363  0183  0020               	movlb	0	; select bank0
  6364  0184  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  6365  0185  00F1               	movwf	abs@a
  6366  0186  002E               	movlb	14	; select bank14
  6367  0187  298E               	goto	L5
  6368  0188                     l3999:	
  6369                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:             }
  6370                           
  6371                           
  6372                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 628:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  6373  0188  002F               	movlb	15	; select bank15
  6374  0189  081A               	movf	26,w	;volatile
  6375  018A  0020               	movlb	0	; select bank0
  6376  018B  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  6377  018C  00F1               	movwf	abs@a
  6378  018D  002F               	movlb	15	; select bank15
  6379  018E                     L5:	
  6380  018E  081B               	movf	27,w	;volatile
  6381  018F  0020               	movlb	0	; select bank0
  6382  0190  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  6383  0191  00F2               	movwf	abs@a+1
  6384  0192  318D  257A  3180   	fcall	_abs
  6385  0195  0871               	movf	?_abs,w
  6386  0196  0020               	movlb	0	; select bank0
  6387  0197  07D5               	addwf	_packet_noise,f
  6388  0198  0872               	movf	?_abs+1,w
  6389  0199  3DD6               	addwfc	_packet_noise+1,f
  6390                           
  6391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 624:                 last_a = AAD1RES0;
  6392  019A  002E               	movlb	14	; select bank14
  6393  019B  081B               	movf	27,w	;volatile
  6394  019C  0020               	movlb	0	; select bank0
  6395  019D  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  6396  019E  002E               	movlb	14	; select bank14
  6397  019F  081A               	movf	26,w	;volatile
  6398  01A0  0020               	movlb	0	; select bank0
  6399  01A1  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  6400  01A2                     l4003:	
  6401                           
  6402                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         if (packet_counter == 0)
  6403  01A2  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  6404  01A3  1903               	btfsc	3,2
  6405                           
  6406                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 637:             sensor_globalFlags.done = (uint8_t)1;
  6407  01A4  1459               	bsf	_sensor_globalFlags,0	;volatile
  6408                           
  6409                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:         packet_counter--;
  6410  01A5  3001               	movlw	1
  6411  01A6  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  6412                           
  6413                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:         if (sensor_globalFlags.check !
      +                          = 0)
  6414  01A7  1CD9               	btfss	_sensor_globalFlags,1	;volatile
  6415  01A8  29AB               	goto	l601
  6416                           
  6417                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 643:             sensor_globalFlags.error = 1;
  6418  01A9  1559               	bsf	_sensor_globalFlags,2	;volatile
  6419                           
  6420                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:             sensor_globalFlags.done = 
      +                          1;
  6421  01AA  1459               	bsf	_sensor_globalFlags,0	;volatile
  6422  01AB                     l601:	
  6423                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 645:         }
  6424                           
  6425                           
  6426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:         sensor_globalFlags.check = 1;
  6427  01AB  14D9               	bsf	_sensor_globalFlags,1	;volatile
  6428                           
  6429                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     } while(sensor_globalFlags.done ==
      +                           0);
  6430  01AC  1C59               	btfss	_sensor_globalFlags,0	;volatile
  6431  01AD  28FF               	goto	l3967
  6432                           
  6433                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     TMR2_StopTimer();
  6434  01AE  318B  2387  3180   	fcall	_TMR2_StopTimer
  6435                           
  6436                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 650:     ADCOMCON = ADCOMCON_temp;
  6437  01B1  0020               	movlb	0	; select bank0
  6438  01B2  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  6439  01B3  002E               	movlb	14	; select bank14
  6440  01B4  0092               	movwf	18	;volatile
  6441                           
  6442                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     AD1CON2 = AD1CON2_temp;
  6443  01B5  0020               	movlb	0	; select bank0
  6444  01B6  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  6445  01B7  002E               	movlb	14	; select bank14
  6446  01B8  0093               	movwf	19	;volatile
  6447                           
  6448                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     AD2CON2 = AD2CON2_temp;
  6449  01B9  0020               	movlb	0	; select bank0
  6450  01BA  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  6451  01BB  002F               	movlb	15	; select bank15
  6452  01BC  0093               	movwf	19	;volatile
  6453                           
  6454                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     if(sensor_globalFlags.error)
  6455  01BD  0020               	movlb	0	; select bank0
  6456  01BE  1D59               	btfss	_sensor_globalFlags,2	;volatile
  6457  01BF  29C2               	goto	l603
  6458                           
  6459                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 656:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  6460  01C0  30FB               	movlw	251
  6461  01C1  0008               	return
  6462  01C2                     l603:	
  6463                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     }
  6464                           
  6465                           
  6466                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 659:     if(sensor_globalFlags.interrupted)
  6467  01C2  1DD9               	btfss	_sensor_globalFlags,3	;volatile
  6468  01C3  29C6               	goto	l4031
  6469                           
  6470                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 661:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  6471  01C4  30FA               	movlw	250
  6472  01C5  0008               	return
  6473  01C6                     l4031:	
  6474                           
  6475                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:     if (sensor1ForceEnabled)
  6476  01C6  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  6477  01C7  1903               	btfsc	3,2
  6478  01C8  29CE               	goto	l4035
  6479                           
  6480                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 666:         sensor_adc1->enabled = 0;
  6481  01C9  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6482  01CA  3E08               	addlw	8
  6483  01CB  0086               	movwf	6
  6484  01CC  0187               	clrf	7
  6485  01CD  1181               	bcf	1,3
  6486  01CE                     l4035:	
  6487                           
  6488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:     if (sensor2ForceEnabled)
  6489  01CE  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  6490  01CF  1903               	btfsc	3,2
  6491  01D0  29D6               	goto	l4039
  6492                           
  6493                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 669:         sensor_adc2->enabled = 0;
  6494  01D1  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6495  01D2  3E08               	addlw	8
  6496  01D3  0086               	movwf	6
  6497  01D4  0187               	clrf	7
  6498  01D5  1181               	bcf	1,3
  6499  01D6                     l4039:	
  6500                           
  6501                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  6502  01D6  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6503  01D7  318C  248E  3180   	fcall	_Sensor_isEnabled
  6504  01DA  3A00               	xorlw	0
  6505  01DB  1903               	skipnz
  6506  01DC  29EA               	goto	l4045
  6507  01DD  0020               	movlb	0	; select bank0
  6508  01DE  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6509  01DF  318B  23FC  3180   	fcall	_Sensor_isCalibrated
  6510  01E2  3A00               	xorlw	0
  6511  01E3  1D03               	skipz
  6512  01E4  29EA               	goto	l4045
  6513                           
  6514                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:         Sensor_autoCalibration(sensor_
      +                          adc1);
  6515  01E5  0020               	movlb	0	; select bank0
  6516  01E6  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6517  01E7  3184  2479  3180   	fcall	_Sensor_autoCalibration
  6518  01EA                     l4045:	
  6519                           
  6520                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  6521  01EA  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6522  01EB  318C  248E  3180   	fcall	_Sensor_isEnabled
  6523  01EE  3A00               	xorlw	0
  6524  01EF  1903               	skipnz
  6525  01F0  29FC               	goto	l4051
  6526  01F1  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6527  01F2  318B  23FC  3180   	fcall	_Sensor_isCalibrated
  6528  01F5  3A00               	xorlw	0
  6529  01F6  1D03               	skipz
  6530  01F7  29FC               	goto	l4051
  6531                           
  6532                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:         Sensor_autoCalibration(sensor_
      +                          adc2);
  6533  01F8  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6534  01F9  3184  2479  3180   	fcall	_Sensor_autoCalibration
  6535  01FC                     l4051:	
  6536                           
  6537                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 678:     AD1PRECON = 0;
  6538  01FC  002E               	movlb	14	; select bank14
  6539  01FD  0196               	clrf	22	;volatile
  6540                           
  6541                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 679:     AD2PRECON = 0;
  6542  01FE  002F               	movlb	15	; select bank15
  6543  01FF  0196               	clrf	22	;volatile
  6544                           
  6545                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 680:     AD1ACQCON = 0;
  6546  0200  002E               	movlb	14	; select bank14
  6547  0201  0197               	clrf	23	;volatile
  6548                           
  6549                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 681:     AD2ACQCON = 0;
  6550  0202  002F               	movlb	15	; select bank15
  6551  0203  0197               	clrf	23	;volatile
  6552                           
  6553                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 682:     AD1CON0bits.ADON = 0;
  6554  0204  002E               	movlb	14	; select bank14
  6555  0205  1011               	bcf	17,0	;volatile
  6556                           
  6557                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 683:     AD2CON0bits.ADON = 0;
  6558  0206  002F               	movlb	15	; select bank15
  6559  0207  1011               	bcf	17,0	;volatile
  6560  0208  289C               	goto	l3891
  6561  0209                     __end_of_Sensor_Acq_ExecutePacket:	
  6562                           
  6563                           	psect	text35
  6564  0B87                     __ptext35:	
  6565 ;; *************** function _TMR2_StopTimer *****************
  6566 ;; Defined at:
  6567 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  6568 ;; Parameters:    Size  Location     Type
  6569 ;;		None
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;		None
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  1    wreg      void 
  6574 ;; Registers used:
  6575 ;;		None
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6581 ;;      Params:         0       0       0       0       0       0       0       0
  6582 ;;      Locals:         0       0       0       0       0       0       0       0
  6583 ;;      Temps:          0       0       0       0       0       0       0       0
  6584 ;;      Totals:         0       0       0       0       0       0       0       0
  6585 ;;Total ram usage:        0 bytes
  6586 ;; Hardware stack levels used:    1
  6587 ;; Hardware stack levels required when called:    4
  6588 ;; This function calls:
  6589 ;;		Nothing
  6590 ;; This function is called by:
  6591 ;;		_Sensor_Acq_ExecutePacket
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           
  6596                           ;psect for function _TMR2_StopTimer
  6597  0B87                     _TMR2_StopTimer:	
  6598                           
  6599                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  6600                           
  6601                           ;incstack = 0
  6602                           ; Regs used in _TMR2_StopTimer: []
  6603  0B87  0020               	movlb	0	; select bank0
  6604  0B88  111C               	bcf	28,2	;volatile
  6605  0B89  0008               	return
  6606  0B8A                     __end_of_TMR2_StopTimer:	
  6607                           
  6608                           	psect	text36
  6609  0B84                     __ptext36:	
  6610 ;; *************** function _TMR2_StartTimer *****************
  6611 ;; Defined at:
  6612 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;		None
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;		None
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  1    wreg      void 
  6619 ;; Registers used:
  6620 ;;		None
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6626 ;;      Params:         0       0       0       0       0       0       0       0
  6627 ;;      Locals:         0       0       0       0       0       0       0       0
  6628 ;;      Temps:          0       0       0       0       0       0       0       0
  6629 ;;      Totals:         0       0       0       0       0       0       0       0
  6630 ;;Total ram usage:        0 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    4
  6633 ;; This function calls:
  6634 ;;		Nothing
  6635 ;; This function is called by:
  6636 ;;		_Sensor_Acq_ExecutePacket
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           
  6641                           ;psect for function _TMR2_StartTimer
  6642  0B84                     _TMR2_StartTimer:	
  6643                           
  6644                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  6645                           
  6646                           ;incstack = 0
  6647                           ; Regs used in _TMR2_StartTimer: []
  6648  0B84  0020               	movlb	0	; select bank0
  6649  0B85  151C               	bsf	28,2	;volatile
  6650  0B86  0008               	return
  6651  0B87                     __end_of_TMR2_StartTimer:	
  6652                           
  6653                           	psect	text37
  6654  0B95                     __ptext37:	
  6655 ;; *************** function _TMR2_LoadPeriodRegister *****************
  6656 ;; Defined at:
  6657 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  periodVal       1    wreg     unsigned char 
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;  periodVal       1    1[COMMON] unsigned char 
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  1    wreg      void 
  6664 ;; Registers used:
  6665 ;;		wreg
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6671 ;;      Params:         0       0       0       0       0       0       0       0
  6672 ;;      Locals:         1       0       0       0       0       0       0       0
  6673 ;;      Temps:          0       0       0       0       0       0       0       0
  6674 ;;      Totals:         1       0       0       0       0       0       0       0
  6675 ;;Total ram usage:        1 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    4
  6678 ;; This function calls:
  6679 ;;		Nothing
  6680 ;; This function is called by:
  6681 ;;		_Sensor_Acq_ExecutePacket
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           
  6686                           ;psect for function _TMR2_LoadPeriodRegister
  6687  0B95                     _TMR2_LoadPeriodRegister:	
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  6691                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  6692  0B95  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  6693                           
  6694                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  6695  0B96  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  6696  0B97  0020               	movlb	0	; select bank0
  6697  0B98  009B               	movwf	27	;volatile
  6698  0B99  0008               	return
  6699  0B9A                     __end_of_TMR2_LoadPeriodRegister:	
  6700                           
  6701                           	psect	text38
  6702  0209                     __ptext38:	
  6703 ;; *************** function _Sensor_loadADCSettings *****************
  6704 ;; Defined at:
  6705 ;;		line 445 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;  sensor          1    wreg     PTR struct .
  6708 ;;		 -> mtouch_sensor(36), 
  6709 ;;  adc_index       1    2[COMMON] unsigned char 
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;  sensor          1    9[COMMON] PTR struct .
  6712 ;;		 -> mtouch_sensor(36), 
  6713 ;;  addressOffse    1    8[COMMON] unsigned char 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6723 ;;      Params:         1       0       0       0       0       0       0       0
  6724 ;;      Locals:         4       0       0       0       0       0       0       0
  6725 ;;      Temps:          3       0       0       0       0       0       0       0
  6726 ;;      Totals:         8       0       0       0       0       0       0       0
  6727 ;;Total ram usage:        8 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    5
  6730 ;; This function calls:
  6731 ;;		_Sensor_isCalibrated
  6732 ;;		_Sensor_isCalibratingAcqTime
  6733 ;; This function is called by:
  6734 ;;		_Sensor_Acq_ExecutePacket
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           
  6739                           ;psect for function _Sensor_loadADCSettings
  6740  0209                     _Sensor_loadADCSettings:	
  6741                           
  6742                           ;incstack = 0
  6743                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  6744                           ;Sensor_loadADCSettings@sensor stored from wreg
  6745  0209  00F9               	movwf	Sensor_loadADCSettings@sensor
  6746                           
  6747                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 446
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     if (sensor == ((void*)0))
  6748  020A  0879               	movf	Sensor_loadADCSettings@sensor,w
  6749  020B  1903               	btfsc	3,2
  6750  020C  0008               	return
  6751                           
  6752                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  6753  020D  0872               	movf	Sensor_loadADCSettings@adc_index,w
  6754  020E  1D03               	btfss	3,2
  6755  020F  2A13               	goto	l2801
  6756  0210  01F6               	clrf	_Sensor_loadADCSettings$1137
  6757  0211  01F7               	clrf	_Sensor_loadADCSettings$1137+1
  6758  0212  2A17               	goto	l555
  6759  0213                     l2801:	
  6760  0213  3080               	movlw	128
  6761  0214  00F6               	movwf	_Sensor_loadADCSettings$1137
  6762  0215  3000               	movlw	0
  6763  0216  00F7               	movwf	_Sensor_loadADCSettings$1137+1
  6764  0217                     l555:	
  6765  0217  0876               	movf	_Sensor_loadADCSettings$1137,w
  6766  0218  00F3               	movwf	??_Sensor_loadADCSettings
  6767  0219  0873               	movf	??_Sensor_loadADCSettings,w
  6768  021A  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  6769                           
  6770                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  6771  021B  0A79               	incf	Sensor_loadADCSettings@sensor,w
  6772  021C  0086               	movwf	6
  6773  021D  0187               	clrf	7
  6774  021E  0801               	movf	1,w
  6775  021F  00F3               	movwf	??_Sensor_loadADCSettings
  6776  0220  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6777  0221  3E11               	addlw	17
  6778  0222  00F4               	movwf	??_Sensor_loadADCSettings+1
  6779  0223  01F5               	clrf	??_Sensor_loadADCSettings+2
  6780  0224  3007               	movlw	7
  6781  0225  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  6782  0226  0874               	movf	??_Sensor_loadADCSettings+1,w
  6783  0227  0086               	movwf	6
  6784  0228  0875               	movf	??_Sensor_loadADCSettings+2,w
  6785  0229  0087               	movwf	7
  6786  022A  0873               	movf	??_Sensor_loadADCSettings,w
  6787  022B  0081               	movwf	1
  6788                           
  6789                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  6790  022C  0879               	movf	Sensor_loadADCSettings@sensor,w
  6791  022D  3E05               	addlw	5
  6792  022E  0086               	movwf	6
  6793  022F  0187               	clrf	7
  6794  0230  0801               	movf	1,w
  6795  0231  00F3               	movwf	??_Sensor_loadADCSettings
  6796  0232  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6797  0233  3E19               	addlw	25
  6798  0234  00F4               	movwf	??_Sensor_loadADCSettings+1
  6799  0235  01F5               	clrf	??_Sensor_loadADCSettings+2
  6800  0236  3007               	movlw	7
  6801  0237  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  6802  0238  0874               	movf	??_Sensor_loadADCSettings+1,w
  6803  0239  0086               	movwf	6
  6804  023A  0875               	movf	??_Sensor_loadADCSettings+2,w
  6805  023B  0087               	movwf	7
  6806  023C  0873               	movf	??_Sensor_loadADCSettings,w
  6807  023D  0081               	movwf	1
  6808                           
  6809                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 454:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  6810  023E  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6811  023F  3E13               	addlw	19
  6812  0240  00F3               	movwf	??_Sensor_loadADCSettings
  6813  0241  01F4               	clrf	??_Sensor_loadADCSettings+1
  6814  0242  3007               	movlw	7
  6815  0243  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  6816  0244  0873               	movf	??_Sensor_loadADCSettings,w
  6817  0245  0086               	movwf	6
  6818  0246  0874               	movf	??_Sensor_loadADCSettings+1,w
  6819  0247  0087               	movwf	7
  6820  0248  3050               	movlw	80
  6821  0249  0081               	movwf	1
  6822                           
  6823                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  6824  024A  30FE               	movlw	254
  6825  024B  00F3               	movwf	??_Sensor_loadADCSettings
  6826  024C  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6827  024D  3E18               	addlw	24
  6828  024E  0086               	movwf	6
  6829  024F  0187               	clrf	7
  6830  0250  3007               	movlw	7
  6831  0251  3D87               	addwfc	7,f
  6832  0252  0873               	movf	??_Sensor_loadADCSettings,w
  6833  0253  0581               	andwf	1,f
  6834                           
  6835                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:     if (Sensor_isCalibrated(sensor))
  6836  0254  0879               	movf	Sensor_loadADCSettings@sensor,w
  6837  0255  318B  23FC  3182   	fcall	_Sensor_isCalibrated
  6838  0258  3A00               	xorlw	0
  6839  0259  1903               	skipnz
  6840  025A  2A6E               	goto	l2815
  6841                           
  6842                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 459:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  6843  025B  0879               	movf	Sensor_loadADCSettings@sensor,w
  6844  025C  3E02               	addlw	2
  6845  025D  0086               	movwf	6
  6846  025E  0187               	clrf	7
  6847  025F  0801               	movf	1,w
  6848  0260  00F3               	movwf	??_Sensor_loadADCSettings
  6849  0261  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6850  0262  3E16               	addlw	22
  6851  0263  00F4               	movwf	??_Sensor_loadADCSettings+1
  6852  0264  01F5               	clrf	??_Sensor_loadADCSettings+2
  6853  0265  3007               	movlw	7
  6854  0266  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  6855  0267  0874               	movf	??_Sensor_loadADCSettings+1,w
  6856  0268  0086               	movwf	6
  6857  0269  0875               	movf	??_Sensor_loadADCSettings+2,w
  6858  026A  0087               	movwf	7
  6859  026B  0873               	movf	??_Sensor_loadADCSettings,w
  6860  026C  0081               	movwf	1
  6861  026D  2A81               	goto	l2819
  6862  026E                     l2815:	
  6863                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  6864                           
  6865                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  6866                           
  6867                           
  6868                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 464:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  6869  026E  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6870  026F  3E16               	addlw	22
  6871  0270  00F3               	movwf	??_Sensor_loadADCSettings
  6872  0271  01F4               	clrf	??_Sensor_loadADCSettings+1
  6873  0272  3007               	movlw	7
  6874  0273  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  6875  0274  0873               	movf	??_Sensor_loadADCSettings,w
  6876  0275  0086               	movwf	6
  6877  0276  0874               	movf	??_Sensor_loadADCSettings+1,w
  6878  0277  0087               	movwf	7
  6879  0278  3020               	movlw	32
  6880  0279  0081               	movwf	1
  6881                           
  6882                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 465:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  6883  027A  0879               	movf	Sensor_loadADCSettings@sensor,w
  6884  027B  318B  23EC  3182   	fcall	_Sensor_isCalibratingAcqTime
  6885  027E  3A00               	xorlw	0
  6886  027F  1903               	skipnz
  6887  0280  2A93               	goto	l2821
  6888  0281                     l2819:	
  6889                           
  6890                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 466:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  6891  0281  0879               	movf	Sensor_loadADCSettings@sensor,w
  6892  0282  3E03               	addlw	3
  6893  0283  0086               	movwf	6
  6894  0284  0187               	clrf	7
  6895  0285  0801               	movf	1,w
  6896  0286  00F3               	movwf	??_Sensor_loadADCSettings
  6897  0287  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6898  0288  3E17               	addlw	23
  6899  0289  00F4               	movwf	??_Sensor_loadADCSettings+1
  6900  028A  01F5               	clrf	??_Sensor_loadADCSettings+2
  6901  028B  3007               	movlw	7
  6902  028C  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  6903  028D  0874               	movf	??_Sensor_loadADCSettings+1,w
  6904  028E  0086               	movwf	6
  6905  028F  0875               	movf	??_Sensor_loadADCSettings+2,w
  6906  0290  0087               	movwf	7
  6907  0291  0873               	movf	??_Sensor_loadADCSettings,w
  6908  0292  2A9E               	goto	L6
  6909  0293                     l2821:	
  6910                           
  6911                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 468:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  6912  0293  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  6913  0294  3E17               	addlw	23
  6914  0295  00F3               	movwf	??_Sensor_loadADCSettings
  6915  0296  01F4               	clrf	??_Sensor_loadADCSettings+1
  6916  0297  3007               	movlw	7
  6917  0298  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  6918  0299  0873               	movf	??_Sensor_loadADCSettings,w
  6919  029A  0086               	movwf	6
  6920  029B  0874               	movf	??_Sensor_loadADCSettings+1,w
  6921  029C  0087               	movwf	7
  6922  029D  3020               	movlw	32
  6923  029E                     L6:	
  6924  029E  0081               	movwf	1
  6925                           
  6926                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  6927                           
  6928                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 469:     }
  6929  029F  0879               	movf	Sensor_loadADCSettings@sensor,w
  6930  02A0  3E04               	addlw	4
  6931  02A1  0086               	movwf	6
  6932  02A2  0187               	clrf	7
  6933  02A3  0801               	movf	1,w
  6934  02A4  00F3               	movwf	??_Sensor_loadADCSettings
  6935  02A5  01F4               	clrf	??_Sensor_loadADCSettings+1
  6936  02A6  3009               	movlw	9
  6937  02A7                     u1855:	
  6938  02A7  35F3               	lslf	??_Sensor_loadADCSettings,f
  6939  02A8  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  6940  02A9  0B89               	decfsz	9,f
  6941  02AA  2AA7               	goto	u1855
  6942  02AB  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  6943  02AC  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  6944  02AD  0086               	movwf	6
  6945  02AE  0187               	clrf	7
  6946  02AF  0873               	movf	??_Sensor_loadADCSettings,w
  6947  02B0  3FC0               	movwi [0]fsr1
  6948  02B1  0874               	movf	??_Sensor_loadADCSettings+1,w
  6949  02B2  3FC1               	movwi [1]fsr1
  6950  02B3  0008               	return
  6951  02B4                     __end_of_Sensor_loadADCSettings:	
  6952                           
  6953                           	psect	text39
  6954  0BFC                     __ptext39:	
  6955 ;; *************** function _Sensor_isCalibrated *****************
  6956 ;; Defined at:
  6957 ;;		line 928 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;  sensor          1    wreg     PTR struct .
  6960 ;;		 -> mtouch_sensor(36), 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  sensor          1    1[COMMON] PTR struct .
  6963 ;;		 -> mtouch_sensor(36), 
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  1    wreg      _Bool 
  6966 ;; Registers used:
  6967 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6973 ;;      Params:         0       0       0       0       0       0       0       0
  6974 ;;      Locals:         1       0       0       0       0       0       0       0
  6975 ;;      Temps:          0       0       0       0       0       0       0       0
  6976 ;;      Totals:         1       0       0       0       0       0       0       0
  6977 ;;Total ram usage:        1 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    4
  6980 ;; This function calls:
  6981 ;;		Nothing
  6982 ;; This function is called by:
  6983 ;;		_Sensor_Acquisition
  6984 ;;		_Sensor_loadADCSettings
  6985 ;;		_Sensor_Acq_ExecutePacket
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           
  6990                           ;psect for function _Sensor_isCalibrated
  6991  0BFC                     _Sensor_isCalibrated:	
  6992                           
  6993                           ;incstack = 0
  6994                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  6995                           ;Sensor_isCalibrated@sensor stored from wreg
  6996  0BFC  00F1               	movwf	Sensor_isCalibrated@sensor
  6997                           
  6998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          929: {;mcc_generated_files/mtouch/mtouch_sensor.c: 930:     return (_Bool)sensor->calibr
      +                          ated;
  6999  0BFD  0871               	movf	Sensor_isCalibrated@sensor,w
  7000  0BFE  3E08               	addlw	8
  7001  0BFF  0086               	movwf	6
  7002  0C00  0187               	clrf	7
  7003  0C01  0C01               	rrf	1,w
  7004  0C02  0C89               	rrf	9,f
  7005  0C03  3901               	andlw	1
  7006  0C04  0008               	return
  7007  0C05                     __end_of_Sensor_isCalibrated:	
  7008                           
  7009                           	psect	text40
  7010  0C8E                     __ptext40:	
  7011 ;; *************** function _Sensor_isEnabled *****************
  7012 ;; Defined at:
  7013 ;;		line 863 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;  sensor          1    wreg     PTR struct .
  7016 ;;		 -> mtouch_sensor(36), 
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;  sensor          1    2[COMMON] PTR struct .
  7019 ;;		 -> mtouch_sensor(36), 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      _Bool 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7029 ;;      Params:         0       0       0       0       0       0       0       0
  7030 ;;      Locals:         1       0       0       0       0       0       0       0
  7031 ;;      Temps:          1       0       0       0       0       0       0       0
  7032 ;;      Totals:         2       0       0       0       0       0       0       0
  7033 ;;Total ram usage:        2 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    4
  7036 ;; This function calls:
  7037 ;;		Nothing
  7038 ;; This function is called by:
  7039 ;;		_Sensor_Service
  7040 ;;		_Sensor_postAcquisitionProcess
  7041 ;;		_Sensor_Acq_ExecutePacket
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           
  7046                           ;psect for function _Sensor_isEnabled
  7047  0C8E                     _Sensor_isEnabled:	
  7048                           
  7049                           ;incstack = 0
  7050                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  7051                           ;Sensor_isEnabled@sensor stored from wreg
  7052  0C8E  00F2               	movwf	Sensor_isEnabled@sensor
  7053                           
  7054                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 863: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 864: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 865:     if(sensor!=((void*)0))
  7055  0C8F  0872               	movf	Sensor_isEnabled@sensor,w
  7056  0C90  1903               	btfsc	3,2
  7057  0C91  2C9C               	goto	l2779
  7058                           
  7059                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 866:         return (_Bool)sensor->enabled;
  7060  0C92  0872               	movf	Sensor_isEnabled@sensor,w
  7061  0C93  3E08               	addlw	8
  7062  0C94  0086               	movwf	6
  7063  0C95  0187               	clrf	7
  7064  0C96  0C01               	rrf	1,w
  7065  0C97  00F1               	movwf	??_Sensor_isEnabled
  7066  0C98  0CF1               	rrf	??_Sensor_isEnabled,f
  7067  0C99  0C71               	rrf	??_Sensor_isEnabled,w
  7068  0C9A  3901               	andlw	1
  7069  0C9B  0008               	return
  7070  0C9C                     l2779:	
  7071                           
  7072                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868:         return 0;
  7073  0C9C  3000               	movlw	0
  7074  0C9D  0008               	return
  7075  0C9E                     __end_of_Sensor_isEnabled:	
  7076                           
  7077                           	psect	text41
  7078  0C2A                     __ptext41:	
  7079 ;; *************** function _Sensor_isActive *****************
  7080 ;; Defined at:
  7081 ;;		line 890 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  sensor          1    wreg     PTR struct .
  7084 ;;		 -> mtouch_sensor(36), 
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;  sensor          1    1[COMMON] PTR struct .
  7087 ;;		 -> mtouch_sensor(36), 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      _Bool 
  7090 ;; Registers used:
  7091 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7097 ;;      Params:         0       0       0       0       0       0       0       0
  7098 ;;      Locals:         1       0       0       0       0       0       0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0       0
  7100 ;;      Totals:         1       0       0       0       0       0       0       0
  7101 ;;Total ram usage:        1 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    4
  7104 ;; This function calls:
  7105 ;;		Nothing
  7106 ;; This function is called by:
  7107 ;;		_Sensor_Acquisition
  7108 ;;		_Sensor_Acq_ExecutePacket
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           
  7113                           ;psect for function _Sensor_isActive
  7114  0C2A                     _Sensor_isActive:	
  7115                           
  7116                           ;incstack = 0
  7117                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7118                           ;Sensor_isActive@sensor stored from wreg
  7119  0C2A  00F1               	movwf	Sensor_isActive@sensor
  7120                           
  7121                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 890: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 891:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 892:     if(sensor == ((void*)0))
  7122  0C2B  0871               	movf	Sensor_isActive@sensor,w
  7123  0C2C  1D03               	btfss	3,2
  7124  0C2D  2C30               	goto	l2789
  7125                           
  7126                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 893:         return 0;
  7127  0C2E  3000               	movlw	0
  7128  0C2F  0008               	return
  7129  0C30                     l2789:	
  7130                           
  7131                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 895:     return (_Bool)sensor->active;
  7132  0C30  0871               	movf	Sensor_isActive@sensor,w
  7133  0C31  3E08               	addlw	8
  7134  0C32  0086               	movwf	6
  7135  0C33  0187               	clrf	7
  7136  0C34  0C01               	rrf	1,w
  7137  0C35  3901               	andlw	1
  7138  0C36  0008               	return
  7139  0C37                     __end_of_Sensor_isActive:	
  7140                           
  7141                           	psect	text42
  7142  0479                     __ptext42:	
  7143 ;; *************** function _Sensor_autoCalibration *****************
  7144 ;; Defined at:
  7145 ;;		line 696 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;  sensor          1    wreg     PTR struct .
  7148 ;;		 -> mtouch_sensor(36), 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  sensor          1   10[COMMON] PTR struct .
  7151 ;;		 -> mtouch_sensor(36), 
  7152 ;;  adcIndex        1    9[COMMON] unsigned char 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7162 ;;      Params:         0       0       0       0       0       0       0       0
  7163 ;;      Locals:         2       0       0       0       0       0       0       0
  7164 ;;      Temps:          4       0       0       0       0       0       0       0
  7165 ;;      Totals:         6       0       0       0       0       0       0       0
  7166 ;;Total ram usage:        6 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:    5
  7169 ;; This function calls:
  7170 ;;		_Sensor_getScanGroupIndex
  7171 ;;		_Sensor_isCalibratingAcqTime
  7172 ;;		_Sensor_setCalibratAcqTime
  7173 ;;		_Sensor_setCalibrated
  7174 ;;		_abs
  7175 ;; This function is called by:
  7176 ;;		_Sensor_Acq_ExecutePacket
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           
  7181                           ;psect for function _Sensor_autoCalibration
  7182  0479                     _Sensor_autoCalibration:	
  7183                           
  7184                           ;incstack = 0
  7185                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7186                           ;Sensor_autoCalibration@sensor stored from wreg
  7187  0479  00FA               	movwf	Sensor_autoCalibration@sensor
  7188                           
  7189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 696: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 697: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 698:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  7190  047A  087A               	movf	Sensor_autoCalibration@sensor,w
  7191  047B  318E  269B  3184   	fcall	_Sensor_getScanGroupIndex
  7192  047E  00F5               	movwf	??_Sensor_autoCalibration
  7193  047F  0875               	movf	??_Sensor_autoCalibration,w
  7194  0480  00F9               	movwf	Sensor_autoCalibration@adcIndex
  7195                           
  7196                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  7197  0481  087A               	movf	Sensor_autoCalibration@sensor,w
  7198  0482  318B  23EC  3184   	fcall	_Sensor_isCalibratingAcqTime
  7199  0485  3A00               	xorlw	0
  7200  0486  1D03               	skipz
  7201  0487  2CB8               	goto	l2835
  7202                           
  7203                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 702:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  7204  0488  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  7205  0489  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  7206  048A  0086               	movwf	6
  7207  048B  0187               	clrf	7
  7208  048C  3F40               	moviw [0]fsr1
  7209  048D  00F5               	movwf	??_Sensor_autoCalibration
  7210  048E  3F41               	moviw [1]fsr1
  7211  048F  00F6               	movwf	??_Sensor_autoCalibration+1
  7212  0490  087A               	movf	Sensor_autoCalibration@sensor,w
  7213  0491  3E04               	addlw	4
  7214  0492  0086               	movwf	6
  7215  0493  0187               	clrf	7
  7216  0494  0801               	movf	1,w
  7217  0495  00F7               	movwf	??_Sensor_autoCalibration+2
  7218  0496  01F8               	clrf	??_Sensor_autoCalibration+3
  7219  0497  3009               	movlw	9
  7220  0498                     u1875:	
  7221  0498  35F7               	lslf	??_Sensor_autoCalibration+2,f
  7222  0499  0DF8               	rlf	??_Sensor_autoCalibration+3,f
  7223  049A  0B89               	decfsz	9,f
  7224  049B  2C98               	goto	u1875
  7225  049C  0876               	movf	??_Sensor_autoCalibration+1,w
  7226  049D  0278               	subwf	??_Sensor_autoCalibration+3,w
  7227  049E  1D03               	skipz
  7228  049F  2CA2               	goto	u1885
  7229  04A0  0875               	movf	??_Sensor_autoCalibration,w
  7230  04A1  0277               	subwf	??_Sensor_autoCalibration+2,w
  7231  04A2                     u1885:	
  7232  04A2  1803               	skipnc
  7233  04A3  2CB4               	goto	l2833
  7234                           
  7235                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 703:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 704:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  7236  04A4  3001               	movlw	1
  7237  04A5  00F5               	movwf	??_Sensor_autoCalibration
  7238  04A6  087A               	movf	Sensor_autoCalibration@sensor,w
  7239  04A7  3E05               	addlw	5
  7240  04A8  0086               	movwf	6
  7241  04A9  0187               	clrf	7
  7242  04AA  0875               	movf	??_Sensor_autoCalibration,w
  7243  04AB  0781               	addwf	1,f
  7244  04AC  300F               	movlw	15
  7245  04AD  0201               	subwf	1,w
  7246  04AE  1C03               	skipc
  7247  04AF  0008               	return
  7248                           
  7249                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  7250  04B0  087A               	movf	Sensor_autoCalibration@sensor,w
  7251  04B1  318C  241D         	fcall	_Sensor_setCalibratAcqTime
  7252  04B3  0008               	return
  7253  04B4                     l2833:	
  7254                           
  7255                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 708:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 709:              Sensor_setCalibratAcqTime(sensor);
  7256  04B4  087A               	movf	Sensor_autoCalibration@sensor,w
  7257  04B5  318C  241D         	fcall	_Sensor_setCalibratAcqTime
  7258  04B7  0008               	return
  7259  04B8                     l2835:	
  7260                           
  7261                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 713:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 714:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  7262  04B8  087A               	movf	Sensor_autoCalibration@sensor,w
  7263  04B9  3E04               	addlw	4
  7264  04BA  0086               	movwf	6
  7265  04BB  0187               	clrf	7
  7266  04BC  0801               	movf	1,w
  7267  04BD  00F5               	movwf	??_Sensor_autoCalibration
  7268  04BE  01F6               	clrf	??_Sensor_autoCalibration+1
  7269  04BF  35F5               	lslf	??_Sensor_autoCalibration,f
  7270  04C0  0DF6               	rlf	??_Sensor_autoCalibration+1,f
  7271  04C1  087A               	movf	Sensor_autoCalibration@sensor,w
  7272  04C2  3E06               	addlw	6
  7273  04C3  0086               	movwf	6
  7274  04C4  0187               	clrf	7
  7275  04C5  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  7276  04C6  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  7277  04C7  0084               	movwf	4
  7278  04C8  0185               	clrf	5
  7279  04C9  3F40               	moviw [0]fsr1
  7280  04CA  0200               	subwf	0,w
  7281  04CB  00F1               	movwf	abs@a
  7282  04CC  3101               	addfsr 0,1
  7283  04CD  3F41               	moviw [1]fsr1
  7284  04CE  3B00               	subwfb	0,w
  7285  04CF  00F2               	movwf	abs@a+1
  7286  04D0  318D  257A  3184   	fcall	_abs
  7287  04D3  0876               	movf	??_Sensor_autoCalibration+1,w
  7288  04D4  0272               	subwf	?_abs+1,w
  7289  04D5  1D03               	skipz
  7290  04D6  2CD9               	goto	u1905
  7291  04D7  0875               	movf	??_Sensor_autoCalibration,w
  7292  04D8  0271               	subwf	?_abs,w
  7293  04D9                     u1905:	
  7294  04D9  1803               	skipnc
  7295  04DA  2CE7               	goto	l2841
  7296                           
  7297                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 715:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  7298  04DB  3020               	movlw	32
  7299  04DC  00F5               	movwf	??_Sensor_autoCalibration
  7300  04DD  087A               	movf	Sensor_autoCalibration@sensor,w
  7301  04DE  3E02               	addlw	2
  7302  04DF  0086               	movwf	6
  7303  04E0  0187               	clrf	7
  7304  04E1  0875               	movf	??_Sensor_autoCalibration,w
  7305  04E2  0081               	movwf	1
  7306                           
  7307                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             Sensor_setCalibrated(senso
      +                          r);
  7308  04E3  087A               	movf	Sensor_autoCalibration@sensor,w
  7309  04E4  318C  2405         	fcall	_Sensor_setCalibrated
  7310                           
  7311                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:         }
  7312  04E6  0008               	return
  7313  04E7                     l2841:	
  7314                           
  7315                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 724:             sensor->acquisition_time += (uint8_t)2;
  7316  04E7  3002               	movlw	2
  7317  04E8  00F5               	movwf	??_Sensor_autoCalibration
  7318  04E9  087A               	movf	Sensor_autoCalibration@sensor,w
  7319  04EA  3E03               	addlw	3
  7320  04EB  0086               	movwf	6
  7321  04EC  0187               	clrf	7
  7322  04ED  0875               	movf	??_Sensor_autoCalibration,w
  7323  04EE  0781               	addwf	1,f
  7324                           
  7325                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 725:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  7326  04EF  087A               	movf	Sensor_autoCalibration@sensor,w
  7327  04F0  3E03               	addlw	3
  7328  04F1  0086               	movwf	6
  7329  04F2  0187               	clrf	7
  7330  04F3  3020               	movlw	32
  7331  04F4  0201               	subwf	1,w
  7332  04F5  1C03               	skipc
  7333  04F6  0008               	return
  7334                           
  7335                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 726:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 727:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  7336  04F7  3020               	movlw	32
  7337  04F8  00F5               	movwf	??_Sensor_autoCalibration
  7338  04F9  087A               	movf	Sensor_autoCalibration@sensor,w
  7339  04FA  3E02               	addlw	2
  7340  04FB  0086               	movwf	6
  7341  04FC  0187               	clrf	7
  7342  04FD  0875               	movf	??_Sensor_autoCalibration,w
  7343  04FE  0081               	movwf	1
  7344                           
  7345                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:                 Sensor_setCalibrated(s
      +                          ensor);
  7346  04FF  087A               	movf	Sensor_autoCalibration@sensor,w
  7347  0500  318C  2405         	fcall	_Sensor_setCalibrated
  7348  0502  0008               	return
  7349  0503                     __end_of_Sensor_autoCalibration:	
  7350                           
  7351                           	psect	text43
  7352  0D7A                     __ptext43:	
  7353 ;; *************** function _abs *****************
  7354 ;; Defined at:
  7355 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;  a               2    1[COMMON] int 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  2    1[COMMON] int 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7369 ;;      Params:         2       0       0       0       0       0       0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0       0
  7371 ;;      Temps:          2       0       0       0       0       0       0       0
  7372 ;;      Totals:         4       0       0       0       0       0       0       0
  7373 ;;Total ram usage:        4 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    4
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_Sensor_postAcquisitionProcess
  7380 ;;		_Sensor_Acq_ExecutePacket
  7381 ;;		_Sensor_autoCalibration
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           
  7386                           ;psect for function _abs
  7387  0D7A                     _abs:	
  7388                           
  7389                           ;incstack = 0
  7390                           ; Regs used in _abs: [wreg+status,2+status,0]
  7391  0D7A  0872               	movf	abs@a+1,w
  7392  0D7B  3A80               	xorlw	128
  7393  0D7C  00F3               	movwf	??_abs
  7394  0D7D  3080               	movlw	128
  7395  0D7E  0273               	subwf	??_abs,w
  7396  0D7F  1D03               	skipz
  7397  0D80  2D83               	goto	u1785
  7398  0D81  3001               	movlw	1
  7399  0D82  0271               	subwf	abs@a,w
  7400  0D83                     u1785:	
  7401  0D83  1803               	skipnc
  7402  0D84  0008               	return
  7403  0D85  0971               	comf	abs@a,w
  7404  0D86  00F3               	movwf	??_abs
  7405  0D87  0972               	comf	abs@a+1,w
  7406  0D88  00F4               	movwf	??_abs+1
  7407  0D89  0AF3               	incf	??_abs,f
  7408  0D8A  1903               	skipnz
  7409  0D8B  0AF4               	incf	??_abs+1,f
  7410  0D8C  0873               	movf	??_abs,w
  7411  0D8D  00F1               	movwf	?_abs
  7412  0D8E  0874               	movf	??_abs+1,w
  7413  0D8F  00F2               	movwf	?_abs+1
  7414  0D90  0008               	return
  7415  0D91                     __end_of_abs:	
  7416                           
  7417                           	psect	text44
  7418  0C05                     __ptext44:	
  7419 ;; *************** function _Sensor_setCalibrated *****************
  7420 ;; Defined at:
  7421 ;;		line 933 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  sensor          1    wreg     PTR struct .
  7424 ;;		 -> mtouch_sensor(36), 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  sensor          1    1[COMMON] PTR struct .
  7427 ;;		 -> mtouch_sensor(36), 
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      void 
  7430 ;; Registers used:
  7431 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7437 ;;      Params:         0       0       0       0       0       0       0       0
  7438 ;;      Locals:         1       0       0       0       0       0       0       0
  7439 ;;      Temps:          0       0       0       0       0       0       0       0
  7440 ;;      Totals:         1       0       0       0       0       0       0       0
  7441 ;;Total ram usage:        1 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    4
  7444 ;; This function calls:
  7445 ;;		Nothing
  7446 ;; This function is called by:
  7447 ;;		_Sensor_autoCalibration
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           
  7452                           ;psect for function _Sensor_setCalibrated
  7453  0C05                     _Sensor_setCalibrated:	
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  7457                           ;Sensor_setCalibrated@sensor stored from wreg
  7458  0C05  00F1               	movwf	Sensor_setCalibrated@sensor
  7459                           
  7460                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 933: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          934: {;mcc_generated_files/mtouch/mtouch_sensor.c: 935:     sensor->calibrated = 1;
  7461  0C06  0871               	movf	Sensor_setCalibrated@sensor,w
  7462  0C07  3E08               	addlw	8
  7463  0C08  0086               	movwf	6
  7464  0C09  0187               	clrf	7
  7465  0C0A  1501               	bsf	1,2
  7466                           
  7467                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 936:     sensor->acqTime_cal = 0;
  7468  0C0B  0871               	movf	Sensor_setCalibrated@sensor,w
  7469  0C0C  3E08               	addlw	8
  7470  0C0D  0086               	movwf	6
  7471  0C0E  0187               	clrf	7
  7472  0C0F  1201               	bcf	1,4
  7473  0C10  0008               	return
  7474  0C11                     __end_of_Sensor_setCalibrated:	
  7475                           
  7476                           	psect	text45
  7477  0C1D                     __ptext45:	
  7478 ;; *************** function _Sensor_setCalibratAcqTime *****************
  7479 ;; Defined at:
  7480 ;;		line 939 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  sensor          1    wreg     PTR struct .
  7483 ;;		 -> mtouch_sensor(36), 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  sensor          1    1[COMMON] PTR struct .
  7486 ;;		 -> mtouch_sensor(36), 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  1    wreg      void 
  7489 ;; Registers used:
  7490 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7496 ;;      Params:         0       0       0       0       0       0       0       0
  7497 ;;      Locals:         1       0       0       0       0       0       0       0
  7498 ;;      Temps:          0       0       0       0       0       0       0       0
  7499 ;;      Totals:         1       0       0       0       0       0       0       0
  7500 ;;Total ram usage:        1 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; Hardware stack levels required when called:    4
  7503 ;; This function calls:
  7504 ;;		Nothing
  7505 ;; This function is called by:
  7506 ;;		_Sensor_autoCalibration
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function _Sensor_setCalibratAcqTime
  7512  0C1D                     _Sensor_setCalibratAcqTime:	
  7513                           
  7514                           ;incstack = 0
  7515                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  7516                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  7517  0C1D  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
  7518                           
  7519                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 939: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 940: {;mcc_generated_files/mtouch/mtouch_sensor.c: 941:     sensor->acqTime_cal = 1
      +                          ;
  7520  0C1E  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  7521  0C1F  3E08               	addlw	8
  7522  0C20  0086               	movwf	6
  7523  0C21  0187               	clrf	7
  7524  0C22  1601               	bsf	1,4
  7525                           
  7526                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 942:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  7527  0C23  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  7528  0C24  3E03               	addlw	3
  7529  0C25  0086               	movwf	6
  7530  0C26  0187               	clrf	7
  7531  0C27  0181               	clrf	1
  7532  0C28  0A81               	incf	1,f
  7533  0C29  0008               	return
  7534  0C2A                     __end_of_Sensor_setCalibratAcqTime:	
  7535                           
  7536                           	psect	text46
  7537  0BEC                     __ptext46:	
  7538 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  7539 ;; Defined at:
  7540 ;;		line 945 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;  sensor          1    wreg     PTR struct .
  7543 ;;		 -> mtouch_sensor(36), 
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  sensor          1    1[COMMON] PTR struct .
  7546 ;;		 -> mtouch_sensor(36), 
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  1    wreg      _Bool 
  7549 ;; Registers used:
  7550 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7556 ;;      Params:         0       0       0       0       0       0       0       0
  7557 ;;      Locals:         1       0       0       0       0       0       0       0
  7558 ;;      Temps:          0       0       0       0       0       0       0       0
  7559 ;;      Totals:         1       0       0       0       0       0       0       0
  7560 ;;Total ram usage:        1 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; Hardware stack levels required when called:    4
  7563 ;; This function calls:
  7564 ;;		Nothing
  7565 ;; This function is called by:
  7566 ;;		_Sensor_loadADCSettings
  7567 ;;		_Sensor_autoCalibration
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           
  7572                           ;psect for function _Sensor_isCalibratingAcqTime
  7573  0BEC                     _Sensor_isCalibratingAcqTime:	
  7574                           
  7575                           ;incstack = 0
  7576                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  7577                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  7578  0BEC  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
  7579                           
  7580                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 945: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 946: {;mcc_generated_files/mtouch/mtouch_sensor.c: 947:     return (_Bool)sensor
      +                          ->acqTime_cal;
  7581  0BED  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
  7582  0BEE  3E08               	addlw	8
  7583  0BEF  0086               	movwf	6
  7584  0BF0  0187               	clrf	7
  7585  0BF1  0E01               	swapf	1,w
  7586  0BF2  3901               	andlw	1
  7587  0BF3  0008               	return
  7588  0BF4                     __end_of_Sensor_isCalibratingAcqTime:	
  7589                           
  7590                           	psect	text47
  7591  0E9B                     __ptext47:	
  7592 ;; *************** function _Sensor_getScanGroupIndex *****************
  7593 ;; Defined at:
  7594 ;;		line 362 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  sensor          1    wreg     PTR struct .
  7597 ;;		 -> mtouch_sensor(36), 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  sensor          1    3[COMMON] PTR struct .
  7600 ;;		 -> mtouch_sensor(36), 
  7601 ;;  sensorGroup     1    4[COMMON] unsigned char 
  7602 ;; Return value:  Size  Location     Type
  7603 ;;                  1    wreg      unsigned char 
  7604 ;; Registers used:
  7605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7606 ;; Tracked objects:
  7607 ;;		On entry : 0/0
  7608 ;;		On exit  : 0/0
  7609 ;;		Unchanged: 0/0
  7610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7611 ;;      Params:         0       0       0       0       0       0       0       0
  7612 ;;      Locals:         2       0       0       0       0       0       0       0
  7613 ;;      Temps:          2       0       0       0       0       0       0       0
  7614 ;;      Totals:         4       0       0       0       0       0       0       0
  7615 ;;Total ram usage:        4 bytes
  7616 ;; Hardware stack levels used:    1
  7617 ;; Hardware stack levels required when called:    4
  7618 ;; This function calls:
  7619 ;;		Nothing
  7620 ;; This function is called by:
  7621 ;;		_Sensor_postAcquisitionProcess
  7622 ;;		_Sensor_autoCalibration
  7623 ;;		_Sensor_RawSample_Update
  7624 ;; This function uses a non-reentrant model
  7625 ;;
  7626                           
  7627                           
  7628                           ;psect for function _Sensor_getScanGroupIndex
  7629  0E9B                     _Sensor_getScanGroupIndex:	
  7630                           
  7631                           ;incstack = 0
  7632                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  7633                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  7634  0E9B  00F3               	movwf	Sensor_getScanGroupIndex@sensor
  7635                           
  7636                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 363: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 364:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 365:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  7637  0E9C  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
  7638  0E9D                     l2717:	
  7639                           
  7640                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 366:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 367:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  7641  0E9D  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  7642  0E9E  00F1               	movwf	??_Sensor_getScanGroupIndex
  7643  0E9F  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  7644  0EA0  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  7645  0EA1  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  7646  0EA2  3005               	movlw	low (_sensor_scan_group| (0+32768))
  7647  0EA3  0771               	addwf	??_Sensor_getScanGroupIndex,w
  7648  0EA4  0084               	movwf	4
  7649  0EA5  3090               	movlw	high (_sensor_scan_group| (0+32768))
  7650  0EA6  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  7651  0EA7  0085               	movwf	5
  7652  0EA8  0800               	movf	0,w	;code access
  7653  0EA9  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  7654  0EAA  1D03               	skipz
  7655  0EAB  2EAE               	goto	l2723
  7656  0EAC                     l2719:	
  7657                           
  7658                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 368:             return 0;
  7659  0EAC  3000               	movlw	0
  7660  0EAD  0008               	return
  7661  0EAE                     l2723:	
  7662                           
  7663                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 369:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  7664  0EAE  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  7665  0EAF  00F1               	movwf	??_Sensor_getScanGroupIndex
  7666  0EB0  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  7667  0EB1  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  7668  0EB2  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  7669  0EB3  3006               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7670  0EB4  0771               	addwf	??_Sensor_getScanGroupIndex,w
  7671  0EB5  0084               	movwf	4
  7672  0EB6  3090               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7673  0EB7  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  7674  0EB8  0085               	movwf	5
  7675  0EB9  0800               	movf	0,w	;code access
  7676  0EBA  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  7677  0EBB  1D03               	skipz
  7678  0EBC  2EBF               	goto	l2729
  7679                           
  7680                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 370:             return 1;
  7681  0EBD  3001               	movlw	1
  7682  0EBE  0008               	return
  7683  0EBF                     l2729:	
  7684                           
  7685                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 371:     }
  7686  0EBF  3001               	movlw	1
  7687  0EC0  00F1               	movwf	??_Sensor_getScanGroupIndex
  7688  0EC1  0871               	movf	??_Sensor_getScanGroupIndex,w
  7689  0EC2  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  7690  0EC3  3002               	movlw	2
  7691  0EC4  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  7692  0EC5  1803               	btfsc	3,0
  7693  0EC6  2EAC               	goto	l2719
  7694  0EC7  2E9D               	goto	l2717
  7695  0EC8                     __end_of_Sensor_getScanGroupIndex:	
  7696                           
  7697                           	psect	text48
  7698  0C7E                     __ptext48:	
  7699 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  7700 ;; Defined at:
  7701 ;;		line 247 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;		None
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      void 
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7715 ;;      Params:         0       0       0       0       0       0       0       0
  7716 ;;      Locals:         0       0       0       0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0       0
  7718 ;;      Totals:         0       0       0       0       0       0       0       0
  7719 ;;Total ram usage:        0 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    4
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_MTOUCH_Initialize
  7726 ;;		_Sensor_Acq_ExecutePacket
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           
  7731                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  7732  0C7E                     _MTOUCH_Sensor_Scan_Initialize:	
  7733                           
  7734                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 249:     T2CONbits.T2CKPS = 0x0;
  7735                           
  7736                           ;incstack = 0
  7737                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  7738  0C7E  30FC               	movlw	-4
  7739  0C7F  0020               	movlb	0	; select bank0
  7740  0C80  059C               	andwf	28,f	;volatile
  7741                           
  7742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 251:     AD1CON0 = (uint8_t)0;
  7743  0C81  002E               	movlb	14	; select bank14
  7744  0C82  0191               	clrf	17	;volatile
  7745                           
  7746                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 252:     AD2CON0 = (uint8_t)0;
  7747  0C83  002F               	movlb	15	; select bank15
  7748  0C84  0191               	clrf	17	;volatile
  7749                           
  7750                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 253:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  7751  0C85  3090               	movlw	144
  7752  0C86  002E               	movlb	14	; select bank14
  7753  0C87  0092               	movwf	18	;volatile
  7754                           
  7755                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 254:     AD1CON3 = (uint8_t)0b01000000;
  7756  0C88  3040               	movlw	64
  7757  0C89  0094               	movwf	20	;volatile
  7758                           
  7759                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 255:     AD2CON3 = (uint8_t)0b01000000;
  7760  0C8A  3040               	movlw	64
  7761  0C8B  002F               	movlb	15	; select bank15
  7762  0C8C  0094               	movwf	20	;volatile
  7763  0C8D  0008               	return
  7764  0C8E                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  7765                           
  7766                           	psect	text49
  7767  0C6E                     __ptext49:	
  7768 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  7769 ;; Defined at:
  7770 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;		None
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  button          1   14[BANK0 ] enum E3070
  7775 ;; Return value:  Size  Location     Type
  7776 ;;                  1    wreg      void 
  7777 ;; Registers used:
  7778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7779 ;; Tracked objects:
  7780 ;;		On entry : 0/0
  7781 ;;		On exit  : 0/0
  7782 ;;		Unchanged: 0/0
  7783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7784 ;;      Params:         0       0       0       0       0       0       0       0
  7785 ;;      Locals:         0       1       0       0       0       0       0       0
  7786 ;;      Temps:          0       1       0       0       0       0       0       0
  7787 ;;      Totals:         0       2       0       0       0       0       0       0
  7788 ;;Total ram usage:        2 bytes
  7789 ;; Hardware stack levels used:    1
  7790 ;; Hardware stack levels required when called:    9
  7791 ;; This function calls:
  7792 ;;		_Button_Service
  7793 ;; This function is called by:
  7794 ;;		_MTOUCH_Service_Mainloop
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           
  7799                           ;psect for function _MTOUCH_Button_ServiceAll
  7800  0C6E                     _MTOUCH_Button_ServiceAll:	
  7801                           
  7802                           ;mcc_generated_files/mtouch/mtouch_button.c: 199:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 202:     for (button = 0; button < 4u; button
      +                          ++)
  7803                           
  7804                           ;incstack = 0
  7805                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7806  0C6E  0020               	movlb	0	; select bank0
  7807  0C6F  01AE               	clrf	MTOUCH_Button_ServiceAll@button
  7808  0C70                     l4391:	
  7809                           
  7810                           ;mcc_generated_files/mtouch/mtouch_button.c: 203:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 204:         Button_Service(button);
  7811  0C70  082E               	movf	MTOUCH_Button_ServiceAll@button,w
  7812  0C71  3187  2724  318C   	fcall	_Button_Service
  7813                           
  7814                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     }
  7815  0C74  3001               	movlw	1
  7816  0C75  0020               	movlb	0	; select bank0
  7817  0C76  00AD               	movwf	??_MTOUCH_Button_ServiceAll
  7818  0C77  082D               	movf	??_MTOUCH_Button_ServiceAll,w
  7819  0C78  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
  7820  0C79  3004               	movlw	4
  7821  0C7A  022E               	subwf	MTOUCH_Button_ServiceAll@button,w
  7822  0C7B  1803               	btfsc	3,0
  7823  0C7C  0008               	return
  7824  0C7D  2C70               	goto	l4391
  7825  0C7E                     __end_of_MTOUCH_Button_ServiceAll:	
  7826                           
  7827                           	psect	text50
  7828  0724                     __ptext50:	
  7829 ;; *************** function _Button_Service *****************
  7830 ;; Defined at:
  7831 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7832 ;; Parameters:    Size  Location     Type
  7833 ;;  name            1    wreg     enum E3070
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;  name            1   11[BANK0 ] enum E3070
  7836 ;;  button          1   12[BANK0 ] PTR struct .
  7837 ;;		 -> mtouch_button(64), 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      void 
  7840 ;; Registers used:
  7841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7847 ;;      Params:         0       0       0       0       0       0       0       0
  7848 ;;      Locals:         0       2       0       0       0       0       0       0
  7849 ;;      Temps:          0       2       0       0       0       0       0       0
  7850 ;;      Totals:         0       4       0       0       0       0       0       0
  7851 ;;Total ram usage:        4 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    8
  7854 ;; This function calls:
  7855 ;;		_Button_Deviation_Update
  7856 ;;		_Button_Reading_Update
  7857 ;;		_Button_State_Initializing
  7858 ;;		_Button_State_NotPressed
  7859 ;;		_Button_State_Pressed
  7860 ;;		_MTOUCH_Button_Initialize
  7861 ;;		_MTOUCH_Sensor_isCalibrated
  7862 ;;		_MTOUCH_Sensor_wasSampled
  7863 ;; This function is called by:
  7864 ;;		_MTOUCH_Button_ServiceAll
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           
  7869                           ;psect for function _Button_Service
  7870  0724                     _Button_Service:	
  7871                           
  7872                           ;incstack = 0
  7873                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7874                           ;Button_Service@name stored from wreg
  7875  0724  0020               	movlb	0	; select bank0
  7876  0725  00AB               	movwf	Button_Service@name
  7877                           
  7878                           ;mcc_generated_files/mtouch/mtouch_button.c: 208: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 209: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 210:     mtouch_button_t* button = &mtouch_button[name];
  7879  0726  082B               	movf	Button_Service@name,w
  7880  0727  00A9               	movwf	??_Button_Service
  7881  0728  3003               	movlw	3
  7882  0729                     u4215:	
  7883  0729  35A9               	lslf	??_Button_Service,f
  7884  072A  3EFF               	addlw	-1
  7885  072B  1D03               	skipz
  7886  072C  2F29               	goto	u4215
  7887  072D  3529               	lslf	??_Button_Service,w
  7888  072E  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7889  072F  00AA               	movwf	??_Button_Service+1
  7890  0730  082A               	movf	??_Button_Service+1,w
  7891  0731  00AC               	movwf	Button_Service@button
  7892                           
  7893                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  7894  0732  0A2C               	incf	Button_Service@button,w
  7895  0733  0086               	movwf	6
  7896  0734  3001               	movlw	1	; select bank2/3
  7897  0735  0087               	movwf	7
  7898  0736  0801               	movf	1,w
  7899  0737  318C  2452  3187   	fcall	_MTOUCH_Sensor_wasSampled
  7900  073A  3A00               	xorlw	0
  7901  073B  1903               	skipnz
  7902  073C  0008               	return
  7903  073D  0020               	movlb	0	; select bank0
  7904  073E  0A2C               	incf	Button_Service@button,w
  7905  073F  0086               	movwf	6
  7906  0740  3001               	movlw	1	; select bank2/3
  7907  0741  0087               	movwf	7
  7908  0742  0801               	movf	1,w
  7909  0743  318C  24F6  3187   	fcall	_MTOUCH_Sensor_isCalibrated
  7910  0746  3A00               	xorlw	0
  7911  0747  1903               	skipnz
  7912  0748  0008               	return
  7913                           
  7914                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 214:         Button_Reading_Update(button);
  7915  0749  0020               	movlb	0	; select bank0
  7916  074A  082C               	movf	Button_Service@button,w
  7917  074B  318C  2444  3187   	fcall	_Button_Reading_Update
  7918                           
  7919                           ;mcc_generated_files/mtouch/mtouch_button.c: 215:         Button_Deviation_Update(button
      +                          );
  7920  074E  0020               	movlb	0	; select bank0
  7921  074F  082C               	movf	Button_Service@button,w
  7922  0750  3185  2503  3187   	fcall	_Button_Deviation_Update
  7923                           
  7924                           ;mcc_generated_files/mtouch/mtouch_button.c: 217:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  7925  0753  0020               	movlb	0	; select bank0
  7926  0754  082C               	movf	Button_Service@button,w
  7927  0755  3E02               	addlw	2
  7928  0756  0086               	movwf	6
  7929  0757  3001               	movlw	1	; select bank2/3
  7930  0758  0087               	movwf	7
  7931  0759  3003               	movlw	3
  7932  075A  0201               	subwf	1,w
  7933  075B  1C03               	skipc
  7934  075C  2F65               	goto	l4355
  7935                           
  7936                           ;mcc_generated_files/mtouch/mtouch_button.c: 218:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 219:             MTOUCH_Button_Initialize(button->name);
  7937  075D  082C               	movf	Button_Service@button,w
  7938  075E  0086               	movwf	6
  7939  075F  3001               	movlw	1	; select bank2/3
  7940  0760  0087               	movwf	7
  7941  0761  0801               	movf	1,w
  7942  0762  318F  2758  3187   	fcall	_MTOUCH_Button_Initialize
  7943  0765                     l4355:	
  7944                           
  7945                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  7946  0765  0020               	movlb	0	; select bank0
  7947  0766  082C               	movf	Button_Service@button,w
  7948  0767  00A9               	movwf	??_Button_Service
  7949  0768  0829               	movf	??_Button_Service,w
  7950  0769  00A4               	movwf	Button_State_Pressed@button
  7951  076A  082C               	movf	Button_Service@button,w
  7952  076B  3E02               	addlw	2
  7953  076C  0086               	movwf	6
  7954  076D  3001               	movlw	1	; select bank2/3
  7955  076E  0087               	movwf	7
  7956  076F  3501               	lslf	1,w
  7957  0770  3E61               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  7958  0771  0086               	movwf	6
  7959  0772  0187               	clrf	7
  7960  0773  3F41               	moviw [1]fsr1
  7961  0774  008A               	movwf	10
  7962  0775  3F40               	moviw [0]fsr1
  7963  0776  000A               	callw
  7964  0777  3187               	pagesel	$
  7965  0778  0008               	return
  7966  0779                     __end_of_Button_Service:	
  7967                           
  7968                           	psect	text51
  7969  0C52                     __ptext51:	
  7970 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  7971 ;; Defined at:
  7972 ;;		line 967 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;  sensor          1    wreg     enum E2854
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  sensor          1    6[COMMON] enum E2854
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      _Bool 
  7979 ;; Registers used:
  7980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7986 ;;      Params:         0       0       0       0       0       0       0       0
  7987 ;;      Locals:         1       0       0       0       0       0       0       0
  7988 ;;      Temps:          1       0       0       0       0       0       0       0
  7989 ;;      Totals:         2       0       0       0       0       0       0       0
  7990 ;;Total ram usage:        2 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:    5
  7993 ;; This function calls:
  7994 ;;		___bmul
  7995 ;; This function is called by:
  7996 ;;		_Button_Service
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           
  8001                           ;psect for function _MTOUCH_Sensor_wasSampled
  8002  0C52                     _MTOUCH_Sensor_wasSampled:	
  8003                           
  8004                           ;incstack = 0
  8005                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  8006                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  8007  0C52  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
  8008                           
  8009                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 967: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 968: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 969:     return (_Bool)mtouch_sensor[sensor].sampled;
  8010  0C53  3009               	movlw	9
  8011  0C54  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
  8012  0C55  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
  8013  0C56  00F1               	movwf	___bmul@multiplicand
  8014  0C57  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  8015  0C58  318C  249E         	fcall	___bmul
  8016  0C5A  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8017  0C5B  0086               	movwf	6
  8018  0C5C  0187               	clrf	7
  8019  0C5D  0801               	movf	1,w
  8020  0C5E  3901               	andlw	1
  8021  0C5F  0008               	return
  8022  0C60                     __end_of_MTOUCH_Sensor_wasSampled:	
  8023                           
  8024                           	psect	text52
  8025  0CF6                     __ptext52:	
  8026 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  8027 ;; Defined at:
  8028 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  sensor          1    wreg     enum E2854
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  sensor          1    6[COMMON] enum E2854
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  1    wreg      _Bool 
  8035 ;; Registers used:
  8036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8042 ;;      Params:         0       0       0       0       0       0       0       0
  8043 ;;      Locals:         1       0       0       0       0       0       0       0
  8044 ;;      Temps:          1       0       0       0       0       0       0       0
  8045 ;;      Totals:         2       0       0       0       0       0       0       0
  8046 ;;Total ram usage:        2 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    5
  8049 ;; This function calls:
  8050 ;;		___bmul
  8051 ;; This function is called by:
  8052 ;;		_Button_Service
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           
  8057                           ;psect for function _MTOUCH_Sensor_isCalibrated
  8058  0CF6                     _MTOUCH_Sensor_isCalibrated:	
  8059                           
  8060                           ;incstack = 0
  8061                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8062                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  8063  0CF6  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  8064                           
  8065                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 921: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 922:     if(sensor < 4u)
  8066  0CF7  3004               	movlw	4
  8067  0CF8  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  8068  0CF9  1803               	skipnc
  8069  0CFA  2D09               	goto	l4205
  8070                           
  8071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 923:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  8072  0CFB  3009               	movlw	9
  8073  0CFC  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
  8074  0CFD  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
  8075  0CFE  00F1               	movwf	___bmul@multiplicand
  8076  0CFF  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  8077  0D00  318C  249E         	fcall	___bmul
  8078  0D02  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8079  0D03  0086               	movwf	6
  8080  0D04  0187               	clrf	7
  8081  0D05  0C01               	rrf	1,w
  8082  0D06  0C89               	rrf	9,f
  8083  0D07  3901               	andlw	1
  8084  0D08  0008               	return
  8085  0D09                     l4205:	
  8086                           
  8087                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925:         return 0;
  8088  0D09  3000               	movlw	0
  8089  0D0A  0008               	return
  8090  0D0B                     __end_of_MTOUCH_Sensor_isCalibrated:	
  8091                           
  8092                           	psect	text53
  8093  02B4                     __ptext53:	
  8094 ;; *************** function _Button_State_NotPressed *****************
  8095 ;; Defined at:
  8096 ;;		line 245 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;  button          1    4[BANK0 ] PTR struct .
  8099 ;;		 -> mtouch_button(64), 
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;		None
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  1    wreg      void 
  8104 ;; Registers used:
  8105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8111 ;;      Params:         0       1       0       0       0       0       0       0
  8112 ;;      Locals:         0       0       0       0       0       0       0       0
  8113 ;;      Temps:          0       2       0       0       0       0       0       0
  8114 ;;      Totals:         0       3       0       0       0       0       0       0
  8115 ;;Total ram usage:        3 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; Hardware stack levels required when called:    7
  8118 ;; This function calls:
  8119 ;;		_Button_Baseline_Update
  8120 ;;		_Button_DefaultCallback
  8121 ;;		_MTOUCH_Button_Initialize
  8122 ;;		_myButtonPressedCallback
  8123 ;; This function is called by:
  8124 ;;		_Button_Service
  8125 ;; This function uses a non-reentrant model
  8126 ;;
  8127                           
  8128                           
  8129                           ;psect for function _Button_State_NotPressed
  8130  02B4                     _Button_State_NotPressed:	
  8131                           
  8132                           ;mcc_generated_files/mtouch/mtouch_button.c: 245: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 246: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 248:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  8133                           
  8134                           ;incstack = 0
  8135                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8136  02B4  0020               	movlb	0	; select bank0
  8137  02B5  0824               	movf	Button_State_NotPressed@button,w
  8138  02B6  3E09               	addlw	9
  8139  02B7  0086               	movwf	6
  8140  02B8  3001               	movlw	1	; select bank2/3
  8141  02B9  0087               	movwf	7
  8142  02BA  0801               	movf	1,w
  8143  02BB  3A80               	xorlw	128
  8144  02BC  00A5               	movwf	??_Button_State_NotPressed
  8145  02BD  0824               	movf	Button_State_NotPressed@button,w
  8146  02BE  3E0E               	addlw	14
  8147  02BF  0086               	movwf	6
  8148  02C0  3001               	movlw	1	; select bank2/3
  8149  02C1  0087               	movwf	7
  8150  02C2  0301               	decf	1,w
  8151  02C3  3AFF               	xorlw	255
  8152  02C4  3A80               	xorlw	128
  8153  02C5  02A5               	subwf	??_Button_State_NotPressed,f
  8154  02C6  1803               	skipnc
  8155  02C7  2AF3               	goto	l4255
  8156                           
  8157                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 250:         (button->counter)++;
  8158  02C8  0824               	movf	Button_State_NotPressed@button,w
  8159  02C9  3E0A               	addlw	10
  8160  02CA  0086               	movwf	6
  8161  02CB  3001               	movlw	1	; select bank2/3
  8162  02CC  0087               	movwf	7
  8163  02CD  3001               	movlw	1
  8164  02CE  0781               	addwf	1,f
  8165  02CF  3141               	addfsr 1,1
  8166  02D0  1803               	skipnc
  8167  02D1  0A81               	incf	1,f
  8168                           
  8169                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  8170  02D2  0824               	movf	Button_State_NotPressed@button,w
  8171  02D3  3E0A               	addlw	10
  8172  02D4  0086               	movwf	6
  8173  02D5  3001               	movlw	1	; select bank2/3
  8174  02D6  0087               	movwf	7
  8175  02D7  3F40               	moviw [0]fsr1
  8176  02D8  00A5               	movwf	??_Button_State_NotPressed
  8177  02D9  3F41               	moviw [1]fsr1
  8178  02DA  00A6               	movwf	??_Button_State_NotPressed+1
  8179  02DB  3000               	movlw	0
  8180  02DC  0226               	subwf	??_Button_State_NotPressed+1,w
  8181  02DD  3041               	movlw	65
  8182  02DE  1903               	skipnz
  8183  02DF  0225               	subwf	??_Button_State_NotPressed,w
  8184  02E0  1C03               	skipc
  8185  02E1  2B34               	goto	l820
  8186                           
  8187                           ;mcc_generated_files/mtouch/mtouch_button.c: 252:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 253:             button->counter = (mtouch_button_statecounter_t)0;
  8188  02E2  0824               	movf	Button_State_NotPressed@button,w
  8189  02E3  3E0A               	addlw	10
  8190  02E4  0086               	movwf	6
  8191  02E5  3001               	movlw	1	; select bank2/3
  8192  02E6  0087               	movwf	7
  8193  02E7  3000               	movlw	0
  8194  02E8  3FC0               	movwi [0]fsr1
  8195  02E9  3FC1               	movwi [1]fsr1
  8196                           
  8197                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  8198  02EA  0824               	movf	Button_State_NotPressed@button,w
  8199  02EB  0086               	movwf	6
  8200  02EC  3001               	movlw	1	; select bank2/3
  8201  02ED  0087               	movwf	7
  8202  02EE  0801               	movf	1,w
  8203  02EF  318F  2758  3182   	fcall	_MTOUCH_Button_Initialize
  8204  02F2  2B34               	goto	l820
  8205  02F3                     l4255:	
  8206  02F3  0824               	movf	Button_State_NotPressed@button,w
  8207  02F4  3E09               	addlw	9
  8208  02F5  0086               	movwf	6
  8209  02F6  3001               	movlw	1	; select bank2/3
  8210  02F7  0087               	movwf	7
  8211  02F8  0801               	movf	1,w
  8212  02F9  00A5               	movwf	??_Button_State_NotPressed
  8213  02FA  01A6               	clrf	??_Button_State_NotPressed+1
  8214  02FB  1BA5               	btfsc	??_Button_State_NotPressed,7
  8215  02FC  03A6               	decf	??_Button_State_NotPressed+1,f
  8216  02FD  0824               	movf	Button_State_NotPressed@button,w
  8217  02FE  3E0E               	addlw	14
  8218  02FF  0086               	movwf	6
  8219  0300  3001               	movlw	1	; select bank2/3
  8220  0301  0087               	movwf	7
  8221  0302  0826               	movf	??_Button_State_NotPressed+1,w
  8222  0303  3A80               	xorlw	128
  8223  0304  3C80               	sublw	128
  8224  0305  1D03               	skipz
  8225  0306  2B09               	goto	u4115
  8226  0307  0825               	movf	??_Button_State_NotPressed,w
  8227  0308  0201               	subwf	1,w
  8228  0309                     u4115:	
  8229  0309  1803               	skipnc
  8230  030A  2B2B               	goto	l4261
  8231                           
  8232                           ;mcc_generated_files/mtouch/mtouch_button.c: 259:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 261:         button->state = MTOUCH_BUTTON_STATE_pressed;
  8233  030B  3002               	movlw	2
  8234  030C  0020               	movlb	0	; select bank0
  8235  030D  00A5               	movwf	??_Button_State_NotPressed
  8236  030E  0824               	movf	Button_State_NotPressed@button,w
  8237  030F  3E02               	addlw	2
  8238  0310  0086               	movwf	6
  8239  0311  3001               	movlw	1	; select bank2/3
  8240  0312  0087               	movwf	7
  8241  0313  0825               	movf	??_Button_State_NotPressed,w
  8242  0314  0081               	movwf	1
  8243                           
  8244                           ;mcc_generated_files/mtouch/mtouch_button.c: 262:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8245  0315  0824               	movf	Button_State_NotPressed@button,w
  8246  0316  3E0A               	addlw	10
  8247  0317  0086               	movwf	6
  8248  0318  3001               	movlw	1	; select bank2/3
  8249  0319  0087               	movwf	7
  8250  031A  3000               	movlw	0
  8251  031B  3FC0               	movwi [0]fsr1
  8252  031C  3FC1               	movwi [1]fsr1
  8253                           
  8254                           ;mcc_generated_files/mtouch/mtouch_button.c: 263:         callback_pressed(button->name)
      +                          ;
  8255  031D  0824               	movf	Button_State_NotPressed@button,w
  8256  031E  0086               	movwf	6
  8257  031F  3001               	movlw	1	; select bank2/3
  8258  0320  0087               	movwf	7
  8259  0321  0801               	movf	1,w
  8260  0322  00A5               	movwf	??_Button_State_NotPressed
  8261  0323  0825               	movf	??_Button_State_NotPressed,w
  8262  0324  00F1               	movwf	Button_DefaultCallback@button
  8263  0325  086A               	movf	_callback_pressed+1,w
  8264  0326  008A               	movwf	10
  8265  0327  0869               	movf	_callback_pressed,w
  8266  0328  000A               	callw
  8267  0329  3182               	pagesel	$
  8268                           
  8269                           ;mcc_generated_files/mtouch/mtouch_button.c: 264:     }
  8270  032A  2B34               	goto	l820
  8271  032B                     l4261:	
  8272                           
  8273                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->counter = (mtouch_button_statecounter_t)0;
  8274  032B  0020               	movlb	0	; select bank0
  8275  032C  0824               	movf	Button_State_NotPressed@button,w
  8276  032D  3E0A               	addlw	10
  8277  032E  0086               	movwf	6
  8278  032F  3001               	movlw	1	; select bank2/3
  8279  0330  0087               	movwf	7
  8280  0331  3000               	movlw	0
  8281  0332  3FC0               	movwi [0]fsr1
  8282  0333  3FC1               	movwi [1]fsr1
  8283  0334                     l820:	
  8284                           
  8285                           ;mcc_generated_files/mtouch/mtouch_button.c: 273:     (button->baseline_count)++;
  8286  0334  0020               	movlb	0	; select bank0
  8287  0335  0824               	movf	Button_State_NotPressed@button,w
  8288  0336  3E0C               	addlw	12
  8289  0337  0086               	movwf	6
  8290  0338  3001               	movlw	1	; select bank2/3
  8291  0339  0087               	movwf	7
  8292  033A  3001               	movlw	1
  8293  033B  0781               	addwf	1,f
  8294  033C  3141               	addfsr 1,1
  8295  033D  1803               	skipnc
  8296  033E  0A81               	incf	1,f
  8297                           
  8298                           ;mcc_generated_files/mtouch/mtouch_button.c: 274:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
  8299  033F  0824               	movf	Button_State_NotPressed@button,w
  8300  0340  3E0C               	addlw	12
  8301  0341  0086               	movwf	6
  8302  0342  3001               	movlw	1	; select bank2/3
  8303  0343  0087               	movwf	7
  8304  0344  0016               	moviw fsr1++
  8305  0345  3A40               	xorlw	64
  8306  0346  00A5               	movwf	??_Button_State_NotPressed
  8307  0347  0016               	moviw fsr1++
  8308  0348  04A5               	iorwf	??_Button_State_NotPressed,f
  8309  0349  1D03               	btfss	3,2
  8310  034A  0008               	return
  8311                           
  8312                           ;mcc_generated_files/mtouch/mtouch_button.c: 275:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 276:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  8313  034B  0824               	movf	Button_State_NotPressed@button,w
  8314  034C  3E0C               	addlw	12
  8315  034D  0086               	movwf	6
  8316  034E  3001               	movlw	1	; select bank2/3
  8317  034F  0087               	movwf	7
  8318  0350  3000               	movlw	0
  8319  0351  3FC0               	movwi [0]fsr1
  8320  0352  3FC1               	movwi [1]fsr1
  8321                           
  8322                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:         Button_Baseline_Update(button)
      +                          ;
  8323  0353  0824               	movf	Button_State_NotPressed@button,w
  8324  0354  3183  23EA         	fcall	_Button_Baseline_Update
  8325  0356  0008               	return
  8326  0357                     __end_of_Button_State_NotPressed:	
  8327                           
  8328                           	psect	text54
  8329  0666                     __ptext54:	
  8330 ;; *************** function _Button_State_Initializing *****************
  8331 ;; Defined at:
  8332 ;;		line 225 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  button          1    4[BANK0 ] PTR struct .
  8335 ;;		 -> mtouch_button(64), 
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  1    wreg      void 
  8340 ;; Registers used:
  8341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8347 ;;      Params:         0       1       0       0       0       0       0       0
  8348 ;;      Locals:         0       0       0       0       0       0       0       0
  8349 ;;      Temps:          0       4       0       0       0       0       0       0
  8350 ;;      Totals:         0       5       0       0       0       0       0       0
  8351 ;;Total ram usage:        5 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    7
  8354 ;; This function calls:
  8355 ;;		_Button_Baseline_Initialize
  8356 ;;		_Button_Baseline_Update
  8357 ;; This function is called by:
  8358 ;;		_Button_Service
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _Button_State_Initializing
  8364  0666                     _Button_State_Initializing:	
  8365                           
  8366                           ;mcc_generated_files/mtouch/mtouch_button.c: 225: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 226: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 228:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8370  0666  0020               	movlb	0	; select bank0
  8371  0667  0824               	movf	Button_State_Initializing@button,w
  8372  0668  3E0A               	addlw	10
  8373  0669  0086               	movwf	6
  8374  066A  3001               	movlw	1	; select bank2/3
  8375  066B  0087               	movwf	7
  8376  066C  3F40               	moviw [0]fsr1
  8377  066D  00A5               	movwf	??_Button_State_Initializing
  8378  066E  3F41               	moviw [1]fsr1
  8379  066F  00A6               	movwf	??_Button_State_Initializing+1
  8380  0670  3000               	movlw	0
  8381  0671  0226               	subwf	??_Button_State_Initializing+1,w
  8382  0672  3009               	movlw	9
  8383  0673  1903               	skipnz
  8384  0674  0225               	subwf	??_Button_State_Initializing,w
  8385  0675  1803               	skipnc
  8386  0676  2E7C               	goto	l4239
  8387                           
  8388                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 230:         Button_Baseline_Initialize(button);
  8389  0677  0824               	movf	Button_State_Initializing@button,w
  8390  0678  318E  26C8  3186   	fcall	_Button_Baseline_Initialize
  8391                           
  8392                           ;mcc_generated_files/mtouch/mtouch_button.c: 231:     } else {
  8393  067B  2E80               	goto	l4241
  8394  067C                     l4239:	
  8395                           
  8396                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         Button_Baseline_Update(button)
      +                          ;
  8397  067C  0824               	movf	Button_State_Initializing@button,w
  8398  067D  3183  23EA  3186   	fcall	_Button_Baseline_Update
  8399  0680                     l4241:	
  8400                           
  8401                           ;mcc_generated_files/mtouch/mtouch_button.c: 236:     (button->counter)++;
  8402  0680  0020               	movlb	0	; select bank0
  8403  0681  0824               	movf	Button_State_Initializing@button,w
  8404  0682  3E0A               	addlw	10
  8405  0683  0086               	movwf	6
  8406  0684  3001               	movlw	1	; select bank2/3
  8407  0685  0087               	movwf	7
  8408  0686  3001               	movlw	1
  8409  0687  0781               	addwf	1,f
  8410  0688  3141               	addfsr 1,1
  8411  0689  1803               	skipnc
  8412  068A  0A81               	incf	1,f
  8413                           
  8414                           ;mcc_generated_files/mtouch/mtouch_button.c: 237:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  8415  068B  0824               	movf	Button_State_Initializing@button,w
  8416  068C  3E0A               	addlw	10
  8417  068D  0086               	movwf	6
  8418  068E  3001               	movlw	1	; select bank2/3
  8419  068F  0087               	movwf	7
  8420  0690  3F40               	moviw [0]fsr1
  8421  0691  00A5               	movwf	??_Button_State_Initializing
  8422  0692  3F41               	moviw [1]fsr1
  8423  0693  00A6               	movwf	??_Button_State_Initializing+1
  8424  0694  3000               	movlw	0
  8425  0695  0226               	subwf	??_Button_State_Initializing+1,w
  8426  0696  3010               	movlw	16
  8427  0697  1903               	skipnz
  8428  0698  0225               	subwf	??_Button_State_Initializing,w
  8429  0699  1C03               	skipc
  8430  069A  0008               	return
  8431                           
  8432                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 239:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
  8433  069B  0824               	movf	Button_State_Initializing@button,w
  8434  069C  3E05               	addlw	5
  8435  069D  0086               	movwf	6
  8436  069E  3001               	movlw	1	; select bank2/3
  8437  069F  0087               	movwf	7
  8438  06A0  3F40               	moviw [0]fsr1
  8439  06A1  00A5               	movwf	??_Button_State_Initializing
  8440  06A2  3F41               	moviw [1]fsr1
  8441  06A3  00A6               	movwf	??_Button_State_Initializing+1
  8442  06A4  3F42               	moviw [2]fsr1
  8443  06A5  00A7               	movwf	??_Button_State_Initializing+2
  8444  06A6  3F43               	moviw [3]fsr1
  8445  06A7  00A8               	movwf	??_Button_State_Initializing+3
  8446  06A8  3004               	movlw	4
  8447  06A9                     u4085:	
  8448  06A9  36A8               	lsrf	??_Button_State_Initializing+3,f
  8449  06AA  0CA7               	rrf	??_Button_State_Initializing+2,f
  8450  06AB  0CA6               	rrf	??_Button_State_Initializing+1,f
  8451  06AC  0CA5               	rrf	??_Button_State_Initializing,f
  8452  06AD  0B89               	decfsz	9,f
  8453  06AE  2EA9               	goto	u4085
  8454  06AF  0824               	movf	Button_State_Initializing@button,w
  8455  06B0  3E03               	addlw	3
  8456  06B1  0086               	movwf	6
  8457  06B2  3001               	movlw	1	; select bank2/3
  8458  06B3  0087               	movwf	7
  8459  06B4  0825               	movf	??_Button_State_Initializing,w
  8460  06B5  3FC0               	movwi [0]fsr1
  8461  06B6  0826               	movf	??_Button_State_Initializing+1,w
  8462  06B7  3FC1               	movwi [1]fsr1
  8463                           
  8464                           ;mcc_generated_files/mtouch/mtouch_button.c: 240:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
  8465  06B8  0824               	movf	Button_State_Initializing@button,w
  8466  06B9  3E02               	addlw	2
  8467  06BA  0086               	movwf	6
  8468  06BB  3001               	movlw	1	; select bank2/3
  8469  06BC  0087               	movwf	7
  8470  06BD  0181               	clrf	1
  8471  06BE  0A81               	incf	1,f
  8472                           
  8473                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8474  06BF  0824               	movf	Button_State_Initializing@button,w
  8475  06C0  3E0A               	addlw	10
  8476  06C1  0086               	movwf	6
  8477  06C2  3001               	movlw	1	; select bank2/3
  8478  06C3  0087               	movwf	7
  8479  06C4  3000               	movlw	0
  8480  06C5  3FC0               	movwi [0]fsr1
  8481  06C6  3FC1               	movwi [1]fsr1
  8482  06C7  0008               	return
  8483  06C8                     __end_of_Button_State_Initializing:	
  8484                           
  8485                           	psect	text55
  8486  0600                     __ptext55:	
  8487 ;; *************** function _Button_State_Pressed *****************
  8488 ;; Defined at:
  8489 ;;		line 281 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  button          1    4[BANK0 ] PTR struct .
  8492 ;;		 -> mtouch_button(64), 
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;		None
  8495 ;; Return value:  Size  Location     Type
  8496 ;;                  1    wreg      void 
  8497 ;; Registers used:
  8498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8499 ;; Tracked objects:
  8500 ;;		On entry : 0/0
  8501 ;;		On exit  : 0/0
  8502 ;;		Unchanged: 0/0
  8503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8504 ;;      Params:         0       1       0       0       0       0       0       0
  8505 ;;      Locals:         0       0       0       0       0       0       0       0
  8506 ;;      Temps:          0       2       0       0       0       0       0       0
  8507 ;;      Totals:         0       3       0       0       0       0       0       0
  8508 ;;Total ram usage:        3 bytes
  8509 ;; Hardware stack levels used:    1
  8510 ;; Hardware stack levels required when called:    7
  8511 ;; This function calls:
  8512 ;;		_Button_DefaultCallback
  8513 ;;		_MTOUCH_Button_Initialize
  8514 ;;		_myButtonReleasedCallback
  8515 ;; This function is called by:
  8516 ;;		_Button_Service
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           
  8521                           ;psect for function _Button_State_Pressed
  8522  0600                     _Button_State_Pressed:	
  8523                           
  8524                           ;mcc_generated_files/mtouch/mtouch_button.c: 281: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 282: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 284:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
  8525                           
  8526                           ;incstack = 0
  8527                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8528  0600  0020               	movlb	0	; select bank0
  8529  0601  0824               	movf	Button_State_Pressed@button,w
  8530  0602  3E0A               	addlw	10
  8531  0603  0086               	movwf	6
  8532  0604  3001               	movlw	1	; select bank2/3
  8533  0605  0087               	movwf	7
  8534  0606  3F40               	moviw [0]fsr1
  8535  0607  00A5               	movwf	??_Button_State_Pressed
  8536  0608  3F41               	moviw [1]fsr1
  8537  0609  00A6               	movwf	??_Button_State_Pressed+1
  8538  060A  3007               	movlw	7
  8539  060B  0226               	subwf	??_Button_State_Pressed+1,w
  8540  060C  30D0               	movlw	208
  8541  060D  1903               	skipnz
  8542  060E  0225               	subwf	??_Button_State_Pressed,w
  8543  060F  1C03               	skipc
  8544  0610  2E28               	goto	l4271
  8545                           
  8546                           ;mcc_generated_files/mtouch/mtouch_button.c: 285:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 286:         MTOUCH_Button_Initialize(button->name);
  8547  0611  0824               	movf	Button_State_Pressed@button,w
  8548  0612  0086               	movwf	6
  8549  0613  3001               	movlw	1	; select bank2/3
  8550  0614  0087               	movwf	7
  8551  0615  0801               	movf	1,w
  8552  0616  318F  2758  3186   	fcall	_MTOUCH_Button_Initialize
  8553                           
  8554                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         callback_notPressed(button->na
      +                          me);
  8555  0619  0020               	movlb	0	; select bank0
  8556  061A  0824               	movf	Button_State_Pressed@button,w
  8557  061B  0086               	movwf	6
  8558  061C  3001               	movlw	1	; select bank2/3
  8559  061D  0087               	movwf	7
  8560  061E  0801               	movf	1,w
  8561  061F  00A5               	movwf	??_Button_State_Pressed
  8562  0620  0825               	movf	??_Button_State_Pressed,w
  8563  0621  00F1               	movwf	Button_DefaultCallback@button
  8564  0622  0868               	movf	_callback_notPressed+1,w
  8565  0623  008A               	movwf	10
  8566  0624  0867               	movf	_callback_notPressed,w
  8567  0625  000A               	callw
  8568  0626  3186               	pagesel	$
  8569                           
  8570                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:     }
  8571  0627  0008               	return
  8572  0628                     l4271:	
  8573  0628  0824               	movf	Button_State_Pressed@button,w
  8574  0629  3E09               	addlw	9
  8575  062A  0086               	movwf	6
  8576  062B  3001               	movlw	1	; select bank2/3
  8577  062C  0087               	movwf	7
  8578  062D  0801               	movf	1,w
  8579  062E  3A80               	xorlw	128
  8580  062F  00A5               	movwf	??_Button_State_Pressed
  8581  0630  0824               	movf	Button_State_Pressed@button,w
  8582  0631  3E0E               	addlw	14
  8583  0632  0086               	movwf	6
  8584  0633  3001               	movlw	1	; select bank2/3
  8585  0634  0087               	movwf	7
  8586  0635  0824               	movf	Button_State_Pressed@button,w
  8587  0636  3E0E               	addlw	14
  8588  0637  0084               	movwf	4
  8589  0638  3001               	movlw	1	; select bank2/3
  8590  0639  0085               	movwf	5
  8591  063A  3600               	lsrf	0,w
  8592  063B  0201               	subwf	1,w
  8593  063C  3A80               	xorlw	128
  8594  063D  02A5               	subwf	??_Button_State_Pressed,f
  8595  063E  1803               	skipnc
  8596  063F  0008               	return
  8597                           
  8598                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 293:         button->state = MTOUCH_BUTTON_STATE_notPressed;
  8599  0640  0824               	movf	Button_State_Pressed@button,w
  8600  0641  3E02               	addlw	2
  8601  0642  0086               	movwf	6
  8602  0643  3001               	movlw	1	; select bank2/3
  8603  0644  0087               	movwf	7
  8604  0645  0181               	clrf	1
  8605  0646  0A81               	incf	1,f
  8606                           
  8607                           ;mcc_generated_files/mtouch/mtouch_button.c: 294:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8608  0647  0824               	movf	Button_State_Pressed@button,w
  8609  0648  3E0A               	addlw	10
  8610  0649  0086               	movwf	6
  8611  064A  3001               	movlw	1	; select bank2/3
  8612  064B  0087               	movwf	7
  8613  064C  3000               	movlw	0
  8614  064D  3FC0               	movwi [0]fsr1
  8615  064E  3FC1               	movwi [1]fsr1
  8616                           
  8617                           ;mcc_generated_files/mtouch/mtouch_button.c: 295:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
  8618  064F  0824               	movf	Button_State_Pressed@button,w
  8619  0650  3E0C               	addlw	12
  8620  0651  0086               	movwf	6
  8621  0652  3001               	movlw	1	; select bank2/3
  8622  0653  0087               	movwf	7
  8623  0654  30FF               	movlw	255
  8624  0655  3FC0               	movwi [0]fsr1
  8625  0656  30FB               	movlw	251
  8626  0657  3FC1               	movwi [1]fsr1
  8627                           
  8628                           ;mcc_generated_files/mtouch/mtouch_button.c: 296:         callback_notPressed(button->na
      +                          me);
  8629  0658  0824               	movf	Button_State_Pressed@button,w
  8630  0659  0086               	movwf	6
  8631  065A  3001               	movlw	1	; select bank2/3
  8632  065B  0087               	movwf	7
  8633  065C  0801               	movf	1,w
  8634  065D  00A5               	movwf	??_Button_State_Pressed
  8635  065E  0825               	movf	??_Button_State_Pressed,w
  8636  065F  00F1               	movwf	Button_DefaultCallback@button
  8637  0660  0868               	movf	_callback_notPressed+1,w
  8638  0661  008A               	movwf	10
  8639  0662  0867               	movf	_callback_notPressed,w
  8640  0663  000A               	callw
  8641  0664  3186               	pagesel	$
  8642  0665  0008               	return
  8643  0666                     __end_of_Button_State_Pressed:	
  8644                           
  8645                           	psect	text56
  8646  0FC5                     __ptext56:	
  8647 ;; *************** function _myButtonPressedCallback *****************
  8648 ;; Defined at:
  8649 ;;		line 29 in file "main.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;  button          1    1[COMMON] enum E2914
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;		None
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  1    wreg      void 
  8656 ;; Registers used:
  8657 ;;		wreg, status,2, status,0
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8663 ;;      Params:         1       0       0       0       0       0       0       0
  8664 ;;      Locals:         0       0       0       0       0       0       0       0
  8665 ;;      Temps:          0       0       0       0       0       0       0       0
  8666 ;;      Totals:         1       0       0       0       0       0       0       0
  8667 ;;Total ram usage:        1 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    4
  8670 ;; This function calls:
  8671 ;;		Nothing
  8672 ;; This function is called by:
  8673 ;;		_main
  8674 ;;		_Button_State_NotPressed
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           
  8678                           
  8679                           ;psect for function _myButtonPressedCallback
  8680  0FC5                     _myButtonPressedCallback:	
  8681                           
  8682                           ;main.c: 29: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 30: {
      +                          ;main.c: 31:     if(button == 0)
  8683                           
  8684                           ;incstack = 0
  8685                           ; Regs used in _myButtonPressedCallback: [wreg+status,2+status,0]
  8686  0FC5  0871               	movf	myButtonPressedCallback@button,w
  8687  0FC6  1D03               	btfss	3,2
  8688  0FC7  2FD3               	goto	l3087
  8689  0FC8  1003               	clrc
  8690  0FC9  0022               	movlb	2	; select bank2
  8691  0FCA  1D8E               	btfss	14,3	;volatile
  8692  0FCB  1403               	setc
  8693  0FCC  1C03               	btfss	3,0
  8694  0FCD  2FD1               	goto	u2320
  8695  0FCE  0022               	movlb	2	; select bank2
  8696  0FCF  158E               	bsf	14,3	;volatile
  8697  0FD0  2FD3               	goto	l3087
  8698  0FD1                     u2320:	
  8699  0FD1  0022               	movlb	2	; select bank2
  8700  0FD2  118E               	bcf	14,3	;volatile
  8701  0FD3                     l3087:	
  8702                           
  8703                           ;main.c: 35:     if(button == 1)
  8704  0FD3  0371               	decf	myButtonPressedCallback@button,w
  8705  0FD4  1D03               	btfss	3,2
  8706  0FD5  2FE1               	goto	l3091
  8707  0FD6  1003               	clrc
  8708  0FD7  0022               	movlb	2	; select bank2
  8709  0FD8  1C8C               	btfss	12,1	;volatile
  8710  0FD9  1403               	setc
  8711  0FDA  1C03               	btfss	3,0
  8712  0FDB  2FDF               	goto	u2350
  8713  0FDC  0022               	movlb	2	; select bank2
  8714  0FDD  148C               	bsf	12,1	;volatile
  8715  0FDE  2FE1               	goto	l3091
  8716  0FDF                     u2350:	
  8717  0FDF  0022               	movlb	2	; select bank2
  8718  0FE0  108C               	bcf	12,1	;volatile
  8719  0FE1                     l3091:	
  8720                           
  8721                           ;main.c: 39:     if(button == 2)
  8722  0FE1  3002               	movlw	2
  8723  0FE2  0671               	xorwf	myButtonPressedCallback@button,w
  8724  0FE3  1D03               	btfss	3,2
  8725  0FE4  2FF0               	goto	l3095
  8726  0FE5  1003               	clrc
  8727  0FE6  0022               	movlb	2	; select bank2
  8728  0FE7  1F8E               	btfss	14,7	;volatile
  8729  0FE8  1403               	setc
  8730  0FE9  1C03               	btfss	3,0
  8731  0FEA  2FEE               	goto	u2380
  8732  0FEB  0022               	movlb	2	; select bank2
  8733  0FEC  178E               	bsf	14,7	;volatile
  8734  0FED  2FF0               	goto	l3095
  8735  0FEE                     u2380:	
  8736  0FEE  0022               	movlb	2	; select bank2
  8737  0FEF  138E               	bcf	14,7	;volatile
  8738  0FF0                     l3095:	
  8739                           
  8740                           ;main.c: 43:     if(button == 3)
  8741  0FF0  3003               	movlw	3
  8742  0FF1  0671               	xorwf	myButtonPressedCallback@button,w
  8743  0FF2  1D03               	btfss	3,2
  8744  0FF3  0008               	return
  8745  0FF4  1003               	clrc
  8746  0FF5  0022               	movlb	2	; select bank2
  8747  0FF6  1C0C               	btfss	12,0	;volatile
  8748  0FF7  1403               	setc
  8749  0FF8  1C03               	btfss	3,0
  8750  0FF9  2FFD               	goto	u2410
  8751  0FFA  0022               	movlb	2	; select bank2
  8752  0FFB  140C               	bsf	12,0	;volatile
  8753  0FFC  0008               	return
  8754  0FFD                     u2410:	
  8755  0FFD  0022               	movlb	2	; select bank2
  8756  0FFE  100C               	bcf	12,0	;volatile
  8757  0FFF  0008               	return
  8758  1000                     __end_of_myButtonPressedCallback:	
  8759                           
  8760                           	psect	text57
  8761  0B7F                     __ptext57:	
  8762 ;; *************** function _Button_DefaultCallback *****************
  8763 ;; Defined at:
  8764 ;;		line 535 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8765 ;; Parameters:    Size  Location     Type
  8766 ;;  button          1    1[COMMON] enum E3070
  8767 ;; Auto vars:     Size  Location     Type
  8768 ;;		None
  8769 ;; Return value:  Size  Location     Type
  8770 ;;                  1    wreg      void 
  8771 ;; Registers used:
  8772 ;;		None
  8773 ;; Tracked objects:
  8774 ;;		On entry : 0/0
  8775 ;;		On exit  : 0/0
  8776 ;;		Unchanged: 0/0
  8777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8778 ;;      Params:         1       0       0       0       0       0       0       0
  8779 ;;      Locals:         0       0       0       0       0       0       0       0
  8780 ;;      Temps:          0       0       0       0       0       0       0       0
  8781 ;;      Totals:         1       0       0       0       0       0       0       0
  8782 ;;Total ram usage:        1 bytes
  8783 ;; Hardware stack levels used:    1
  8784 ;; Hardware stack levels required when called:    4
  8785 ;; This function calls:
  8786 ;;		Nothing
  8787 ;; This function is called by:
  8788 ;;		_Button_State_NotPressed
  8789 ;;		_Button_State_Pressed
  8790 ;; This function uses a non-reentrant model
  8791 ;;
  8792                           
  8793                           
  8794                           ;psect for function _Button_DefaultCallback
  8795  0B7F                     _Button_DefaultCallback:	
  8796                           
  8797                           ;incstack = 0
  8798                           ; Regs used in _Button_DefaultCallback: []
  8799  0B7F  0008               	return
  8800  0B80                     __end_of_Button_DefaultCallback:	
  8801                           
  8802                           	psect	text58
  8803  0B7E                     __ptext58:	
  8804 ;; *************** function _myButtonReleasedCallback *****************
  8805 ;; Defined at:
  8806 ;;		line 48 in file "main.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  button          1    1[COMMON] enum E2914
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;		None
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      void 
  8813 ;; Registers used:
  8814 ;;		None
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8820 ;;      Params:         1       0       0       0       0       0       0       0
  8821 ;;      Locals:         0       0       0       0       0       0       0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0
  8823 ;;      Totals:         1       0       0       0       0       0       0       0
  8824 ;;Total ram usage:        1 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    4
  8827 ;; This function calls:
  8828 ;;		Nothing
  8829 ;; This function is called by:
  8830 ;;		_main
  8831 ;;		_Button_State_Pressed
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           
  8836                           ;psect for function _myButtonReleasedCallback
  8837  0B7E                     _myButtonReleasedCallback:	
  8838                           
  8839                           ;incstack = 0
  8840                           ; Regs used in _myButtonReleasedCallback: []
  8841  0B7E  0008               	return
  8842  0B7F                     __end_of_myButtonReleasedCallback:	
  8843                           
  8844                           	psect	text59
  8845  0F58                     __ptext59:	
  8846 ;; *************** function _MTOUCH_Button_Initialize *****************
  8847 ;; Defined at:
  8848 ;;		line 167 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;  name            1    wreg     enum E3070
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;  name            1    9[COMMON] enum E3070
  8853 ;;  button          1   10[COMMON] PTR struct .
  8854 ;;		 -> mtouch_button(64), 
  8855 ;; Return value:  Size  Location     Type
  8856 ;;                  1    wreg      void 
  8857 ;; Registers used:
  8858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8864 ;;      Params:         0       0       0       0       0       0       0       0
  8865 ;;      Locals:         2       0       0       0       0       0       0       0
  8866 ;;      Temps:          2       0       0       0       0       0       0       0
  8867 ;;      Totals:         4       0       0       0       0       0       0       0
  8868 ;;Total ram usage:        4 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:    6
  8871 ;; This function calls:
  8872 ;;		_MTOUCH_Sensor_Calibrate
  8873 ;; This function is called by:
  8874 ;;		_MTOUCH_Button_InitializeAll
  8875 ;;		_Button_Service
  8876 ;;		_Button_State_NotPressed
  8877 ;;		_Button_State_Pressed
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           
  8882                           ;psect for function _MTOUCH_Button_Initialize
  8883  0F58                     _MTOUCH_Button_Initialize:	
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  8887                           ;MTOUCH_Button_Initialize@name stored from wreg
  8888  0F58  00F9               	movwf	MTOUCH_Button_Initialize@name
  8889                           
  8890                           ;mcc_generated_files/mtouch/mtouch_button.c: 167: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 168: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 169:     mtouch_button_t* button = &mtouch_button[name];
  8891  0F59  0879               	movf	MTOUCH_Button_Initialize@name,w
  8892  0F5A  00F7               	movwf	??_MTOUCH_Button_Initialize
  8893  0F5B  3003               	movlw	3
  8894  0F5C                     u3905:	
  8895  0F5C  35F7               	lslf	??_MTOUCH_Button_Initialize,f
  8896  0F5D  3EFF               	addlw	-1
  8897  0F5E  1D03               	skipz
  8898  0F5F  2F5C               	goto	u3905
  8899  0F60  3577               	lslf	??_MTOUCH_Button_Initialize,w
  8900  0F61  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  8901  0F62  00F8               	movwf	??_MTOUCH_Button_Initialize+1
  8902  0F63  0878               	movf	??_MTOUCH_Button_Initialize+1,w
  8903  0F64  00FA               	movwf	MTOUCH_Button_Initialize@button
  8904                           
  8905                           ;mcc_generated_files/mtouch/mtouch_button.c: 171:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
  8906  0F65  087A               	movf	MTOUCH_Button_Initialize@button,w
  8907  0F66  3E02               	addlw	2
  8908  0F67  0086               	movwf	6
  8909  0F68  3001               	movlw	1	; select bank2/3
  8910  0F69  0087               	movwf	7
  8911  0F6A  0181               	clrf	1
  8912                           
  8913                           ;mcc_generated_files/mtouch/mtouch_button.c: 172:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
  8914  0F6B  087A               	movf	MTOUCH_Button_Initialize@button,w
  8915  0F6C  3E05               	addlw	5
  8916  0F6D  0086               	movwf	6
  8917  0F6E  3001               	movlw	1	; select bank2/3
  8918  0F6F  0087               	movwf	7
  8919  0F70  3000               	movlw	0
  8920  0F71  3FC0               	movwi [0]fsr1
  8921  0F72  3000               	movlw	0
  8922  0F73  3FC1               	movwi [1]fsr1
  8923  0F74  3FC2               	movwi [2]fsr1
  8924  0F75  3FC3               	movwi [3]fsr1
  8925                           
  8926                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
  8927  0F76  087A               	movf	MTOUCH_Button_Initialize@button,w
  8928  0F77  3E0A               	addlw	10
  8929  0F78  0086               	movwf	6
  8930  0F79  3001               	movlw	1	; select bank2/3
  8931  0F7A  0087               	movwf	7
  8932  0F7B  3000               	movlw	0
  8933  0F7C  3FC0               	movwi [0]fsr1
  8934  0F7D  3FC1               	movwi [1]fsr1
  8935                           
  8936                           ;mcc_generated_files/mtouch/mtouch_button.c: 174:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
  8937  0F7E  087A               	movf	MTOUCH_Button_Initialize@button,w
  8938  0F7F  3E0C               	addlw	12
  8939  0F80  0086               	movwf	6
  8940  0F81  3001               	movlw	1	; select bank2/3
  8941  0F82  0087               	movwf	7
  8942  0F83  3000               	movlw	0
  8943  0F84  3FC0               	movwi [0]fsr1
  8944  0F85  3FC1               	movwi [1]fsr1
  8945                           
  8946                           ;mcc_generated_files/mtouch/mtouch_button.c: 176:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
  8947  0F86  0A7A               	incf	MTOUCH_Button_Initialize@button,w
  8948  0F87  0086               	movwf	6
  8949  0F88  3001               	movlw	1	; select bank2/3
  8950  0F89  0087               	movwf	7
  8951  0F8A  0801               	movf	1,w
  8952  0F8B  318C  24AF         	fcall	_MTOUCH_Sensor_Calibrate
  8953  0F8D  0008               	return
  8954  0F8E                     __end_of_MTOUCH_Button_Initialize:	
  8955                           
  8956                           	psect	text60
  8957  0CAF                     __ptext60:	
  8958 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  8959 ;; Defined at:
  8960 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;  sensor          1    wreg     enum E2854
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;  sensor          1    6[COMMON] enum E2854
  8965 ;; Return value:  Size  Location     Type
  8966 ;;                  1    wreg      void 
  8967 ;; Registers used:
  8968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8974 ;;      Params:         0       0       0       0       0       0       0       0
  8975 ;;      Locals:         1       0       0       0       0       0       0       0
  8976 ;;      Temps:          1       0       0       0       0       0       0       0
  8977 ;;      Totals:         2       0       0       0       0       0       0       0
  8978 ;;Total ram usage:        2 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; Hardware stack levels required when called:    5
  8981 ;; This function calls:
  8982 ;;		___bmul
  8983 ;; This function is called by:
  8984 ;;		_MTOUCH_Sensor_Initialize
  8985 ;;		_MTOUCH_Button_Initialize
  8986 ;; This function uses a non-reentrant model
  8987 ;;
  8988                           
  8989                           
  8990                           ;psect for function _MTOUCH_Sensor_Calibrate
  8991  0CAF                     _MTOUCH_Sensor_Calibrate:	
  8992                           
  8993                           ;incstack = 0
  8994                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8995                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
  8996  0CAF  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
  8997                           
  8998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 914:     if(sensor < 4u)
  8999  0CB0  3004               	movlw	4
  9000  0CB1  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
  9001  0CB2  1803               	skipnc
  9002  0CB3  0008               	return
  9003                           
  9004                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 916:         mtouch_sensor[sensor].calibrated = 0;
  9005  0CB4  3009               	movlw	9
  9006  0CB5  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
  9007  0CB6  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
  9008  0CB7  00F1               	movwf	___bmul@multiplicand
  9009  0CB8  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
  9010  0CB9  318C  249E         	fcall	___bmul
  9011  0CBB  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  9012  0CBC  0086               	movwf	6
  9013  0CBD  0187               	clrf	7
  9014  0CBE  1101               	bcf	1,2
  9015  0CBF  0008               	return
  9016  0CC0                     __end_of_MTOUCH_Sensor_Calibrate:	
  9017                           
  9018                           	psect	text61
  9019  03EA                     __ptext61:	
  9020 ;; *************** function _Button_Baseline_Update *****************
  9021 ;; Defined at:
  9022 ;;		line 489 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;  button          1    wreg     PTR struct .
  9025 ;;		 -> mtouch_button(64), 
  9026 ;; Auto vars:     Size  Location     Type
  9027 ;;  button          1    7[COMMON] PTR struct .
  9028 ;;		 -> mtouch_button(64), 
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  1    wreg      void 
  9031 ;; Registers used:
  9032 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9038 ;;      Params:         0       0       0       0       0       0       0       0
  9039 ;;      Locals:         1       0       0       0       0       0       0       0
  9040 ;;      Temps:          6       0       0       0       0       0       0       0
  9041 ;;      Totals:         7       0       0       0       0       0       0       0
  9042 ;;Total ram usage:        7 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    4
  9045 ;; This function calls:
  9046 ;;		Nothing
  9047 ;; This function is called by:
  9048 ;;		_Button_State_Initializing
  9049 ;;		_Button_State_NotPressed
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _Button_Baseline_Update
  9055  03EA                     _Button_Baseline_Update:	
  9056                           
  9057                           ;incstack = 0
  9058                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  9059                           ;Button_Baseline_Update@button stored from wreg
  9060  03EA  00F7               	movwf	Button_Baseline_Update@button
  9061                           
  9062                           ;mcc_generated_files/mtouch/mtouch_button.c: 489: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 490: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 491:     if (GIE == (uint8_t)1)
  9063  03EB  1F8B               	btfss	11,7	;volatile
  9064  03EC  2C34               	goto	l3187
  9065                           
  9066                           ;mcc_generated_files/mtouch/mtouch_button.c: 492:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 493:         GIE = (uint8_t)0;
  9067  03ED  138B               	bcf	11,7	;volatile
  9068                           
  9069                           ;mcc_generated_files/mtouch/mtouch_button.c: 494:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
  9070  03EE  0877               	movf	Button_Baseline_Update@button,w
  9071  03EF  3E05               	addlw	5
  9072  03F0  0086               	movwf	6
  9073  03F1  3001               	movlw	1	; select bank2/3
  9074  03F2  0087               	movwf	7
  9075  03F3  3F40               	moviw [0]fsr1
  9076  03F4  00F1               	movwf	??_Button_Baseline_Update
  9077  03F5  3F41               	moviw [1]fsr1
  9078  03F6  00F2               	movwf	??_Button_Baseline_Update+1
  9079  03F7  3F42               	moviw [2]fsr1
  9080  03F8  00F3               	movwf	??_Button_Baseline_Update+2
  9081  03F9  3F43               	moviw [3]fsr1
  9082  03FA  00F4               	movwf	??_Button_Baseline_Update+3
  9083  03FB  3004               	movlw	4
  9084  03FC                     u2545:	
  9085  03FC  36F4               	lsrf	??_Button_Baseline_Update+3,f
  9086  03FD  0CF3               	rrf	??_Button_Baseline_Update+2,f
  9087  03FE  0CF2               	rrf	??_Button_Baseline_Update+1,f
  9088  03FF  0CF1               	rrf	??_Button_Baseline_Update,f
  9089  0400  0B89               	decfsz	9,f
  9090  0401  2BFC               	goto	u2545
  9091  0402  0877               	movf	Button_Baseline_Update@button,w
  9092  0403  3E05               	addlw	5
  9093  0404  0086               	movwf	6
  9094  0405  3001               	movlw	1	; select bank2/3
  9095  0406  0087               	movwf	7
  9096  0407  0871               	movf	??_Button_Baseline_Update,w
  9097  0408  0281               	subwf	1,f
  9098  0409  3141               	addfsr 1,1
  9099  040A  0872               	movf	??_Button_Baseline_Update+1,w
  9100  040B  3B81               	subwfb	1,f
  9101  040C  3141               	addfsr 1,1
  9102  040D  0873               	movf	??_Button_Baseline_Update+2,w
  9103  040E  3B81               	subwfb	1,f
  9104  040F  3141               	addfsr 1,1
  9105  0410  0874               	movf	??_Button_Baseline_Update+3,w
  9106  0411  3B81               	subwfb	1,f
  9107  0412  317D               	addfsr 1,-3
  9108                           
  9109                           ;mcc_generated_files/mtouch/mtouch_button.c: 495:         button->baseline += button->re
      +                          ading;
  9110  0413  0877               	movf	Button_Baseline_Update@button,w
  9111  0414  3E03               	addlw	3
  9112  0415  0086               	movwf	6
  9113  0416  3001               	movlw	1	; select bank2/3
  9114  0417  0087               	movwf	7
  9115  0418  3F40               	moviw [0]fsr1
  9116  0419  00F1               	movwf	??_Button_Baseline_Update
  9117  041A  3F41               	moviw [1]fsr1
  9118  041B  00F2               	movwf	??_Button_Baseline_Update+1
  9119  041C  0871               	movf	??_Button_Baseline_Update,w
  9120  041D  00F3               	movwf	??_Button_Baseline_Update+2
  9121  041E  0872               	movf	??_Button_Baseline_Update+1,w
  9122  041F  00F4               	movwf	??_Button_Baseline_Update+3
  9123  0420  01F5               	clrf	??_Button_Baseline_Update+4
  9124  0421  01F6               	clrf	??_Button_Baseline_Update+5
  9125  0422  0877               	movf	Button_Baseline_Update@button,w
  9126  0423  3E05               	addlw	5
  9127  0424  0086               	movwf	6
  9128  0425  3001               	movlw	1	; select bank2/3
  9129  0426  0087               	movwf	7
  9130  0427  0873               	movf	??_Button_Baseline_Update+2,w
  9131  0428  0781               	addwf	1,f
  9132  0429  3141               	addfsr 1,1
  9133  042A  0874               	movf	??_Button_Baseline_Update+3,w
  9134  042B  3D81               	addwfc	1,f
  9135  042C  3141               	addfsr 1,1
  9136  042D  0875               	movf	??_Button_Baseline_Update+4,w
  9137  042E  3D81               	addwfc	1,f
  9138  042F  3141               	addfsr 1,1
  9139  0430  0876               	movf	??_Button_Baseline_Update+5,w
  9140  0431  3D81               	addwfc	1,f
  9141                           
  9142                           ;mcc_generated_files/mtouch/mtouch_button.c: 496:         GIE = (uint8_t)1;
  9143  0432  178B               	bsf	11,7	;volatile
  9144                           
  9145                           ;mcc_generated_files/mtouch/mtouch_button.c: 497:     }
  9146  0433  0008               	return
  9147  0434                     l3187:	
  9148                           
  9149                           ;mcc_generated_files/mtouch/mtouch_button.c: 499:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 500:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
  9150  0434  0877               	movf	Button_Baseline_Update@button,w
  9151  0435  3E05               	addlw	5
  9152  0436  0086               	movwf	6
  9153  0437  3001               	movlw	1	; select bank2/3
  9154  0438  0087               	movwf	7
  9155  0439  3F40               	moviw [0]fsr1
  9156  043A  00F1               	movwf	??_Button_Baseline_Update
  9157  043B  3F41               	moviw [1]fsr1
  9158  043C  00F2               	movwf	??_Button_Baseline_Update+1
  9159  043D  3F42               	moviw [2]fsr1
  9160  043E  00F3               	movwf	??_Button_Baseline_Update+2
  9161  043F  3F43               	moviw [3]fsr1
  9162  0440  00F4               	movwf	??_Button_Baseline_Update+3
  9163  0441  3004               	movlw	4
  9164  0442                     u2555:	
  9165  0442  36F4               	lsrf	??_Button_Baseline_Update+3,f
  9166  0443  0CF3               	rrf	??_Button_Baseline_Update+2,f
  9167  0444  0CF2               	rrf	??_Button_Baseline_Update+1,f
  9168  0445  0CF1               	rrf	??_Button_Baseline_Update,f
  9169  0446  0B89               	decfsz	9,f
  9170  0447  2C42               	goto	u2555
  9171  0448  0877               	movf	Button_Baseline_Update@button,w
  9172  0449  3E05               	addlw	5
  9173  044A  0086               	movwf	6
  9174  044B  3001               	movlw	1	; select bank2/3
  9175  044C  0087               	movwf	7
  9176  044D  0871               	movf	??_Button_Baseline_Update,w
  9177  044E  0281               	subwf	1,f
  9178  044F  3141               	addfsr 1,1
  9179  0450  0872               	movf	??_Button_Baseline_Update+1,w
  9180  0451  3B81               	subwfb	1,f
  9181  0452  3141               	addfsr 1,1
  9182  0453  0873               	movf	??_Button_Baseline_Update+2,w
  9183  0454  3B81               	subwfb	1,f
  9184  0455  3141               	addfsr 1,1
  9185  0456  0874               	movf	??_Button_Baseline_Update+3,w
  9186  0457  3B81               	subwfb	1,f
  9187  0458  317D               	addfsr 1,-3
  9188                           
  9189                           ;mcc_generated_files/mtouch/mtouch_button.c: 501:         button->baseline += button->re
      +                          ading;
  9190  0459  0877               	movf	Button_Baseline_Update@button,w
  9191  045A  3E03               	addlw	3
  9192  045B  0086               	movwf	6
  9193  045C  3001               	movlw	1	; select bank2/3
  9194  045D  0087               	movwf	7
  9195  045E  3F40               	moviw [0]fsr1
  9196  045F  00F1               	movwf	??_Button_Baseline_Update
  9197  0460  3F41               	moviw [1]fsr1
  9198  0461  00F2               	movwf	??_Button_Baseline_Update+1
  9199  0462  0871               	movf	??_Button_Baseline_Update,w
  9200  0463  00F3               	movwf	??_Button_Baseline_Update+2
  9201  0464  0872               	movf	??_Button_Baseline_Update+1,w
  9202  0465  00F4               	movwf	??_Button_Baseline_Update+3
  9203  0466  01F5               	clrf	??_Button_Baseline_Update+4
  9204  0467  01F6               	clrf	??_Button_Baseline_Update+5
  9205  0468  0877               	movf	Button_Baseline_Update@button,w
  9206  0469  3E05               	addlw	5
  9207  046A  0086               	movwf	6
  9208  046B  3001               	movlw	1	; select bank2/3
  9209  046C  0087               	movwf	7
  9210  046D  0873               	movf	??_Button_Baseline_Update+2,w
  9211  046E  0781               	addwf	1,f
  9212  046F  3141               	addfsr 1,1
  9213  0470  0874               	movf	??_Button_Baseline_Update+3,w
  9214  0471  3D81               	addwfc	1,f
  9215  0472  3141               	addfsr 1,1
  9216  0473  0875               	movf	??_Button_Baseline_Update+4,w
  9217  0474  3D81               	addwfc	1,f
  9218  0475  3141               	addfsr 1,1
  9219  0476  0876               	movf	??_Button_Baseline_Update+5,w
  9220  0477  3D81               	addwfc	1,f
  9221  0478  0008               	return
  9222  0479                     __end_of_Button_Baseline_Update:	
  9223                           
  9224                           	psect	text62
  9225  0EC8                     __ptext62:	
  9226 ;; *************** function _Button_Baseline_Initialize *****************
  9227 ;; Defined at:
  9228 ;;		line 483 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9229 ;; Parameters:    Size  Location     Type
  9230 ;;  button          1    wreg     PTR struct .
  9231 ;;		 -> mtouch_button(64), 
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  button          1    9[COMMON] PTR struct .
  9234 ;;		 -> mtouch_button(64), 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  1    wreg      void 
  9237 ;; Registers used:
  9238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9244 ;;      Params:         0       0       0       0       0       0       0       0
  9245 ;;      Locals:         1       0       0       0       0       0       0       0
  9246 ;;      Temps:          0       4       0       0       0       0       0       0
  9247 ;;      Totals:         1       4       0       0       0       0       0       0
  9248 ;;Total ram usage:        5 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    6
  9251 ;; This function calls:
  9252 ;;		_MTOUCH_Sensor_RawSample_Get
  9253 ;; This function is called by:
  9254 ;;		_Button_State_Initializing
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           
  9259                           ;psect for function _Button_Baseline_Initialize
  9260  0EC8                     _Button_Baseline_Initialize:	
  9261                           
  9262                           ;incstack = 0
  9263                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9264                           ;Button_Baseline_Initialize@button stored from wreg
  9265  0EC8  00F9               	movwf	Button_Baseline_Initialize@button
  9266                           
  9267                           ;mcc_generated_files/mtouch/mtouch_button.c: 483: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 484: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 485:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
  9268  0EC9  0A79               	incf	Button_Baseline_Initialize@button,w
  9269  0ECA  0086               	movwf	6
  9270  0ECB  3001               	movlw	1	; select bank2/3
  9271  0ECC  0087               	movwf	7
  9272  0ECD  0801               	movf	1,w
  9273  0ECE  318D  2563  318E   	fcall	_MTOUCH_Sensor_RawSample_Get
  9274  0ED1  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  9275  0ED2  0020               	movlb	0	; select bank0
  9276  0ED3  00A0               	movwf	??_Button_Baseline_Initialize
  9277  0ED4  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  9278  0ED5  00A1               	movwf	??_Button_Baseline_Initialize+1
  9279  0ED6  01A2               	clrf	??_Button_Baseline_Initialize+2
  9280  0ED7  01A3               	clrf	??_Button_Baseline_Initialize+3
  9281  0ED8  0879               	movf	Button_Baseline_Initialize@button,w
  9282  0ED9  3E05               	addlw	5
  9283  0EDA  0086               	movwf	6
  9284  0EDB  3001               	movlw	1	; select bank2/3
  9285  0EDC  0087               	movwf	7
  9286  0EDD  0820               	movf	??_Button_Baseline_Initialize,w
  9287  0EDE  3FC0               	movwi [0]fsr1
  9288  0EDF  0821               	movf	??_Button_Baseline_Initialize+1,w
  9289  0EE0  3FC1               	movwi [1]fsr1
  9290  0EE1  0822               	movf	??_Button_Baseline_Initialize+2,w
  9291  0EE2  3FC2               	movwi [2]fsr1
  9292  0EE3  0823               	movf	??_Button_Baseline_Initialize+3,w
  9293  0EE4  3FC3               	movwi [3]fsr1
  9294                           
  9295                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:     button->baseline <<= ((uint8_t)4u)
      +                          ;
  9296  0EE5  0879               	movf	Button_Baseline_Initialize@button,w
  9297  0EE6  3E05               	addlw	5
  9298  0EE7  0086               	movwf	6
  9299  0EE8  3001               	movlw	1	; select bank2/3
  9300  0EE9  0087               	movwf	7
  9301  0EEA  3004               	movlw	4
  9302  0EEB                     u3915:	
  9303  0EEB  3581               	lslf	1,f
  9304  0EEC  3141               	addfsr 1,1
  9305  0EED  0D81               	rlf	1,f
  9306  0EEE  3141               	addfsr 1,1
  9307  0EEF  0D81               	rlf	1,f
  9308  0EF0  3141               	addfsr 1,1
  9309  0EF1  0D81               	rlf	1,f
  9310  0EF2  317D               	addfsr 1,-3
  9311  0EF3  0B89               	decfsz	9,f
  9312  0EF4  2EEB               	goto	u3915
  9313  0EF5  0008               	return
  9314  0EF6                     __end_of_Button_Baseline_Initialize:	
  9315                           
  9316                           	psect	text63
  9317  0C44                     __ptext63:	
  9318 ;; *************** function _Button_Reading_Update *****************
  9319 ;; Defined at:
  9320 ;;		line 456 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9321 ;; Parameters:    Size  Location     Type
  9322 ;;  button          1    wreg     PTR struct .
  9323 ;;		 -> mtouch_button(64), 
  9324 ;; Auto vars:     Size  Location     Type
  9325 ;;  button          1    0[BANK0 ] PTR struct .
  9326 ;;		 -> mtouch_button(64), 
  9327 ;; Return value:  Size  Location     Type
  9328 ;;                  1    wreg      void 
  9329 ;; Registers used:
  9330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9331 ;; Tracked objects:
  9332 ;;		On entry : 0/0
  9333 ;;		On exit  : 0/0
  9334 ;;		Unchanged: 0/0
  9335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9336 ;;      Params:         0       0       0       0       0       0       0       0
  9337 ;;      Locals:         0       1       0       0       0       0       0       0
  9338 ;;      Temps:          0       0       0       0       0       0       0       0
  9339 ;;      Totals:         0       1       0       0       0       0       0       0
  9340 ;;Total ram usage:        1 bytes
  9341 ;; Hardware stack levels used:    1
  9342 ;; Hardware stack levels required when called:    7
  9343 ;; This function calls:
  9344 ;;		_Button_Reading_Update_Helper
  9345 ;; This function is called by:
  9346 ;;		_Button_Service
  9347 ;; This function uses a non-reentrant model
  9348 ;;
  9349                           
  9350                           
  9351                           ;psect for function _Button_Reading_Update
  9352  0C44                     _Button_Reading_Update:	
  9353                           
  9354                           ;incstack = 0
  9355                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9356                           ;Button_Reading_Update@button stored from wreg
  9357  0C44  0020               	movlb	0	; select bank0
  9358  0C45  00A0               	movwf	Button_Reading_Update@button
  9359                           
  9360                           ;mcc_generated_files/mtouch/mtouch_button.c: 456: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 457: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 458:     if (GIE == (uint8_t) 1)
  9361  0C46  1F8B               	btfss	11,7	;volatile
  9362  0C47  2C4E               	goto	l4233
  9363                           
  9364                           ;mcc_generated_files/mtouch/mtouch_button.c: 459:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 460:         GIE = (uint8_t) 0;
  9365  0C48  138B               	bcf	11,7	;volatile
  9366                           
  9367                           ;mcc_generated_files/mtouch/mtouch_button.c: 461:         Button_Reading_Update_Helper(b
      +                          utton);
  9368  0C49  0820               	movf	Button_Reading_Update@button,w
  9369  0C4A  3187  2779         	fcall	_Button_Reading_Update_Helper
  9370                           
  9371                           ;mcc_generated_files/mtouch/mtouch_button.c: 462:         GIE = (uint8_t) 1;
  9372  0C4C  178B               	bsf	11,7	;volatile
  9373                           
  9374                           ;mcc_generated_files/mtouch/mtouch_button.c: 463:     }
  9375  0C4D  0008               	return
  9376  0C4E                     l4233:	
  9377                           
  9378                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         Button_Reading_Update_Helper(button);
  9379  0C4E  0820               	movf	Button_Reading_Update@button,w
  9380  0C4F  3187  2779         	fcall	_Button_Reading_Update_Helper
  9381  0C51  0008               	return
  9382  0C52                     __end_of_Button_Reading_Update:	
  9383                           
  9384                           	psect	text64
  9385  0779                     __ptext64:	
  9386 ;; *************** function _Button_Reading_Update_Helper *****************
  9387 ;; Defined at:
  9388 ;;		line 470 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9389 ;; Parameters:    Size  Location     Type
  9390 ;;  button          1    wreg     PTR struct .
  9391 ;;		 -> mtouch_button(64), 
  9392 ;; Auto vars:     Size  Location     Type
  9393 ;;  button          1   11[COMMON] PTR struct .
  9394 ;;		 -> mtouch_button(64), 
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      void 
  9397 ;; Registers used:
  9398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9404 ;;      Params:         0       0       0       0       0       0       0       0
  9405 ;;      Locals:         1       0       0       0       0       0       0       0
  9406 ;;      Temps:          2       0       0       0       0       0       0       0
  9407 ;;      Totals:         3       0       0       0       0       0       0       0
  9408 ;;Total ram usage:        3 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    6
  9411 ;; This function calls:
  9412 ;;		_MTOUCH_Sensor_RawSample_Get
  9413 ;; This function is called by:
  9414 ;;		_Button_Reading_Update
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           
  9419                           ;psect for function _Button_Reading_Update_Helper
  9420  0779                     _Button_Reading_Update_Helper:	
  9421                           
  9422                           ;incstack = 0
  9423                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  9424                           ;Button_Reading_Update_Helper@button stored from wreg
  9425  0779  00FB               	movwf	Button_Reading_Update_Helper@button
  9426                           
  9427                           ;mcc_generated_files/mtouch/mtouch_button.c: 470: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 471: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 472:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
  9428  077A  087B               	movf	Button_Reading_Update_Helper@button,w
  9429  077B  3E02               	addlw	2
  9430  077C  0086               	movwf	6
  9431  077D  3001               	movlw	1	; select bank2/3
  9432  077E  0087               	movwf	7
  9433  077F  0801               	movf	1,w
  9434  0780  1903               	btfsc	3,2
  9435  0781  2FB5               	goto	l4149
  9436                           
  9437                           ;mcc_generated_files/mtouch/mtouch_button.c: 473:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 474:         button->reading -= button->reading>>((uint8_t)2u);
  9438  0782  087B               	movf	Button_Reading_Update_Helper@button,w
  9439  0783  3E03               	addlw	3
  9440  0784  0086               	movwf	6
  9441  0785  3001               	movlw	1	; select bank2/3
  9442  0786  0087               	movwf	7
  9443  0787  3F40               	moviw [0]fsr1
  9444  0788  00F9               	movwf	??_Button_Reading_Update_Helper
  9445  0789  3F41               	moviw [1]fsr1
  9446  078A  00FA               	movwf	??_Button_Reading_Update_Helper+1
  9447  078B  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
  9448  078C  0CF9               	rrf	??_Button_Reading_Update_Helper,f
  9449  078D  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
  9450  078E  0CF9               	rrf	??_Button_Reading_Update_Helper,f
  9451  078F  087B               	movf	Button_Reading_Update_Helper@button,w
  9452  0790  3E03               	addlw	3
  9453  0791  0086               	movwf	6
  9454  0792  3001               	movlw	1	; select bank2/3
  9455  0793  0087               	movwf	7
  9456  0794  0879               	movf	??_Button_Reading_Update_Helper,w
  9457  0795  0281               	subwf	1,f
  9458  0796  3141               	addfsr 1,1
  9459  0797  087A               	movf	??_Button_Reading_Update_Helper+1,w
  9460  0798  3B81               	subwfb	1,f
  9461  0799  317F               	addfsr 1,-1
  9462                           
  9463                           ;mcc_generated_files/mtouch/mtouch_button.c: 475:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
  9464  079A  0A7B               	incf	Button_Reading_Update_Helper@button,w
  9465  079B  0086               	movwf	6
  9466  079C  3001               	movlw	1	; select bank2/3
  9467  079D  0087               	movwf	7
  9468  079E  0801               	movf	1,w
  9469  079F  318D  2563         	fcall	_MTOUCH_Sensor_RawSample_Get
  9470  07A1  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  9471  07A2  00F9               	movwf	??_Button_Reading_Update_Helper
  9472  07A3  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  9473  07A4  00FA               	movwf	??_Button_Reading_Update_Helper+1
  9474  07A5  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
  9475  07A6  0CF9               	rrf	??_Button_Reading_Update_Helper,f
  9476  07A7  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
  9477  07A8  0CF9               	rrf	??_Button_Reading_Update_Helper,f
  9478  07A9  087B               	movf	Button_Reading_Update_Helper@button,w
  9479  07AA  3E03               	addlw	3
  9480  07AB  0086               	movwf	6
  9481  07AC  3001               	movlw	1	; select bank2/3
  9482  07AD  0087               	movwf	7
  9483  07AE  0879               	movf	??_Button_Reading_Update_Helper,w
  9484  07AF  0781               	addwf	1,f
  9485  07B0  3141               	addfsr 1,1
  9486  07B1  087A               	movf	??_Button_Reading_Update_Helper+1,w
  9487  07B2  3D81               	addwfc	1,f
  9488  07B3  317F               	addfsr 1,-1
  9489                           
  9490                           ;mcc_generated_files/mtouch/mtouch_button.c: 476:     }
  9491  07B4  0008               	return
  9492  07B5                     l4149:	
  9493                           
  9494                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 479:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
  9495  07B5  0A7B               	incf	Button_Reading_Update_Helper@button,w
  9496  07B6  0086               	movwf	6
  9497  07B7  3001               	movlw	1	; select bank2/3
  9498  07B8  0087               	movwf	7
  9499  07B9  0801               	movf	1,w
  9500  07BA  318D  2563         	fcall	_MTOUCH_Sensor_RawSample_Get
  9501  07BC  087B               	movf	Button_Reading_Update_Helper@button,w
  9502  07BD  3E03               	addlw	3
  9503  07BE  0086               	movwf	6
  9504  07BF  3001               	movlw	1	; select bank2/3
  9505  07C0  0087               	movwf	7
  9506  07C1  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  9507  07C2  3FC0               	movwi [0]fsr1
  9508  07C3  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  9509  07C4  3FC1               	movwi [1]fsr1
  9510  07C5  0008               	return
  9511  07C6                     __end_of_Button_Reading_Update_Helper:	
  9512                           
  9513                           	psect	text65
  9514  0D63                     __ptext65:	
  9515 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
  9516 ;; Defined at:
  9517 ;;		line 800 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;  name            1    wreg     enum E2854
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  name            1    8[COMMON] enum E2854
  9522 ;; Return value:  Size  Location     Type
  9523 ;;                  2    5[COMMON] unsigned short 
  9524 ;; Registers used:
  9525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9531 ;;      Params:         2       0       0       0       0       0       0       0
  9532 ;;      Locals:         1       0       0       0       0       0       0       0
  9533 ;;      Temps:          1       0       0       0       0       0       0       0
  9534 ;;      Totals:         4       0       0       0       0       0       0       0
  9535 ;;Total ram usage:        4 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    5
  9538 ;; This function calls:
  9539 ;;		___bmul
  9540 ;; This function is called by:
  9541 ;;		_Button_Reading_Update_Helper
  9542 ;;		_Button_Baseline_Initialize
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           
  9547                           ;psect for function _MTOUCH_Sensor_RawSample_Get
  9548  0D63                     _MTOUCH_Sensor_RawSample_Get:	
  9549                           
  9550                           ;incstack = 0
  9551                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9552                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
  9553  0D63  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
  9554                           
  9555                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 800: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          801: {;mcc_generated_files/mtouch/mtouch_sensor.c: 802:     if (name < 4u)
  9556  0D64  3004               	movlw	4
  9557  0D65  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
  9558  0D66  1803               	skipnc
  9559  0D67  2D77               	goto	l4075
  9560                           
  9561                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 803:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 804:         return mtouch_sensor[name].rawSample;
  9562  0D68  3009               	movlw	9
  9563  0D69  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
  9564  0D6A  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
  9565  0D6B  00F1               	movwf	___bmul@multiplicand
  9566  0D6C  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
  9567  0D6D  318C  249E         	fcall	___bmul
  9568  0D6F  3EA6               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
  9569  0D70  0086               	movwf	6
  9570  0D71  0187               	clrf	7
  9571  0D72  3F40               	moviw [0]fsr1
  9572  0D73  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
  9573  0D74  3F41               	moviw [1]fsr1
  9574  0D75  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
  9575  0D76  0008               	return
  9576  0D77                     l4075:	
  9577                           
  9578                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:         return (mtouch_sensor_sample_t
      +                          )0;
  9579  0D77  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
  9580  0D78  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
  9581  0D79  0008               	return
  9582  0D7A                     __end_of_MTOUCH_Sensor_RawSample_Get:	
  9583                           
  9584                           	psect	text66
  9585  0C9E                     __ptext66:	
  9586 ;; *************** function ___bmul *****************
  9587 ;; Defined at:
  9588 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
  9589 ;; Parameters:    Size  Location     Type
  9590 ;;  multiplier      1    wreg     unsigned char 
  9591 ;;  multiplicand    1    1[COMMON] unsigned char 
  9592 ;; Auto vars:     Size  Location     Type
  9593 ;;  multiplier      1    4[COMMON] unsigned char 
  9594 ;;  product         1    3[COMMON] unsigned char 
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  1    wreg      unsigned char 
  9597 ;; Registers used:
  9598 ;;		wreg, status,2, status,0
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9604 ;;      Params:         1       0       0       0       0       0       0       0
  9605 ;;      Locals:         2       0       0       0       0       0       0       0
  9606 ;;      Temps:          1       0       0       0       0       0       0       0
  9607 ;;      Totals:         4       0       0       0       0       0       0       0
  9608 ;;Total ram usage:        4 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    4
  9611 ;; This function calls:
  9612 ;;		Nothing
  9613 ;; This function is called by:
  9614 ;;		_MTOUCH_Sensor_Initialize
  9615 ;;		_MTOUCH_Sensor_RawSample_Get
  9616 ;;		_MTOUCH_Sensor_Enable
  9617 ;;		_MTOUCH_Sensor_Calibrate
  9618 ;;		_MTOUCH_Sensor_isCalibrated
  9619 ;;		_MTOUCH_Sensor_wasSampled
  9620 ;;		_MTOUCH_Sensor_isAnySensorActive
  9621 ;;		_MTOUCH_Sensor_Disable
  9622 ;;		_MTOUCH_Sensor_isEnabled
  9623 ;;		_MTOUCH_Sensor_isActive
  9624 ;;		_MTOUCH_Sensor_AdditionalCap_Get
  9625 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
  9626 ;;		_MTOUCH_Sensor_PreChargeTime_Get
  9627 ;;		_MTOUCH_Sensor_Oversampling_Get
  9628 ;;		_MTOUCH_Sensor_Oversampling_Set
  9629 ;; This function uses a non-reentrant model
  9630 ;;
  9631                           
  9632                           
  9633                           ;psect for function ___bmul
  9634  0C9E                     ___bmul:	
  9635                           
  9636                           ;incstack = 0
  9637                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9638                           ;___bmul@multiplier stored from wreg
  9639  0C9E  00F4               	movwf	___bmul@multiplier
  9640  0C9F  01F3               	clrf	___bmul@product
  9641  0CA0                     l3849:	
  9642  0CA0  1C74               	btfss	___bmul@multiplier,0
  9643  0CA1  2CA6               	goto	l3853
  9644  0CA2  0871               	movf	___bmul@multiplicand,w
  9645  0CA3  00F2               	movwf	??___bmul
  9646  0CA4  0872               	movf	??___bmul,w
  9647  0CA5  07F3               	addwf	___bmul@product,f
  9648  0CA6                     l3853:	
  9649  0CA6  1003               	clrc
  9650  0CA7  0DF1               	rlf	___bmul@multiplicand,f
  9651  0CA8  1003               	clrc
  9652  0CA9  0CF4               	rrf	___bmul@multiplier,f
  9653  0CAA  0874               	movf	___bmul@multiplier,w
  9654  0CAB  1D03               	btfss	3,2
  9655  0CAC  2CA0               	goto	l3849
  9656  0CAD  0873               	movf	___bmul@product,w
  9657  0CAE  0008               	return
  9658  0CAF                     __end_of___bmul:	
  9659                           
  9660                           	psect	text67
  9661  0503                     __ptext67:	
  9662 ;; *************** function _Button_Deviation_Update *****************
  9663 ;; Defined at:
  9664 ;;		line 407 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9665 ;; Parameters:    Size  Location     Type
  9666 ;;  button          1    wreg     PTR struct .
  9667 ;;		 -> mtouch_button(64), 
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;  button          1    0[BANK0 ] PTR struct .
  9670 ;;		 -> mtouch_button(64), 
  9671 ;;  deviation       4    1[BANK0 ] long 
  9672 ;; Return value:  Size  Location     Type
  9673 ;;                  1    wreg      void 
  9674 ;; Registers used:
  9675 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9676 ;; Tracked objects:
  9677 ;;		On entry : 0/0
  9678 ;;		On exit  : 0/0
  9679 ;;		Unchanged: 0/0
  9680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9681 ;;      Params:         0       0       0       0       0       0       0       0
  9682 ;;      Locals:         0       5       0       0       0       0       0       0
  9683 ;;      Temps:         10       0       0       0       0       0       0       0
  9684 ;;      Totals:        10       5       0       0       0       0       0       0
  9685 ;;Total ram usage:       15 bytes
  9686 ;; Hardware stack levels used:    1
  9687 ;; Hardware stack levels required when called:    4
  9688 ;; This function calls:
  9689 ;;		Nothing
  9690 ;; This function is called by:
  9691 ;;		_Button_Service
  9692 ;; This function uses a non-reentrant model
  9693 ;;
  9694                           
  9695                           
  9696                           ;psect for function _Button_Deviation_Update
  9697  0503                     _Button_Deviation_Update:	
  9698                           
  9699                           ;incstack = 0
  9700                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  9701                           ;Button_Deviation_Update@button stored from wreg
  9702  0503  0020               	movlb	0	; select bank0
  9703  0504  00A0               	movwf	Button_Deviation_Update@button
  9704                           
  9705                           ;mcc_generated_files/mtouch/mtouch_button.c: 407: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 408: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 409:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 411:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
  9706  0505  0820               	movf	Button_Deviation_Update@button,w
  9707  0506  3E05               	addlw	5
  9708  0507  0086               	movwf	6
  9709  0508  3001               	movlw	1	; select bank2/3
  9710  0509  0087               	movwf	7
  9711  050A  3F40               	moviw [0]fsr1
  9712  050B  00F1               	movwf	??_Button_Deviation_Update
  9713  050C  3F41               	moviw [1]fsr1
  9714  050D  00F2               	movwf	??_Button_Deviation_Update+1
  9715  050E  3F42               	moviw [2]fsr1
  9716  050F  00F3               	movwf	??_Button_Deviation_Update+2
  9717  0510  3F43               	moviw [3]fsr1
  9718  0511  00F4               	movwf	??_Button_Deviation_Update+3
  9719  0512  3004               	movlw	4
  9720  0513                     u2715:	
  9721  0513  36F4               	lsrf	??_Button_Deviation_Update+3,f
  9722  0514  0CF3               	rrf	??_Button_Deviation_Update+2,f
  9723  0515  0CF2               	rrf	??_Button_Deviation_Update+1,f
  9724  0516  0CF1               	rrf	??_Button_Deviation_Update,f
  9725  0517  0B89               	decfsz	9,f
  9726  0518  2D13               	goto	u2715
  9727  0519  0820               	movf	Button_Deviation_Update@button,w
  9728  051A  3E03               	addlw	3
  9729  051B  0086               	movwf	6
  9730  051C  3001               	movlw	1	; select bank2/3
  9731  051D  0087               	movwf	7
  9732  051E  3F40               	moviw [0]fsr1
  9733  051F  00F5               	movwf	??_Button_Deviation_Update+4
  9734  0520  3F41               	moviw [1]fsr1
  9735  0521  00F6               	movwf	??_Button_Deviation_Update+5
  9736  0522  0875               	movf	??_Button_Deviation_Update+4,w
  9737  0523  00F7               	movwf	??_Button_Deviation_Update+6
  9738  0524  0876               	movf	??_Button_Deviation_Update+5,w
  9739  0525  00F8               	movwf	??_Button_Deviation_Update+7
  9740  0526  01F9               	clrf	??_Button_Deviation_Update+8
  9741  0527  01FA               	clrf	??_Button_Deviation_Update+9
  9742  0528  0871               	movf	??_Button_Deviation_Update,w
  9743  0529  02F7               	subwf	??_Button_Deviation_Update+6,f
  9744  052A  0872               	movf	??_Button_Deviation_Update+1,w
  9745  052B  3BF8               	subwfb	??_Button_Deviation_Update+7,f
  9746  052C  0873               	movf	??_Button_Deviation_Update+2,w
  9747  052D  3BF9               	subwfb	??_Button_Deviation_Update+8,f
  9748  052E  0874               	movf	??_Button_Deviation_Update+3,w
  9749  052F  3BFA               	subwfb	??_Button_Deviation_Update+9,f
  9750  0530  087A               	movf	??_Button_Deviation_Update+9,w
  9751  0531  00A4               	movwf	Button_Deviation_Update@deviation+3
  9752  0532  0879               	movf	??_Button_Deviation_Update+8,w
  9753  0533  00A3               	movwf	Button_Deviation_Update@deviation+2
  9754  0534  0878               	movf	??_Button_Deviation_Update+7,w
  9755  0535  00A2               	movwf	Button_Deviation_Update@deviation+1
  9756  0536  0877               	movf	??_Button_Deviation_Update+6,w
  9757  0537  00A1               	movwf	Button_Deviation_Update@deviation
  9758                           
  9759                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     deviation = deviation >> (button->
      +                          scaling);
  9760  0538  0821               	movf	Button_Deviation_Update@deviation,w
  9761  0539  00F1               	movwf	??_Button_Deviation_Update
  9762  053A  0822               	movf	Button_Deviation_Update@deviation+1,w
  9763  053B  00F2               	movwf	??_Button_Deviation_Update+1
  9764  053C  0823               	movf	Button_Deviation_Update@deviation+2,w
  9765  053D  00F3               	movwf	??_Button_Deviation_Update+2
  9766  053E  0824               	movf	Button_Deviation_Update@deviation+3,w
  9767  053F  00F4               	movwf	??_Button_Deviation_Update+3
  9768  0540  0820               	movf	Button_Deviation_Update@button,w
  9769  0541  3E0F               	addlw	15
  9770  0542  0086               	movwf	6
  9771  0543  3001               	movlw	1	; select bank2/3
  9772  0544  0087               	movwf	7
  9773  0545  0A01               	incf	1,w
  9774  0546  2D4B               	goto	u2720
  9775  0547                     u2725:	
  9776  0547  37F4               	asrf	??_Button_Deviation_Update+3,f
  9777  0548  0CF3               	rrf	??_Button_Deviation_Update+2,f
  9778  0549  0CF2               	rrf	??_Button_Deviation_Update+1,f
  9779  054A  0CF1               	rrf	??_Button_Deviation_Update,f
  9780  054B                     u2720:	
  9781  054B  0B89               	decfsz	9,f
  9782  054C  2D47               	goto	u2725
  9783  054D  0874               	movf	??_Button_Deviation_Update+3,w
  9784  054E  00A4               	movwf	Button_Deviation_Update@deviation+3
  9785  054F  0873               	movf	??_Button_Deviation_Update+2,w
  9786  0550  00A3               	movwf	Button_Deviation_Update@deviation+2
  9787  0551  0872               	movf	??_Button_Deviation_Update+1,w
  9788  0552  00A2               	movwf	Button_Deviation_Update@deviation+1
  9789  0553  0871               	movf	??_Button_Deviation_Update,w
  9790  0554  00A1               	movwf	Button_Deviation_Update@deviation
  9791                           
  9792                           ;mcc_generated_files/mtouch/mtouch_button.c: 417:     if (deviation > ((0x7f)))
  9793  0555  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
  9794  0556  2D6C               	goto	l3301
  9795  0557  0824               	movf	Button_Deviation_Update@deviation+3,w
  9796  0558  1D03               	btfss	3,2
  9797  0559  2D64               	goto	l3299
  9798  055A  0823               	movf	Button_Deviation_Update@deviation+2,w
  9799  055B  1D03               	btfss	3,2
  9800  055C  2D64               	goto	l3299
  9801  055D  0822               	movf	Button_Deviation_Update@deviation+1,w
  9802  055E  1D03               	btfss	3,2
  9803  055F  2D64               	goto	l3299
  9804  0560  3080               	movlw	128
  9805  0561  0221               	subwf	Button_Deviation_Update@deviation,w
  9806  0562  1C03               	btfss	3,0
  9807  0563  2D6C               	goto	l3301
  9808  0564                     l3299:	
  9809                           
  9810                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 419:         deviation = ((0x7f));
  9811  0564  3000               	movlw	0
  9812  0565  00A4               	movwf	Button_Deviation_Update@deviation+3
  9813  0566  3000               	movlw	0
  9814  0567  00A3               	movwf	Button_Deviation_Update@deviation+2
  9815  0568  3000               	movlw	0
  9816  0569  00A2               	movwf	Button_Deviation_Update@deviation+1
  9817  056A  307F               	movlw	127
  9818  056B  00A1               	movwf	Button_Deviation_Update@deviation
  9819  056C                     l3301:	
  9820                           
  9821                           ;mcc_generated_files/mtouch/mtouch_button.c: 421:     if (deviation < ((-1-0x7f)))
  9822  056C  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
  9823  056D  2D80               	goto	l3305
  9824  056E  3080               	movlw	128
  9825  056F  0221               	subwf	Button_Deviation_Update@deviation,w
  9826  0570  30FF               	movlw	255
  9827  0571  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
  9828  0572  30FF               	movlw	255
  9829  0573  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
  9830  0574  30FF               	movlw	255
  9831  0575  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
  9832  0576  1803               	btfsc	3,0
  9833  0577  2D80               	goto	l3305
  9834                           
  9835                           ;mcc_generated_files/mtouch/mtouch_button.c: 422:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 423:         deviation = ((-1-0x7f));
  9836  0578  30FF               	movlw	255
  9837  0579  00A4               	movwf	Button_Deviation_Update@deviation+3
  9838  057A  30FF               	movlw	255
  9839  057B  00A3               	movwf	Button_Deviation_Update@deviation+2
  9840  057C  30FF               	movlw	255
  9841  057D  00A2               	movwf	Button_Deviation_Update@deviation+1
  9842  057E  3080               	movlw	128
  9843  057F  00A1               	movwf	Button_Deviation_Update@deviation
  9844  0580                     l3305:	
  9845                           
  9846                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
  9847  0580  0821               	movf	Button_Deviation_Update@deviation,w
  9848  0581  00F1               	movwf	??_Button_Deviation_Update
  9849  0582  0820               	movf	Button_Deviation_Update@button,w
  9850  0583  3E09               	addlw	9
  9851  0584  0086               	movwf	6
  9852  0585  3001               	movlw	1	; select bank2/3
  9853  0586  0087               	movwf	7
  9854  0587  0871               	movf	??_Button_Deviation_Update,w
  9855  0588  0081               	movwf	1
  9856  0589  0008               	return
  9857  058A                     __end_of_Button_Deviation_Update:	
  9858                           
  9859                           	psect	text68
  9860  0BA0                     __ptext68:	
  9861 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
  9862 ;; Defined at:
  9863 ;;		line 536 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
  9866 ;;		 -> myButtonPressedCallback(1), 
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;		None
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  1    wreg      void 
  9871 ;; Registers used:
  9872 ;;		wreg
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9878 ;;      Params:         2       0       0       0       0       0       0       0
  9879 ;;      Locals:         0       0       0       0       0       0       0       0
  9880 ;;      Temps:          0       0       0       0       0       0       0       0
  9881 ;;      Totals:         2       0       0       0       0       0       0       0
  9882 ;;Total ram usage:        2 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; Hardware stack levels required when called:    4
  9885 ;; This function calls:
  9886 ;;		Nothing
  9887 ;; This function is called by:
  9888 ;;		_main
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           
  9893                           ;psect for function _MTOUCH_Button_SetPressedCallback
  9894  0BA0                     _MTOUCH_Button_SetPressedCallback:	
  9895                           
  9896                           ;mcc_generated_files/mtouch/mtouch_button.c: 536: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          537: {;mcc_generated_files/mtouch/mtouch_button.c: 538:     callback_pressed = callback;
  9897                           
  9898                           ;incstack = 0
  9899                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
  9900  0BA0  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
  9901  0BA1  0020               	movlb	0	; select bank0
  9902  0BA2  00EA               	movwf	_callback_pressed+1
  9903  0BA3  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
  9904  0BA4  00E9               	movwf	_callback_pressed
  9905  0BA5  0008               	return
  9906  0BA6                     __end_of_MTOUCH_Button_SetPressedCallback:	
  9907                           
  9908                           	psect	text69
  9909  0B9A                     __ptext69:	
  9910 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
  9911 ;; Defined at:
  9912 ;;		line 540 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
  9915 ;;		 -> myButtonReleasedCallback(1), 
  9916 ;; Auto vars:     Size  Location     Type
  9917 ;;		None
  9918 ;; Return value:  Size  Location     Type
  9919 ;;                  1    wreg      void 
  9920 ;; Registers used:
  9921 ;;		wreg
  9922 ;; Tracked objects:
  9923 ;;		On entry : 0/0
  9924 ;;		On exit  : 0/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9927 ;;      Params:         2       0       0       0       0       0       0       0
  9928 ;;      Locals:         0       0       0       0       0       0       0       0
  9929 ;;      Temps:          0       0       0       0       0       0       0       0
  9930 ;;      Totals:         2       0       0       0       0       0       0       0
  9931 ;;Total ram usage:        2 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; Hardware stack levels required when called:    4
  9934 ;; This function calls:
  9935 ;;		Nothing
  9936 ;; This function is called by:
  9937 ;;		_main
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           
  9942                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
  9943  0B9A                     _MTOUCH_Button_SetNotPressedCallback:	
  9944                           
  9945                           ;mcc_generated_files/mtouch/mtouch_button.c: 540: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 541: {;mcc_generated_files/mtouch/mtouch_button.c: 542:     callback_notPressed = cal
      +                          lback;
  9946                           
  9947                           ;incstack = 0
  9948                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
  9949  0B9A  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
  9950  0B9B  0020               	movlb	0	; select bank0
  9951  0B9C  00E8               	movwf	_callback_notPressed+1
  9952  0B9D  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
  9953  0B9E  00E7               	movwf	_callback_notPressed
  9954  0B9F  0008               	return
  9955  0BA0                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
  9956                           
  9957                           	psect	intentry
  9958  0004                     __pintentry:	
  9959 ;; *************** function _INTERRUPT_InterruptManager *****************
  9960 ;; Defined at:
  9961 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;		None
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  1    wreg      void 
  9968 ;; Registers used:
  9969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9975 ;;      Params:         0       0       0       0       0       0       0       0
  9976 ;;      Locals:         0       0       0       0       0       0       0       0
  9977 ;;      Temps:          0       0       0       0       0       0       0       0
  9978 ;;      Totals:         0       0       0       0       0       0       0       0
  9979 ;;Total ram usage:        0 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    3
  9982 ;; This function calls:
  9983 ;;		Absolute function
  9984 ;;		_EUSART_Receive_ISR
  9985 ;; This function is called by:
  9986 ;;		Interrupt level 1
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990  0004                     _INTERRUPT_InterruptManager:	
  9991                           
  9992                           ;incstack = 0
  9993  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9994                           
  9995                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9996  0005  3180               	pagesel	$
  9997                           
  9998                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  9999  0006  1F0B               	btfss	11,6	;volatile
 10000  0007  2813               	goto	i1l145
 10001                           
 10002                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 10003  0008  0021               	movlb	1	; select bank1
 10004  0009  1E91               	btfss	17,5	;volatile
 10005  000A  2813               	goto	i1l145
 10006  000B  0020               	movlb	0	; select bank0
 10007  000C  1E91               	btfss	17,5	;volatile
 10008  000D  2813               	goto	i1l145
 10009                           
 10010                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_RxDefaultInterruptHandler();
 10011  000E  086F               	movf	_EUSART_RxDefaultInterruptHandler+1,w
 10012  000F  008A               	movwf	10
 10013  0010  086E               	movf	_EUSART_RxDefaultInterruptHandler,w
 10014  0011  000A               	callw
 10015  0012  3180               	pagesel	$
 10016  0013                     i1l145:	
 10017                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 10018                           
 10019  0013  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10020  0014  0009               	retfie
 10021  0015                     __end_of_INTERRUPT_InterruptManager:	
 10022                           
 10023                           	psect	text71
 10024  0F26                     __ptext71:	
 10025 ;; *************** function _EUSART_Receive_ISR *****************
 10026 ;; Defined at:
 10027 ;;		line 180 in file "mcc_generated_files/eusart.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;		None
 10030 ;; Auto vars:     Size  Location     Type
 10031 ;;		None
 10032 ;; Return value:  Size  Location     Type
 10033 ;;                  1    wreg      void 
 10034 ;; Registers used:
 10035 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10036 ;; Tracked objects:
 10037 ;;		On entry : 0/0
 10038 ;;		On exit  : 0/0
 10039 ;;		Unchanged: 0/0
 10040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10041 ;;      Params:         0       0       0       0       0       0       0       0
 10042 ;;      Locals:         0       0       0       0       0       0       0       0
 10043 ;;      Temps:          0       0       0       0       0       0       0       0
 10044 ;;      Totals:         0       0       0       0       0       0       0       0
 10045 ;;Total ram usage:        0 bytes
 10046 ;; Hardware stack levels used:    1
 10047 ;; Hardware stack levels required when called:    2
 10048 ;; This function calls:
 10049 ;;		Absolute function
 10050 ;;		_EUSART_DefaultErrorHandler
 10051 ;;		_EUSART_DefaultFramingErrorHandler
 10052 ;;		_EUSART_DefaultOverrunErrorHandler
 10053 ;;		_EUSART_RxDataHandler
 10054 ;; This function is called by:
 10055 ;;		_EUSART_Initialize
 10056 ;;		_INTERRUPT_InterruptManager
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           
 10061                           ;psect for function _EUSART_Receive_ISR
 10062  0F26                     _EUSART_Receive_ISR:	
 10063                           
 10064                           ;mcc_generated_files/eusart.c: 183:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 10065                           
 10066                           ;incstack = 0
 10067                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10068  0F26  087C               	movf	_eusartRxHead,w	;volatile
 10069  0F27  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10070  0F28  0086               	movwf	6
 10071  0F29  0187               	clrf	7
 10072  0F2A  0181               	clrf	1
 10073                           
 10074                           ;mcc_generated_files/eusart.c: 185:     if(RCSTAbits.FERR){
 10075  0F2B  0023               	movlb	3	; select bank3
 10076  0F2C  1D1D               	btfss	29,2	;volatile
 10077  0F2D  2F39               	goto	i1l3587
 10078                           
 10079                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 10080  0F2E  087C               	movf	_eusartRxHead,w	;volatile
 10081  0F2F  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10082  0F30  0086               	movwf	6
 10083  0F31  0187               	clrf	7
 10084  0F32  1481               	bsf	1,1
 10085                           
 10086                           ;mcc_generated_files/eusart.c: 187:         EUSART_FramingErrorHandler();
 10087  0F33  0021               	movlb	1	; select bank1
 10088  0F34  0851               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 10089  0F35  008A               	movwf	10
 10090  0F36  0850               	movf	_EUSART_FramingErrorHandler^(0+128),w
 10091  0F37  000A               	callw
 10092  0F38  318F               	pagesel	$
 10093  0F39                     i1l3587:	
 10094                           
 10095                           ;mcc_generated_files/eusart.c: 190:     if(RCSTAbits.OERR){
 10096  0F39  0023               	movlb	3	; select bank3
 10097  0F3A  1C9D               	btfss	29,1	;volatile
 10098  0F3B  2F47               	goto	i1l3593
 10099                           
 10100                           ;mcc_generated_files/eusart.c: 191:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 10101  0F3C  087C               	movf	_eusartRxHead,w	;volatile
 10102  0F3D  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10103  0F3E  0086               	movwf	6
 10104  0F3F  0187               	clrf	7
 10105  0F40  1501               	bsf	1,2
 10106                           
 10107                           ;mcc_generated_files/eusart.c: 192:         EUSART_OverrunErrorHandler();
 10108  0F41  0021               	movlb	1	; select bank1
 10109  0F42  084F               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 10110  0F43  008A               	movwf	10
 10111  0F44  084E               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 10112  0F45  000A               	callw
 10113  0F46  318F               	pagesel	$
 10114  0F47                     i1l3593:	
 10115                           
 10116                           ;mcc_generated_files/eusart.c: 195:     if(eusartRxStatusBuffer[eusartRxHead].status){
 10117  0F47  087C               	movf	_eusartRxHead,w	;volatile
 10118  0F48  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10119  0F49  0086               	movwf	6
 10120  0F4A  0187               	clrf	7
 10121  0F4B  0801               	movf	1,w
 10122  0F4C  1903               	btfsc	3,2
 10123  0F4D  2F55               	goto	i1l3597
 10124                           
 10125                           ;mcc_generated_files/eusart.c: 196:         EUSART_ErrorHandler();
 10126  0F4E  0021               	movlb	1	; select bank1
 10127  0F4F  084D               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 10128  0F50  008A               	movwf	10
 10129  0F51  084C               	movf	_EUSART_ErrorHandler^(0+128),w
 10130  0F52  000A               	callw
 10131  0F53  318F               	pagesel	$
 10132                           
 10133                           ;mcc_generated_files/eusart.c: 197:     } else {
 10134  0F54  0008               	return
 10135  0F55                     i1l3597:	
 10136                           
 10137                           ;mcc_generated_files/eusart.c: 198:         EUSART_RxDataHandler();
 10138  0F55  318D  254C         	fcall	_EUSART_RxDataHandler
 10139  0F57  0008               	return
 10140  0F58                     __end_of_EUSART_Receive_ISR:	
 10141                           
 10142                           	psect	text72
 10143  0B8D                     __ptext72:	
 10144 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 10145 ;; Defined at:
 10146 ;;		line 216 in file "mcc_generated_files/eusart.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;		None
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;		None
 10151 ;; Return value:  Size  Location     Type
 10152 ;;                  1    wreg      void 
 10153 ;; Registers used:
 10154 ;;		None
 10155 ;; Tracked objects:
 10156 ;;		On entry : 0/0
 10157 ;;		On exit  : 0/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10160 ;;      Params:         0       0       0       0       0       0       0       0
 10161 ;;      Locals:         0       0       0       0       0       0       0       0
 10162 ;;      Temps:          0       0       0       0       0       0       0       0
 10163 ;;      Totals:         0       0       0       0       0       0       0       0
 10164 ;;Total ram usage:        0 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; This function calls:
 10167 ;;		Nothing
 10168 ;; This function is called by:
 10169 ;;		_EUSART_Initialize
 10170 ;;		_EUSART_Receive_ISR
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           
 10175                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 10176  0B8D                     _EUSART_DefaultOverrunErrorHandler:	
 10177                           
 10178                           ;mcc_generated_files/eusart.c: 219:     RCSTAbits.CREN = 0;
 10179                           
 10180                           ;incstack = 0
 10181                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 10182  0B8D  0023               	movlb	3	; select bank3
 10183  0B8E  121D               	bcf	29,4	;volatile
 10184                           
 10185                           ;mcc_generated_files/eusart.c: 220:     RCSTAbits.CREN = 1;
 10186  0B8F  161D               	bsf	29,4	;volatile
 10187  0B90  0008               	return
 10188  0B91                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 10189                           
 10190                           	psect	text73
 10191  0B7D                     __ptext73:	
 10192 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 10193 ;; Defined at:
 10194 ;;		line 214 in file "mcc_generated_files/eusart.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;		None
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;		None
 10199 ;; Return value:  Size  Location     Type
 10200 ;;                  1    wreg      void 
 10201 ;; Registers used:
 10202 ;;		None
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10208 ;;      Params:         0       0       0       0       0       0       0       0
 10209 ;;      Locals:         0       0       0       0       0       0       0       0
 10210 ;;      Temps:          0       0       0       0       0       0       0       0
 10211 ;;      Totals:         0       0       0       0       0       0       0       0
 10212 ;;Total ram usage:        0 bytes
 10213 ;; Hardware stack levels used:    1
 10214 ;; This function calls:
 10215 ;;		Nothing
 10216 ;; This function is called by:
 10217 ;;		_EUSART_Initialize
 10218 ;;		_EUSART_Receive_ISR
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222                           
 10223                           ;psect for function _EUSART_DefaultFramingErrorHandler
 10224  0B7D                     _EUSART_DefaultFramingErrorHandler:	
 10225                           
 10226                           ;incstack = 0
 10227                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 10228  0B7D  0008               	return
 10229  0B7E                     __end_of_EUSART_DefaultFramingErrorHandler:	
 10230                           
 10231                           	psect	text74
 10232  0B81                     __ptext74:	
 10233 ;; *************** function _EUSART_DefaultErrorHandler *****************
 10234 ;; Defined at:
 10235 ;;		line 224 in file "mcc_generated_files/eusart.c"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;		None
 10238 ;; Auto vars:     Size  Location     Type
 10239 ;;		None
 10240 ;; Return value:  Size  Location     Type
 10241 ;;                  1    wreg      void 
 10242 ;; Registers used:
 10243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10244 ;; Tracked objects:
 10245 ;;		On entry : 0/0
 10246 ;;		On exit  : 0/0
 10247 ;;		Unchanged: 0/0
 10248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10249 ;;      Params:         0       0       0       0       0       0       0       0
 10250 ;;      Locals:         0       0       0       0       0       0       0       0
 10251 ;;      Temps:          0       0       0       0       0       0       0       0
 10252 ;;      Totals:         0       0       0       0       0       0       0       0
 10253 ;;Total ram usage:        0 bytes
 10254 ;; Hardware stack levels used:    1
 10255 ;; Hardware stack levels required when called:    1
 10256 ;; This function calls:
 10257 ;;		_EUSART_RxDataHandler
 10258 ;; This function is called by:
 10259 ;;		_EUSART_Initialize
 10260 ;;		_EUSART_Receive_ISR
 10261 ;; This function uses a non-reentrant model
 10262 ;;
 10263                           
 10264                           
 10265                           ;psect for function _EUSART_DefaultErrorHandler
 10266  0B81                     _EUSART_DefaultErrorHandler:	
 10267                           
 10268                           ;mcc_generated_files/eusart.c: 225:     EUSART_RxDataHandler();
 10269                           
 10270                           ;incstack = 0
 10271                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10272  0B81  318D  254C         	fcall	_EUSART_RxDataHandler
 10273  0B83  0008               	return
 10274  0B84                     __end_of_EUSART_DefaultErrorHandler:	
 10275                           
 10276                           	psect	text75
 10277  0D4C                     __ptext75:	
 10278 ;; *************** function _EUSART_RxDataHandler *****************
 10279 ;; Defined at:
 10280 ;;		line 204 in file "mcc_generated_files/eusart.c"
 10281 ;; Parameters:    Size  Location     Type
 10282 ;;		None
 10283 ;; Auto vars:     Size  Location     Type
 10284 ;;		None
 10285 ;; Return value:  Size  Location     Type
 10286 ;;                  1    wreg      void 
 10287 ;; Registers used:
 10288 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10289 ;; Tracked objects:
 10290 ;;		On entry : 0/0
 10291 ;;		On exit  : 0/0
 10292 ;;		Unchanged: 0/0
 10293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10294 ;;      Params:         0       0       0       0       0       0       0       0
 10295 ;;      Locals:         0       0       0       0       0       0       0       0
 10296 ;;      Temps:          1       0       0       0       0       0       0       0
 10297 ;;      Totals:         1       0       0       0       0       0       0       0
 10298 ;;Total ram usage:        1 bytes
 10299 ;; Hardware stack levels used:    1
 10300 ;; This function calls:
 10301 ;;		Nothing
 10302 ;; This function is called by:
 10303 ;;		_EUSART_Receive_ISR
 10304 ;;		_EUSART_DefaultErrorHandler
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           
 10309                           ;psect for function _EUSART_RxDataHandler
 10310  0D4C                     _EUSART_RxDataHandler:	
 10311                           
 10312                           ;mcc_generated_files/eusart.c: 206:     eusartRxBuffer[eusartRxHead++] = RCREG;
 10313                           
 10314                           ;incstack = 0
 10315                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10316  0D4C  0023               	movlb	3	; select bank3
 10317  0D4D  0819               	movf	25,w	;volatile
 10318  0D4E  00F0               	movwf	??_EUSART_RxDataHandler
 10319  0D4F  087C               	movf	_eusartRxHead,w
 10320  0D50  3EC4               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10321  0D51  0086               	movwf	6
 10322  0D52  0187               	clrf	7
 10323  0D53  0870               	movf	??_EUSART_RxDataHandler,w
 10324  0D54  0081               	movwf	1
 10325  0D55  3001               	movlw	1
 10326  0D56  00F0               	movwf	??_EUSART_RxDataHandler
 10327  0D57  0870               	movf	??_EUSART_RxDataHandler,w
 10328  0D58  07FC               	addwf	_eusartRxHead,f	;volatile
 10329                           
 10330                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10331  0D59  3008               	movlw	8
 10332  0D5A  027C               	subwf	_eusartRxHead,w	;volatile
 10333  0D5B  1803               	btfsc	3,0
 10334                           
 10335                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         eus
      +                          artRxHead = 0;
 10336  0D5C  01FC               	clrf	_eusartRxHead	;volatile
 10337                           
 10338                           ;mcc_generated_files/eusart.c: 211:     eusartRxCount++;
 10339  0D5D  3001               	movlw	1
 10340  0D5E  00F0               	movwf	??_EUSART_RxDataHandler
 10341  0D5F  0870               	movf	??_EUSART_RxDataHandler,w
 10342  0D60  0020               	movlb	0	; select bank0
 10343  0D61  07DF               	addwf	_eusartRxCount,f	;volatile
 10344  0D62  0008               	return
 10345  0D63                     __end_of_EUSART_RxDataHandler:	
 10346  007E                     btemp	set	126	;btemp
 10347  007E                     int$flags	set	126
 10348  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    73
    Data        49
    BSS         97
    Persistent  40
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     41      80
    BANK1            80      0      50
    BANK2            80      0      64
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2350$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Service$2350	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@d1	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Service@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    sp__memcpy	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonReleasedCallback(), 

    callback_pressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonPressedCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    S740$sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    S740$sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   28253
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4370
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23687
                                             40 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8793
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8694
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1446
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1       0
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1915
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1      88
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
 ---------------------------------------------------------------------------------
 (10) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      CF       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      CF      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jul 05 14:12:29 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                        ___bmul@product 0073  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 0BDE                             _Sensor_setCalibratAcqTime 0C1D  
                                         __CFG_LVP$ON 0000                                                   l239 0DA6  
                                                 l601 01AB                                                   l603 01C2  
                                                 l555 0217                                                   l820 0334  
                                                 l591 010B                                                   l584 0108  
                                                 l586 0104                                                   _GIE 005F  
                                                 _PR2 001B                                                   _abs 0D7A  
                              ??_EUSART_RxDataHandler 0070                        ?_EUSART_SetFramingErrorHandler 0071  
                             ?_Sensor_loadADCSettings 0072                                       _TMR2_Initialize 0BF4  
                                        __CFG_BORV$LO 0000                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0072                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 0073  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                                ?_abs 0071                                                  l3111 0FB4  
                                                l3113 0FB6                                                  l4003 01A2  
                                                l3301 056C                                                  l3117 0FC1  
                                                l4031 01C6                                                  l3305 0580  
                                                l4113 05BE                                                  l4105 05BA  
                                                l3091 0FE1                                                  l4051 01FC  
                                                l4035 01CE                                                  l4115 05D1  
                                                l4205 0D09                                                  l4045 01EA  
                                                l3253 0E3C                                                  l3095 0FF0  
                                                l3087 0FD3                                                  l4039 01D6  
                                                l4119 05EA                                                  l3415 0D37  
                                                l4223 0E79                                                  l4233 0C4E  
                                                l4241 0680                                                  l2801 0213  
                                                l4313 0393                                                  l4075 0D77  
                                                l3187 0434                                                  l2723 0EAE  
                                                l4171 06DE                                                  l4323 03B3  
                                                l4331 03E7                                                  l4307 0384  
                                                l4411 0DB5                                                  l4149 07B5  
                                                l4261 032B                                                  l2717 0E9D  
                                                l2821 0293                                                  l4181 06F9  
                                                l4165 06D6                                                  l4317 03A3  
                                                l4271 0628                                                  l4239 067C  
                                                l4255 02F3                                                  l2719 0EAC  
                                                l2815 026E                                                  l2729 0EBF  
                                                l2841 04E7                                                  l2833 04B4  
                                                l4097 05A7                                                  l4193 0722  
                                                l4185 0709                                                  l4177 06F1  
                                                l4329 03C4                                                  l3299 0564  
                                                l4355 0765                                                  l2835 04B8  
                                                l2819 0281                                                  l4371 0D22  
                                                l4283 0C61                                                  l4189 0719  
                                                l4391 0C70                                                  l3921 009E  
                                                l4377 0D2B                                                  l4297 0DD4  
                                                l2779 0C9C                                                  l4571 03D1  
                                                l3853 0CA6                                                  l2789 0C30  
                                                l3941 00D3                                                  l3925 00A8  
                                                l3909 0090                                                  l4573 03D6  
                                                l3951 00E5                                                  l3849 0CA0  
                                                l3891 009C                                                  l3991 016E  
                                                l3975 010E                                                  l3967 00FF  
                                                l3887 0082                                                  l3879 006E  
                                                l3889 0088                                                  l3897 008A  
                                                l3987 0153                                                  l3999 0188  
                       ?_Button_Reading_Update_Helper 0070                                                  _LATA 010C  
                                                _LATB 010D                                                  _LATC 010E  
                                                u2320 0FD1                                                  u2410 0FFD  
                                                u2350 0FDF                                                  u4115 0309  
                                                u2380 0FEE                                                  u4215 0729  
                                                u2720 054B                                                  u2545 03FC  
                                                u1905 04D9                                                  u2715 0513  
                                                u2555 0442                                                  u2725 0547  
                                                u4085 06A9                                                  u1855 02A7  
                                                u1785 0D83                                                  u1875 0498  
                                                u2915 0D3A                                                  u1885 04A2  
                                                u3905 0F5C                                                  u3915 0EEB  
                                                u3885 05D8                            Button_State_Pressed@button 0024  
                                                _TMR2 001A                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01BE  
                            _Sensor_getScanGroupIndex 0E9B                             ?_Sensor_Acq_ExecutePacket 007B  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0071                                                  _main 0D91  
                __size_of_MTOUCH_Button_InitializeAll 001C                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                  __size_of_MTOUCH_Sensor_InitializeAll 000E  
                                                btemp 007E                                                  start 0015  
                                   ___bmul@multiplier 0074                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                        __end_of_Sensor_autoCalibration 0503  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1005          Sensor_Scanfrequency_Evaluation@frequency_hop 1000  
                            _myButtonReleasedCallback 0B7E                              ?_MTOUCH_Service_Mainloop 0070  
                       __size_of_Button_State_Pressed 0066                                                 ??_abs 0073  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 0078  
                       ??_MTOUCH_Sensor_RawSample_Get 0077                         Sensor_RawSample_Update@sensor 0077  
                       myButtonPressedCallback@button 0071                             __size_of_Sensor_isEnabled 0010  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 0BC4  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0036                   __end_of_Sensor_isCalibratingAcqTime 0BF4  
                         _Sensor_isCalibratingAcqTime 0BEC                                                 ?_main 0070  
                                       __CFG_WDTE$OFF 0000                        __end_of_Sensor_loadADCSettings 02B4  
                                               _T2CON 001C                               __size_of_Button_Service 0055  
                                               i1l145 0013                                                 _RCREG 0199  
                                               _RCSTA 019D                                                 _TRISA 008C  
                                               _TRISB 008D                                                 _TRISC 008E  
                                               _TXREG 019A                                                 _TXSTA 019E  
                     __size_of_Button_DefaultCallback 0001                                  ??_MTOUCH_needReburst 0071  
                     __size_of_Sensor_DefaultCallback 0001                               __size_of_Sensor_Service 0093  
               __end_of_MTOUCH_Sensor_Scan_Initialize 0C8E                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 0C7E                                        _WDT_Initialize 0B91  
                             Sensor_setSampled@sensor 0071                      __size_of_Button_State_NotPressed 00A3  
                                               pclath 000A                                  _Sensor_Sampled_Reset 0BE5  
                                               status 0003                                                 wtemp0 007E  
                                     _TMR2_StartTimer 0B84                      __size_of_TMR2_LoadPeriodRegister 0005  
                           __size_of_Sensor_setActive 0007                                Sensor_isEnabled@sensor 0072  
                                     __initialization 0017                                          __end_of_main 0DAA  
                                _Sensor_setCalibrated 0C05                               __end_of_TMR2_Initialize 0BFC  
                                      __CFG_LPBOR$OFF 0000                           ?_INTERRUPT_InterruptManager 0070  
                      ??_EUSART_SetRxInterruptHandler 0073                      __end_of_MTOUCH_Button_Initialize 0F8E  
                                              ??_main 007C                               _MTOUCH_Sensor_Calibrate 0CAF  
                           Sensor_Service@sensor_adc1 0044                             Sensor_Service@sensor_adc2 0045  
                             ??_Button_Reading_Update 007C                  MTOUCH_Sensor_Sampled_ResetAll@sensor 0073  
                            ?_Button_Deviation_Update 0070                                __end_of_WDT_Initialize 0B95  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0077  
           __end_of_EUSART_DefaultFramingErrorHandler 0B7E            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0070                    ?_EUSART_DefaultFramingErrorHandler 0070  
                   _EUSART_DefaultFramingErrorHandler 0B7D                            _EUSART_OverrunErrorHandler 00CE  
                __size_of_MTOUCH_Sensor_RawSample_Get 0017                                                _APFCON 011D  
                                              _ANSELA 018C                                                _ANSELB 018D  
                                              _ANSELC 018E                                                _BORCON 0116  
                                              i1l3593 0F47                                                i1l3587 0F39  
                                              i1l3597 0F55                                 ?_Sensor_Sampled_Reset 0070  
                                              _OSCCON 0099                                                _SPBRGH 019C  
                                              _SPBRGL 019B                                                _WDTCON 0097  
                   MTOUCH_Button_InitializeAll@button 0020                        ??_Button_Reading_Update_Helper 0079  
                              _Button_DefaultCallback 0B7F                       __end_of_MTOUCH_Service_Mainloop 0DC6  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 0BFC  
                              _Sensor_DefaultCallback 0B80                                         _packet_sample 0051  
                                              ___bmul 0C9E                                 ?_Sensor_setCalibrated 0070  
                        Sensor_DefaultCallback@sensor 0071                                        __CFG_STVREN$ON 0000  
                    __size_of_myButtonPressedCallback 003B                                                _memcpy 0E70  
                    __end_of_MTOUCH_Button_ServiceAll 0C7E                          Sensor_autoCalibration@sensor 007A  
                             _MTOUCH_Sensor_SampleAll 0D20                          Button_DefaultCallback@button 0071  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0724  
                             ?_Button_Baseline_Update 0070                   Sensor_postAcquisitionProcess@sensor 0079  
                             __end_of_TMR2_StartTimer 0B87                    __size_of_Sensor_setCalibratAcqTime 000D  
            __end_of_MTOUCH_Button_SetPressedCallback 0BA6             __size_of_MTOUCH_Button_SetPressedCallback 0006  
                  ??_MTOUCH_Button_SetPressedCallback 0073                     ?_MTOUCH_Button_SetPressedCallback 0071  
                    _MTOUCH_Button_SetPressedCallback 0BA0                              __size_of_Sensor_isActive 000D  
                     MTOUCH_Sensor_RawSample_Get@name 0078                   Sensor_getScanGroupIndex@sensorGroup 0074  
                                   _SYSTEM_Initialize 0CD1                               __end_of__initialization 0047  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0075                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 0061                            __end_of_Button_Tick_helper 0E70  
                       MTOUCH_Sensor_Calibrate@sensor 0076           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024  
                                 ___bmul@multiplicand 0071                                        __pcstackCOMMON 0070  
                                        __pidataBANK0 0C37                                          __pidataBANK1 0DFF  
         __end_of_MTOUCH_Button_SetNotPressedCallback 0BA0          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 0B9A                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 0D4C                      __end_of_MTOUCH_Sensor_Initialize 0D20  
                           ??_MTOUCH_Sensor_Calibrate 0075                                      _Sensor_isEnabled 0C8E  
                                    ?_TMR2_Initialize 0070                       __end_of_Button_Deviation_Update 058A  
                            Sensor_setInactive@sensor 0071                                        _Button_Service 0724  
                    __end_of_Sensor_Acq_ExecutePacket 0209                            ?_Button_State_Initializing 0024  
                                Button_Service@button 002C                                        _OPTION_REGbits 0095  
                               ??_Sensor_isCalibrated 0071                            ??_Sensor_getScanGroupIndex 0071  
                                _eusartRxStatusBuffer 0049                        __end_of_Button_Baseline_Update 0479  
                 Sensor_Acq_ExecutePacket@sensor_adc1 002D                   Sensor_Acq_ExecutePacket@sensor_adc2 007B  
                            _MTOUCH_Button_Initialize 0F58                       ??_EUSART_SetOverrunErrorHandler 0073  
                                      _Sensor_Service 0357                               _Button_State_NotPressed 02B4  
                       __size_of_MTOUCH_Sensor_Enable 0011                                    _Sensor_setInactive 0BD7  
                                   _sensor_scan_group 1005                             __end_of_SYSTEM_Initialize 0CE3  
                                   _lowpowerActivated 005A                      MTOUCH_Sensor_isCalibrated@sensor 0076  
                              ??_Sensor_Sampled_Reset 0071                                            __pbssBANK0 0049  
                                          __pbssBANK1 00C4                                            __pbssBANK2 0120  
                             _TMR2_LoadPeriodRegister 0B95                            ??_myButtonReleasedCallback 0072  
                        Sensor_loadADCSettings@sensor 0079                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 0BD0                           __size_of_EUSART_Receive_ISR 0032  
                          __end_of_mtouch_button_init 0806           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025  
                              ??_Sensor_setCalibrated 0071                                            __pmaintext 0D91  
                                             ?___bmul 0071                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                      MTOUCH_Sensor_wasSampled@sensor 0076                                            __pintentry 0004  
                              __end_of_Button_Service 0779                                               ?_memcpy 0071  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 0DE2                           _MTOUCH_Button_InitializeAll 0DC6  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 0C6E                           _MTOUCH_Sensor_InitializeAll 0C60  
                           ??_MTOUCH_Sensor_SampleAll 0046                       __end_of_Sensor_RawSample_Update 0E49  
                                ??_Sensor_setInactive 0071                     __size_of_MTOUCH_Sensor_wasSampled 000E  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 005F  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0071  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 06C8  
                              __end_of_Sensor_Service 03EA                               Sensor_Service@scanGroup 0042  
                            _MTOUCH_Button_ServiceAll 0C6E                             __end_of_sensor_scan_group 1009  
                       __size_of_EUSART_RxDataHandler 0017                      __size_of_MTOUCH_Service_Mainloop 001C  
                        __end_of_Button_State_Pressed 0666                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 0073                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 0079                       Sensor_setCalibratAcqTime@sensor 0071  
                                __size_of_MTOUCH_Tick 0003                   Sensor_loadADCSettings@addressOffset 0078  
                __size_of_Sensor_isCalibratingAcqTime 0008                 Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021  
                                   ??_Sensor_isActive 0071                   __size_of_EUSART_DefaultErrorHandler 0003  
               __end_of_Sensor_postAcquisitionProcess 0FC5                __size_of_Sensor_postAcquisitionProcess 0037  
                       _Sensor_postAcquisitionProcess 0F8E                               _myButtonPressedCallback 0FC5  
                             Sensor_Acquisition@retry 003D                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                        MTOUCH_Button_Initialize@button 007A  
                                         _AD2CON0bits 0791                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 0CD1  
                                             __ptext2 0B91                                               __ptext3 0BF4  
                                             __ptext4 0DE2                                               __ptext5 0BBE  
                                             __ptext6 0C11                                               __ptext7 0C60  
                                             __ptext8 0D0B                                               __ptext9 0CC0  
                                             _dir_mes 005C                           Button_Reading_Update@button 0020  
                            _MTOUCH_Sensor_Initialize 0D0B                                 _OSCILLATOR_Initialize 0BBE  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                           ??_Button_State_NotPressed 0025                                       ?_Sensor_Service 0070  
                            ??_PIN_MANAGER_Initialize 0071                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 0C52  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 004B  
                                    _callback_sampled 006B                             ??_TMR2_LoadPeriodRegister 0071  
                     Sensor_RawSample_Update@adcIndex 0076                            __size_of_SYSTEM_Initialize 0012  
                                             clrloop0 0BC5                                      _callback_pressed 0069  
                      MTOUCH_Sensor_Initialize@sensor 0078                                  end_of_initialization 0047  
                             ?_Button_DefaultCallback 0071                 __end_of_EUSART_SetOverrunErrorHandler 0BB8  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 0BB2  
                                             memcpy@d 007A                                               memcpy@n 0073  
                                             memcpy@s 0077                                               init_ram 0BCA  
                                             initloop 0BCB                               ?_Sensor_DefaultCallback 0071  
                       Sensor_Acquisition@sensor_adc1 003E                         Sensor_Acquisition@sensor_adc2 003B  
                    __size_of_Button_Deviation_Update 0087                                     _EUSART_Initialize 0EF6  
                        ??_MTOUCH_Sensor_isCalibrated 0075                                    ?_EUSART_Initialize 0070  
                 __end_of_MTOUCH_Sensor_RawSample_Get 0D7A                           _MTOUCH_Sensor_RawSample_Get 0D63  
                                           _RCSTAbits 019D                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                                Sensor_setActive@sensor 0071  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 0034  
                       Button_Deviation_Update@button 0020                  Sensor_Acq_ExecutePacket@AD1CON2_temp 0022  
            MTOUCH_Button_SetPressedCallback@callback 0071                            MTOUCH_Sensor_Enable@sensor 0076  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0023                                   _callback_notPressed 0067  
                 __size_of_MTOUCH_Sensor_isCalibrated 0015                        __end_of_Button_DefaultCallback 0B80  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032  
                                  _sensor_globalFlags 0059                              __end_of_Sensor_isEnabled 0C9E  
                          Sensor_setCalibrated@sensor 0071                        __end_of_Sensor_DefaultCallback 0B81  
                    __end_of_myButtonReleasedCallback 0B7F                             __end_of_EUSART_Initialize 0F26  
                            ??_Sensor_autoCalibration 0075                                             _TXSTAbits 019E  
                           ??_myButtonPressedCallback 0072                      __size_of_Sensor_RawSample_Update 0026  
                                  _Sensor_Acquisition 06C8                              ??_Sensor_loadADCSettings 0073  
                                _Button_State_Pressed 0600                                        __end_of___bmul 0CAF  
                  __end_of_EUSART_DefaultErrorHandler 0B84                            _EUSART_DefaultErrorHandler 0B81  
                                 ?_Sensor_Acquisition 003B                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                    _Button_Tick_helper 0E49  
                                      __end_of_memcpy 0E9B                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 0BD7  
                    TMR2_LoadPeriodRegister@periodVal 0071                           ??_Button_State_Initializing 0025  
                                 start_initialization 0017                               _MTOUCH_Service_Mainloop 0DAA  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 0D36  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 0D91  
                                      _TMR2_StopTimer 0B87          EUSART_SetRxInterruptHandler@interruptHandler 0071  
                                ??_Sensor_Acquisition 003C                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 0024                        Sensor_autoCalibration@adcIndex 0079  
                      ?_EUSART_SetOverrunErrorHandler 0071                      __end_of_MTOUCH_Sensor_wasSampled 0C60  
                                ??_Button_Tick_helper 0071                          __end_of_MTOUCH_Sensor_Enable 0CD1  
                                        _packet_noise 0055                            _EUSART_FramingErrorHandler 00D0  
                                            ??___bmul 0072                                 ?_Button_State_Pressed 0024  
                              _EUSART_SetErrorHandler 0BA6                            ??_MTOUCH_Button_ServiceAll 002D  
                                         __pdataBANK0 0061                                           __pdataBANK1 00A0  
                                            ??_memcpy 0075                           __end_of_Sensor_isCalibrated 0C05  
                        ??_Button_Baseline_Initialize 0020                                         _sample_period 006D  
                                ??_MTOUCH_Button_Tick 0074                                    _mtouch_button_init 07C6  
                          Sensor_Sampled_Reset@sensor 0071                          ?_Sensor_isCalibratingAcqTime 0070  
                     __end_of_myButtonPressedCallback 1000                                __end_of_TMR2_StopTimer 0B8A  
                                         __pbssCOMMON 007C                                             ___latbits 0002  
                                       __pcstackBANK0 0020                           _Sensor_loadADCSettings$1137 0076  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 0C2A  
                      MTOUCH_Button_ServiceAll@button 002E                                   Sensor_Service@error 0043  
                          __end_of_EUSART_Receive_ISR 0F58                         __size_of_Sensor_Sampled_Reset 0007  
                          __size_of_EUSART_Initialize 0030                               _Button_Deviation_Update 0503  
                          ?_Sensor_setCalibratAcqTime 0070                      _EUSART_RxDefaultInterruptHandler 006E  
                           _Button_State_Initializing 0666                    __end_of_MTOUCH_Sensor_isCalibrated 0D0B  
                          _MTOUCH_Sensor_isCalibrated 0CF6                                             __pnvBANK0 006E  
                                           __pnvBANK1 00CC                       __size_of_Sensor_autoCalibration 008A  
                   __size_of_Sensor_getScanGroupIndex 002D                                     _Sensor_setSampled 0BDE  
                           ?_Sensor_getScanGroupIndex 0070                          __end_of_EUSART_RxDataHandler 0D63  
                              _PIN_MANAGER_Initialize 0DE2                                      ??_Button_Service 0029  
                            ?_MTOUCH_Sensor_Calibrate 0070                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                       __size_of_Sensor_setCalibrated 000C                       __size_of_Sensor_loadADCSettings 00AB  
                                            _AAD1CON2 0713                                              _AAD1CON3 0714  
                                            _AAD2CON3 0794                                              _AAD1RES0 071A  
                                        _eusartRxHead 007C                                              _AAD2RES0 079A  
                                        _eusartRxTail 0060                                      ??_Sensor_Service 003F  
                          ??_Sensor_Acq_ExecutePacket 0020                          ??_INTERRUPT_InterruptManager 0071  
                                           _bt_status 0057                                   ??_Sensor_setSampled 0071  
                   __size_of_myButtonReleasedCallback 0001                             ?_myButtonReleasedCallback 0071  
                           ??_MTOUCH_Service_Mainloop 0048                                              _ADCOMCON 0712  
                         __size_of_Sensor_setInactive 0007                        Sensor_Acq_ExecutePacket@last_a 0028  
                      Sensor_Acq_ExecutePacket@last_b 002A                                       ?_TMR2_StopTimer 0070  
                       ??_Sensor_isCalibratingAcqTime 0071                                         ??_MTOUCH_Tick 0076  
                                           _busy_flag 005D                                        _eusartRxBuffer 00C4  
                           __end_of_Sensor_setSampled 0BE5                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0071                                              _LATCbits 010E  
                             _Sensor_RawSample_Update 0E23                     __end_of_Sensor_setCalibratAcqTime 0C2A  
                                           clear_ram0 0BC4                                              _PIE1bits 0091  
                                   _eusartRxLastError 005E                              __size_of_TMR2_StartTimer 0003  
                 __size_of_INTERRUPT_InterruptManager 0011                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0073                Sensor_Acq_ExecutePacket@packet_counter 002C  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0025  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 0CF6               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 0CE3                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 0B91            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 0B8D                    Sensor_Acq_ExecutePacket@ADxIF_flag 0026  
                            _MTOUCH_Sensor_wasSampled 0C52                                    _mtouch_time_toScan 005B  
                            ??_Button_Baseline_Update 0071                               __end_of_Sensor_isActive 0C37  
                              _Sensor_autoCalibration 0479                            __end_of_MTOUCH_needReburst 0004  
                      myButtonReleasedCallback@button 0071                                _Sensor_loadADCSettings 0209  
                                _MTOUCH_Sensor_Enable 0CC0                              Button_Tick_helper@button 0073  
                           ??_Button_Deviation_Update 0071                                 _Button_Reading_Update 0C44  
                                   ?_Sensor_isEnabled 0070                                     ??_TMR2_Initialize 0071  
                                 __end_of_MTOUCH_Tick 0B8D                                     _MTOUCH_Initialize 0C11  
                     __end_of_MTOUCH_Sensor_Calibrate 0CC0                                    ??_Sensor_isEnabled 0071  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0076  
                                           memcpy@tmp 0076                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 0071                    __end_of_Button_Baseline_Initialize 0EF6  
                          _Button_Baseline_Initialize 0EC8                                   _EUSART_ErrorHandler 00CC  
                                 ??_MTOUCH_Initialize 007C                           ?_EUSART_DefaultErrorHandler 0070  
                            ?_Button_State_NotPressed 0024                                    Button_Service@name 002B  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0071                  Sensor_Scanfrequency_Evaluation@retry 0035  
                                  ??_Sensor_setActive 0071                                  _EUSART_RxDataHandler 0D4C  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 0DC6  
                                            __ptext11 0E70                                              __ptext20 0D36  
                                            __ptext12 0EF6                                              __ptext21 0E49  
                                            __ptext13 0BB8                                              __ptext30 0F8E  
                                            __ptext22 0CE3                                              __ptext14 0BB2  
                                            __ptext31 0BD7                                              __ptext23 0BE5  
                                            __ptext15 0BAC                                              __ptext40 0C8E  
                                            __ptext32 0BD0                                              __ptext24 0D20  
                                            __ptext16 0BA6                                              __ptext41 0C2A  
                                            __ptext33 058A                                              __ptext25 0357  
                                            __ptext17 0DAA                                              __ptext50 0724  
                                            __ptext42 0479                                              __ptext34 004B  
                                            __ptext26 0BDE                                              __ptext18 0002  
                                            __ptext51 0C52                                              __ptext43 0D7A  
                                            __ptext35 0B87                                              __ptext27 0E23  
                                            __ptext19 0B8A                                              __ptext60 0CAF  
                                            __ptext52 0CF6                                              __ptext44 0C05  
                                            __ptext36 0B84                                              __ptext28 0B80  
                                            __ptext61 03EA                                              __ptext53 02B4  
                                            __ptext45 0C1D                                              __ptext37 0B95  
                                            __ptext29 06C8                                              __ptext62 0EC8  
                                            __ptext54 0666                                              __ptext46 0BEC  
                                            __ptext38 0209                                              __ptext71 0F26  
                                            __ptext63 0C44                                              __ptext55 0600  
                                            __ptext47 0E9B                                              __ptext39 0BFC  
                                            __ptext72 0B8D                                              __ptext64 0779  
                                            __ptext56 0FC5                                              __ptext48 0C7E  
                                            __ptext73 0B7D                                              __ptext65 0D63  
                                            __ptext57 0B7F                                              __ptext49 0C6E  
                                            __ptext74 0B81                                              __ptext66 0C9E  
                                            __ptext58 0B7E                                              __ptext75 0D4C  
                                            __ptext67 0503                                              __ptext59 0F58  
                                            __ptext68 0BA0                                              __ptext69 0B9A  
                           __end_of_MTOUCH_Initialize 0C1D                             ??_Sensor_RawSample_Update 0075  
                          __size_of_Sensor_setSampled 0007                                         __size_of_main 0019  
                     __end_of_MTOUCH_Sensor_SampleAll 0D36                      Sensor_Scanfrequency_Evaluation@i 003A  
                             ?_EUSART_SetErrorHandler 0071         EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                                            int$flags 007E                    __size_of_Button_State_Initializing 0062  
                                   ??_TMR2_StartTimer 0071                    __end_of_INTERRUPT_InterruptManager 0015  
                          _INTERRUPT_InterruptManager 0004                 __end_of_EUSART_SetFramingErrorHandler 0BB2  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 0BAC  
                     __size_of_Button_Baseline_Update 008F                          ?_MTOUCH_Button_InitializeAll 0070  
                        MTOUCH_Sensor_SampleAll@group 0047                          ?_MTOUCH_Sensor_InitializeAll 0070  
                                    ?_Sensor_isActive 0070                                         _mtouch_button 0120  
                                          _INTCONbits 000B                                 ?_EUSART_RxDataHandler 0070  
                                       _mtouch_sensor 00A0                                              memcpy@d1 0079  
                                            memcpy@s1 0071                      __end_of_Sensor_getScanGroupIndex 0EC8  
                                   __CFG_BOREN$NSLEEP 0000                                           _MTOUCH_Tick 0B8A  
                              ?_Button_Reading_Update 0070                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0079  
                   __size_of_MTOUCH_Button_Initialize 0036                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 005C  
                            ?_myButtonPressedCallback 0071               __end_of_Sensor_Scanfrequency_Evaluation 0600  
            __size_of_Sensor_Scanfrequency_Evaluation 0076                     ??_Sensor_Scanfrequency_Evaluation 002F  
                    ?_Sensor_Scanfrequency_Evaluation 002E                       _Sensor_Scanfrequency_Evaluation 058A  
                             ?_PIN_MANAGER_Initialize 0070                           ??_Sensor_setCalibratAcqTime 0071  
                      __end_of_EUSART_SetErrorHandler 0BAC                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 0BBE  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 0BB8  
                         __size_of_Button_Tick_helper 0027                       __end_of_Button_State_NotPressed 0357  
                                  _EUSART_Receive_ISR 0F26         EUSART_SetFramingErrorHandler@interruptHandler 0071  
                        __end_of_Sensor_Sampled_Reset 0BEC                                      ??_TMR2_StopTimer 0071  
                     __end_of_TMR2_LoadPeriodRegister 0B9A                           __size_of_MTOUCH_Button_Tick 0016  
                                       __pstringtext1 1000                                         __pstringtext2 1005  
                                       __pstringtext3 07C6                                   ?_EUSART_Receive_ISR 0070  
                       ??_MTOUCH_Button_InitializeAll 007B                              ??_Button_DefaultCallback 0072  
                       ??_MTOUCH_Sensor_InitializeAll 0079                  Sensor_Acq_ExecutePacket@activeSensor 0027  
                    __size_of_MTOUCH_Sensor_Calibrate 0011                                ??_MTOUCH_Sensor_Enable 0075  
                   Sensor_isCalibratingAcqTime@sensor 0071                          __size_of_Sensor_isCalibrated 0009  
                            ??_Sensor_DefaultCallback 0072                          __end_of_Sensor_setCalibrated 0C11  
                __end_of_Button_Reading_Update_Helper 07C6                 __size_of_Button_Reading_Update_Helper 004D  
                        _Button_Reading_Update_Helper 0779                     __size_of_MTOUCH_Button_ServiceAll 0010  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 0024  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 0DFF  
                              _Button_Baseline_Update 03EA                                  ??_EUSART_Receive_ISR 0071  
                          ??_MTOUCH_Sensor_wasSampled 0075  
