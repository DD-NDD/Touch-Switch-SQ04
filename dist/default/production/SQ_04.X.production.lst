

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jul 05 15:04:20 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2,group=1
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	intentry,global,class=CODE,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	dabs	1,0x7E,2
   103  0000                     
   104                           ; Version 2.05
   105                           ; Generated 20/12/2018 GMT
   106                           ; 
   107                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   108                           ; All rights reserved.
   109                           ; 
   110                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   111                           ; 
   112                           ; Redistribution and use in source and binary forms, with or without modification, are
   113                           ; permitted provided that the following conditions are met:
   114                           ; 
   115                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   116                           ;        conditions and the following disclaimer.
   117                           ; 
   118                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   119                           ;        of conditions and the following disclaimer in the documentation and/or other
   120                           ;        materials provided with the distribution.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC16LF1559 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  009F                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  0116                     	;# 
   184  0117                     	;# 
   185  011D                     	;# 
   186  018C                     	;# 
   187  018D                     	;# 
   188  018E                     	;# 
   189  0191                     	;# 
   190  0191                     	;# 
   191  0192                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0194                     	;# 
   195  0195                     	;# 
   196  0196                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019C                     	;# 
   202  019D                     	;# 
   203  019E                     	;# 
   204  019F                     	;# 
   205  020C                     	;# 
   206  020D                     	;# 
   207  0211                     	;# 
   208  0211                     	;# 
   209  0212                     	;# 
   210  0212                     	;# 
   211  0213                     	;# 
   212  0213                     	;# 
   213  0214                     	;# 
   214  0214                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0216                     	;# 
   219  0216                     	;# 
   220  0217                     	;# 
   221  0217                     	;# 
   222  0391                     	;# 
   223  0392                     	;# 
   224  0393                     	;# 
   225  0394                     	;# 
   226  0395                     	;# 
   227  0396                     	;# 
   228  0611                     	;# 
   229  0612                     	;# 
   230  0613                     	;# 
   231  0613                     	;# 
   232  0614                     	;# 
   233  0615                     	;# 
   234  0616                     	;# 
   235  0616                     	;# 
   236  0711                     	;# 
   237  0711                     	;# 
   238  0711                     	;# 
   239  0712                     	;# 
   240  0712                     	;# 
   241  0713                     	;# 
   242  0713                     	;# 
   243  0713                     	;# 
   244  0714                     	;# 
   245  0714                     	;# 
   246  0714                     	;# 
   247  0715                     	;# 
   248  0715                     	;# 
   249  0716                     	;# 
   250  0716                     	;# 
   251  0716                     	;# 
   252  0716                     	;# 
   253  0717                     	;# 
   254  0717                     	;# 
   255  0717                     	;# 
   256  0717                     	;# 
   257  0718                     	;# 
   258  0718                     	;# 
   259  0718                     	;# 
   260  0719                     	;# 
   261  0719                     	;# 
   262  0719                     	;# 
   263  0719                     	;# 
   264  071A                     	;# 
   265  071A                     	;# 
   266  071A                     	;# 
   267  071A                     	;# 
   268  071A                     	;# 
   269  071B                     	;# 
   270  071B                     	;# 
   271  071C                     	;# 
   272  071C                     	;# 
   273  071C                     	;# 
   274  071C                     	;# 
   275  071C                     	;# 
   276  071D                     	;# 
   277  071D                     	;# 
   278  071E                     	;# 
   279  071E                     	;# 
   280  0791                     	;# 
   281  0791                     	;# 
   282  0793                     	;# 
   283  0793                     	;# 
   284  0794                     	;# 
   285  0794                     	;# 
   286  0796                     	;# 
   287  0796                     	;# 
   288  0796                     	;# 
   289  0797                     	;# 
   290  0797                     	;# 
   291  0797                     	;# 
   292  0798                     	;# 
   293  0798                     	;# 
   294  0799                     	;# 
   295  0799                     	;# 
   296  0799                     	;# 
   297  079A                     	;# 
   298  079A                     	;# 
   299  079A                     	;# 
   300  079B                     	;# 
   301  079C                     	;# 
   302  079C                     	;# 
   303  079C                     	;# 
   304  079D                     	;# 
   305  079E                     	;# 
   306  079E                     	;# 
   307  0F8C                     	;# 
   308  0F8D                     	;# 
   309  0F91                     	;# 
   310  0F96                     	;# 
   311  0F97                     	;# 
   312  0F9C                     	;# 
   313  0F9D                     	;# 
   314  0F9E                     	;# 
   315  0FE3                     	;# 
   316  0FE4                     	;# 
   317  0FE5                     	;# 
   318  0FE6                     	;# 
   319  0FE7                     	;# 
   320  0FE8                     	;# 
   321  0FE9                     	;# 
   322  0FEA                     	;# 
   323  0FEB                     	;# 
   324  0FED                     	;# 
   325  0FEE                     	;# 
   326  0FEF                     	;# 
   327  0000                     	;# 
   328  0001                     	;# 
   329  0002                     	;# 
   330  0003                     	;# 
   331  0004                     	;# 
   332  0005                     	;# 
   333  0006                     	;# 
   334  0007                     	;# 
   335  0008                     	;# 
   336  0009                     	;# 
   337  000A                     	;# 
   338  000B                     	;# 
   339  000C                     	;# 
   340  000D                     	;# 
   341  000E                     	;# 
   342  0011                     	;# 
   343  0012                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0016                     	;# 
   347  0017                     	;# 
   348  0018                     	;# 
   349  0019                     	;# 
   350  001A                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  008C                     	;# 
   354  008D                     	;# 
   355  008E                     	;# 
   356  0091                     	;# 
   357  0092                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009B                     	;# 
   365  009C                     	;# 
   366  009D                     	;# 
   367  009E                     	;# 
   368  009F                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  0116                     	;# 
   373  0117                     	;# 
   374  011D                     	;# 
   375  018C                     	;# 
   376  018D                     	;# 
   377  018E                     	;# 
   378  0191                     	;# 
   379  0191                     	;# 
   380  0192                     	;# 
   381  0193                     	;# 
   382  0193                     	;# 
   383  0194                     	;# 
   384  0195                     	;# 
   385  0196                     	;# 
   386  0199                     	;# 
   387  019A                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019C                     	;# 
   391  019D                     	;# 
   392  019E                     	;# 
   393  019F                     	;# 
   394  020C                     	;# 
   395  020D                     	;# 
   396  0211                     	;# 
   397  0211                     	;# 
   398  0212                     	;# 
   399  0212                     	;# 
   400  0213                     	;# 
   401  0213                     	;# 
   402  0214                     	;# 
   403  0214                     	;# 
   404  0215                     	;# 
   405  0215                     	;# 
   406  0215                     	;# 
   407  0216                     	;# 
   408  0216                     	;# 
   409  0217                     	;# 
   410  0217                     	;# 
   411  0391                     	;# 
   412  0392                     	;# 
   413  0393                     	;# 
   414  0394                     	;# 
   415  0395                     	;# 
   416  0396                     	;# 
   417  0611                     	;# 
   418  0612                     	;# 
   419  0613                     	;# 
   420  0613                     	;# 
   421  0614                     	;# 
   422  0615                     	;# 
   423  0616                     	;# 
   424  0616                     	;# 
   425  0711                     	;# 
   426  0711                     	;# 
   427  0711                     	;# 
   428  0712                     	;# 
   429  0712                     	;# 
   430  0713                     	;# 
   431  0713                     	;# 
   432  0713                     	;# 
   433  0714                     	;# 
   434  0714                     	;# 
   435  0714                     	;# 
   436  0715                     	;# 
   437  0715                     	;# 
   438  0716                     	;# 
   439  0716                     	;# 
   440  0716                     	;# 
   441  0716                     	;# 
   442  0717                     	;# 
   443  0717                     	;# 
   444  0717                     	;# 
   445  0717                     	;# 
   446  0718                     	;# 
   447  0718                     	;# 
   448  0718                     	;# 
   449  0719                     	;# 
   450  0719                     	;# 
   451  0719                     	;# 
   452  0719                     	;# 
   453  071A                     	;# 
   454  071A                     	;# 
   455  071A                     	;# 
   456  071A                     	;# 
   457  071A                     	;# 
   458  071B                     	;# 
   459  071B                     	;# 
   460  071C                     	;# 
   461  071C                     	;# 
   462  071C                     	;# 
   463  071C                     	;# 
   464  071C                     	;# 
   465  071D                     	;# 
   466  071D                     	;# 
   467  071E                     	;# 
   468  071E                     	;# 
   469  0791                     	;# 
   470  0791                     	;# 
   471  0793                     	;# 
   472  0793                     	;# 
   473  0794                     	;# 
   474  0794                     	;# 
   475  0796                     	;# 
   476  0796                     	;# 
   477  0796                     	;# 
   478  0797                     	;# 
   479  0797                     	;# 
   480  0797                     	;# 
   481  0798                     	;# 
   482  0798                     	;# 
   483  0799                     	;# 
   484  0799                     	;# 
   485  0799                     	;# 
   486  079A                     	;# 
   487  079A                     	;# 
   488  079A                     	;# 
   489  079B                     	;# 
   490  079C                     	;# 
   491  079C                     	;# 
   492  079C                     	;# 
   493  079D                     	;# 
   494  079E                     	;# 
   495  079E                     	;# 
   496  0F8C                     	;# 
   497  0F8D                     	;# 
   498  0F91                     	;# 
   499  0F96                     	;# 
   500  0F97                     	;# 
   501  0F9C                     	;# 
   502  0F9D                     	;# 
   503  0F9E                     	;# 
   504  0FE3                     	;# 
   505  0FE4                     	;# 
   506  0FE5                     	;# 
   507  0FE6                     	;# 
   508  0FE7                     	;# 
   509  0FE8                     	;# 
   510  0FE9                     	;# 
   511  0FEA                     	;# 
   512  0FEB                     	;# 
   513  0FED                     	;# 
   514  0FEE                     	;# 
   515  0FEF                     	;# 
   516  0000                     	;# 
   517  0001                     	;# 
   518  0002                     	;# 
   519  0003                     	;# 
   520  0004                     	;# 
   521  0005                     	;# 
   522  0006                     	;# 
   523  0007                     	;# 
   524  0008                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  000E                     	;# 
   531  0011                     	;# 
   532  0012                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0016                     	;# 
   536  0017                     	;# 
   537  0018                     	;# 
   538  0019                     	;# 
   539  001A                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  008C                     	;# 
   543  008D                     	;# 
   544  008E                     	;# 
   545  0091                     	;# 
   546  0092                     	;# 
   547  0095                     	;# 
   548  0096                     	;# 
   549  0097                     	;# 
   550  0099                     	;# 
   551  009A                     	;# 
   552  009B                     	;# 
   553  009B                     	;# 
   554  009C                     	;# 
   555  009D                     	;# 
   556  009E                     	;# 
   557  009F                     	;# 
   558  010C                     	;# 
   559  010D                     	;# 
   560  010E                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  011D                     	;# 
   564  018C                     	;# 
   565  018D                     	;# 
   566  018E                     	;# 
   567  0191                     	;# 
   568  0191                     	;# 
   569  0192                     	;# 
   570  0193                     	;# 
   571  0193                     	;# 
   572  0194                     	;# 
   573  0195                     	;# 
   574  0196                     	;# 
   575  0199                     	;# 
   576  019A                     	;# 
   577  019B                     	;# 
   578  019B                     	;# 
   579  019C                     	;# 
   580  019D                     	;# 
   581  019E                     	;# 
   582  019F                     	;# 
   583  020C                     	;# 
   584  020D                     	;# 
   585  0211                     	;# 
   586  0211                     	;# 
   587  0212                     	;# 
   588  0212                     	;# 
   589  0213                     	;# 
   590  0213                     	;# 
   591  0214                     	;# 
   592  0214                     	;# 
   593  0215                     	;# 
   594  0215                     	;# 
   595  0215                     	;# 
   596  0216                     	;# 
   597  0216                     	;# 
   598  0217                     	;# 
   599  0217                     	;# 
   600  0391                     	;# 
   601  0392                     	;# 
   602  0393                     	;# 
   603  0394                     	;# 
   604  0395                     	;# 
   605  0396                     	;# 
   606  0611                     	;# 
   607  0612                     	;# 
   608  0613                     	;# 
   609  0613                     	;# 
   610  0614                     	;# 
   611  0615                     	;# 
   612  0616                     	;# 
   613  0616                     	;# 
   614  0711                     	;# 
   615  0711                     	;# 
   616  0711                     	;# 
   617  0712                     	;# 
   618  0712                     	;# 
   619  0713                     	;# 
   620  0713                     	;# 
   621  0713                     	;# 
   622  0714                     	;# 
   623  0714                     	;# 
   624  0714                     	;# 
   625  0715                     	;# 
   626  0715                     	;# 
   627  0716                     	;# 
   628  0716                     	;# 
   629  0716                     	;# 
   630  0716                     	;# 
   631  0717                     	;# 
   632  0717                     	;# 
   633  0717                     	;# 
   634  0717                     	;# 
   635  0718                     	;# 
   636  0718                     	;# 
   637  0718                     	;# 
   638  0719                     	;# 
   639  0719                     	;# 
   640  0719                     	;# 
   641  0719                     	;# 
   642  071A                     	;# 
   643  071A                     	;# 
   644  071A                     	;# 
   645  071A                     	;# 
   646  071A                     	;# 
   647  071B                     	;# 
   648  071B                     	;# 
   649  071C                     	;# 
   650  071C                     	;# 
   651  071C                     	;# 
   652  071C                     	;# 
   653  071C                     	;# 
   654  071D                     	;# 
   655  071D                     	;# 
   656  071E                     	;# 
   657  071E                     	;# 
   658  0791                     	;# 
   659  0791                     	;# 
   660  0793                     	;# 
   661  0793                     	;# 
   662  0794                     	;# 
   663  0794                     	;# 
   664  0796                     	;# 
   665  0796                     	;# 
   666  0796                     	;# 
   667  0797                     	;# 
   668  0797                     	;# 
   669  0797                     	;# 
   670  0798                     	;# 
   671  0798                     	;# 
   672  0799                     	;# 
   673  0799                     	;# 
   674  0799                     	;# 
   675  079A                     	;# 
   676  079A                     	;# 
   677  079A                     	;# 
   678  079B                     	;# 
   679  079C                     	;# 
   680  079C                     	;# 
   681  079C                     	;# 
   682  079D                     	;# 
   683  079E                     	;# 
   684  079E                     	;# 
   685  0F8C                     	;# 
   686  0F8D                     	;# 
   687  0F91                     	;# 
   688  0F96                     	;# 
   689  0F97                     	;# 
   690  0F9C                     	;# 
   691  0F9D                     	;# 
   692  0F9E                     	;# 
   693  0FE3                     	;# 
   694  0FE4                     	;# 
   695  0FE5                     	;# 
   696  0FE6                     	;# 
   697  0FE7                     	;# 
   698  0FE8                     	;# 
   699  0FE9                     	;# 
   700  0FEA                     	;# 
   701  0FEB                     	;# 
   702  0FED                     	;# 
   703  0FEE                     	;# 
   704  0FEF                     	;# 
   705  0000                     	;# 
   706  0001                     	;# 
   707  0002                     	;# 
   708  0003                     	;# 
   709  0004                     	;# 
   710  0005                     	;# 
   711  0006                     	;# 
   712  0007                     	;# 
   713  0008                     	;# 
   714  0009                     	;# 
   715  000A                     	;# 
   716  000B                     	;# 
   717  000C                     	;# 
   718  000D                     	;# 
   719  000E                     	;# 
   720  0011                     	;# 
   721  0012                     	;# 
   722  0015                     	;# 
   723  0016                     	;# 
   724  0016                     	;# 
   725  0017                     	;# 
   726  0018                     	;# 
   727  0019                     	;# 
   728  001A                     	;# 
   729  001B                     	;# 
   730  001C                     	;# 
   731  008C                     	;# 
   732  008D                     	;# 
   733  008E                     	;# 
   734  0091                     	;# 
   735  0092                     	;# 
   736  0095                     	;# 
   737  0096                     	;# 
   738  0097                     	;# 
   739  0099                     	;# 
   740  009A                     	;# 
   741  009B                     	;# 
   742  009B                     	;# 
   743  009C                     	;# 
   744  009D                     	;# 
   745  009E                     	;# 
   746  009F                     	;# 
   747  010C                     	;# 
   748  010D                     	;# 
   749  010E                     	;# 
   750  0116                     	;# 
   751  0117                     	;# 
   752  011D                     	;# 
   753  018C                     	;# 
   754  018D                     	;# 
   755  018E                     	;# 
   756  0191                     	;# 
   757  0191                     	;# 
   758  0192                     	;# 
   759  0193                     	;# 
   760  0193                     	;# 
   761  0194                     	;# 
   762  0195                     	;# 
   763  0196                     	;# 
   764  0199                     	;# 
   765  019A                     	;# 
   766  019B                     	;# 
   767  019B                     	;# 
   768  019C                     	;# 
   769  019D                     	;# 
   770  019E                     	;# 
   771  019F                     	;# 
   772  020C                     	;# 
   773  020D                     	;# 
   774  0211                     	;# 
   775  0211                     	;# 
   776  0212                     	;# 
   777  0212                     	;# 
   778  0213                     	;# 
   779  0213                     	;# 
   780  0214                     	;# 
   781  0214                     	;# 
   782  0215                     	;# 
   783  0215                     	;# 
   784  0215                     	;# 
   785  0216                     	;# 
   786  0216                     	;# 
   787  0217                     	;# 
   788  0217                     	;# 
   789  0391                     	;# 
   790  0392                     	;# 
   791  0393                     	;# 
   792  0394                     	;# 
   793  0395                     	;# 
   794  0396                     	;# 
   795  0611                     	;# 
   796  0612                     	;# 
   797  0613                     	;# 
   798  0613                     	;# 
   799  0614                     	;# 
   800  0615                     	;# 
   801  0616                     	;# 
   802  0616                     	;# 
   803  0711                     	;# 
   804  0711                     	;# 
   805  0711                     	;# 
   806  0712                     	;# 
   807  0712                     	;# 
   808  0713                     	;# 
   809  0713                     	;# 
   810  0713                     	;# 
   811  0714                     	;# 
   812  0714                     	;# 
   813  0714                     	;# 
   814  0715                     	;# 
   815  0715                     	;# 
   816  0716                     	;# 
   817  0716                     	;# 
   818  0716                     	;# 
   819  0716                     	;# 
   820  0717                     	;# 
   821  0717                     	;# 
   822  0717                     	;# 
   823  0717                     	;# 
   824  0718                     	;# 
   825  0718                     	;# 
   826  0718                     	;# 
   827  0719                     	;# 
   828  0719                     	;# 
   829  0719                     	;# 
   830  0719                     	;# 
   831  071A                     	;# 
   832  071A                     	;# 
   833  071A                     	;# 
   834  071A                     	;# 
   835  071A                     	;# 
   836  071B                     	;# 
   837  071B                     	;# 
   838  071C                     	;# 
   839  071C                     	;# 
   840  071C                     	;# 
   841  071C                     	;# 
   842  071C                     	;# 
   843  071D                     	;# 
   844  071D                     	;# 
   845  071E                     	;# 
   846  071E                     	;# 
   847  0791                     	;# 
   848  0791                     	;# 
   849  0793                     	;# 
   850  0793                     	;# 
   851  0794                     	;# 
   852  0794                     	;# 
   853  0796                     	;# 
   854  0796                     	;# 
   855  0796                     	;# 
   856  0797                     	;# 
   857  0797                     	;# 
   858  0797                     	;# 
   859  0798                     	;# 
   860  0798                     	;# 
   861  0799                     	;# 
   862  0799                     	;# 
   863  0799                     	;# 
   864  079A                     	;# 
   865  079A                     	;# 
   866  079A                     	;# 
   867  079B                     	;# 
   868  079C                     	;# 
   869  079C                     	;# 
   870  079C                     	;# 
   871  079D                     	;# 
   872  079E                     	;# 
   873  079E                     	;# 
   874  0F8C                     	;# 
   875  0F8D                     	;# 
   876  0F91                     	;# 
   877  0F96                     	;# 
   878  0F97                     	;# 
   879  0F9C                     	;# 
   880  0F9D                     	;# 
   881  0F9E                     	;# 
   882  0FE3                     	;# 
   883  0FE4                     	;# 
   884  0FE5                     	;# 
   885  0FE6                     	;# 
   886  0FE7                     	;# 
   887  0FE8                     	;# 
   888  0FE9                     	;# 
   889  0FEA                     	;# 
   890  0FEB                     	;# 
   891  0FED                     	;# 
   892  0FEE                     	;# 
   893  0FEF                     	;# 
   894  0000                     	;# 
   895  0001                     	;# 
   896  0002                     	;# 
   897  0003                     	;# 
   898  0004                     	;# 
   899  0005                     	;# 
   900  0006                     	;# 
   901  0007                     	;# 
   902  0008                     	;# 
   903  0009                     	;# 
   904  000A                     	;# 
   905  000B                     	;# 
   906  000C                     	;# 
   907  000D                     	;# 
   908  000E                     	;# 
   909  0011                     	;# 
   910  0012                     	;# 
   911  0015                     	;# 
   912  0016                     	;# 
   913  0016                     	;# 
   914  0017                     	;# 
   915  0018                     	;# 
   916  0019                     	;# 
   917  001A                     	;# 
   918  001B                     	;# 
   919  001C                     	;# 
   920  008C                     	;# 
   921  008D                     	;# 
   922  008E                     	;# 
   923  0091                     	;# 
   924  0092                     	;# 
   925  0095                     	;# 
   926  0096                     	;# 
   927  0097                     	;# 
   928  0099                     	;# 
   929  009A                     	;# 
   930  009B                     	;# 
   931  009B                     	;# 
   932  009C                     	;# 
   933  009D                     	;# 
   934  009E                     	;# 
   935  009F                     	;# 
   936  010C                     	;# 
   937  010D                     	;# 
   938  010E                     	;# 
   939  0116                     	;# 
   940  0117                     	;# 
   941  011D                     	;# 
   942  018C                     	;# 
   943  018D                     	;# 
   944  018E                     	;# 
   945  0191                     	;# 
   946  0191                     	;# 
   947  0192                     	;# 
   948  0193                     	;# 
   949  0193                     	;# 
   950  0194                     	;# 
   951  0195                     	;# 
   952  0196                     	;# 
   953  0199                     	;# 
   954  019A                     	;# 
   955  019B                     	;# 
   956  019B                     	;# 
   957  019C                     	;# 
   958  019D                     	;# 
   959  019E                     	;# 
   960  019F                     	;# 
   961  020C                     	;# 
   962  020D                     	;# 
   963  0211                     	;# 
   964  0211                     	;# 
   965  0212                     	;# 
   966  0212                     	;# 
   967  0213                     	;# 
   968  0213                     	;# 
   969  0214                     	;# 
   970  0214                     	;# 
   971  0215                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0216                     	;# 
   975  0216                     	;# 
   976  0217                     	;# 
   977  0217                     	;# 
   978  0391                     	;# 
   979  0392                     	;# 
   980  0393                     	;# 
   981  0394                     	;# 
   982  0395                     	;# 
   983  0396                     	;# 
   984  0611                     	;# 
   985  0612                     	;# 
   986  0613                     	;# 
   987  0613                     	;# 
   988  0614                     	;# 
   989  0615                     	;# 
   990  0616                     	;# 
   991  0616                     	;# 
   992  0711                     	;# 
   993  0711                     	;# 
   994  0711                     	;# 
   995  0712                     	;# 
   996  0712                     	;# 
   997  0713                     	;# 
   998  0713                     	;# 
   999  0713                     	;# 
  1000  0714                     	;# 
  1001  0714                     	;# 
  1002  0714                     	;# 
  1003  0715                     	;# 
  1004  0715                     	;# 
  1005  0716                     	;# 
  1006  0716                     	;# 
  1007  0716                     	;# 
  1008  0716                     	;# 
  1009  0717                     	;# 
  1010  0717                     	;# 
  1011  0717                     	;# 
  1012  0717                     	;# 
  1013  0718                     	;# 
  1014  0718                     	;# 
  1015  0718                     	;# 
  1016  0719                     	;# 
  1017  0719                     	;# 
  1018  0719                     	;# 
  1019  0719                     	;# 
  1020  071A                     	;# 
  1021  071A                     	;# 
  1022  071A                     	;# 
  1023  071A                     	;# 
  1024  071A                     	;# 
  1025  071B                     	;# 
  1026  071B                     	;# 
  1027  071C                     	;# 
  1028  071C                     	;# 
  1029  071C                     	;# 
  1030  071C                     	;# 
  1031  071C                     	;# 
  1032  071D                     	;# 
  1033  071D                     	;# 
  1034  071E                     	;# 
  1035  071E                     	;# 
  1036  0791                     	;# 
  1037  0791                     	;# 
  1038  0793                     	;# 
  1039  0793                     	;# 
  1040  0794                     	;# 
  1041  0794                     	;# 
  1042  0796                     	;# 
  1043  0796                     	;# 
  1044  0796                     	;# 
  1045  0797                     	;# 
  1046  0797                     	;# 
  1047  0797                     	;# 
  1048  0798                     	;# 
  1049  0798                     	;# 
  1050  0799                     	;# 
  1051  0799                     	;# 
  1052  0799                     	;# 
  1053  079A                     	;# 
  1054  079A                     	;# 
  1055  079A                     	;# 
  1056  079B                     	;# 
  1057  079C                     	;# 
  1058  079C                     	;# 
  1059  079C                     	;# 
  1060  079D                     	;# 
  1061  079E                     	;# 
  1062  079E                     	;# 
  1063  0F8C                     	;# 
  1064  0F8D                     	;# 
  1065  0F91                     	;# 
  1066  0F96                     	;# 
  1067  0F97                     	;# 
  1068  0F9C                     	;# 
  1069  0F9D                     	;# 
  1070  0F9E                     	;# 
  1071  0FE3                     	;# 
  1072  0FE4                     	;# 
  1073  0FE5                     	;# 
  1074  0FE6                     	;# 
  1075  0FE7                     	;# 
  1076  0FE8                     	;# 
  1077  0FE9                     	;# 
  1078  0FEA                     	;# 
  1079  0FEB                     	;# 
  1080  0FED                     	;# 
  1081  0FEE                     	;# 
  1082  0FEF                     	;# 
  1083  0000                     	;# 
  1084  0001                     	;# 
  1085  0002                     	;# 
  1086  0003                     	;# 
  1087  0004                     	;# 
  1088  0005                     	;# 
  1089  0006                     	;# 
  1090  0007                     	;# 
  1091  0008                     	;# 
  1092  0009                     	;# 
  1093  000A                     	;# 
  1094  000B                     	;# 
  1095  000C                     	;# 
  1096  000D                     	;# 
  1097  000E                     	;# 
  1098  0011                     	;# 
  1099  0012                     	;# 
  1100  0015                     	;# 
  1101  0016                     	;# 
  1102  0016                     	;# 
  1103  0017                     	;# 
  1104  0018                     	;# 
  1105  0019                     	;# 
  1106  001A                     	;# 
  1107  001B                     	;# 
  1108  001C                     	;# 
  1109  008C                     	;# 
  1110  008D                     	;# 
  1111  008E                     	;# 
  1112  0091                     	;# 
  1113  0092                     	;# 
  1114  0095                     	;# 
  1115  0096                     	;# 
  1116  0097                     	;# 
  1117  0099                     	;# 
  1118  009A                     	;# 
  1119  009B                     	;# 
  1120  009B                     	;# 
  1121  009C                     	;# 
  1122  009D                     	;# 
  1123  009E                     	;# 
  1124  009F                     	;# 
  1125  010C                     	;# 
  1126  010D                     	;# 
  1127  010E                     	;# 
  1128  0116                     	;# 
  1129  0117                     	;# 
  1130  011D                     	;# 
  1131  018C                     	;# 
  1132  018D                     	;# 
  1133  018E                     	;# 
  1134  0191                     	;# 
  1135  0191                     	;# 
  1136  0192                     	;# 
  1137  0193                     	;# 
  1138  0193                     	;# 
  1139  0194                     	;# 
  1140  0195                     	;# 
  1141  0196                     	;# 
  1142  0199                     	;# 
  1143  019A                     	;# 
  1144  019B                     	;# 
  1145  019B                     	;# 
  1146  019C                     	;# 
  1147  019D                     	;# 
  1148  019E                     	;# 
  1149  019F                     	;# 
  1150  020C                     	;# 
  1151  020D                     	;# 
  1152  0211                     	;# 
  1153  0211                     	;# 
  1154  0212                     	;# 
  1155  0212                     	;# 
  1156  0213                     	;# 
  1157  0213                     	;# 
  1158  0214                     	;# 
  1159  0214                     	;# 
  1160  0215                     	;# 
  1161  0215                     	;# 
  1162  0215                     	;# 
  1163  0216                     	;# 
  1164  0216                     	;# 
  1165  0217                     	;# 
  1166  0217                     	;# 
  1167  0391                     	;# 
  1168  0392                     	;# 
  1169  0393                     	;# 
  1170  0394                     	;# 
  1171  0395                     	;# 
  1172  0396                     	;# 
  1173  0611                     	;# 
  1174  0612                     	;# 
  1175  0613                     	;# 
  1176  0613                     	;# 
  1177  0614                     	;# 
  1178  0615                     	;# 
  1179  0616                     	;# 
  1180  0616                     	;# 
  1181  0711                     	;# 
  1182  0711                     	;# 
  1183  0711                     	;# 
  1184  0712                     	;# 
  1185  0712                     	;# 
  1186  0713                     	;# 
  1187  0713                     	;# 
  1188  0713                     	;# 
  1189  0714                     	;# 
  1190  0714                     	;# 
  1191  0714                     	;# 
  1192  0715                     	;# 
  1193  0715                     	;# 
  1194  0716                     	;# 
  1195  0716                     	;# 
  1196  0716                     	;# 
  1197  0716                     	;# 
  1198  0717                     	;# 
  1199  0717                     	;# 
  1200  0717                     	;# 
  1201  0717                     	;# 
  1202  0718                     	;# 
  1203  0718                     	;# 
  1204  0718                     	;# 
  1205  0719                     	;# 
  1206  0719                     	;# 
  1207  0719                     	;# 
  1208  0719                     	;# 
  1209  071A                     	;# 
  1210  071A                     	;# 
  1211  071A                     	;# 
  1212  071A                     	;# 
  1213  071A                     	;# 
  1214  071B                     	;# 
  1215  071B                     	;# 
  1216  071C                     	;# 
  1217  071C                     	;# 
  1218  071C                     	;# 
  1219  071C                     	;# 
  1220  071C                     	;# 
  1221  071D                     	;# 
  1222  071D                     	;# 
  1223  071E                     	;# 
  1224  071E                     	;# 
  1225  0791                     	;# 
  1226  0791                     	;# 
  1227  0793                     	;# 
  1228  0793                     	;# 
  1229  0794                     	;# 
  1230  0794                     	;# 
  1231  0796                     	;# 
  1232  0796                     	;# 
  1233  0796                     	;# 
  1234  0797                     	;# 
  1235  0797                     	;# 
  1236  0797                     	;# 
  1237  0798                     	;# 
  1238  0798                     	;# 
  1239  0799                     	;# 
  1240  0799                     	;# 
  1241  0799                     	;# 
  1242  079A                     	;# 
  1243  079A                     	;# 
  1244  079A                     	;# 
  1245  079B                     	;# 
  1246  079C                     	;# 
  1247  079C                     	;# 
  1248  079C                     	;# 
  1249  079D                     	;# 
  1250  079E                     	;# 
  1251  079E                     	;# 
  1252  0F8C                     	;# 
  1253  0F8D                     	;# 
  1254  0F91                     	;# 
  1255  0F96                     	;# 
  1256  0F97                     	;# 
  1257  0F9C                     	;# 
  1258  0F9D                     	;# 
  1259  0F9E                     	;# 
  1260  0FE3                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000D                     	;# 
  1286  000E                     	;# 
  1287  0011                     	;# 
  1288  0012                     	;# 
  1289  0015                     	;# 
  1290  0016                     	;# 
  1291  0016                     	;# 
  1292  0017                     	;# 
  1293  0018                     	;# 
  1294  0019                     	;# 
  1295  001A                     	;# 
  1296  001B                     	;# 
  1297  001C                     	;# 
  1298  008C                     	;# 
  1299  008D                     	;# 
  1300  008E                     	;# 
  1301  0091                     	;# 
  1302  0092                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0097                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  009F                     	;# 
  1314  010C                     	;# 
  1315  010D                     	;# 
  1316  010E                     	;# 
  1317  0116                     	;# 
  1318  0117                     	;# 
  1319  011D                     	;# 
  1320  018C                     	;# 
  1321  018D                     	;# 
  1322  018E                     	;# 
  1323  0191                     	;# 
  1324  0191                     	;# 
  1325  0192                     	;# 
  1326  0193                     	;# 
  1327  0193                     	;# 
  1328  0194                     	;# 
  1329  0195                     	;# 
  1330  0196                     	;# 
  1331  0199                     	;# 
  1332  019A                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019C                     	;# 
  1336  019D                     	;# 
  1337  019E                     	;# 
  1338  019F                     	;# 
  1339  020C                     	;# 
  1340  020D                     	;# 
  1341  0211                     	;# 
  1342  0211                     	;# 
  1343  0212                     	;# 
  1344  0212                     	;# 
  1345  0213                     	;# 
  1346  0213                     	;# 
  1347  0214                     	;# 
  1348  0214                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0216                     	;# 
  1353  0216                     	;# 
  1354  0217                     	;# 
  1355  0217                     	;# 
  1356  0391                     	;# 
  1357  0392                     	;# 
  1358  0393                     	;# 
  1359  0394                     	;# 
  1360  0395                     	;# 
  1361  0396                     	;# 
  1362  0611                     	;# 
  1363  0612                     	;# 
  1364  0613                     	;# 
  1365  0613                     	;# 
  1366  0614                     	;# 
  1367  0615                     	;# 
  1368  0616                     	;# 
  1369  0616                     	;# 
  1370  0711                     	;# 
  1371  0711                     	;# 
  1372  0711                     	;# 
  1373  0712                     	;# 
  1374  0712                     	;# 
  1375  0713                     	;# 
  1376  0713                     	;# 
  1377  0713                     	;# 
  1378  0714                     	;# 
  1379  0714                     	;# 
  1380  0714                     	;# 
  1381  0715                     	;# 
  1382  0715                     	;# 
  1383  0716                     	;# 
  1384  0716                     	;# 
  1385  0716                     	;# 
  1386  0716                     	;# 
  1387  0717                     	;# 
  1388  0717                     	;# 
  1389  0717                     	;# 
  1390  0717                     	;# 
  1391  0718                     	;# 
  1392  0718                     	;# 
  1393  0718                     	;# 
  1394  0719                     	;# 
  1395  0719                     	;# 
  1396  0719                     	;# 
  1397  0719                     	;# 
  1398  071A                     	;# 
  1399  071A                     	;# 
  1400  071A                     	;# 
  1401  071A                     	;# 
  1402  071A                     	;# 
  1403  071B                     	;# 
  1404  071B                     	;# 
  1405  071C                     	;# 
  1406  071C                     	;# 
  1407  071C                     	;# 
  1408  071C                     	;# 
  1409  071C                     	;# 
  1410  071D                     	;# 
  1411  071D                     	;# 
  1412  071E                     	;# 
  1413  071E                     	;# 
  1414  0791                     	;# 
  1415  0791                     	;# 
  1416  0793                     	;# 
  1417  0793                     	;# 
  1418  0794                     	;# 
  1419  0794                     	;# 
  1420  0796                     	;# 
  1421  0796                     	;# 
  1422  0796                     	;# 
  1423  0797                     	;# 
  1424  0797                     	;# 
  1425  0797                     	;# 
  1426  0798                     	;# 
  1427  0798                     	;# 
  1428  0799                     	;# 
  1429  0799                     	;# 
  1430  0799                     	;# 
  1431  079A                     	;# 
  1432  079A                     	;# 
  1433  079A                     	;# 
  1434  079B                     	;# 
  1435  079C                     	;# 
  1436  079C                     	;# 
  1437  079C                     	;# 
  1438  079D                     	;# 
  1439  079E                     	;# 
  1440  079E                     	;# 
  1441  0F8C                     	;# 
  1442  0F8D                     	;# 
  1443  0F91                     	;# 
  1444  0F96                     	;# 
  1445  0F97                     	;# 
  1446  0F9C                     	;# 
  1447  0F9D                     	;# 
  1448  0F9E                     	;# 
  1449  0FE3                     	;# 
  1450  0FE4                     	;# 
  1451  0FE5                     	;# 
  1452  0FE6                     	;# 
  1453  0FE7                     	;# 
  1454  0FE8                     	;# 
  1455  0FE9                     	;# 
  1456  0FEA                     	;# 
  1457  0FEB                     	;# 
  1458  0FED                     	;# 
  1459  0FEE                     	;# 
  1460  0FEF                     	;# 
  1461  0000                     	;# 
  1462  0001                     	;# 
  1463  0002                     	;# 
  1464  0003                     	;# 
  1465  0004                     	;# 
  1466  0005                     	;# 
  1467  0006                     	;# 
  1468  0007                     	;# 
  1469  0008                     	;# 
  1470  0009                     	;# 
  1471  000A                     	;# 
  1472  000B                     	;# 
  1473  000C                     	;# 
  1474  000D                     	;# 
  1475  000E                     	;# 
  1476  0011                     	;# 
  1477  0012                     	;# 
  1478  0015                     	;# 
  1479  0016                     	;# 
  1480  0016                     	;# 
  1481  0017                     	;# 
  1482  0018                     	;# 
  1483  0019                     	;# 
  1484  001A                     	;# 
  1485  001B                     	;# 
  1486  001C                     	;# 
  1487  008C                     	;# 
  1488  008D                     	;# 
  1489  008E                     	;# 
  1490  0091                     	;# 
  1491  0092                     	;# 
  1492  0095                     	;# 
  1493  0096                     	;# 
  1494  0097                     	;# 
  1495  0099                     	;# 
  1496  009A                     	;# 
  1497  009B                     	;# 
  1498  009B                     	;# 
  1499  009C                     	;# 
  1500  009D                     	;# 
  1501  009E                     	;# 
  1502  009F                     	;# 
  1503  010C                     	;# 
  1504  010D                     	;# 
  1505  010E                     	;# 
  1506  0116                     	;# 
  1507  0117                     	;# 
  1508  011D                     	;# 
  1509  018C                     	;# 
  1510  018D                     	;# 
  1511  018E                     	;# 
  1512  0191                     	;# 
  1513  0191                     	;# 
  1514  0192                     	;# 
  1515  0193                     	;# 
  1516  0193                     	;# 
  1517  0194                     	;# 
  1518  0195                     	;# 
  1519  0196                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019D                     	;# 
  1526  019E                     	;# 
  1527  019F                     	;# 
  1528  020C                     	;# 
  1529  020D                     	;# 
  1530  0211                     	;# 
  1531  0211                     	;# 
  1532  0212                     	;# 
  1533  0212                     	;# 
  1534  0213                     	;# 
  1535  0213                     	;# 
  1536  0214                     	;# 
  1537  0214                     	;# 
  1538  0215                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0216                     	;# 
  1542  0216                     	;# 
  1543  0217                     	;# 
  1544  0217                     	;# 
  1545  0391                     	;# 
  1546  0392                     	;# 
  1547  0393                     	;# 
  1548  0394                     	;# 
  1549  0395                     	;# 
  1550  0396                     	;# 
  1551  0611                     	;# 
  1552  0612                     	;# 
  1553  0613                     	;# 
  1554  0613                     	;# 
  1555  0614                     	;# 
  1556  0615                     	;# 
  1557  0616                     	;# 
  1558  0616                     	;# 
  1559  0711                     	;# 
  1560  0711                     	;# 
  1561  0711                     	;# 
  1562  0712                     	;# 
  1563  0712                     	;# 
  1564  0713                     	;# 
  1565  0713                     	;# 
  1566  0713                     	;# 
  1567  0714                     	;# 
  1568  0714                     	;# 
  1569  0714                     	;# 
  1570  0715                     	;# 
  1571  0715                     	;# 
  1572  0716                     	;# 
  1573  0716                     	;# 
  1574  0716                     	;# 
  1575  0716                     	;# 
  1576  0717                     	;# 
  1577  0717                     	;# 
  1578  0717                     	;# 
  1579  0717                     	;# 
  1580  0718                     	;# 
  1581  0718                     	;# 
  1582  0718                     	;# 
  1583  0719                     	;# 
  1584  0719                     	;# 
  1585  0719                     	;# 
  1586  0719                     	;# 
  1587  071A                     	;# 
  1588  071A                     	;# 
  1589  071A                     	;# 
  1590  071A                     	;# 
  1591  071A                     	;# 
  1592  071B                     	;# 
  1593  071B                     	;# 
  1594  071C                     	;# 
  1595  071C                     	;# 
  1596  071C                     	;# 
  1597  071C                     	;# 
  1598  071C                     	;# 
  1599  071D                     	;# 
  1600  071D                     	;# 
  1601  071E                     	;# 
  1602  071E                     	;# 
  1603  0791                     	;# 
  1604  0791                     	;# 
  1605  0793                     	;# 
  1606  0793                     	;# 
  1607  0794                     	;# 
  1608  0794                     	;# 
  1609  0796                     	;# 
  1610  0796                     	;# 
  1611  0796                     	;# 
  1612  0797                     	;# 
  1613  0797                     	;# 
  1614  0797                     	;# 
  1615  0798                     	;# 
  1616  0798                     	;# 
  1617  0799                     	;# 
  1618  0799                     	;# 
  1619  0799                     	;# 
  1620  079A                     	;# 
  1621  079A                     	;# 
  1622  079A                     	;# 
  1623  079B                     	;# 
  1624  079C                     	;# 
  1625  079C                     	;# 
  1626  079C                     	;# 
  1627  079D                     	;# 
  1628  079E                     	;# 
  1629  079E                     	;# 
  1630  0F8C                     	;# 
  1631  0F8D                     	;# 
  1632  0F91                     	;# 
  1633  0F96                     	;# 
  1634  0F97                     	;# 
  1635  0F9C                     	;# 
  1636  0F9D                     	;# 
  1637  0F9E                     	;# 
  1638  0FE3                     	;# 
  1639  0FE4                     	;# 
  1640  0FE5                     	;# 
  1641  0FE6                     	;# 
  1642  0FE7                     	;# 
  1643  0FE8                     	;# 
  1644  0FE9                     	;# 
  1645  0FEA                     	;# 
  1646  0FEB                     	;# 
  1647  0FED                     	;# 
  1648  0FEE                     	;# 
  1649  0FEF                     	;# 
  1650  0000                     	;# 
  1651  0001                     	;# 
  1652  0002                     	;# 
  1653  0003                     	;# 
  1654  0004                     	;# 
  1655  0005                     	;# 
  1656  0006                     	;# 
  1657  0007                     	;# 
  1658  0008                     	;# 
  1659  0009                     	;# 
  1660  000A                     	;# 
  1661  000B                     	;# 
  1662  000C                     	;# 
  1663  000D                     	;# 
  1664  000E                     	;# 
  1665  0011                     	;# 
  1666  0012                     	;# 
  1667  0015                     	;# 
  1668  0016                     	;# 
  1669  0016                     	;# 
  1670  0017                     	;# 
  1671  0018                     	;# 
  1672  0019                     	;# 
  1673  001A                     	;# 
  1674  001B                     	;# 
  1675  001C                     	;# 
  1676  008C                     	;# 
  1677  008D                     	;# 
  1678  008E                     	;# 
  1679  0091                     	;# 
  1680  0092                     	;# 
  1681  0095                     	;# 
  1682  0096                     	;# 
  1683  0097                     	;# 
  1684  0099                     	;# 
  1685  009A                     	;# 
  1686  009B                     	;# 
  1687  009B                     	;# 
  1688  009C                     	;# 
  1689  009D                     	;# 
  1690  009E                     	;# 
  1691  009F                     	;# 
  1692  010C                     	;# 
  1693  010D                     	;# 
  1694  010E                     	;# 
  1695  0116                     	;# 
  1696  0117                     	;# 
  1697  011D                     	;# 
  1698  018C                     	;# 
  1699  018D                     	;# 
  1700  018E                     	;# 
  1701  0191                     	;# 
  1702  0191                     	;# 
  1703  0192                     	;# 
  1704  0193                     	;# 
  1705  0193                     	;# 
  1706  0194                     	;# 
  1707  0195                     	;# 
  1708  0196                     	;# 
  1709  0199                     	;# 
  1710  019A                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019C                     	;# 
  1714  019D                     	;# 
  1715  019E                     	;# 
  1716  019F                     	;# 
  1717  020C                     	;# 
  1718  020D                     	;# 
  1719  0211                     	;# 
  1720  0211                     	;# 
  1721  0212                     	;# 
  1722  0212                     	;# 
  1723  0213                     	;# 
  1724  0213                     	;# 
  1725  0214                     	;# 
  1726  0214                     	;# 
  1727  0215                     	;# 
  1728  0215                     	;# 
  1729  0215                     	;# 
  1730  0216                     	;# 
  1731  0216                     	;# 
  1732  0217                     	;# 
  1733  0217                     	;# 
  1734  0391                     	;# 
  1735  0392                     	;# 
  1736  0393                     	;# 
  1737  0394                     	;# 
  1738  0395                     	;# 
  1739  0396                     	;# 
  1740  0611                     	;# 
  1741  0612                     	;# 
  1742  0613                     	;# 
  1743  0613                     	;# 
  1744  0614                     	;# 
  1745  0615                     	;# 
  1746  0616                     	;# 
  1747  0616                     	;# 
  1748  0711                     	;# 
  1749  0711                     	;# 
  1750  0711                     	;# 
  1751  0712                     	;# 
  1752  0712                     	;# 
  1753  0713                     	;# 
  1754  0713                     	;# 
  1755  0713                     	;# 
  1756  0714                     	;# 
  1757  0714                     	;# 
  1758  0714                     	;# 
  1759  0715                     	;# 
  1760  0715                     	;# 
  1761  0716                     	;# 
  1762  0716                     	;# 
  1763  0716                     	;# 
  1764  0716                     	;# 
  1765  0717                     	;# 
  1766  0717                     	;# 
  1767  0717                     	;# 
  1768  0717                     	;# 
  1769  0718                     	;# 
  1770  0718                     	;# 
  1771  0718                     	;# 
  1772  0719                     	;# 
  1773  0719                     	;# 
  1774  0719                     	;# 
  1775  0719                     	;# 
  1776  071A                     	;# 
  1777  071A                     	;# 
  1778  071A                     	;# 
  1779  071A                     	;# 
  1780  071A                     	;# 
  1781  071B                     	;# 
  1782  071B                     	;# 
  1783  071C                     	;# 
  1784  071C                     	;# 
  1785  071C                     	;# 
  1786  071C                     	;# 
  1787  071C                     	;# 
  1788  071D                     	;# 
  1789  071D                     	;# 
  1790  071E                     	;# 
  1791  071E                     	;# 
  1792  0791                     	;# 
  1793  0791                     	;# 
  1794  0793                     	;# 
  1795  0793                     	;# 
  1796  0794                     	;# 
  1797  0794                     	;# 
  1798  0796                     	;# 
  1799  0796                     	;# 
  1800  0796                     	;# 
  1801  0797                     	;# 
  1802  0797                     	;# 
  1803  0797                     	;# 
  1804  0798                     	;# 
  1805  0798                     	;# 
  1806  0799                     	;# 
  1807  0799                     	;# 
  1808  0799                     	;# 
  1809  079A                     	;# 
  1810  079A                     	;# 
  1811  079A                     	;# 
  1812  079B                     	;# 
  1813  079C                     	;# 
  1814  079C                     	;# 
  1815  079C                     	;# 
  1816  079D                     	;# 
  1817  079E                     	;# 
  1818  079E                     	;# 
  1819  0F8C                     	;# 
  1820  0F8D                     	;# 
  1821  0F91                     	;# 
  1822  0F96                     	;# 
  1823  0F97                     	;# 
  1824  0F9C                     	;# 
  1825  0F9D                     	;# 
  1826  0F9E                     	;# 
  1827  0FE3                     	;# 
  1828  0FE4                     	;# 
  1829  0FE5                     	;# 
  1830  0FE6                     	;# 
  1831  0FE7                     	;# 
  1832  0FE8                     	;# 
  1833  0FE9                     	;# 
  1834  0FEA                     	;# 
  1835  0FEB                     	;# 
  1836  0FED                     	;# 
  1837  0FEE                     	;# 
  1838  0FEF                     	;# 
  1839  0000                     	;# 
  1840  0001                     	;# 
  1841  0002                     	;# 
  1842  0003                     	;# 
  1843  0004                     	;# 
  1844  0005                     	;# 
  1845  0006                     	;# 
  1846  0007                     	;# 
  1847  0008                     	;# 
  1848  0009                     	;# 
  1849  000A                     	;# 
  1850  000B                     	;# 
  1851  000C                     	;# 
  1852  000D                     	;# 
  1853  000E                     	;# 
  1854  0011                     	;# 
  1855  0012                     	;# 
  1856  0015                     	;# 
  1857  0016                     	;# 
  1858  0016                     	;# 
  1859  0017                     	;# 
  1860  0018                     	;# 
  1861  0019                     	;# 
  1862  001A                     	;# 
  1863  001B                     	;# 
  1864  001C                     	;# 
  1865  008C                     	;# 
  1866  008D                     	;# 
  1867  008E                     	;# 
  1868  0091                     	;# 
  1869  0092                     	;# 
  1870  0095                     	;# 
  1871  0096                     	;# 
  1872  0097                     	;# 
  1873  0099                     	;# 
  1874  009A                     	;# 
  1875  009B                     	;# 
  1876  009B                     	;# 
  1877  009C                     	;# 
  1878  009D                     	;# 
  1879  009E                     	;# 
  1880  009F                     	;# 
  1881  010C                     	;# 
  1882  010D                     	;# 
  1883  010E                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  011D                     	;# 
  1887  018C                     	;# 
  1888  018D                     	;# 
  1889  018E                     	;# 
  1890  0191                     	;# 
  1891  0191                     	;# 
  1892  0192                     	;# 
  1893  0193                     	;# 
  1894  0193                     	;# 
  1895  0194                     	;# 
  1896  0195                     	;# 
  1897  0196                     	;# 
  1898  0199                     	;# 
  1899  019A                     	;# 
  1900  019B                     	;# 
  1901  019B                     	;# 
  1902  019C                     	;# 
  1903  019D                     	;# 
  1904  019E                     	;# 
  1905  019F                     	;# 
  1906  020C                     	;# 
  1907  020D                     	;# 
  1908  0211                     	;# 
  1909  0211                     	;# 
  1910  0212                     	;# 
  1911  0212                     	;# 
  1912  0213                     	;# 
  1913  0213                     	;# 
  1914  0214                     	;# 
  1915  0214                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0215                     	;# 
  1919  0216                     	;# 
  1920  0216                     	;# 
  1921  0217                     	;# 
  1922  0217                     	;# 
  1923  0391                     	;# 
  1924  0392                     	;# 
  1925  0393                     	;# 
  1926  0394                     	;# 
  1927  0395                     	;# 
  1928  0396                     	;# 
  1929  0611                     	;# 
  1930  0612                     	;# 
  1931  0613                     	;# 
  1932  0613                     	;# 
  1933  0614                     	;# 
  1934  0615                     	;# 
  1935  0616                     	;# 
  1936  0616                     	;# 
  1937  0711                     	;# 
  1938  0711                     	;# 
  1939  0711                     	;# 
  1940  0712                     	;# 
  1941  0712                     	;# 
  1942  0713                     	;# 
  1943  0713                     	;# 
  1944  0713                     	;# 
  1945  0714                     	;# 
  1946  0714                     	;# 
  1947  0714                     	;# 
  1948  0715                     	;# 
  1949  0715                     	;# 
  1950  0716                     	;# 
  1951  0716                     	;# 
  1952  0716                     	;# 
  1953  0716                     	;# 
  1954  0717                     	;# 
  1955  0717                     	;# 
  1956  0717                     	;# 
  1957  0717                     	;# 
  1958  0718                     	;# 
  1959  0718                     	;# 
  1960  0718                     	;# 
  1961  0719                     	;# 
  1962  0719                     	;# 
  1963  0719                     	;# 
  1964  0719                     	;# 
  1965  071A                     	;# 
  1966  071A                     	;# 
  1967  071A                     	;# 
  1968  071A                     	;# 
  1969  071A                     	;# 
  1970  071B                     	;# 
  1971  071B                     	;# 
  1972  071C                     	;# 
  1973  071C                     	;# 
  1974  071C                     	;# 
  1975  071C                     	;# 
  1976  071C                     	;# 
  1977  071D                     	;# 
  1978  071D                     	;# 
  1979  071E                     	;# 
  1980  071E                     	;# 
  1981  0791                     	;# 
  1982  0791                     	;# 
  1983  0793                     	;# 
  1984  0793                     	;# 
  1985  0794                     	;# 
  1986  0794                     	;# 
  1987  0796                     	;# 
  1988  0796                     	;# 
  1989  0796                     	;# 
  1990  0797                     	;# 
  1991  0797                     	;# 
  1992  0797                     	;# 
  1993  0798                     	;# 
  1994  0798                     	;# 
  1995  0799                     	;# 
  1996  0799                     	;# 
  1997  0799                     	;# 
  1998  079A                     	;# 
  1999  079A                     	;# 
  2000  079A                     	;# 
  2001  079B                     	;# 
  2002  079C                     	;# 
  2003  079C                     	;# 
  2004  079C                     	;# 
  2005  079D                     	;# 
  2006  079E                     	;# 
  2007  079E                     	;# 
  2008  0F8C                     	;# 
  2009  0F8D                     	;# 
  2010  0F91                     	;# 
  2011  0F96                     	;# 
  2012  0F97                     	;# 
  2013  0F9C                     	;# 
  2014  0F9D                     	;# 
  2015  0F9E                     	;# 
  2016  0FE3                     	;# 
  2017  0FE4                     	;# 
  2018  0FE5                     	;# 
  2019  0FE6                     	;# 
  2020  0FE7                     	;# 
  2021  0FE8                     	;# 
  2022  0FE9                     	;# 
  2023  0FEA                     	;# 
  2024  0FEB                     	;# 
  2025  0FED                     	;# 
  2026  0FEE                     	;# 
  2027  0FEF                     	;# 
  2028  0000                     	;# 
  2029  0001                     	;# 
  2030  0002                     	;# 
  2031  0003                     	;# 
  2032  0004                     	;# 
  2033  0005                     	;# 
  2034  0006                     	;# 
  2035  0007                     	;# 
  2036  0008                     	;# 
  2037  0009                     	;# 
  2038  000A                     	;# 
  2039  000B                     	;# 
  2040  000C                     	;# 
  2041  000D                     	;# 
  2042  000E                     	;# 
  2043  0011                     	;# 
  2044  0012                     	;# 
  2045  0015                     	;# 
  2046  0016                     	;# 
  2047  0016                     	;# 
  2048  0017                     	;# 
  2049  0018                     	;# 
  2050  0019                     	;# 
  2051  001A                     	;# 
  2052  001B                     	;# 
  2053  001C                     	;# 
  2054  008C                     	;# 
  2055  008D                     	;# 
  2056  008E                     	;# 
  2057  0091                     	;# 
  2058  0092                     	;# 
  2059  0095                     	;# 
  2060  0096                     	;# 
  2061  0097                     	;# 
  2062  0099                     	;# 
  2063  009A                     	;# 
  2064  009B                     	;# 
  2065  009B                     	;# 
  2066  009C                     	;# 
  2067  009D                     	;# 
  2068  009E                     	;# 
  2069  009F                     	;# 
  2070  010C                     	;# 
  2071  010D                     	;# 
  2072  010E                     	;# 
  2073  0116                     	;# 
  2074  0117                     	;# 
  2075  011D                     	;# 
  2076  018C                     	;# 
  2077  018D                     	;# 
  2078  018E                     	;# 
  2079  0191                     	;# 
  2080  0191                     	;# 
  2081  0192                     	;# 
  2082  0193                     	;# 
  2083  0193                     	;# 
  2084  0194                     	;# 
  2085  0195                     	;# 
  2086  0196                     	;# 
  2087  0199                     	;# 
  2088  019A                     	;# 
  2089  019B                     	;# 
  2090  019B                     	;# 
  2091  019C                     	;# 
  2092  019D                     	;# 
  2093  019E                     	;# 
  2094  019F                     	;# 
  2095  020C                     	;# 
  2096  020D                     	;# 
  2097  0211                     	;# 
  2098  0211                     	;# 
  2099  0212                     	;# 
  2100  0212                     	;# 
  2101  0213                     	;# 
  2102  0213                     	;# 
  2103  0214                     	;# 
  2104  0214                     	;# 
  2105  0215                     	;# 
  2106  0215                     	;# 
  2107  0215                     	;# 
  2108  0216                     	;# 
  2109  0216                     	;# 
  2110  0217                     	;# 
  2111  0217                     	;# 
  2112  0391                     	;# 
  2113  0392                     	;# 
  2114  0393                     	;# 
  2115  0394                     	;# 
  2116  0395                     	;# 
  2117  0396                     	;# 
  2118  0611                     	;# 
  2119  0612                     	;# 
  2120  0613                     	;# 
  2121  0613                     	;# 
  2122  0614                     	;# 
  2123  0615                     	;# 
  2124  0616                     	;# 
  2125  0616                     	;# 
  2126  0711                     	;# 
  2127  0711                     	;# 
  2128  0711                     	;# 
  2129  0712                     	;# 
  2130  0712                     	;# 
  2131  0713                     	;# 
  2132  0713                     	;# 
  2133  0713                     	;# 
  2134  0714                     	;# 
  2135  0714                     	;# 
  2136  0714                     	;# 
  2137  0715                     	;# 
  2138  0715                     	;# 
  2139  0716                     	;# 
  2140  0716                     	;# 
  2141  0716                     	;# 
  2142  0716                     	;# 
  2143  0717                     	;# 
  2144  0717                     	;# 
  2145  0717                     	;# 
  2146  0717                     	;# 
  2147  0718                     	;# 
  2148  0718                     	;# 
  2149  0718                     	;# 
  2150  0719                     	;# 
  2151  0719                     	;# 
  2152  0719                     	;# 
  2153  0719                     	;# 
  2154  071A                     	;# 
  2155  071A                     	;# 
  2156  071A                     	;# 
  2157  071A                     	;# 
  2158  071A                     	;# 
  2159  071B                     	;# 
  2160  071B                     	;# 
  2161  071C                     	;# 
  2162  071C                     	;# 
  2163  071C                     	;# 
  2164  071C                     	;# 
  2165  071C                     	;# 
  2166  071D                     	;# 
  2167  071D                     	;# 
  2168  071E                     	;# 
  2169  071E                     	;# 
  2170  0791                     	;# 
  2171  0791                     	;# 
  2172  0793                     	;# 
  2173  0793                     	;# 
  2174  0794                     	;# 
  2175  0794                     	;# 
  2176  0796                     	;# 
  2177  0796                     	;# 
  2178  0796                     	;# 
  2179  0797                     	;# 
  2180  0797                     	;# 
  2181  0797                     	;# 
  2182  0798                     	;# 
  2183  0798                     	;# 
  2184  0799                     	;# 
  2185  0799                     	;# 
  2186  0799                     	;# 
  2187  079A                     	;# 
  2188  079A                     	;# 
  2189  079A                     	;# 
  2190  079B                     	;# 
  2191  079C                     	;# 
  2192  079C                     	;# 
  2193  079C                     	;# 
  2194  079D                     	;# 
  2195  079E                     	;# 
  2196  079E                     	;# 
  2197  0F8C                     	;# 
  2198  0F8D                     	;# 
  2199  0F91                     	;# 
  2200  0F96                     	;# 
  2201  0F97                     	;# 
  2202  0F9C                     	;# 
  2203  0F9D                     	;# 
  2204  0F9E                     	;# 
  2205  0FE3                     	;# 
  2206  0FE4                     	;# 
  2207  0FE5                     	;# 
  2208  0FE6                     	;# 
  2209  0FE7                     	;# 
  2210  0FE8                     	;# 
  2211  0FE9                     	;# 
  2212  0FEA                     	;# 
  2213  0FEB                     	;# 
  2214  0FED                     	;# 
  2215  0FEE                     	;# 
  2216  0FEF                     	;# 
  2217                           
  2218                           	psect	idataBANK0
  2219  0B22                     __pidataBANK0:	
  2220                           
  2221                           ;initializer for _Button_StateMachine
  2222  0B22  349E               	retlw	low _Button_State_Initializing
  2223  0B23  340F               	retlw	high _Button_State_Initializing
  2224  0B24  34B4               	retlw	low _Button_State_NotPressed
  2225  0B25  3402               	retlw	high _Button_State_NotPressed
  2226  0B26  343A               	retlw	low _Button_State_Pressed
  2227  0B27  3407               	retlw	high _Button_State_Pressed
  2228                           
  2229                           ;initializer for _callback_notPressed
  2230  0B28  346E               	retlw	low _Button_DefaultCallback
  2231  0B29  340A               	retlw	high _Button_DefaultCallback
  2232                           
  2233                           ;initializer for _callback_pressed
  2234  0B2A  346E               	retlw	low _Button_DefaultCallback
  2235  0B2B  340A               	retlw	high _Button_DefaultCallback
  2236                           
  2237                           ;initializer for _callback_sampled
  2238  0B2C  346F               	retlw	low _Sensor_DefaultCallback
  2239  0B2D  340A               	retlw	high _Sensor_DefaultCallback
  2240                           
  2241                           ;initializer for _sample_period
  2242  0B2E  34AE               	retlw	174
  2243                           
  2244                           	psect	idataBANK1
  2245  0D36                     __pidataBANK1:	
  2246                           
  2247                           ;initializer for _mtouch_sensor
  2248  0D36  3400               	retlw	0
  2249  0D37  3469               	retlw	105
  2250  0D38  3430               	retlw	48
  2251  0D39  3410               	retlw	16
  2252  0D3A  3420               	retlw	32
  2253  0D3B  3400               	retlw	0
  2254  0D3C  3400               	retlw	0
  2255  0D3D  3400               	retlw	0
  2256  0D3E  3400               	retlw	0
  2257  0D3F  3401               	retlw	1
  2258  0D40  3431               	retlw	49
  2259  0D41  3430               	retlw	48
  2260  0D42  3410               	retlw	16
  2261  0D43  3420               	retlw	32
  2262  0D44  3400               	retlw	0
  2263  0D45  3400               	retlw	0
  2264  0D46  3400               	retlw	0
  2265  0D47  3400               	retlw	0
  2266  0D48  3402               	retlw	2
  2267  0D49  345D               	retlw	93
  2268  0D4A  3430               	retlw	48
  2269  0D4B  3410               	retlw	16
  2270  0D4C  3420               	retlw	32
  2271  0D4D  3400               	retlw	0
  2272  0D4E  3400               	retlw	0
  2273  0D4F  3400               	retlw	0
  2274  0D50  3400               	retlw	0
  2275  0D51  3403               	retlw	3
  2276  0D52  3435               	retlw	53
  2277  0D53  3430               	retlw	48
  2278  0D54  3410               	retlw	16
  2279  0D55  3420               	retlw	32
  2280  0D56  3400               	retlw	0
  2281  0D57  3400               	retlw	0
  2282  0D58  3400               	retlw	0
  2283  0D59  3400               	retlw	0
  2284                           
  2285                           	psect	stringtext1
  2286  1040                     __pstringtext1:	
  2287  1040                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2288  1040  3400               	retlw	0
  2289  1041  340D               	retlw	13
  2290  1042  341C               	retlw	28
  2291  1043  341E               	retlw	30
  2292  1044  3417               	retlw	23
  2293  1045                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2294                           
  2295                           	psect	stringtext2
  2296  1045                     __pstringtext2:	
  2297  1045                     _sensor_scan_group:	
  2298  1045  34A9               	retlw	low ((_mtouch_sensor| 0+9))
  2299  1046  34A0               	retlw	low (_mtouch_sensor| 0)
  2300  1047  34BB               	retlw	low ((_mtouch_sensor| 0+27))
  2301  1048  34B2               	retlw	low ((_mtouch_sensor| 0+18))
  2302  1049                     __end_of_sensor_scan_group:	
  2303                           
  2304                           	psect	stringtext3
  2305  1000                     __pstringtext3:	
  2306  1000                     _mtouch_button_init:	
  2307  1000  3400               	retlw	0
  2308  1001  3401               	retlw	1
  2309  1002  3400               	retlw	0
  2310  1003  3400               	retlw	0
  2311  1004  3400               	retlw	0
  2312  1005  3400               	retlw	0
  2313  1006  3400               	retlw	0
  2314  1007  3400               	retlw	0
  2315  1008  3400               	retlw	0
  2316  1009  3400               	retlw	0
  2317  100A  3400               	retlw	0
  2318  100B  3400               	retlw	0
  2319  100C  3400               	retlw	0
  2320  100D  3400               	retlw	0
  2321  100E  3464               	retlw	100
  2322  100F  3401               	retlw	1
  2323  1010  3401               	retlw	1
  2324  1011  3400               	retlw	0
  2325  1012  3400               	retlw	0
  2326  1013  3400               	retlw	0
  2327  1014  3400               	retlw	0
  2328  1015  3400               	retlw	0
  2329  1016  3400               	retlw	0
  2330  1017  3400               	retlw	0
  2331  1018  3400               	retlw	0
  2332  1019  3400               	retlw	0
  2333  101A  3400               	retlw	0
  2334  101B  3400               	retlw	0
  2335  101C  3400               	retlw	0
  2336  101D  3400               	retlw	0
  2337  101E  3464               	retlw	100
  2338  101F  3401               	retlw	1
  2339  1020  3402               	retlw	2
  2340  1021  3403               	retlw	3
  2341  1022  3400               	retlw	0
  2342  1023  3400               	retlw	0
  2343  1024  3400               	retlw	0
  2344  1025  3400               	retlw	0
  2345  1026  3400               	retlw	0
  2346  1027  3400               	retlw	0
  2347  1028  3400               	retlw	0
  2348  1029  3400               	retlw	0
  2349  102A  3400               	retlw	0
  2350  102B  3400               	retlw	0
  2351  102C  3400               	retlw	0
  2352  102D  3400               	retlw	0
  2353  102E  3464               	retlw	100
  2354  102F  3401               	retlw	1
  2355  1030  3403               	retlw	3
  2356  1031  3402               	retlw	2
  2357  1032  3400               	retlw	0
  2358  1033  3400               	retlw	0
  2359  1034  3400               	retlw	0
  2360  1035  3400               	retlw	0
  2361  1036  3400               	retlw	0
  2362  1037  3400               	retlw	0
  2363  1038  3400               	retlw	0
  2364  1039  3400               	retlw	0
  2365  103A  3400               	retlw	0
  2366  103B  3400               	retlw	0
  2367  103C  3400               	retlw	0
  2368  103D  3400               	retlw	0
  2369  103E  3464               	retlw	100
  2370  103F  3401               	retlw	1
  2371  1040                     __end_of_mtouch_button_init:	
  2372                           
  2373                           	psect	nvBANK0
  2374  006C                     __pnvBANK0:	
  2375  006C                     _EUSART_FramingErrorHandler:	
  2376  006C                     	ds	2
  2377  006E                     _EUSART_RxDefaultInterruptHandler:	
  2378  006E                     	ds	2
  2379                           
  2380                           	psect	nvBANK1
  2381  00CC                     __pnvBANK1:	
  2382  00CC                     _EUSART_ErrorHandler:	
  2383  00CC                     	ds	2
  2384  00CE                     _EUSART_OverrunErrorHandler:	
  2385  00CE                     	ds	2
  2386  0012                     _PIR2bits	set	18
  2387  001C                     _T2CONbits	set	28
  2388  001C                     _T2CON	set	28
  2389  001A                     _TMR2	set	26
  2390  001B                     _PR2	set	27
  2391  000B                     _INTCONbits	set	11
  2392  0011                     _PIR1bits	set	17
  2393  005F                     _GIE	set	95
  2394  0095                     _OPTION_REGbits	set	149
  2395  008E                     _TRISC	set	142
  2396  008D                     _TRISB	set	141
  2397  008C                     _TRISA	set	140
  2398  0097                     _WDTCON	set	151
  2399  0099                     _OSCCON	set	153
  2400  0091                     _PIE1bits	set	145
  2401  010D                     _LATBbits	set	269
  2402  011D                     _APFCONbits	set	285
  2403  010E                     _LATCbits	set	270
  2404  010C                     _LATAbits	set	268
  2405  011D                     _APFCON	set	285
  2406  010E                     _LATC	set	270
  2407  010D                     _LATB	set	269
  2408  010C                     _LATA	set	268
  2409  0116                     _BORCON	set	278
  2410  018C                     _ANSELA	set	396
  2411  018D                     _ANSELB	set	397
  2412  018E                     _ANSELC	set	398
  2413  0199                     _RCREG	set	409
  2414  019D                     _RCSTAbits	set	413
  2415  019A                     _TXREG	set	410
  2416  019E                     _TXSTAbits	set	414
  2417  019C                     _SPBRGH	set	412
  2418  019B                     _SPBRGL	set	411
  2419  019E                     _TXSTA	set	414
  2420  019D                     _RCSTA	set	413
  2421  019F                     _BAUDCON	set	415
  2422  020C                     _WPUA	set	524
  2423  020D                     _WPUB	set	525
  2424  071A                     _AAD1RES0	set	1818
  2425  0711                     _AD1CON0bits	set	1809
  2426  0714                     _AAD1CON3	set	1812
  2427  0713                     _AD1CON2	set	1811
  2428  0717                     _AD1ACQCON	set	1815
  2429  0716                     _AD1PRECON	set	1814
  2430  0718                     _AAD1GRD	set	1816
  2431  0713                     _AAD1CON2	set	1811
  2432  0719                     _AAD1CAP	set	1817
  2433  0714                     _AD1CON3	set	1812
  2434  0712                     _ADCOMCON	set	1810
  2435  0711                     _AD1CON0	set	1809
  2436  079A                     _AAD2RES0	set	1946
  2437  0791                     _AD2CON0bits	set	1937
  2438  0797                     _AD2ACQCON	set	1943
  2439  0796                     _AD2PRECON	set	1942
  2440  0794                     _AAD2CON3	set	1940
  2441  0798                     _AAD2GRD	set	1944
  2442  0793                     _AD2CON2	set	1939
  2443  0794                     _AD2CON3	set	1940
  2444  0791                     _AD2CON0	set	1937
  2445                           
  2446                           ; #config settings
  2447  0000                     
  2448                           	psect	cinit
  2449  0017                     start_initialization:	
  2450  0017                     __initialization:	
  2451                           
  2452                           ; Initialize objects allocated to BANK0
  2453  0017  3022               	movlw	low __pidataBANK0
  2454  0018  0084               	movwf	4
  2455  0019  308B               	movlw	(high __pidataBANK0)| (0+128)
  2456  001A  0085               	movwf	5
  2457  001B  305F               	movlw	low __pdataBANK0
  2458  001C  0086               	movwf	6
  2459  001D  3000               	movlw	high __pdataBANK0
  2460  001E  0087               	movwf	7
  2461  001F  300D               	movlw	13
  2462  0020  318A  22B5  3180   	fcall	init_ram
  2463                           
  2464                           ; Initialize objects allocated to BANK1
  2465  0023  3036               	movlw	low __pidataBANK1
  2466  0024  0084               	movwf	4
  2467  0025  308D               	movlw	(high __pidataBANK1)| (0+128)
  2468  0026  0085               	movwf	5
  2469  0027  30A0               	movlw	low __pdataBANK1
  2470  0028  0086               	movwf	6
  2471  0029  3000               	movlw	high __pdataBANK1
  2472  002A  0087               	movwf	7
  2473  002B  3024               	movlw	36
  2474  002C  318A  22B5  3180   	fcall	init_ram
  2475                           
  2476                           ; Clear objects allocated to COMMON
  2477  002F  01FC               	clrf	__pbssCOMMON& (0+127)
  2478                           
  2479                           ; Clear objects allocated to BANK0
  2480  0030  3049               	movlw	low __pbssBANK0
  2481  0031  0084               	movwf	4
  2482  0032  3000               	movlw	high __pbssBANK0
  2483  0033  0085               	movwf	5
  2484  0034  3016               	movlw	22
  2485  0035  318A  22AF  3180   	fcall	clear_ram0
  2486                           
  2487                           ; Clear objects allocated to BANK1
  2488  0038  30C4               	movlw	low __pbssBANK1
  2489  0039  0084               	movwf	4
  2490  003A  3000               	movlw	high __pbssBANK1
  2491  003B  0085               	movwf	5
  2492  003C  3008               	movlw	8
  2493  003D  318A  22AF  3180   	fcall	clear_ram0
  2494                           
  2495                           ; Clear objects allocated to BANK2
  2496  0040  3020               	movlw	low __pbssBANK2
  2497  0041  0084               	movwf	4
  2498  0042  3001               	movlw	high __pbssBANK2
  2499  0043  0085               	movwf	5
  2500  0044  3040               	movlw	64
  2501  0045  318A  22AF         	fcall	clear_ram0
  2502  0047                     end_of_initialization:	
  2503                           ;End of C runtime variable initialization code
  2504                           
  2505  0047                     __end_of__initialization:	
  2506  0047  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2507  0048  0020               	movlb	0
  2508  0049  318C  2C8F         	ljmp	_main	;jump to C main() function
  2509                           
  2510                           	psect	bssCOMMON
  2511  007C                     __pbssCOMMON:	
  2512  007C                     _eusartRxHead:	
  2513  007C                     	ds	1
  2514                           
  2515                           	psect	bssBANK0
  2516  0049                     __pbssBANK0:	
  2517  0049                     _eusartRxStatusBuffer:	
  2518  0049                     	ds	8
  2519  0051                     _packet_sample:	
  2520  0051                     	ds	4
  2521  0055                     _packet_noise:	
  2522  0055                     	ds	2
  2523  0057                     _last_touch_status:	
  2524  0057                     	ds	2
  2525  0059                     _sensor_globalFlags:	
  2526  0059                     	ds	1
  2527  005A                     _lowpowerActivated:	
  2528  005A                     	ds	1
  2529  005B                     _mtouch_time_toScan:	
  2530  005B                     	ds	1
  2531  005C                     _eusartRxLastError:	
  2532  005C                     	ds	1
  2533  005D                     _eusartRxCount:	
  2534  005D                     	ds	1
  2535  005E                     _eusartRxTail:	
  2536  005E                     	ds	1
  2537                           
  2538                           	psect	dataBANK0
  2539  005F                     __pdataBANK0:	
  2540  005F                     _Button_StateMachine:	
  2541  005F                     	ds	6
  2542  0065                     _callback_notPressed:	
  2543  0065                     	ds	2
  2544  0067                     _callback_pressed:	
  2545  0067                     	ds	2
  2546  0069                     _callback_sampled:	
  2547  0069                     	ds	2
  2548  006B                     _sample_period:	
  2549  006B                     	ds	1
  2550                           
  2551                           	psect	bssBANK1
  2552  00C4                     __pbssBANK1:	
  2553  00C4                     _eusartRxBuffer:	
  2554  00C4                     	ds	8
  2555                           
  2556                           	psect	dataBANK1
  2557  00A0                     __pdataBANK1:	
  2558  00A0                     _mtouch_sensor:	
  2559  00A0                     	ds	36
  2560                           
  2561                           	psect	bssBANK2
  2562  0120                     __pbssBANK2:	
  2563  0120                     _mtouch_button:	
  2564  0120                     	ds	64
  2565                           
  2566                           	psect	inittext
  2567  0AB5                     init_ram:	
  2568  0AB5  00FE               	movwf	126
  2569  0AB6                     initloop:	
  2570  0AB6  0012               	moviw fsr0++
  2571  0AB7  001E               	movwi fsr1++
  2572  0AB8  0BFE               	decfsz	126,f
  2573  0AB9  2AB6               	goto	initloop
  2574  0ABA  3400               	retlw	0
  2575                           
  2576                           	psect	clrtext
  2577  0AAF                     clear_ram0:	
  2578                           ;	Called with FSR0 containing the base address, and
  2579                           ;	WREG with the size to clear
  2580                           
  2581  0AAF  0064               	clrwdt	;clear the watchdog before getting into this loop
  2582  0AB0                     clrloop0:	
  2583  0AB0  0180               	clrf	0	;clear RAM location pointed to by FSR
  2584  0AB1  3101               	addfsr 0,1
  2585  0AB2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2586  0AB3  2AB0               	goto	clrloop0	;have we reached the end yet?
  2587  0AB4  3400               	retlw	0	;all done for this memory range, return
  2588                           
  2589                           	psect	cstackCOMMON
  2590  0070                     __pcstackCOMMON:	
  2591  0070                     ?_EUSART_Receive_ISR:	
  2592  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_EUSART_DefaultErrorHandler:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ?_EUSART_RxDataHandler:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ??_EUSART_RxDataHandler:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ?_PIN_MANAGER_Initialize:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_OSCILLATOR_Initialize:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ?_WDT_Initialize:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?_TMR2_Initialize:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ?_MTOUCH_Initialize:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?_MTOUCH_Service_Mainloop:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?_MTOUCH_Button_Buttonmask_Get:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ?_LED_PROCESS:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?_RELAY_PROCESS:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ?_MTOUCH_Button_isPressed:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ?_MTOUCH_Button_InitializeAll:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0070                     ?_MTOUCH_Button_ServiceAll:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0070                     ?_MTOUCH_needReburst:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0070                     ?_MTOUCH_Tick:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0070                     ?_MTOUCH_Button_Tick:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0070                     ?_MTOUCH_Sensor_Enable:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_Sensor_Sampled_Reset:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     ?_Sensor_Service:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ?_Sensor_isEnabled:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?_Sensor_RawSample_Update:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0070                     ?_Sensor_setSampled:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0070                     ?_Sensor_postAcquisitionProcess:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     ?_Sensor_isActive:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0070                     ?_Sensor_isCalibrated:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0070                     ?_Sensor_setActive:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     ?_Sensor_setInactive:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     ?_Sensor_isCalibratingAcqTime:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0070                     ?_Sensor_autoCalibration:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0070                     ?_Sensor_setCalibratAcqTime:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0070                     ?_Sensor_setCalibrated:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0070                     ?_Button_Service:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     ?_Button_Reading_Update:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     ?_Button_Deviation_Update:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     ?_Button_Baseline_Initialize:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     ?_Button_Baseline_Update:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     ?_Button_Tick_helper:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0070                     ?_Button_Reading_Update_Helper:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0070                     ?_EUSART_Initialize:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ?_INTERRUPT_InterruptManager:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     ?_SYSTEM_Initialize:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0070                     ?_main:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0070                     ?_TMR2_StartTimer:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0070                     ?_TMR2_StopTimer:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757  0070                     ?_TMR2_LoadPeriodRegister:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760  0070                     ?_MTOUCH_Sensor_Initialize:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0070                     ?_Sensor_getScanGroupIndex:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0070                     ?_MTOUCH_Button_Initialize:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775                           
  2776                           ; 1 bytes @ 0x0
  2777  0070                     	ds	1
  2778  0071                     ?_EUSART_SetRxInterruptHandler:	
  2779  0071                     ??_EUSART_Receive_ISR:	
  2780                           ; 1 bytes @ 0x1
  2781                           
  2782  0071                     ?_EUSART_SetFramingErrorHandler:	
  2783                           ; 1 bytes @ 0x1
  2784                           
  2785  0071                     ?_EUSART_SetOverrunErrorHandler:	
  2786                           ; 1 bytes @ 0x1
  2787                           
  2788  0071                     ?_EUSART_SetErrorHandler:	
  2789                           ; 1 bytes @ 0x1
  2790                           
  2791  0071                     ??_EUSART_DefaultErrorHandler:	
  2792                           ; 1 bytes @ 0x1
  2793                           
  2794  0071                     ??_PIN_MANAGER_Initialize:	
  2795                           ; 1 bytes @ 0x1
  2796                           
  2797  0071                     ??_OSCILLATOR_Initialize:	
  2798                           ; 1 bytes @ 0x1
  2799                           
  2800  0071                     ??_WDT_Initialize:	
  2801                           ; 1 bytes @ 0x1
  2802                           
  2803  0071                     ??_TMR2_Initialize:	
  2804                           ; 1 bytes @ 0x1
  2805                           
  2806  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  2807                           ; 1 bytes @ 0x1
  2808                           
  2809  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  2810                           ; 1 bytes @ 0x1
  2811                           
  2812  0071                     ??_LED_PROCESS:	
  2813                           ; 1 bytes @ 0x1
  2814                           
  2815  0071                     ??_RELAY_PROCESS:	
  2816                           ; 1 bytes @ 0x1
  2817                           
  2818  0071                     ??_MTOUCH_Button_isPressed:	
  2819                           ; 1 bytes @ 0x1
  2820                           
  2821  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2822                           ; 1 bytes @ 0x1
  2823                           
  2824  0071                     ??_MTOUCH_needReburst:	
  2825                           ; 1 bytes @ 0x1
  2826                           
  2827  0071                     ?_Sensor_DefaultCallback:	
  2828                           ; 1 bytes @ 0x1
  2829                           
  2830  0071                     ??_Sensor_Sampled_Reset:	
  2831                           ; 1 bytes @ 0x1
  2832                           
  2833  0071                     ??_Sensor_isEnabled:	
  2834                           ; 1 bytes @ 0x1
  2835                           
  2836  0071                     ??_Sensor_setSampled:	
  2837                           ; 1 bytes @ 0x1
  2838                           
  2839  0071                     ??_Sensor_isActive:	
  2840                           ; 1 bytes @ 0x1
  2841                           
  2842  0071                     ??_Sensor_isCalibrated:	
  2843                           ; 1 bytes @ 0x1
  2844                           
  2845  0071                     ??_Sensor_setActive:	
  2846                           ; 1 bytes @ 0x1
  2847                           
  2848  0071                     ??_Sensor_setInactive:	
  2849                           ; 1 bytes @ 0x1
  2850                           
  2851  0071                     ??_Sensor_isCalibratingAcqTime:	
  2852                           ; 1 bytes @ 0x1
  2853                           
  2854  0071                     ??_Sensor_setCalibratAcqTime:	
  2855                           ; 1 bytes @ 0x1
  2856                           
  2857  0071                     ??_Sensor_setCalibrated:	
  2858                           ; 1 bytes @ 0x1
  2859                           
  2860  0071                     ?_memcpy:	
  2861                           ; 1 bytes @ 0x1
  2862                           
  2863  0071                     ??_Button_Deviation_Update:	
  2864                           ; 1 bytes @ 0x1
  2865                           
  2866  0071                     ??_Button_Baseline_Update:	
  2867                           ; 1 bytes @ 0x1
  2868                           
  2869  0071                     ??_Button_Tick_helper:	
  2870                           ; 1 bytes @ 0x1
  2871                           
  2872  0071                     ??_INTERRUPT_InterruptManager:	
  2873                           ; 1 bytes @ 0x1
  2874                           
  2875  0071                     ??_TMR2_StartTimer:	
  2876                           ; 1 bytes @ 0x1
  2877                           
  2878  0071                     ??_TMR2_StopTimer:	
  2879                           ; 1 bytes @ 0x1
  2880                           
  2881  0071                     ??_TMR2_LoadPeriodRegister:	
  2882                           ; 1 bytes @ 0x1
  2883                           
  2884  0071                     ??_Sensor_getScanGroupIndex:	
  2885                           ; 1 bytes @ 0x1
  2886                           
  2887  0071                     ?___bmul:	
  2888                           ; 1 bytes @ 0x1
  2889                           
  2890  0071                     ?_abs:	
  2891                           ; 1 bytes @ 0x1
  2892                           
  2893  0071                     TMR2_LoadPeriodRegister@periodVal:	
  2894                           ; 2 bytes @ 0x1
  2895                           
  2896  0071                     Sensor_DefaultCallback@sensor:	
  2897                           ; 1 bytes @ 0x1
  2898                           
  2899  0071                     Sensor_setActive@sensor:	
  2900                           ; 1 bytes @ 0x1
  2901                           
  2902  0071                     Sensor_setInactive@sensor:	
  2903                           ; 1 bytes @ 0x1
  2904                           
  2905  0071                     Sensor_isActive@sensor:	
  2906                           ; 1 bytes @ 0x1
  2907                           
  2908  0071                     Sensor_isCalibrated@sensor:	
  2909                           ; 1 bytes @ 0x1
  2910                           
  2911  0071                     Sensor_setCalibrated@sensor:	
  2912                           ; 1 bytes @ 0x1
  2913                           
  2914  0071                     Sensor_setCalibratAcqTime@sensor:	
  2915                           ; 1 bytes @ 0x1
  2916                           
  2917  0071                     Sensor_isCalibratingAcqTime@sensor:	
  2918                           ; 1 bytes @ 0x1
  2919                           
  2920  0071                     Sensor_Sampled_Reset@sensor:	
  2921                           ; 1 bytes @ 0x1
  2922                           
  2923  0071                     Sensor_setSampled@sensor:	
  2924                           ; 1 bytes @ 0x1
  2925                           
  2926  0071                     ___bmul@multiplicand:	
  2927                           ; 1 bytes @ 0x1
  2928                           
  2929  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2930                           ; 1 bytes @ 0x1
  2931                           
  2932  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2933                           ; 2 bytes @ 0x1
  2934                           
  2935  0071                     EUSART_SetErrorHandler@interruptHandler:	
  2936                           ; 2 bytes @ 0x1
  2937                           
  2938  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2939                           ; 2 bytes @ 0x1
  2940                           
  2941  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  2942                           ; 2 bytes @ 0x1
  2943                           
  2944  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  2945                           ; 2 bytes @ 0x1
  2946                           
  2947  0071                     abs@a:	
  2948                           ; 2 bytes @ 0x1
  2949                           
  2950  0071                     memcpy@s1:	
  2951                           ; 2 bytes @ 0x1
  2952                           
  2953                           
  2954                           ; 2 bytes @ 0x1
  2955  0071                     	ds	1
  2956  0072                     ??_myButtonReleasedCallback:	
  2957  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  2958                           ; 1 bytes @ 0x2
  2959                           
  2960  0072                     ??_Sensor_DefaultCallback:	
  2961                           ; 1 bytes @ 0x2
  2962                           
  2963  0072                     ?_Sensor_loadADCSettings:	
  2964                           ; 1 bytes @ 0x2
  2965                           
  2966  0072                     ??___bmul:	
  2967                           ; 1 bytes @ 0x2
  2968                           
  2969  0072                     Sensor_loadADCSettings@adc_index:	
  2970                           ; 1 bytes @ 0x2
  2971                           
  2972  0072                     Sensor_isEnabled@sensor:	
  2973                           ; 1 bytes @ 0x2
  2974                           
  2975  0072                     MTOUCH_Button_isPressed@name:	
  2976                           ; 1 bytes @ 0x2
  2977                           
  2978                           
  2979                           ; 1 bytes @ 0x2
  2980  0072                     	ds	1
  2981  0073                     ??_EUSART_SetRxInterruptHandler:	
  2982  0073                     ??_EUSART_SetFramingErrorHandler:	
  2983                           ; 1 bytes @ 0x3
  2984                           
  2985  0073                     ??_EUSART_SetOverrunErrorHandler:	
  2986                           ; 1 bytes @ 0x3
  2987                           
  2988  0073                     ??_EUSART_SetErrorHandler:	
  2989                           ; 1 bytes @ 0x3
  2990                           
  2991  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  2992                           ; 1 bytes @ 0x3
  2993                           
  2994  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  2995                           ; 1 bytes @ 0x3
  2996                           
  2997  0073                     ??_MTOUCH_Button_Buttonmask_Get:	
  2998                           ; 1 bytes @ 0x3
  2999                           
  3000  0073                     ??_abs:	
  3001                           ; 1 bytes @ 0x3
  3002                           
  3003  0073                     ??_EUSART_Initialize:	
  3004                           ; 1 bytes @ 0x3
  3005                           
  3006  0073                     ??_Sensor_loadADCSettings:	
  3007                           ; 1 bytes @ 0x3
  3008                           
  3009  0073                     LED_PROCESS@x:	
  3010                           ; 1 bytes @ 0x3
  3011                           
  3012  0073                     Sensor_getScanGroupIndex@sensor:	
  3013                           ; 1 bytes @ 0x3
  3014                           
  3015  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3016                           ; 1 bytes @ 0x3
  3017                           
  3018  0073                     Button_Tick_helper@button:	
  3019                           ; 1 bytes @ 0x3
  3020                           
  3021  0073                     RELAY_PROCESS@x:	
  3022                           ; 1 bytes @ 0x3
  3023                           
  3024  0073                     ___bmul@product:	
  3025                           ; 1 bytes @ 0x3
  3026                           
  3027  0073                     memcpy@n:	
  3028                           ; 1 bytes @ 0x3
  3029                           
  3030                           
  3031                           ; 2 bytes @ 0x3
  3032  0073                     	ds	1
  3033  0074                     ??_MTOUCH_Button_Tick:	
  3034  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3035                           ; 1 bytes @ 0x4
  3036                           
  3037  0074                     ___bmul@multiplier:	
  3038                           ; 1 bytes @ 0x4
  3039                           
  3040                           
  3041                           ; 1 bytes @ 0x4
  3042  0074                     	ds	1
  3043  0075                     ??_MTOUCH_Sensor_Enable:	
  3044  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3045                           ; 1 bytes @ 0x5
  3046                           
  3047  0075                     ??_Sensor_RawSample_Update:	
  3048                           ; 1 bytes @ 0x5
  3049                           
  3050  0075                     ??_Sensor_postAcquisitionProcess:	
  3051                           ; 1 bytes @ 0x5
  3052                           
  3053  0075                     ??_Sensor_autoCalibration:	
  3054                           ; 1 bytes @ 0x5
  3055                           
  3056  0075                     ??_memcpy:	
  3057                           ; 1 bytes @ 0x5
  3058                           
  3059  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3060                           ; 1 bytes @ 0x5
  3061                           
  3062  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3063                           ; 1 bytes @ 0x5
  3064                           
  3065  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3066                           ; 1 bytes @ 0x5
  3067                           
  3068  0075                     MTOUCH_Button_Tick@i:	
  3069                           ; 2 bytes @ 0x5
  3070                           
  3071  0075                     MTOUCH_Button_Buttonmask_Get@output:	
  3072                           ; 1 bytes @ 0x5
  3073                           
  3074                           
  3075                           ; 1 bytes @ 0x5
  3076  0075                     	ds	1
  3077  0076                     ??_MTOUCH_Tick:	
  3078  0076                     Sensor_RawSample_Update@adcIndex:	
  3079                           ; 1 bytes @ 0x6
  3080                           
  3081  0076                     MTOUCH_Sensor_Enable@sensor:	
  3082                           ; 1 bytes @ 0x6
  3083                           
  3084  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3085                           ; 1 bytes @ 0x6
  3086                           
  3087  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3088                           ; 1 bytes @ 0x6
  3089                           
  3090  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3091                           ; 1 bytes @ 0x6
  3092                           
  3093  0076                     MTOUCH_Button_Buttonmask_Get@i:	
  3094                           ; 1 bytes @ 0x6
  3095                           
  3096  0076                     memcpy@tmp:	
  3097                           ; 1 bytes @ 0x6
  3098                           
  3099  0076                     Sensor_postAcquisitionProcess@deviation:	
  3100                           ; 1 bytes @ 0x6
  3101                           
  3102  0076                     _Sensor_loadADCSettings$1165:	
  3103                           ; 2 bytes @ 0x6
  3104                           
  3105                           
  3106                           ; 2 bytes @ 0x6
  3107  0076                     	ds	1
  3108  0077                     ?_myButtonPressedCallback:	
  3109  0077                     ?_myButtonReleasedCallback:	
  3110                           ; 1 bytes @ 0x7
  3111                           
  3112  0077                     ?_Button_DefaultCallback:	
  3113                           ; 1 bytes @ 0x7
  3114                           
  3115  0077                     ??_MTOUCH_Sensor_Initialize:	
  3116                           ; 1 bytes @ 0x7
  3117                           
  3118  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3119                           ; 1 bytes @ 0x7
  3120                           
  3121  0077                     ??_MTOUCH_Button_Initialize:	
  3122                           ; 1 bytes @ 0x7
  3123                           
  3124  0077                     myButtonPressedCallback@button:	
  3125                           ; 1 bytes @ 0x7
  3126                           
  3127  0077                     myButtonReleasedCallback@button:	
  3128                           ; 1 bytes @ 0x7
  3129                           
  3130  0077                     Sensor_RawSample_Update@sensor:	
  3131                           ; 1 bytes @ 0x7
  3132                           
  3133  0077                     Button_Baseline_Update@button:	
  3134                           ; 1 bytes @ 0x7
  3135                           
  3136  0077                     Button_DefaultCallback@button:	
  3137                           ; 1 bytes @ 0x7
  3138                           
  3139  0077                     memcpy@s:	
  3140                           ; 1 bytes @ 0x7
  3141                           
  3142                           
  3143                           ; 2 bytes @ 0x7
  3144  0077                     	ds	1
  3145  0078                     ??_myButtonPressedCallback:	
  3146  0078                     ??_Button_DefaultCallback:	
  3147                           ; 1 bytes @ 0x8
  3148                           
  3149  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3150                           ; 1 bytes @ 0x8
  3151                           
  3152  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3153                           ; 1 bytes @ 0x8
  3154                           
  3155  0078                     Sensor_loadADCSettings@addressOffset:	
  3156                           ; 1 bytes @ 0x8
  3157                           
  3158  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3159                           ; 1 bytes @ 0x8
  3160                           
  3161                           
  3162                           ; 1 bytes @ 0x8
  3163  0078                     	ds	1
  3164  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3165  0079                     ??_Button_Reading_Update_Helper:	
  3166                           ; 1 bytes @ 0x9
  3167                           
  3168  0079                     Sensor_postAcquisitionProcess@sensor:	
  3169                           ; 1 bytes @ 0x9
  3170                           
  3171  0079                     Sensor_loadADCSettings@sensor:	
  3172                           ; 1 bytes @ 0x9
  3173                           
  3174  0079                     Sensor_autoCalibration@adcIndex:	
  3175                           ; 1 bytes @ 0x9
  3176                           
  3177  0079                     MTOUCH_Button_Initialize@name:	
  3178                           ; 1 bytes @ 0x9
  3179                           
  3180  0079                     Button_Baseline_Initialize@button:	
  3181                           ; 1 bytes @ 0x9
  3182                           
  3183  0079                     memcpy@d1:	
  3184                           ; 1 bytes @ 0x9
  3185                           
  3186                           
  3187                           ; 1 bytes @ 0x9
  3188  0079                     	ds	1
  3189  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3190  007A                     Sensor_autoCalibration@sensor:	
  3191                           ; 1 bytes @ 0xA
  3192                           
  3193  007A                     MTOUCH_Button_Initialize@button:	
  3194                           ; 1 bytes @ 0xA
  3195                           
  3196  007A                     memcpy@d:	
  3197                           ; 1 bytes @ 0xA
  3198                           
  3199                           
  3200                           ; 1 bytes @ 0xA
  3201  007A                     	ds	1
  3202  007B                     ??_MTOUCH_Button_InitializeAll:	
  3203  007B                     ?_Sensor_Acq_ExecutePacket:	
  3204                           ; 1 bytes @ 0xB
  3205                           
  3206  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3207                           ; 1 bytes @ 0xB
  3208                           
  3209  007B                     Button_Reading_Update_Helper@button:	
  3210                           ; 1 bytes @ 0xB
  3211                           
  3212                           
  3213                           ; 1 bytes @ 0xB
  3214  007B                     	ds	1
  3215  007C                     ??_MTOUCH_Initialize:	
  3216  007C                     ??_Button_Reading_Update:	
  3217                           ; 1 bytes @ 0xC
  3218                           
  3219  007C                     ??_SYSTEM_Initialize:	
  3220                           ; 1 bytes @ 0xC
  3221                           
  3222  007C                     ??_main:	
  3223                           ; 1 bytes @ 0xC
  3224                           
  3225                           
  3226                           	psect	cstackBANK0
  3227  0020                     __pcstackBANK0:	
  3228                           ; 1 bytes @ 0xC
  3229                           
  3230  0020                     ??_Sensor_Acq_ExecutePacket:	
  3231  0020                     ??_Button_Baseline_Initialize:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0020                     MTOUCH_Button_InitializeAll@button:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     Button_Deviation_Update@button:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     Button_Reading_Update@button:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243                           
  3244                           ; 1 bytes @ 0x0
  3245  0020                     	ds	1
  3246  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3247  0021                     Button_Deviation_Update@deviation:	
  3248                           ; 1 bytes @ 0x1
  3249                           
  3250                           
  3251                           ; 4 bytes @ 0x1
  3252  0021                     	ds	1
  3253  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3254                           
  3255                           ; 1 bytes @ 0x2
  3256  0022                     	ds	1
  3257  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3258                           
  3259                           ; 1 bytes @ 0x3
  3260  0023                     	ds	1
  3261  0024                     ?_Button_State_Initializing:	
  3262  0024                     ?_Button_State_NotPressed:	
  3263                           ; 1 bytes @ 0x4
  3264                           
  3265  0024                     ?_Button_State_Pressed:	
  3266                           ; 1 bytes @ 0x4
  3267                           
  3268  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3269                           ; 1 bytes @ 0x4
  3270                           
  3271  0024                     Button_State_Initializing@button:	
  3272                           ; 1 bytes @ 0x4
  3273                           
  3274  0024                     Button_State_NotPressed@button:	
  3275                           ; 1 bytes @ 0x4
  3276                           
  3277  0024                     Button_State_Pressed@button:	
  3278                           ; 1 bytes @ 0x4
  3279                           
  3280                           
  3281                           ; 1 bytes @ 0x4
  3282  0024                     	ds	1
  3283  0025                     ??_Button_State_Initializing:	
  3284  0025                     ??_Button_State_NotPressed:	
  3285                           ; 1 bytes @ 0x5
  3286                           
  3287  0025                     ??_Button_State_Pressed:	
  3288                           ; 1 bytes @ 0x5
  3289                           
  3290  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3291                           ; 1 bytes @ 0x5
  3292                           
  3293                           
  3294                           ; 1 bytes @ 0x5
  3295  0025                     	ds	1
  3296  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3297                           
  3298                           ; 1 bytes @ 0x6
  3299  0026                     	ds	1
  3300  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3301                           
  3302                           ; 1 bytes @ 0x7
  3303  0027                     	ds	1
  3304  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3305                           
  3306                           ; 2 bytes @ 0x8
  3307  0028                     	ds	1
  3308  0029                     ??_Button_Service:	
  3309                           
  3310                           ; 1 bytes @ 0x9
  3311  0029                     	ds	1
  3312  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3313                           
  3314                           ; 2 bytes @ 0xA
  3315  002A                     	ds	1
  3316  002B                     Button_Service@name:	
  3317                           
  3318                           ; 1 bytes @ 0xB
  3319  002B                     	ds	1
  3320  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3321  002C                     Button_Service@button:	
  3322                           ; 1 bytes @ 0xC
  3323                           
  3324                           
  3325                           ; 1 bytes @ 0xC
  3326  002C                     	ds	1
  3327  002D                     ??_MTOUCH_Button_ServiceAll:	
  3328  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3329                           ; 1 bytes @ 0xD
  3330                           
  3331                           
  3332                           ; 1 bytes @ 0xD
  3333  002D                     	ds	1
  3334  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3335  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3336                           ; 1 bytes @ 0xE
  3337                           
  3338  002E                     MTOUCH_Button_ServiceAll@button:	
  3339                           ; 1 bytes @ 0xE
  3340                           
  3341                           
  3342                           ; 1 bytes @ 0xE
  3343  002E                     	ds	1
  3344  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3345                           
  3346                           ; 1 bytes @ 0xF
  3347  002F                     	ds	2
  3348  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3349                           
  3350                           ; 1 bytes @ 0x11
  3351  0031                     	ds	1
  3352  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3353                           
  3354                           ; 2 bytes @ 0x12
  3355  0032                     	ds	2
  3356  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3357                           
  3358                           ; 1 bytes @ 0x14
  3359  0034                     	ds	1
  3360  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3361                           
  3362                           ; 1 bytes @ 0x15
  3363  0035                     	ds	1
  3364  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3365                           
  3366                           ; 4 bytes @ 0x16
  3367  0036                     	ds	4
  3368  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3369                           
  3370                           ; 1 bytes @ 0x1A
  3371  003A                     	ds	1
  3372  003B                     ?_Sensor_Acquisition:	
  3373  003B                     Sensor_Acquisition@sensor_adc2:	
  3374                           ; 1 bytes @ 0x1B
  3375                           
  3376                           
  3377                           ; 1 bytes @ 0x1B
  3378  003B                     	ds	1
  3379  003C                     ??_Sensor_Acquisition:	
  3380                           
  3381                           ; 1 bytes @ 0x1C
  3382  003C                     	ds	1
  3383  003D                     Sensor_Acquisition@retry:	
  3384                           
  3385                           ; 1 bytes @ 0x1D
  3386  003D                     	ds	1
  3387  003E                     Sensor_Acquisition@sensor_adc1:	
  3388                           
  3389                           ; 1 bytes @ 0x1E
  3390  003E                     	ds	1
  3391  003F                     ??_Sensor_Service:	
  3392                           
  3393                           ; 1 bytes @ 0x1F
  3394  003F                     	ds	3
  3395  0042                     Sensor_Service@scanGroup:	
  3396                           
  3397                           ; 1 bytes @ 0x22
  3398  0042                     	ds	1
  3399  0043                     Sensor_Service@error:	
  3400                           
  3401                           ; 1 bytes @ 0x23
  3402  0043                     	ds	1
  3403  0044                     Sensor_Service@sensor_adc1:	
  3404                           
  3405                           ; 1 bytes @ 0x24
  3406  0044                     	ds	1
  3407  0045                     Sensor_Service@sensor_adc2:	
  3408                           
  3409                           ; 1 bytes @ 0x25
  3410  0045                     	ds	1
  3411  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3412                           
  3413                           ; 1 bytes @ 0x26
  3414  0046                     	ds	1
  3415  0047                     MTOUCH_Sensor_SampleAll@group:	
  3416                           
  3417                           ; 1 bytes @ 0x27
  3418  0047                     	ds	1
  3419  0048                     ??_MTOUCH_Service_Mainloop:	
  3420                           
  3421                           ; 1 bytes @ 0x28
  3422  0048                     	ds	1
  3423                           
  3424                           	psect	maintext
  3425  0C8F                     __pmaintext:	
  3426 ;;
  3427 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3428 ;;
  3429 ;; *************** function _main *****************
  3430 ;; Defined at:
  3431 ;;		line 13 in file "main.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;		None
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : B1F/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3445 ;;      Params:         0       0       0       0       0       0       0       0
  3446 ;;      Locals:         0       0       0       0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0       0
  3448 ;;      Totals:         0       0       0       0       0       0       0       0
  3449 ;;Total ram usage:        0 bytes
  3450 ;; Hardware stack levels required when called:   12
  3451 ;; This function calls:
  3452 ;;		_MTOUCH_Button_SetNotPressedCallback
  3453 ;;		_MTOUCH_Button_SetPressedCallback
  3454 ;;		_MTOUCH_Service_Mainloop
  3455 ;;		_SYSTEM_Initialize
  3456 ;; This function is called by:
  3457 ;;		Startup code after reset
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           
  3462                           ;psect for function _main
  3463  0C8F                     _main:	
  3464                           
  3465                           ;main.c: 15:     SYSTEM_Initialize();
  3466                           
  3467                           ;incstack = 0
  3468                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3469  0C8F  318B  23BC  318C   	fcall	_SYSTEM_Initialize
  3470                           
  3471                           ;main.c: 16:     (INTCONbits.GIE = 1);
  3472  0C92  178B               	bsf	11,7	;volatile
  3473                           
  3474                           ;main.c: 17:     (INTCONbits.PEIE = 1);
  3475  0C93  170B               	bsf	11,6	;volatile
  3476                           
  3477                           ;main.c: 18:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3478  0C94  30CE               	movlw	low _myButtonPressedCallback
  3479  0C95  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3480  0C96  300B               	movlw	high _myButtonPressedCallback
  3481  0C97  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3482  0C98  318A  228B  318C   	fcall	_MTOUCH_Button_SetPressedCallback
  3483                           
  3484                           ;main.c: 19:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3485  0C9B  306D               	movlw	low _myButtonReleasedCallback
  3486  0C9C  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3487  0C9D  300A               	movlw	high _myButtonReleasedCallback
  3488  0C9E  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3489  0C9F  318A  2285  318C   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3490  0CA2  0022               	movlb	2	; select bank2
  3491  0CA3  110C               	bcf	12,2	;volatile
  3492  0CA4                     l239:	
  3493                           ;main.c: 22:     while (1)
  3494                           
  3495                           
  3496                           ;main.c: 23:     {;main.c: 24:         if(MTOUCH_Service_Mainloop())
  3497  0CA4  318C  24C3  318C   	fcall	_MTOUCH_Service_Mainloop
  3498  0CA7  2CA4               	goto	l239
  3499  0CA8                     __end_of_main:	
  3500                           
  3501                           	psect	text1
  3502  0BBC                     __ptext1:	
  3503 ;; *************** function _SYSTEM_Initialize *****************
  3504 ;; Defined at:
  3505 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3519 ;;      Params:         0       0       0       0       0       0       0       0
  3520 ;;      Locals:         0       0       0       0       0       0       0       0
  3521 ;;      Temps:          0       0       0       0       0       0       0       0
  3522 ;;      Totals:         0       0       0       0       0       0       0       0
  3523 ;;Total ram usage:        0 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    9
  3526 ;; This function calls:
  3527 ;;		_EUSART_Initialize
  3528 ;;		_MTOUCH_Initialize
  3529 ;;		_OSCILLATOR_Initialize
  3530 ;;		_PIN_MANAGER_Initialize
  3531 ;;		_TMR2_Initialize
  3532 ;;		_WDT_Initialize
  3533 ;; This function is called by:
  3534 ;;		_main
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           
  3539                           ;psect for function _SYSTEM_Initialize
  3540  0BBC                     _SYSTEM_Initialize:	
  3541                           
  3542                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3543                           
  3544                           ;incstack = 0
  3545                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3546  0BBC  318C  24FB  318B   	fcall	_PIN_MANAGER_Initialize
  3547                           
  3548                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3549  0BBF  318A  22A9  318B   	fcall	_OSCILLATOR_Initialize
  3550                           
  3551                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3552  0BC2  3187  27FC  318B   	fcall	_WDT_Initialize
  3553                           
  3554                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  3555  0BC5  318A  22DF  318B   	fcall	_TMR2_Initialize
  3556                           
  3557                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  3558  0BC8  318E  262D  318B   	fcall	_EUSART_Initialize
  3559                           
  3560                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  3561  0BCB  318A  22FC         	fcall	_MTOUCH_Initialize
  3562  0BCD  0008               	return
  3563  0BCE                     __end_of_SYSTEM_Initialize:	
  3564                           
  3565                           	psect	text2
  3566  07FC                     __ptext2:	
  3567 ;; *************** function _WDT_Initialize *****************
  3568 ;; Defined at:
  3569 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;		None
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;		None
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		wreg
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3583 ;;      Params:         0       0       0       0       0       0       0       0
  3584 ;;      Locals:         0       0       0       0       0       0       0       0
  3585 ;;      Temps:          0       0       0       0       0       0       0       0
  3586 ;;      Totals:         0       0       0       0       0       0       0       0
  3587 ;;Total ram usage:        0 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    4
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_SYSTEM_Initialize
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           
  3598                           ;psect for function _WDT_Initialize
  3599  07FC                     _WDT_Initialize:	
  3600                           
  3601                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  3602                           
  3603                           ;incstack = 0
  3604                           ; Regs used in _WDT_Initialize: [wreg]
  3605  07FC  3016               	movlw	22
  3606  07FD  0021               	movlb	1	; select bank1
  3607  07FE  0097               	movwf	23	;volatile
  3608  07FF  0008               	return
  3609  0800                     __end_of_WDT_Initialize:	
  3610                           
  3611                           	psect	text3
  3612  0ADF                     __ptext3:	
  3613 ;; *************** function _TMR2_Initialize *****************
  3614 ;; Defined at:
  3615 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;		None
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3629 ;;      Params:         0       0       0       0       0       0       0       0
  3630 ;;      Locals:         0       0       0       0       0       0       0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0
  3632 ;;      Totals:         0       0       0       0       0       0       0       0
  3633 ;;Total ram usage:        0 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    4
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_SYSTEM_Initialize
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           
  3644                           ;psect for function _TMR2_Initialize
  3645  0ADF                     _TMR2_Initialize:	
  3646                           
  3647                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  3648                           
  3649                           ;incstack = 0
  3650                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  3651  0ADF  30FF               	movlw	255
  3652  0AE0  0020               	movlb	0	; select bank0
  3653  0AE1  009B               	movwf	27	;volatile
  3654                           
  3655                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  3656  0AE2  019A               	clrf	26	;volatile
  3657                           
  3658                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  3659  0AE3  1091               	bcf	17,1	;volatile
  3660                           
  3661                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  3662  0AE4  3004               	movlw	4
  3663  0AE5  009C               	movwf	28	;volatile
  3664  0AE6  0008               	return
  3665  0AE7                     __end_of_TMR2_Initialize:	
  3666                           
  3667                           	psect	text4
  3668  0CFB                     __ptext4:	
  3669 ;; *************** function _PIN_MANAGER_Initialize *****************
  3670 ;; Defined at:
  3671 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;		None
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3685 ;;      Params:         0       0       0       0       0       0       0       0
  3686 ;;      Locals:         0       0       0       0       0       0       0       0
  3687 ;;      Temps:          0       0       0       0       0       0       0       0
  3688 ;;      Totals:         0       0       0       0       0       0       0       0
  3689 ;;Total ram usage:        0 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    4
  3692 ;; This function calls:
  3693 ;;		Nothing
  3694 ;; This function is called by:
  3695 ;;		_SYSTEM_Initialize
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function _PIN_MANAGER_Initialize
  3701  0CFB                     _PIN_MANAGER_Initialize:	
  3702                           
  3703                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  3704                           
  3705                           ;incstack = 0
  3706                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3707  0CFB  3037               	movlw	55
  3708  0CFC  0022               	movlb	2	; select bank2
  3709  0CFD  008C               	movwf	12	;volatile
  3710                           
  3711                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0xC0;
  3712  0CFE  30C0               	movlw	192
  3713  0CFF  008D               	movwf	13	;volatile
  3714                           
  3715                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xBF;
  3716  0D00  30BF               	movlw	191
  3717  0D01  008E               	movwf	14	;volatile
  3718                           
  3719                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  3720  0D02  3008               	movlw	8
  3721  0D03  0021               	movlb	1	; select bank1
  3722  0D04  008C               	movwf	12	;volatile
  3723                           
  3724                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  3725  0D05  3020               	movlw	32
  3726  0D06  008D               	movwf	13	;volatile
  3727                           
  3728                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  3729  0D07  3040               	movlw	64
  3730  0D08  008E               	movwf	14	;volatile
  3731                           
  3732                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE8;
  3733  0D09  30E8               	movlw	232
  3734  0D0A  0023               	movlb	3	; select bank3
  3735  0D0B  008E               	movwf	14	;volatile
  3736                           
  3737                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  3738  0D0C  3040               	movlw	64
  3739  0D0D  008D               	movwf	13	;volatile
  3740                           
  3741                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  3742  0D0E  3037               	movlw	55
  3743  0D0F  008C               	movwf	12	;volatile
  3744                           
  3745                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  3746  0D10  0024               	movlb	4	; select bank4
  3747  0D11  018D               	clrf	13	;volatile
  3748                           
  3749                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  3750  0D12  018C               	clrf	12	;volatile
  3751                           
  3752                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  3753  0D13  0021               	movlb	1	; select bank1
  3754  0D14  1795               	bsf	21,7	;volatile
  3755                           
  3756                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  3757  0D15  0022               	movlb	2	; select bank2
  3758  0D16  019D               	clrf	29	;volatile
  3759  0D17  0008               	return
  3760  0D18                     __end_of_PIN_MANAGER_Initialize:	
  3761                           
  3762                           	psect	text5
  3763  0AA9                     __ptext5:	
  3764 ;; *************** function _OSCILLATOR_Initialize *****************
  3765 ;; Defined at:
  3766 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;		None
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg, status,2
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3780 ;;      Params:         0       0       0       0       0       0       0       0
  3781 ;;      Locals:         0       0       0       0       0       0       0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0       0
  3783 ;;      Totals:         0       0       0       0       0       0       0       0
  3784 ;;Total ram usage:        0 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    4
  3787 ;; This function calls:
  3788 ;;		Nothing
  3789 ;; This function is called by:
  3790 ;;		_SYSTEM_Initialize
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           
  3795                           ;psect for function _OSCILLATOR_Initialize
  3796  0AA9                     _OSCILLATOR_Initialize:	
  3797                           
  3798                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  3799                           
  3800                           ;incstack = 0
  3801                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3802  0AA9  30F0               	movlw	240
  3803  0AAA  0021               	movlb	1	; select bank1
  3804  0AAB  0099               	movwf	25	;volatile
  3805                           
  3806                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  3807  0AAC  0022               	movlb	2	; select bank2
  3808  0AAD  0196               	clrf	22	;volatile
  3809  0AAE  0008               	return
  3810  0AAF                     __end_of_OSCILLATOR_Initialize:	
  3811                           
  3812                           	psect	text6
  3813  0AFC                     __ptext6:	
  3814 ;; *************** function _MTOUCH_Initialize *****************
  3815 ;; Defined at:
  3816 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;		None
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;		None
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  1    wreg      void 
  3823 ;; Registers used:
  3824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3830 ;;      Params:         0       0       0       0       0       0       0       0
  3831 ;;      Locals:         0       0       0       0       0       0       0       0
  3832 ;;      Temps:          0       0       0       0       0       0       0       0
  3833 ;;      Totals:         0       0       0       0       0       0       0       0
  3834 ;;Total ram usage:        0 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    8
  3837 ;; This function calls:
  3838 ;;		_MTOUCH_Button_InitializeAll
  3839 ;;		_MTOUCH_Sensor_InitializeAll
  3840 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  3841 ;;		_MTOUCH_Sensor_Scan_Initialize
  3842 ;; This function is called by:
  3843 ;;		_SYSTEM_Initialize
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           
  3848                           ;psect for function _MTOUCH_Initialize
  3849  0AFC                     _MTOUCH_Initialize:	
  3850                           
  3851                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  3852                           
  3853                           ;incstack = 0
  3854                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3855  0AFC  318B  234B  318A   	fcall	_MTOUCH_Sensor_InitializeAll
  3856                           
  3857                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  3858  0AFF  318C  24DF  318A   	fcall	_MTOUCH_Button_InitializeAll
  3859                           
  3860                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  3861  0B02  318B  23E1  318A   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  3862                           
  3863                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  3864  0B05  318B  2369         	fcall	_MTOUCH_Sensor_Scan_Initialize
  3865  0B07  0008               	return
  3866  0B08                     __end_of_MTOUCH_Initialize:	
  3867                           
  3868                           	psect	text7
  3869  0B4B                     __ptext7:	
  3870 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  3871 ;; Defined at:
  3872 ;;		line 231 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;		None
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  sensor          1   10[COMMON] enum E2854
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  1    wreg      void 
  3879 ;; Registers used:
  3880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3886 ;;      Params:         0       0       0       0       0       0       0       0
  3887 ;;      Locals:         1       0       0       0       0       0       0       0
  3888 ;;      Temps:          1       0       0       0       0       0       0       0
  3889 ;;      Totals:         2       0       0       0       0       0       0       0
  3890 ;;Total ram usage:        2 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    7
  3893 ;; This function calls:
  3894 ;;		_MTOUCH_Sensor_Initialize
  3895 ;; This function is called by:
  3896 ;;		_MTOUCH_Initialize
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           
  3901                           ;psect for function _MTOUCH_Sensor_InitializeAll
  3902  0B4B                     _MTOUCH_Sensor_InitializeAll:	
  3903                           
  3904                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 233:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 235:     for (sensor = 0; sensor < 4u; sensor
      +                          ++)
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3908  0B4B  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  3909  0B4C                     l4680:	
  3910                           
  3911                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 236:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 237:         MTOUCH_Sensor_Initialize(sensor);
  3912  0B4C  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  3913  0B4D  318C  2409  318B   	fcall	_MTOUCH_Sensor_Initialize
  3914                           
  3915                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 238:     }
  3916  0B50  3001               	movlw	1
  3917  0B51  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  3918  0B52  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  3919  0B53  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  3920  0B54  3004               	movlw	4
  3921  0B55  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  3922  0B56  1803               	btfsc	3,0
  3923  0B57  0008               	return
  3924  0B58  2B4C               	goto	l4680
  3925  0B59                     __end_of_MTOUCH_Sensor_InitializeAll:	
  3926                           
  3927                           	psect	text8
  3928  0C09                     __ptext8:	
  3929 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  3930 ;; Defined at:
  3931 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  sensor          1    wreg     enum E2854
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;  sensor          1    8[COMMON] enum E2854
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      enum E2859
  3938 ;; Registers used:
  3939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3945 ;;      Params:         0       0       0       0       0       0       0       0
  3946 ;;      Locals:         1       0       0       0       0       0       0       0
  3947 ;;      Temps:          1       0       0       0       0       0       0       0
  3948 ;;      Totals:         2       0       0       0       0       0       0       0
  3949 ;;Total ram usage:        2 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    6
  3952 ;; This function calls:
  3953 ;;		_MTOUCH_Sensor_Calibrate
  3954 ;;		_MTOUCH_Sensor_Enable
  3955 ;;		_Sensor_Sampled_Reset
  3956 ;;		___bmul
  3957 ;; This function is called by:
  3958 ;;		_MTOUCH_Sensor_InitializeAll
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           
  3963                           ;psect for function _MTOUCH_Sensor_Initialize
  3964  0C09                     _MTOUCH_Sensor_Initialize:	
  3965                           
  3966                           ;incstack = 0
  3967                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  3968                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  3969  0C09  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  3970                           
  3971                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 216: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           217: {;mcc_generated_files/mtouch/mtouch_sensor.c: 219:     MTOUCH_Sensor_Enable(sensor
      +                          );
  3972  0C0A  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3973  0C0B  318B  23AB  318C   	fcall	_MTOUCH_Sensor_Enable
  3974                           
  3975                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 220:     MTOUCH_Sensor_Calibrate(sensor);
  3976  0C0E  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3977  0C0F  318B  239A  318C   	fcall	_MTOUCH_Sensor_Calibrate
  3978                           
  3979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 221:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  3980  0C12  3009               	movlw	9
  3981  0C13  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  3982  0C14  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  3983  0C15  00F1               	movwf	___bmul@multiplicand
  3984  0C16  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3985  0C17  318B  2389  318C   	fcall	___bmul
  3986  0C1A  3EA0               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  3987  0C1B  318A  22D0         	fcall	_Sensor_Sampled_Reset
  3988  0C1D  0008               	return
  3989  0C1E                     __end_of_MTOUCH_Sensor_Initialize:	
  3990                           
  3991                           	psect	text9
  3992  0BAB                     __ptext9:	
  3993 ;; *************** function _MTOUCH_Sensor_Enable *****************
  3994 ;; Defined at:
  3995 ;;		line 849 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  sensor          1    wreg     enum E2854
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;  sensor          1    6[COMMON] enum E2854
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      void 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4009 ;;      Params:         0       0       0       0       0       0       0       0
  4010 ;;      Locals:         1       0       0       0       0       0       0       0
  4011 ;;      Temps:          1       0       0       0       0       0       0       0
  4012 ;;      Totals:         2       0       0       0       0       0       0       0
  4013 ;;Total ram usage:        2 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    5
  4016 ;; This function calls:
  4017 ;;		___bmul
  4018 ;; This function is called by:
  4019 ;;		_MTOUCH_Sensor_Initialize
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           
  4024                           ;psect for function _MTOUCH_Sensor_Enable
  4025  0BAB                     _MTOUCH_Sensor_Enable:	
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4029                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  4030  0BAB  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  4031                           
  4032                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 849: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 850: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 851:     if(sensor < 4u)
  4033  0BAC  3004               	movlw	4
  4034  0BAD  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  4035  0BAE  1803               	skipnc
  4036  0BAF  0008               	return
  4037                           
  4038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 852:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  4039  0BB0  3009               	movlw	9
  4040  0BB1  00F5               	movwf	??_MTOUCH_Sensor_Enable
  4041  0BB2  0875               	movf	??_MTOUCH_Sensor_Enable,w
  4042  0BB3  00F1               	movwf	___bmul@multiplicand
  4043  0BB4  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  4044  0BB5  318B  2389         	fcall	___bmul
  4045  0BB7  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  4046  0BB8  0086               	movwf	6
  4047  0BB9  0187               	clrf	7
  4048  0BBA  1581               	bsf	1,3
  4049  0BBB  0008               	return
  4050  0BBC                     __end_of_MTOUCH_Sensor_Enable:	
  4051                           
  4052                           	psect	text10
  4053  0CDF                     __ptext10:	
  4054 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  4055 ;; Defined at:
  4056 ;;		line 179 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;		None
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  button          1    0[BANK0 ] enum E3070
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  1    wreg      void 
  4063 ;; Registers used:
  4064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4070 ;;      Params:         0       0       0       0       0       0       0       0
  4071 ;;      Locals:         0       1       0       0       0       0       0       0
  4072 ;;      Temps:          1       0       0       0       0       0       0       0
  4073 ;;      Totals:         1       1       0       0       0       0       0       0
  4074 ;;Total ram usage:        2 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    7
  4077 ;; This function calls:
  4078 ;;		_MTOUCH_Button_Initialize
  4079 ;;		_memcpy
  4080 ;; This function is called by:
  4081 ;;		_MTOUCH_Initialize
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           
  4086                           ;psect for function _MTOUCH_Button_InitializeAll
  4087  0CDF                     _MTOUCH_Button_InitializeAll:	
  4088                           
  4089                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 183:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  4090                           
  4091                           ;incstack = 0
  4092                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4093  0CDF  3000               	movlw	low (_mtouch_button_init| (0+32768))
  4094  0CE0  00F1               	movwf	memcpy@s1
  4095  0CE1  3090               	movlw	high (_mtouch_button_init| (0+32768))
  4096  0CE2  00F2               	movwf	memcpy@s1+1
  4097  0CE3  3040               	movlw	64
  4098  0CE4  00F3               	movwf	memcpy@n
  4099  0CE5  3000               	movlw	0
  4100  0CE6  00F4               	movwf	memcpy@n+1
  4101  0CE7  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  4102  0CE8  318D  25A7  318C   	fcall	_memcpy
  4103                           
  4104                           ;mcc_generated_files/mtouch/mtouch_button.c: 185:     for (button = 0; button < 4u; butt
      +                          on++)
  4105  0CEB  0020               	movlb	0	; select bank0
  4106  0CEC  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  4107  0CED                     l4694:	
  4108                           
  4109                           ;mcc_generated_files/mtouch/mtouch_button.c: 186:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 187:         MTOUCH_Button_Initialize(button);
  4110  0CED  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  4111  0CEE  318E  268F  318C   	fcall	_MTOUCH_Button_Initialize
  4112                           
  4113                           ;mcc_generated_files/mtouch/mtouch_button.c: 188:     }
  4114  0CF1  3001               	movlw	1
  4115  0CF2  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  4116  0CF3  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  4117  0CF4  0020               	movlb	0	; select bank0
  4118  0CF5  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  4119  0CF6  3004               	movlw	4
  4120  0CF7  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  4121  0CF8  1803               	btfsc	3,0
  4122  0CF9  0008               	return
  4123  0CFA  2CED               	goto	l4694
  4124  0CFB                     __end_of_MTOUCH_Button_InitializeAll:	
  4125                           
  4126                           	psect	text11
  4127  0DA7                     __ptext11:	
  4128 ;; *************** function _memcpy *****************
  4129 ;; Defined at:
  4130 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  d1              1    wreg     PTR void 
  4133 ;;		 -> mtouch_button(64), 
  4134 ;;  s1              2    1[COMMON] PTR const void 
  4135 ;;		 -> mtouch_button_init(64), 
  4136 ;;  n               2    3[COMMON] unsigned int 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  d1              1    9[COMMON] PTR void 
  4139 ;;		 -> mtouch_button(64), 
  4140 ;;  s               2    7[COMMON] PTR const unsigned char 
  4141 ;;		 -> mtouch_button_init(64), 
  4142 ;;  d               1   10[COMMON] PTR unsigned char 
  4143 ;;		 -> mtouch_button(64), 
  4144 ;;  tmp             1    6[COMMON] unsigned char 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  1    wreg      PTR void 
  4147 ;; Registers used:
  4148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4154 ;;      Params:         4       0       0       0       0       0       0       0
  4155 ;;      Locals:         5       0       0       0       0       0       0       0
  4156 ;;      Temps:          1       0       0       0       0       0       0       0
  4157 ;;      Totals:        10       0       0       0       0       0       0       0
  4158 ;;Total ram usage:       10 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    4
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_MTOUCH_Button_InitializeAll
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _memcpy
  4170  0DA7                     _memcpy:	
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  4174                           ;memcpy@d1 stored from wreg
  4175  0DA7  00F9               	movwf	memcpy@d1
  4176  0DA8  0872               	movf	memcpy@s1+1,w
  4177  0DA9  00F8               	movwf	memcpy@s+1
  4178  0DAA  0871               	movf	memcpy@s1,w
  4179  0DAB  00F7               	movwf	memcpy@s
  4180  0DAC  0879               	movf	memcpy@d1,w
  4181  0DAD  00F5               	movwf	??_memcpy
  4182  0DAE  0875               	movf	??_memcpy,w
  4183  0DAF  00FA               	movwf	memcpy@d
  4184  0DB0                     l4620:	
  4185  0DB0  3001               	movlw	1
  4186  0DB1  02F3               	subwf	memcpy@n,f
  4187  0DB2  3000               	movlw	0
  4188  0DB3  3BF4               	subwfb	memcpy@n+1,f
  4189  0DB4  0A73               	incf	memcpy@n,w
  4190  0DB5  1903               	btfsc	3,2
  4191  0DB6  0A74               	incf	memcpy@n+1,w
  4192  0DB7  1903               	btfsc	3,2
  4193  0DB8  0008               	return
  4194  0DB9  0877               	movf	memcpy@s,w
  4195  0DBA  0084               	movwf	4
  4196  0DBB  0878               	movf	memcpy@s+1,w
  4197  0DBC  0085               	movwf	5
  4198  0DBD  0800               	movf	0,w	;code access
  4199  0DBE  00F5               	movwf	??_memcpy
  4200  0DBF  0875               	movf	??_memcpy,w
  4201  0DC0  00F6               	movwf	memcpy@tmp
  4202  0DC1  3001               	movlw	1
  4203  0DC2  07F7               	addwf	memcpy@s,f
  4204  0DC3  3000               	movlw	0
  4205  0DC4  3DF8               	addwfc	memcpy@s+1,f
  4206  0DC5  0876               	movf	memcpy@tmp,w
  4207  0DC6  00F5               	movwf	??_memcpy
  4208  0DC7  087A               	movf	memcpy@d,w
  4209  0DC8  0086               	movwf	6
  4210  0DC9  3001               	movlw	1	; select bank2/3
  4211  0DCA  0087               	movwf	7
  4212  0DCB  0875               	movf	??_memcpy,w
  4213  0DCC  0081               	movwf	1
  4214  0DCD  3001               	movlw	1
  4215  0DCE  00F5               	movwf	??_memcpy
  4216  0DCF  0875               	movf	??_memcpy,w
  4217  0DD0  07FA               	addwf	memcpy@d,f
  4218  0DD1  2DB0               	goto	l4620
  4219  0DD2                     __end_of_memcpy:	
  4220                           
  4221                           	psect	text12
  4222  0E2D                     __ptext12:	
  4223 ;; *************** function _EUSART_Initialize *****************
  4224 ;; Defined at:
  4225 ;;		line 81 in file "mcc_generated_files/eusart.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0, pclath, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4239 ;;      Params:         0       0       0       0       0       0       0       0
  4240 ;;      Locals:         0       0       0       0       0       0       0       0
  4241 ;;      Temps:          0       0       0       0       0       0       0       0
  4242 ;;      Totals:         0       0       0       0       0       0       0       0
  4243 ;;Total ram usage:        0 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    5
  4246 ;; This function calls:
  4247 ;;		_EUSART_SetErrorHandler
  4248 ;;		_EUSART_SetFramingErrorHandler
  4249 ;;		_EUSART_SetOverrunErrorHandler
  4250 ;;		_EUSART_SetRxInterruptHandler
  4251 ;; This function is called by:
  4252 ;;		_SYSTEM_Initialize
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           
  4257                           ;psect for function _EUSART_Initialize
  4258  0E2D                     _EUSART_Initialize:	
  4259                           
  4260                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  4261                           
  4262                           ;incstack = 0
  4263                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4264  0E2D  0021               	movlb	1	; select bank1
  4265  0E2E  1291               	bcf	17,5	;volatile
  4266                           
  4267                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  4268  0E2F  305D               	movlw	low _EUSART_Receive_ISR
  4269  0E30  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  4270  0E31  300E               	movlw	high _EUSART_Receive_ISR
  4271  0E32  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  4272  0E33  318A  22A3  318E   	fcall	_EUSART_SetRxInterruptHandler
  4273                           
  4274                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  4275  0E36  3008               	movlw	8
  4276  0E37  0023               	movlb	3	; select bank3
  4277  0E38  009F               	movwf	31	;volatile
  4278                           
  4279                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  4280  0E39  3090               	movlw	144
  4281  0E3A  009D               	movwf	29	;volatile
  4282                           
  4283                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  4284  0E3B  3024               	movlw	36
  4285  0E3C  009E               	movwf	30	;volatile
  4286                           
  4287                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  4288  0E3D  3040               	movlw	64
  4289  0E3E  009B               	movwf	27	;volatile
  4290                           
  4291                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  4292  0E3F  3003               	movlw	3
  4293  0E40  009C               	movwf	28	;volatile
  4294                           
  4295                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  4296  0E41  306C               	movlw	low _EUSART_DefaultFramingErrorHandler
  4297  0E42  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  4298  0E43  300A               	movlw	high _EUSART_DefaultFramingErrorHandler
  4299  0E44  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  4300  0E45  318A  2297  318E   	fcall	_EUSART_SetFramingErrorHandler
  4301                           
  4302                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  4303  0E48  307C               	movlw	low _EUSART_DefaultOverrunErrorHandler
  4304  0E49  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  4305  0E4A  300A               	movlw	high _EUSART_DefaultOverrunErrorHandler
  4306  0E4B  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  4307  0E4C  318A  229D  318E   	fcall	_EUSART_SetOverrunErrorHandler
  4308                           
  4309                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  4310  0E4F  3070               	movlw	low _EUSART_DefaultErrorHandler
  4311  0E50  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  4312  0E51  300A               	movlw	high _EUSART_DefaultErrorHandler
  4313  0E52  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  4314  0E53  318A  2291         	fcall	_EUSART_SetErrorHandler
  4315                           
  4316                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  4317  0E55  0020               	movlb	0	; select bank0
  4318  0E56  01DC               	clrf	_eusartRxLastError	;volatile
  4319                           
  4320                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  4321  0E57  01FC               	clrf	_eusartRxHead	;volatile
  4322                           
  4323                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  4324  0E58  01DE               	clrf	_eusartRxTail	;volatile
  4325                           
  4326                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  4327  0E59  01DD               	clrf	_eusartRxCount	;volatile
  4328                           
  4329                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  4330  0E5A  0021               	movlb	1	; select bank1
  4331  0E5B  1691               	bsf	17,5	;volatile
  4332  0E5C  0008               	return
  4333  0E5D                     __end_of_EUSART_Initialize:	
  4334                           
  4335                           	psect	text13
  4336  0AA3                     __ptext13:	
  4337 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  4338 ;; Defined at:
  4339 ;;		line 241 in file "mcc_generated_files/eusart.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4342 ;;		 -> EUSART_Receive_ISR(1), 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      void 
  4347 ;; Registers used:
  4348 ;;		wreg
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4354 ;;      Params:         2       0       0       0       0       0       0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0
  4357 ;;      Totals:         2       0       0       0       0       0       0       0
  4358 ;;Total ram usage:        2 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    4
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_EUSART_Initialize
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           
  4369                           ;psect for function _EUSART_SetRxInterruptHandler
  4370  0AA3                     _EUSART_SetRxInterruptHandler:	
  4371                           
  4372                           ;mcc_generated_files/eusart.c: 242:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4376  0AA3  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4377  0AA4  0020               	movlb	0	; select bank0
  4378  0AA5  00EF               	movwf	_EUSART_RxDefaultInterruptHandler+1
  4379  0AA6  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4380  0AA7  00EE               	movwf	_EUSART_RxDefaultInterruptHandler
  4381  0AA8  0008               	return
  4382  0AA9                     __end_of_EUSART_SetRxInterruptHandler:	
  4383                           
  4384                           	psect	text14
  4385  0A9D                     __ptext14:	
  4386 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  4387 ;; Defined at:
  4388 ;;		line 232 in file "mcc_generated_files/eusart.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4391 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;		None
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4403 ;;      Params:         2       0       0       0       0       0       0       0
  4404 ;;      Locals:         0       0       0       0       0       0       0       0
  4405 ;;      Temps:          0       0       0       0       0       0       0       0
  4406 ;;      Totals:         2       0       0       0       0       0       0       0
  4407 ;;Total ram usage:        2 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    4
  4410 ;; This function calls:
  4411 ;;		Nothing
  4412 ;; This function is called by:
  4413 ;;		_EUSART_Initialize
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           
  4418                           ;psect for function _EUSART_SetOverrunErrorHandler
  4419  0A9D                     _EUSART_SetOverrunErrorHandler:	
  4420                           
  4421                           ;mcc_generated_files/eusart.c: 233:     EUSART_OverrunErrorHandler = interruptHandler;
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  4425  0A9D  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  4426  0A9E  0021               	movlb	1	; select bank1
  4427  0A9F  00CF               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  4428  0AA0  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  4429  0AA1  00CE               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  4430  0AA2  0008               	return
  4431  0AA3                     __end_of_EUSART_SetOverrunErrorHandler:	
  4432                           
  4433                           	psect	text15
  4434  0A97                     __ptext15:	
  4435 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  4436 ;; Defined at:
  4437 ;;		line 228 in file "mcc_generated_files/eusart.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4440 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;		None
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  1    wreg      void 
  4445 ;; Registers used:
  4446 ;;		wreg
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4452 ;;      Params:         2       0       0       0       0       0       0       0
  4453 ;;      Locals:         0       0       0       0       0       0       0       0
  4454 ;;      Temps:          0       0       0       0       0       0       0       0
  4455 ;;      Totals:         2       0       0       0       0       0       0       0
  4456 ;;Total ram usage:        2 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    4
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_EUSART_Initialize
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           
  4467                           ;psect for function _EUSART_SetFramingErrorHandler
  4468  0A97                     _EUSART_SetFramingErrorHandler:	
  4469                           
  4470                           ;mcc_generated_files/eusart.c: 229:     EUSART_FramingErrorHandler = interruptHandler;
  4471                           
  4472                           ;incstack = 0
  4473                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  4474  0A97  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  4475  0A98  0020               	movlb	0	; select bank0
  4476  0A99  00ED               	movwf	_EUSART_FramingErrorHandler+1
  4477  0A9A  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  4478  0A9B  00EC               	movwf	_EUSART_FramingErrorHandler
  4479  0A9C  0008               	return
  4480  0A9D                     __end_of_EUSART_SetFramingErrorHandler:	
  4481                           
  4482                           	psect	text16
  4483  0A91                     __ptext16:	
  4484 ;; *************** function _EUSART_SetErrorHandler *****************
  4485 ;; Defined at:
  4486 ;;		line 236 in file "mcc_generated_files/eusart.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  4489 ;;		 -> EUSART_DefaultErrorHandler(1), 
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  1    wreg      void 
  4494 ;; Registers used:
  4495 ;;		wreg
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4501 ;;      Params:         2       0       0       0       0       0       0       0
  4502 ;;      Locals:         0       0       0       0       0       0       0       0
  4503 ;;      Temps:          0       0       0       0       0       0       0       0
  4504 ;;      Totals:         2       0       0       0       0       0       0       0
  4505 ;;Total ram usage:        2 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    4
  4508 ;; This function calls:
  4509 ;;		Nothing
  4510 ;; This function is called by:
  4511 ;;		_EUSART_Initialize
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _EUSART_SetErrorHandler
  4517  0A91                     _EUSART_SetErrorHandler:	
  4518                           
  4519                           ;mcc_generated_files/eusart.c: 237:     EUSART_ErrorHandler = interruptHandler;
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  4523  0A91  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  4524  0A92  0021               	movlb	1	; select bank1
  4525  0A93  00CD               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  4526  0A94  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  4527  0A95  00CC               	movwf	_EUSART_ErrorHandler^(0+128)
  4528  0A96  0008               	return
  4529  0A97                     __end_of_EUSART_SetErrorHandler:	
  4530                           
  4531                           	psect	text17
  4532  0CC3                     __ptext17:	
  4533 ;; *************** function _MTOUCH_Service_Mainloop *****************
  4534 ;; Defined at:
  4535 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;		None
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;		None
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      _Bool 
  4542 ;; Registers used:
  4543 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4549 ;;      Params:         0       0       0       0       0       0       0       0
  4550 ;;      Locals:         0       0       0       0       0       0       0       0
  4551 ;;      Temps:          0       1       0       0       0       0       0       0
  4552 ;;      Totals:         0       1       0       0       0       0       0       0
  4553 ;;Total ram usage:        1 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:   11
  4556 ;; This function calls:
  4557 ;;		_MTOUCH_Button_ServiceAll
  4558 ;;		_MTOUCH_Sensor_SampleAll
  4559 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4560 ;;		_MTOUCH_Tick
  4561 ;;		_MTOUCH_needReburst
  4562 ;; This function is called by:
  4563 ;;		_main
  4564 ;;		_touch_example
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           
  4569                           ;psect for function _MTOUCH_Service_Mainloop
  4570  0CC3                     _MTOUCH_Service_Mainloop:	
  4571                           
  4572                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  4573                           
  4574                           ;incstack = 0
  4575                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4576  0CC3  0020               	movlb	0	; select bank0
  4577  0CC4  01DB               	clrf	_mtouch_time_toScan
  4578  0CC5  0ADB               	incf	_mtouch_time_toScan,f
  4579                           
  4580                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  4581                           
  4582                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  4583  0CC6  318C  241E  318C   	fcall	_MTOUCH_Sensor_SampleAll
  4584  0CC9  3A00               	xorlw	0
  4585  0CCA  1D03               	skipz
  4586  0CCB  2CCE               	goto	l4808
  4587                           
  4588                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  4589  0CCC  3000               	movlw	0
  4590  0CCD  0008               	return
  4591  0CCE                     l4808:	
  4592                           
  4593                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  4594  0CCE  318B  2359  318C   	fcall	_MTOUCH_Button_ServiceAll
  4595                           
  4596                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  4597  0CD1  3180  2002  318C   	fcall	_MTOUCH_needReburst
  4598  0CD4  0020               	movlb	0	; select bank0
  4599  0CD5  00C8               	movwf	??_MTOUCH_Service_Mainloop
  4600  0CD6  0848               	movf	??_MTOUCH_Service_Mainloop,w
  4601  0CD7  00DB               	movwf	_mtouch_time_toScan
  4602                           
  4603                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  4604  0CD8  318B  23E1  318C   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4605                           
  4606                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  4607  0CDB  318A  2279         	fcall	_MTOUCH_Tick
  4608                           
  4609                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  4610  0CDD  3001               	movlw	1
  4611  0CDE  0008               	return
  4612  0CDF                     __end_of_MTOUCH_Service_Mainloop:	
  4613                           
  4614                           	psect	text18
  4615  0002                     __ptext18:	
  4616 ;; *************** function _MTOUCH_needReburst *****************
  4617 ;; Defined at:
  4618 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  needReburst     1    0        _Bool 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      _Bool 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4632 ;;      Params:         0       0       0       0       0       0       0       0
  4633 ;;      Locals:         1       0       0       0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0       0
  4635 ;;      Totals:         1       0       0       0       0       0       0       0
  4636 ;;Total ram usage:        1 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    4
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_MTOUCH_Service_Mainloop
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           
  4647                           ;psect for function _MTOUCH_needReburst
  4648  0002                     _MTOUCH_needReburst:	
  4649                           
  4650                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  4651                           
  4652                           ;incstack = 0
  4653                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  4654  0002  3000               	movlw	0
  4655  0003  0008               	return
  4656  0004                     __end_of_MTOUCH_needReburst:	
  4657                           
  4658                           	psect	text19
  4659  0A79                     __ptext19:	
  4660 ;; *************** function _MTOUCH_Tick *****************
  4661 ;; Defined at:
  4662 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;		None
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      void 
  4669 ;; Registers used:
  4670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4676 ;;      Params:         0       0       0       0       0       0       0       0
  4677 ;;      Locals:         0       0       0       0       0       0       0       0
  4678 ;;      Temps:          0       0       0       0       0       0       0       0
  4679 ;;      Totals:         0       0       0       0       0       0       0       0
  4680 ;;Total ram usage:        0 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    6
  4683 ;; This function calls:
  4684 ;;		_MTOUCH_Button_Tick
  4685 ;; This function is called by:
  4686 ;;		_MTOUCH_Service_Mainloop
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           
  4691                           ;psect for function _MTOUCH_Tick
  4692  0A79                     _MTOUCH_Tick:	
  4693                           
  4694                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4698  0A79  318C  2434         	fcall	_MTOUCH_Button_Tick
  4699  0A7B  0008               	return
  4700  0A7C                     __end_of_MTOUCH_Tick:	
  4701                           
  4702                           	psect	text20
  4703  0C34                     __ptext20:	
  4704 ;; *************** function _MTOUCH_Button_Tick *****************
  4705 ;; Defined at:
  4706 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;		None
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  i               1    5[COMMON] unsigned char 
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      void 
  4713 ;; Registers used:
  4714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4720 ;;      Params:         0       0       0       0       0       0       0       0
  4721 ;;      Locals:         1       0       0       0       0       0       0       0
  4722 ;;      Temps:          1       0       0       0       0       0       0       0
  4723 ;;      Totals:         2       0       0       0       0       0       0       0
  4724 ;;Total ram usage:        2 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    5
  4727 ;; This function calls:
  4728 ;;		_Button_Tick_helper
  4729 ;; This function is called by:
  4730 ;;		_MTOUCH_Tick
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function _MTOUCH_Button_Tick
  4736  0C34                     _MTOUCH_Button_Tick:	
  4737                           
  4738                           ;mcc_generated_files/mtouch/mtouch_button.c: 307:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 308:     for (i = 0; i < 4u; i++)
  4739                           
  4740                           ;incstack = 0
  4741                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4742  0C34  01F5               	clrf	MTOUCH_Button_Tick@i
  4743  0C35                     l3796:	
  4744                           
  4745                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         Button_Tick_helper(&mtouch_button[i]);
  4746  0C35  0875               	movf	MTOUCH_Button_Tick@i,w
  4747  0C36  00F4               	movwf	??_MTOUCH_Button_Tick
  4748  0C37  3003               	movlw	3
  4749  0C38                     u2745:	
  4750  0C38  35F4               	lslf	??_MTOUCH_Button_Tick,f
  4751  0C39  3EFF               	addlw	-1
  4752  0C3A  1D03               	skipz
  4753  0C3B  2C38               	goto	u2745
  4754  0C3C  3574               	lslf	??_MTOUCH_Button_Tick,w
  4755  0C3D  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  4756  0C3E  318D  2580  318C   	fcall	_Button_Tick_helper
  4757                           
  4758                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:     }
  4759  0C41  3001               	movlw	1
  4760  0C42  00F4               	movwf	??_MTOUCH_Button_Tick
  4761  0C43  0874               	movf	??_MTOUCH_Button_Tick,w
  4762  0C44  07F5               	addwf	MTOUCH_Button_Tick@i,f
  4763  0C45  3004               	movlw	4
  4764  0C46  0275               	subwf	MTOUCH_Button_Tick@i,w
  4765  0C47  1803               	btfsc	3,0
  4766  0C48  0008               	return
  4767  0C49  2C35               	goto	l3796
  4768  0C4A                     __end_of_MTOUCH_Button_Tick:	
  4769                           
  4770                           	psect	text21
  4771  0D80                     __ptext21:	
  4772 ;; *************** function _Button_Tick_helper *****************
  4773 ;; Defined at:
  4774 ;;		line 313 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  button          1    wreg     PTR struct .
  4777 ;;		 -> mtouch_button(64), 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  button          1    3[COMMON] PTR struct .
  4780 ;;		 -> mtouch_button(64), 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      void 
  4783 ;; Registers used:
  4784 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4790 ;;      Params:         0       0       0       0       0       0       0       0
  4791 ;;      Locals:         1       0       0       0       0       0       0       0
  4792 ;;      Temps:          2       0       0       0       0       0       0       0
  4793 ;;      Totals:         3       0       0       0       0       0       0       0
  4794 ;;Total ram usage:        3 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:    4
  4797 ;; This function calls:
  4798 ;;		Nothing
  4799 ;; This function is called by:
  4800 ;;		_MTOUCH_Button_Tick
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           
  4805                           ;psect for function _Button_Tick_helper
  4806  0D80                     _Button_Tick_helper:	
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  4810                           ;Button_Tick_helper@button stored from wreg
  4811  0D80  00F3               	movwf	Button_Tick_helper@button
  4812                           
  4813                           ;mcc_generated_files/mtouch/mtouch_button.c: 313: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 314: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 316:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  4814  0D81  0873               	movf	Button_Tick_helper@button,w
  4815  0D82  3E02               	addlw	2
  4816  0D83  0086               	movwf	6
  4817  0D84  3001               	movlw	1	; select bank2/3
  4818  0D85  0087               	movwf	7
  4819  0D86  3002               	movlw	2
  4820  0D87  0601               	xorwf	1,w
  4821  0D88  1D03               	btfss	3,2
  4822  0D89  0008               	return
  4823                           
  4824                           ;mcc_generated_files/mtouch/mtouch_button.c: 317:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 318:         (button->counter)++;
  4825  0D8A  0873               	movf	Button_Tick_helper@button,w
  4826  0D8B  3E0A               	addlw	10
  4827  0D8C  0086               	movwf	6
  4828  0D8D  3001               	movlw	1	; select bank2/3
  4829  0D8E  0087               	movwf	7
  4830  0D8F  3001               	movlw	1
  4831  0D90  0781               	addwf	1,f
  4832  0D91  3141               	addfsr 1,1
  4833  0D92  1803               	skipnc
  4834  0D93  0A81               	incf	1,f
  4835                           
  4836                           ;mcc_generated_files/mtouch/mtouch_button.c: 319:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  4837  0D94  0873               	movf	Button_Tick_helper@button,w
  4838  0D95  3E0A               	addlw	10
  4839  0D96  0086               	movwf	6
  4840  0D97  3001               	movlw	1	; select bank2/3
  4841  0D98  0087               	movwf	7
  4842  0D99  0016               	moviw fsr1++
  4843  0D9A  0401               	iorwf	1,w
  4844  0D9B  1D03               	btfss	3,2
  4845  0D9C  0008               	return
  4846                           
  4847                           ;mcc_generated_files/mtouch/mtouch_button.c: 320:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 321:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  4848  0D9D  0873               	movf	Button_Tick_helper@button,w
  4849  0D9E  3E0A               	addlw	10
  4850  0D9F  0086               	movwf	6
  4851  0DA0  3001               	movlw	1	; select bank2/3
  4852  0DA1  0087               	movwf	7
  4853  0DA2  30FF               	movlw	255
  4854  0DA3  3FC0               	movwi [0]fsr1
  4855  0DA4  30FF               	movlw	255
  4856  0DA5  3FC1               	movwi [1]fsr1
  4857  0DA6  0008               	return
  4858  0DA7                     __end_of_Button_Tick_helper:	
  4859                           
  4860                           	psect	text22
  4861  0BE1                     __ptext22:	
  4862 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  4863 ;; Defined at:
  4864 ;;		line 958 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  sensor          1    3[COMMON] PTR struct .
  4869 ;;		 -> mtouch_sensor(36), 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4879 ;;      Params:         0       0       0       0       0       0       0       0
  4880 ;;      Locals:         1       0       0       0       0       0       0       0
  4881 ;;      Temps:          1       0       0       0       0       0       0       0
  4882 ;;      Totals:         2       0       0       0       0       0       0       0
  4883 ;;Total ram usage:        2 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    5
  4886 ;; This function calls:
  4887 ;;		_Sensor_Sampled_Reset
  4888 ;; This function is called by:
  4889 ;;		_MTOUCH_Initialize
  4890 ;;		_MTOUCH_Service_Mainloop
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  4896  0BE1                     _MTOUCH_Sensor_Sampled_ResetAll:	
  4897                           
  4898                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 960:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 961:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[4u -1];sensor++)
  4899                           
  4900                           ;incstack = 0
  4901                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  4902  0BE1  30A0               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  4903  0BE2  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4904  0BE3  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4905  0BE4  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  4906  0BE5                     L1:	
  4907  0BE5  30BB               	movlw	(low ((_mtouch_sensor| 0+27)))& (0+255)
  4908  0BE6  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4909  0BE7  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4910  0BE8  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4911  0BE9  1C03               	btfss	3,0
  4912  0BEA  0008               	return
  4913                           
  4914                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 962:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 963:         Sensor_Sampled_Reset(sensor);
  4915  0BEB  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4916  0BEC  318A  22D0  318B   	fcall	_Sensor_Sampled_Reset
  4917                           
  4918                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964:     }
  4919  0BEF  3009               	movlw	9
  4920  0BF0  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4921  0BF1  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4922  0BF2  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  4923  0BF3  2BE5               	goto	L1
  4924  0BF4                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  4925                           
  4926                           	psect	text23
  4927  0AD0                     __ptext23:	
  4928 ;; *************** function _Sensor_Sampled_Reset *****************
  4929 ;; Defined at:
  4930 ;;		line 972 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  sensor          1    wreg     PTR struct .
  4933 ;;		 -> mtouch_sensor(36), 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  sensor          1    1[COMMON] PTR struct .
  4936 ;;		 -> mtouch_sensor(36), 
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  1    wreg      void 
  4939 ;; Registers used:
  4940 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4946 ;;      Params:         0       0       0       0       0       0       0       0
  4947 ;;      Locals:         1       0       0       0       0       0       0       0
  4948 ;;      Temps:          0       0       0       0       0       0       0       0
  4949 ;;      Totals:         1       0       0       0       0       0       0       0
  4950 ;;Total ram usage:        1 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    4
  4953 ;; This function calls:
  4954 ;;		Nothing
  4955 ;; This function is called by:
  4956 ;;		_MTOUCH_Sensor_Initialize
  4957 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           
  4962                           ;psect for function _Sensor_Sampled_Reset
  4963  0AD0                     _Sensor_Sampled_Reset:	
  4964                           
  4965                           ;incstack = 0
  4966                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4967                           ;Sensor_Sampled_Reset@sensor stored from wreg
  4968  0AD0  00F1               	movwf	Sensor_Sampled_Reset@sensor
  4969                           
  4970                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 972: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          973: {;mcc_generated_files/mtouch/mtouch_sensor.c: 974:     sensor->sampled = 0;
  4971  0AD1  0871               	movf	Sensor_Sampled_Reset@sensor,w
  4972  0AD2  3E08               	addlw	8
  4973  0AD3  0086               	movwf	6
  4974  0AD4  0187               	clrf	7
  4975  0AD5  1001               	bcf	1,0
  4976  0AD6  0008               	return
  4977  0AD7                     __end_of_Sensor_Sampled_Reset:	
  4978                           
  4979                           	psect	text24
  4980  0C1E                     __ptext24:	
  4981 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  4982 ;; Defined at:
  4983 ;;		line 266 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;  group           1   39[BANK0 ] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      _Bool 
  4990 ;; Registers used:
  4991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4997 ;;      Params:         0       0       0       0       0       0       0       0
  4998 ;;      Locals:         0       1       0       0       0       0       0       0
  4999 ;;      Temps:          0       1       0       0       0       0       0       0
  5000 ;;      Totals:         0       2       0       0       0       0       0       0
  5001 ;;Total ram usage:        2 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:   10
  5004 ;; This function calls:
  5005 ;;		_Sensor_Service
  5006 ;; This function is called by:
  5007 ;;		_MTOUCH_Service_Mainloop
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           
  5012                           ;psect for function _MTOUCH_Sensor_SampleAll
  5013  0C1E                     _MTOUCH_Sensor_SampleAll:	
  5014                           
  5015                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 268:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 269:     for (group = 0; group < 2u; group++)
  5016                           
  5017                           ;incstack = 0
  5018                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5019  0C1E  0020               	movlb	0	; select bank0
  5020  0C1F  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  5021  0C20                     l4768:	
  5022                           
  5023                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 270:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 271:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  5024  0C20  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  5025  0C21  3184  2491  318C   	fcall	_Sensor_Service
  5026  0C24  3A00               	xorlw	0
  5027  0C25  1903               	skipnz
  5028  0C26  2C29               	goto	l4774
  5029                           
  5030                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 272:             return 0;
  5031  0C27  3000               	movlw	0
  5032  0C28  0008               	return
  5033  0C29                     l4774:	
  5034                           
  5035                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 273:     }
  5036  0C29  3001               	movlw	1
  5037  0C2A  0020               	movlb	0	; select bank0
  5038  0C2B  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  5039  0C2C  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  5040  0C2D  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  5041  0C2E  3002               	movlw	2
  5042  0C2F  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  5043  0C30  1C03               	skipc
  5044  0C31  2C20               	goto	l4768
  5045                           
  5046                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 274:     return 1;
  5047  0C32  3001               	movlw	1
  5048  0C33  0008               	return
  5049  0C34                     __end_of_MTOUCH_Sensor_SampleAll:	
  5050                           
  5051                           	psect	text25
  5052  0491                     __ptext25:	
  5053 ;; *************** function _Sensor_Service *****************
  5054 ;; Defined at:
  5055 ;;		line 311 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  scanGroup       1    wreg     unsigned char 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  5060 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  5061 ;;		 -> mtouch_sensor(36), 
  5062 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  5063 ;;		 -> mtouch_sensor(36), 
  5064 ;;  error           1   35[BANK0 ] enum E2859
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      enum E2859
  5067 ;; Registers used:
  5068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5074 ;;      Params:         0       0       0       0       0       0       0       0
  5075 ;;      Locals:         0       4       0       0       0       0       0       0
  5076 ;;      Temps:          0       3       0       0       0       0       0       0
  5077 ;;      Totals:         0       7       0       0       0       0       0       0
  5078 ;;Total ram usage:        7 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    9
  5081 ;; This function calls:
  5082 ;;		_Sensor_Acquisition
  5083 ;;		_Sensor_DefaultCallback
  5084 ;;		_Sensor_RawSample_Update
  5085 ;;		_Sensor_isEnabled
  5086 ;;		_Sensor_setSampled
  5087 ;; This function is called by:
  5088 ;;		_MTOUCH_Sensor_SampleAll
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function _Sensor_Service
  5094  0491                     _Sensor_Service:	
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5098                           ;Sensor_Service@scanGroup stored from wreg
  5099  0491  0020               	movlb	0	; select bank0
  5100  0492  00C2               	movwf	Sensor_Service@scanGroup
  5101                           
  5102                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 312: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 313:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 314:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 316:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  5103  0493  0842               	movf	Sensor_Service@scanGroup,w
  5104  0494  00BF               	movwf	??_Sensor_Service
  5105  0495  01C0               	clrf	??_Sensor_Service+1
  5106  0496  35BF               	lslf	??_Sensor_Service,f
  5107  0497  0DC0               	rlf	??_Sensor_Service+1,f
  5108  0498  3045               	movlw	low (_sensor_scan_group| (0+32768))
  5109  0499  073F               	addwf	??_Sensor_Service,w
  5110  049A  0084               	movwf	4
  5111  049B  3090               	movlw	high (_sensor_scan_group| (0+32768))
  5112  049C  3D40               	addwfc	??_Sensor_Service+1,w
  5113  049D  0085               	movwf	5
  5114  049E  0800               	movf	0,w	;code access
  5115  049F  00C1               	movwf	??_Sensor_Service+2
  5116  04A0  0841               	movf	??_Sensor_Service+2,w
  5117  04A1  00C4               	movwf	Sensor_Service@sensor_adc1
  5118                           
  5119                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  5120  04A2  0842               	movf	Sensor_Service@scanGroup,w
  5121  04A3  00BF               	movwf	??_Sensor_Service
  5122  04A4  01C0               	clrf	??_Sensor_Service+1
  5123  04A5  35BF               	lslf	??_Sensor_Service,f
  5124  04A6  0DC0               	rlf	??_Sensor_Service+1,f
  5125  04A7  3046               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  5126  04A8  073F               	addwf	??_Sensor_Service,w
  5127  04A9  0084               	movwf	4
  5128  04AA  3090               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  5129  04AB  3D40               	addwfc	??_Sensor_Service+1,w
  5130  04AC  0085               	movwf	5
  5131  04AD  0800               	movf	0,w	;code access
  5132  04AE  00C1               	movwf	??_Sensor_Service+2
  5133  04AF  0841               	movf	??_Sensor_Service+2,w
  5134  04B0  00C5               	movwf	Sensor_Service@sensor_adc2
  5135                           
  5136                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  5137  04B1  0845               	movf	Sensor_Service@sensor_adc2,w
  5138  04B2  00BF               	movwf	??_Sensor_Service
  5139  04B3  083F               	movf	??_Sensor_Service,w
  5140  04B4  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  5141  04B5  0844               	movf	Sensor_Service@sensor_adc1,w
  5142  04B6  3187  27A0  3184   	fcall	_Sensor_Acquisition
  5143  04B9  0020               	movlb	0	; select bank0
  5144  04BA  00C0               	movwf	??_Sensor_Service+1
  5145  04BB  0840               	movf	??_Sensor_Service+1,w
  5146  04BC  00C3               	movwf	Sensor_Service@error
  5147                           
  5148                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 322:     switch(error)
  5149  04BD  2CFE               	goto	l4726
  5150  04BE                     l4704:	
  5151                           
  5152                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 326:             if(Sensor_isEnabled(sensor_adc1))
  5153  04BE  0844               	movf	Sensor_Service@sensor_adc1,w
  5154  04BF  318B  2379  3184   	fcall	_Sensor_isEnabled
  5155  04C2  3A00               	xorlw	0
  5156  04C3  1903               	skipnz
  5157  04C4  2CDD               	goto	l4714
  5158                           
  5159                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 327:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 332:                 if(!lowpowerActivated)
  5160  04C5  0020               	movlb	0	; select bank0
  5161  04C6  085A               	movf	_lowpowerActivated,w
  5162  04C7  1D03               	btfss	3,2
  5163  04C8  2CCD               	goto	l4710
  5164                           
  5165                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 333:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 334:                     Sensor_RawSample_Update(sensor_adc1);
  5166  04C9  0844               	movf	Sensor_Service@sensor_adc1,w
  5167  04CA  318D  255A  3184   	fcall	_Sensor_RawSample_Update
  5168  04CD                     l4710:	
  5169                           
  5170                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 336:                 Sensor_setSampled(sens
      +                          or_adc1);
  5171  04CD  0020               	movlb	0	; select bank0
  5172  04CE  0844               	movf	Sensor_Service@sensor_adc1,w
  5173  04CF  318A  22C9  3184   	fcall	_Sensor_setSampled
  5174                           
  5175                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 callback_sampled(senso
      +                          r_adc1->sensor);
  5176  04D2  0020               	movlb	0	; select bank0
  5177  04D3  0844               	movf	Sensor_Service@sensor_adc1,w
  5178  04D4  0086               	movwf	6
  5179  04D5  0187               	clrf	7
  5180  04D6  0801               	movf	1,w
  5181  04D7  00BF               	movwf	??_Sensor_Service
  5182  04D8  083F               	movf	??_Sensor_Service,w
  5183  04D9  00F1               	movwf	Sensor_DefaultCallback@sensor
  5184  04DA  318A  226F  3184   	fcall	_Sensor_DefaultCallback
  5185  04DD                     l4714:	
  5186                           
  5187                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 339:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  5188  04DD  0020               	movlb	0	; select bank0
  5189  04DE  0845               	movf	Sensor_Service@sensor_adc2,w
  5190  04DF  318B  2379  3184   	fcall	_Sensor_isEnabled
  5191  04E2  3A00               	xorlw	0
  5192  04E3  1903               	skipnz
  5193  04E4  2D21               	goto	l4728
  5194                           
  5195                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 340:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 341:                 if(!lowpowerActivated)
  5196  04E5  0020               	movlb	0	; select bank0
  5197  04E6  085A               	movf	_lowpowerActivated,w
  5198  04E7  1D03               	btfss	3,2
  5199  04E8  2CED               	goto	l4720
  5200                           
  5201                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 343:                     Sensor_RawSample_Update(sensor_adc2);
  5202  04E9  0845               	movf	Sensor_Service@sensor_adc2,w
  5203  04EA  318D  255A  3184   	fcall	_Sensor_RawSample_Update
  5204  04ED                     l4720:	
  5205                           
  5206                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345:                 Sensor_setSampled(sens
      +                          or_adc2);
  5207  04ED  0020               	movlb	0	; select bank0
  5208  04EE  0845               	movf	Sensor_Service@sensor_adc2,w
  5209  04EF  318A  22C9  3184   	fcall	_Sensor_setSampled
  5210                           
  5211                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:                 callback_sampled(senso
      +                          r_adc2->sensor);
  5212  04F2  0020               	movlb	0	; select bank0
  5213  04F3  0845               	movf	Sensor_Service@sensor_adc2,w
  5214  04F4  0086               	movwf	6
  5215  04F5  0187               	clrf	7
  5216  04F6  0801               	movf	1,w
  5217  04F7  00BF               	movwf	??_Sensor_Service
  5218  04F8  083F               	movf	??_Sensor_Service,w
  5219  04F9  00F1               	movwf	Sensor_DefaultCallback@sensor
  5220  04FA  318A  226F  3184   	fcall	_Sensor_DefaultCallback
  5221  04FD  2D21               	goto	l4728
  5222  04FE                     l4726:	
  5223  04FE  0843               	movf	Sensor_Service@error,w
  5224  04FF  00BF               	movwf	??_Sensor_Service
  5225  0500  01C0               	clrf	??_Sensor_Service+1
  5226  0501  1BBF               	btfsc	??_Sensor_Service,7
  5227  0502  03C0               	decf	??_Sensor_Service+1,f
  5228                           
  5229                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5230                           ; Switch size 1, requested type "simple"
  5231                           ; Number of cases is 2, Range of values is 0 to 255
  5232                           ; switch strategies available:
  5233                           ; Name         Instructions Cycles
  5234                           ; simple_byte            7     4 (average)
  5235                           ; jumptable            260     6 (fixed)
  5236                           ;	Chosen strategy is simple_byte
  5237  0503  0840               	movf	??_Sensor_Service+1,w
  5238  0504  3A00               	xorlw	0	; case 0
  5239  0505  1903               	skipnz
  5240  0506  2D0B               	goto	l5008
  5241  0507  3AFF               	xorlw	255	; case 255
  5242  0508  1903               	skipnz
  5243  0509  2D10               	goto	l5010
  5244  050A  2D21               	goto	l4728
  5245  050B                     l5008:	
  5246                           
  5247                           ; Switch size 1, requested type "simple"
  5248                           ; Number of cases is 1, Range of values is 0 to 0
  5249                           ; switch strategies available:
  5250                           ; Name         Instructions Cycles
  5251                           ; simple_byte            4     3 (average)
  5252                           ; direct_byte            8     6 (fixed)
  5253                           ; jumptable            260     6 (fixed)
  5254                           ;	Chosen strategy is simple_byte
  5255  050B  083F               	movf	??_Sensor_Service,w
  5256  050C  3A00               	xorlw	0	; case 0
  5257  050D  1903               	skipnz
  5258  050E  2CBE               	goto	l4704
  5259  050F  2D21               	goto	l4728
  5260  0510                     l5010:	
  5261                           
  5262                           ; Switch size 1, requested type "simple"
  5263                           ; Number of cases is 5, Range of values is 251 to 255
  5264                           ; switch strategies available:
  5265                           ; Name         Instructions Cycles
  5266                           ; direct_byte           15     5 (fixed)
  5267                           ; simple_byte           16     9 (average)
  5268                           ; jumptable            263     9 (fixed)
  5269                           ;	Chosen strategy is simple_byte
  5270  0510  083F               	movf	??_Sensor_Service,w
  5271  0511  3AFB               	xorlw	251	; case 251
  5272  0512  1903               	skipnz
  5273  0513  2D21               	goto	l4728
  5274  0514  3A07               	xorlw	7	; case 252
  5275  0515  1903               	skipnz
  5276  0516  2D21               	goto	l4728
  5277  0517  3A01               	xorlw	1	; case 253
  5278  0518  1903               	skipnz
  5279  0519  2D21               	goto	l4728
  5280  051A  3A03               	xorlw	3	; case 254
  5281  051B  1903               	skipnz
  5282  051C  2D21               	goto	l4728
  5283  051D  3A01               	xorlw	1	; case 255
  5284  051E  1903               	skipnz
  5285  051F  2D21               	goto	l4728
  5286  0520  2D21               	goto	l4728
  5287  0521                     l4728:	
  5288                           
  5289                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 359:     return error;
  5290  0521  0020               	movlb	0	; select bank0
  5291  0522  0843               	movf	Sensor_Service@error,w
  5292  0523  0008               	return
  5293  0524                     __end_of_Sensor_Service:	
  5294                           
  5295                           	psect	text26
  5296  0AC9                     __ptext26:	
  5297 ;; *************** function _Sensor_setSampled *****************
  5298 ;; Defined at:
  5299 ;;		line 977 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  sensor          1    wreg     PTR struct .
  5302 ;;		 -> mtouch_sensor(36), 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  sensor          1    1[COMMON] PTR struct .
  5305 ;;		 -> mtouch_sensor(36), 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      void 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5315 ;;      Params:         0       0       0       0       0       0       0       0
  5316 ;;      Locals:         1       0       0       0       0       0       0       0
  5317 ;;      Temps:          0       0       0       0       0       0       0       0
  5318 ;;      Totals:         1       0       0       0       0       0       0       0
  5319 ;;Total ram usage:        1 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    4
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_Sensor_Service
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           
  5330                           ;psect for function _Sensor_setSampled
  5331  0AC9                     _Sensor_setSampled:	
  5332                           
  5333                           ;incstack = 0
  5334                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5335                           ;Sensor_setSampled@sensor stored from wreg
  5336  0AC9  00F1               	movwf	Sensor_setSampled@sensor
  5337                           
  5338                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 977: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 978
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 979:     sensor->sampled = 1;
  5339  0ACA  0871               	movf	Sensor_setSampled@sensor,w
  5340  0ACB  3E08               	addlw	8
  5341  0ACC  0086               	movwf	6
  5342  0ACD  0187               	clrf	7
  5343  0ACE  1401               	bsf	1,0
  5344  0ACF  0008               	return
  5345  0AD0                     __end_of_Sensor_setSampled:	
  5346                           
  5347                           	psect	text27
  5348  0D5A                     __ptext27:	
  5349 ;; *************** function _Sensor_RawSample_Update *****************
  5350 ;; Defined at:
  5351 ;;		line 810 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;  sensor          1    wreg     PTR struct .
  5354 ;;		 -> mtouch_sensor(36), 
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;  sensor          1    7[COMMON] PTR struct .
  5357 ;;		 -> mtouch_sensor(36), 
  5358 ;;  adcIndex        1    6[COMMON] unsigned char 
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      void 
  5361 ;; Registers used:
  5362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5368 ;;      Params:         0       0       0       0       0       0       0       0
  5369 ;;      Locals:         2       0       0       0       0       0       0       0
  5370 ;;      Temps:          1       0       0       0       0       0       0       0
  5371 ;;      Totals:         3       0       0       0       0       0       0       0
  5372 ;;Total ram usage:        3 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    5
  5375 ;; This function calls:
  5376 ;;		_Sensor_getScanGroupIndex
  5377 ;; This function is called by:
  5378 ;;		_Sensor_Service
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           
  5383                           ;psect for function _Sensor_RawSample_Update
  5384  0D5A                     _Sensor_RawSample_Update:	
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5388                           ;Sensor_RawSample_Update@sensor stored from wreg
  5389  0D5A  00F7               	movwf	Sensor_RawSample_Update@sensor
  5390                           
  5391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 811: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 812:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  5392  0D5B  0877               	movf	Sensor_RawSample_Update@sensor,w
  5393  0D5C  318D  25D2  318D   	fcall	_Sensor_getScanGroupIndex
  5394  0D5F  00F5               	movwf	??_Sensor_RawSample_Update
  5395  0D60  0875               	movf	??_Sensor_RawSample_Update,w
  5396  0D61  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  5397                           
  5398                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 814:     if (INTCONbits.GIE == (uint8_t)1)
  5399  0D62  1F8B               	btfss	11,7	;volatile
  5400  0D63  2D73               	goto	l3634
  5401                           
  5402                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 815:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 816:         INTCONbits.GIE = (uint8_t)0;
  5403  0D64  138B               	bcf	11,7	;volatile
  5404                           
  5405                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 817:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  5406  0D65  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  5407  0D66  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  5408  0D67  0086               	movwf	6
  5409  0D68  0187               	clrf	7
  5410  0D69  0877               	movf	Sensor_RawSample_Update@sensor,w
  5411  0D6A  3E06               	addlw	6
  5412  0D6B  0084               	movwf	4
  5413  0D6C  0185               	clrf	5
  5414  0D6D  3F40               	moviw [0]fsr1
  5415  0D6E  3F80               	movwi [0]fsr0
  5416  0D6F  3F41               	moviw [1]fsr1
  5417  0D70  3F81               	movwi [1]fsr0
  5418                           
  5419                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 818:         INTCONbits.GIE = (uint8_t)1;
  5420  0D71  178B               	bsf	11,7	;volatile
  5421                           
  5422                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 819:     }
  5423  0D72  0008               	return
  5424  0D73                     l3634:	
  5425                           
  5426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 821:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 822:         sensor->rawSample = packet_sample[adcIndex];
  5427  0D73  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  5428  0D74  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  5429  0D75  0086               	movwf	6
  5430  0D76  0187               	clrf	7
  5431  0D77  0877               	movf	Sensor_RawSample_Update@sensor,w
  5432  0D78  3E06               	addlw	6
  5433  0D79  0084               	movwf	4
  5434  0D7A  0185               	clrf	5
  5435  0D7B  3F40               	moviw [0]fsr1
  5436  0D7C  3F80               	movwi [0]fsr0
  5437  0D7D  3F41               	moviw [1]fsr1
  5438  0D7E  3F81               	movwi [1]fsr0
  5439  0D7F  0008               	return
  5440  0D80                     __end_of_Sensor_RawSample_Update:	
  5441                           
  5442                           	psect	text28
  5443  0A6F                     __ptext28:	
  5444 ;; *************** function _Sensor_DefaultCallback *****************
  5445 ;; Defined at:
  5446 ;;		line 831 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;  sensor          1    1[COMMON] enum E2854
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;		None
  5451 ;; Return value:  Size  Location     Type
  5452 ;;                  1    wreg      void 
  5453 ;; Registers used:
  5454 ;;		None
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5460 ;;      Params:         1       0       0       0       0       0       0       0
  5461 ;;      Locals:         0       0       0       0       0       0       0       0
  5462 ;;      Temps:          0       0       0       0       0       0       0       0
  5463 ;;      Totals:         1       0       0       0       0       0       0       0
  5464 ;;Total ram usage:        1 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; Hardware stack levels required when called:    4
  5467 ;; This function calls:
  5468 ;;		Nothing
  5469 ;; This function is called by:
  5470 ;;		_Sensor_Service
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           
  5475                           ;psect for function _Sensor_DefaultCallback
  5476  0A6F                     _Sensor_DefaultCallback:	
  5477                           
  5478                           ;incstack = 0
  5479                           ; Regs used in _Sensor_DefaultCallback: []
  5480  0A6F  0008               	return
  5481  0A70                     __end_of_Sensor_DefaultCallback:	
  5482                           
  5483                           	psect	text29
  5484  07A0                     __ptext29:	
  5485 ;; *************** function _Sensor_Acquisition *****************
  5486 ;; Defined at:
  5487 ;;		line 380 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;  sensor_adc1     1    wreg     PTR struct .
  5490 ;;		 -> mtouch_sensor(36), 
  5491 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  5492 ;;		 -> mtouch_sensor(36), 
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  5495 ;;		 -> mtouch_sensor(36), 
  5496 ;;  retry           1   29[BANK0 ] unsigned char 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  1    wreg      enum E2859
  5499 ;; Registers used:
  5500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5506 ;;      Params:         0       1       0       0       0       0       0       0
  5507 ;;      Locals:         0       2       0       0       0       0       0       0
  5508 ;;      Temps:          0       1       0       0       0       0       0       0
  5509 ;;      Totals:         0       4       0       0       0       0       0       0
  5510 ;;Total ram usage:        4 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    8
  5513 ;; This function calls:
  5514 ;;		_Sensor_Acq_ExecutePacket
  5515 ;;		_Sensor_Scanfrequency_Evaluation
  5516 ;;		_Sensor_isActive
  5517 ;;		_Sensor_isCalibrated
  5518 ;;		_Sensor_postAcquisitionProcess
  5519 ;; This function is called by:
  5520 ;;		_Sensor_Service
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           
  5525                           ;psect for function _Sensor_Acquisition
  5526  07A0                     _Sensor_Acquisition:	
  5527                           
  5528                           ;incstack = 0
  5529                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5530                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  5531  07A0  0020               	movlb	0	; select bank0
  5532  07A1  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  5533                           
  5534                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 380: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 381: {;mcc_generated_files/mtouch/mtouch_sensor.c: 382:     
      +                          uint8_t retry = (uint8_t)5;
  5535  07A2  3005               	movlw	5
  5536  07A3  00BC               	movwf	??_Sensor_Acquisition
  5537  07A4  083C               	movf	??_Sensor_Acquisition,w
  5538  07A5  00BD               	movwf	Sensor_Acquisition@retry
  5539                           
  5540                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  5541  07A6  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5542  07A7  1D03               	btfss	3,2
  5543  07A8  2FB6               	goto	l4568
  5544  07A9  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5545  07AA  1D03               	btfss	3,2
  5546  07AB  2FB6               	goto	l4568
  5547                           
  5548                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 386:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 387:         return MTOUCH_SENSOR_ERROR_invalid_index;
  5549  07AC  30FF               	movlw	255
  5550  07AD  0008               	return
  5551  07AE                     l4562:	
  5552                           
  5553                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 397:         retry--;
  5554  07AE  3001               	movlw	1
  5555  07AF  0020               	movlb	0	; select bank0
  5556  07B0  02BD               	subwf	Sensor_Acquisition@retry,f
  5557                           
  5558                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 398:         if(retry == 0)
  5559  07B1  083D               	movf	Sensor_Acquisition@retry,w
  5560  07B2  1D03               	btfss	3,2
  5561  07B3  2FB6               	goto	l4568
  5562                           
  5563                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 399:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 400:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  5564  07B4  30FC               	movlw	252
  5565  07B5  0008               	return
  5566  07B6                     l4568:	
  5567                           
  5568                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 395:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  5569  07B6  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5570  07B7  00BC               	movwf	??_Sensor_Acquisition
  5571  07B8  083C               	movf	??_Sensor_Acquisition,w
  5572  07B9  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  5573  07BA  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5574  07BB  3180  204B  3187   	fcall	_Sensor_Acq_ExecutePacket
  5575  07BE  3A00               	xorlw	0
  5576  07BF  1D03               	skipz
  5577  07C0  2FAE               	goto	l4562
  5578                           
  5579                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 404:     if(sensor_adc1 != ((void*)0))
  5580  07C1  0020               	movlb	0	; select bank0
  5581  07C2  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5582  07C3  1903               	btfsc	3,2
  5583  07C4  2FC9               	goto	l4574
  5584                           
  5585                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 405:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 406:         Sensor_postAcquisitionProcess(sensor_adc1);
  5586  07C5  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5587  07C6  318E  26C5  3187   	fcall	_Sensor_postAcquisitionProcess
  5588  07C9                     l4574:	
  5589                           
  5590                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:     if(sensor_adc2 !=((void*)0))
  5591  07C9  0020               	movlb	0	; select bank0
  5592  07CA  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5593  07CB  1903               	btfsc	3,2
  5594  07CC  2FD1               	goto	l4578
  5595                           
  5596                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 411:         Sensor_postAcquisitionProcess(sensor_adc2);
  5597  07CD  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5598  07CE  318E  26C5  3187   	fcall	_Sensor_postAcquisitionProcess
  5599  07D1                     l4578:	
  5600                           
  5601                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 414:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  5602  07D1  0020               	movlb	0	; select bank0
  5603  07D2  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5604  07D3  318B  2315  3187   	fcall	_Sensor_isActive
  5605  07D6  3A00               	xorlw	0
  5606  07D7  1903               	skipnz
  5607  07D8  2FE1               	goto	l4582
  5608  07D9  0020               	movlb	0	; select bank0
  5609  07DA  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5610  07DB  318A  22E7  3187   	fcall	_Sensor_isCalibrated
  5611  07DE  3A00               	xorlw	0
  5612  07DF  1D03               	skipz
  5613  07E0  2FF1               	goto	l4586
  5614  07E1                     l4582:	
  5615  07E1  0020               	movlb	0	; select bank0
  5616  07E2  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5617  07E3  318B  2315  3187   	fcall	_Sensor_isActive
  5618  07E6  3A00               	xorlw	0
  5619  07E7  1903               	skipnz
  5620  07E8  2FFA               	goto	l4590
  5621  07E9  0020               	movlb	0	; select bank0
  5622  07EA  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5623  07EB  318A  22E7  3187   	fcall	_Sensor_isCalibrated
  5624  07EE  3A00               	xorlw	0
  5625  07EF  1903               	skipnz
  5626  07F0  2FFA               	goto	l4590
  5627  07F1                     l4586:	
  5628                           
  5629                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 416:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 417:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  5630  07F1  0020               	movlb	0	; select bank0
  5631  07F2  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  5632  07F3  00BC               	movwf	??_Sensor_Acquisition
  5633  07F4  083C               	movf	??_Sensor_Acquisition,w
  5634  07F5  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  5635  07F6  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  5636  07F7  3186  26C4         	fcall	_Sensor_Scanfrequency_Evaluation
  5637  07F9  0008               	return
  5638  07FA                     l4590:	
  5639                           
  5640                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     return MTOUCH_SENSOR_ERROR_none;
  5641  07FA  3000               	movlw	0
  5642  07FB  0008               	return
  5643  07FC                     __end_of_Sensor_Acquisition:	
  5644                           
  5645                           	psect	text30
  5646  0EC5                     __ptext30:	
  5647 ;; *************** function _Sensor_postAcquisitionProcess *****************
  5648 ;; Defined at:
  5649 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  sensor          1    wreg     PTR struct .
  5652 ;;		 -> mtouch_sensor(36), 
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;  sensor          1    9[COMMON] PTR struct .
  5655 ;;		 -> mtouch_sensor(36), 
  5656 ;;  deviation       2    6[COMMON] unsigned short 
  5657 ;;  adcIndex        1    8[COMMON] unsigned char 
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  1    wreg      void 
  5660 ;; Registers used:
  5661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5667 ;;      Params:         0       0       0       0       0       0       0       0
  5668 ;;      Locals:         4       0       0       0       0       0       0       0
  5669 ;;      Temps:          1       0       0       0       0       0       0       0
  5670 ;;      Totals:         5       0       0       0       0       0       0       0
  5671 ;;Total ram usage:        5 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    5
  5674 ;; This function calls:
  5675 ;;		_Sensor_getScanGroupIndex
  5676 ;;		_Sensor_isEnabled
  5677 ;;		_Sensor_setActive
  5678 ;;		_Sensor_setInactive
  5679 ;;		_abs
  5680 ;; This function is called by:
  5681 ;;		_Sensor_Acquisition
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           
  5686                           ;psect for function _Sensor_postAcquisitionProcess
  5687  0EC5                     _Sensor_postAcquisitionProcess:	
  5688                           
  5689                           ;incstack = 0
  5690                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5691                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  5692  0EC5  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  5693                           
  5694                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 424: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 425:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 426:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  5695  0EC6  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5696  0EC7  318D  25D2  318E   	fcall	_Sensor_getScanGroupIndex
  5697  0ECA  00F5               	movwf	??_Sensor_postAcquisitionProcess
  5698  0ECB  0875               	movf	??_Sensor_postAcquisitionProcess,w
  5699  0ECC  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  5700                           
  5701                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     if(Sensor_isEnabled(sensor))
  5702  0ECD  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5703  0ECE  318B  2379  318E   	fcall	_Sensor_isEnabled
  5704  0ED1  3A00               	xorlw	0
  5705  0ED2  1903               	skipnz
  5706  0ED3  2EEB               	goto	l3492
  5707                           
  5708                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  5709  0ED4  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5710  0ED5  3E06               	addlw	6
  5711  0ED6  0086               	movwf	6
  5712  0ED7  0187               	clrf	7
  5713  0ED8  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  5714  0ED9  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  5715  0EDA  0084               	movwf	4
  5716  0EDB  0185               	clrf	5
  5717  0EDC  3F40               	moviw [0]fsr1
  5718  0EDD  0200               	subwf	0,w
  5719  0EDE  00F1               	movwf	abs@a
  5720  0EDF  3101               	addfsr 0,1
  5721  0EE0  3F41               	moviw [1]fsr1
  5722  0EE1  3B00               	subwfb	0,w
  5723  0EE2  00F2               	movwf	abs@a+1
  5724  0EE3  318C  2478  318E   	fcall	_abs
  5725  0EE6  0872               	movf	?_abs+1,w
  5726  0EE7  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  5727  0EE8  0871               	movf	?_abs,w
  5728  0EE9  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  5729  0EEA  2EED               	goto	l3494
  5730  0EEB                     l3492:	
  5731                           
  5732                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 431:         deviation = 0;
  5733  0EEB  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  5734  0EEC  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  5735  0EED                     l3494:	
  5736                           
  5737                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     if(deviation > 100u)
  5738  0EED  3000               	movlw	0
  5739  0EEE  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  5740  0EEF  3065               	movlw	101
  5741  0EF0  1903               	skipnz
  5742  0EF1  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  5743  0EF2  1C03               	skipc
  5744  0EF3  2EF8               	goto	l3498
  5745                           
  5746                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 434:         Sensor_setActive(sensor);
  5747  0EF4  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5748  0EF5  318A  22BB         	fcall	_Sensor_setActive
  5749  0EF7  0008               	return
  5750  0EF8                     l3498:	
  5751                           
  5752                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:         Sensor_setInactive(sensor);
  5753  0EF8  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  5754  0EF9  318A  22C2         	fcall	_Sensor_setInactive
  5755  0EFB  0008               	return
  5756  0EFC                     __end_of_Sensor_postAcquisitionProcess:	
  5757                           
  5758                           	psect	text31
  5759  0AC2                     __ptext31:	
  5760 ;; *************** function _Sensor_setInactive *****************
  5761 ;; Defined at:
  5762 ;;		line 885 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;  sensor          1    wreg     PTR struct .
  5765 ;;		 -> mtouch_sensor(36), 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  sensor          1    1[COMMON] PTR struct .
  5768 ;;		 -> mtouch_sensor(36), 
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  1    wreg      void 
  5771 ;; Registers used:
  5772 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5778 ;;      Params:         0       0       0       0       0       0       0       0
  5779 ;;      Locals:         1       0       0       0       0       0       0       0
  5780 ;;      Temps:          0       0       0       0       0       0       0       0
  5781 ;;      Totals:         1       0       0       0       0       0       0       0
  5782 ;;Total ram usage:        1 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    4
  5785 ;; This function calls:
  5786 ;;		Nothing
  5787 ;; This function is called by:
  5788 ;;		_Sensor_postAcquisitionProcess
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           
  5793                           ;psect for function _Sensor_setInactive
  5794  0AC2                     _Sensor_setInactive:	
  5795                           
  5796                           ;incstack = 0
  5797                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5798                           ;Sensor_setInactive@sensor stored from wreg
  5799  0AC2  00F1               	movwf	Sensor_setInactive@sensor
  5800                           
  5801                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 88
      +                          6: {;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     sensor->active = 0;
  5802  0AC3  0871               	movf	Sensor_setInactive@sensor,w
  5803  0AC4  3E08               	addlw	8
  5804  0AC5  0086               	movwf	6
  5805  0AC6  0187               	clrf	7
  5806  0AC7  1081               	bcf	1,1
  5807  0AC8  0008               	return
  5808  0AC9                     __end_of_Sensor_setInactive:	
  5809                           
  5810                           	psect	text32
  5811  0ABB                     __ptext32:	
  5812 ;; *************** function _Sensor_setActive *****************
  5813 ;; Defined at:
  5814 ;;		line 880 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  sensor          1    wreg     PTR struct .
  5817 ;;		 -> mtouch_sensor(36), 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  sensor          1    1[COMMON] PTR struct .
  5820 ;;		 -> mtouch_sensor(36), 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5830 ;;      Params:         0       0       0       0       0       0       0       0
  5831 ;;      Locals:         1       0       0       0       0       0       0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0       0
  5833 ;;      Totals:         1       0       0       0       0       0       0       0
  5834 ;;Total ram usage:        1 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    4
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_Sensor_postAcquisitionProcess
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _Sensor_setActive
  5846  0ABB                     _Sensor_setActive:	
  5847                           
  5848                           ;incstack = 0
  5849                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5850                           ;Sensor_setActive@sensor stored from wreg
  5851  0ABB  00F1               	movwf	Sensor_setActive@sensor
  5852                           
  5853                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 880: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 881:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 882:     sensor->active = 1;
  5854  0ABC  0871               	movf	Sensor_setActive@sensor,w
  5855  0ABD  3E08               	addlw	8
  5856  0ABE  0086               	movwf	6
  5857  0ABF  0187               	clrf	7
  5858  0AC0  1481               	bsf	1,1
  5859  0AC1  0008               	return
  5860  0AC2                     __end_of_Sensor_setActive:	
  5861                           
  5862                           	psect	text33
  5863  06C4                     __ptext33:	
  5864 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  5865 ;; Defined at:
  5866 ;;		line 741 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;  sensor_adc1     1    wreg     PTR struct .
  5869 ;;		 -> mtouch_sensor(36), 
  5870 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  5871 ;;		 -> mtouch_sensor(36), 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  5874 ;;		 -> mtouch_sensor(36), 
  5875 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  5876 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  5877 ;;  i               1   26[BANK0 ] unsigned char 
  5878 ;;  retry           1   21[BANK0 ] unsigned char 
  5879 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      enum E2859
  5882 ;; Registers used:
  5883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5889 ;;      Params:         0       1       0       0       0       0       0       0
  5890 ;;      Locals:         0      10       0       0       0       0       0       0
  5891 ;;      Temps:          0       2       0       0       0       0       0       0
  5892 ;;      Totals:         0      13       0       0       0       0       0       0
  5893 ;;Total ram usage:       13 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    7
  5896 ;; This function calls:
  5897 ;;		_Sensor_Acq_ExecutePacket
  5898 ;; This function is called by:
  5899 ;;		_Sensor_Acquisition
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           
  5904                           ;psect for function _Sensor_Scanfrequency_Evaluation
  5905  06C4                     _Sensor_Scanfrequency_Evaluation:	
  5906                           
  5907                           ;incstack = 0
  5908                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  5909                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  5910  06C4  0020               	movlb	0	; select bank0
  5911  06C5  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  5912                           
  5913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 741: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 742: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 743:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 745:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 746:     mtouch_sensor_sampleperiod_t best_sample_period;
  5914  06C6  0856               	movf	_packet_noise+1,w
  5915  06C7  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  5916  06C8  0855               	movf	_packet_noise,w
  5917  06C9  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5918  06CA  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  5919  06CB  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  5920  06CC  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  5921  06CD  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  5922  06CE  0855               	movf	_packet_noise,w
  5923  06CF  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  5924  06D0  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  5925  06D1  0856               	movf	_packet_noise+1,w
  5926  06D2  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  5927  06D3  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  5928                           
  5929                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 751:     best_sample_period = sample_period
      +                          ;
  5930  06D4  086B               	movf	_sample_period,w
  5931  06D5  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5932  06D6  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5933  06D7  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  5934                           
  5935                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 752:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  5936  06D8  0852               	movf	_packet_sample+1,w
  5937  06D9  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  5938  06DA  0851               	movf	_packet_sample,w
  5939  06DB  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  5940                           
  5941                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 753:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  5942  06DC  0854               	movf	_packet_sample+3,w
  5943  06DD  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  5944  06DE  0853               	movf	_packet_sample+2,w
  5945  06DF  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  5946                           
  5947                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  5948  06E0  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  5949  06E1                     l4494:	
  5950                           
  5951                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 757:         sample_period += frequency_hop[i];
  5952  06E1  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  5953  06E2  3E40               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  5954  06E3  0084               	movwf	4
  5955  06E4  3090               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  5956  06E5  1803               	skipnc
  5957  06E6  3E01               	addlw	1
  5958  06E7  0085               	movwf	5
  5959  06E8  0800               	movf	0,w	;code access
  5960  06E9  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5961  06EA  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5962  06EB  07EB               	addwf	_sample_period,f
  5963                           
  5964                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  5965  06EC  30AE               	movlw	174
  5966  06ED  026B               	subwf	_sample_period,w
  5967  06EE  1803               	skipnc
  5968  06EF  2EF4               	goto	l4502
  5969                           
  5970                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 765:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  5971  06F0  30AE               	movlw	174
  5972  06F1  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5973  06F2  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5974  06F3  07EB               	addwf	_sample_period,f
  5975  06F4                     l4502:	
  5976                           
  5977                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 768:         retry = (uint8_t)5;
  5978  06F4  3005               	movlw	5
  5979  06F5  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5980  06F6  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5981  06F7  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  5982  06F8                     l4510:	
  5983                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  5984                           
  5985                           
  5986                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 770:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  5987  06F8  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  5988  06F9  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5989  06FA  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5990  06FB  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  5991  06FC  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  5992  06FD  3180  204B  3186   	fcall	_Sensor_Acq_ExecutePacket
  5993  0700  3A00               	xorlw	0
  5994  0701  1903               	btfsc	3,2
  5995  0702  2F0B               	goto	l4512
  5996                           
  5997                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 772:             retry--;
  5998  0703  3001               	movlw	1
  5999  0704  0020               	movlb	0	; select bank0
  6000  0705  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  6001                           
  6002                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 773:             if(retry == 0)
  6003  0706  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  6004  0707  1D03               	btfss	3,2
  6005  0708  2EF8               	goto	l4510
  6006                           
  6007                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 775:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  6008  0709  30FC               	movlw	252
  6009  070A  0008               	return
  6010  070B                     l4512:	
  6011                           
  6012                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 779:         if(packet_noise_Max < packet_n
      +                          oise)
  6013  070B  0020               	movlb	0	; select bank0
  6014  070C  0856               	movf	_packet_noise+1,w
  6015  070D  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  6016  070E  1D03               	skipz
  6017  070F  2F12               	goto	u3645
  6018  0710  0855               	movf	_packet_noise,w
  6019  0711  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  6020  0712                     u3645:	
  6021  0712  1803               	skipnc
  6022  0713  2F24               	goto	l4516
  6023                           
  6024                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 781:             packet_noise_Max = packet_noise;
  6025  0714  0856               	movf	_packet_noise+1,w
  6026  0715  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  6027  0716  0855               	movf	_packet_noise,w
  6028  0717  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  6029                           
  6030                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:             best_sample_period = sampl
      +                          e_period;
  6031  0718  086B               	movf	_sample_period,w
  6032  0719  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  6033  071A  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6034  071B  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  6035                           
  6036                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 783:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  6037  071C  0852               	movf	_packet_sample+1,w
  6038  071D  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  6039  071E  0851               	movf	_packet_sample,w
  6040  071F  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  6041                           
  6042                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  6043  0720  0854               	movf	_packet_sample+3,w
  6044  0721  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  6045  0722  0853               	movf	_packet_sample+2,w
  6046  0723  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  6047  0724                     l4516:	
  6048                           
  6049                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 786:     }
  6050  0724  3001               	movlw	1
  6051  0725  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  6052  0726  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6053  0727  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  6054  0728  3005               	movlw	5
  6055  0729  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  6056  072A  1C03               	skipc
  6057  072B  2EE1               	goto	l4494
  6058                           
  6059                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 788:     sample_period = best_sample_period
      +                          ;
  6060  072C  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  6061  072D  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  6062  072E  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6063  072F  00EB               	movwf	_sample_period
  6064                           
  6065                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  6066  0730  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  6067  0731  00D2               	movwf	_packet_sample+1
  6068  0732  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  6069  0733  00D1               	movwf	_packet_sample
  6070                           
  6071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  6072  0734  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  6073  0735  00D4               	movwf	_packet_sample+3
  6074  0736  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  6075  0737  00D3               	movwf	_packet_sample+2
  6076                           
  6077                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792:     return MTOUCH_SENSOR_ERROR_none;
  6078  0738  3000               	movlw	0
  6079  0739  0008               	return
  6080  073A                     __end_of_Sensor_Scanfrequency_Evaluation:	
  6081                           
  6082                           	psect	text34
  6083  004B                     __ptext34:	
  6084 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  6085 ;; Defined at:
  6086 ;;		line 479 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  sensor_adc1     1    wreg     PTR struct .
  6089 ;;		 -> mtouch_sensor(36), 
  6090 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  6091 ;;		 -> mtouch_sensor(36), 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  6094 ;;		 -> mtouch_sensor(36), 
  6095 ;;  last_b          2   10[BANK0 ] unsigned short 
  6096 ;;  last_a          2    8[BANK0 ] unsigned short 
  6097 ;;  packet_count    1   12[BANK0 ] unsigned char 
  6098 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  6099 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  6100 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  6101 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  6102 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  6103 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  6104 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      enum E2859
  6107 ;; Registers used:
  6108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6114 ;;      Params:         1       0       0       0       0       0       0       0
  6115 ;;      Locals:         0      13       0       0       0       0       0       0
  6116 ;;      Temps:          0       1       0       0       0       0       0       0
  6117 ;;      Totals:         1      14       0       0       0       0       0       0
  6118 ;;Total ram usage:       15 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:    6
  6121 ;; This function calls:
  6122 ;;		_MTOUCH_Sensor_Scan_Initialize
  6123 ;;		_Sensor_autoCalibration
  6124 ;;		_Sensor_isActive
  6125 ;;		_Sensor_isCalibrated
  6126 ;;		_Sensor_isEnabled
  6127 ;;		_Sensor_loadADCSettings
  6128 ;;		_TMR2_LoadPeriodRegister
  6129 ;;		_TMR2_StartTimer
  6130 ;;		_TMR2_StopTimer
  6131 ;;		_abs
  6132 ;; This function is called by:
  6133 ;;		_Sensor_Acquisition
  6134 ;;		_Sensor_Scanfrequency_Evaluation
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           
  6139                           ;psect for function _Sensor_Acq_ExecutePacket
  6140  004B                     _Sensor_Acq_ExecutePacket:	
  6141                           
  6142                           ;incstack = 0
  6143                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6144                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  6145  004B  0020               	movlb	0	; select bank0
  6146  004C  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  6147                           
  6148                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 484:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  6149  004D  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  6150  004E  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  6151                           
  6152                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  6153  004F  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  6154  0050  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  6155                           
  6156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 486:     uint8_t activeSensor = 0;
  6157  0051  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  6158                           
  6159                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 489:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 495:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  6160  0052  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  6161  0053  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  6162                           
  6163                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  6164  0054  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6165  0055  1903               	btfsc	3,2
  6166  0056  288A               	goto	l4294
  6167  0057  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6168  0058  1903               	btfsc	3,2
  6169  0059  288A               	goto	l4294
  6170                           
  6171                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 497:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 498:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  6172  005A  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6173  005B  3E08               	addlw	8
  6174  005C  0086               	movwf	6
  6175  005D  0187               	clrf	7
  6176  005E  1981               	btfsc	1,3
  6177  005F  286E               	goto	l4276
  6178  0060  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6179  0061  3E08               	addlw	8
  6180  0062  0086               	movwf	6
  6181  0063  0187               	clrf	7
  6182  0064  1D81               	btfss	1,3
  6183  0065  286E               	goto	l4276
  6184                           
  6185                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 500:             sensor_adc1->enabled = 1;
  6186  0066  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6187  0067  3E08               	addlw	8
  6188  0068  0086               	movwf	6
  6189  0069  0187               	clrf	7
  6190  006A  1581               	bsf	1,3
  6191                           
  6192                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:             sensor1ForceEnabled = 1;
  6193  006B  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  6194  006C  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  6195                           
  6196                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 502:         }
  6197  006D  289E               	goto	l4318
  6198  006E                     l4276:	
  6199  006E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6200  006F  3E08               	addlw	8
  6201  0070  0086               	movwf	6
  6202  0071  0187               	clrf	7
  6203  0072  1981               	btfsc	1,3
  6204  0073  2882               	goto	l4284
  6205  0074  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6206  0075  3E08               	addlw	8
  6207  0076  0086               	movwf	6
  6208  0077  0187               	clrf	7
  6209  0078  1D81               	btfss	1,3
  6210  0079  2882               	goto	l4284
  6211                           
  6212                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 504:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 505:             sensor_adc2->enabled = 1;
  6213  007A  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6214  007B  3E08               	addlw	8
  6215  007C  0086               	movwf	6
  6216  007D  0187               	clrf	7
  6217  007E  1581               	bsf	1,3
  6218                           
  6219                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 506:             sensor2ForceEnabled = 1;
  6220  007F  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  6221  0080  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  6222                           
  6223                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:         }
  6224  0081  289E               	goto	l4318
  6225  0082                     l4284:	
  6226  0082  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6227  0083  3E08               	addlw	8
  6228  0084  0086               	movwf	6
  6229  0085  0187               	clrf	7
  6230  0086  1981               	btfsc	1,3
  6231  0087  289E               	goto	l4318
  6232  0088                     l4286:	
  6233  0088  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6234  0089  2897               	goto	L3
  6235  008A                     l4294:	
  6236                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 515:     }
  6237                           
  6238  008A  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6239  008B  1D03               	btfss	3,2
  6240  008C  2890               	goto	l4306
  6241  008D  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6242  008E  1D03               	btfss	3,2
  6243  008F  2888               	goto	l4286
  6244  0090                     l4306:	
  6245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 517:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 518:         if(sensor_adc2->enabled == 0)
  6246                           
  6247  0090  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6248  0091  1903               	btfsc	3,2
  6249  0092  289E               	goto	l4318
  6250  0093  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6251  0094  1D03               	btfss	3,2
  6252  0095  289E               	goto	l4318
  6253                           
  6254                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 527:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 528:         if(sensor_adc1->enabled == 0)
  6255  0096  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6256  0097                     L3:	
  6257  0097  3E08               	addlw	8
  6258  0098  0086               	movwf	6
  6259  0099  0187               	clrf	7
  6260  009A  1981               	btfsc	1,3
  6261  009B  289E               	goto	l4318
  6262  009C                     l4288:	
  6263                           
  6264                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 510:             return MTOUCH_SENSOR_ERROR_none;
  6265  009C  3000               	movlw	0
  6266  009D  0008               	return
  6267  009E                     l4318:	
  6268                           
  6269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     if(Sensor_isActive(sensor_adc2))
  6270  009E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6271  009F  318B  2315  3180   	fcall	_Sensor_isActive
  6272  00A2  3A00               	xorlw	0
  6273  00A3  1903               	skipnz
  6274  00A4  28A8               	goto	l4322
  6275                           
  6276                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         activeSensor = 1;
  6277  00A5  0020               	movlb	0	; select bank0
  6278  00A6  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  6279  00A7  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  6280  00A8                     l4322:	
  6281                           
  6282                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     ADCOMCON_temp = ADCOMCON;
  6283  00A8  002E               	movlb	14	; select bank14
  6284  00A9  0812               	movf	18,w	;volatile
  6285  00AA  0020               	movlb	0	; select bank0
  6286  00AB  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6287  00AC  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6288  00AD  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  6289                           
  6290                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:     AD1CON2_temp = AD1CON2;
  6291  00AE  002E               	movlb	14	; select bank14
  6292  00AF  0813               	movf	19,w	;volatile
  6293  00B0  0020               	movlb	0	; select bank0
  6294  00B1  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6295  00B2  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6296  00B3  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  6297                           
  6298                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:     AD2CON2_temp = AD2CON2;
  6299  00B4  002F               	movlb	15	; select bank15
  6300  00B5  0813               	movf	19,w	;volatile
  6301  00B6  0020               	movlb	0	; select bank0
  6302  00B7  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6303  00B8  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6304  00B9  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  6305                           
  6306                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     MTOUCH_Sensor_Scan_Initialize();
  6307  00BA  318B  2369  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  6308                           
  6309                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     if(sensor_adc1!=((void*)0))
  6310  00BD  0020               	movlb	0	; select bank0
  6311  00BE  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6312  00BF  1903               	btfsc	3,2
  6313  00C0  28D3               	goto	l4338
  6314                           
  6315                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6316  00C1  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6317  00C2  3E04               	addlw	4
  6318  00C3  0086               	movwf	6
  6319  00C4  0187               	clrf	7
  6320  00C5  0801               	movf	1,w
  6321  00C6  3EFF               	addlw	255
  6322  00C7  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6323  00C8  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6324  00C9  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6325                           
  6326                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 0;
  6327  00CA  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6328                           
  6329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b01000000;
  6330  00CB  3040               	movlw	64
  6331  00CC  002E               	movlb	14	; select bank14
  6332  00CD  0098               	movwf	24	;volatile
  6333                           
  6334                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b00000000;
  6335  00CE  002F               	movlb	15	; select bank15
  6336  00CF  0198               	clrf	24	;volatile
  6337                           
  6338                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  6339  00D0  0022               	movlb	2	; select bank2
  6340  00D1  101D               	bcf	29,0	;volatile
  6341                           
  6342                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 561:     }
  6343  00D2  28E5               	goto	l4348
  6344  00D3                     l4338:	
  6345                           
  6346                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 564:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6347  00D3  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6348  00D4  3E04               	addlw	4
  6349  00D5  0086               	movwf	6
  6350  00D6  0187               	clrf	7
  6351  00D7  0801               	movf	1,w
  6352  00D8  3EFF               	addlw	255
  6353  00D9  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6354  00DA  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6355  00DB  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6356                           
  6357                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         ADxIF_flag = 1;
  6358  00DC  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6359  00DD  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  6360                           
  6361                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         AAD1GRD = 0b00000000;
  6362  00DE  002E               	movlb	14	; select bank14
  6363  00DF  0198               	clrf	24	;volatile
  6364                           
  6365                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:         AAD2GRD = 0b01000000;
  6366  00E0  3040               	movlw	64
  6367  00E1  002F               	movlb	15	; select bank15
  6368  00E2  0098               	movwf	24	;volatile
  6369                           
  6370                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:         APFCONbits.GRDASEL = 0x1;
  6371  00E3  0022               	movlb	2	; select bank2
  6372  00E4  141D               	bsf	29,0	;volatile
  6373  00E5                     l4348:	
  6374                           
  6375                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  6376  00E5  01F2               	clrf	Sensor_loadADCSettings@adc_index
  6377  00E6  0020               	movlb	0	; select bank0
  6378  00E7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6379  00E8  3182  2209  3180   	fcall	_Sensor_loadADCSettings
  6380                           
  6381                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  6382  00EB  01F2               	clrf	Sensor_loadADCSettings@adc_index
  6383  00EC  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  6384  00ED  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6385  00EE  3182  2209  3180   	fcall	_Sensor_loadADCSettings
  6386                           
  6387                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:     sensor_globalFlags.done = 0;
  6388  00F1  0020               	movlb	0	; select bank0
  6389  00F2  1059               	bcf	_sensor_globalFlags,0	;volatile
  6390                           
  6391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     sensor_globalFlags.error = 0;
  6392  00F3  1159               	bcf	_sensor_globalFlags,2	;volatile
  6393                           
  6394                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 576:     sensor_globalFlags.interrupted = 0
      +                          ;
  6395  00F4  11D9               	bcf	_sensor_globalFlags,3	;volatile
  6396                           
  6397                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  6398  00F5  086B               	movf	_sample_period,w
  6399  00F6  318A  2280  3180   	fcall	_TMR2_LoadPeriodRegister
  6400                           
  6401                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 579:     TMR2_StartTimer();
  6402  00F9  318A  2273  3180   	fcall	_TMR2_StartTimer
  6403                           
  6404                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:     packet_noise = 0;
  6405  00FC  0020               	movlb	0	; select bank0
  6406  00FD  01D5               	clrf	_packet_noise
  6407  00FE  01D6               	clrf	_packet_noise+1
  6408  00FF                     l4364:	
  6409                           
  6410                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 584:         if(ADxIF_flag == 0)
  6411  00FF  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  6412  0100  1D03               	btfss	3,2
  6413  0101  2908               	goto	l718
  6414                           
  6415                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 586:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6416  0102  1F11               	btfss	17,6	;volatile
  6417  0103  10D9               	bcf	_sensor_globalFlags,1	;volatile
  6418  0104                     l720:	
  6419  0104  1F11               	btfss	17,6	;volatile
  6420  0105  2904               	goto	l720
  6421                           
  6422                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588:             PIR1bits.AD1IF = 0;
  6423  0106  1311               	bcf	17,6	;volatile
  6424                           
  6425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         }
  6426  0107  290E               	goto	l4372
  6427  0108                     l718:	
  6428                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         else
  6429                           
  6430                           
  6431                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 592:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6432  0108  1B12               	btfsc	18,6	;volatile
  6433  0109  290B               	goto	l725
  6434  010A  10D9               	bcf	_sensor_globalFlags,1	;volatile
  6435  010B                     l725:	
  6436  010B  1F12               	btfss	18,6	;volatile
  6437  010C  290B               	goto	l725
  6438                           
  6439                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:             PIR2bits.AD2IF = 0;
  6440  010D  1312               	bcf	18,6	;volatile
  6441  010E                     l4372:	
  6442                           
  6443                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:         AAD1GRD ^= 0b00100001;
  6444  010E  3021               	movlw	33
  6445  010F  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6446  0110  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6447  0111  002E               	movlb	14	; select bank14
  6448  0112  0698               	xorwf	24,f	;volatile
  6449                           
  6450                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:         AAD2GRD ^= 0b00100001;
  6451  0113  3021               	movlw	33
  6452  0114  0020               	movlb	0	; select bank0
  6453  0115  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6454  0116  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6455  0117  002F               	movlb	15	; select bank15
  6456  0118  0698               	xorwf	24,f	;volatile
  6457                           
  6458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:         AAD1CON3 ^= 0b11000000;
  6459  0119  30C0               	movlw	192
  6460  011A  0020               	movlb	0	; select bank0
  6461  011B  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6462  011C  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6463  011D  002E               	movlb	14	; select bank14
  6464  011E  0694               	xorwf	20,f	;volatile
  6465                           
  6466                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:         AAD2CON3 ^= 0b11000000;
  6467  011F  30C0               	movlw	192
  6468  0120  0020               	movlb	0	; select bank0
  6469  0121  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  6470  0122  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  6471  0123  002F               	movlb	15	; select bank15
  6472  0124  0694               	xorwf	20,f	;volatile
  6473                           
  6474                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:         if ((packet_counter & 0x01) ==
      +                           0)
  6475  0125  0020               	movlb	0	; select bank0
  6476  0126  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  6477  0127  296E               	goto	l4388
  6478                           
  6479                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 603:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 604:             packet_sample[0] += AAD1RES0;
  6480  0128  002E               	movlb	14	; select bank14
  6481  0129  081A               	movf	26,w	;volatile
  6482  012A  0020               	movlb	0	; select bank0
  6483  012B  07D1               	addwf	_packet_sample,f
  6484  012C  002E               	movlb	14	; select bank14
  6485  012D  081B               	movf	27,w	;volatile
  6486  012E  0020               	movlb	0	; select bank0
  6487  012F  3DD2               	addwfc	_packet_sample+1,f
  6488                           
  6489                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 605:             packet_sample[1] += AAD2RE
      +                          S0;
  6490  0130  002F               	movlb	15	; select bank15
  6491  0131  081A               	movf	26,w	;volatile
  6492  0132  0020               	movlb	0	; select bank0
  6493  0133  07D3               	addwf	_packet_sample+2,f
  6494  0134  002F               	movlb	15	; select bank15
  6495  0135  081B               	movf	27,w	;volatile
  6496  0136  0020               	movlb	0	; select bank0
  6497  0137  3DD4               	addwfc	_packet_sample+3,f
  6498                           
  6499                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:             if(activeSensor ==0)
  6500  0138  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  6501  0139  1D03               	btfss	3,2
  6502  013A  2953               	goto	l4384
  6503                           
  6504                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 607:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 608:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  6505  013B  002E               	movlb	14	; select bank14
  6506  013C  081A               	movf	26,w	;volatile
  6507  013D  0020               	movlb	0	; select bank0
  6508  013E  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  6509  013F  00F1               	movwf	abs@a
  6510  0140  002E               	movlb	14	; select bank14
  6511  0141  081B               	movf	27,w	;volatile
  6512  0142  0020               	movlb	0	; select bank0
  6513  0143  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  6514  0144  00F2               	movwf	abs@a+1
  6515  0145  318C  2478  3180   	fcall	_abs
  6516  0148  0871               	movf	?_abs,w
  6517  0149  0020               	movlb	0	; select bank0
  6518  014A  07D5               	addwf	_packet_noise,f
  6519  014B  0872               	movf	?_abs+1,w
  6520  014C  3DD6               	addwfc	_packet_noise+1,f
  6521                           
  6522                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 609:                 last_b = AAD1RES0;
  6523  014D  002E               	movlb	14	; select bank14
  6524  014E  081B               	movf	27,w	;volatile
  6525  014F  0020               	movlb	0	; select bank0
  6526  0150  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  6527  0151  002E               	movlb	14	; select bank14
  6528  0152  296A               	goto	L2
  6529  0153                     l4384:	
  6530                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:             }
  6531                           
  6532                           
  6533                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 613:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  6534  0153  002F               	movlb	15	; select bank15
  6535  0154  081A               	movf	26,w	;volatile
  6536  0155  0020               	movlb	0	; select bank0
  6537  0156  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  6538  0157  00F1               	movwf	abs@a
  6539  0158  002F               	movlb	15	; select bank15
  6540  0159  081B               	movf	27,w	;volatile
  6541  015A  0020               	movlb	0	; select bank0
  6542  015B  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  6543  015C  00F2               	movwf	abs@a+1
  6544  015D  318C  2478  3180   	fcall	_abs
  6545  0160  0871               	movf	?_abs,w
  6546  0161  0020               	movlb	0	; select bank0
  6547  0162  07D5               	addwf	_packet_noise,f
  6548  0163  0872               	movf	?_abs+1,w
  6549  0164  3DD6               	addwfc	_packet_noise+1,f
  6550                           
  6551                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:                 last_b = AAD2RES0;
  6552  0165  002F               	movlb	15	; select bank15
  6553  0166  081B               	movf	27,w	;volatile
  6554  0167  0020               	movlb	0	; select bank0
  6555  0168  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  6556  0169  002F               	movlb	15	; select bank15
  6557  016A                     L2:	
  6558  016A  081A               	movf	26,w	;volatile
  6559  016B  0020               	movlb	0	; select bank0
  6560  016C  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  6561  016D  29A2               	goto	l4400
  6562  016E                     l4388:	
  6563                           
  6564                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 618:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 619:             packet_sample[0] -= AAD1RES0;
  6565  016E  002E               	movlb	14	; select bank14
  6566  016F  081A               	movf	26,w	;volatile
  6567  0170  0020               	movlb	0	; select bank0
  6568  0171  02D1               	subwf	_packet_sample,f
  6569  0172  002E               	movlb	14	; select bank14
  6570  0173  081B               	movf	27,w	;volatile
  6571  0174  0020               	movlb	0	; select bank0
  6572  0175  3BD2               	subwfb	_packet_sample+1,f
  6573                           
  6574                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:             packet_sample[1] -= AAD2RE
      +                          S0;
  6575  0176  002F               	movlb	15	; select bank15
  6576  0177  081A               	movf	26,w	;volatile
  6577  0178  0020               	movlb	0	; select bank0
  6578  0179  02D3               	subwf	_packet_sample+2,f
  6579  017A  002F               	movlb	15	; select bank15
  6580  017B  081B               	movf	27,w	;volatile
  6581  017C  0020               	movlb	0	; select bank0
  6582  017D  3BD4               	subwfb	_packet_sample+3,f
  6583                           
  6584                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:             if(activeSensor ==0)
  6585  017E  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  6586  017F  1D03               	btfss	3,2
  6587  0180  2988               	goto	l4396
  6588                           
  6589                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 623:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  6590  0181  002E               	movlb	14	; select bank14
  6591  0182  081A               	movf	26,w	;volatile
  6592  0183  0020               	movlb	0	; select bank0
  6593  0184  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  6594  0185  00F1               	movwf	abs@a
  6595  0186  002E               	movlb	14	; select bank14
  6596  0187  298E               	goto	L5
  6597  0188                     l4396:	
  6598                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:             }
  6599                           
  6600                           
  6601                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 628:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  6602  0188  002F               	movlb	15	; select bank15
  6603  0189  081A               	movf	26,w	;volatile
  6604  018A  0020               	movlb	0	; select bank0
  6605  018B  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  6606  018C  00F1               	movwf	abs@a
  6607  018D  002F               	movlb	15	; select bank15
  6608  018E                     L5:	
  6609  018E  081B               	movf	27,w	;volatile
  6610  018F  0020               	movlb	0	; select bank0
  6611  0190  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  6612  0191  00F2               	movwf	abs@a+1
  6613  0192  318C  2478  3180   	fcall	_abs
  6614  0195  0871               	movf	?_abs,w
  6615  0196  0020               	movlb	0	; select bank0
  6616  0197  07D5               	addwf	_packet_noise,f
  6617  0198  0872               	movf	?_abs+1,w
  6618  0199  3DD6               	addwfc	_packet_noise+1,f
  6619                           
  6620                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 624:                 last_a = AAD1RES0;
  6621  019A  002E               	movlb	14	; select bank14
  6622  019B  081B               	movf	27,w	;volatile
  6623  019C  0020               	movlb	0	; select bank0
  6624  019D  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  6625  019E  002E               	movlb	14	; select bank14
  6626  019F  081A               	movf	26,w	;volatile
  6627  01A0  0020               	movlb	0	; select bank0
  6628  01A1  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  6629  01A2                     l4400:	
  6630                           
  6631                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         if (packet_counter == 0)
  6632  01A2  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  6633  01A3  1903               	btfsc	3,2
  6634                           
  6635                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 637:             sensor_globalFlags.done = (uint8_t)1;
  6636  01A4  1459               	bsf	_sensor_globalFlags,0	;volatile
  6637                           
  6638                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:         packet_counter--;
  6639  01A5  3001               	movlw	1
  6640  01A6  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  6641                           
  6642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:         if (sensor_globalFlags.check !
      +                          = 0)
  6643  01A7  1CD9               	btfss	_sensor_globalFlags,1	;volatile
  6644  01A8  29AB               	goto	l735
  6645                           
  6646                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 643:             sensor_globalFlags.error = 1;
  6647  01A9  1559               	bsf	_sensor_globalFlags,2	;volatile
  6648                           
  6649                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:             sensor_globalFlags.done = 
      +                          1;
  6650  01AA  1459               	bsf	_sensor_globalFlags,0	;volatile
  6651  01AB                     l735:	
  6652                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 645:         }
  6653                           
  6654                           
  6655                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:         sensor_globalFlags.check = 1;
  6656  01AB  14D9               	bsf	_sensor_globalFlags,1	;volatile
  6657                           
  6658                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     } while(sensor_globalFlags.done ==
      +                           0);
  6659  01AC  1C59               	btfss	_sensor_globalFlags,0	;volatile
  6660  01AD  28FF               	goto	l4364
  6661                           
  6662                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     TMR2_StopTimer();
  6663  01AE  318A  2276  3180   	fcall	_TMR2_StopTimer
  6664                           
  6665                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 650:     ADCOMCON = ADCOMCON_temp;
  6666  01B1  0020               	movlb	0	; select bank0
  6667  01B2  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  6668  01B3  002E               	movlb	14	; select bank14
  6669  01B4  0092               	movwf	18	;volatile
  6670                           
  6671                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     AD1CON2 = AD1CON2_temp;
  6672  01B5  0020               	movlb	0	; select bank0
  6673  01B6  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  6674  01B7  002E               	movlb	14	; select bank14
  6675  01B8  0093               	movwf	19	;volatile
  6676                           
  6677                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     AD2CON2 = AD2CON2_temp;
  6678  01B9  0020               	movlb	0	; select bank0
  6679  01BA  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  6680  01BB  002F               	movlb	15	; select bank15
  6681  01BC  0093               	movwf	19	;volatile
  6682                           
  6683                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     if(sensor_globalFlags.error)
  6684  01BD  0020               	movlb	0	; select bank0
  6685  01BE  1D59               	btfss	_sensor_globalFlags,2	;volatile
  6686  01BF  29C2               	goto	l737
  6687                           
  6688                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 656:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  6689  01C0  30FB               	movlw	251
  6690  01C1  0008               	return
  6691  01C2                     l737:	
  6692                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     }
  6693                           
  6694                           
  6695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 659:     if(sensor_globalFlags.interrupted)
  6696  01C2  1DD9               	btfss	_sensor_globalFlags,3	;volatile
  6697  01C3  29C6               	goto	l4428
  6698                           
  6699                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 661:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  6700  01C4  30FA               	movlw	250
  6701  01C5  0008               	return
  6702  01C6                     l4428:	
  6703                           
  6704                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:     if (sensor1ForceEnabled)
  6705  01C6  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  6706  01C7  1903               	btfsc	3,2
  6707  01C8  29CE               	goto	l4432
  6708                           
  6709                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 666:         sensor_adc1->enabled = 0;
  6710  01C9  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6711  01CA  3E08               	addlw	8
  6712  01CB  0086               	movwf	6
  6713  01CC  0187               	clrf	7
  6714  01CD  1181               	bcf	1,3
  6715  01CE                     l4432:	
  6716                           
  6717                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:     if (sensor2ForceEnabled)
  6718  01CE  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  6719  01CF  1903               	btfsc	3,2
  6720  01D0  29D6               	goto	l4436
  6721                           
  6722                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 669:         sensor_adc2->enabled = 0;
  6723  01D1  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6724  01D2  3E08               	addlw	8
  6725  01D3  0086               	movwf	6
  6726  01D4  0187               	clrf	7
  6727  01D5  1181               	bcf	1,3
  6728  01D6                     l4436:	
  6729                           
  6730                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  6731  01D6  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6732  01D7  318B  2379  3180   	fcall	_Sensor_isEnabled
  6733  01DA  3A00               	xorlw	0
  6734  01DB  1903               	skipnz
  6735  01DC  29EA               	goto	l4442
  6736  01DD  0020               	movlb	0	; select bank0
  6737  01DE  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6738  01DF  318A  22E7  3180   	fcall	_Sensor_isCalibrated
  6739  01E2  3A00               	xorlw	0
  6740  01E3  1D03               	skipz
  6741  01E4  29EA               	goto	l4442
  6742                           
  6743                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:         Sensor_autoCalibration(sensor_
      +                          adc1);
  6744  01E5  0020               	movlb	0	; select bank0
  6745  01E6  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6746  01E7  3185  25B3  3180   	fcall	_Sensor_autoCalibration
  6747  01EA                     l4442:	
  6748                           
  6749                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  6750  01EA  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6751  01EB  318B  2379  3180   	fcall	_Sensor_isEnabled
  6752  01EE  3A00               	xorlw	0
  6753  01EF  1903               	skipnz
  6754  01F0  29FC               	goto	l4448
  6755  01F1  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6756  01F2  318A  22E7  3180   	fcall	_Sensor_isCalibrated
  6757  01F5  3A00               	xorlw	0
  6758  01F6  1D03               	skipz
  6759  01F7  29FC               	goto	l4448
  6760                           
  6761                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:         Sensor_autoCalibration(sensor_
      +                          adc2);
  6762  01F8  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6763  01F9  3185  25B3  3180   	fcall	_Sensor_autoCalibration
  6764  01FC                     l4448:	
  6765                           
  6766                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 678:     AD1PRECON = 0;
  6767  01FC  002E               	movlb	14	; select bank14
  6768  01FD  0196               	clrf	22	;volatile
  6769                           
  6770                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 679:     AD2PRECON = 0;
  6771  01FE  002F               	movlb	15	; select bank15
  6772  01FF  0196               	clrf	22	;volatile
  6773                           
  6774                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 680:     AD1ACQCON = 0;
  6775  0200  002E               	movlb	14	; select bank14
  6776  0201  0197               	clrf	23	;volatile
  6777                           
  6778                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 681:     AD2ACQCON = 0;
  6779  0202  002F               	movlb	15	; select bank15
  6780  0203  0197               	clrf	23	;volatile
  6781                           
  6782                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 682:     AD1CON0bits.ADON = 0;
  6783  0204  002E               	movlb	14	; select bank14
  6784  0205  1011               	bcf	17,0	;volatile
  6785                           
  6786                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 683:     AD2CON0bits.ADON = 0;
  6787  0206  002F               	movlb	15	; select bank15
  6788  0207  1011               	bcf	17,0	;volatile
  6789  0208  289C               	goto	l4288
  6790  0209                     __end_of_Sensor_Acq_ExecutePacket:	
  6791                           
  6792                           	psect	text35
  6793  0A76                     __ptext35:	
  6794 ;; *************** function _TMR2_StopTimer *****************
  6795 ;; Defined at:
  6796 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;		None
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;		None
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  1    wreg      void 
  6803 ;; Registers used:
  6804 ;;		None
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6810 ;;      Params:         0       0       0       0       0       0       0       0
  6811 ;;      Locals:         0       0       0       0       0       0       0       0
  6812 ;;      Temps:          0       0       0       0       0       0       0       0
  6813 ;;      Totals:         0       0       0       0       0       0       0       0
  6814 ;;Total ram usage:        0 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    4
  6817 ;; This function calls:
  6818 ;;		Nothing
  6819 ;; This function is called by:
  6820 ;;		_Sensor_Acq_ExecutePacket
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           
  6825                           ;psect for function _TMR2_StopTimer
  6826  0A76                     _TMR2_StopTimer:	
  6827                           
  6828                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  6829                           
  6830                           ;incstack = 0
  6831                           ; Regs used in _TMR2_StopTimer: []
  6832  0A76  0020               	movlb	0	; select bank0
  6833  0A77  111C               	bcf	28,2	;volatile
  6834  0A78  0008               	return
  6835  0A79                     __end_of_TMR2_StopTimer:	
  6836                           
  6837                           	psect	text36
  6838  0A73                     __ptext36:	
  6839 ;; *************** function _TMR2_StartTimer *****************
  6840 ;; Defined at:
  6841 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;		None
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;		None
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  1    wreg      void 
  6848 ;; Registers used:
  6849 ;;		None
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6855 ;;      Params:         0       0       0       0       0       0       0       0
  6856 ;;      Locals:         0       0       0       0       0       0       0       0
  6857 ;;      Temps:          0       0       0       0       0       0       0       0
  6858 ;;      Totals:         0       0       0       0       0       0       0       0
  6859 ;;Total ram usage:        0 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    4
  6862 ;; This function calls:
  6863 ;;		Nothing
  6864 ;; This function is called by:
  6865 ;;		_Sensor_Acq_ExecutePacket
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _TMR2_StartTimer
  6871  0A73                     _TMR2_StartTimer:	
  6872                           
  6873                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  6874                           
  6875                           ;incstack = 0
  6876                           ; Regs used in _TMR2_StartTimer: []
  6877  0A73  0020               	movlb	0	; select bank0
  6878  0A74  151C               	bsf	28,2	;volatile
  6879  0A75  0008               	return
  6880  0A76                     __end_of_TMR2_StartTimer:	
  6881                           
  6882                           	psect	text37
  6883  0A80                     __ptext37:	
  6884 ;; *************** function _TMR2_LoadPeriodRegister *****************
  6885 ;; Defined at:
  6886 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  periodVal       1    wreg     unsigned char 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  periodVal       1    1[COMMON] unsigned char 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      void 
  6893 ;; Registers used:
  6894 ;;		wreg
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6900 ;;      Params:         0       0       0       0       0       0       0       0
  6901 ;;      Locals:         1       0       0       0       0       0       0       0
  6902 ;;      Temps:          0       0       0       0       0       0       0       0
  6903 ;;      Totals:         1       0       0       0       0       0       0       0
  6904 ;;Total ram usage:        1 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    4
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_Sensor_Acq_ExecutePacket
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           
  6915                           ;psect for function _TMR2_LoadPeriodRegister
  6916  0A80                     _TMR2_LoadPeriodRegister:	
  6917                           
  6918                           ;incstack = 0
  6919                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  6920                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  6921  0A80  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  6922                           
  6923                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  6924  0A81  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  6925  0A82  0020               	movlb	0	; select bank0
  6926  0A83  009B               	movwf	27	;volatile
  6927  0A84  0008               	return
  6928  0A85                     __end_of_TMR2_LoadPeriodRegister:	
  6929                           
  6930                           	psect	text38
  6931  0209                     __ptext38:	
  6932 ;; *************** function _Sensor_loadADCSettings *****************
  6933 ;; Defined at:
  6934 ;;		line 445 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;  sensor          1    wreg     PTR struct .
  6937 ;;		 -> mtouch_sensor(36), 
  6938 ;;  adc_index       1    2[COMMON] unsigned char 
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;  sensor          1    9[COMMON] PTR struct .
  6941 ;;		 -> mtouch_sensor(36), 
  6942 ;;  addressOffse    1    8[COMMON] unsigned char 
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6952 ;;      Params:         1       0       0       0       0       0       0       0
  6953 ;;      Locals:         4       0       0       0       0       0       0       0
  6954 ;;      Temps:          3       0       0       0       0       0       0       0
  6955 ;;      Totals:         8       0       0       0       0       0       0       0
  6956 ;;Total ram usage:        8 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    5
  6959 ;; This function calls:
  6960 ;;		_Sensor_isCalibrated
  6961 ;;		_Sensor_isCalibratingAcqTime
  6962 ;; This function is called by:
  6963 ;;		_Sensor_Acq_ExecutePacket
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           
  6968                           ;psect for function _Sensor_loadADCSettings
  6969  0209                     _Sensor_loadADCSettings:	
  6970                           
  6971                           ;incstack = 0
  6972                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  6973                           ;Sensor_loadADCSettings@sensor stored from wreg
  6974  0209  00F9               	movwf	Sensor_loadADCSettings@sensor
  6975                           
  6976                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 446
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     if (sensor == ((void*)0))
  6977  020A  0879               	movf	Sensor_loadADCSettings@sensor,w
  6978  020B  1903               	btfsc	3,2
  6979  020C  0008               	return
  6980                           
  6981                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  6982  020D  0872               	movf	Sensor_loadADCSettings@adc_index,w
  6983  020E  1D03               	btfss	3,2
  6984  020F  2A13               	goto	l3156
  6985  0210  01F6               	clrf	_Sensor_loadADCSettings$1165
  6986  0211  01F7               	clrf	_Sensor_loadADCSettings$1165+1
  6987  0212  2A17               	goto	l689
  6988  0213                     l3156:	
  6989  0213  3080               	movlw	128
  6990  0214  00F6               	movwf	_Sensor_loadADCSettings$1165
  6991  0215  3000               	movlw	0
  6992  0216  00F7               	movwf	_Sensor_loadADCSettings$1165+1
  6993  0217                     l689:	
  6994  0217  0876               	movf	_Sensor_loadADCSettings$1165,w
  6995  0218  00F3               	movwf	??_Sensor_loadADCSettings
  6996  0219  0873               	movf	??_Sensor_loadADCSettings,w
  6997  021A  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  6998                           
  6999                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  7000  021B  0A79               	incf	Sensor_loadADCSettings@sensor,w
  7001  021C  0086               	movwf	6
  7002  021D  0187               	clrf	7
  7003  021E  0801               	movf	1,w
  7004  021F  00F3               	movwf	??_Sensor_loadADCSettings
  7005  0220  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7006  0221  3E11               	addlw	17
  7007  0222  00F4               	movwf	??_Sensor_loadADCSettings+1
  7008  0223  01F5               	clrf	??_Sensor_loadADCSettings+2
  7009  0224  3007               	movlw	7
  7010  0225  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  7011  0226  0874               	movf	??_Sensor_loadADCSettings+1,w
  7012  0227  0086               	movwf	6
  7013  0228  0875               	movf	??_Sensor_loadADCSettings+2,w
  7014  0229  0087               	movwf	7
  7015  022A  0873               	movf	??_Sensor_loadADCSettings,w
  7016  022B  0081               	movwf	1
  7017                           
  7018                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  7019  022C  0879               	movf	Sensor_loadADCSettings@sensor,w
  7020  022D  3E05               	addlw	5
  7021  022E  0086               	movwf	6
  7022  022F  0187               	clrf	7
  7023  0230  0801               	movf	1,w
  7024  0231  00F3               	movwf	??_Sensor_loadADCSettings
  7025  0232  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7026  0233  3E19               	addlw	25
  7027  0234  00F4               	movwf	??_Sensor_loadADCSettings+1
  7028  0235  01F5               	clrf	??_Sensor_loadADCSettings+2
  7029  0236  3007               	movlw	7
  7030  0237  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  7031  0238  0874               	movf	??_Sensor_loadADCSettings+1,w
  7032  0239  0086               	movwf	6
  7033  023A  0875               	movf	??_Sensor_loadADCSettings+2,w
  7034  023B  0087               	movwf	7
  7035  023C  0873               	movf	??_Sensor_loadADCSettings,w
  7036  023D  0081               	movwf	1
  7037                           
  7038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 454:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  7039  023E  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7040  023F  3E13               	addlw	19
  7041  0240  00F3               	movwf	??_Sensor_loadADCSettings
  7042  0241  01F4               	clrf	??_Sensor_loadADCSettings+1
  7043  0242  3007               	movlw	7
  7044  0243  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  7045  0244  0873               	movf	??_Sensor_loadADCSettings,w
  7046  0245  0086               	movwf	6
  7047  0246  0874               	movf	??_Sensor_loadADCSettings+1,w
  7048  0247  0087               	movwf	7
  7049  0248  3050               	movlw	80
  7050  0249  0081               	movwf	1
  7051                           
  7052                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  7053  024A  30FE               	movlw	254
  7054  024B  00F3               	movwf	??_Sensor_loadADCSettings
  7055  024C  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7056  024D  3E18               	addlw	24
  7057  024E  0086               	movwf	6
  7058  024F  0187               	clrf	7
  7059  0250  3007               	movlw	7
  7060  0251  3D87               	addwfc	7,f
  7061  0252  0873               	movf	??_Sensor_loadADCSettings,w
  7062  0253  0581               	andwf	1,f
  7063                           
  7064                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:     if (Sensor_isCalibrated(sensor))
  7065  0254  0879               	movf	Sensor_loadADCSettings@sensor,w
  7066  0255  318A  22E7  3182   	fcall	_Sensor_isCalibrated
  7067  0258  3A00               	xorlw	0
  7068  0259  1903               	skipnz
  7069  025A  2A6E               	goto	l3170
  7070                           
  7071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 459:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  7072  025B  0879               	movf	Sensor_loadADCSettings@sensor,w
  7073  025C  3E02               	addlw	2
  7074  025D  0086               	movwf	6
  7075  025E  0187               	clrf	7
  7076  025F  0801               	movf	1,w
  7077  0260  00F3               	movwf	??_Sensor_loadADCSettings
  7078  0261  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7079  0262  3E16               	addlw	22
  7080  0263  00F4               	movwf	??_Sensor_loadADCSettings+1
  7081  0264  01F5               	clrf	??_Sensor_loadADCSettings+2
  7082  0265  3007               	movlw	7
  7083  0266  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  7084  0267  0874               	movf	??_Sensor_loadADCSettings+1,w
  7085  0268  0086               	movwf	6
  7086  0269  0875               	movf	??_Sensor_loadADCSettings+2,w
  7087  026A  0087               	movwf	7
  7088  026B  0873               	movf	??_Sensor_loadADCSettings,w
  7089  026C  0081               	movwf	1
  7090  026D  2A81               	goto	l3174
  7091  026E                     l3170:	
  7092                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  7093                           
  7094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  7095                           
  7096                           
  7097                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 464:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  7098  026E  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7099  026F  3E16               	addlw	22
  7100  0270  00F3               	movwf	??_Sensor_loadADCSettings
  7101  0271  01F4               	clrf	??_Sensor_loadADCSettings+1
  7102  0272  3007               	movlw	7
  7103  0273  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  7104  0274  0873               	movf	??_Sensor_loadADCSettings,w
  7105  0275  0086               	movwf	6
  7106  0276  0874               	movf	??_Sensor_loadADCSettings+1,w
  7107  0277  0087               	movwf	7
  7108  0278  3020               	movlw	32
  7109  0279  0081               	movwf	1
  7110                           
  7111                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 465:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  7112  027A  0879               	movf	Sensor_loadADCSettings@sensor,w
  7113  027B  318A  22D7  3182   	fcall	_Sensor_isCalibratingAcqTime
  7114  027E  3A00               	xorlw	0
  7115  027F  1903               	skipnz
  7116  0280  2A93               	goto	l3176
  7117  0281                     l3174:	
  7118                           
  7119                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 466:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  7120  0281  0879               	movf	Sensor_loadADCSettings@sensor,w
  7121  0282  3E03               	addlw	3
  7122  0283  0086               	movwf	6
  7123  0284  0187               	clrf	7
  7124  0285  0801               	movf	1,w
  7125  0286  00F3               	movwf	??_Sensor_loadADCSettings
  7126  0287  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7127  0288  3E17               	addlw	23
  7128  0289  00F4               	movwf	??_Sensor_loadADCSettings+1
  7129  028A  01F5               	clrf	??_Sensor_loadADCSettings+2
  7130  028B  3007               	movlw	7
  7131  028C  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  7132  028D  0874               	movf	??_Sensor_loadADCSettings+1,w
  7133  028E  0086               	movwf	6
  7134  028F  0875               	movf	??_Sensor_loadADCSettings+2,w
  7135  0290  0087               	movwf	7
  7136  0291  0873               	movf	??_Sensor_loadADCSettings,w
  7137  0292  2A9E               	goto	L6
  7138  0293                     l3176:	
  7139                           
  7140                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 468:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  7141  0293  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7142  0294  3E17               	addlw	23
  7143  0295  00F3               	movwf	??_Sensor_loadADCSettings
  7144  0296  01F4               	clrf	??_Sensor_loadADCSettings+1
  7145  0297  3007               	movlw	7
  7146  0298  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  7147  0299  0873               	movf	??_Sensor_loadADCSettings,w
  7148  029A  0086               	movwf	6
  7149  029B  0874               	movf	??_Sensor_loadADCSettings+1,w
  7150  029C  0087               	movwf	7
  7151  029D  3020               	movlw	32
  7152  029E                     L6:	
  7153  029E  0081               	movwf	1
  7154                           
  7155                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  7156                           
  7157                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 469:     }
  7158  029F  0879               	movf	Sensor_loadADCSettings@sensor,w
  7159  02A0  3E04               	addlw	4
  7160  02A1  0086               	movwf	6
  7161  02A2  0187               	clrf	7
  7162  02A3  0801               	movf	1,w
  7163  02A4  00F3               	movwf	??_Sensor_loadADCSettings
  7164  02A5  01F4               	clrf	??_Sensor_loadADCSettings+1
  7165  02A6  3009               	movlw	9
  7166  02A7                     u1775:	
  7167  02A7  35F3               	lslf	??_Sensor_loadADCSettings,f
  7168  02A8  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  7169  02A9  0B89               	decfsz	9,f
  7170  02AA  2AA7               	goto	u1775
  7171  02AB  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  7172  02AC  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  7173  02AD  0086               	movwf	6
  7174  02AE  0187               	clrf	7
  7175  02AF  0873               	movf	??_Sensor_loadADCSettings,w
  7176  02B0  3FC0               	movwi [0]fsr1
  7177  02B1  0874               	movf	??_Sensor_loadADCSettings+1,w
  7178  02B2  3FC1               	movwi [1]fsr1
  7179  02B3  0008               	return
  7180  02B4                     __end_of_Sensor_loadADCSettings:	
  7181                           
  7182                           	psect	text39
  7183  0AE7                     __ptext39:	
  7184 ;; *************** function _Sensor_isCalibrated *****************
  7185 ;; Defined at:
  7186 ;;		line 928 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;  sensor          1    wreg     PTR struct .
  7189 ;;		 -> mtouch_sensor(36), 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;  sensor          1    1[COMMON] PTR struct .
  7192 ;;		 -> mtouch_sensor(36), 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      _Bool 
  7195 ;; Registers used:
  7196 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7202 ;;      Params:         0       0       0       0       0       0       0       0
  7203 ;;      Locals:         1       0       0       0       0       0       0       0
  7204 ;;      Temps:          0       0       0       0       0       0       0       0
  7205 ;;      Totals:         1       0       0       0       0       0       0       0
  7206 ;;Total ram usage:        1 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    4
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_Sensor_Acquisition
  7213 ;;		_Sensor_loadADCSettings
  7214 ;;		_Sensor_Acq_ExecutePacket
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           
  7219                           ;psect for function _Sensor_isCalibrated
  7220  0AE7                     _Sensor_isCalibrated:	
  7221                           
  7222                           ;incstack = 0
  7223                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  7224                           ;Sensor_isCalibrated@sensor stored from wreg
  7225  0AE7  00F1               	movwf	Sensor_isCalibrated@sensor
  7226                           
  7227                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          929: {;mcc_generated_files/mtouch/mtouch_sensor.c: 930:     return (_Bool)sensor->calibr
      +                          ated;
  7228  0AE8  0871               	movf	Sensor_isCalibrated@sensor,w
  7229  0AE9  3E08               	addlw	8
  7230  0AEA  0086               	movwf	6
  7231  0AEB  0187               	clrf	7
  7232  0AEC  0C01               	rrf	1,w
  7233  0AED  0C89               	rrf	9,f
  7234  0AEE  3901               	andlw	1
  7235  0AEF  0008               	return
  7236  0AF0                     __end_of_Sensor_isCalibrated:	
  7237                           
  7238                           	psect	text40
  7239  0B79                     __ptext40:	
  7240 ;; *************** function _Sensor_isEnabled *****************
  7241 ;; Defined at:
  7242 ;;		line 863 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  sensor          1    wreg     PTR struct .
  7245 ;;		 -> mtouch_sensor(36), 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  sensor          1    2[COMMON] PTR struct .
  7248 ;;		 -> mtouch_sensor(36), 
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      _Bool 
  7251 ;; Registers used:
  7252 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7258 ;;      Params:         0       0       0       0       0       0       0       0
  7259 ;;      Locals:         1       0       0       0       0       0       0       0
  7260 ;;      Temps:          1       0       0       0       0       0       0       0
  7261 ;;      Totals:         2       0       0       0       0       0       0       0
  7262 ;;Total ram usage:        2 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    4
  7265 ;; This function calls:
  7266 ;;		Nothing
  7267 ;; This function is called by:
  7268 ;;		_Sensor_Service
  7269 ;;		_Sensor_postAcquisitionProcess
  7270 ;;		_Sensor_Acq_ExecutePacket
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           
  7275                           ;psect for function _Sensor_isEnabled
  7276  0B79                     _Sensor_isEnabled:	
  7277                           
  7278                           ;incstack = 0
  7279                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  7280                           ;Sensor_isEnabled@sensor stored from wreg
  7281  0B79  00F2               	movwf	Sensor_isEnabled@sensor
  7282                           
  7283                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 863: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 864: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 865:     if(sensor!=((void*)0))
  7284  0B7A  0872               	movf	Sensor_isEnabled@sensor,w
  7285  0B7B  1903               	btfsc	3,2
  7286  0B7C  2B87               	goto	l3134
  7287                           
  7288                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 866:         return (_Bool)sensor->enabled;
  7289  0B7D  0872               	movf	Sensor_isEnabled@sensor,w
  7290  0B7E  3E08               	addlw	8
  7291  0B7F  0086               	movwf	6
  7292  0B80  0187               	clrf	7
  7293  0B81  0C01               	rrf	1,w
  7294  0B82  00F1               	movwf	??_Sensor_isEnabled
  7295  0B83  0CF1               	rrf	??_Sensor_isEnabled,f
  7296  0B84  0C71               	rrf	??_Sensor_isEnabled,w
  7297  0B85  3901               	andlw	1
  7298  0B86  0008               	return
  7299  0B87                     l3134:	
  7300                           
  7301                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868:         return 0;
  7302  0B87  3000               	movlw	0
  7303  0B88  0008               	return
  7304  0B89                     __end_of_Sensor_isEnabled:	
  7305                           
  7306                           	psect	text41
  7307  0B15                     __ptext41:	
  7308 ;; *************** function _Sensor_isActive *****************
  7309 ;; Defined at:
  7310 ;;		line 890 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  sensor          1    wreg     PTR struct .
  7313 ;;		 -> mtouch_sensor(36), 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  sensor          1    1[COMMON] PTR struct .
  7316 ;;		 -> mtouch_sensor(36), 
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  1    wreg      _Bool 
  7319 ;; Registers used:
  7320 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7326 ;;      Params:         0       0       0       0       0       0       0       0
  7327 ;;      Locals:         1       0       0       0       0       0       0       0
  7328 ;;      Temps:          0       0       0       0       0       0       0       0
  7329 ;;      Totals:         1       0       0       0       0       0       0       0
  7330 ;;Total ram usage:        1 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    4
  7333 ;; This function calls:
  7334 ;;		Nothing
  7335 ;; This function is called by:
  7336 ;;		_Sensor_Acquisition
  7337 ;;		_Sensor_Acq_ExecutePacket
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           
  7342                           ;psect for function _Sensor_isActive
  7343  0B15                     _Sensor_isActive:	
  7344                           
  7345                           ;incstack = 0
  7346                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7347                           ;Sensor_isActive@sensor stored from wreg
  7348  0B15  00F1               	movwf	Sensor_isActive@sensor
  7349                           
  7350                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 890: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 891:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 892:     if(sensor == ((void*)0))
  7351  0B16  0871               	movf	Sensor_isActive@sensor,w
  7352  0B17  1D03               	btfss	3,2
  7353  0B18  2B1B               	goto	l3144
  7354                           
  7355                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 893:         return 0;
  7356  0B19  3000               	movlw	0
  7357  0B1A  0008               	return
  7358  0B1B                     l3144:	
  7359                           
  7360                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 895:     return (_Bool)sensor->active;
  7361  0B1B  0871               	movf	Sensor_isActive@sensor,w
  7362  0B1C  3E08               	addlw	8
  7363  0B1D  0086               	movwf	6
  7364  0B1E  0187               	clrf	7
  7365  0B1F  0C01               	rrf	1,w
  7366  0B20  3901               	andlw	1
  7367  0B21  0008               	return
  7368  0B22                     __end_of_Sensor_isActive:	
  7369                           
  7370                           	psect	text42
  7371  05B3                     __ptext42:	
  7372 ;; *************** function _Sensor_autoCalibration *****************
  7373 ;; Defined at:
  7374 ;;		line 696 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;  sensor          1    wreg     PTR struct .
  7377 ;;		 -> mtouch_sensor(36), 
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;  sensor          1   10[COMMON] PTR struct .
  7380 ;;		 -> mtouch_sensor(36), 
  7381 ;;  adcIndex        1    9[COMMON] unsigned char 
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  1    wreg      void 
  7384 ;; Registers used:
  7385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7391 ;;      Params:         0       0       0       0       0       0       0       0
  7392 ;;      Locals:         2       0       0       0       0       0       0       0
  7393 ;;      Temps:          4       0       0       0       0       0       0       0
  7394 ;;      Totals:         6       0       0       0       0       0       0       0
  7395 ;;Total ram usage:        6 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:    5
  7398 ;; This function calls:
  7399 ;;		_Sensor_getScanGroupIndex
  7400 ;;		_Sensor_isCalibratingAcqTime
  7401 ;;		_Sensor_setCalibratAcqTime
  7402 ;;		_Sensor_setCalibrated
  7403 ;;		_abs
  7404 ;; This function is called by:
  7405 ;;		_Sensor_Acq_ExecutePacket
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409                           
  7410                           ;psect for function _Sensor_autoCalibration
  7411  05B3                     _Sensor_autoCalibration:	
  7412                           
  7413                           ;incstack = 0
  7414                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7415                           ;Sensor_autoCalibration@sensor stored from wreg
  7416  05B3  00FA               	movwf	Sensor_autoCalibration@sensor
  7417                           
  7418                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 696: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 697: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 698:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  7419  05B4  087A               	movf	Sensor_autoCalibration@sensor,w
  7420  05B5  318D  25D2  3185   	fcall	_Sensor_getScanGroupIndex
  7421  05B8  00F5               	movwf	??_Sensor_autoCalibration
  7422  05B9  0875               	movf	??_Sensor_autoCalibration,w
  7423  05BA  00F9               	movwf	Sensor_autoCalibration@adcIndex
  7424                           
  7425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  7426  05BB  087A               	movf	Sensor_autoCalibration@sensor,w
  7427  05BC  318A  22D7  3185   	fcall	_Sensor_isCalibratingAcqTime
  7428  05BF  3A00               	xorlw	0
  7429  05C0  1D03               	skipz
  7430  05C1  2DF2               	goto	l3190
  7431                           
  7432                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 702:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  7433  05C2  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  7434  05C3  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  7435  05C4  0086               	movwf	6
  7436  05C5  0187               	clrf	7
  7437  05C6  3F40               	moviw [0]fsr1
  7438  05C7  00F5               	movwf	??_Sensor_autoCalibration
  7439  05C8  3F41               	moviw [1]fsr1
  7440  05C9  00F6               	movwf	??_Sensor_autoCalibration+1
  7441  05CA  087A               	movf	Sensor_autoCalibration@sensor,w
  7442  05CB  3E04               	addlw	4
  7443  05CC  0086               	movwf	6
  7444  05CD  0187               	clrf	7
  7445  05CE  0801               	movf	1,w
  7446  05CF  00F7               	movwf	??_Sensor_autoCalibration+2
  7447  05D0  01F8               	clrf	??_Sensor_autoCalibration+3
  7448  05D1  3009               	movlw	9
  7449  05D2                     u1795:	
  7450  05D2  35F7               	lslf	??_Sensor_autoCalibration+2,f
  7451  05D3  0DF8               	rlf	??_Sensor_autoCalibration+3,f
  7452  05D4  0B89               	decfsz	9,f
  7453  05D5  2DD2               	goto	u1795
  7454  05D6  0876               	movf	??_Sensor_autoCalibration+1,w
  7455  05D7  0278               	subwf	??_Sensor_autoCalibration+3,w
  7456  05D8  1D03               	skipz
  7457  05D9  2DDC               	goto	u1805
  7458  05DA  0875               	movf	??_Sensor_autoCalibration,w
  7459  05DB  0277               	subwf	??_Sensor_autoCalibration+2,w
  7460  05DC                     u1805:	
  7461  05DC  1803               	skipnc
  7462  05DD  2DEE               	goto	l3188
  7463                           
  7464                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 703:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 704:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  7465  05DE  3001               	movlw	1
  7466  05DF  00F5               	movwf	??_Sensor_autoCalibration
  7467  05E0  087A               	movf	Sensor_autoCalibration@sensor,w
  7468  05E1  3E05               	addlw	5
  7469  05E2  0086               	movwf	6
  7470  05E3  0187               	clrf	7
  7471  05E4  0875               	movf	??_Sensor_autoCalibration,w
  7472  05E5  0781               	addwf	1,f
  7473  05E6  300F               	movlw	15
  7474  05E7  0201               	subwf	1,w
  7475  05E8  1C03               	skipc
  7476  05E9  0008               	return
  7477                           
  7478                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  7479  05EA  087A               	movf	Sensor_autoCalibration@sensor,w
  7480  05EB  318B  2308         	fcall	_Sensor_setCalibratAcqTime
  7481  05ED  0008               	return
  7482  05EE                     l3188:	
  7483                           
  7484                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 708:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 709:              Sensor_setCalibratAcqTime(sensor);
  7485  05EE  087A               	movf	Sensor_autoCalibration@sensor,w
  7486  05EF  318B  2308         	fcall	_Sensor_setCalibratAcqTime
  7487  05F1  0008               	return
  7488  05F2                     l3190:	
  7489                           
  7490                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 713:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 714:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  7491  05F2  087A               	movf	Sensor_autoCalibration@sensor,w
  7492  05F3  3E04               	addlw	4
  7493  05F4  0086               	movwf	6
  7494  05F5  0187               	clrf	7
  7495  05F6  0801               	movf	1,w
  7496  05F7  00F5               	movwf	??_Sensor_autoCalibration
  7497  05F8  01F6               	clrf	??_Sensor_autoCalibration+1
  7498  05F9  35F5               	lslf	??_Sensor_autoCalibration,f
  7499  05FA  0DF6               	rlf	??_Sensor_autoCalibration+1,f
  7500  05FB  087A               	movf	Sensor_autoCalibration@sensor,w
  7501  05FC  3E06               	addlw	6
  7502  05FD  0086               	movwf	6
  7503  05FE  0187               	clrf	7
  7504  05FF  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  7505  0600  3E51               	addlw	(low (_packet_sample| 0))& (0+255)
  7506  0601  0084               	movwf	4
  7507  0602  0185               	clrf	5
  7508  0603  3F40               	moviw [0]fsr1
  7509  0604  0200               	subwf	0,w
  7510  0605  00F1               	movwf	abs@a
  7511  0606  3101               	addfsr 0,1
  7512  0607  3F41               	moviw [1]fsr1
  7513  0608  3B00               	subwfb	0,w
  7514  0609  00F2               	movwf	abs@a+1
  7515  060A  318C  2478  3185   	fcall	_abs
  7516  060D  0876               	movf	??_Sensor_autoCalibration+1,w
  7517  060E  0272               	subwf	?_abs+1,w
  7518  060F  1D03               	skipz
  7519  0610  2E13               	goto	u1825
  7520  0611  0875               	movf	??_Sensor_autoCalibration,w
  7521  0612  0271               	subwf	?_abs,w
  7522  0613                     u1825:	
  7523  0613  1803               	skipnc
  7524  0614  2E21               	goto	l3196
  7525                           
  7526                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 715:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  7527  0615  3020               	movlw	32
  7528  0616  00F5               	movwf	??_Sensor_autoCalibration
  7529  0617  087A               	movf	Sensor_autoCalibration@sensor,w
  7530  0618  3E02               	addlw	2
  7531  0619  0086               	movwf	6
  7532  061A  0187               	clrf	7
  7533  061B  0875               	movf	??_Sensor_autoCalibration,w
  7534  061C  0081               	movwf	1
  7535                           
  7536                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             Sensor_setCalibrated(senso
      +                          r);
  7537  061D  087A               	movf	Sensor_autoCalibration@sensor,w
  7538  061E  318A  22F0         	fcall	_Sensor_setCalibrated
  7539                           
  7540                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:         }
  7541  0620  0008               	return
  7542  0621                     l3196:	
  7543                           
  7544                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 724:             sensor->acquisition_time += (uint8_t)2;
  7545  0621  3002               	movlw	2
  7546  0622  00F5               	movwf	??_Sensor_autoCalibration
  7547  0623  087A               	movf	Sensor_autoCalibration@sensor,w
  7548  0624  3E03               	addlw	3
  7549  0625  0086               	movwf	6
  7550  0626  0187               	clrf	7
  7551  0627  0875               	movf	??_Sensor_autoCalibration,w
  7552  0628  0781               	addwf	1,f
  7553                           
  7554                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 725:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  7555  0629  087A               	movf	Sensor_autoCalibration@sensor,w
  7556  062A  3E03               	addlw	3
  7557  062B  0086               	movwf	6
  7558  062C  0187               	clrf	7
  7559  062D  3020               	movlw	32
  7560  062E  0201               	subwf	1,w
  7561  062F  1C03               	skipc
  7562  0630  0008               	return
  7563                           
  7564                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 726:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 727:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  7565  0631  3020               	movlw	32
  7566  0632  00F5               	movwf	??_Sensor_autoCalibration
  7567  0633  087A               	movf	Sensor_autoCalibration@sensor,w
  7568  0634  3E02               	addlw	2
  7569  0635  0086               	movwf	6
  7570  0636  0187               	clrf	7
  7571  0637  0875               	movf	??_Sensor_autoCalibration,w
  7572  0638  0081               	movwf	1
  7573                           
  7574                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:                 Sensor_setCalibrated(s
      +                          ensor);
  7575  0639  087A               	movf	Sensor_autoCalibration@sensor,w
  7576  063A  318A  22F0         	fcall	_Sensor_setCalibrated
  7577  063C  0008               	return
  7578  063D                     __end_of_Sensor_autoCalibration:	
  7579                           
  7580                           	psect	text43
  7581  0C78                     __ptext43:	
  7582 ;; *************** function _abs *****************
  7583 ;; Defined at:
  7584 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  7585 ;; Parameters:    Size  Location     Type
  7586 ;;  a               2    1[COMMON] int 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;		None
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  2    1[COMMON] int 
  7591 ;; Registers used:
  7592 ;;		wreg, status,2, status,0
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7598 ;;      Params:         2       0       0       0       0       0       0       0
  7599 ;;      Locals:         0       0       0       0       0       0       0       0
  7600 ;;      Temps:          2       0       0       0       0       0       0       0
  7601 ;;      Totals:         4       0       0       0       0       0       0       0
  7602 ;;Total ram usage:        4 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    4
  7605 ;; This function calls:
  7606 ;;		Nothing
  7607 ;; This function is called by:
  7608 ;;		_Sensor_postAcquisitionProcess
  7609 ;;		_Sensor_Acq_ExecutePacket
  7610 ;;		_Sensor_autoCalibration
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614                           
  7615                           ;psect for function _abs
  7616  0C78                     _abs:	
  7617                           
  7618                           ;incstack = 0
  7619                           ; Regs used in _abs: [wreg+status,2+status,0]
  7620  0C78  0872               	movf	abs@a+1,w
  7621  0C79  3A80               	xorlw	128
  7622  0C7A  00F3               	movwf	??_abs
  7623  0C7B  3080               	movlw	128
  7624  0C7C  0273               	subwf	??_abs,w
  7625  0C7D  1D03               	skipz
  7626  0C7E  2C81               	goto	u1665
  7627  0C7F  3001               	movlw	1
  7628  0C80  0271               	subwf	abs@a,w
  7629  0C81                     u1665:	
  7630  0C81  1803               	skipnc
  7631  0C82  0008               	return
  7632  0C83  0971               	comf	abs@a,w
  7633  0C84  00F3               	movwf	??_abs
  7634  0C85  0972               	comf	abs@a+1,w
  7635  0C86  00F4               	movwf	??_abs+1
  7636  0C87  0AF3               	incf	??_abs,f
  7637  0C88  1903               	skipnz
  7638  0C89  0AF4               	incf	??_abs+1,f
  7639  0C8A  0873               	movf	??_abs,w
  7640  0C8B  00F1               	movwf	?_abs
  7641  0C8C  0874               	movf	??_abs+1,w
  7642  0C8D  00F2               	movwf	?_abs+1
  7643  0C8E  0008               	return
  7644  0C8F                     __end_of_abs:	
  7645                           
  7646                           	psect	text44
  7647  0AF0                     __ptext44:	
  7648 ;; *************** function _Sensor_setCalibrated *****************
  7649 ;; Defined at:
  7650 ;;		line 933 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;  sensor          1    wreg     PTR struct .
  7653 ;;		 -> mtouch_sensor(36), 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  sensor          1    1[COMMON] PTR struct .
  7656 ;;		 -> mtouch_sensor(36), 
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7666 ;;      Params:         0       0       0       0       0       0       0       0
  7667 ;;      Locals:         1       0       0       0       0       0       0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0       0
  7669 ;;      Totals:         1       0       0       0       0       0       0       0
  7670 ;;Total ram usage:        1 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    4
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_Sensor_autoCalibration
  7677 ;; This function uses a non-reentrant model
  7678 ;;
  7679                           
  7680                           
  7681                           ;psect for function _Sensor_setCalibrated
  7682  0AF0                     _Sensor_setCalibrated:	
  7683                           
  7684                           ;incstack = 0
  7685                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  7686                           ;Sensor_setCalibrated@sensor stored from wreg
  7687  0AF0  00F1               	movwf	Sensor_setCalibrated@sensor
  7688                           
  7689                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 933: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          934: {;mcc_generated_files/mtouch/mtouch_sensor.c: 935:     sensor->calibrated = 1;
  7690  0AF1  0871               	movf	Sensor_setCalibrated@sensor,w
  7691  0AF2  3E08               	addlw	8
  7692  0AF3  0086               	movwf	6
  7693  0AF4  0187               	clrf	7
  7694  0AF5  1501               	bsf	1,2
  7695                           
  7696                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 936:     sensor->acqTime_cal = 0;
  7697  0AF6  0871               	movf	Sensor_setCalibrated@sensor,w
  7698  0AF7  3E08               	addlw	8
  7699  0AF8  0086               	movwf	6
  7700  0AF9  0187               	clrf	7
  7701  0AFA  1201               	bcf	1,4
  7702  0AFB  0008               	return
  7703  0AFC                     __end_of_Sensor_setCalibrated:	
  7704                           
  7705                           	psect	text45
  7706  0B08                     __ptext45:	
  7707 ;; *************** function _Sensor_setCalibratAcqTime *****************
  7708 ;; Defined at:
  7709 ;;		line 939 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7710 ;; Parameters:    Size  Location     Type
  7711 ;;  sensor          1    wreg     PTR struct .
  7712 ;;		 -> mtouch_sensor(36), 
  7713 ;; Auto vars:     Size  Location     Type
  7714 ;;  sensor          1    1[COMMON] PTR struct .
  7715 ;;		 -> mtouch_sensor(36), 
  7716 ;; Return value:  Size  Location     Type
  7717 ;;                  1    wreg      void 
  7718 ;; Registers used:
  7719 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7720 ;; Tracked objects:
  7721 ;;		On entry : 0/0
  7722 ;;		On exit  : 0/0
  7723 ;;		Unchanged: 0/0
  7724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7725 ;;      Params:         0       0       0       0       0       0       0       0
  7726 ;;      Locals:         1       0       0       0       0       0       0       0
  7727 ;;      Temps:          0       0       0       0       0       0       0       0
  7728 ;;      Totals:         1       0       0       0       0       0       0       0
  7729 ;;Total ram usage:        1 bytes
  7730 ;; Hardware stack levels used:    1
  7731 ;; Hardware stack levels required when called:    4
  7732 ;; This function calls:
  7733 ;;		Nothing
  7734 ;; This function is called by:
  7735 ;;		_Sensor_autoCalibration
  7736 ;; This function uses a non-reentrant model
  7737 ;;
  7738                           
  7739                           
  7740                           ;psect for function _Sensor_setCalibratAcqTime
  7741  0B08                     _Sensor_setCalibratAcqTime:	
  7742                           
  7743                           ;incstack = 0
  7744                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  7745                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  7746  0B08  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
  7747                           
  7748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 939: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 940: {;mcc_generated_files/mtouch/mtouch_sensor.c: 941:     sensor->acqTime_cal = 1
      +                          ;
  7749  0B09  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  7750  0B0A  3E08               	addlw	8
  7751  0B0B  0086               	movwf	6
  7752  0B0C  0187               	clrf	7
  7753  0B0D  1601               	bsf	1,4
  7754                           
  7755                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 942:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  7756  0B0E  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  7757  0B0F  3E03               	addlw	3
  7758  0B10  0086               	movwf	6
  7759  0B11  0187               	clrf	7
  7760  0B12  0181               	clrf	1
  7761  0B13  0A81               	incf	1,f
  7762  0B14  0008               	return
  7763  0B15                     __end_of_Sensor_setCalibratAcqTime:	
  7764                           
  7765                           	psect	text46
  7766  0AD7                     __ptext46:	
  7767 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  7768 ;; Defined at:
  7769 ;;		line 945 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  sensor          1    wreg     PTR struct .
  7772 ;;		 -> mtouch_sensor(36), 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  sensor          1    1[COMMON] PTR struct .
  7775 ;;		 -> mtouch_sensor(36), 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1    wreg      _Bool 
  7778 ;; Registers used:
  7779 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7785 ;;      Params:         0       0       0       0       0       0       0       0
  7786 ;;      Locals:         1       0       0       0       0       0       0       0
  7787 ;;      Temps:          0       0       0       0       0       0       0       0
  7788 ;;      Totals:         1       0       0       0       0       0       0       0
  7789 ;;Total ram usage:        1 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    4
  7792 ;; This function calls:
  7793 ;;		Nothing
  7794 ;; This function is called by:
  7795 ;;		_Sensor_loadADCSettings
  7796 ;;		_Sensor_autoCalibration
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           
  7801                           ;psect for function _Sensor_isCalibratingAcqTime
  7802  0AD7                     _Sensor_isCalibratingAcqTime:	
  7803                           
  7804                           ;incstack = 0
  7805                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  7806                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  7807  0AD7  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
  7808                           
  7809                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 945: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 946: {;mcc_generated_files/mtouch/mtouch_sensor.c: 947:     return (_Bool)sensor
      +                          ->acqTime_cal;
  7810  0AD8  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
  7811  0AD9  3E08               	addlw	8
  7812  0ADA  0086               	movwf	6
  7813  0ADB  0187               	clrf	7
  7814  0ADC  0E01               	swapf	1,w
  7815  0ADD  3901               	andlw	1
  7816  0ADE  0008               	return
  7817  0ADF                     __end_of_Sensor_isCalibratingAcqTime:	
  7818                           
  7819                           	psect	text47
  7820  0DD2                     __ptext47:	
  7821 ;; *************** function _Sensor_getScanGroupIndex *****************
  7822 ;; Defined at:
  7823 ;;		line 362 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  sensor          1    wreg     PTR struct .
  7826 ;;		 -> mtouch_sensor(36), 
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;  sensor          1    3[COMMON] PTR struct .
  7829 ;;		 -> mtouch_sensor(36), 
  7830 ;;  sensorGroup     1    4[COMMON] unsigned char 
  7831 ;; Return value:  Size  Location     Type
  7832 ;;                  1    wreg      unsigned char 
  7833 ;; Registers used:
  7834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7840 ;;      Params:         0       0       0       0       0       0       0       0
  7841 ;;      Locals:         2       0       0       0       0       0       0       0
  7842 ;;      Temps:          2       0       0       0       0       0       0       0
  7843 ;;      Totals:         4       0       0       0       0       0       0       0
  7844 ;;Total ram usage:        4 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; Hardware stack levels required when called:    4
  7847 ;; This function calls:
  7848 ;;		Nothing
  7849 ;; This function is called by:
  7850 ;;		_Sensor_postAcquisitionProcess
  7851 ;;		_Sensor_autoCalibration
  7852 ;;		_Sensor_RawSample_Update
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           
  7857                           ;psect for function _Sensor_getScanGroupIndex
  7858  0DD2                     _Sensor_getScanGroupIndex:	
  7859                           
  7860                           ;incstack = 0
  7861                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  7862                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  7863  0DD2  00F3               	movwf	Sensor_getScanGroupIndex@sensor
  7864                           
  7865                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 363: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 364:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 365:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  7866  0DD3  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
  7867  0DD4                     l3060:	
  7868                           
  7869                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 366:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 367:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  7870  0DD4  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  7871  0DD5  00F1               	movwf	??_Sensor_getScanGroupIndex
  7872  0DD6  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  7873  0DD7  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  7874  0DD8  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  7875  0DD9  3045               	movlw	low (_sensor_scan_group| (0+32768))
  7876  0DDA  0771               	addwf	??_Sensor_getScanGroupIndex,w
  7877  0DDB  0084               	movwf	4
  7878  0DDC  3090               	movlw	high (_sensor_scan_group| (0+32768))
  7879  0DDD  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  7880  0DDE  0085               	movwf	5
  7881  0DDF  0800               	movf	0,w	;code access
  7882  0DE0  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  7883  0DE1  1D03               	skipz
  7884  0DE2  2DE5               	goto	l3066
  7885  0DE3                     l3062:	
  7886                           
  7887                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 368:             return 0;
  7888  0DE3  3000               	movlw	0
  7889  0DE4  0008               	return
  7890  0DE5                     l3066:	
  7891                           
  7892                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 369:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  7893  0DE5  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  7894  0DE6  00F1               	movwf	??_Sensor_getScanGroupIndex
  7895  0DE7  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  7896  0DE8  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  7897  0DE9  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  7898  0DEA  3046               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7899  0DEB  0771               	addwf	??_Sensor_getScanGroupIndex,w
  7900  0DEC  0084               	movwf	4
  7901  0DED  3090               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7902  0DEE  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  7903  0DEF  0085               	movwf	5
  7904  0DF0  0800               	movf	0,w	;code access
  7905  0DF1  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  7906  0DF2  1D03               	skipz
  7907  0DF3  2DF6               	goto	l3072
  7908                           
  7909                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 370:             return 1;
  7910  0DF4  3001               	movlw	1
  7911  0DF5  0008               	return
  7912  0DF6                     l3072:	
  7913                           
  7914                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 371:     }
  7915  0DF6  3001               	movlw	1
  7916  0DF7  00F1               	movwf	??_Sensor_getScanGroupIndex
  7917  0DF8  0871               	movf	??_Sensor_getScanGroupIndex,w
  7918  0DF9  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  7919  0DFA  3002               	movlw	2
  7920  0DFB  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  7921  0DFC  1803               	btfsc	3,0
  7922  0DFD  2DE3               	goto	l3062
  7923  0DFE  2DD4               	goto	l3060
  7924  0DFF                     __end_of_Sensor_getScanGroupIndex:	
  7925                           
  7926                           	psect	text48
  7927  0B69                     __ptext48:	
  7928 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  7929 ;; Defined at:
  7930 ;;		line 247 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;		None
  7933 ;; Auto vars:     Size  Location     Type
  7934 ;;		None
  7935 ;; Return value:  Size  Location     Type
  7936 ;;                  1    wreg      void 
  7937 ;; Registers used:
  7938 ;;		wreg, status,2, status,0
  7939 ;; Tracked objects:
  7940 ;;		On entry : 0/0
  7941 ;;		On exit  : 0/0
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7944 ;;      Params:         0       0       0       0       0       0       0       0
  7945 ;;      Locals:         0       0       0       0       0       0       0       0
  7946 ;;      Temps:          0       0       0       0       0       0       0       0
  7947 ;;      Totals:         0       0       0       0       0       0       0       0
  7948 ;;Total ram usage:        0 bytes
  7949 ;; Hardware stack levels used:    1
  7950 ;; Hardware stack levels required when called:    4
  7951 ;; This function calls:
  7952 ;;		Nothing
  7953 ;; This function is called by:
  7954 ;;		_MTOUCH_Initialize
  7955 ;;		_Sensor_Acq_ExecutePacket
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  7961  0B69                     _MTOUCH_Sensor_Scan_Initialize:	
  7962                           
  7963                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 249:     T2CONbits.T2CKPS = 0x0;
  7964                           
  7965                           ;incstack = 0
  7966                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  7967  0B69  30FC               	movlw	-4
  7968  0B6A  0020               	movlb	0	; select bank0
  7969  0B6B  059C               	andwf	28,f	;volatile
  7970                           
  7971                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 251:     AD1CON0 = (uint8_t)0;
  7972  0B6C  002E               	movlb	14	; select bank14
  7973  0B6D  0191               	clrf	17	;volatile
  7974                           
  7975                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 252:     AD2CON0 = (uint8_t)0;
  7976  0B6E  002F               	movlb	15	; select bank15
  7977  0B6F  0191               	clrf	17	;volatile
  7978                           
  7979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 253:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  7980  0B70  3090               	movlw	144
  7981  0B71  002E               	movlb	14	; select bank14
  7982  0B72  0092               	movwf	18	;volatile
  7983                           
  7984                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 254:     AD1CON3 = (uint8_t)0b01000000;
  7985  0B73  3040               	movlw	64
  7986  0B74  0094               	movwf	20	;volatile
  7987                           
  7988                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 255:     AD2CON3 = (uint8_t)0b01000000;
  7989  0B75  3040               	movlw	64
  7990  0B76  002F               	movlb	15	; select bank15
  7991  0B77  0094               	movwf	20	;volatile
  7992  0B78  0008               	return
  7993  0B79                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  7994                           
  7995                           	psect	text49
  7996  0B59                     __ptext49:	
  7997 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  7998 ;; Defined at:
  7999 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8000 ;; Parameters:    Size  Location     Type
  8001 ;;		None
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;  button          1   14[BANK0 ] enum E3070
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  1    wreg      void 
  8006 ;; Registers used:
  8007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8013 ;;      Params:         0       0       0       0       0       0       0       0
  8014 ;;      Locals:         0       1       0       0       0       0       0       0
  8015 ;;      Temps:          0       1       0       0       0       0       0       0
  8016 ;;      Totals:         0       2       0       0       0       0       0       0
  8017 ;;Total ram usage:        2 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    9
  8020 ;; This function calls:
  8021 ;;		_Button_Service
  8022 ;; This function is called by:
  8023 ;;		_MTOUCH_Service_Mainloop
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           
  8028                           ;psect for function _MTOUCH_Button_ServiceAll
  8029  0B59                     _MTOUCH_Button_ServiceAll:	
  8030                           
  8031                           ;mcc_generated_files/mtouch/mtouch_button.c: 199:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 202:     for (button = 0; button < 4u; button
      +                          ++)
  8032                           
  8033                           ;incstack = 0
  8034                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8035  0B59  0020               	movlb	0	; select bank0
  8036  0B5A  01AE               	clrf	MTOUCH_Button_ServiceAll@button
  8037  0B5B                     l4788:	
  8038                           
  8039                           ;mcc_generated_files/mtouch/mtouch_button.c: 203:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 204:         Button_Service(button);
  8040  0B5B  082E               	movf	MTOUCH_Button_ServiceAll@button,w
  8041  0B5C  318F  2749  318B   	fcall	_Button_Service
  8042                           
  8043                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     }
  8044  0B5F  3001               	movlw	1
  8045  0B60  0020               	movlb	0	; select bank0
  8046  0B61  00AD               	movwf	??_MTOUCH_Button_ServiceAll
  8047  0B62  082D               	movf	??_MTOUCH_Button_ServiceAll,w
  8048  0B63  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
  8049  0B64  3004               	movlw	4
  8050  0B65  022E               	subwf	MTOUCH_Button_ServiceAll@button,w
  8051  0B66  1803               	btfsc	3,0
  8052  0B67  0008               	return
  8053  0B68  2B5B               	goto	l4788
  8054  0B69                     __end_of_MTOUCH_Button_ServiceAll:	
  8055                           
  8056                           	psect	text50
  8057  0F49                     __ptext50:	
  8058 ;; *************** function _Button_Service *****************
  8059 ;; Defined at:
  8060 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  name            1    wreg     enum E3070
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  name            1   11[BANK0 ] enum E3070
  8065 ;;  button          1   12[BANK0 ] PTR struct .
  8066 ;;		 -> mtouch_button(64), 
  8067 ;; Return value:  Size  Location     Type
  8068 ;;                  1    wreg      void 
  8069 ;; Registers used:
  8070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8071 ;; Tracked objects:
  8072 ;;		On entry : 0/0
  8073 ;;		On exit  : 0/0
  8074 ;;		Unchanged: 0/0
  8075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8076 ;;      Params:         0       0       0       0       0       0       0       0
  8077 ;;      Locals:         0       2       0       0       0       0       0       0
  8078 ;;      Temps:          0       2       0       0       0       0       0       0
  8079 ;;      Totals:         0       4       0       0       0       0       0       0
  8080 ;;Total ram usage:        4 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; Hardware stack levels required when called:    8
  8083 ;; This function calls:
  8084 ;;		_Button_Deviation_Update
  8085 ;;		_Button_Reading_Update
  8086 ;;		_Button_State_Initializing
  8087 ;;		_Button_State_NotPressed
  8088 ;;		_Button_State_Pressed
  8089 ;;		_MTOUCH_Button_Initialize
  8090 ;;		_MTOUCH_Sensor_isCalibrated
  8091 ;;		_MTOUCH_Sensor_wasSampled
  8092 ;; This function is called by:
  8093 ;;		_MTOUCH_Button_ServiceAll
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           
  8098                           ;psect for function _Button_Service
  8099  0F49                     _Button_Service:	
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8103                           ;Button_Service@name stored from wreg
  8104  0F49  0020               	movlb	0	; select bank0
  8105  0F4A  00AB               	movwf	Button_Service@name
  8106                           
  8107                           ;mcc_generated_files/mtouch/mtouch_button.c: 208: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 209: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 210:     mtouch_button_t* button = &mtouch_button[name];
  8108  0F4B  082B               	movf	Button_Service@name,w
  8109  0F4C  00A9               	movwf	??_Button_Service
  8110  0F4D  3003               	movlw	3
  8111  0F4E                     u3975:	
  8112  0F4E  35A9               	lslf	??_Button_Service,f
  8113  0F4F  3EFF               	addlw	-1
  8114  0F50  1D03               	skipz
  8115  0F51  2F4E               	goto	u3975
  8116  0F52  3529               	lslf	??_Button_Service,w
  8117  0F53  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  8118  0F54  00AA               	movwf	??_Button_Service+1
  8119  0F55  082A               	movf	??_Button_Service+1,w
  8120  0F56  00AC               	movwf	Button_Service@button
  8121                           
  8122                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  8123  0F57  0A2C               	incf	Button_Service@button,w
  8124  0F58  0086               	movwf	6
  8125  0F59  3001               	movlw	1	; select bank2/3
  8126  0F5A  0087               	movwf	7
  8127  0F5B  0801               	movf	1,w
  8128  0F5C  318B  233D  318F   	fcall	_MTOUCH_Sensor_wasSampled
  8129  0F5F  3A00               	xorlw	0
  8130  0F60  1903               	skipnz
  8131  0F61  0008               	return
  8132  0F62  0020               	movlb	0	; select bank0
  8133  0F63  0A2C               	incf	Button_Service@button,w
  8134  0F64  0086               	movwf	6
  8135  0F65  3001               	movlw	1	; select bank2/3
  8136  0F66  0087               	movwf	7
  8137  0F67  0801               	movf	1,w
  8138  0F68  318B  23F4  318F   	fcall	_MTOUCH_Sensor_isCalibrated
  8139  0F6B  3A00               	xorlw	0
  8140  0F6C  1903               	skipnz
  8141  0F6D  0008               	return
  8142                           
  8143                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 214:         Button_Reading_Update(button);
  8144  0F6E  0020               	movlb	0	; select bank0
  8145  0F6F  082C               	movf	Button_Service@button,w
  8146  0F70  318B  232F  318F   	fcall	_Button_Reading_Update
  8147                           
  8148                           ;mcc_generated_files/mtouch/mtouch_button.c: 215:         Button_Deviation_Update(button
      +                          );
  8149  0F73  0020               	movlb	0	; select bank0
  8150  0F74  082C               	movf	Button_Service@button,w
  8151  0F75  3186  263D  318F   	fcall	_Button_Deviation_Update
  8152                           
  8153                           ;mcc_generated_files/mtouch/mtouch_button.c: 217:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  8154  0F78  0020               	movlb	0	; select bank0
  8155  0F79  082C               	movf	Button_Service@button,w
  8156  0F7A  3E02               	addlw	2
  8157  0F7B  0086               	movwf	6
  8158  0F7C  3001               	movlw	1	; select bank2/3
  8159  0F7D  0087               	movwf	7
  8160  0F7E  3003               	movlw	3
  8161  0F7F  0201               	subwf	1,w
  8162  0F80  1C03               	skipc
  8163  0F81  2F8A               	goto	l4752
  8164                           
  8165                           ;mcc_generated_files/mtouch/mtouch_button.c: 218:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 219:             MTOUCH_Button_Initialize(button->name);
  8166  0F82  082C               	movf	Button_Service@button,w
  8167  0F83  0086               	movwf	6
  8168  0F84  3001               	movlw	1	; select bank2/3
  8169  0F85  0087               	movwf	7
  8170  0F86  0801               	movf	1,w
  8171  0F87  318E  268F  318F   	fcall	_MTOUCH_Button_Initialize
  8172  0F8A                     l4752:	
  8173                           
  8174                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  8175  0F8A  0020               	movlb	0	; select bank0
  8176  0F8B  082C               	movf	Button_Service@button,w
  8177  0F8C  00A9               	movwf	??_Button_Service
  8178  0F8D  0829               	movf	??_Button_Service,w
  8179  0F8E  00A4               	movwf	Button_State_Pressed@button
  8180  0F8F  082C               	movf	Button_Service@button,w
  8181  0F90  3E02               	addlw	2
  8182  0F91  0086               	movwf	6
  8183  0F92  3001               	movlw	1	; select bank2/3
  8184  0F93  0087               	movwf	7
  8185  0F94  3501               	lslf	1,w
  8186  0F95  3E5F               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  8187  0F96  0086               	movwf	6
  8188  0F97  0187               	clrf	7
  8189  0F98  3F41               	moviw [1]fsr1
  8190  0F99  008A               	movwf	10
  8191  0F9A  3F40               	moviw [0]fsr1
  8192  0F9B  000A               	callw
  8193  0F9C  318F               	pagesel	$
  8194  0F9D  0008               	return
  8195  0F9E                     __end_of_Button_Service:	
  8196                           
  8197                           	psect	text51
  8198  0B3D                     __ptext51:	
  8199 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  8200 ;; Defined at:
  8201 ;;		line 967 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  sensor          1    wreg     enum E2854
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;  sensor          1    6[COMMON] enum E2854
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      _Bool 
  8208 ;; Registers used:
  8209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8215 ;;      Params:         0       0       0       0       0       0       0       0
  8216 ;;      Locals:         1       0       0       0       0       0       0       0
  8217 ;;      Temps:          1       0       0       0       0       0       0       0
  8218 ;;      Totals:         2       0       0       0       0       0       0       0
  8219 ;;Total ram usage:        2 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    5
  8222 ;; This function calls:
  8223 ;;		___bmul
  8224 ;; This function is called by:
  8225 ;;		_Button_Service
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229                           
  8230                           ;psect for function _MTOUCH_Sensor_wasSampled
  8231  0B3D                     _MTOUCH_Sensor_wasSampled:	
  8232                           
  8233                           ;incstack = 0
  8234                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  8235                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  8236  0B3D  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
  8237                           
  8238                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 967: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 968: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 969:     return (_Bool)mtouch_sensor[sensor].sampled;
  8239  0B3E  3009               	movlw	9
  8240  0B3F  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
  8241  0B40  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
  8242  0B41  00F1               	movwf	___bmul@multiplicand
  8243  0B42  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  8244  0B43  318B  2389         	fcall	___bmul
  8245  0B45  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8246  0B46  0086               	movwf	6
  8247  0B47  0187               	clrf	7
  8248  0B48  0801               	movf	1,w
  8249  0B49  3901               	andlw	1
  8250  0B4A  0008               	return
  8251  0B4B                     __end_of_MTOUCH_Sensor_wasSampled:	
  8252                           
  8253                           	psect	text52
  8254  0BF4                     __ptext52:	
  8255 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  8256 ;; Defined at:
  8257 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8258 ;; Parameters:    Size  Location     Type
  8259 ;;  sensor          1    wreg     enum E2854
  8260 ;; Auto vars:     Size  Location     Type
  8261 ;;  sensor          1    6[COMMON] enum E2854
  8262 ;; Return value:  Size  Location     Type
  8263 ;;                  1    wreg      _Bool 
  8264 ;; Registers used:
  8265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8271 ;;      Params:         0       0       0       0       0       0       0       0
  8272 ;;      Locals:         1       0       0       0       0       0       0       0
  8273 ;;      Temps:          1       0       0       0       0       0       0       0
  8274 ;;      Totals:         2       0       0       0       0       0       0       0
  8275 ;;Total ram usage:        2 bytes
  8276 ;; Hardware stack levels used:    1
  8277 ;; Hardware stack levels required when called:    5
  8278 ;; This function calls:
  8279 ;;		___bmul
  8280 ;; This function is called by:
  8281 ;;		_Button_Service
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function _MTOUCH_Sensor_isCalibrated
  8287  0BF4                     _MTOUCH_Sensor_isCalibrated:	
  8288                           
  8289                           ;incstack = 0
  8290                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8291                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  8292  0BF4  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  8293                           
  8294                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 921: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 922:     if(sensor < 4u)
  8295  0BF5  3004               	movlw	4
  8296  0BF6  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  8297  0BF7  1803               	skipnc
  8298  0BF8  2C07               	goto	l4602
  8299                           
  8300                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 923:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  8301  0BF9  3009               	movlw	9
  8302  0BFA  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
  8303  0BFB  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
  8304  0BFC  00F1               	movwf	___bmul@multiplicand
  8305  0BFD  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  8306  0BFE  318B  2389         	fcall	___bmul
  8307  0C00  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8308  0C01  0086               	movwf	6
  8309  0C02  0187               	clrf	7
  8310  0C03  0C01               	rrf	1,w
  8311  0C04  0C89               	rrf	9,f
  8312  0C05  3901               	andlw	1
  8313  0C06  0008               	return
  8314  0C07                     l4602:	
  8315                           
  8316                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925:         return 0;
  8317  0C07  3000               	movlw	0
  8318  0C08  0008               	return
  8319  0C09                     __end_of_MTOUCH_Sensor_isCalibrated:	
  8320                           
  8321                           	psect	text53
  8322  02B4                     __ptext53:	
  8323 ;; *************** function _Button_State_NotPressed *****************
  8324 ;; Defined at:
  8325 ;;		line 245 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  button          1    4[BANK0 ] PTR struct .
  8328 ;;		 -> mtouch_button(64), 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;		None
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      void 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8340 ;;      Params:         0       1       0       0       0       0       0       0
  8341 ;;      Locals:         0       0       0       0       0       0       0       0
  8342 ;;      Temps:          0       2       0       0       0       0       0       0
  8343 ;;      Totals:         0       3       0       0       0       0       0       0
  8344 ;;Total ram usage:        3 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    7
  8347 ;; This function calls:
  8348 ;;		_Button_Baseline_Update
  8349 ;;		_Button_DefaultCallback
  8350 ;;		_MTOUCH_Button_Initialize
  8351 ;;		_myButtonPressedCallback
  8352 ;; This function is called by:
  8353 ;;		_Button_Service
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           
  8358                           ;psect for function _Button_State_NotPressed
  8359  02B4                     _Button_State_NotPressed:	
  8360                           
  8361                           ;mcc_generated_files/mtouch/mtouch_button.c: 245: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 246: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 248:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8365  02B4  0020               	movlb	0	; select bank0
  8366  02B5  0824               	movf	Button_State_NotPressed@button,w
  8367  02B6  3E09               	addlw	9
  8368  02B7  0086               	movwf	6
  8369  02B8  3001               	movlw	1	; select bank2/3
  8370  02B9  0087               	movwf	7
  8371  02BA  0801               	movf	1,w
  8372  02BB  3A80               	xorlw	128
  8373  02BC  00A5               	movwf	??_Button_State_NotPressed
  8374  02BD  0824               	movf	Button_State_NotPressed@button,w
  8375  02BE  3E0E               	addlw	14
  8376  02BF  0086               	movwf	6
  8377  02C0  3001               	movlw	1	; select bank2/3
  8378  02C1  0087               	movwf	7
  8379  02C2  0301               	decf	1,w
  8380  02C3  3AFF               	xorlw	255
  8381  02C4  3A80               	xorlw	128
  8382  02C5  02A5               	subwf	??_Button_State_NotPressed,f
  8383  02C6  1803               	skipnc
  8384  02C7  2AF3               	goto	l4652
  8385                           
  8386                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 250:         (button->counter)++;
  8387  02C8  0824               	movf	Button_State_NotPressed@button,w
  8388  02C9  3E0A               	addlw	10
  8389  02CA  0086               	movwf	6
  8390  02CB  3001               	movlw	1	; select bank2/3
  8391  02CC  0087               	movwf	7
  8392  02CD  3001               	movlw	1
  8393  02CE  0781               	addwf	1,f
  8394  02CF  3141               	addfsr 1,1
  8395  02D0  1803               	skipnc
  8396  02D1  0A81               	incf	1,f
  8397                           
  8398                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  8399  02D2  0824               	movf	Button_State_NotPressed@button,w
  8400  02D3  3E0A               	addlw	10
  8401  02D4  0086               	movwf	6
  8402  02D5  3001               	movlw	1	; select bank2/3
  8403  02D6  0087               	movwf	7
  8404  02D7  3F40               	moviw [0]fsr1
  8405  02D8  00A5               	movwf	??_Button_State_NotPressed
  8406  02D9  3F41               	moviw [1]fsr1
  8407  02DA  00A6               	movwf	??_Button_State_NotPressed+1
  8408  02DB  3000               	movlw	0
  8409  02DC  0226               	subwf	??_Button_State_NotPressed+1,w
  8410  02DD  3041               	movlw	65
  8411  02DE  1903               	skipnz
  8412  02DF  0225               	subwf	??_Button_State_NotPressed,w
  8413  02E0  1C03               	skipc
  8414  02E1  2B34               	goto	l954
  8415                           
  8416                           ;mcc_generated_files/mtouch/mtouch_button.c: 252:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 253:             button->counter = (mtouch_button_statecounter_t)0;
  8417  02E2  0824               	movf	Button_State_NotPressed@button,w
  8418  02E3  3E0A               	addlw	10
  8419  02E4  0086               	movwf	6
  8420  02E5  3001               	movlw	1	; select bank2/3
  8421  02E6  0087               	movwf	7
  8422  02E7  3000               	movlw	0
  8423  02E8  3FC0               	movwi [0]fsr1
  8424  02E9  3FC1               	movwi [1]fsr1
  8425                           
  8426                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  8427  02EA  0824               	movf	Button_State_NotPressed@button,w
  8428  02EB  0086               	movwf	6
  8429  02EC  3001               	movlw	1	; select bank2/3
  8430  02ED  0087               	movwf	7
  8431  02EE  0801               	movf	1,w
  8432  02EF  318E  268F  3182   	fcall	_MTOUCH_Button_Initialize
  8433  02F2  2B34               	goto	l954
  8434  02F3                     l4652:	
  8435  02F3  0824               	movf	Button_State_NotPressed@button,w
  8436  02F4  3E09               	addlw	9
  8437  02F5  0086               	movwf	6
  8438  02F6  3001               	movlw	1	; select bank2/3
  8439  02F7  0087               	movwf	7
  8440  02F8  0801               	movf	1,w
  8441  02F9  00A5               	movwf	??_Button_State_NotPressed
  8442  02FA  01A6               	clrf	??_Button_State_NotPressed+1
  8443  02FB  1BA5               	btfsc	??_Button_State_NotPressed,7
  8444  02FC  03A6               	decf	??_Button_State_NotPressed+1,f
  8445  02FD  0824               	movf	Button_State_NotPressed@button,w
  8446  02FE  3E0E               	addlw	14
  8447  02FF  0086               	movwf	6
  8448  0300  3001               	movlw	1	; select bank2/3
  8449  0301  0087               	movwf	7
  8450  0302  0826               	movf	??_Button_State_NotPressed+1,w
  8451  0303  3A80               	xorlw	128
  8452  0304  3C80               	sublw	128
  8453  0305  1D03               	skipz
  8454  0306  2B09               	goto	u3875
  8455  0307  0825               	movf	??_Button_State_NotPressed,w
  8456  0308  0201               	subwf	1,w
  8457  0309                     u3875:	
  8458  0309  1803               	skipnc
  8459  030A  2B2B               	goto	l4658
  8460                           
  8461                           ;mcc_generated_files/mtouch/mtouch_button.c: 259:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 261:         button->state = MTOUCH_BUTTON_STATE_pressed;
  8462  030B  3002               	movlw	2
  8463  030C  0020               	movlb	0	; select bank0
  8464  030D  00A5               	movwf	??_Button_State_NotPressed
  8465  030E  0824               	movf	Button_State_NotPressed@button,w
  8466  030F  3E02               	addlw	2
  8467  0310  0086               	movwf	6
  8468  0311  3001               	movlw	1	; select bank2/3
  8469  0312  0087               	movwf	7
  8470  0313  0825               	movf	??_Button_State_NotPressed,w
  8471  0314  0081               	movwf	1
  8472                           
  8473                           ;mcc_generated_files/mtouch/mtouch_button.c: 262:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8474  0315  0824               	movf	Button_State_NotPressed@button,w
  8475  0316  3E0A               	addlw	10
  8476  0317  0086               	movwf	6
  8477  0318  3001               	movlw	1	; select bank2/3
  8478  0319  0087               	movwf	7
  8479  031A  3000               	movlw	0
  8480  031B  3FC0               	movwi [0]fsr1
  8481  031C  3FC1               	movwi [1]fsr1
  8482                           
  8483                           ;mcc_generated_files/mtouch/mtouch_button.c: 263:         callback_pressed(button->name)
      +                          ;
  8484  031D  0824               	movf	Button_State_NotPressed@button,w
  8485  031E  0086               	movwf	6
  8486  031F  3001               	movlw	1	; select bank2/3
  8487  0320  0087               	movwf	7
  8488  0321  0801               	movf	1,w
  8489  0322  00A5               	movwf	??_Button_State_NotPressed
  8490  0323  0825               	movf	??_Button_State_NotPressed,w
  8491  0324  00F7               	movwf	Button_DefaultCallback@button
  8492  0325  0868               	movf	_callback_pressed+1,w
  8493  0326  008A               	movwf	10
  8494  0327  0867               	movf	_callback_pressed,w
  8495  0328  000A               	callw
  8496  0329  3182               	pagesel	$
  8497                           
  8498                           ;mcc_generated_files/mtouch/mtouch_button.c: 264:     }
  8499  032A  2B34               	goto	l954
  8500  032B                     l4658:	
  8501                           
  8502                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->counter = (mtouch_button_statecounter_t)0;
  8503  032B  0020               	movlb	0	; select bank0
  8504  032C  0824               	movf	Button_State_NotPressed@button,w
  8505  032D  3E0A               	addlw	10
  8506  032E  0086               	movwf	6
  8507  032F  3001               	movlw	1	; select bank2/3
  8508  0330  0087               	movwf	7
  8509  0331  3000               	movlw	0
  8510  0332  3FC0               	movwi [0]fsr1
  8511  0333  3FC1               	movwi [1]fsr1
  8512  0334                     l954:	
  8513                           
  8514                           ;mcc_generated_files/mtouch/mtouch_button.c: 273:     (button->baseline_count)++;
  8515  0334  0020               	movlb	0	; select bank0
  8516  0335  0824               	movf	Button_State_NotPressed@button,w
  8517  0336  3E0C               	addlw	12
  8518  0337  0086               	movwf	6
  8519  0338  3001               	movlw	1	; select bank2/3
  8520  0339  0087               	movwf	7
  8521  033A  3001               	movlw	1
  8522  033B  0781               	addwf	1,f
  8523  033C  3141               	addfsr 1,1
  8524  033D  1803               	skipnc
  8525  033E  0A81               	incf	1,f
  8526                           
  8527                           ;mcc_generated_files/mtouch/mtouch_button.c: 274:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
  8528  033F  0824               	movf	Button_State_NotPressed@button,w
  8529  0340  3E0C               	addlw	12
  8530  0341  0086               	movwf	6
  8531  0342  3001               	movlw	1	; select bank2/3
  8532  0343  0087               	movwf	7
  8533  0344  0016               	moviw fsr1++
  8534  0345  3A40               	xorlw	64
  8535  0346  00A5               	movwf	??_Button_State_NotPressed
  8536  0347  0016               	moviw fsr1++
  8537  0348  04A5               	iorwf	??_Button_State_NotPressed,f
  8538  0349  1D03               	btfss	3,2
  8539  034A  0008               	return
  8540                           
  8541                           ;mcc_generated_files/mtouch/mtouch_button.c: 275:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 276:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  8542  034B  0824               	movf	Button_State_NotPressed@button,w
  8543  034C  3E0C               	addlw	12
  8544  034D  0086               	movwf	6
  8545  034E  3001               	movlw	1	; select bank2/3
  8546  034F  0087               	movwf	7
  8547  0350  3000               	movlw	0
  8548  0351  3FC0               	movwi [0]fsr1
  8549  0352  3FC1               	movwi [1]fsr1
  8550                           
  8551                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:         Button_Baseline_Update(button)
      +                          ;
  8552  0353  0824               	movf	Button_State_NotPressed@button,w
  8553  0354  3185  2524         	fcall	_Button_Baseline_Update
  8554  0356  0008               	return
  8555  0357                     __end_of_Button_State_NotPressed:	
  8556                           
  8557                           	psect	text54
  8558  0F9E                     __ptext54:	
  8559 ;; *************** function _Button_State_Initializing *****************
  8560 ;; Defined at:
  8561 ;;		line 225 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;  button          1    4[BANK0 ] PTR struct .
  8564 ;;		 -> mtouch_button(64), 
  8565 ;; Auto vars:     Size  Location     Type
  8566 ;;		None
  8567 ;; Return value:  Size  Location     Type
  8568 ;;                  1    wreg      void 
  8569 ;; Registers used:
  8570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8571 ;; Tracked objects:
  8572 ;;		On entry : 0/0
  8573 ;;		On exit  : 0/0
  8574 ;;		Unchanged: 0/0
  8575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8576 ;;      Params:         0       1       0       0       0       0       0       0
  8577 ;;      Locals:         0       0       0       0       0       0       0       0
  8578 ;;      Temps:          0       4       0       0       0       0       0       0
  8579 ;;      Totals:         0       5       0       0       0       0       0       0
  8580 ;;Total ram usage:        5 bytes
  8581 ;; Hardware stack levels used:    1
  8582 ;; Hardware stack levels required when called:    7
  8583 ;; This function calls:
  8584 ;;		_Button_Baseline_Initialize
  8585 ;;		_Button_Baseline_Update
  8586 ;; This function is called by:
  8587 ;;		_Button_Service
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           
  8592                           ;psect for function _Button_State_Initializing
  8593  0F9E                     _Button_State_Initializing:	
  8594                           
  8595                           ;mcc_generated_files/mtouch/mtouch_button.c: 225: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 226: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 228:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  8596                           
  8597                           ;incstack = 0
  8598                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8599  0F9E  0020               	movlb	0	; select bank0
  8600  0F9F  0824               	movf	Button_State_Initializing@button,w
  8601  0FA0  3E0A               	addlw	10
  8602  0FA1  0086               	movwf	6
  8603  0FA2  3001               	movlw	1	; select bank2/3
  8604  0FA3  0087               	movwf	7
  8605  0FA4  3F40               	moviw [0]fsr1
  8606  0FA5  00A5               	movwf	??_Button_State_Initializing
  8607  0FA6  3F41               	moviw [1]fsr1
  8608  0FA7  00A6               	movwf	??_Button_State_Initializing+1
  8609  0FA8  3000               	movlw	0
  8610  0FA9  0226               	subwf	??_Button_State_Initializing+1,w
  8611  0FAA  3009               	movlw	9
  8612  0FAB  1903               	skipnz
  8613  0FAC  0225               	subwf	??_Button_State_Initializing,w
  8614  0FAD  1803               	skipnc
  8615  0FAE  2FB4               	goto	l4636
  8616                           
  8617                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 230:         Button_Baseline_Initialize(button);
  8618  0FAF  0824               	movf	Button_State_Initializing@button,w
  8619  0FB0  318D  25FF  318F   	fcall	_Button_Baseline_Initialize
  8620                           
  8621                           ;mcc_generated_files/mtouch/mtouch_button.c: 231:     } else {
  8622  0FB3  2FB8               	goto	l4638
  8623  0FB4                     l4636:	
  8624                           
  8625                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         Button_Baseline_Update(button)
      +                          ;
  8626  0FB4  0824               	movf	Button_State_Initializing@button,w
  8627  0FB5  3185  2524  318F   	fcall	_Button_Baseline_Update
  8628  0FB8                     l4638:	
  8629                           
  8630                           ;mcc_generated_files/mtouch/mtouch_button.c: 236:     (button->counter)++;
  8631  0FB8  0020               	movlb	0	; select bank0
  8632  0FB9  0824               	movf	Button_State_Initializing@button,w
  8633  0FBA  3E0A               	addlw	10
  8634  0FBB  0086               	movwf	6
  8635  0FBC  3001               	movlw	1	; select bank2/3
  8636  0FBD  0087               	movwf	7
  8637  0FBE  3001               	movlw	1
  8638  0FBF  0781               	addwf	1,f
  8639  0FC0  3141               	addfsr 1,1
  8640  0FC1  1803               	skipnc
  8641  0FC2  0A81               	incf	1,f
  8642                           
  8643                           ;mcc_generated_files/mtouch/mtouch_button.c: 237:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  8644  0FC3  0824               	movf	Button_State_Initializing@button,w
  8645  0FC4  3E0A               	addlw	10
  8646  0FC5  0086               	movwf	6
  8647  0FC6  3001               	movlw	1	; select bank2/3
  8648  0FC7  0087               	movwf	7
  8649  0FC8  3F40               	moviw [0]fsr1
  8650  0FC9  00A5               	movwf	??_Button_State_Initializing
  8651  0FCA  3F41               	moviw [1]fsr1
  8652  0FCB  00A6               	movwf	??_Button_State_Initializing+1
  8653  0FCC  3000               	movlw	0
  8654  0FCD  0226               	subwf	??_Button_State_Initializing+1,w
  8655  0FCE  3010               	movlw	16
  8656  0FCF  1903               	skipnz
  8657  0FD0  0225               	subwf	??_Button_State_Initializing,w
  8658  0FD1  1C03               	skipc
  8659  0FD2  0008               	return
  8660                           
  8661                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 239:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
  8662  0FD3  0824               	movf	Button_State_Initializing@button,w
  8663  0FD4  3E05               	addlw	5
  8664  0FD5  0086               	movwf	6
  8665  0FD6  3001               	movlw	1	; select bank2/3
  8666  0FD7  0087               	movwf	7
  8667  0FD8  3F40               	moviw [0]fsr1
  8668  0FD9  00A5               	movwf	??_Button_State_Initializing
  8669  0FDA  3F41               	moviw [1]fsr1
  8670  0FDB  00A6               	movwf	??_Button_State_Initializing+1
  8671  0FDC  3F42               	moviw [2]fsr1
  8672  0FDD  00A7               	movwf	??_Button_State_Initializing+2
  8673  0FDE  3F43               	moviw [3]fsr1
  8674  0FDF  00A8               	movwf	??_Button_State_Initializing+3
  8675  0FE0  3004               	movlw	4
  8676  0FE1                     u3845:	
  8677  0FE1  36A8               	lsrf	??_Button_State_Initializing+3,f
  8678  0FE2  0CA7               	rrf	??_Button_State_Initializing+2,f
  8679  0FE3  0CA6               	rrf	??_Button_State_Initializing+1,f
  8680  0FE4  0CA5               	rrf	??_Button_State_Initializing,f
  8681  0FE5  0B89               	decfsz	9,f
  8682  0FE6  2FE1               	goto	u3845
  8683  0FE7  0824               	movf	Button_State_Initializing@button,w
  8684  0FE8  3E03               	addlw	3
  8685  0FE9  0086               	movwf	6
  8686  0FEA  3001               	movlw	1	; select bank2/3
  8687  0FEB  0087               	movwf	7
  8688  0FEC  0825               	movf	??_Button_State_Initializing,w
  8689  0FED  3FC0               	movwi [0]fsr1
  8690  0FEE  0826               	movf	??_Button_State_Initializing+1,w
  8691  0FEF  3FC1               	movwi [1]fsr1
  8692                           
  8693                           ;mcc_generated_files/mtouch/mtouch_button.c: 240:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
  8694  0FF0  0824               	movf	Button_State_Initializing@button,w
  8695  0FF1  3E02               	addlw	2
  8696  0FF2  0086               	movwf	6
  8697  0FF3  3001               	movlw	1	; select bank2/3
  8698  0FF4  0087               	movwf	7
  8699  0FF5  0181               	clrf	1
  8700  0FF6  0A81               	incf	1,f
  8701                           
  8702                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8703  0FF7  0824               	movf	Button_State_Initializing@button,w
  8704  0FF8  3E0A               	addlw	10
  8705  0FF9  0086               	movwf	6
  8706  0FFA  3001               	movlw	1	; select bank2/3
  8707  0FFB  0087               	movwf	7
  8708  0FFC  3000               	movlw	0
  8709  0FFD  3FC0               	movwi [0]fsr1
  8710  0FFE  3FC1               	movwi [1]fsr1
  8711  0FFF  0008               	return
  8712  1000                     __end_of_Button_State_Initializing:	
  8713                           
  8714                           	psect	text55
  8715  073A                     __ptext55:	
  8716 ;; *************** function _Button_State_Pressed *****************
  8717 ;; Defined at:
  8718 ;;		line 281 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;  button          1    4[BANK0 ] PTR struct .
  8721 ;;		 -> mtouch_button(64), 
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;		None
  8724 ;; Return value:  Size  Location     Type
  8725 ;;                  1    wreg      void 
  8726 ;; Registers used:
  8727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8728 ;; Tracked objects:
  8729 ;;		On entry : 0/0
  8730 ;;		On exit  : 0/0
  8731 ;;		Unchanged: 0/0
  8732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8733 ;;      Params:         0       1       0       0       0       0       0       0
  8734 ;;      Locals:         0       0       0       0       0       0       0       0
  8735 ;;      Temps:          0       2       0       0       0       0       0       0
  8736 ;;      Totals:         0       3       0       0       0       0       0       0
  8737 ;;Total ram usage:        3 bytes
  8738 ;; Hardware stack levels used:    1
  8739 ;; Hardware stack levels required when called:    7
  8740 ;; This function calls:
  8741 ;;		_Button_DefaultCallback
  8742 ;;		_MTOUCH_Button_Initialize
  8743 ;;		_myButtonReleasedCallback
  8744 ;; This function is called by:
  8745 ;;		_Button_Service
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           
  8750                           ;psect for function _Button_State_Pressed
  8751  073A                     _Button_State_Pressed:	
  8752                           
  8753                           ;mcc_generated_files/mtouch/mtouch_button.c: 281: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 282: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 284:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
  8754                           
  8755                           ;incstack = 0
  8756                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8757  073A  0020               	movlb	0	; select bank0
  8758  073B  0824               	movf	Button_State_Pressed@button,w
  8759  073C  3E0A               	addlw	10
  8760  073D  0086               	movwf	6
  8761  073E  3001               	movlw	1	; select bank2/3
  8762  073F  0087               	movwf	7
  8763  0740  3F40               	moviw [0]fsr1
  8764  0741  00A5               	movwf	??_Button_State_Pressed
  8765  0742  3F41               	moviw [1]fsr1
  8766  0743  00A6               	movwf	??_Button_State_Pressed+1
  8767  0744  3007               	movlw	7
  8768  0745  0226               	subwf	??_Button_State_Pressed+1,w
  8769  0746  30D0               	movlw	208
  8770  0747  1903               	skipnz
  8771  0748  0225               	subwf	??_Button_State_Pressed,w
  8772  0749  1C03               	skipc
  8773  074A  2F62               	goto	l4668
  8774                           
  8775                           ;mcc_generated_files/mtouch/mtouch_button.c: 285:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 286:         MTOUCH_Button_Initialize(button->name);
  8776  074B  0824               	movf	Button_State_Pressed@button,w
  8777  074C  0086               	movwf	6
  8778  074D  3001               	movlw	1	; select bank2/3
  8779  074E  0087               	movwf	7
  8780  074F  0801               	movf	1,w
  8781  0750  318E  268F  3187   	fcall	_MTOUCH_Button_Initialize
  8782                           
  8783                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         callback_notPressed(button->na
      +                          me);
  8784  0753  0020               	movlb	0	; select bank0
  8785  0754  0824               	movf	Button_State_Pressed@button,w
  8786  0755  0086               	movwf	6
  8787  0756  3001               	movlw	1	; select bank2/3
  8788  0757  0087               	movwf	7
  8789  0758  0801               	movf	1,w
  8790  0759  00A5               	movwf	??_Button_State_Pressed
  8791  075A  0825               	movf	??_Button_State_Pressed,w
  8792  075B  00F7               	movwf	Button_DefaultCallback@button
  8793  075C  0866               	movf	_callback_notPressed+1,w
  8794  075D  008A               	movwf	10
  8795  075E  0865               	movf	_callback_notPressed,w
  8796  075F  000A               	callw
  8797  0760  3187               	pagesel	$
  8798                           
  8799                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:     }
  8800  0761  0008               	return
  8801  0762                     l4668:	
  8802  0762  0824               	movf	Button_State_Pressed@button,w
  8803  0763  3E09               	addlw	9
  8804  0764  0086               	movwf	6
  8805  0765  3001               	movlw	1	; select bank2/3
  8806  0766  0087               	movwf	7
  8807  0767  0801               	movf	1,w
  8808  0768  3A80               	xorlw	128
  8809  0769  00A5               	movwf	??_Button_State_Pressed
  8810  076A  0824               	movf	Button_State_Pressed@button,w
  8811  076B  3E0E               	addlw	14
  8812  076C  0086               	movwf	6
  8813  076D  3001               	movlw	1	; select bank2/3
  8814  076E  0087               	movwf	7
  8815  076F  0824               	movf	Button_State_Pressed@button,w
  8816  0770  3E0E               	addlw	14
  8817  0771  0084               	movwf	4
  8818  0772  3001               	movlw	1	; select bank2/3
  8819  0773  0085               	movwf	5
  8820  0774  3600               	lsrf	0,w
  8821  0775  0201               	subwf	1,w
  8822  0776  3A80               	xorlw	128
  8823  0777  02A5               	subwf	??_Button_State_Pressed,f
  8824  0778  1803               	skipnc
  8825  0779  0008               	return
  8826                           
  8827                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 293:         button->state = MTOUCH_BUTTON_STATE_notPressed;
  8828  077A  0824               	movf	Button_State_Pressed@button,w
  8829  077B  3E02               	addlw	2
  8830  077C  0086               	movwf	6
  8831  077D  3001               	movlw	1	; select bank2/3
  8832  077E  0087               	movwf	7
  8833  077F  0181               	clrf	1
  8834  0780  0A81               	incf	1,f
  8835                           
  8836                           ;mcc_generated_files/mtouch/mtouch_button.c: 294:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8837  0781  0824               	movf	Button_State_Pressed@button,w
  8838  0782  3E0A               	addlw	10
  8839  0783  0086               	movwf	6
  8840  0784  3001               	movlw	1	; select bank2/3
  8841  0785  0087               	movwf	7
  8842  0786  3000               	movlw	0
  8843  0787  3FC0               	movwi [0]fsr1
  8844  0788  3FC1               	movwi [1]fsr1
  8845                           
  8846                           ;mcc_generated_files/mtouch/mtouch_button.c: 295:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
  8847  0789  0824               	movf	Button_State_Pressed@button,w
  8848  078A  3E0C               	addlw	12
  8849  078B  0086               	movwf	6
  8850  078C  3001               	movlw	1	; select bank2/3
  8851  078D  0087               	movwf	7
  8852  078E  30FF               	movlw	255
  8853  078F  3FC0               	movwi [0]fsr1
  8854  0790  30FB               	movlw	251
  8855  0791  3FC1               	movwi [1]fsr1
  8856                           
  8857                           ;mcc_generated_files/mtouch/mtouch_button.c: 296:         callback_notPressed(button->na
      +                          me);
  8858  0792  0824               	movf	Button_State_Pressed@button,w
  8859  0793  0086               	movwf	6
  8860  0794  3001               	movlw	1	; select bank2/3
  8861  0795  0087               	movwf	7
  8862  0796  0801               	movf	1,w
  8863  0797  00A5               	movwf	??_Button_State_Pressed
  8864  0798  0825               	movf	??_Button_State_Pressed,w
  8865  0799  00F7               	movwf	Button_DefaultCallback@button
  8866  079A  0866               	movf	_callback_notPressed+1,w
  8867  079B  008A               	movwf	10
  8868  079C  0865               	movf	_callback_notPressed,w
  8869  079D  000A               	callw
  8870  079E  3187               	pagesel	$
  8871  079F  0008               	return
  8872  07A0                     __end_of_Button_State_Pressed:	
  8873                           
  8874                           	psect	text56
  8875  0BCE                     __ptext56:	
  8876 ;; *************** function _myButtonPressedCallback *****************
  8877 ;; Defined at:
  8878 ;;		line 30 in file "main.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;  button          1    7[COMMON] enum E2914
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;		None
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  1    wreg      void 
  8885 ;; Registers used:
  8886 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8892 ;;      Params:         1       0       0       0       0       0       0       0
  8893 ;;      Locals:         0       0       0       0       0       0       0       0
  8894 ;;      Temps:          1       0       0       0       0       0       0       0
  8895 ;;      Totals:         2       0       0       0       0       0       0       0
  8896 ;;Total ram usage:        2 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    6
  8899 ;; This function calls:
  8900 ;;		_LED_PROCESS
  8901 ;;		_MTOUCH_Button_Buttonmask_Get
  8902 ;;		_RELAY_PROCESS
  8903 ;; This function is called by:
  8904 ;;		_main
  8905 ;;		_Button_State_NotPressed
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           
  8910                           ;psect for function _myButtonPressedCallback
  8911  0BCE                     _myButtonPressedCallback:	
  8912                           
  8913                           ;main.c: 30: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 31: {
      +                          ;main.c: 32:     last_touch_status.full_status = last_touch_status.full_status ^ MTOUCH_
      +                          Button_Buttonmask_Get();
  8914                           
  8915                           ;incstack = 0
  8916                           ; Regs used in _myButtonPressedCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8917  0BCE  318D  2518  318B   	fcall	_MTOUCH_Button_Buttonmask_Get
  8918  0BD1  00F8               	movwf	??_myButtonPressedCallback
  8919  0BD2  0020               	movlb	0	; select bank0
  8920  0BD3  0857               	movf	_last_touch_status,w
  8921  0BD4  0678               	xorwf	??_myButtonPressedCallback,w
  8922  0BD5  00D7               	movwf	_last_touch_status
  8923  0BD6  0858               	movf	_last_touch_status+1,w
  8924  0BD7  00D8               	movwf	_last_touch_status+1
  8925                           
  8926                           ;main.c: 34:     LED_PROCESS(last_touch_status.full_status);
  8927  0BD8  0857               	movf	_last_touch_status,w
  8928  0BD9  3183  23F4  318B   	fcall	_LED_PROCESS
  8929                           
  8930                           ;main.c: 35:     RELAY_PROCESS(last_touch_status.full_status);
  8931  0BDC  0020               	movlb	0	; select bank0
  8932  0BDD  0857               	movf	_last_touch_status,w
  8933  0BDE  3183  2357         	fcall	_RELAY_PROCESS
  8934  0BE0  0008               	return
  8935  0BE1                     __end_of_myButtonPressedCallback:	
  8936                           
  8937                           	psect	text57
  8938  0A6E                     __ptext57:	
  8939 ;; *************** function _Button_DefaultCallback *****************
  8940 ;; Defined at:
  8941 ;;		line 535 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;  button          1    7[COMMON] enum E3070
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;		None
  8946 ;; Return value:  Size  Location     Type
  8947 ;;                  1    wreg      void 
  8948 ;; Registers used:
  8949 ;;		None
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8955 ;;      Params:         1       0       0       0       0       0       0       0
  8956 ;;      Locals:         0       0       0       0       0       0       0       0
  8957 ;;      Temps:          0       0       0       0       0       0       0       0
  8958 ;;      Totals:         1       0       0       0       0       0       0       0
  8959 ;;Total ram usage:        1 bytes
  8960 ;; Hardware stack levels used:    1
  8961 ;; Hardware stack levels required when called:    4
  8962 ;; This function calls:
  8963 ;;		Nothing
  8964 ;; This function is called by:
  8965 ;;		_Button_State_NotPressed
  8966 ;;		_Button_State_Pressed
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           
  8971                           ;psect for function _Button_DefaultCallback
  8972  0A6E                     _Button_DefaultCallback:	
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in _Button_DefaultCallback: []
  8976  0A6E  0008               	return
  8977  0A6F                     __end_of_Button_DefaultCallback:	
  8978                           
  8979                           	psect	text58
  8980  0A6D                     __ptext58:	
  8981 ;; *************** function _myButtonReleasedCallback *****************
  8982 ;; Defined at:
  8983 ;;		line 37 in file "main.c"
  8984 ;; Parameters:    Size  Location     Type
  8985 ;;  button          1    7[COMMON] enum E2914
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;		None
  8988 ;; Return value:  Size  Location     Type
  8989 ;;                  1    wreg      void 
  8990 ;; Registers used:
  8991 ;;		None
  8992 ;; Tracked objects:
  8993 ;;		On entry : 0/0
  8994 ;;		On exit  : 0/0
  8995 ;;		Unchanged: 0/0
  8996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8997 ;;      Params:         1       0       0       0       0       0       0       0
  8998 ;;      Locals:         0       0       0       0       0       0       0       0
  8999 ;;      Temps:          0       0       0       0       0       0       0       0
  9000 ;;      Totals:         1       0       0       0       0       0       0       0
  9001 ;;Total ram usage:        1 bytes
  9002 ;; Hardware stack levels used:    1
  9003 ;; Hardware stack levels required when called:    4
  9004 ;; This function calls:
  9005 ;;		Nothing
  9006 ;; This function is called by:
  9007 ;;		_main
  9008 ;;		_Button_State_Pressed
  9009 ;; This function uses a non-reentrant model
  9010 ;;
  9011                           
  9012                           
  9013                           ;psect for function _myButtonReleasedCallback
  9014  0A6D                     _myButtonReleasedCallback:	
  9015                           
  9016                           ;incstack = 0
  9017                           ; Regs used in _myButtonReleasedCallback: []
  9018  0A6D  0008               	return
  9019  0A6E                     __end_of_myButtonReleasedCallback:	
  9020                           
  9021                           	psect	text59
  9022  0357                     __ptext59:	
  9023 ;; *************** function _RELAY_PROCESS *****************
  9024 ;; Defined at:
  9025 ;;		line 5 in file "relay.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;  x               1    wreg     unsigned char 
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  x               1    3[COMMON] unsigned char 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      void 
  9032 ;; Registers used:
  9033 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9039 ;;      Params:         0       0       0       0       0       0       0       0
  9040 ;;      Locals:         1       0       0       0       0       0       0       0
  9041 ;;      Temps:          2       0       0       0       0       0       0       0
  9042 ;;      Totals:         3       0       0       0       0       0       0       0
  9043 ;;Total ram usage:        3 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    4
  9046 ;; This function calls:
  9047 ;;		Nothing
  9048 ;; This function is called by:
  9049 ;;		_myButtonPressedCallback
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _RELAY_PROCESS
  9055  0357                     _RELAY_PROCESS:	
  9056                           
  9057                           ;incstack = 0
  9058                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
  9059                           ;RELAY_PROCESS@x stored from wreg
  9060  0357  00F3               	movwf	RELAY_PROCESS@x
  9061                           
  9062                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
  9063  0358  2BB9               	goto	l3246
  9064  0359                     l1085:	
  9065                           ;relay.c: 10:         {;relay.c: 11:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
  9066                           
  9067  0359  0022               	movlb	2	; select bank2
  9068  035A  170D               	bsf	13,6	;volatile
  9069  035B  168E               	bsf	14,5	;volatile
  9070  035C  168C               	bsf	12,5	;volatile
  9071  035D  160C               	bsf	12,4	;volatile
  9072  035E  0008               	return
  9073  035F                     l1095:	
  9074                           ;relay.c: 15:         {;relay.c: 16:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
  9075                           
  9076  035F  0022               	movlb	2	; select bank2
  9077  0360  170D               	bsf	13,6	;volatile
  9078  0361  168E               	bsf	14,5	;volatile
  9079  0362  168C               	bsf	12,5	;volatile
  9080  0363  120C               	bcf	12,4	;volatile
  9081  0364  0008               	return
  9082  0365                     l1104:	
  9083                           ;relay.c: 20:         {;relay.c: 21:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
  9084                           
  9085  0365  0022               	movlb	2	; select bank2
  9086  0366  170D               	bsf	13,6	;volatile
  9087  0367  168E               	bsf	14,5	;volatile
  9088  0368  128C               	bcf	12,5	;volatile
  9089  0369  160C               	bsf	12,4	;volatile
  9090  036A  0008               	return
  9091  036B                     l1113:	
  9092                           ;relay.c: 25:         {;relay.c: 26:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
  9093                           
  9094  036B  0022               	movlb	2	; select bank2
  9095  036C  170D               	bsf	13,6	;volatile
  9096  036D  168E               	bsf	14,5	;volatile
  9097  036E  128C               	bcf	12,5	;volatile
  9098  036F  120C               	bcf	12,4	;volatile
  9099  0370  0008               	return
  9100  0371                     l1122:	
  9101                           ;relay.c: 30:         {;relay.c: 31:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
  9102                           
  9103  0371  0022               	movlb	2	; select bank2
  9104  0372  170D               	bsf	13,6	;volatile
  9105  0373  128E               	bcf	14,5	;volatile
  9106  0374  168C               	bsf	12,5	;volatile
  9107  0375  160C               	bsf	12,4	;volatile
  9108  0376  0008               	return
  9109  0377                     l1131:	
  9110                           ;relay.c: 35:         {;relay.c: 36:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
  9111                           
  9112  0377  0022               	movlb	2	; select bank2
  9113  0378  170D               	bsf	13,6	;volatile
  9114  0379  128E               	bcf	14,5	;volatile
  9115  037A  168C               	bsf	12,5	;volatile
  9116  037B  120C               	bcf	12,4	;volatile
  9117  037C  0008               	return
  9118  037D                     l1140:	
  9119                           ;relay.c: 40:         {;relay.c: 41:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
  9120                           
  9121  037D  0022               	movlb	2	; select bank2
  9122  037E  170D               	bsf	13,6	;volatile
  9123  037F  128E               	bcf	14,5	;volatile
  9124  0380  128C               	bcf	12,5	;volatile
  9125  0381  160C               	bsf	12,4	;volatile
  9126  0382  0008               	return
  9127  0383                     l1149:	
  9128                           ;relay.c: 45:         {;relay.c: 46:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
  9129                           
  9130  0383  0022               	movlb	2	; select bank2
  9131  0384  170D               	bsf	13,6	;volatile
  9132  0385  128E               	bcf	14,5	;volatile
  9133  0386  128C               	bcf	12,5	;volatile
  9134  0387  120C               	bcf	12,4	;volatile
  9135  0388  0008               	return
  9136  0389                     l1158:	
  9137                           ;relay.c: 50:         {;relay.c: 51:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
  9138                           
  9139  0389  0022               	movlb	2	; select bank2
  9140  038A  130D               	bcf	13,6	;volatile
  9141  038B  168E               	bsf	14,5	;volatile
  9142  038C  168C               	bsf	12,5	;volatile
  9143  038D  160C               	bsf	12,4	;volatile
  9144  038E  0008               	return
  9145  038F                     l1167:	
  9146                           ;relay.c: 55:         {;relay.c: 56:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
  9147                           
  9148  038F  0022               	movlb	2	; select bank2
  9149  0390  130D               	bcf	13,6	;volatile
  9150  0391  168E               	bsf	14,5	;volatile
  9151  0392  168C               	bsf	12,5	;volatile
  9152  0393  120C               	bcf	12,4	;volatile
  9153  0394  0008               	return
  9154  0395                     l1176:	
  9155                           ;relay.c: 60:         {;relay.c: 61:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
  9156                           
  9157  0395  0022               	movlb	2	; select bank2
  9158  0396  130D               	bcf	13,6	;volatile
  9159  0397  168E               	bsf	14,5	;volatile
  9160  0398  128C               	bcf	12,5	;volatile
  9161  0399  160C               	bsf	12,4	;volatile
  9162  039A  0008               	return
  9163  039B                     l1185:	
  9164                           ;relay.c: 65:         {;relay.c: 66:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 1; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
  9165                           
  9166  039B  0022               	movlb	2	; select bank2
  9167  039C  130D               	bcf	13,6	;volatile
  9168  039D  168E               	bsf	14,5	;volatile
  9169  039E  128C               	bcf	12,5	;volatile
  9170  039F  120C               	bcf	12,4	;volatile
  9171  03A0  0008               	return
  9172  03A1                     l1194:	
  9173                           ;relay.c: 70:         {;relay.c: 71:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
  9174                           
  9175  03A1  0022               	movlb	2	; select bank2
  9176  03A2  130D               	bcf	13,6	;volatile
  9177  03A3  128E               	bcf	14,5	;volatile
  9178  03A4  168C               	bsf	12,5	;volatile
  9179  03A5  160C               	bsf	12,4	;volatile
  9180  03A6  0008               	return
  9181  03A7                     l1203:	
  9182                           ;relay.c: 75:         {;relay.c: 76:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
  9183                           
  9184  03A7  0022               	movlb	2	; select bank2
  9185  03A8  130D               	bcf	13,6	;volatile
  9186  03A9  128E               	bcf	14,5	;volatile
  9187  03AA  168C               	bsf	12,5	;volatile
  9188  03AB  120C               	bcf	12,4	;volatile
  9189  03AC  0008               	return
  9190  03AD                     l1212:	
  9191                           ;relay.c: 80:         {;relay.c: 81:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 1; } while(0);
  9192                           
  9193  03AD  0022               	movlb	2	; select bank2
  9194  03AE  130D               	bcf	13,6	;volatile
  9195  03AF  128E               	bcf	14,5	;volatile
  9196  03B0  128C               	bcf	12,5	;volatile
  9197  03B1  160C               	bsf	12,4	;volatile
  9198  03B2  0008               	return
  9199  03B3                     l1221:	
  9200                           ;relay.c: 85:         {;relay.c: 86:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATCbits.LATC5 = 0; } while(0);do { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4
      +                           = 0; } while(0);
  9201                           
  9202  03B3  0022               	movlb	2	; select bank2
  9203  03B4  130D               	bcf	13,6	;volatile
  9204  03B5  128E               	bcf	14,5	;volatile
  9205  03B6  128C               	bcf	12,5	;volatile
  9206  03B7  120C               	bcf	12,4	;volatile
  9207  03B8  0008               	return
  9208  03B9                     l3246:	
  9209  03B9  0873               	movf	RELAY_PROCESS@x,w
  9210  03BA  00F1               	movwf	??_RELAY_PROCESS
  9211  03BB  01F2               	clrf	??_RELAY_PROCESS+1
  9212                           
  9213                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9214                           ; Switch size 1, requested type "simple"
  9215                           ; Number of cases is 1, Range of values is 0 to 0
  9216                           ; switch strategies available:
  9217                           ; Name         Instructions Cycles
  9218                           ; simple_byte            4     3 (average)
  9219                           ; direct_byte            8     6 (fixed)
  9220                           ; jumptable            260     6 (fixed)
  9221                           ;	Chosen strategy is simple_byte
  9222  03BC  0872               	movf	??_RELAY_PROCESS+1,w
  9223  03BD  3A00               	xorlw	0	; case 0
  9224  03BE  1903               	skipnz
  9225  03BF  2BC1               	goto	l5012
  9226  03C0  2BF3               	goto	l1229
  9227  03C1                     l5012:	
  9228                           
  9229                           ; Switch size 1, requested type "simple"
  9230                           ; Number of cases is 16, Range of values is 0 to 15
  9231                           ; switch strategies available:
  9232                           ; Name         Instructions Cycles
  9233                           ; direct_byte           38     6 (fixed)
  9234                           ; simple_byte           49    25 (average)
  9235                           ; jumptable            260     6 (fixed)
  9236                           ;	Chosen strategy is simple_byte
  9237  03C1  0871               	movf	??_RELAY_PROCESS,w
  9238  03C2  3A00               	xorlw	0	; case 0
  9239  03C3  1903               	skipnz
  9240  03C4  2B59               	goto	l1085
  9241  03C5  3A01               	xorlw	1	; case 1
  9242  03C6  1903               	skipnz
  9243  03C7  2B5F               	goto	l1095
  9244  03C8  3A03               	xorlw	3	; case 2
  9245  03C9  1903               	skipnz
  9246  03CA  2B65               	goto	l1104
  9247  03CB  3A01               	xorlw	1	; case 3
  9248  03CC  1903               	skipnz
  9249  03CD  2B6B               	goto	l1113
  9250  03CE  3A07               	xorlw	7	; case 4
  9251  03CF  1903               	skipnz
  9252  03D0  2B71               	goto	l1122
  9253  03D1  3A01               	xorlw	1	; case 5
  9254  03D2  1903               	skipnz
  9255  03D3  2B77               	goto	l1131
  9256  03D4  3A03               	xorlw	3	; case 6
  9257  03D5  1903               	skipnz
  9258  03D6  2B7D               	goto	l1140
  9259  03D7  3A01               	xorlw	1	; case 7
  9260  03D8  1903               	skipnz
  9261  03D9  2B83               	goto	l1149
  9262  03DA  3A0F               	xorlw	15	; case 8
  9263  03DB  1903               	skipnz
  9264  03DC  2B89               	goto	l1158
  9265  03DD  3A01               	xorlw	1	; case 9
  9266  03DE  1903               	skipnz
  9267  03DF  2B8F               	goto	l1167
  9268  03E0  3A03               	xorlw	3	; case 10
  9269  03E1  1903               	skipnz
  9270  03E2  2B95               	goto	l1176
  9271  03E3  3A01               	xorlw	1	; case 11
  9272  03E4  1903               	skipnz
  9273  03E5  2B9B               	goto	l1185
  9274  03E6  3A07               	xorlw	7	; case 12
  9275  03E7  1903               	skipnz
  9276  03E8  2BA1               	goto	l1194
  9277  03E9  3A01               	xorlw	1	; case 13
  9278  03EA  1903               	skipnz
  9279  03EB  2BA7               	goto	l1203
  9280  03EC  3A03               	xorlw	3	; case 14
  9281  03ED  1903               	skipnz
  9282  03EE  2BAD               	goto	l1212
  9283  03EF  3A01               	xorlw	1	; case 15
  9284  03F0  1903               	skipnz
  9285  03F1  2BB3               	goto	l1221
  9286  03F2  2BF3               	goto	l1229
  9287  03F3                     l1229:	
  9288  03F3  0008               	return
  9289  03F4                     __end_of_RELAY_PROCESS:	
  9290                           
  9291                           	psect	text60
  9292  0D18                     __ptext60:	
  9293 ;; *************** function _MTOUCH_Button_Buttonmask_Get *****************
  9294 ;; Defined at:
  9295 ;;		line 429 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;  i               1    6[COMMON] unsigned char 
  9300 ;;  output          1    5[COMMON] unsigned char 
  9301 ;; Return value:  Size  Location     Type
  9302 ;;                  1    wreg      unsigned char 
  9303 ;; Registers used:
  9304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9310 ;;      Params:         0       0       0       0       0       0       0       0
  9311 ;;      Locals:         2       0       0       0       0       0       0       0
  9312 ;;      Temps:          2       0       0       0       0       0       0       0
  9313 ;;      Totals:         4       0       0       0       0       0       0       0
  9314 ;;Total ram usage:        4 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    5
  9317 ;; This function calls:
  9318 ;;		_MTOUCH_Button_isPressed
  9319 ;; This function is called by:
  9320 ;;		_myButtonPressedCallback
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function _MTOUCH_Button_Buttonmask_Get
  9326  0D18                     _MTOUCH_Button_Buttonmask_Get:	
  9327                           
  9328                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     mtouch_buttonmask_t output = 0;
  9329                           
  9330                           ;incstack = 0
  9331                           ; Regs used in _MTOUCH_Button_Buttonmask_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  9332  0D18  01F5               	clrf	MTOUCH_Button_Buttonmask_Get@output
  9333                           
  9334                           ;mcc_generated_files/mtouch/mtouch_button.c: 433:     for (uint8_t i = 0; i < 4u; i++)
  9335  0D19  01F6               	clrf	MTOUCH_Button_Buttonmask_Get@i
  9336  0D1A                     l3222:	
  9337                           
  9338                           ;mcc_generated_files/mtouch/mtouch_button.c: 434:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 435:         if (MTOUCH_Button_isPressed(i) == 1)
  9339  0D1A  0876               	movf	MTOUCH_Button_Buttonmask_Get@i,w
  9340  0D1B  318C  24A8  318D   	fcall	_MTOUCH_Button_isPressed
  9341  0D1E  3A01               	xorlw	1
  9342  0D1F  1D03               	skipz
  9343  0D20  2D2C               	goto	l1028
  9344                           
  9345                           ;mcc_generated_files/mtouch/mtouch_button.c: 436:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 437:             output |= (mtouch_buttonmask_t)0x01 << i;
  9346  0D21  3001               	movlw	1
  9347  0D22  00F3               	movwf	??_MTOUCH_Button_Buttonmask_Get
  9348  0D23  0A76               	incf	MTOUCH_Button_Buttonmask_Get@i,w
  9349  0D24  2D26               	goto	u1874
  9350  0D25                     u1875:	
  9351  0D25  35F3               	lslf	??_MTOUCH_Button_Buttonmask_Get,f
  9352  0D26                     u1874:	
  9353  0D26  0B89               	decfsz	9,f
  9354  0D27  2D25               	goto	u1875
  9355  0D28  0873               	movf	??_MTOUCH_Button_Buttonmask_Get,w
  9356  0D29  00F4               	movwf	??_MTOUCH_Button_Buttonmask_Get+1
  9357  0D2A  0874               	movf	??_MTOUCH_Button_Buttonmask_Get+1,w
  9358  0D2B  04F5               	iorwf	MTOUCH_Button_Buttonmask_Get@output,f
  9359  0D2C                     l1028:	
  9360                           ;mcc_generated_files/mtouch/mtouch_button.c: 438:         }
  9361                           
  9362                           
  9363                           ;mcc_generated_files/mtouch/mtouch_button.c: 439:     }
  9364  0D2C  3001               	movlw	1
  9365  0D2D  00F3               	movwf	??_MTOUCH_Button_Buttonmask_Get
  9366  0D2E  0873               	movf	??_MTOUCH_Button_Buttonmask_Get,w
  9367  0D2F  07F6               	addwf	MTOUCH_Button_Buttonmask_Get@i,f
  9368  0D30  3004               	movlw	4
  9369  0D31  0276               	subwf	MTOUCH_Button_Buttonmask_Get@i,w
  9370  0D32  1C03               	skipc
  9371  0D33  2D1A               	goto	l3222
  9372                           
  9373                           ;mcc_generated_files/mtouch/mtouch_button.c: 440:     return output;
  9374  0D34  0875               	movf	MTOUCH_Button_Buttonmask_Get@output,w
  9375  0D35  0008               	return
  9376  0D36                     __end_of_MTOUCH_Button_Buttonmask_Get:	
  9377                           
  9378                           	psect	text61
  9379  0CA8                     __ptext61:	
  9380 ;; *************** function _MTOUCH_Button_isPressed *****************
  9381 ;; Defined at:
  9382 ;;		line 382 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9383 ;; Parameters:    Size  Location     Type
  9384 ;;  name            1    wreg     enum E3070
  9385 ;; Auto vars:     Size  Location     Type
  9386 ;;  name            1    2[COMMON] enum E3070
  9387 ;; Return value:  Size  Location     Type
  9388 ;;                  1    wreg      _Bool 
  9389 ;; Registers used:
  9390 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9391 ;; Tracked objects:
  9392 ;;		On entry : 0/0
  9393 ;;		On exit  : 0/0
  9394 ;;		Unchanged: 0/0
  9395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9396 ;;      Params:         0       0       0       0       0       0       0       0
  9397 ;;      Locals:         1       0       0       0       0       0       0       0
  9398 ;;      Temps:          1       0       0       0       0       0       0       0
  9399 ;;      Totals:         2       0       0       0       0       0       0       0
  9400 ;;Total ram usage:        2 bytes
  9401 ;; Hardware stack levels used:    1
  9402 ;; Hardware stack levels required when called:    4
  9403 ;; This function calls:
  9404 ;;		Nothing
  9405 ;; This function is called by:
  9406 ;;		_MTOUCH_Button_Buttonmask_Get
  9407 ;;		_touch_example
  9408 ;; This function uses a non-reentrant model
  9409 ;;
  9410                           
  9411                           
  9412                           ;psect for function _MTOUCH_Button_isPressed
  9413  0CA8                     _MTOUCH_Button_isPressed:	
  9414                           
  9415                           ;incstack = 0
  9416                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
  9417                           ;MTOUCH_Button_isPressed@name stored from wreg
  9418  0CA8  00F2               	movwf	MTOUCH_Button_isPressed@name
  9419                           
  9420                           ;mcc_generated_files/mtouch/mtouch_button.c: 382: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 383: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 384:     if(name < 4u)
  9421  0CA9  3004               	movlw	4
  9422  0CAA  0272               	subwf	MTOUCH_Button_isPressed@name,w
  9423  0CAB  1803               	skipnc
  9424  0CAC  2CC1               	goto	l3104
  9425                           
  9426                           ;mcc_generated_files/mtouch/mtouch_button.c: 385:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
  9427  0CAD  0872               	movf	MTOUCH_Button_isPressed@name,w
  9428  0CAE  00F1               	movwf	??_MTOUCH_Button_isPressed
  9429  0CAF  3003               	movlw	3
  9430  0CB0                     u1685:	
  9431  0CB0  35F1               	lslf	??_MTOUCH_Button_isPressed,f
  9432  0CB1  3EFF               	addlw	-1
  9433  0CB2  1D03               	skipz
  9434  0CB3  2CB0               	goto	u1685
  9435  0CB4  3571               	lslf	??_MTOUCH_Button_isPressed,w
  9436  0CB5  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
  9437  0CB6  0086               	movwf	6
  9438  0CB7  3001               	movlw	1	; select bank2/3
  9439  0CB8  0087               	movwf	7
  9440  0CB9  3002               	movlw	2
  9441  0CBA  0601               	xorwf	1,w
  9442  0CBB  1D03               	btfss	3,2
  9443  0CBC  2CBF               	goto	u1690
  9444  0CBD  3001               	movlw	1
  9445  0CBE  0008               	return
  9446  0CBF                     u1690:	
  9447  0CBF  3000               	movlw	0
  9448  0CC0  0008               	return
  9449  0CC1                     l3104:	
  9450                           
  9451                           ;mcc_generated_files/mtouch/mtouch_button.c: 387:         return 0;
  9452  0CC1  3000               	movlw	0
  9453  0CC2  0008               	return
  9454  0CC3                     __end_of_MTOUCH_Button_isPressed:	
  9455                           
  9456                           	psect	text62
  9457  03F4                     __ptext62:	
  9458 ;; *************** function _LED_PROCESS *****************
  9459 ;; Defined at:
  9460 ;;		line 10 in file "led.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  x               1    wreg     unsigned char 
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;  x               1    3[COMMON] unsigned char 
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  1    wreg      void 
  9467 ;; Registers used:
  9468 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9474 ;;      Params:         0       0       0       0       0       0       0       0
  9475 ;;      Locals:         1       0       0       0       0       0       0       0
  9476 ;;      Temps:          2       0       0       0       0       0       0       0
  9477 ;;      Totals:         3       0       0       0       0       0       0       0
  9478 ;;Total ram usage:        3 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    4
  9481 ;; This function calls:
  9482 ;;		Nothing
  9483 ;; This function is called by:
  9484 ;;		_myButtonPressedCallback
  9485 ;; This function uses a non-reentrant model
  9486 ;;
  9487                           
  9488                           
  9489                           ;psect for function _LED_PROCESS
  9490  03F4                     _LED_PROCESS:	
  9491                           
  9492                           ;incstack = 0
  9493                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0]
  9494                           ;LED_PROCESS@x stored from wreg
  9495  03F4  00F3               	movwf	LED_PROCESS@x
  9496                           
  9497                           ;led.c: 10: void LED_PROCESS(uint8_t x);led.c: 11: {;led.c: 12:     switch(x)
  9498  03F5  2C56               	goto	l3236
  9499  03F6                     l258:	
  9500                           ;led.c: 15:         {;led.c: 16:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
  9501                           
  9502  03F6  0022               	movlb	2	; select bank2
  9503  03F7  140C               	bsf	12,0	;volatile
  9504  03F8  178E               	bsf	14,7	;volatile
  9505  03F9  148C               	bsf	12,1	;volatile
  9506  03FA  158E               	bsf	14,3	;volatile
  9507  03FB  0008               	return
  9508  03FC                     l268:	
  9509                           ;led.c: 20:         {;led.c: 21:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
  9510                           
  9511  03FC  0022               	movlb	2	; select bank2
  9512  03FD  140C               	bsf	12,0	;volatile
  9513  03FE  178E               	bsf	14,7	;volatile
  9514  03FF  148C               	bsf	12,1	;volatile
  9515  0400  118E               	bcf	14,3	;volatile
  9516  0401  0008               	return
  9517  0402                     l277:	
  9518                           ;led.c: 25:         {;led.c: 26:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
  9519                           
  9520  0402  0022               	movlb	2	; select bank2
  9521  0403  140C               	bsf	12,0	;volatile
  9522  0404  178E               	bsf	14,7	;volatile
  9523  0405  108C               	bcf	12,1	;volatile
  9524  0406  158E               	bsf	14,3	;volatile
  9525  0407  0008               	return
  9526  0408                     l286:	
  9527                           ;led.c: 30:         {;led.c: 31:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
  9528                           
  9529  0408  0022               	movlb	2	; select bank2
  9530  0409  140C               	bsf	12,0	;volatile
  9531  040A  178E               	bsf	14,7	;volatile
  9532  040B  108C               	bcf	12,1	;volatile
  9533  040C  118E               	bcf	14,3	;volatile
  9534  040D  0008               	return
  9535  040E                     l295:	
  9536                           ;led.c: 35:         {;led.c: 36:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
  9537                           
  9538  040E  0022               	movlb	2	; select bank2
  9539  040F  140C               	bsf	12,0	;volatile
  9540  0410  138E               	bcf	14,7	;volatile
  9541  0411  148C               	bsf	12,1	;volatile
  9542  0412  158E               	bsf	14,3	;volatile
  9543  0413  0008               	return
  9544  0414                     l304:	
  9545                           ;led.c: 40:         {;led.c: 41:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
  9546                           
  9547  0414  0022               	movlb	2	; select bank2
  9548  0415  140C               	bsf	12,0	;volatile
  9549  0416  138E               	bcf	14,7	;volatile
  9550  0417  148C               	bsf	12,1	;volatile
  9551  0418  118E               	bcf	14,3	;volatile
  9552  0419  0008               	return
  9553  041A                     l313:	
  9554                           ;led.c: 45:         {;led.c: 46:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
  9555                           
  9556  041A  0022               	movlb	2	; select bank2
  9557  041B  140C               	bsf	12,0	;volatile
  9558  041C  138E               	bcf	14,7	;volatile
  9559  041D  108C               	bcf	12,1	;volatile
  9560  041E  158E               	bsf	14,3	;volatile
  9561  041F  0008               	return
  9562  0420                     l322:	
  9563                           ;led.c: 50:         {;led.c: 51:             do { LATAbits.LATA0 = 1; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
  9564                           
  9565  0420  0022               	movlb	2	; select bank2
  9566  0421  140C               	bsf	12,0	;volatile
  9567  0422  138E               	bcf	14,7	;volatile
  9568  0423  108C               	bcf	12,1	;volatile
  9569  0424  118E               	bcf	14,3	;volatile
  9570  0425  0008               	return
  9571  0426                     l331:	
  9572                           ;led.c: 55:         {;led.c: 56:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
  9573                           
  9574  0426  0022               	movlb	2	; select bank2
  9575  0427  100C               	bcf	12,0	;volatile
  9576  0428  178E               	bsf	14,7	;volatile
  9577  0429  148C               	bsf	12,1	;volatile
  9578  042A  158E               	bsf	14,3	;volatile
  9579  042B  0008               	return
  9580  042C                     l340:	
  9581                           ;led.c: 60:         {;led.c: 61:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
  9582                           
  9583  042C  0022               	movlb	2	; select bank2
  9584  042D  100C               	bcf	12,0	;volatile
  9585  042E  178E               	bsf	14,7	;volatile
  9586  042F  148C               	bsf	12,1	;volatile
  9587  0430  118E               	bcf	14,3	;volatile
  9588  0431  0008               	return
  9589  0432                     l349:	
  9590                           ;led.c: 65:         {;led.c: 66:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
  9591                           
  9592  0432  0022               	movlb	2	; select bank2
  9593  0433  100C               	bcf	12,0	;volatile
  9594  0434  178E               	bsf	14,7	;volatile
  9595  0435  108C               	bcf	12,1	;volatile
  9596  0436  158E               	bsf	14,3	;volatile
  9597  0437  0008               	return
  9598  0438                     l358:	
  9599                           ;led.c: 70:         {;led.c: 71:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 1; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
  9600                           
  9601  0438  0022               	movlb	2	; select bank2
  9602  0439  100C               	bcf	12,0	;volatile
  9603  043A  178E               	bsf	14,7	;volatile
  9604  043B  108C               	bcf	12,1	;volatile
  9605  043C  118E               	bcf	14,3	;volatile
  9606  043D  0008               	return
  9607  043E                     l367:	
  9608                           ;led.c: 75:         {;led.c: 76:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
  9609                           
  9610  043E  0022               	movlb	2	; select bank2
  9611  043F  100C               	bcf	12,0	;volatile
  9612  0440  138E               	bcf	14,7	;volatile
  9613  0441  148C               	bsf	12,1	;volatile
  9614  0442  158E               	bsf	14,3	;volatile
  9615  0443  0008               	return
  9616  0444                     l376:	
  9617                           ;led.c: 80:         {;led.c: 81:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 1; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
  9618                           
  9619  0444  0022               	movlb	2	; select bank2
  9620  0445  100C               	bcf	12,0	;volatile
  9621  0446  138E               	bcf	14,7	;volatile
  9622  0447  148C               	bsf	12,1	;volatile
  9623  0448  118E               	bcf	14,3	;volatile
  9624  0449  0008               	return
  9625  044A                     l385:	
  9626                           ;led.c: 85:         {;led.c: 86:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 1
      +                          ; } while(0);
  9627                           
  9628  044A  0022               	movlb	2	; select bank2
  9629  044B  100C               	bcf	12,0	;volatile
  9630  044C  138E               	bcf	14,7	;volatile
  9631  044D  108C               	bcf	12,1	;volatile
  9632  044E  158E               	bsf	14,3	;volatile
  9633  044F  0008               	return
  9634  0450                     l394:	
  9635                           ;led.c: 90:         {;led.c: 91:             do { LATAbits.LATA0 = 0; } while(0);do { LA
      +                          TCbits.LATC7 = 0; } while(0);do { LATAbits.LATA1 = 0; } while(0);do { LATCbits.LATC3 = 0
      +                          ; } while(0);
  9636                           
  9637  0450  0022               	movlb	2	; select bank2
  9638  0451  100C               	bcf	12,0	;volatile
  9639  0452  138E               	bcf	14,7	;volatile
  9640  0453  108C               	bcf	12,1	;volatile
  9641  0454  118E               	bcf	14,3	;volatile
  9642  0455  0008               	return
  9643  0456                     l3236:	
  9644  0456  0873               	movf	LED_PROCESS@x,w
  9645  0457  00F1               	movwf	??_LED_PROCESS
  9646  0458  01F2               	clrf	??_LED_PROCESS+1
  9647                           
  9648                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9649                           ; Switch size 1, requested type "simple"
  9650                           ; Number of cases is 1, Range of values is 0 to 0
  9651                           ; switch strategies available:
  9652                           ; Name         Instructions Cycles
  9653                           ; simple_byte            4     3 (average)
  9654                           ; direct_byte            8     6 (fixed)
  9655                           ; jumptable            260     6 (fixed)
  9656                           ;	Chosen strategy is simple_byte
  9657  0459  0872               	movf	??_LED_PROCESS+1,w
  9658  045A  3A00               	xorlw	0	; case 0
  9659  045B  1903               	skipnz
  9660  045C  2C5E               	goto	l5014
  9661  045D  2C90               	goto	l402
  9662  045E                     l5014:	
  9663                           
  9664                           ; Switch size 1, requested type "simple"
  9665                           ; Number of cases is 16, Range of values is 0 to 15
  9666                           ; switch strategies available:
  9667                           ; Name         Instructions Cycles
  9668                           ; direct_byte           38     6 (fixed)
  9669                           ; simple_byte           49    25 (average)
  9670                           ; jumptable            260     6 (fixed)
  9671                           ;	Chosen strategy is simple_byte
  9672  045E  0871               	movf	??_LED_PROCESS,w
  9673  045F  3A00               	xorlw	0	; case 0
  9674  0460  1903               	skipnz
  9675  0461  2BF6               	goto	l258
  9676  0462  3A01               	xorlw	1	; case 1
  9677  0463  1903               	skipnz
  9678  0464  2BFC               	goto	l268
  9679  0465  3A03               	xorlw	3	; case 2
  9680  0466  1903               	skipnz
  9681  0467  2C02               	goto	l277
  9682  0468  3A01               	xorlw	1	; case 3
  9683  0469  1903               	skipnz
  9684  046A  2C08               	goto	l286
  9685  046B  3A07               	xorlw	7	; case 4
  9686  046C  1903               	skipnz
  9687  046D  2C0E               	goto	l295
  9688  046E  3A01               	xorlw	1	; case 5
  9689  046F  1903               	skipnz
  9690  0470  2C14               	goto	l304
  9691  0471  3A03               	xorlw	3	; case 6
  9692  0472  1903               	skipnz
  9693  0473  2C1A               	goto	l313
  9694  0474  3A01               	xorlw	1	; case 7
  9695  0475  1903               	skipnz
  9696  0476  2C20               	goto	l322
  9697  0477  3A0F               	xorlw	15	; case 8
  9698  0478  1903               	skipnz
  9699  0479  2C26               	goto	l331
  9700  047A  3A01               	xorlw	1	; case 9
  9701  047B  1903               	skipnz
  9702  047C  2C2C               	goto	l340
  9703  047D  3A03               	xorlw	3	; case 10
  9704  047E  1903               	skipnz
  9705  047F  2C32               	goto	l349
  9706  0480  3A01               	xorlw	1	; case 11
  9707  0481  1903               	skipnz
  9708  0482  2C38               	goto	l358
  9709  0483  3A07               	xorlw	7	; case 12
  9710  0484  1903               	skipnz
  9711  0485  2C3E               	goto	l367
  9712  0486  3A01               	xorlw	1	; case 13
  9713  0487  1903               	skipnz
  9714  0488  2C44               	goto	l376
  9715  0489  3A03               	xorlw	3	; case 14
  9716  048A  1903               	skipnz
  9717  048B  2C4A               	goto	l385
  9718  048C  3A01               	xorlw	1	; case 15
  9719  048D  1903               	skipnz
  9720  048E  2C50               	goto	l394
  9721  048F  2C90               	goto	l402
  9722  0490                     l402:	
  9723  0490  0008               	return
  9724  0491                     __end_of_LED_PROCESS:	
  9725                           
  9726                           	psect	text63
  9727  0E8F                     __ptext63:	
  9728 ;; *************** function _MTOUCH_Button_Initialize *****************
  9729 ;; Defined at:
  9730 ;;		line 167 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;  name            1    wreg     enum E3070
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;  name            1    9[COMMON] enum E3070
  9735 ;;  button          1   10[COMMON] PTR struct .
  9736 ;;		 -> mtouch_button(64), 
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      void 
  9739 ;; Registers used:
  9740 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9746 ;;      Params:         0       0       0       0       0       0       0       0
  9747 ;;      Locals:         2       0       0       0       0       0       0       0
  9748 ;;      Temps:          2       0       0       0       0       0       0       0
  9749 ;;      Totals:         4       0       0       0       0       0       0       0
  9750 ;;Total ram usage:        4 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    6
  9753 ;; This function calls:
  9754 ;;		_MTOUCH_Sensor_Calibrate
  9755 ;; This function is called by:
  9756 ;;		_MTOUCH_Button_InitializeAll
  9757 ;;		_Button_Service
  9758 ;;		_Button_State_NotPressed
  9759 ;;		_Button_State_Pressed
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _MTOUCH_Button_Initialize
  9765  0E8F                     _MTOUCH_Button_Initialize:	
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9769                           ;MTOUCH_Button_Initialize@name stored from wreg
  9770  0E8F  00F9               	movwf	MTOUCH_Button_Initialize@name
  9771                           
  9772                           ;mcc_generated_files/mtouch/mtouch_button.c: 167: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 168: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 169:     mtouch_button_t* button = &mtouch_button[name];
  9773  0E90  0879               	movf	MTOUCH_Button_Initialize@name,w
  9774  0E91  00F7               	movwf	??_MTOUCH_Button_Initialize
  9775  0E92  3003               	movlw	3
  9776  0E93                     u3665:	
  9777  0E93  35F7               	lslf	??_MTOUCH_Button_Initialize,f
  9778  0E94  3EFF               	addlw	-1
  9779  0E95  1D03               	skipz
  9780  0E96  2E93               	goto	u3665
  9781  0E97  3577               	lslf	??_MTOUCH_Button_Initialize,w
  9782  0E98  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  9783  0E99  00F8               	movwf	??_MTOUCH_Button_Initialize+1
  9784  0E9A  0878               	movf	??_MTOUCH_Button_Initialize+1,w
  9785  0E9B  00FA               	movwf	MTOUCH_Button_Initialize@button
  9786                           
  9787                           ;mcc_generated_files/mtouch/mtouch_button.c: 171:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
  9788  0E9C  087A               	movf	MTOUCH_Button_Initialize@button,w
  9789  0E9D  3E02               	addlw	2
  9790  0E9E  0086               	movwf	6
  9791  0E9F  3001               	movlw	1	; select bank2/3
  9792  0EA0  0087               	movwf	7
  9793  0EA1  0181               	clrf	1
  9794                           
  9795                           ;mcc_generated_files/mtouch/mtouch_button.c: 172:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
  9796  0EA2  087A               	movf	MTOUCH_Button_Initialize@button,w
  9797  0EA3  3E05               	addlw	5
  9798  0EA4  0086               	movwf	6
  9799  0EA5  3001               	movlw	1	; select bank2/3
  9800  0EA6  0087               	movwf	7
  9801  0EA7  3000               	movlw	0
  9802  0EA8  3FC0               	movwi [0]fsr1
  9803  0EA9  3000               	movlw	0
  9804  0EAA  3FC1               	movwi [1]fsr1
  9805  0EAB  3FC2               	movwi [2]fsr1
  9806  0EAC  3FC3               	movwi [3]fsr1
  9807                           
  9808                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
  9809  0EAD  087A               	movf	MTOUCH_Button_Initialize@button,w
  9810  0EAE  3E0A               	addlw	10
  9811  0EAF  0086               	movwf	6
  9812  0EB0  3001               	movlw	1	; select bank2/3
  9813  0EB1  0087               	movwf	7
  9814  0EB2  3000               	movlw	0
  9815  0EB3  3FC0               	movwi [0]fsr1
  9816  0EB4  3FC1               	movwi [1]fsr1
  9817                           
  9818                           ;mcc_generated_files/mtouch/mtouch_button.c: 174:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
  9819  0EB5  087A               	movf	MTOUCH_Button_Initialize@button,w
  9820  0EB6  3E0C               	addlw	12
  9821  0EB7  0086               	movwf	6
  9822  0EB8  3001               	movlw	1	; select bank2/3
  9823  0EB9  0087               	movwf	7
  9824  0EBA  3000               	movlw	0
  9825  0EBB  3FC0               	movwi [0]fsr1
  9826  0EBC  3FC1               	movwi [1]fsr1
  9827                           
  9828                           ;mcc_generated_files/mtouch/mtouch_button.c: 176:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
  9829  0EBD  0A7A               	incf	MTOUCH_Button_Initialize@button,w
  9830  0EBE  0086               	movwf	6
  9831  0EBF  3001               	movlw	1	; select bank2/3
  9832  0EC0  0087               	movwf	7
  9833  0EC1  0801               	movf	1,w
  9834  0EC2  318B  239A         	fcall	_MTOUCH_Sensor_Calibrate
  9835  0EC4  0008               	return
  9836  0EC5                     __end_of_MTOUCH_Button_Initialize:	
  9837                           
  9838                           	psect	text64
  9839  0B9A                     __ptext64:	
  9840 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  9841 ;; Defined at:
  9842 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;  sensor          1    wreg     enum E2854
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;  sensor          1    6[COMMON] enum E2854
  9847 ;; Return value:  Size  Location     Type
  9848 ;;                  1    wreg      void 
  9849 ;; Registers used:
  9850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9856 ;;      Params:         0       0       0       0       0       0       0       0
  9857 ;;      Locals:         1       0       0       0       0       0       0       0
  9858 ;;      Temps:          1       0       0       0       0       0       0       0
  9859 ;;      Totals:         2       0       0       0       0       0       0       0
  9860 ;;Total ram usage:        2 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    5
  9863 ;; This function calls:
  9864 ;;		___bmul
  9865 ;; This function is called by:
  9866 ;;		_MTOUCH_Sensor_Initialize
  9867 ;;		_MTOUCH_Button_Initialize
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           
  9872                           ;psect for function _MTOUCH_Sensor_Calibrate
  9873  0B9A                     _MTOUCH_Sensor_Calibrate:	
  9874                           
  9875                           ;incstack = 0
  9876                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9877                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
  9878  0B9A  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
  9879                           
  9880                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 914:     if(sensor < 4u)
  9881  0B9B  3004               	movlw	4
  9882  0B9C  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
  9883  0B9D  1803               	skipnc
  9884  0B9E  0008               	return
  9885                           
  9886                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 916:         mtouch_sensor[sensor].calibrated = 0;
  9887  0B9F  3009               	movlw	9
  9888  0BA0  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
  9889  0BA1  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
  9890  0BA2  00F1               	movwf	___bmul@multiplicand
  9891  0BA3  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
  9892  0BA4  318B  2389         	fcall	___bmul
  9893  0BA6  3EA8               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  9894  0BA7  0086               	movwf	6
  9895  0BA8  0187               	clrf	7
  9896  0BA9  1101               	bcf	1,2
  9897  0BAA  0008               	return
  9898  0BAB                     __end_of_MTOUCH_Sensor_Calibrate:	
  9899                           
  9900                           	psect	text65
  9901  0524                     __ptext65:	
  9902 ;; *************** function _Button_Baseline_Update *****************
  9903 ;; Defined at:
  9904 ;;		line 489 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9905 ;; Parameters:    Size  Location     Type
  9906 ;;  button          1    wreg     PTR struct .
  9907 ;;		 -> mtouch_button(64), 
  9908 ;; Auto vars:     Size  Location     Type
  9909 ;;  button          1    7[COMMON] PTR struct .
  9910 ;;		 -> mtouch_button(64), 
  9911 ;; Return value:  Size  Location     Type
  9912 ;;                  1    wreg      void 
  9913 ;; Registers used:
  9914 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9915 ;; Tracked objects:
  9916 ;;		On entry : 0/0
  9917 ;;		On exit  : 0/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9920 ;;      Params:         0       0       0       0       0       0       0       0
  9921 ;;      Locals:         1       0       0       0       0       0       0       0
  9922 ;;      Temps:          6       0       0       0       0       0       0       0
  9923 ;;      Totals:         7       0       0       0       0       0       0       0
  9924 ;;Total ram usage:        7 bytes
  9925 ;; Hardware stack levels used:    1
  9926 ;; Hardware stack levels required when called:    4
  9927 ;; This function calls:
  9928 ;;		Nothing
  9929 ;; This function is called by:
  9930 ;;		_Button_State_Initializing
  9931 ;;		_Button_State_NotPressed
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           
  9936                           ;psect for function _Button_Baseline_Update
  9937  0524                     _Button_Baseline_Update:	
  9938                           
  9939                           ;incstack = 0
  9940                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  9941                           ;Button_Baseline_Update@button stored from wreg
  9942  0524  00F7               	movwf	Button_Baseline_Update@button
  9943                           
  9944                           ;mcc_generated_files/mtouch/mtouch_button.c: 489: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 490: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 491:     if (GIE == (uint8_t)1)
  9945  0525  1F8B               	btfss	11,7	;volatile
  9946  0526  2D6E               	goto	l3568
  9947                           
  9948                           ;mcc_generated_files/mtouch/mtouch_button.c: 492:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 493:         GIE = (uint8_t)0;
  9949  0527  138B               	bcf	11,7	;volatile
  9950                           
  9951                           ;mcc_generated_files/mtouch/mtouch_button.c: 494:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
  9952  0528  0877               	movf	Button_Baseline_Update@button,w
  9953  0529  3E05               	addlw	5
  9954  052A  0086               	movwf	6
  9955  052B  3001               	movlw	1	; select bank2/3
  9956  052C  0087               	movwf	7
  9957  052D  3F40               	moviw [0]fsr1
  9958  052E  00F1               	movwf	??_Button_Baseline_Update
  9959  052F  3F41               	moviw [1]fsr1
  9960  0530  00F2               	movwf	??_Button_Baseline_Update+1
  9961  0531  3F42               	moviw [2]fsr1
  9962  0532  00F3               	movwf	??_Button_Baseline_Update+2
  9963  0533  3F43               	moviw [3]fsr1
  9964  0534  00F4               	movwf	??_Button_Baseline_Update+3
  9965  0535  3004               	movlw	4
  9966  0536                     u2375:	
  9967  0536  36F4               	lsrf	??_Button_Baseline_Update+3,f
  9968  0537  0CF3               	rrf	??_Button_Baseline_Update+2,f
  9969  0538  0CF2               	rrf	??_Button_Baseline_Update+1,f
  9970  0539  0CF1               	rrf	??_Button_Baseline_Update,f
  9971  053A  0B89               	decfsz	9,f
  9972  053B  2D36               	goto	u2375
  9973  053C  0877               	movf	Button_Baseline_Update@button,w
  9974  053D  3E05               	addlw	5
  9975  053E  0086               	movwf	6
  9976  053F  3001               	movlw	1	; select bank2/3
  9977  0540  0087               	movwf	7
  9978  0541  0871               	movf	??_Button_Baseline_Update,w
  9979  0542  0281               	subwf	1,f
  9980  0543  3141               	addfsr 1,1
  9981  0544  0872               	movf	??_Button_Baseline_Update+1,w
  9982  0545  3B81               	subwfb	1,f
  9983  0546  3141               	addfsr 1,1
  9984  0547  0873               	movf	??_Button_Baseline_Update+2,w
  9985  0548  3B81               	subwfb	1,f
  9986  0549  3141               	addfsr 1,1
  9987  054A  0874               	movf	??_Button_Baseline_Update+3,w
  9988  054B  3B81               	subwfb	1,f
  9989  054C  317D               	addfsr 1,-3
  9990                           
  9991                           ;mcc_generated_files/mtouch/mtouch_button.c: 495:         button->baseline += button->re
      +                          ading;
  9992  054D  0877               	movf	Button_Baseline_Update@button,w
  9993  054E  3E03               	addlw	3
  9994  054F  0086               	movwf	6
  9995  0550  3001               	movlw	1	; select bank2/3
  9996  0551  0087               	movwf	7
  9997  0552  3F40               	moviw [0]fsr1
  9998  0553  00F1               	movwf	??_Button_Baseline_Update
  9999  0554  3F41               	moviw [1]fsr1
 10000  0555  00F2               	movwf	??_Button_Baseline_Update+1
 10001  0556  0871               	movf	??_Button_Baseline_Update,w
 10002  0557  00F3               	movwf	??_Button_Baseline_Update+2
 10003  0558  0872               	movf	??_Button_Baseline_Update+1,w
 10004  0559  00F4               	movwf	??_Button_Baseline_Update+3
 10005  055A  01F5               	clrf	??_Button_Baseline_Update+4
 10006  055B  01F6               	clrf	??_Button_Baseline_Update+5
 10007  055C  0877               	movf	Button_Baseline_Update@button,w
 10008  055D  3E05               	addlw	5
 10009  055E  0086               	movwf	6
 10010  055F  3001               	movlw	1	; select bank2/3
 10011  0560  0087               	movwf	7
 10012  0561  0873               	movf	??_Button_Baseline_Update+2,w
 10013  0562  0781               	addwf	1,f
 10014  0563  3141               	addfsr 1,1
 10015  0564  0874               	movf	??_Button_Baseline_Update+3,w
 10016  0565  3D81               	addwfc	1,f
 10017  0566  3141               	addfsr 1,1
 10018  0567  0875               	movf	??_Button_Baseline_Update+4,w
 10019  0568  3D81               	addwfc	1,f
 10020  0569  3141               	addfsr 1,1
 10021  056A  0876               	movf	??_Button_Baseline_Update+5,w
 10022  056B  3D81               	addwfc	1,f
 10023                           
 10024                           ;mcc_generated_files/mtouch/mtouch_button.c: 496:         GIE = (uint8_t)1;
 10025  056C  178B               	bsf	11,7	;volatile
 10026                           
 10027                           ;mcc_generated_files/mtouch/mtouch_button.c: 497:     }
 10028  056D  0008               	return
 10029  056E                     l3568:	
 10030                           
 10031                           ;mcc_generated_files/mtouch/mtouch_button.c: 499:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 500:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 10032  056E  0877               	movf	Button_Baseline_Update@button,w
 10033  056F  3E05               	addlw	5
 10034  0570  0086               	movwf	6
 10035  0571  3001               	movlw	1	; select bank2/3
 10036  0572  0087               	movwf	7
 10037  0573  3F40               	moviw [0]fsr1
 10038  0574  00F1               	movwf	??_Button_Baseline_Update
 10039  0575  3F41               	moviw [1]fsr1
 10040  0576  00F2               	movwf	??_Button_Baseline_Update+1
 10041  0577  3F42               	moviw [2]fsr1
 10042  0578  00F3               	movwf	??_Button_Baseline_Update+2
 10043  0579  3F43               	moviw [3]fsr1
 10044  057A  00F4               	movwf	??_Button_Baseline_Update+3
 10045  057B  3004               	movlw	4
 10046  057C                     u2385:	
 10047  057C  36F4               	lsrf	??_Button_Baseline_Update+3,f
 10048  057D  0CF3               	rrf	??_Button_Baseline_Update+2,f
 10049  057E  0CF2               	rrf	??_Button_Baseline_Update+1,f
 10050  057F  0CF1               	rrf	??_Button_Baseline_Update,f
 10051  0580  0B89               	decfsz	9,f
 10052  0581  2D7C               	goto	u2385
 10053  0582  0877               	movf	Button_Baseline_Update@button,w
 10054  0583  3E05               	addlw	5
 10055  0584  0086               	movwf	6
 10056  0585  3001               	movlw	1	; select bank2/3
 10057  0586  0087               	movwf	7
 10058  0587  0871               	movf	??_Button_Baseline_Update,w
 10059  0588  0281               	subwf	1,f
 10060  0589  3141               	addfsr 1,1
 10061  058A  0872               	movf	??_Button_Baseline_Update+1,w
 10062  058B  3B81               	subwfb	1,f
 10063  058C  3141               	addfsr 1,1
 10064  058D  0873               	movf	??_Button_Baseline_Update+2,w
 10065  058E  3B81               	subwfb	1,f
 10066  058F  3141               	addfsr 1,1
 10067  0590  0874               	movf	??_Button_Baseline_Update+3,w
 10068  0591  3B81               	subwfb	1,f
 10069  0592  317D               	addfsr 1,-3
 10070                           
 10071                           ;mcc_generated_files/mtouch/mtouch_button.c: 501:         button->baseline += button->re
      +                          ading;
 10072  0593  0877               	movf	Button_Baseline_Update@button,w
 10073  0594  3E03               	addlw	3
 10074  0595  0086               	movwf	6
 10075  0596  3001               	movlw	1	; select bank2/3
 10076  0597  0087               	movwf	7
 10077  0598  3F40               	moviw [0]fsr1
 10078  0599  00F1               	movwf	??_Button_Baseline_Update
 10079  059A  3F41               	moviw [1]fsr1
 10080  059B  00F2               	movwf	??_Button_Baseline_Update+1
 10081  059C  0871               	movf	??_Button_Baseline_Update,w
 10082  059D  00F3               	movwf	??_Button_Baseline_Update+2
 10083  059E  0872               	movf	??_Button_Baseline_Update+1,w
 10084  059F  00F4               	movwf	??_Button_Baseline_Update+3
 10085  05A0  01F5               	clrf	??_Button_Baseline_Update+4
 10086  05A1  01F6               	clrf	??_Button_Baseline_Update+5
 10087  05A2  0877               	movf	Button_Baseline_Update@button,w
 10088  05A3  3E05               	addlw	5
 10089  05A4  0086               	movwf	6
 10090  05A5  3001               	movlw	1	; select bank2/3
 10091  05A6  0087               	movwf	7
 10092  05A7  0873               	movf	??_Button_Baseline_Update+2,w
 10093  05A8  0781               	addwf	1,f
 10094  05A9  3141               	addfsr 1,1
 10095  05AA  0874               	movf	??_Button_Baseline_Update+3,w
 10096  05AB  3D81               	addwfc	1,f
 10097  05AC  3141               	addfsr 1,1
 10098  05AD  0875               	movf	??_Button_Baseline_Update+4,w
 10099  05AE  3D81               	addwfc	1,f
 10100  05AF  3141               	addfsr 1,1
 10101  05B0  0876               	movf	??_Button_Baseline_Update+5,w
 10102  05B1  3D81               	addwfc	1,f
 10103  05B2  0008               	return
 10104  05B3                     __end_of_Button_Baseline_Update:	
 10105                           
 10106                           	psect	text66
 10107  0DFF                     __ptext66:	
 10108 ;; *************** function _Button_Baseline_Initialize *****************
 10109 ;; Defined at:
 10110 ;;		line 483 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;  button          1    wreg     PTR struct .
 10113 ;;		 -> mtouch_button(64), 
 10114 ;; Auto vars:     Size  Location     Type
 10115 ;;  button          1    9[COMMON] PTR struct .
 10116 ;;		 -> mtouch_button(64), 
 10117 ;; Return value:  Size  Location     Type
 10118 ;;                  1    wreg      void 
 10119 ;; Registers used:
 10120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10121 ;; Tracked objects:
 10122 ;;		On entry : 0/0
 10123 ;;		On exit  : 0/0
 10124 ;;		Unchanged: 0/0
 10125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10126 ;;      Params:         0       0       0       0       0       0       0       0
 10127 ;;      Locals:         1       0       0       0       0       0       0       0
 10128 ;;      Temps:          0       4       0       0       0       0       0       0
 10129 ;;      Totals:         1       4       0       0       0       0       0       0
 10130 ;;Total ram usage:        5 bytes
 10131 ;; Hardware stack levels used:    1
 10132 ;; Hardware stack levels required when called:    6
 10133 ;; This function calls:
 10134 ;;		_MTOUCH_Sensor_RawSample_Get
 10135 ;; This function is called by:
 10136 ;;		_Button_State_Initializing
 10137 ;; This function uses a non-reentrant model
 10138 ;;
 10139                           
 10140                           
 10141                           ;psect for function _Button_Baseline_Initialize
 10142  0DFF                     _Button_Baseline_Initialize:	
 10143                           
 10144                           ;incstack = 0
 10145                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10146                           ;Button_Baseline_Initialize@button stored from wreg
 10147  0DFF  00F9               	movwf	Button_Baseline_Initialize@button
 10148                           
 10149                           ;mcc_generated_files/mtouch/mtouch_button.c: 483: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 484: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 485:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 10150  0E00  0A79               	incf	Button_Baseline_Initialize@button,w
 10151  0E01  0086               	movwf	6
 10152  0E02  3001               	movlw	1	; select bank2/3
 10153  0E03  0087               	movwf	7
 10154  0E04  0801               	movf	1,w
 10155  0E05  318C  2461  318D   	fcall	_MTOUCH_Sensor_RawSample_Get
 10156  0E08  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10157  0E09  0020               	movlb	0	; select bank0
 10158  0E0A  00A0               	movwf	??_Button_Baseline_Initialize
 10159  0E0B  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10160  0E0C  00A1               	movwf	??_Button_Baseline_Initialize+1
 10161  0E0D  01A2               	clrf	??_Button_Baseline_Initialize+2
 10162  0E0E  01A3               	clrf	??_Button_Baseline_Initialize+3
 10163  0E0F  0879               	movf	Button_Baseline_Initialize@button,w
 10164  0E10  3E05               	addlw	5
 10165  0E11  0086               	movwf	6
 10166  0E12  3001               	movlw	1	; select bank2/3
 10167  0E13  0087               	movwf	7
 10168  0E14  0820               	movf	??_Button_Baseline_Initialize,w
 10169  0E15  3FC0               	movwi [0]fsr1
 10170  0E16  0821               	movf	??_Button_Baseline_Initialize+1,w
 10171  0E17  3FC1               	movwi [1]fsr1
 10172  0E18  0822               	movf	??_Button_Baseline_Initialize+2,w
 10173  0E19  3FC2               	movwi [2]fsr1
 10174  0E1A  0823               	movf	??_Button_Baseline_Initialize+3,w
 10175  0E1B  3FC3               	movwi [3]fsr1
 10176                           
 10177                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 10178  0E1C  0879               	movf	Button_Baseline_Initialize@button,w
 10179  0E1D  3E05               	addlw	5
 10180  0E1E  0086               	movwf	6
 10181  0E1F  3001               	movlw	1	; select bank2/3
 10182  0E20  0087               	movwf	7
 10183  0E21  3004               	movlw	4
 10184  0E22                     u3675:	
 10185  0E22  3581               	lslf	1,f
 10186  0E23  3141               	addfsr 1,1
 10187  0E24  0D81               	rlf	1,f
 10188  0E25  3141               	addfsr 1,1
 10189  0E26  0D81               	rlf	1,f
 10190  0E27  3141               	addfsr 1,1
 10191  0E28  0D81               	rlf	1,f
 10192  0E29  317D               	addfsr 1,-3
 10193  0E2A  0B89               	decfsz	9,f
 10194  0E2B  2E22               	goto	u3675
 10195  0E2C  0008               	return
 10196  0E2D                     __end_of_Button_Baseline_Initialize:	
 10197                           
 10198                           	psect	text67
 10199  0B2F                     __ptext67:	
 10200 ;; *************** function _Button_Reading_Update *****************
 10201 ;; Defined at:
 10202 ;;		line 456 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;  button          1    wreg     PTR struct .
 10205 ;;		 -> mtouch_button(64), 
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;  button          1    0[BANK0 ] PTR struct .
 10208 ;;		 -> mtouch_button(64), 
 10209 ;; Return value:  Size  Location     Type
 10210 ;;                  1    wreg      void 
 10211 ;; Registers used:
 10212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10218 ;;      Params:         0       0       0       0       0       0       0       0
 10219 ;;      Locals:         0       1       0       0       0       0       0       0
 10220 ;;      Temps:          0       0       0       0       0       0       0       0
 10221 ;;      Totals:         0       1       0       0       0       0       0       0
 10222 ;;Total ram usage:        1 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; Hardware stack levels required when called:    7
 10225 ;; This function calls:
 10226 ;;		_Button_Reading_Update_Helper
 10227 ;; This function is called by:
 10228 ;;		_Button_Service
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           
 10233                           ;psect for function _Button_Reading_Update
 10234  0B2F                     _Button_Reading_Update:	
 10235                           
 10236                           ;incstack = 0
 10237                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10238                           ;Button_Reading_Update@button stored from wreg
 10239  0B2F  0020               	movlb	0	; select bank0
 10240  0B30  00A0               	movwf	Button_Reading_Update@button
 10241                           
 10242                           ;mcc_generated_files/mtouch/mtouch_button.c: 456: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 457: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 458:     if (GIE == (uint8_t) 1)
 10243  0B31  1F8B               	btfss	11,7	;volatile
 10244  0B32  2B39               	goto	l4630
 10245                           
 10246                           ;mcc_generated_files/mtouch/mtouch_button.c: 459:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 460:         GIE = (uint8_t) 0;
 10247  0B33  138B               	bcf	11,7	;volatile
 10248                           
 10249                           ;mcc_generated_files/mtouch/mtouch_button.c: 461:         Button_Reading_Update_Helper(b
      +                          utton);
 10250  0B34  0820               	movf	Button_Reading_Update@button,w
 10251  0B35  318E  26FC         	fcall	_Button_Reading_Update_Helper
 10252                           
 10253                           ;mcc_generated_files/mtouch/mtouch_button.c: 462:         GIE = (uint8_t) 1;
 10254  0B37  178B               	bsf	11,7	;volatile
 10255                           
 10256                           ;mcc_generated_files/mtouch/mtouch_button.c: 463:     }
 10257  0B38  0008               	return
 10258  0B39                     l4630:	
 10259                           
 10260                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         Button_Reading_Update_Helper(button);
 10261  0B39  0820               	movf	Button_Reading_Update@button,w
 10262  0B3A  318E  26FC         	fcall	_Button_Reading_Update_Helper
 10263  0B3C  0008               	return
 10264  0B3D                     __end_of_Button_Reading_Update:	
 10265                           
 10266                           	psect	text68
 10267  0EFC                     __ptext68:	
 10268 ;; *************** function _Button_Reading_Update_Helper *****************
 10269 ;; Defined at:
 10270 ;;		line 470 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;  button          1    wreg     PTR struct .
 10273 ;;		 -> mtouch_button(64), 
 10274 ;; Auto vars:     Size  Location     Type
 10275 ;;  button          1   11[COMMON] PTR struct .
 10276 ;;		 -> mtouch_button(64), 
 10277 ;; Return value:  Size  Location     Type
 10278 ;;                  1    wreg      void 
 10279 ;; Registers used:
 10280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10281 ;; Tracked objects:
 10282 ;;		On entry : 0/0
 10283 ;;		On exit  : 0/0
 10284 ;;		Unchanged: 0/0
 10285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10286 ;;      Params:         0       0       0       0       0       0       0       0
 10287 ;;      Locals:         1       0       0       0       0       0       0       0
 10288 ;;      Temps:          2       0       0       0       0       0       0       0
 10289 ;;      Totals:         3       0       0       0       0       0       0       0
 10290 ;;Total ram usage:        3 bytes
 10291 ;; Hardware stack levels used:    1
 10292 ;; Hardware stack levels required when called:    6
 10293 ;; This function calls:
 10294 ;;		_MTOUCH_Sensor_RawSample_Get
 10295 ;; This function is called by:
 10296 ;;		_Button_Reading_Update
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           
 10301                           ;psect for function _Button_Reading_Update_Helper
 10302  0EFC                     _Button_Reading_Update_Helper:	
 10303                           
 10304                           ;incstack = 0
 10305                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10306                           ;Button_Reading_Update_Helper@button stored from wreg
 10307  0EFC  00FB               	movwf	Button_Reading_Update_Helper@button
 10308                           
 10309                           ;mcc_generated_files/mtouch/mtouch_button.c: 470: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 471: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 472:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 10310  0EFD  087B               	movf	Button_Reading_Update_Helper@button,w
 10311  0EFE  3E02               	addlw	2
 10312  0EFF  0086               	movwf	6
 10313  0F00  3001               	movlw	1	; select bank2/3
 10314  0F01  0087               	movwf	7
 10315  0F02  0801               	movf	1,w
 10316  0F03  1903               	btfsc	3,2
 10317  0F04  2F38               	goto	l4546
 10318                           
 10319                           ;mcc_generated_files/mtouch/mtouch_button.c: 473:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 474:         button->reading -= button->reading>>((uint8_t)2u);
 10320  0F05  087B               	movf	Button_Reading_Update_Helper@button,w
 10321  0F06  3E03               	addlw	3
 10322  0F07  0086               	movwf	6
 10323  0F08  3001               	movlw	1	; select bank2/3
 10324  0F09  0087               	movwf	7
 10325  0F0A  3F40               	moviw [0]fsr1
 10326  0F0B  00F9               	movwf	??_Button_Reading_Update_Helper
 10327  0F0C  3F41               	moviw [1]fsr1
 10328  0F0D  00FA               	movwf	??_Button_Reading_Update_Helper+1
 10329  0F0E  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 10330  0F0F  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 10331  0F10  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 10332  0F11  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 10333  0F12  087B               	movf	Button_Reading_Update_Helper@button,w
 10334  0F13  3E03               	addlw	3
 10335  0F14  0086               	movwf	6
 10336  0F15  3001               	movlw	1	; select bank2/3
 10337  0F16  0087               	movwf	7
 10338  0F17  0879               	movf	??_Button_Reading_Update_Helper,w
 10339  0F18  0281               	subwf	1,f
 10340  0F19  3141               	addfsr 1,1
 10341  0F1A  087A               	movf	??_Button_Reading_Update_Helper+1,w
 10342  0F1B  3B81               	subwfb	1,f
 10343  0F1C  317F               	addfsr 1,-1
 10344                           
 10345                           ;mcc_generated_files/mtouch/mtouch_button.c: 475:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 10346  0F1D  0A7B               	incf	Button_Reading_Update_Helper@button,w
 10347  0F1E  0086               	movwf	6
 10348  0F1F  3001               	movlw	1	; select bank2/3
 10349  0F20  0087               	movwf	7
 10350  0F21  0801               	movf	1,w
 10351  0F22  318C  2461         	fcall	_MTOUCH_Sensor_RawSample_Get
 10352  0F24  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10353  0F25  00F9               	movwf	??_Button_Reading_Update_Helper
 10354  0F26  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10355  0F27  00FA               	movwf	??_Button_Reading_Update_Helper+1
 10356  0F28  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 10357  0F29  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 10358  0F2A  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 10359  0F2B  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 10360  0F2C  087B               	movf	Button_Reading_Update_Helper@button,w
 10361  0F2D  3E03               	addlw	3
 10362  0F2E  0086               	movwf	6
 10363  0F2F  3001               	movlw	1	; select bank2/3
 10364  0F30  0087               	movwf	7
 10365  0F31  0879               	movf	??_Button_Reading_Update_Helper,w
 10366  0F32  0781               	addwf	1,f
 10367  0F33  3141               	addfsr 1,1
 10368  0F34  087A               	movf	??_Button_Reading_Update_Helper+1,w
 10369  0F35  3D81               	addwfc	1,f
 10370  0F36  317F               	addfsr 1,-1
 10371                           
 10372                           ;mcc_generated_files/mtouch/mtouch_button.c: 476:     }
 10373  0F37  0008               	return
 10374  0F38                     l4546:	
 10375                           
 10376                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 479:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 10377  0F38  0A7B               	incf	Button_Reading_Update_Helper@button,w
 10378  0F39  0086               	movwf	6
 10379  0F3A  3001               	movlw	1	; select bank2/3
 10380  0F3B  0087               	movwf	7
 10381  0F3C  0801               	movf	1,w
 10382  0F3D  318C  2461         	fcall	_MTOUCH_Sensor_RawSample_Get
 10383  0F3F  087B               	movf	Button_Reading_Update_Helper@button,w
 10384  0F40  3E03               	addlw	3
 10385  0F41  0086               	movwf	6
 10386  0F42  3001               	movlw	1	; select bank2/3
 10387  0F43  0087               	movwf	7
 10388  0F44  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10389  0F45  3FC0               	movwi [0]fsr1
 10390  0F46  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10391  0F47  3FC1               	movwi [1]fsr1
 10392  0F48  0008               	return
 10393  0F49                     __end_of_Button_Reading_Update_Helper:	
 10394                           
 10395                           	psect	text69
 10396  0C61                     __ptext69:	
 10397 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 10398 ;; Defined at:
 10399 ;;		line 800 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;  name            1    wreg     enum E2854
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  name            1    8[COMMON] enum E2854
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  2    5[COMMON] unsigned short 
 10406 ;; Registers used:
 10407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10413 ;;      Params:         2       0       0       0       0       0       0       0
 10414 ;;      Locals:         1       0       0       0       0       0       0       0
 10415 ;;      Temps:          1       0       0       0       0       0       0       0
 10416 ;;      Totals:         4       0       0       0       0       0       0       0
 10417 ;;Total ram usage:        4 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    5
 10420 ;; This function calls:
 10421 ;;		___bmul
 10422 ;; This function is called by:
 10423 ;;		_Button_Reading_Update_Helper
 10424 ;;		_Button_Baseline_Initialize
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           
 10429                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 10430  0C61                     _MTOUCH_Sensor_RawSample_Get:	
 10431                           
 10432                           ;incstack = 0
 10433                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10434                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 10435  0C61  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 10436                           
 10437                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 800: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          801: {;mcc_generated_files/mtouch/mtouch_sensor.c: 802:     if (name < 4u)
 10438  0C62  3004               	movlw	4
 10439  0C63  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 10440  0C64  1803               	skipnc
 10441  0C65  2C75               	goto	l4472
 10442                           
 10443                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 803:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 804:         return mtouch_sensor[name].rawSample;
 10444  0C66  3009               	movlw	9
 10445  0C67  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 10446  0C68  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 10447  0C69  00F1               	movwf	___bmul@multiplicand
 10448  0C6A  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 10449  0C6B  318B  2389         	fcall	___bmul
 10450  0C6D  3EA6               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
 10451  0C6E  0086               	movwf	6
 10452  0C6F  0187               	clrf	7
 10453  0C70  3F40               	moviw [0]fsr1
 10454  0C71  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 10455  0C72  3F41               	moviw [1]fsr1
 10456  0C73  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 10457  0C74  0008               	return
 10458  0C75                     l4472:	
 10459                           
 10460                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:         return (mtouch_sensor_sample_t
      +                          )0;
 10461  0C75  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 10462  0C76  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 10463  0C77  0008               	return
 10464  0C78                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 10465                           
 10466                           	psect	text70
 10467  0B89                     __ptext70:	
 10468 ;; *************** function ___bmul *****************
 10469 ;; Defined at:
 10470 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;  multiplier      1    wreg     unsigned char 
 10473 ;;  multiplicand    1    1[COMMON] unsigned char 
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;  multiplier      1    4[COMMON] unsigned char 
 10476 ;;  product         1    3[COMMON] unsigned char 
 10477 ;; Return value:  Size  Location     Type
 10478 ;;                  1    wreg      unsigned char 
 10479 ;; Registers used:
 10480 ;;		wreg, status,2, status,0
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10486 ;;      Params:         1       0       0       0       0       0       0       0
 10487 ;;      Locals:         2       0       0       0       0       0       0       0
 10488 ;;      Temps:          1       0       0       0       0       0       0       0
 10489 ;;      Totals:         4       0       0       0       0       0       0       0
 10490 ;;Total ram usage:        4 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    4
 10493 ;; This function calls:
 10494 ;;		Nothing
 10495 ;; This function is called by:
 10496 ;;		_MTOUCH_Sensor_Initialize
 10497 ;;		_MTOUCH_Sensor_RawSample_Get
 10498 ;;		_MTOUCH_Sensor_Enable
 10499 ;;		_MTOUCH_Sensor_Calibrate
 10500 ;;		_MTOUCH_Sensor_isCalibrated
 10501 ;;		_MTOUCH_Sensor_wasSampled
 10502 ;;		_MTOUCH_Sensor_isAnySensorActive
 10503 ;;		_MTOUCH_Sensor_Disable
 10504 ;;		_MTOUCH_Sensor_isEnabled
 10505 ;;		_MTOUCH_Sensor_isActive
 10506 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 10507 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 10508 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 10509 ;;		_MTOUCH_Sensor_Oversampling_Get
 10510 ;;		_MTOUCH_Sensor_Oversampling_Set
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           
 10515                           ;psect for function ___bmul
 10516  0B89                     ___bmul:	
 10517                           
 10518                           ;incstack = 0
 10519                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10520                           ;___bmul@multiplier stored from wreg
 10521  0B89  00F4               	movwf	___bmul@multiplier
 10522  0B8A  01F3               	clrf	___bmul@product
 10523  0B8B                     l4246:	
 10524  0B8B  1C74               	btfss	___bmul@multiplier,0
 10525  0B8C  2B91               	goto	l4250
 10526  0B8D  0871               	movf	___bmul@multiplicand,w
 10527  0B8E  00F2               	movwf	??___bmul
 10528  0B8F  0872               	movf	??___bmul,w
 10529  0B90  07F3               	addwf	___bmul@product,f
 10530  0B91                     l4250:	
 10531  0B91  1003               	clrc
 10532  0B92  0DF1               	rlf	___bmul@multiplicand,f
 10533  0B93  1003               	clrc
 10534  0B94  0CF4               	rrf	___bmul@multiplier,f
 10535  0B95  0874               	movf	___bmul@multiplier,w
 10536  0B96  1D03               	btfss	3,2
 10537  0B97  2B8B               	goto	l4246
 10538  0B98  0873               	movf	___bmul@product,w
 10539  0B99  0008               	return
 10540  0B9A                     __end_of___bmul:	
 10541                           
 10542                           	psect	text71
 10543  063D                     __ptext71:	
 10544 ;; *************** function _Button_Deviation_Update *****************
 10545 ;; Defined at:
 10546 ;;		line 407 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10547 ;; Parameters:    Size  Location     Type
 10548 ;;  button          1    wreg     PTR struct .
 10549 ;;		 -> mtouch_button(64), 
 10550 ;; Auto vars:     Size  Location     Type
 10551 ;;  button          1    0[BANK0 ] PTR struct .
 10552 ;;		 -> mtouch_button(64), 
 10553 ;;  deviation       4    1[BANK0 ] long 
 10554 ;; Return value:  Size  Location     Type
 10555 ;;                  1    wreg      void 
 10556 ;; Registers used:
 10557 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10563 ;;      Params:         0       0       0       0       0       0       0       0
 10564 ;;      Locals:         0       5       0       0       0       0       0       0
 10565 ;;      Temps:         10       0       0       0       0       0       0       0
 10566 ;;      Totals:        10       5       0       0       0       0       0       0
 10567 ;;Total ram usage:       15 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:    4
 10570 ;; This function calls:
 10571 ;;		Nothing
 10572 ;; This function is called by:
 10573 ;;		_Button_Service
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           
 10578                           ;psect for function _Button_Deviation_Update
 10579  063D                     _Button_Deviation_Update:	
 10580                           
 10581                           ;incstack = 0
 10582                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10583                           ;Button_Deviation_Update@button stored from wreg
 10584  063D  0020               	movlb	0	; select bank0
 10585  063E  00A0               	movwf	Button_Deviation_Update@button
 10586                           
 10587                           ;mcc_generated_files/mtouch/mtouch_button.c: 407: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 408: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 409:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 411:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 10588  063F  0820               	movf	Button_Deviation_Update@button,w
 10589  0640  3E05               	addlw	5
 10590  0641  0086               	movwf	6
 10591  0642  3001               	movlw	1	; select bank2/3
 10592  0643  0087               	movwf	7
 10593  0644  3F40               	moviw [0]fsr1
 10594  0645  00F1               	movwf	??_Button_Deviation_Update
 10595  0646  3F41               	moviw [1]fsr1
 10596  0647  00F2               	movwf	??_Button_Deviation_Update+1
 10597  0648  3F42               	moviw [2]fsr1
 10598  0649  00F3               	movwf	??_Button_Deviation_Update+2
 10599  064A  3F43               	moviw [3]fsr1
 10600  064B  00F4               	movwf	??_Button_Deviation_Update+3
 10601  064C  3004               	movlw	4
 10602  064D                     u2545:	
 10603  064D  36F4               	lsrf	??_Button_Deviation_Update+3,f
 10604  064E  0CF3               	rrf	??_Button_Deviation_Update+2,f
 10605  064F  0CF2               	rrf	??_Button_Deviation_Update+1,f
 10606  0650  0CF1               	rrf	??_Button_Deviation_Update,f
 10607  0651  0B89               	decfsz	9,f
 10608  0652  2E4D               	goto	u2545
 10609  0653  0820               	movf	Button_Deviation_Update@button,w
 10610  0654  3E03               	addlw	3
 10611  0655  0086               	movwf	6
 10612  0656  3001               	movlw	1	; select bank2/3
 10613  0657  0087               	movwf	7
 10614  0658  3F40               	moviw [0]fsr1
 10615  0659  00F5               	movwf	??_Button_Deviation_Update+4
 10616  065A  3F41               	moviw [1]fsr1
 10617  065B  00F6               	movwf	??_Button_Deviation_Update+5
 10618  065C  0875               	movf	??_Button_Deviation_Update+4,w
 10619  065D  00F7               	movwf	??_Button_Deviation_Update+6
 10620  065E  0876               	movf	??_Button_Deviation_Update+5,w
 10621  065F  00F8               	movwf	??_Button_Deviation_Update+7
 10622  0660  01F9               	clrf	??_Button_Deviation_Update+8
 10623  0661  01FA               	clrf	??_Button_Deviation_Update+9
 10624  0662  0871               	movf	??_Button_Deviation_Update,w
 10625  0663  02F7               	subwf	??_Button_Deviation_Update+6,f
 10626  0664  0872               	movf	??_Button_Deviation_Update+1,w
 10627  0665  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 10628  0666  0873               	movf	??_Button_Deviation_Update+2,w
 10629  0667  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 10630  0668  0874               	movf	??_Button_Deviation_Update+3,w
 10631  0669  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 10632  066A  087A               	movf	??_Button_Deviation_Update+9,w
 10633  066B  00A4               	movwf	Button_Deviation_Update@deviation+3
 10634  066C  0879               	movf	??_Button_Deviation_Update+8,w
 10635  066D  00A3               	movwf	Button_Deviation_Update@deviation+2
 10636  066E  0878               	movf	??_Button_Deviation_Update+7,w
 10637  066F  00A2               	movwf	Button_Deviation_Update@deviation+1
 10638  0670  0877               	movf	??_Button_Deviation_Update+6,w
 10639  0671  00A1               	movwf	Button_Deviation_Update@deviation
 10640                           
 10641                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     deviation = deviation >> (button->
      +                          scaling);
 10642  0672  0821               	movf	Button_Deviation_Update@deviation,w
 10643  0673  00F1               	movwf	??_Button_Deviation_Update
 10644  0674  0822               	movf	Button_Deviation_Update@deviation+1,w
 10645  0675  00F2               	movwf	??_Button_Deviation_Update+1
 10646  0676  0823               	movf	Button_Deviation_Update@deviation+2,w
 10647  0677  00F3               	movwf	??_Button_Deviation_Update+2
 10648  0678  0824               	movf	Button_Deviation_Update@deviation+3,w
 10649  0679  00F4               	movwf	??_Button_Deviation_Update+3
 10650  067A  0820               	movf	Button_Deviation_Update@button,w
 10651  067B  3E0F               	addlw	15
 10652  067C  0086               	movwf	6
 10653  067D  3001               	movlw	1	; select bank2/3
 10654  067E  0087               	movwf	7
 10655  067F  0A01               	incf	1,w
 10656  0680  2E85               	goto	u2550
 10657  0681                     u2555:	
 10658  0681  37F4               	asrf	??_Button_Deviation_Update+3,f
 10659  0682  0CF3               	rrf	??_Button_Deviation_Update+2,f
 10660  0683  0CF2               	rrf	??_Button_Deviation_Update+1,f
 10661  0684  0CF1               	rrf	??_Button_Deviation_Update,f
 10662  0685                     u2550:	
 10663  0685  0B89               	decfsz	9,f
 10664  0686  2E81               	goto	u2555
 10665  0687  0874               	movf	??_Button_Deviation_Update+3,w
 10666  0688  00A4               	movwf	Button_Deviation_Update@deviation+3
 10667  0689  0873               	movf	??_Button_Deviation_Update+2,w
 10668  068A  00A3               	movwf	Button_Deviation_Update@deviation+2
 10669  068B  0872               	movf	??_Button_Deviation_Update+1,w
 10670  068C  00A2               	movwf	Button_Deviation_Update@deviation+1
 10671  068D  0871               	movf	??_Button_Deviation_Update,w
 10672  068E  00A1               	movwf	Button_Deviation_Update@deviation
 10673                           
 10674                           ;mcc_generated_files/mtouch/mtouch_button.c: 417:     if (deviation > ((0x7f)))
 10675  068F  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 10676  0690  2EA6               	goto	l3682
 10677  0691  0824               	movf	Button_Deviation_Update@deviation+3,w
 10678  0692  1D03               	btfss	3,2
 10679  0693  2E9E               	goto	l3680
 10680  0694  0823               	movf	Button_Deviation_Update@deviation+2,w
 10681  0695  1D03               	btfss	3,2
 10682  0696  2E9E               	goto	l3680
 10683  0697  0822               	movf	Button_Deviation_Update@deviation+1,w
 10684  0698  1D03               	btfss	3,2
 10685  0699  2E9E               	goto	l3680
 10686  069A  3080               	movlw	128
 10687  069B  0221               	subwf	Button_Deviation_Update@deviation,w
 10688  069C  1C03               	btfss	3,0
 10689  069D  2EA6               	goto	l3682
 10690  069E                     l3680:	
 10691                           
 10692                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 419:         deviation = ((0x7f));
 10693  069E  3000               	movlw	0
 10694  069F  00A4               	movwf	Button_Deviation_Update@deviation+3
 10695  06A0  3000               	movlw	0
 10696  06A1  00A3               	movwf	Button_Deviation_Update@deviation+2
 10697  06A2  3000               	movlw	0
 10698  06A3  00A2               	movwf	Button_Deviation_Update@deviation+1
 10699  06A4  307F               	movlw	127
 10700  06A5  00A1               	movwf	Button_Deviation_Update@deviation
 10701  06A6                     l3682:	
 10702                           
 10703                           ;mcc_generated_files/mtouch/mtouch_button.c: 421:     if (deviation < ((-1-0x7f)))
 10704  06A6  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 10705  06A7  2EBA               	goto	l3686
 10706  06A8  3080               	movlw	128
 10707  06A9  0221               	subwf	Button_Deviation_Update@deviation,w
 10708  06AA  30FF               	movlw	255
 10709  06AB  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 10710  06AC  30FF               	movlw	255
 10711  06AD  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 10712  06AE  30FF               	movlw	255
 10713  06AF  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 10714  06B0  1803               	btfsc	3,0
 10715  06B1  2EBA               	goto	l3686
 10716                           
 10717                           ;mcc_generated_files/mtouch/mtouch_button.c: 422:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 423:         deviation = ((-1-0x7f));
 10718  06B2  30FF               	movlw	255
 10719  06B3  00A4               	movwf	Button_Deviation_Update@deviation+3
 10720  06B4  30FF               	movlw	255
 10721  06B5  00A3               	movwf	Button_Deviation_Update@deviation+2
 10722  06B6  30FF               	movlw	255
 10723  06B7  00A2               	movwf	Button_Deviation_Update@deviation+1
 10724  06B8  3080               	movlw	128
 10725  06B9  00A1               	movwf	Button_Deviation_Update@deviation
 10726  06BA                     l3686:	
 10727                           
 10728                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 10729  06BA  0821               	movf	Button_Deviation_Update@deviation,w
 10730  06BB  00F1               	movwf	??_Button_Deviation_Update
 10731  06BC  0820               	movf	Button_Deviation_Update@button,w
 10732  06BD  3E09               	addlw	9
 10733  06BE  0086               	movwf	6
 10734  06BF  3001               	movlw	1	; select bank2/3
 10735  06C0  0087               	movwf	7
 10736  06C1  0871               	movf	??_Button_Deviation_Update,w
 10737  06C2  0081               	movwf	1
 10738  06C3  0008               	return
 10739  06C4                     __end_of_Button_Deviation_Update:	
 10740                           
 10741                           	psect	text72
 10742  0A8B                     __ptext72:	
 10743 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 10744 ;; Defined at:
 10745 ;;		line 536 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10746 ;; Parameters:    Size  Location     Type
 10747 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
 10748 ;;		 -> myButtonPressedCallback(1), 
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;		None
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  1    wreg      void 
 10753 ;; Registers used:
 10754 ;;		wreg
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10760 ;;      Params:         2       0       0       0       0       0       0       0
 10761 ;;      Locals:         0       0       0       0       0       0       0       0
 10762 ;;      Temps:          0       0       0       0       0       0       0       0
 10763 ;;      Totals:         2       0       0       0       0       0       0       0
 10764 ;;Total ram usage:        2 bytes
 10765 ;; Hardware stack levels used:    1
 10766 ;; Hardware stack levels required when called:    4
 10767 ;; This function calls:
 10768 ;;		Nothing
 10769 ;; This function is called by:
 10770 ;;		_main
 10771 ;; This function uses a non-reentrant model
 10772 ;;
 10773                           
 10774                           
 10775                           ;psect for function _MTOUCH_Button_SetPressedCallback
 10776  0A8B                     _MTOUCH_Button_SetPressedCallback:	
 10777                           
 10778                           ;mcc_generated_files/mtouch/mtouch_button.c: 536: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          537: {;mcc_generated_files/mtouch/mtouch_button.c: 538:     callback_pressed = callback;
 10779                           
 10780                           ;incstack = 0
 10781                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 10782  0A8B  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 10783  0A8C  0020               	movlb	0	; select bank0
 10784  0A8D  00E8               	movwf	_callback_pressed+1
 10785  0A8E  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 10786  0A8F  00E7               	movwf	_callback_pressed
 10787  0A90  0008               	return
 10788  0A91                     __end_of_MTOUCH_Button_SetPressedCallback:	
 10789                           
 10790                           	psect	text73
 10791  0A85                     __ptext73:	
 10792 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 10793 ;; Defined at:
 10794 ;;		line 540 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10795 ;; Parameters:    Size  Location     Type
 10796 ;;  callback        2    1[COMMON] PTR FTN(enum E3070,)void
 10797 ;;		 -> myButtonReleasedCallback(1), 
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;		None
 10800 ;; Return value:  Size  Location     Type
 10801 ;;                  1    wreg      void 
 10802 ;; Registers used:
 10803 ;;		wreg
 10804 ;; Tracked objects:
 10805 ;;		On entry : 0/0
 10806 ;;		On exit  : 0/0
 10807 ;;		Unchanged: 0/0
 10808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10809 ;;      Params:         2       0       0       0       0       0       0       0
 10810 ;;      Locals:         0       0       0       0       0       0       0       0
 10811 ;;      Temps:          0       0       0       0       0       0       0       0
 10812 ;;      Totals:         2       0       0       0       0       0       0       0
 10813 ;;Total ram usage:        2 bytes
 10814 ;; Hardware stack levels used:    1
 10815 ;; Hardware stack levels required when called:    4
 10816 ;; This function calls:
 10817 ;;		Nothing
 10818 ;; This function is called by:
 10819 ;;		_main
 10820 ;; This function uses a non-reentrant model
 10821 ;;
 10822                           
 10823                           
 10824                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 10825  0A85                     _MTOUCH_Button_SetNotPressedCallback:	
 10826                           
 10827                           ;mcc_generated_files/mtouch/mtouch_button.c: 540: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 541: {;mcc_generated_files/mtouch/mtouch_button.c: 542:     callback_notPressed = cal
      +                          lback;
 10828                           
 10829                           ;incstack = 0
 10830                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 10831  0A85  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 10832  0A86  0020               	movlb	0	; select bank0
 10833  0A87  00E6               	movwf	_callback_notPressed+1
 10834  0A88  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 10835  0A89  00E5               	movwf	_callback_notPressed
 10836  0A8A  0008               	return
 10837  0A8B                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 10838                           
 10839                           	psect	intentry
 10840  0004                     __pintentry:	
 10841 ;; *************** function _INTERRUPT_InterruptManager *****************
 10842 ;; Defined at:
 10843 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10844 ;; Parameters:    Size  Location     Type
 10845 ;;		None
 10846 ;; Auto vars:     Size  Location     Type
 10847 ;;		None
 10848 ;; Return value:  Size  Location     Type
 10849 ;;                  1    wreg      void 
 10850 ;; Registers used:
 10851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10852 ;; Tracked objects:
 10853 ;;		On entry : 0/0
 10854 ;;		On exit  : 0/0
 10855 ;;		Unchanged: 0/0
 10856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10857 ;;      Params:         0       0       0       0       0       0       0       0
 10858 ;;      Locals:         0       0       0       0       0       0       0       0
 10859 ;;      Temps:          0       0       0       0       0       0       0       0
 10860 ;;      Totals:         0       0       0       0       0       0       0       0
 10861 ;;Total ram usage:        0 bytes
 10862 ;; Hardware stack levels used:    1
 10863 ;; Hardware stack levels required when called:    3
 10864 ;; This function calls:
 10865 ;;		Absolute function
 10866 ;;		_EUSART_Receive_ISR
 10867 ;; This function is called by:
 10868 ;;		Interrupt level 1
 10869 ;; This function uses a non-reentrant model
 10870 ;;
 10871                           
 10872  0004                     _INTERRUPT_InterruptManager:	
 10873                           
 10874                           ;incstack = 0
 10875  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10876                           
 10877                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10878  0005  3180               	pagesel	$
 10879                           
 10880                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 10881  0006  1F0B               	btfss	11,6	;volatile
 10882  0007  2813               	goto	i1l145
 10883                           
 10884                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 10885  0008  0021               	movlb	1	; select bank1
 10886  0009  1E91               	btfss	17,5	;volatile
 10887  000A  2813               	goto	i1l145
 10888  000B  0020               	movlb	0	; select bank0
 10889  000C  1E91               	btfss	17,5	;volatile
 10890  000D  2813               	goto	i1l145
 10891                           
 10892                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_RxDefaultInterruptHandler();
 10893  000E  086F               	movf	_EUSART_RxDefaultInterruptHandler+1,w
 10894  000F  008A               	movwf	10
 10895  0010  086E               	movf	_EUSART_RxDefaultInterruptHandler,w
 10896  0011  000A               	callw
 10897  0012  3180               	pagesel	$
 10898  0013                     i1l145:	
 10899                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 10900                           
 10901  0013  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10902  0014  0009               	retfie
 10903  0015                     __end_of_INTERRUPT_InterruptManager:	
 10904                           
 10905                           	psect	text75
 10906  0E5D                     __ptext75:	
 10907 ;; *************** function _EUSART_Receive_ISR *****************
 10908 ;; Defined at:
 10909 ;;		line 180 in file "mcc_generated_files/eusart.c"
 10910 ;; Parameters:    Size  Location     Type
 10911 ;;		None
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;		None
 10914 ;; Return value:  Size  Location     Type
 10915 ;;                  1    wreg      void 
 10916 ;; Registers used:
 10917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10923 ;;      Params:         0       0       0       0       0       0       0       0
 10924 ;;      Locals:         0       0       0       0       0       0       0       0
 10925 ;;      Temps:          0       0       0       0       0       0       0       0
 10926 ;;      Totals:         0       0       0       0       0       0       0       0
 10927 ;;Total ram usage:        0 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; Hardware stack levels required when called:    2
 10930 ;; This function calls:
 10931 ;;		Absolute function
 10932 ;;		_EUSART_DefaultErrorHandler
 10933 ;;		_EUSART_DefaultFramingErrorHandler
 10934 ;;		_EUSART_DefaultOverrunErrorHandler
 10935 ;;		_EUSART_RxDataHandler
 10936 ;; This function is called by:
 10937 ;;		_EUSART_Initialize
 10938 ;;		_INTERRUPT_InterruptManager
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           
 10943                           ;psect for function _EUSART_Receive_ISR
 10944  0E5D                     _EUSART_Receive_ISR:	
 10945                           
 10946                           ;mcc_generated_files/eusart.c: 183:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 10947                           
 10948                           ;incstack = 0
 10949                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10950  0E5D  087C               	movf	_eusartRxHead,w	;volatile
 10951  0E5E  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10952  0E5F  0086               	movwf	6
 10953  0E60  0187               	clrf	7
 10954  0E61  0181               	clrf	1
 10955                           
 10956                           ;mcc_generated_files/eusart.c: 185:     if(RCSTAbits.FERR){
 10957  0E62  0023               	movlb	3	; select bank3
 10958  0E63  1D1D               	btfss	29,2	;volatile
 10959  0E64  2E70               	goto	i1l3968
 10960                           
 10961                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 10962  0E65  087C               	movf	_eusartRxHead,w	;volatile
 10963  0E66  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10964  0E67  0086               	movwf	6
 10965  0E68  0187               	clrf	7
 10966  0E69  1481               	bsf	1,1
 10967                           
 10968                           ;mcc_generated_files/eusart.c: 187:         EUSART_FramingErrorHandler();
 10969  0E6A  0020               	movlb	0	; select bank0
 10970  0E6B  086D               	movf	_EUSART_FramingErrorHandler+1,w
 10971  0E6C  008A               	movwf	10
 10972  0E6D  086C               	movf	_EUSART_FramingErrorHandler,w
 10973  0E6E  000A               	callw
 10974  0E6F  318E               	pagesel	$
 10975  0E70                     i1l3968:	
 10976                           
 10977                           ;mcc_generated_files/eusart.c: 190:     if(RCSTAbits.OERR){
 10978  0E70  0023               	movlb	3	; select bank3
 10979  0E71  1C9D               	btfss	29,1	;volatile
 10980  0E72  2E7E               	goto	i1l3974
 10981                           
 10982                           ;mcc_generated_files/eusart.c: 191:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 10983  0E73  087C               	movf	_eusartRxHead,w	;volatile
 10984  0E74  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 10985  0E75  0086               	movwf	6
 10986  0E76  0187               	clrf	7
 10987  0E77  1501               	bsf	1,2
 10988                           
 10989                           ;mcc_generated_files/eusart.c: 192:         EUSART_OverrunErrorHandler();
 10990  0E78  0021               	movlb	1	; select bank1
 10991  0E79  084F               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 10992  0E7A  008A               	movwf	10
 10993  0E7B  084E               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 10994  0E7C  000A               	callw
 10995  0E7D  318E               	pagesel	$
 10996  0E7E                     i1l3974:	
 10997                           
 10998                           ;mcc_generated_files/eusart.c: 195:     if(eusartRxStatusBuffer[eusartRxHead].status){
 10999  0E7E  087C               	movf	_eusartRxHead,w	;volatile
 11000  0E7F  3E49               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 11001  0E80  0086               	movwf	6
 11002  0E81  0187               	clrf	7
 11003  0E82  0801               	movf	1,w
 11004  0E83  1903               	btfsc	3,2
 11005  0E84  2E8C               	goto	i1l3978
 11006                           
 11007                           ;mcc_generated_files/eusart.c: 196:         EUSART_ErrorHandler();
 11008  0E85  0021               	movlb	1	; select bank1
 11009  0E86  084D               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 11010  0E87  008A               	movwf	10
 11011  0E88  084C               	movf	_EUSART_ErrorHandler^(0+128),w
 11012  0E89  000A               	callw
 11013  0E8A  318E               	pagesel	$
 11014                           
 11015                           ;mcc_generated_files/eusart.c: 197:     } else {
 11016  0E8B  0008               	return
 11017  0E8C                     i1l3978:	
 11018                           
 11019                           ;mcc_generated_files/eusart.c: 198:         EUSART_RxDataHandler();
 11020  0E8C  318C  244A         	fcall	_EUSART_RxDataHandler
 11021  0E8E  0008               	return
 11022  0E8F                     __end_of_EUSART_Receive_ISR:	
 11023                           
 11024                           	psect	text76
 11025  0A7C                     __ptext76:	
 11026 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 11027 ;; Defined at:
 11028 ;;		line 216 in file "mcc_generated_files/eusart.c"
 11029 ;; Parameters:    Size  Location     Type
 11030 ;;		None
 11031 ;; Auto vars:     Size  Location     Type
 11032 ;;		None
 11033 ;; Return value:  Size  Location     Type
 11034 ;;                  1    wreg      void 
 11035 ;; Registers used:
 11036 ;;		None
 11037 ;; Tracked objects:
 11038 ;;		On entry : 0/0
 11039 ;;		On exit  : 0/0
 11040 ;;		Unchanged: 0/0
 11041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11042 ;;      Params:         0       0       0       0       0       0       0       0
 11043 ;;      Locals:         0       0       0       0       0       0       0       0
 11044 ;;      Temps:          0       0       0       0       0       0       0       0
 11045 ;;      Totals:         0       0       0       0       0       0       0       0
 11046 ;;Total ram usage:        0 bytes
 11047 ;; Hardware stack levels used:    1
 11048 ;; This function calls:
 11049 ;;		Nothing
 11050 ;; This function is called by:
 11051 ;;		_EUSART_Initialize
 11052 ;;		_EUSART_Receive_ISR
 11053 ;; This function uses a non-reentrant model
 11054 ;;
 11055                           
 11056                           
 11057                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 11058  0A7C                     _EUSART_DefaultOverrunErrorHandler:	
 11059                           
 11060                           ;mcc_generated_files/eusart.c: 219:     RCSTAbits.CREN = 0;
 11061                           
 11062                           ;incstack = 0
 11063                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 11064  0A7C  0023               	movlb	3	; select bank3
 11065  0A7D  121D               	bcf	29,4	;volatile
 11066                           
 11067                           ;mcc_generated_files/eusart.c: 220:     RCSTAbits.CREN = 1;
 11068  0A7E  161D               	bsf	29,4	;volatile
 11069  0A7F  0008               	return
 11070  0A80                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 11071                           
 11072                           	psect	text77
 11073  0A6C                     __ptext77:	
 11074 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 11075 ;; Defined at:
 11076 ;;		line 214 in file "mcc_generated_files/eusart.c"
 11077 ;; Parameters:    Size  Location     Type
 11078 ;;		None
 11079 ;; Auto vars:     Size  Location     Type
 11080 ;;		None
 11081 ;; Return value:  Size  Location     Type
 11082 ;;                  1    wreg      void 
 11083 ;; Registers used:
 11084 ;;		None
 11085 ;; Tracked objects:
 11086 ;;		On entry : 0/0
 11087 ;;		On exit  : 0/0
 11088 ;;		Unchanged: 0/0
 11089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11090 ;;      Params:         0       0       0       0       0       0       0       0
 11091 ;;      Locals:         0       0       0       0       0       0       0       0
 11092 ;;      Temps:          0       0       0       0       0       0       0       0
 11093 ;;      Totals:         0       0       0       0       0       0       0       0
 11094 ;;Total ram usage:        0 bytes
 11095 ;; Hardware stack levels used:    1
 11096 ;; This function calls:
 11097 ;;		Nothing
 11098 ;; This function is called by:
 11099 ;;		_EUSART_Initialize
 11100 ;;		_EUSART_Receive_ISR
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           
 11105                           ;psect for function _EUSART_DefaultFramingErrorHandler
 11106  0A6C                     _EUSART_DefaultFramingErrorHandler:	
 11107                           
 11108                           ;incstack = 0
 11109                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 11110  0A6C  0008               	return
 11111  0A6D                     __end_of_EUSART_DefaultFramingErrorHandler:	
 11112                           
 11113                           	psect	text78
 11114  0A70                     __ptext78:	
 11115 ;; *************** function _EUSART_DefaultErrorHandler *****************
 11116 ;; Defined at:
 11117 ;;		line 224 in file "mcc_generated_files/eusart.c"
 11118 ;; Parameters:    Size  Location     Type
 11119 ;;		None
 11120 ;; Auto vars:     Size  Location     Type
 11121 ;;		None
 11122 ;; Return value:  Size  Location     Type
 11123 ;;                  1    wreg      void 
 11124 ;; Registers used:
 11125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11126 ;; Tracked objects:
 11127 ;;		On entry : 0/0
 11128 ;;		On exit  : 0/0
 11129 ;;		Unchanged: 0/0
 11130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11131 ;;      Params:         0       0       0       0       0       0       0       0
 11132 ;;      Locals:         0       0       0       0       0       0       0       0
 11133 ;;      Temps:          0       0       0       0       0       0       0       0
 11134 ;;      Totals:         0       0       0       0       0       0       0       0
 11135 ;;Total ram usage:        0 bytes
 11136 ;; Hardware stack levels used:    1
 11137 ;; Hardware stack levels required when called:    1
 11138 ;; This function calls:
 11139 ;;		_EUSART_RxDataHandler
 11140 ;; This function is called by:
 11141 ;;		_EUSART_Initialize
 11142 ;;		_EUSART_Receive_ISR
 11143 ;; This function uses a non-reentrant model
 11144 ;;
 11145                           
 11146                           
 11147                           ;psect for function _EUSART_DefaultErrorHandler
 11148  0A70                     _EUSART_DefaultErrorHandler:	
 11149                           
 11150                           ;mcc_generated_files/eusart.c: 225:     EUSART_RxDataHandler();
 11151                           
 11152                           ;incstack = 0
 11153                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11154  0A70  318C  244A         	fcall	_EUSART_RxDataHandler
 11155  0A72  0008               	return
 11156  0A73                     __end_of_EUSART_DefaultErrorHandler:	
 11157                           
 11158                           	psect	text79
 11159  0C4A                     __ptext79:	
 11160 ;; *************** function _EUSART_RxDataHandler *****************
 11161 ;; Defined at:
 11162 ;;		line 204 in file "mcc_generated_files/eusart.c"
 11163 ;; Parameters:    Size  Location     Type
 11164 ;;		None
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;		None
 11167 ;; Return value:  Size  Location     Type
 11168 ;;                  1    wreg      void 
 11169 ;; Registers used:
 11170 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11171 ;; Tracked objects:
 11172 ;;		On entry : 0/0
 11173 ;;		On exit  : 0/0
 11174 ;;		Unchanged: 0/0
 11175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11176 ;;      Params:         0       0       0       0       0       0       0       0
 11177 ;;      Locals:         0       0       0       0       0       0       0       0
 11178 ;;      Temps:          1       0       0       0       0       0       0       0
 11179 ;;      Totals:         1       0       0       0       0       0       0       0
 11180 ;;Total ram usage:        1 bytes
 11181 ;; Hardware stack levels used:    1
 11182 ;; This function calls:
 11183 ;;		Nothing
 11184 ;; This function is called by:
 11185 ;;		_EUSART_Receive_ISR
 11186 ;;		_EUSART_DefaultErrorHandler
 11187 ;; This function uses a non-reentrant model
 11188 ;;
 11189                           
 11190                           
 11191                           ;psect for function _EUSART_RxDataHandler
 11192  0C4A                     _EUSART_RxDataHandler:	
 11193                           
 11194                           ;mcc_generated_files/eusart.c: 206:     eusartRxBuffer[eusartRxHead++] = RCREG;
 11195                           
 11196                           ;incstack = 0
 11197                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 11198  0C4A  0023               	movlb	3	; select bank3
 11199  0C4B  0819               	movf	25,w	;volatile
 11200  0C4C  00F0               	movwf	??_EUSART_RxDataHandler
 11201  0C4D  087C               	movf	_eusartRxHead,w
 11202  0C4E  3EC4               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 11203  0C4F  0086               	movwf	6
 11204  0C50  0187               	clrf	7
 11205  0C51  0870               	movf	??_EUSART_RxDataHandler,w
 11206  0C52  0081               	movwf	1
 11207  0C53  3001               	movlw	1
 11208  0C54  00F0               	movwf	??_EUSART_RxDataHandler
 11209  0C55  0870               	movf	??_EUSART_RxDataHandler,w
 11210  0C56  07FC               	addwf	_eusartRxHead,f	;volatile
 11211                           
 11212                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 11213  0C57  3008               	movlw	8
 11214  0C58  027C               	subwf	_eusartRxHead,w	;volatile
 11215  0C59  1803               	btfsc	3,0
 11216                           
 11217                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         eus
      +                          artRxHead = 0;
 11218  0C5A  01FC               	clrf	_eusartRxHead	;volatile
 11219                           
 11220                           ;mcc_generated_files/eusart.c: 211:     eusartRxCount++;
 11221  0C5B  3001               	movlw	1
 11222  0C5C  00F0               	movwf	??_EUSART_RxDataHandler
 11223  0C5D  0870               	movf	??_EUSART_RxDataHandler,w
 11224  0C5E  0020               	movlb	0	; select bank0
 11225  0C5F  07DD               	addwf	_eusartRxCount,f	;volatile
 11226  0C60  0008               	return
 11227  0C61                     __end_of_EUSART_RxDataHandler:	
 11228  007E                     btemp	set	126	;btemp
 11229  007E                     int$flags	set	126
 11230  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    73
    Data        49
    BSS         95
    Persistent  40
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     41      80
    BANK1            80      0      48
    BANK2            80      0      64
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2416$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Service$2416	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@d1	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> mtouch_button_init(CODE[64]), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_Service@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    sp__memcpy	PTR void  size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 64
		 -> mtouch_button(BANK2[64]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonReleasedCallback(), 

    callback_pressed	PTR FTN(enum E3070,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), myButtonPressedCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    S768$sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    S768$sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 36
		 -> mtouch_sensor(BANK1[36]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _myButtonPressedCallback->_MTOUCH_Button_Buttonmask_Get
    _MTOUCH_Button_Buttonmask_Get->_MTOUCH_Button_isPressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   28367
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4370
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23801
                                             40 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8907
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8808
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1446
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1       0
                                              7 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    2029
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              2     1      1     202
                                              7 COMMON     2     1      1
                        _LED_PROCESS
       _MTOUCH_Button_Buttonmask_Get
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (6) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_Buttonmask_Get                         4     4      0     158
                                              3 COMMON     4     4      0
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              7 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
 ---------------------------------------------------------------------------------
 (10) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
             _MTOUCH_Button_Buttonmask_Get
               _MTOUCH_Button_isPressed
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      CD       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      30       8       60.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      CD      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jul 05 15:04:20 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                        ___bmul@product 0073  
                                        ?_LED_PROCESS 0070                                           __CFG_CP$OFF 0000  
                             ?_Sensor_autoCalibration 0070                            __end_of_Sensor_setInactive 0AC9  
                           _Sensor_setCalibratAcqTime 0B08                                           __CFG_LVP$ON 0000  
                                                 l304 0414                                                   l313 041A  
                                                 l322 0420                                                   l402 0490  
                                                 l331 0426                                                   l340 042C  
                                                 l239 0CA4                                                   l258 03F6  
                                                 l268 03FC                                                   l349 0432  
                                                 l277 0402                                                   l358 0438  
                                                 l286 0408                                                   l367 043E  
                                                 l295 040E                                                   l376 0444  
                                                 l720 0104                                                   l385 044A  
                                                 l394 0450                                                   l725 010B  
                                                 l718 0108                                                   l735 01AB  
                                                 l737 01C2                                                   l689 0217  
                                                 l954 0334                                                   _GIE 005F  
                                                 _PR2 001B                                                   _abs 0C78  
                              ??_EUSART_RxDataHandler 0070                        ?_EUSART_SetFramingErrorHandler 0071  
                             ?_Sensor_loadADCSettings 0072                                       _TMR2_Initialize 0ADF  
                                        __CFG_BORV$LO 0000                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0072                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 0073  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                                l1104 0365                                                  l1113 036B  
                                                l1122 0371                                                  l1203 03A7  
                                                l1131 0377                                                  ?_abs 0071  
                                                l1028 0D2C                                                  l1212 03AD  
                                                l1140 037D                                                  l1221 03B3  
                                                l1149 0383                                                  l1229 03F3  
                                                l1085 0359                                                  l1158 0389  
                                                l1167 038F                                                  l1095 035F  
                                                l3104 0CC1                                                  l1176 0395  
                                                l1185 039B                                                  l1194 03A1  
                                                l3060 0DD4                                                  l3222 0D1A  
                                                l3062 0DE3                                                  l3134 0B87  
                                                l3072 0DF6                                                  l3144 0B1B  
                                                l3066 0DE5                                                  l3170 026E  
                                                l5010 0510                                                  l3236 0456  
                                                l5012 03C1                                                  l3156 0213  
                                                l5014 045E                                                  l3246 03B9  
                                                l3190 05F2                                                  l3174 0281  
                                                l3176 0293                                                  l4400 01A2  
                                                l5008 050B                                                  l4250 0B91  
                                                l4322 00A8                                                  l4306 0090  
                                                l3196 0621                                                  l3188 05EE  
                                                l4246 0B8B                                                  l4318 009E  
                                                l4510 06F8                                                  l4502 06F4  
                                                l4432 01CE                                                  l4512 070B  
                                                l4602 0C07                                                  l4442 01EA  
                                                l4338 00D3                                                  l3634 0D73  
                                                l4436 01D6                                                  l4428 01C6  
                                                l4372 010E                                                  l4364 00FF  
                                                l4348 00E5                                                  l4284 0082  
                                                l4276 006E                                                  l4516 0724  
                                                l3492 0EEB                                                  l4620 0DB0  
                                                l4630 0B39                                                  l4286 0088  
                                                l4294 008A                                                  l3494 0EED  
                                                l4710 04CD                                                  l3680 069E  
                                                l4472 0C75                                                  l3568 056E  
                                                l4448 01FC                                                  l4384 0153  
                                                l4288 009C                                                  l4720 04ED  
                                                l4704 04BE                                                  l3682 06A6  
                                                l4546 0F38                                                  l3498 0EF8  
                                                l4562 07AE                                                  l4714 04DD  
                                                l4636 0FB4                                                  l4652 02F3  
                                                l4396 0188                                                  l4388 016E  
                                                l3686 06BA                                                  l4638 0FB8  
                                                l4494 06E1                                                  l4590 07FA  
                                                l4582 07E1                                                  l4574 07C9  
                                                l4726 04FE                                                  l4752 0F8A  
                                                l4568 07B6                                                  l4728 0521  
                                                l4808 0CCE                                                  l4680 0B4C  
                                                l4658 032B                                                  l4586 07F1  
                                                l4578 07D1                                                  l4668 0762  
                                                l3796 0C35                                                  l4774 0C29  
                                                l4694 0CED                                                  l4768 0C20  
                                                l4788 0B5B                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u1805 05DC  
                                                u2550 0685                                                  u2375 0536  
                                                u2545 064D                                                  u2385 057C  
                                                u1665 0C81                                                  u1825 0613  
                                                u1690 0CBF                                                  u2555 0681  
                                                u1685 0CB0                                                  u1775 02A7  
                                                u2745 0C38                                                  u1874 0D26  
                                                u1875 0D25                                                  u1795 05D2  
                                                u3645 0712                                                  u3665 0E93  
                                                u3675 0E22                                                  u3845 0FE1  
                                                u3875 0309                                                  u3975 0F4E  
                          Button_State_Pressed@button 0024                                                  _TMR2 001A  
                                                _WPUA 020C                                                  _WPUB 020D  
                   __size_of_Sensor_Acq_ExecutePacket 01BE                              _Sensor_getScanGroupIndex 0DD2  
                           ?_Sensor_Acq_ExecutePacket 007B                                          __CFG_WRT$OFF 0000  
                                  _MTOUCH_needReburst 0002                                                  abs@a 0071  
                                                _main 0C8F                  __size_of_MTOUCH_Button_InitializeAll 001C  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                __size_of_MTOUCH_Sensor_InitializeAll 000E                                                  btemp 007E  
                                                start 0015                                     ___bmul@multiplier 0074  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                  MTOUCH_Button_Buttonmask_Get@output 0075                        __end_of_Sensor_autoCalibration 063D  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1045          Sensor_Scanfrequency_Evaluation@frequency_hop 1040  
                            _myButtonReleasedCallback 0A6D                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 001B                         __size_of_Button_State_Pressed 0066  
                                               ??_abs 0073                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 0078                         ??_MTOUCH_Sensor_RawSample_Get 0077  
                       Sensor_RawSample_Update@sensor 0077                         myButtonPressedCallback@button 0077  
                           __size_of_Sensor_isEnabled 0010                        __size_of_OSCILLATOR_Initialize 0006  
                       __end_of_OSCILLATOR_Initialize 0AAF     Sensor_Scanfrequency_Evaluation@best_packet_sample 0036  
                 __end_of_Sensor_isCalibratingAcqTime 0ADF                           _Sensor_isCalibratingAcqTime 0AD7  
                                               ?_main 0070                                         __CFG_WDTE$OFF 0000  
                      __end_of_Sensor_loadADCSettings 02B4                                                 _T2CON 001C  
                             __size_of_Button_Service 0055                                                 i1l145 0013  
                                               _RCREG 0199                                                 _RCSTA 019D  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 _TXREG 019A  
                                               _TXSTA 019E                       __size_of_Button_DefaultCallback 0001  
                                ??_MTOUCH_needReburst 0071                       __size_of_Sensor_DefaultCallback 0001  
                             __size_of_Sensor_Service 0093                 __end_of_MTOUCH_Sensor_Scan_Initialize 0B79  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 0B69  
                                      _WDT_Initialize 07FC                               Sensor_setSampled@sensor 0071  
                                        LED_PROCESS@x 0073                      __size_of_Button_State_NotPressed 00A3  
                                               pclath 000A                                  _Sensor_Sampled_Reset 0AD0  
                                               status 0003                                                 wtemp0 007E  
                                     _TMR2_StartTimer 0A73                      __size_of_TMR2_LoadPeriodRegister 0005  
                           __size_of_Sensor_setActive 0007                                Sensor_isEnabled@sensor 0072  
                                     __initialization 0017                                          __end_of_main 0CA8  
                                _Sensor_setCalibrated 0AF0                               __end_of_TMR2_Initialize 0AE7  
                                      __CFG_LPBOR$OFF 0000                           ?_INTERRUPT_InterruptManager 0070  
                      ??_EUSART_SetRxInterruptHandler 0073                      __end_of_MTOUCH_Button_Initialize 0EC5  
                                              ??_main 007C                               _MTOUCH_Sensor_Calibrate 0B9A  
                           Sensor_Service@sensor_adc1 0044                             Sensor_Service@sensor_adc2 0045  
                             ??_Button_Reading_Update 007C                  MTOUCH_Sensor_Sampled_ResetAll@sensor 0073  
                            ?_Button_Deviation_Update 0070                                __end_of_WDT_Initialize 0800  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0077  
           __end_of_EUSART_DefaultFramingErrorHandler 0A6D            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0070                    ?_EUSART_DefaultFramingErrorHandler 0070  
                   _EUSART_DefaultFramingErrorHandler 0A6C                            _EUSART_OverrunErrorHandler 00CE  
                __size_of_MTOUCH_Sensor_RawSample_Get 0017                                                _APFCON 011D  
                                              _ANSELA 018C                                                _ANSELB 018D  
                                              _ANSELC 018E                                                _BORCON 0116  
                                              i1l3974 0E7E                                                i1l3968 0E70  
                                              i1l3978 0E8C                                 ?_Sensor_Sampled_Reset 0070  
                                              _OSCCON 0099                                                _SPBRGH 019C  
                                              _SPBRGL 019B                                                _WDTCON 0097  
                   MTOUCH_Button_InitializeAll@button 0020                        ??_Button_Reading_Update_Helper 0079  
                              _Button_DefaultCallback 0A6E                       __end_of_MTOUCH_Service_Mainloop 0CDF  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 0AE7  
                              _Sensor_DefaultCallback 0A6F                                         _packet_sample 0051  
                                              ___bmul 0B89                                 ?_Sensor_setCalibrated 0070  
                        Sensor_DefaultCallback@sensor 0071                                        __CFG_STVREN$ON 0000  
                    __size_of_myButtonPressedCallback 0013                                                _memcpy 0DA7  
                    __end_of_MTOUCH_Button_ServiceAll 0B69                                  __size_of_LED_PROCESS 009D  
                        Sensor_autoCalibration@sensor 007A                               _MTOUCH_Sensor_SampleAll 0C1E  
                        Button_DefaultCallback@button 0077                                  ?_Sensor_isCalibrated 0070  
                                     ?_WDT_Initialize 0070                              ?_Sensor_RawSample_Update 0070  
                          __end_of_Sensor_Acquisition 07FC                                __size_of_RELAY_PROCESS 009D  
                             ?_Button_Baseline_Update 0070                   Sensor_postAcquisitionProcess@sensor 0079  
                             __end_of_TMR2_StartTimer 0A76                    __size_of_Sensor_setCalibratAcqTime 000D  
            __end_of_MTOUCH_Button_SetPressedCallback 0A91             __size_of_MTOUCH_Button_SetPressedCallback 0006  
                  ??_MTOUCH_Button_SetPressedCallback 0073                     ?_MTOUCH_Button_SetPressedCallback 0071  
                    _MTOUCH_Button_SetPressedCallback 0A8B                              __size_of_Sensor_isActive 000D  
                     MTOUCH_Sensor_RawSample_Get@name 0078                   Sensor_getScanGroupIndex@sensorGroup 0074  
                                   _SYSTEM_Initialize 0BBC                               __end_of__initialization 0047  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0075                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 005F                            __end_of_Button_Tick_helper 0DA7  
                       MTOUCH_Sensor_Calibrate@sensor 0076           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024  
                                 ___bmul@multiplicand 0071                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 0CA8                                          __pidataBANK0 0B22  
                                        __pidataBANK1 0D36           __end_of_MTOUCH_Button_SetNotPressedCallback 0A8B  
        __size_of_MTOUCH_Button_SetNotPressedCallback 0006                 ??_MTOUCH_Button_SetNotPressedCallback 0073  
                ?_MTOUCH_Button_SetNotPressedCallback 0071                   _MTOUCH_Button_SetNotPressedCallback 0A85  
                                 ??_SYSTEM_Initialize 007C                            __end_of_MTOUCH_Button_Tick 0C4A  
                    __end_of_MTOUCH_Sensor_Initialize 0C1E                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 0B79                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 06C4                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 0F49                      __end_of_Sensor_Acq_ExecutePacket 0209  
                          ?_Button_State_Initializing 0024                                  Button_Service@button 002C  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 0049  
                      __end_of_Button_Baseline_Update 05B3                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 0E8F  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0491  
                             _Button_State_NotPressed 02B4                         __size_of_MTOUCH_Sensor_Enable 0011  
                                  _Sensor_setInactive 0AC2                                     _sensor_scan_group 1045  
                           __end_of_SYSTEM_Initialize 0BCE                                     _lowpowerActivated 005A  
                    MTOUCH_Sensor_isCalibrated@sensor 0076                                ??_Sensor_Sampled_Reset 0071  
                                          __pbssBANK0 0049                                            __pbssBANK1 00C4  
                                          __pbssBANK2 0120                               _TMR2_LoadPeriodRegister 0A80  
                          ??_myButtonReleasedCallback 0072                          Sensor_loadADCSettings@sensor 0079  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 0ABB  
                         __size_of_EUSART_Receive_ISR 0032                            __end_of_mtouch_button_init 1040  
                                   _last_touch_status 0057           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025  
                              ??_Sensor_setCalibrated 0071                                            __pmaintext 0C8F  
                                       _RELAY_PROCESS 0357                                               ?___bmul 0071  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                        MTOUCH_Sensor_wasSampled@sensor 0076  
                                          __pintentry 0004                                __end_of_Button_Service 0F9E  
                                             ?_memcpy 0071                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 0CFB  
                         _MTOUCH_Button_InitializeAll 0CDF                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0071                   __end_of_MTOUCH_Sensor_InitializeAll 0B59  
                         _MTOUCH_Sensor_InitializeAll 0B4B                             ??_MTOUCH_Sensor_SampleAll 0046  
                     __end_of_Sensor_RawSample_Update 0D80                                  ??_Sensor_setInactive 0071  
                   __size_of_MTOUCH_Sensor_wasSampled 000E                             ?_MTOUCH_Sensor_wasSampled 0070  
                                       _eusartRxCount 005D                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 0071                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 1000                                __end_of_Sensor_Service 0524  
                             Sensor_Service@scanGroup 0042                              _MTOUCH_Button_ServiceAll 0B59  
                           __end_of_sensor_scan_group 1049                         __size_of_EUSART_RxDataHandler 0017  
                    __size_of_MTOUCH_Service_Mainloop 001C                          __end_of_Button_State_Pressed 07A0  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0073  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0079  
                     Sensor_setCalibratAcqTime@sensor 0071                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 0078                  __size_of_Sensor_isCalibratingAcqTime 0008  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021                             ??_MTOUCH_Button_isPressed 0071  
                                   ??_Sensor_isActive 0071                   __size_of_EUSART_DefaultErrorHandler 0003  
                       MTOUCH_Button_Buttonmask_Get@i 0076                                        ?_RELAY_PROCESS 0070  
               __end_of_Sensor_postAcquisitionProcess 0EFC                __size_of_Sensor_postAcquisitionProcess 0037  
                       _Sensor_postAcquisitionProcess 0EC5                               _myButtonPressedCallback 0BCE  
                             Sensor_Acquisition@retry 003D                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                        MTOUCH_Button_Initialize@button 007A  
                                         _AD2CON0bits 0791                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 0BBC  
                                             __ptext2 07FC                                               __ptext3 0ADF  
                                             __ptext4 0CFB                                               __ptext5 0AA9  
                                             __ptext6 0AFC                                               __ptext7 0B4B  
                                             __ptext8 0C09                                               __ptext9 0BAB  
                         Button_Reading_Update@button 0020                              _MTOUCH_Sensor_Initialize 0C09  
                               _OSCILLATOR_Initialize 0AA9                                             _T2CONbits 001C  
                                        __size_of_abs 0017                             ??_Button_State_NotPressed 0025  
                                     ?_Sensor_Service 0070                              ??_PIN_MANAGER_Initialize 0071  
                      __size_of_Button_Reading_Update 000E                           __size_of_MTOUCH_needReburst 0002  
                       __end_of_Button_Reading_Update 0B3D                     MTOUCH_Sensor_InitializeAll@sensor 007A  
                            _Sensor_Acq_ExecutePacket 004B                                      _callback_sampled 0069  
                           ??_TMR2_LoadPeriodRegister 0071                       Sensor_RawSample_Update@adcIndex 0076  
                          __size_of_SYSTEM_Initialize 0012                                               clrloop0 0AB0  
                                    _callback_pressed 0067                        MTOUCH_Sensor_Initialize@sensor 0078  
                                end_of_initialization 0047                               ?_Button_DefaultCallback 0077  
               __end_of_EUSART_SetOverrunErrorHandler 0AA3                __size_of_EUSART_SetOverrunErrorHandler 0006  
                       _EUSART_SetOverrunErrorHandler 0A9D                                               memcpy@d 007A  
                                             memcpy@n 0073                                               memcpy@s 0077  
                                             init_ram 0AB5                                               initloop 0AB6  
                             ?_Sensor_DefaultCallback 0071                         Sensor_Acquisition@sensor_adc1 003E  
                       Sensor_Acquisition@sensor_adc2 003B                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 0E2D                          ??_MTOUCH_Sensor_isCalibrated 0075  
                                  ?_EUSART_Initialize 0070                   __end_of_MTOUCH_Sensor_RawSample_Get 0C78  
                         _MTOUCH_Sensor_RawSample_Get 0C61                                             _RCSTAbits 019D  
                                 ??_EUSART_Initialize 0073                                      ??_WDT_Initialize 0071  
                              Sensor_setActive@sensor 0071                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0034                         Button_Deviation_Update@button 0020  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0022              MTOUCH_Button_SetPressedCallback@callback 0071  
                          MTOUCH_Sensor_Enable@sensor 0076                  Sensor_Acq_ExecutePacket@AD2CON2_temp 0023  
                                 _callback_notPressed 0065                   __size_of_MTOUCH_Sensor_isCalibrated 0015  
                      __end_of_Button_DefaultCallback 0A6F                       __size_of_EUSART_SetErrorHandler 0006  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032                                    _sensor_globalFlags 0059  
                            __end_of_Sensor_isEnabled 0B89                            Sensor_setCalibrated@sensor 0071  
                      __end_of_Sensor_DefaultCallback 0A70                      __end_of_myButtonReleasedCallback 0A6E  
                           __end_of_EUSART_Initialize 0E5D                              ??_Sensor_autoCalibration 0075  
                                           _TXSTAbits 019E                                       ??_RELAY_PROCESS 0071  
                           ??_myButtonPressedCallback 0078                      __size_of_Sensor_RawSample_Update 0026  
                                  _Sensor_Acquisition 07A0                              ??_Sensor_loadADCSettings 0073  
                                       ??_LED_PROCESS 0071                                  _Button_State_Pressed 073A  
                                      __end_of___bmul 0B9A                    __end_of_EUSART_DefaultErrorHandler 0A73  
                          _EUSART_DefaultErrorHandler 0A70                                   ?_Sensor_Acquisition 003B  
                          ??_MTOUCH_Button_Initialize 0077           MTOUCH_Button_SetNotPressedCallback@callback 0071  
                     ??_MTOUCH_Sensor_Scan_Initialize 0071                        ?_Sensor_postAcquisitionProcess 0070  
                                  _Button_Tick_helper 0D80                                        __end_of_memcpy 0DD2  
                              ?_OSCILLATOR_Initialize 0070                                   MTOUCH_Button_Tick@i 0075  
                            __end_of_Sensor_setActive 0AC2                      TMR2_LoadPeriodRegister@periodVal 0071  
                         ??_Button_State_Initializing 0025                                   start_initialization 0017  
                             _MTOUCH_Service_Mainloop 0CC3                       __size_of_PIN_MANAGER_Initialize 001D  
                                  _MTOUCH_Button_Tick 0C34                                   ?_Button_Tick_helper 0070  
                                         __end_of_abs 0C8F                                        _TMR2_StopTimer 0A76  
        EUSART_SetRxInterruptHandler@interruptHandler 0071                                  ??_Sensor_Acquisition 003C  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 0024  
                      Sensor_autoCalibration@adcIndex 0079                        ?_EUSART_SetOverrunErrorHandler 0071  
                    __end_of_MTOUCH_Sensor_wasSampled 0B4B                                  ??_Button_Tick_helper 0071  
                        __end_of_MTOUCH_Sensor_Enable 0BBC                                          _packet_noise 0055  
                          _EUSART_FramingErrorHandler 006C                                              ??___bmul 0072  
                               ?_Button_State_Pressed 0024                                _EUSART_SetErrorHandler 0A91  
                          ??_MTOUCH_Button_ServiceAll 002D                                           __pdataBANK0 005F  
                                         __pdataBANK1 00A0                                              ??_memcpy 0075  
                         __end_of_Sensor_isCalibrated 0AF0                          ??_Button_Baseline_Initialize 0020  
                                       _sample_period 006B                                  ??_MTOUCH_Button_Tick 0074  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 0071  
                        ?_Sensor_isCalibratingAcqTime 0070                       __end_of_myButtonPressedCallback 0BE1  
                                 __end_of_LED_PROCESS 0491                                __end_of_TMR2_StopTimer 0A79  
                                         __pbssCOMMON 007C                                             ___latbits 0002  
                                       __pcstackBANK0 0020                           _Sensor_loadADCSettings$1165 0076  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 0B15  
                      MTOUCH_Button_ServiceAll@button 002E                                   Sensor_Service@error 0043  
                          __end_of_EUSART_Receive_ISR 0E8F                         __size_of_Sensor_Sampled_Reset 0007  
                          __size_of_EUSART_Initialize 0030                               _Button_Deviation_Update 063D  
                          ?_Sensor_setCalibratAcqTime 0070                      _EUSART_RxDefaultInterruptHandler 006E  
                           _Button_State_Initializing 0F9E                    __end_of_MTOUCH_Sensor_isCalibrated 0C09  
                          _MTOUCH_Sensor_isCalibrated 0BF4                                             __pnvBANK0 006C  
                                           __pnvBANK1 00CC                       __size_of_Sensor_autoCalibration 008A  
                   __size_of_Sensor_getScanGroupIndex 002D                                     _Sensor_setSampled 0AC9  
                           ?_Sensor_getScanGroupIndex 0070                          __end_of_EUSART_RxDataHandler 0C61  
                              _PIN_MANAGER_Initialize 0CFB                                      ??_Button_Service 0029  
                            ?_MTOUCH_Sensor_Calibrate 0070                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                       __size_of_Sensor_setCalibrated 000C                       __size_of_Sensor_loadADCSettings 00AB  
                                            _AAD1CON2 0713                                              _AAD1CON3 0714  
                                            _AAD2CON3 0794                                              _AAD1RES0 071A  
                                        _eusartRxHead 007C                                              _AAD2RES0 079A  
                                        _eusartRxTail 005E                                      ??_Sensor_Service 003F  
                          ??_Sensor_Acq_ExecutePacket 0020                          ??_INTERRUPT_InterruptManager 0071  
                                 ??_Sensor_setSampled 0071                     __size_of_myButtonReleasedCallback 0001  
                           ?_myButtonReleasedCallback 0077                             ??_MTOUCH_Service_Mainloop 0048  
                                            _ADCOMCON 0712                           __size_of_Sensor_setInactive 0007  
                      Sensor_Acq_ExecutePacket@last_a 0028                        Sensor_Acq_ExecutePacket@last_b 002A  
                __end_of_MTOUCH_Button_Buttonmask_Get 0D36                 __size_of_MTOUCH_Button_Buttonmask_Get 001E  
                        _MTOUCH_Button_Buttonmask_Get 0D18                                       ?_TMR2_StopTimer 0070  
                       ??_Sensor_isCalibratingAcqTime 0071                                         ??_MTOUCH_Tick 0076  
                                      _eusartRxBuffer 00C4                             __end_of_Sensor_setSampled 0AD0  
                                            _LATAbits 010C                EUSART_SetErrorHandler@interruptHandler 0071  
                                            _LATBbits 010D                                              _LATCbits 010E  
                             _Sensor_RawSample_Update 0D5A                     __end_of_Sensor_setCalibratAcqTime 0B15  
                                           clear_ram0 0AAF                                              _PIE1bits 0091  
                                   _eusartRxLastError 005C                              __size_of_TMR2_StartTimer 0003  
                 __size_of_INTERRUPT_InterruptManager 0011                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0073                Sensor_Acq_ExecutePacket@packet_counter 002C  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0025  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 0BF4               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 0BE1                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 0A80            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 0A7C                    Sensor_Acq_ExecutePacket@ADxIF_flag 0026  
                                         _LED_PROCESS 03F4                              _MTOUCH_Sensor_wasSampled 0B3D  
                                  _mtouch_time_toScan 005B                              ??_Button_Baseline_Update 0071  
                             __end_of_Sensor_isActive 0B22                                _Sensor_autoCalibration 05B3  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 0077  
                       ?_MTOUCH_Button_Buttonmask_Get 0070                                _Sensor_loadADCSettings 0209  
                                _MTOUCH_Sensor_Enable 0BAB                              Button_Tick_helper@button 0073  
                           ??_Button_Deviation_Update 0071                                 _Button_Reading_Update 0B2F  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                   ??_TMR2_Initialize 0071                                   __end_of_MTOUCH_Tick 0A7C  
                                   _MTOUCH_Initialize 0AFC                       __end_of_MTOUCH_Sensor_Calibrate 0BAB  
                                  ??_Sensor_isEnabled 0071                                    ?_MTOUCH_Initialize 0070  
              Sensor_postAcquisitionProcess@deviation 0076                                             memcpy@tmp 0076  
                                          _APFCONbits 011D                               ??_OSCILLATOR_Initialize 0071  
                  __end_of_Button_Baseline_Initialize 0E2D                            _Button_Baseline_Initialize 0DFF  
                                 _EUSART_ErrorHandler 00CC                                   ??_MTOUCH_Initialize 007C  
                         ?_EUSART_DefaultErrorHandler 0070                              ?_Button_State_NotPressed 0024  
                                  Button_Service@name 002B                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 0071  
                Sensor_Scanfrequency_Evaluation@retry 0035                                    ??_Sensor_setActive 0071  
                                _EUSART_RxDataHandler 0C4A                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 0CDF                                              __ptext11 0DA7  
                                            __ptext20 0C34                                              __ptext12 0E2D  
                                            __ptext21 0D80                                              __ptext13 0AA3  
                                            __ptext30 0EC5                                              __ptext22 0BE1  
                                            __ptext14 0A9D                                              __ptext31 0AC2  
                                            __ptext23 0AD0                                              __ptext15 0A97  
                                            __ptext40 0B79                                              __ptext32 0ABB  
                                            __ptext24 0C1E                                              __ptext16 0A91  
                                            __ptext41 0B15                                              __ptext33 06C4  
                                            __ptext25 0491                                              __ptext17 0CC3  
                                            __ptext50 0F49                                              __ptext42 05B3  
                                            __ptext34 004B                                              __ptext26 0AC9  
                                            __ptext18 0002                                              __ptext51 0B3D  
                                            __ptext43 0C78                                              __ptext35 0A76  
                                            __ptext27 0D5A                                              __ptext19 0A79  
                                            __ptext60 0D18                                              __ptext52 0BF4  
                                            __ptext44 0AF0                                              __ptext36 0A73  
                                            __ptext28 0A6F                                              __ptext61 0CA8  
                                            __ptext53 02B4                                              __ptext45 0B08  
                                            __ptext37 0A80                                              __ptext29 07A0  
                                            __ptext70 0B89                                              __ptext62 03F4  
                                            __ptext54 0F9E                                              __ptext46 0AD7  
                                            __ptext38 0209                                              __ptext71 063D  
                                            __ptext63 0E8F                                              __ptext55 073A  
                                            __ptext47 0DD2                                              __ptext39 0AE7  
                                            __ptext72 0A8B                                              __ptext64 0B9A  
                                            __ptext56 0BCE                                              __ptext48 0B69  
                                            __ptext73 0A85                                              __ptext65 0524  
                                            __ptext57 0A6E                                              __ptext49 0B59  
                                            __ptext66 0DFF                                              __ptext58 0A6D  
                                            __ptext75 0E5D                                              __ptext67 0B2F  
                                            __ptext59 0357                                              __ptext76 0A7C  
                                            __ptext68 0EFC                                              __ptext77 0A6C  
                                            __ptext69 0C61                                              __ptext78 0A70  
                                            __ptext79 0C4A                             __end_of_MTOUCH_Initialize 0B08  
                           ??_Sensor_RawSample_Update 0075                            __size_of_Sensor_setSampled 0007  
                                       __size_of_main 0019                       __end_of_MTOUCH_Sensor_SampleAll 0C34  
                    Sensor_Scanfrequency_Evaluation@i 003A                               ?_EUSART_SetErrorHandler 0071  
                               __end_of_RELAY_PROCESS 03F4         EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                                            int$flags 007E                    __size_of_Button_State_Initializing 0062  
                                   ??_TMR2_StartTimer 0071                    __end_of_INTERRUPT_InterruptManager 0015  
                          _INTERRUPT_InterruptManager 0004                 __end_of_EUSART_SetFramingErrorHandler 0A9D  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 0A97  
                                      RELAY_PROCESS@x 0073                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 0047  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 0120                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 00A0  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                     __end_of_MTOUCH_Button_isPressed 0CC3                      __end_of_Sensor_getScanGroupIndex 0DFF  
                                   __CFG_BOREN$NSLEEP 0000                                           _MTOUCH_Tick 0A79  
                              ?_Button_Reading_Update 0070                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0079  
                   __size_of_MTOUCH_Button_Initialize 0036                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 005C  
                      ??_MTOUCH_Button_Buttonmask_Get 0073                              ?_myButtonPressedCallback 0077  
             __end_of_Sensor_Scanfrequency_Evaluation 073A              __size_of_Sensor_Scanfrequency_Evaluation 0076  
                   ??_Sensor_Scanfrequency_Evaluation 002F                      ?_Sensor_Scanfrequency_Evaluation 002E  
                     _Sensor_Scanfrequency_Evaluation 06C4                               ?_PIN_MANAGER_Initialize 0070  
                         ??_Sensor_setCalibratAcqTime 0071                        __end_of_EUSART_SetErrorHandler 0A97  
                                   __CFG_CLKOUTEN$OFF 0000                           ?_MTOUCH_Sensor_isCalibrated 0070  
                __end_of_EUSART_SetRxInterruptHandler 0AA9                 __size_of_EUSART_SetRxInterruptHandler 0006  
                        _EUSART_SetRxInterruptHandler 0AA3                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 0357                                    _EUSART_Receive_ISR 0E5D  
       EUSART_SetFramingErrorHandler@interruptHandler 0071                          __end_of_Sensor_Sampled_Reset 0AD7  
                                    ??_TMR2_StopTimer 0071                       __end_of_TMR2_LoadPeriodRegister 0A85  
                         __size_of_MTOUCH_Button_Tick 0016                                         __pstringtext1 1040  
                                       __pstringtext2 1045                                         __pstringtext3 1000  
                                 ?_EUSART_Receive_ISR 0070                         ??_MTOUCH_Button_InitializeAll 007B  
                            ??_Button_DefaultCallback 0078                         ??_MTOUCH_Sensor_InitializeAll 0079  
                Sensor_Acq_ExecutePacket@activeSensor 0027                      __size_of_MTOUCH_Sensor_Calibrate 0011  
                              ??_MTOUCH_Sensor_Enable 0075                     Sensor_isCalibratingAcqTime@sensor 0071  
                        __size_of_Sensor_isCalibrated 0009                              ??_Sensor_DefaultCallback 0072  
                        __end_of_Sensor_setCalibrated 0AFC                  __end_of_Button_Reading_Update_Helper 0F49  
               __size_of_Button_Reading_Update_Helper 004D                          _Button_Reading_Update_Helper 0EFC  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0024                            __size_of_MTOUCH_Initialize 000C  
                      __end_of_PIN_MANAGER_Initialize 0D18                                _Button_Baseline_Update 0524  
                         MTOUCH_Button_isPressed@name 0072                                  ??_EUSART_Receive_ISR 0071  
                          ??_MTOUCH_Sensor_wasSampled 0075  
